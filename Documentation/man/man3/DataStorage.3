.TH "DataStorage" 3 "Sat Feb 12 2022" "Version 1.2" "Regions Of Interest (ROI) Profiler" \" -*- nroff -*-
.ad l
.nh
.SH NAME
DataStorage
.SH SYNOPSIS
.br
.PP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBDataStorage\fP (string \fBidentifierString\fP)"
.br
.ti -1c
.RI "void \fBstartEvent\fP (int identifier)"
.br
.ti -1c
.RI "void \fBendEvent\fP (int identifier)"
.br
.ti -1c
.RI "void \fBprint\fP ()"
.br
.in -1c
.SS "Public Attributes"

.in +1c
.ti -1c
.RI "\fBStatementRuntime\fP * \fBstatementRuntimeArray\fP"
.br
.ti -1c
.RI "int \fBstatementRuntimeArraySize\fP"
.br
.in -1c
.SH "Detailed Description"
.PP 
Definition at line 3 of file DataStorage\&.cpp\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "DataStorage::DataStorage (string identifierString)\fC [inline]\fP"

.PP
Definition at line 13 of file DataStorage\&.cpp\&.
.PP
.nf
13                                            {
14         // count entries in identifierStrings
15         statementRuntimeArraySize = std::count( identifierString\&.begin( ), identifierString\&.end( ), ',' ) + 1;
16         statementRuntimeArray = new StatementRuntime[statementRuntimeArraySize];
17         statementRuntimeArraySize = 0;
18 
19         // split identifier string to array
20         std::stringstream identifierStream( identifierString );
21         string segment;
22         while ( std::getline( identifierStream, segment, ',' )) {
23             statementRuntimeArray[ statementRuntimeArraySize++ ]\&.identifier = segment;
24         }
25     }
.fi
.PP
References StatementRuntime::identifier, identifierString, statementRuntimeArray, and statementRuntimeArraySize\&.
.SH "Member Function Documentation"
.PP 
.SS "void DataStorage::endEvent (int identifier)\fC [inline]\fP"

.PP
Definition at line 46 of file DataStorage\&.cpp\&.
.PP
.nf
46                                     {
47         statementRuntimeArray[ identifier ]\&.endTime = high_resolution_clock::now( );
48         //cout << "\ntime:" << high_resolution_clock::now()\&.time_since_epoch()\&.count();
49     }
.fi
.PP
References StatementRuntime::endTime, and statementRuntimeArray\&.
.PP
Referenced by main(), prime_sieve::runSieve(), and BitArray::setFlagsFalse()\&.
.SS "void DataStorage::print ()\fC [inline]\fP"

.PP
Definition at line 52 of file DataStorage\&.cpp\&.
.PP
.nf
52                   {
53 
54         // calculate total runtime
55         MeasurementEvaluation total;
56         total\&.identifier = "Runtime";
57         total\&.duration = statementRuntimeArray[ 0 ]\&.endTime - statementRuntimeArray[ 0 ]\&.startTime;
58 
59         //ofstream outfile;
60         //outfile\&.open("Time_Without_Print\&.txt", ios_base::app);
61         //outfile << hlibhelp::convertToSpecifiedUnit( total\&.duration, "s" ) << "\n";
62 
63         // calculate scope runtime
64         MeasurementEvaluation scope;
65         scope\&.identifier = "Scope";
66         scope\&.duration = statementRuntimeArray[ 1 ]\&.endTime - statementRuntimeArray[ 1 ]\&.startTime;
67 
68         // sum of runtime of all annotated statements
69         std::chrono::duration<double, std::nano> statementRuntimeSum;
70 
71         // get unit for runtime if scope measured
72         string unit = hlibhelp::getUnit( total\&.duration );
73 
74         // normally scope is measured
75         bool scopeIsMeasured = true;
76 
77         cout << scope\&.duration\&.count();
78         // if scope is not measured, calculate time between first and last counter
79         if ( scope\&.duration\&.count( ) == 0 ) {
80             scope\&.duration = statementRuntimeArray[ statementRuntimeArraySize - 1 ]\&.endTime -
81                              statementRuntimeArray[ 2 ]\&.startTime;
82             // get unit for runtime
83             unit = hlibhelp::getUnit( scope\&.duration );
84             scopeIsMeasured = false;
85         }
86 
87         // print the statistic banner
88         hlibhelp::printStatisticBanner( );
89 
90         // print table header
91         hlibhelp::printTableSeparator( 115, "—", "top", "\n" );
92         hlibhelp::printTableRow( "ID", "ClassType", 0, "", "Scope", "Total", "Calls" );
93         hlibhelp::printTableSeparator( 115, "—", "middle", "\n" );
94 
95         double sumCalls = 0;
96 
97         // iterate through all measured statements
98         for ( int i = 2; i < statementRuntimeArraySize; i++ ) {
99 
100             // calculate duration
101             MeasurementEvaluation currentEvaluation;
102             currentEvaluation\&.duration = statementRuntimeArray[ i ]\&.endTime - statementRuntimeArray[ i ]\&.startTime;
103             currentEvaluation\&.totalUsage = currentEvaluation\&.duration / total\&.duration * 100;
104             currentEvaluation\&.scopeUsage = currentEvaluation\&.duration / scope\&.duration * 100;
105             sumCalls += statementRuntimeArray[ i ]\&.called;
106             std::ostringstream calledToString;
107             calledToString << std::fixed << setprecision(0) << statementRuntimeArray[ i ]\&.called;
108             currentEvaluation\&.called = calledToString\&.str();
109 
110             statementRuntimeSum += currentEvaluation\&.duration;
111 
112             // split identifier in id and class type
113             string *segments = hlibhelp::getSegmentsOfString( statementRuntimeArray[ i ]\&.identifier );
114 
115             // current evaluation to string
116             double durationBeautified = hlibhelp::convertToSpecifiedUnit( currentEvaluation\&.duration, unit );
117             string scopeUsageBeautified = hlibhelp::getUsageAsString( currentEvaluation\&.scopeUsage );
118             string totalUsageBeautified = hlibhelp::getUsageAsString( currentEvaluation\&.totalUsage );
119 
120             // print current evaluation the row table
121             hlibhelp::printTableRow( segments[ 1 ], segments[ 0 ], durationBeautified, unit,
122                                      scopeUsageBeautified, totalUsageBeautified, currentEvaluation\&.called );
123 
124         }
125 
126         // evaluate hagn tool runtime
127         MeasurementEvaluation hagnTool;
128         hagnTool\&.identifier = "Perf Counter";
129         hagnTool\&.duration = scope\&.duration - statementRuntimeSum;
130         hagnTool\&.totalUsage = hagnTool\&.duration / total\&.duration * 100;
131         hagnTool\&.scopeUsage = hagnTool\&.duration / scope\&.duration * 100;
132         std::ostringstream calledToString;
133 
134         sumCalls = sumCalls*2;
135         calledToString << std::fixed << setprecision(0) << sumCalls;
136         hagnTool\&.called = calledToString\&.str();
137 
138         ofstream callsFile;
139         callsFile\&.open("Calls\&.txt", ios_base::app);
140         callsFile << calledToString\&.str() << "\n";
141 
142         // hagn tool evaluation to string
143         double hagnToolDurationBeautified = hlibhelp::convertToSpecifiedUnit( hagnTool\&.duration, unit );
144         string totalUsageBeautified = hlibhelp::getUsageAsString( hagnTool\&.totalUsage );
145         string scopeUsageBeautified = hlibhelp::getUsageAsString( hagnTool\&.scopeUsage );
146 
147         // print hagnTool row table
148         hlibhelp::printTableRow( hagnTool\&.identifier, "", hagnToolDurationBeautified, unit, scopeUsageBeautified,
149                                  totalUsageBeautified, hagnTool\&.called );
150 
151 
152         // check if scope measurement should be printed
153         if ( scopeIsMeasured ) {
154             hlibhelp::printTableSeparator( 115, "—", "middle", "\n" );
155             double scopeDurationBeautified = hlibhelp::convertToSpecifiedUnit( scope\&.duration, unit );
156             hlibhelp::printTableRow( scope\&.identifier, "", scopeDurationBeautified, unit, "", "", "" );
157         } else {
158             hlibhelp::printTableSeparator( 115, "—", "middle", "\n" );
159         }
160 
161         // total duration to string
162         double totalDurationBeautified = hlibhelp::convertToSpecifiedUnit( total\&.duration, unit );
163 
164         // print runtime row table
165         hlibhelp::printTableRow( total\&.identifier, "", totalDurationBeautified, unit, "", "", "" );
166         hlibhelp::printTableSeparator( 115, "—", "bottom", "\n" );
167         cout << "\n\n";
168 
169     }
.fi
.PP
References StatementRuntime::called, MeasurementEvaluation::called, hlibhelp::convertToSpecifiedUnit(), MeasurementEvaluation::duration, StatementRuntime::endTime, hlibhelp::getSegmentsOfString(), hlibhelp::getUnit(), hlibhelp::getUsageAsString(), MeasurementEvaluation::identifier, hlibhelp::printStatisticBanner(), hlibhelp::printTableRow(), hlibhelp::printTableSeparator(), MeasurementEvaluation::scopeUsage, StatementRuntime::startTime, statementRuntimeArray, statementRuntimeArraySize, and MeasurementEvaluation::totalUsage\&.
.PP
Referenced by main()\&.
.SS "void DataStorage::startEvent (int identifier)\fC [inline]\fP"

.PP
Definition at line 28 of file DataStorage\&.cpp\&.
.PP
.nf
28                                       {
29         statementRuntimeArray[ identifier ]\&.called++;
30         // if identifier is already measured, sum runtimes
31         if ( statementRuntimeArray[ identifier ]\&.startTime != invalidTime &&
32              statementRuntimeArray[ identifier ]\&.endTime != invalidTime ) {
33             statementRuntimeArray[ identifier ]\&.startTime = high_resolution_clock::now( ) -
34                                                             ( statementRuntimeArray[ identifier ]\&.endTime -
35                                                               statementRuntimeArray[ identifier ]\&.startTime );
36         }
37             // else add timestamp as start time
38         else {
39             statementRuntimeArray[ identifier ]\&.startTime = high_resolution_clock::now( );
40         }
41 
42         //cout << "\ntime:" << high_resolution_clock::now()\&.time_since_epoch()\&.count();
43     }
.fi
.PP
References StatementRuntime::called, StatementRuntime::endTime, invalidTime, StatementRuntime::startTime, and statementRuntimeArray\&.
.PP
Referenced by main(), prime_sieve::runSieve(), and BitArray::setFlagsFalse()\&.
.SH "Member Data Documentation"
.PP 
.SS "\fBStatementRuntime\fP* DataStorage::statementRuntimeArray"

.PP
Definition at line 7 of file DataStorage\&.cpp\&.
.PP
Referenced by DataStorage(), endEvent(), print(), and startEvent()\&.
.SS "int DataStorage::statementRuntimeArraySize"

.PP
Definition at line 10 of file DataStorage\&.cpp\&.
.PP
Referenced by DataStorage(), and print()\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for Regions Of Interest (ROI) Profiler from the source code\&.
