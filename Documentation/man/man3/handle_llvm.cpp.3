.TH "/Users/maximilian/clang-llvm/clang/tools/clang-fuzzer/handle-llvm/handle_llvm.cpp" 3 "Sat Feb 12 2022" "Version 1.2" "Regions Of Interest (ROI) Profiler" \" -*- nroff -*-
.ad l
.nh
.SH NAME
/Users/maximilian/clang-llvm/clang/tools/clang-fuzzer/handle-llvm/handle_llvm.cpp
.SH SYNOPSIS
.br
.PP
\fC#include 'handle_llvm\&.h'\fP
.br
\fC#include 'input_arrays\&.h'\fP
.br
\fC#include 'llvm/ADT/Triple\&.h'\fP
.br
\fC#include 'llvm/Analysis/TargetLibraryInfo\&.h'\fP
.br
\fC#include 'llvm/Analysis/TargetTransformInfo\&.h'\fP
.br
\fC#include 'llvm/CodeGen/CommandFlags\&.h'\fP
.br
\fC#include 'llvm/CodeGen/MachineModuleInfo\&.h'\fP
.br
\fC#include 'llvm/CodeGen/TargetPassConfig\&.h'\fP
.br
\fC#include 'llvm/ExecutionEngine/JITEventListener\&.h'\fP
.br
\fC#include 'llvm/ExecutionEngine/JITSymbol\&.h'\fP
.br
\fC#include 'llvm/ExecutionEngine/MCJIT\&.h'\fP
.br
\fC#include 'llvm/ExecutionEngine/ObjectCache\&.h'\fP
.br
\fC#include 'llvm/ExecutionEngine/RTDyldMemoryManager\&.h'\fP
.br
\fC#include 'llvm/ExecutionEngine/SectionMemoryManager\&.h'\fP
.br
\fC#include 'llvm/IR/IRPrintingPasses\&.h'\fP
.br
\fC#include 'llvm/IR/LLVMContext\&.h'\fP
.br
\fC#include 'llvm/IR/LegacyPassManager\&.h'\fP
.br
\fC#include 'llvm/IR/LegacyPassNameParser\&.h'\fP
.br
\fC#include 'llvm/IR/Module\&.h'\fP
.br
\fC#include 'llvm/IR/Verifier\&.h'\fP
.br
\fC#include 'llvm/IRReader/IRReader\&.h'\fP
.br
\fC#include 'llvm/Pass\&.h'\fP
.br
\fC#include 'llvm/PassRegistry\&.h'\fP
.br
\fC#include 'llvm/Support/MemoryBuffer\&.h'\fP
.br
\fC#include 'llvm/Support/SourceMgr\&.h'\fP
.br
\fC#include 'llvm/Support/TargetRegistry\&.h'\fP
.br
\fC#include 'llvm/Support/TargetSelect\&.h'\fP
.br
\fC#include 'llvm/Target/TargetMachine\&.h'\fP
.br
\fC#include 'llvm/Transforms/IPO\&.h'\fP
.br
\fC#include 'llvm/Transforms/IPO/PassManagerBuilder\&.h'\fP
.br
\fC#include 'llvm/Transforms/Vectorize\&.h'\fP
.br

.SS "Typedefs"

.in +1c
.ti -1c
.RI "typedef void(* \fBLLVMFunc\fP) (int *, int *, int *, int)"
.br
.in -1c
.SH "Typedef Documentation"
.PP 
.SS "typedef void(* LLVMFunc) (int *, int *, int *, int)"

.PP
Definition at line 54 of file handle_llvm\&.cpp\&.
.SH "Author"
.PP 
Generated automatically by Doxygen for Regions Of Interest (ROI) Profiler from the source code\&.
