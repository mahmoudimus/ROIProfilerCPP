.TH "FullDeps" 3 "Sat Feb 12 2022" "Version 1.2" "Regions Of Interest (ROI) Profiler" \" -*- nroff -*-
.ad l
.nh
.SH NAME
FullDeps
.SH SYNOPSIS
.br
.PP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "void \fBmergeDeps\fP (StringRef Input, FullDependenciesResult FDR, size_t InputIndex)"
.br
.ti -1c
.RI "void \fBprintFullOutput\fP (raw_ostream &OS)"
.br
.in -1c
.SH "Detailed Description"
.PP 
Definition at line 266 of file ClangScanDeps\&.cpp\&.
.SH "Member Function Documentation"
.PP 
.SS "void FullDeps::mergeDeps (StringRef Input, FullDependenciesResult FDR, size_t InputIndex)\fC [inline]\fP"

.PP
Definition at line 268 of file ClangScanDeps\&.cpp\&.
.PP
.nf
269                                     {
270     const FullDependencies &FD = FDR\&.FullDeps;
271 
272     InputDeps ID;
273     ID\&.FileName = std::string(Input);
274     ID\&.ContextHash = std::move(FD\&.ID\&.ContextHash);
275     ID\&.FileDeps = std::move(FD\&.FileDeps);
276     ID\&.ModuleDeps = std::move(FD\&.ClangModuleDeps);
277 
278     std::unique_lock<std::mutex> ul(Lock);
279     for (const ModuleDeps &MD : FDR\&.DiscoveredModules) {
280       auto I = Modules\&.find({MD\&.ID, 0});
281       if (I != Modules\&.end()) {
282         I->first\&.InputIndex = std::min(I->first\&.InputIndex, InputIndex);
283         continue;
284       }
285       Modules\&.insert(I, {{MD\&.ID, InputIndex}, std::move(MD)});
286     }
287 
288     ID\&.AdditionalCommandLine =
289         GenerateModulesPathArgs
290             ? FD\&.getAdditionalArgs(
291                   [&](ModuleID MID) { return lookupPCMPath(MID); },
292                   [&](ModuleID MID) -> const ModuleDeps & {
293                     return lookupModuleDeps(MID);
294                   })
295             : FD\&.getAdditionalArgsWithoutModulePaths();
296 
297     Inputs\&.push_back(std::move(ID));
298   }
.fi
.SS "void FullDeps::printFullOutput (raw_ostream & OS)\fC [inline]\fP"

.PP
Definition at line 300 of file ClangScanDeps\&.cpp\&.
.PP
.nf
300                                         {
301     // Sort the modules by name to get a deterministic order\&.
302     std::vector<IndexedModuleID> ModuleIDs;
303     for (auto &&M : Modules)
304       ModuleIDs\&.push_back(M\&.first);
305     llvm::sort(ModuleIDs,
306                [](const IndexedModuleID &A, const IndexedModuleID &B) {
307                  return std::tie(A\&.ID\&.ModuleName, A\&.InputIndex) <
308                         std::tie(B\&.ID\&.ModuleName, B\&.InputIndex);
309                });
310 
311     llvm::sort(Inputs, [](const InputDeps &A, const InputDeps &B) {
312       return A\&.FileName < B\&.FileName;
313     });
314 
315     using namespace llvm::json;
316 
317     Array OutModules;
318     for (auto &&ModID : ModuleIDs) {
319       auto &MD = Modules[ModID];
320       Object O{
321           {"name", MD\&.ID\&.ModuleName},
322           {"context-hash", MD\&.ID\&.ContextHash},
323           {"file-deps", toJSONSorted(MD\&.FileDeps)},
324           {"clang-module-deps", toJSONSorted(MD\&.ClangModuleDeps)},
325           {"clang-modulemap-file", MD\&.ClangModuleMapFile},
326           {"command-line",
327            GenerateModulesPathArgs
328                ? MD\&.getCanonicalCommandLine(
329                      [&](ModuleID MID) { return lookupPCMPath(MID); },
330                      [&](ModuleID MID) -> const ModuleDeps & {
331                        return lookupModuleDeps(MID);
332                      })
333                : MD\&.getCanonicalCommandLineWithoutModulePaths()},
334       };
335       OutModules\&.push_back(std::move(O));
336     }
337 
338     Array TUs;
339     for (auto &&I : Inputs) {
340       Object O{
341           {"input-file", I\&.FileName},
342           {"clang-context-hash", I\&.ContextHash},
343           {"file-deps", I\&.FileDeps},
344           {"clang-module-deps", toJSONSorted(I\&.ModuleDeps)},
345           {"command-line", I\&.AdditionalCommandLine},
346       };
347       TUs\&.push_back(std::move(O));
348     }
349 
350     Object Output{
351         {"modules", std::move(OutModules)},
352         {"translation-units", std::move(TUs)},
353     };
354 
355     OS << llvm::formatv("{0:2}\n", Value(std::move(Output)));
356   }
.fi


.SH "Author"
.PP 
Generated automatically by Doxygen for Regions Of Interest (ROI) Profiler from the source code\&.
