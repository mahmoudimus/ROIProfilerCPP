.TH "tests.unit.test_compilation.CompilerTest" 3 "Sat Feb 12 2022" "Version 1.2" "Regions Of Interest (ROI) Profiler" \" -*- nroff -*-
.ad l
.nh
.SH NAME
tests.unit.test_compilation.CompilerTest
.SH SYNOPSIS
.br
.PP
.PP
Inherits unittest\&.TestCase\&.
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "def \fBtest_is_compiler_call\fP (self)"
.br
.in -1c
.SH "Detailed Description"
.PP 
Definition at line 10 of file test_compilation\&.py\&.
.SH "Member Function Documentation"
.PP 
.SS "def tests\&.unit\&.test_compilation\&.CompilerTest\&.test_is_compiler_call ( self)"

.PP
Definition at line 12 of file test_compilation\&.py\&.
.PP
.nf
12     def test_is_compiler_call(self):
13         self\&.assertIsNotNone(sut\&.compiler_language(['clang']))
14         self\&.assertIsNotNone(sut\&.compiler_language(['clang-3\&.6']))
15         self\&.assertIsNotNone(sut\&.compiler_language(['clang++']))
16         self\&.assertIsNotNone(sut\&.compiler_language(['clang++-3\&.5\&.1']))
17         self\&.assertIsNotNone(sut\&.compiler_language(['cc']))
18         self\&.assertIsNotNone(sut\&.compiler_language(['c++']))
19         self\&.assertIsNotNone(sut\&.compiler_language(['gcc']))
20         self\&.assertIsNotNone(sut\&.compiler_language(['g++']))
21         self\&.assertIsNotNone(sut\&.compiler_language(['/usr/local/bin/gcc']))
22         self\&.assertIsNotNone(sut\&.compiler_language(['/usr/local/bin/g++']))
23         self\&.assertIsNotNone(sut\&.compiler_language(['/usr/local/bin/clang']))
24         self\&.assertIsNotNone(
25             sut\&.compiler_language(['armv7_neno-linux-gnueabi-g++']))
26 
27         self\&.assertIsNone(sut\&.compiler_language([]))
28         self\&.assertIsNone(sut\&.compiler_language(['']))
29         self\&.assertIsNone(sut\&.compiler_language(['ld']))
30         self\&.assertIsNone(sut\&.compiler_language(['as']))
31         self\&.assertIsNone(sut\&.compiler_language(['/usr/local/bin/compiler']))
32 
33 
.fi


.SH "Author"
.PP 
Generated automatically by Doxygen for Regions Of Interest (ROI) Profiler from the source code\&.
