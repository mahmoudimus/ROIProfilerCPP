.TH "/Users/maximilian/clang-llvm/clang/tools/libclang/BuildSystem.cpp" 3 "Sat Feb 12 2022" "Version 1.2" "Regions Of Interest (ROI) Profiler" \" -*- nroff -*-
.ad l
.nh
.SH NAME
/Users/maximilian/clang-llvm/clang/tools/libclang/BuildSystem.cpp
.SH SYNOPSIS
.br
.PP
\fC#include 'clang\-c/BuildSystem\&.h'\fP
.br
\fC#include 'CXString\&.h'\fP
.br
\fC#include 'llvm/ADT/SmallString\&.h'\fP
.br
\fC#include 'llvm/Support/CBindingWrapping\&.h'\fP
.br
\fC#include 'llvm/Support/Chrono\&.h'\fP
.br
\fC#include 'llvm/Support/ErrorHandling\&.h'\fP
.br
\fC#include 'llvm/Support/Path\&.h'\fP
.br
\fC#include 'llvm/Support/VirtualFileSystem\&.h'\fP
.br
\fC#include 'llvm/Support/raw_ostream\&.h'\fP
.br

.SS "Classes"

.in +1c
.ti -1c
.RI "struct \fBCXModuleMapDescriptorImpl\fP"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "unsigned long long \fBclang_getBuildSessionTimestamp\fP (void)"
.br
.ti -1c
.RI "\fBDEFINE_SIMPLE_CONVERSION_FUNCTIONS\fP (llvm::vfs::YAMLVFSWriter, CXVirtualFileOverlay) CXVirtualFileOverlay clang_VirtualFileOverlay_create(unsigned)"
.br
.ti -1c
.RI "enum CXErrorCode \fBclang_VirtualFileOverlay_addFileMapping\fP (CXVirtualFileOverlay VFO, const char *virtualPath, const char *realPath)"
.br
.ti -1c
.RI "enum CXErrorCode \fBclang_VirtualFileOverlay_setCaseSensitivity\fP (CXVirtualFileOverlay VFO, int caseSensitive)"
.br
.ti -1c
.RI "enum CXErrorCode \fBclang_VirtualFileOverlay_writeToBuffer\fP (CXVirtualFileOverlay VFO, unsigned, char **out_buffer_ptr, unsigned *out_buffer_size)"
.br
.ti -1c
.RI "void \fBclang_free\fP (void *buffer)"
.br
.ti -1c
.RI "void \fBclang_VirtualFileOverlay_dispose\fP (CXVirtualFileOverlay VFO)"
.br
.ti -1c
.RI "CXModuleMapDescriptor \fBclang_ModuleMapDescriptor_create\fP (unsigned)"
.br
.ti -1c
.RI "enum CXErrorCode \fBclang_ModuleMapDescriptor_setFrameworkModuleName\fP (CXModuleMapDescriptor MMD, const char *name)"
.br
.ti -1c
.RI "enum CXErrorCode \fBclang_ModuleMapDescriptor_setUmbrellaHeader\fP (CXModuleMapDescriptor MMD, const char *name)"
.br
.ti -1c
.RI "enum CXErrorCode \fBclang_ModuleMapDescriptor_writeToBuffer\fP (CXModuleMapDescriptor MMD, unsigned, char **out_buffer_ptr, unsigned *out_buffer_size)"
.br
.ti -1c
.RI "void \fBclang_ModuleMapDescriptor_dispose\fP (CXModuleMapDescriptor MMD)"
.br
.in -1c
.SH "Function Documentation"
.PP 
.SS "void clang_free (void * buffer)"

.PP
Definition at line 87 of file BuildSystem\&.cpp\&.
.PP
.nf
87                               {
88   free(buffer);
89 }
.fi
.SS "unsigned long long clang_getBuildSessionTimestamp (void)"

.PP
Definition at line 26 of file BuildSystem\&.cpp\&.
.PP
.nf
26                                                         {
27   return llvm::sys::toTimeT(std::chrono::system_clock::now());
28 }
.fi
.SS "CXModuleMapDescriptor clang_ModuleMapDescriptor_create (unsigned)"

.PP
Definition at line 101 of file BuildSystem\&.cpp\&.
.PP
.nf
101                                                                  {
102   return new CXModuleMapDescriptorImpl();
103 }
.fi
.SS "void clang_ModuleMapDescriptor_dispose (CXModuleMapDescriptor MMD)"

.PP
Definition at line 149 of file BuildSystem\&.cpp\&.
.PP
.nf
149                                                                   {
150   delete MMD;
151 }
.fi
.SS "enum CXErrorCode clang_ModuleMapDescriptor_setFrameworkModuleName (CXModuleMapDescriptor MMD, const char * name)"

.PP
Definition at line 101 of file BuildSystem\&.cpp\&.
.PP
.nf
107                                                                    {
108   if (!MMD || !name)
109     return CXError_InvalidArguments;
110 
111   MMD->ModuleName = name;
112   return CXError_Success;
113 }
.fi
.SS "enum CXErrorCode clang_ModuleMapDescriptor_setUmbrellaHeader (CXModuleMapDescriptor MMD, const char * name)"

.PP
Definition at line 101 of file BuildSystem\&.cpp\&.
.PP
.nf
117                                                               {
118   if (!MMD || !name)
119     return CXError_InvalidArguments;
120 
121   MMD->UmbrellaHeader = name;
122   return CXError_Success;
123 }
.fi
.SS "enum CXErrorCode clang_ModuleMapDescriptor_writeToBuffer (CXModuleMapDescriptor MMD, unsigned, char ** out_buffer_ptr, unsigned * out_buffer_size)"

.PP
Definition at line 101 of file BuildSystem\&.cpp\&.
.PP
.nf
128                                                                   {
129   if (!MMD || !out_buffer_ptr || !out_buffer_size)
130     return CXError_InvalidArguments;
131 
132   llvm::SmallString<256> Buf;
133   llvm::raw_svector_ostream OS(Buf);
134   OS << "framework module " << MMD->ModuleName << " {\n";
135   OS << "  umbrella header \"";
136   OS\&.write_escaped(MMD->UmbrellaHeader) << "\"\n";
137   OS << '\n';
138   OS << "  export *\n";
139   OS << "  module * { export * }\n";
140   OS << "}\n";
141 
142   StringRef Data = OS\&.str();
143   *out_buffer_ptr = static_cast<char*>(llvm::safe_malloc(Data\&.size()));
144   *out_buffer_size = Data\&.size();
145   memcpy(*out_buffer_ptr, Data\&.data(), Data\&.size());
146   return CXError_Success;
147 }
.fi
.SS "enum CXErrorCode clang_VirtualFileOverlay_addFileMapping (CXVirtualFileOverlay VFO, const char * virtualPath, const char * realPath)"

.PP
Definition at line 30 of file BuildSystem\&.cpp\&.
.PP
.nf
40                                                               {
41   if (!VFO || !virtualPath || !realPath)
42     return CXError_InvalidArguments;
43   if (!path::is_absolute(virtualPath))
44     return CXError_InvalidArguments;
45   if (!path::is_absolute(realPath))
46     return CXError_InvalidArguments;
47 
48   for (path::const_iterator
49          PI = path::begin(virtualPath),
50          PE = path::end(virtualPath); PI != PE; ++PI) {
51     StringRef Comp = *PI;
52     if (Comp == "\&." || Comp == "\&.\&.")
53       return CXError_InvalidArguments;
54   }
55 
56   unwrap(VFO)->addFileMapping(virtualPath, realPath);
57   return CXError_Success;
58 }
.fi
.SS "void clang_VirtualFileOverlay_dispose (CXVirtualFileOverlay VFO)"

.PP
Definition at line 91 of file BuildSystem\&.cpp\&.
.PP
.nf
91                                                                 {
92   delete unwrap(VFO);
93 }
.fi
.SS "enum CXErrorCode clang_VirtualFileOverlay_setCaseSensitivity (CXVirtualFileOverlay VFO, int caseSensitive)"

.PP
Definition at line 30 of file BuildSystem\&.cpp\&.
.PP
.nf
62                                                                {
63   if (!VFO)
64     return CXError_InvalidArguments;
65   unwrap(VFO)->setCaseSensitivity(caseSensitive);
66   return CXError_Success;
67 }
.fi
.SS "enum CXErrorCode clang_VirtualFileOverlay_writeToBuffer (CXVirtualFileOverlay VFO, unsigned, char ** out_buffer_ptr, unsigned * out_buffer_size)"

.PP
Definition at line 30 of file BuildSystem\&.cpp\&.
.PP
.nf
72                                                                   {
73   if (!VFO || !out_buffer_ptr || !out_buffer_size)
74     return CXError_InvalidArguments;
75 
76   llvm::SmallString<256> Buf;
77   llvm::raw_svector_ostream OS(Buf);
78   unwrap(VFO)->write(OS);
79 
80   StringRef Data = OS\&.str();
81   *out_buffer_ptr = static_cast<char*>(llvm::safe_malloc(Data\&.size()));
82   *out_buffer_size = Data\&.size();
83   memcpy(*out_buffer_ptr, Data\&.data(), Data\&.size());
84   return CXError_Success;
85 }
.fi
.SS "DEFINE_SIMPLE_CONVERSION_FUNCTIONS (llvm::vfs::YAMLVFSWriter, CXVirtualFileOverlay)"

.PP
Definition at line 30 of file BuildSystem\&.cpp\&.
.PP
.nf
33                                                                {
34   return wrap(new llvm::vfs::YAMLVFSWriter());
35 }
.fi
.SH "Author"
.PP 
Generated automatically by Doxygen for Regions Of Interest (ROI) Profiler from the source code\&.
