.TH "cmake-build-debug/CMakeFiles/3.20.2/CompilerIdCXX/CMakeCXXCompilerId.cpp" 3 "Sun Nov 14 2021" "Version 1.0" "Hagn Tool Performance Counter" \" -*- nroff -*-
.ad l
.nh
.SH NAME
cmake-build-debug/CMakeFiles/3.20.2/CompilerIdCXX/CMakeCXXCompilerId.cpp
.SH SYNOPSIS
.br
.PP
.SS "Macros"

.in +1c
.ti -1c
.RI "#define \fBCOMPILER_ID\fP   ''"
.br
.ti -1c
.RI "#define \fBSTRINGIFY_HELPER\fP(X)   #X"
.br
.ti -1c
.RI "#define \fBSTRINGIFY\fP(X)   \fBSTRINGIFY_HELPER\fP(X)"
.br
.ti -1c
.RI "#define \fBPLATFORM_ID\fP"
.br
.ti -1c
.RI "#define \fBARCHITECTURE_ID\fP"
.br
.ti -1c
.RI "#define \fBDEC\fP(n)"
.br
.ti -1c
.RI "#define \fBHEX\fP(n)"
.br
.ti -1c
.RI "#define \fBCXX_STD\fP   __cplusplus"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "int \fBmain\fP (int argc, char *argv[])"
.br
.in -1c
.SS "Variables"

.in +1c
.ti -1c
.RI "char const  * \fBinfo_compiler\fP = 'INFO' ':' 'compiler[' COMPILER_ID ']'"
.br
.ti -1c
.RI "char const  * \fBinfo_platform\fP = 'INFO' ':' 'platform[' PLATFORM_ID ']'"
.br
.ti -1c
.RI "char const  * \fBinfo_arch\fP = 'INFO' ':' 'arch[' ARCHITECTURE_ID ']'"
.br
.ti -1c
.RI "const char * \fBinfo_language_dialect_default\fP"
.br
.in -1c
.SH "Macro Definition Documentation"
.PP 
.SS "#define ARCHITECTURE_ID"

.PP
Definition at line 607 of file CMakeCXXCompilerId\&.cpp\&.
.SS "#define COMPILER_ID   ''"

.PP
Definition at line 354 of file CMakeCXXCompilerId\&.cpp\&.
.SS "#define CXX_STD   __cplusplus"

.PP
Definition at line 699 of file CMakeCXXCompilerId\&.cpp\&.
.SS "#define DEC(n)"
\fBValue:\fP
.PP
.nf
  ('0' + (((n) / 10000000)%10)), \
  ('0' + (((n) / 1000000)%10)),  \
  ('0' + (((n) / 100000)%10)),   \
  ('0' + (((n) / 10000)%10)),    \
  ('0' + (((n) / 1000)%10)),     \
  ('0' + (((n) / 100)%10)),      \
  ('0' + (((n) / 10)%10)),       \
  ('0' +  ((n) % 10))
.fi
.PP
Definition at line 611 of file CMakeCXXCompilerId\&.cpp\&.
.SS "#define HEX(n)"
\fBValue:\fP
.PP
.nf
  ('0' + ((n)>>28 & 0xF)), \
  ('0' + ((n)>>24 & 0xF)), \
  ('0' + ((n)>>20 & 0xF)), \
  ('0' + ((n)>>16 & 0xF)), \
  ('0' + ((n)>>12 & 0xF)), \
  ('0' + ((n)>>8  & 0xF)), \
  ('0' + ((n)>>4  & 0xF)), \
  ('0' + ((n)     & 0xF))
.fi
.PP
Definition at line 622 of file CMakeCXXCompilerId\&.cpp\&.
.SS "#define PLATFORM_ID"

.PP
Definition at line 479 of file CMakeCXXCompilerId\&.cpp\&.
.SS "#define STRINGIFY(X)   \fBSTRINGIFY_HELPER\fP(X)"

.PP
Definition at line 375 of file CMakeCXXCompilerId\&.cpp\&.
.SS "#define STRINGIFY_HELPER(X)   #X"

.PP
Definition at line 374 of file CMakeCXXCompilerId\&.cpp\&.
.SH "Function Documentation"
.PP 
.SS "int main (int argc, char * argv[])"

.PP
Definition at line 720 of file CMakeCXXCompilerId\&.cpp\&.
.PP
.nf
721 {
722   int require = 0;
723   require += info_compiler[argc];
724   require += info_platform[argc];
725 #ifdef COMPILER_VERSION_MAJOR
726   require += info_version[argc];
727 #endif
728 #ifdef COMPILER_VERSION_INTERNAL
729   require += info_version_internal[argc];
730 #endif
731 #ifdef SIMULATE_ID
732   require += info_simulate[argc];
733 #endif
734 #ifdef SIMULATE_VERSION_MAJOR
735   require += info_simulate_version[argc];
736 #endif
737 #if defined(__CRAYXT_COMPUTE_LINUX_TARGET)
738   require += info_cray[argc];
739 #endif
740   require += info_language_dialect_default[argc];
741   (void)argv;
742   return require;
743 }
.fi
.PP
References info_compiler, info_language_dialect_default, and info_platform\&.
.SH "Variable Documentation"
.PP 
.SS "char const* info_arch = 'INFO' ':' 'arch[' ARCHITECTURE_ID ']'"

.PP
Definition at line 682 of file CMakeCXXCompilerId\&.cpp\&.
.SS "char const* info_compiler = 'INFO' ':' 'compiler[' COMPILER_ID ']'"

.PP
Definition at line 361 of file CMakeCXXCompilerId\&.cpp\&.
.PP
Referenced by main()\&.
.SS "const char* info_language_dialect_default"
\fBInitial value:\fP
.PP
.nf
= "INFO" ":" "dialect_default["











  "98"

"]"
.fi
.PP
Definition at line 702 of file CMakeCXXCompilerId\&.cpp\&.
.PP
Referenced by main()\&.
.SS "char const* info_platform = 'INFO' ':' 'platform[' PLATFORM_ID ']'"

.PP
Definition at line 681 of file CMakeCXXCompilerId\&.cpp\&.
.PP
Referenced by main()\&.
.SH "Author"
.PP 
Generated automatically by Doxygen for Hagn Tool Performance Counter from the source code\&.
