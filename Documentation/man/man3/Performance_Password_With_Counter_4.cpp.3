.TH "Tests/GTime Test Cases/Performance_Password_With_Counter_4.cpp" 3 "Sat Feb 12 2022" "Version 1.2" "Regions Of Interest (ROI) Profiler" \" -*- nroff -*-
.ad l
.nh
.SH NAME
Tests/GTime Test Cases/Performance_Password_With_Counter_4.cpp
.SH SYNOPSIS
.br
.PP
\fC#include <string>\fP
.br
\fC#include <vector>\fP
.br
\fC#include <iostream>\fP
.br
\fC#include '\&.\&./lib/DataStorage\&.cpp'\fP
.br

.SS "Functions"

.in +1c
.ti -1c
.RI "\fBDataStorage\fP \fBdataStorage\fP ('Runtime,Scope,CustomCompoundStmt i000002,IfStmt 2218252,CustomCompoundStmt i000005')"
.br
.ti -1c
.RI "int \fBmain\fP (void)"
.br
.in -1c
.SH "Function Documentation"
.PP 
.SS "\fBDataStorage\fP dataStorage (' Runtime, Scope, CustomCompoundStmt i000002, IfStmt 2218252, CustomCompoundStmt i000005')"

.SS "int main (void)"

.PP
Definition at line 6 of file Performance_Password_With_Counter_4\&.cpp\&.
.PP
.nf
6                {
7 dataStorage\&.startEvent(0);
8     std::vector <std::string> passwordStorage;
9     std::string password;
10     char current;
11 
12     for (int passwordCount = 0; passwordCount < 1000000; passwordCount++) {
13         for (int sectionCount = 0; sectionCount < 3; sectionCount++) {
14             dataStorage\&.startEvent(1);
15 for (int sectionLength = 0; sectionLength < 6; sectionLength++) {
16                 dataStorage\&.startEvent(2);
17 char lowerCase = rand() % 26 + 'a';
18                 char upperCase = rand() % 26 + 'A';
19                 char number = rand() % 10 + '0';
20 
21                 char randomChoice = (rand() % 100 + 1);
22                 dataStorage\&.endEvent(2);
23 dataStorage\&.startEvent(3);
24 if (randomChoice <= 40) {
25                     current = lowerCase;
26                 } else if (randomChoice <= 80) {
27                     current = upperCase;
28                 } else {
29                     current = number;
30                 }
31 dataStorage\&.endEvent(3);
32                 dataStorage\&.startEvent(4);
33 password += current;
34 dataStorage\&.endEvent(4);
35             }
36 dataStorage\&.endEvent(1);
37             password += '-';
38         }
39         password\&.pop_back();
40         passwordStorage\&.push_back(password);
41         password\&.clear();
42     }
43 
44     std::sort(passwordStorage\&.begin(), passwordStorage\&.end());
45     passwordStorage\&.erase(std::unique(passwordStorage\&.begin(),
46                                             passwordStorage\&.end()),
47                           passwordStorage\&.end());
48 
49     for (std::string currentPassword: passwordStorage) {
50         std::cout << currentPassword << '\n';
51     }
52 
53     dataStorage\&.endEvent(0);
54 dataStorage\&.print();return 0;
55 }
.fi
.PP
References dataStorage(), DataStorage::endEvent(), DataStorage::print(), and DataStorage::startEvent()\&.
.SH "Author"
.PP 
Generated automatically by Doxygen for Regions Of Interest (ROI) Profiler from the source code\&.
