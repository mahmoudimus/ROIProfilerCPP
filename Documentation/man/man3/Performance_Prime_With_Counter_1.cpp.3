.TH "Tests/Prime Tests Cases/Performance_Prime_With_Counter_1.cpp" 3 "Sat Feb 12 2022" "Version 1.2" "Regions Of Interest (ROI) Profiler" \" -*- nroff -*-
.ad l
.nh
.SH NAME
Tests/Prime Tests Cases/Performance_Prime_With_Counter_1.cpp
.SH SYNOPSIS
.br
.PP
\fC#include <chrono>\fP
.br
\fC#include <ctime>\fP
.br
\fC#include <iostream>\fP
.br
\fC#include <bitset>\fP
.br
\fC#include <map>\fP
.br
\fC#include <cstring>\fP
.br
\fC#include <cmath>\fP
.br
\fC#include <fstream>\fP
.br
\fC#include '\&.\&./lib/DataStorage\&.cpp'\fP
.br

.SS "Classes"

.in +1c
.ti -1c
.RI "class \fBBitArray\fP"
.br
.ti -1c
.RI "class \fBprime_sieve\fP"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "\fBDataStorage\fP \fBdataStorage\fP ('Runtime,Scope,CustomCompoundStmt i000002,WhileStmt 2876156')"
.br
.ti -1c
.RI "int \fBmain\fP ()"
.br
.in -1c
.SH "Function Documentation"
.PP 
.SS "\fBDataStorage\fP dataStorage (' Runtime, Scope, CustomCompoundStmt i000002, WhileStmt 2876156')"

.PP
Referenced by main()\&.
.SS "int main (void)"

.PP
Definition at line 174 of file Performance_Prime_With_Counter_1\&.cpp\&.
.PP
.nf
175 {
176 dataStorage\&.startEvent(0);
177     dataStorage\&.startEvent(2);
178 auto passes = 0;
179     auto tStart = steady_clock::now();
180 
181     dataStorage\&.endEvent(2);
182 dataStorage\&.startEvent(3);
183 while (true)
184     {
185         prime_sieve sieve(1000000L);
186         sieve\&.runSieve();
187         passes++;
188         if (duration_cast<seconds>(steady_clock::now() - tStart)\&.count() >= 5)
189         {
190             sieve\&.printResults(false, duration_cast<microseconds>(steady_clock::now() - tStart)\&.count() / 1000000\&.0, passes);
191             break;
192         }
193     }
194 dataStorage\&.endEvent(3);
195 
196     dataStorage\&.endEvent(0);
197 dataStorage\&.print();return 0;
198 }
.fi
.PP
References dataStorage(), DataStorage::endEvent(), DataStorage::print(), prime_sieve::printResults(), prime_sieve::runSieve(), and DataStorage::startEvent()\&.
.SH "Author"
.PP 
Generated automatically by Doxygen for Regions Of Interest (ROI) Profiler from the source code\&.
