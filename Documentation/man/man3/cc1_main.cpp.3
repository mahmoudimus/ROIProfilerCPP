.TH "/Users/maximilian/clang-llvm/clang/tools/driver/cc1_main.cpp" 3 "Sat Feb 12 2022" "Version 1.2" "Regions Of Interest (ROI) Profiler" \" -*- nroff -*-
.ad l
.nh
.SH NAME
/Users/maximilian/clang-llvm/clang/tools/driver/cc1_main.cpp
.SH SYNOPSIS
.br
.PP
\fC#include 'clang/Basic/Stack\&.h'\fP
.br
\fC#include 'clang/Basic/TargetOptions\&.h'\fP
.br
\fC#include 'clang/CodeGen/ObjectFilePCHContainerOperations\&.h'\fP
.br
\fC#include 'clang/Config/config\&.h'\fP
.br
\fC#include 'clang/Driver/DriverDiagnostic\&.h'\fP
.br
\fC#include 'clang/Driver/Options\&.h'\fP
.br
\fC#include 'clang/Frontend/CompilerInstance\&.h'\fP
.br
\fC#include 'clang/Frontend/CompilerInvocation\&.h'\fP
.br
\fC#include 'clang/Frontend/FrontendDiagnostic\&.h'\fP
.br
\fC#include 'clang/Frontend/TextDiagnosticBuffer\&.h'\fP
.br
\fC#include 'clang/Frontend/TextDiagnosticPrinter\&.h'\fP
.br
\fC#include 'clang/Frontend/Utils\&.h'\fP
.br
\fC#include 'clang/FrontendTool/Utils\&.h'\fP
.br
\fC#include 'llvm/ADT/Statistic\&.h'\fP
.br
\fC#include 'llvm/Config/llvm\-config\&.h'\fP
.br
\fC#include 'llvm/LinkAllPasses\&.h'\fP
.br
\fC#include 'llvm/Option/Arg\&.h'\fP
.br
\fC#include 'llvm/Option/ArgList\&.h'\fP
.br
\fC#include 'llvm/Option/OptTable\&.h'\fP
.br
\fC#include 'llvm/Support/BuryPointer\&.h'\fP
.br
\fC#include 'llvm/Support/Compiler\&.h'\fP
.br
\fC#include 'llvm/Support/ErrorHandling\&.h'\fP
.br
\fC#include 'llvm/Support/ManagedStatic\&.h'\fP
.br
\fC#include 'llvm/Support/Path\&.h'\fP
.br
\fC#include 'llvm/Support/Process\&.h'\fP
.br
\fC#include 'llvm/Support/Signals\&.h'\fP
.br
\fC#include 'llvm/Support/TargetRegistry\&.h'\fP
.br
\fC#include 'llvm/Support/TargetSelect\&.h'\fP
.br
\fC#include 'llvm/Support/TimeProfiler\&.h'\fP
.br
\fC#include 'llvm/Support/Timer\&.h'\fP
.br
\fC#include 'llvm/Support/raw_ostream\&.h'\fP
.br
\fC#include 'llvm/Target/TargetMachine\&.h'\fP
.br
\fC#include <cstdio>\fP
.br

.SS "Functions"

.in +1c
.ti -1c
.RI "int \fBcc1_main\fP (ArrayRef< const char * > Argv, const char *Argv0, void *MainAddr)"
.br
.in -1c
.SH "Function Documentation"
.PP 
.SS "int cc1_main (ArrayRef< const char * > Argv, const char * Argv0, void * MainAddr)"

.PP
Definition at line 184 of file cc1_main\&.cpp\&.
.PP
.nf
184                                                                              {
185   ensureSufficientStack();
186 
187   std::unique_ptr<CompilerInstance> Clang(new CompilerInstance());
188   IntrusiveRefCntPtr<DiagnosticIDs> DiagID(new DiagnosticIDs());
189 
190   // Register the support for object-file-wrapped Clang modules\&.
191   auto PCHOps = Clang->getPCHContainerOperations();
192   PCHOps->registerWriter(std::make_unique<ObjectFilePCHContainerWriter>());
193   PCHOps->registerReader(std::make_unique<ObjectFilePCHContainerReader>());
194 
195   // Initialize targets first, so that --version shows registered targets\&.
196   llvm::InitializeAllTargets();
197   llvm::InitializeAllTargetMCs();
198   llvm::InitializeAllAsmPrinters();
199   llvm::InitializeAllAsmParsers();
200 
201   // Buffer diagnostics from argument parsing so that we can output them using a
202   // well formed diagnostic object\&.
203   IntrusiveRefCntPtr<DiagnosticOptions> DiagOpts = new DiagnosticOptions();
204   TextDiagnosticBuffer *DiagsBuffer = new TextDiagnosticBuffer;
205   DiagnosticsEngine Diags(DiagID, &*DiagOpts, DiagsBuffer);
206 
207   // Setup round-trip remarks for the DiagnosticsEngine used in CreateFromArgs\&.
208   if (find(Argv, StringRef("-Rround-trip-cc1-args")) != Argv\&.end())
209     Diags\&.setSeverity(diag::remark_cc1_round_trip_generated,
210                       diag::Severity::Remark, {});
211 
212   bool Success = CompilerInvocation::CreateFromArgs(Clang->getInvocation(),
213                                                     Argv, Diags, Argv0);
214 
215   if (Clang->getFrontendOpts()\&.TimeTrace) {
216     llvm::timeTraceProfilerInitialize(
217         Clang->getFrontendOpts()\&.TimeTraceGranularity, Argv0);
218   }
219   // --print-supported-cpus takes priority over the actual compilation\&.
220   if (Clang->getFrontendOpts()\&.PrintSupportedCPUs)
221     return PrintSupportedCPUs(Clang->getTargetOpts()\&.Triple);
222 
223   // Infer the builtin include path if unspecified\&.
224   if (Clang->getHeaderSearchOpts()\&.UseBuiltinIncludes &&
225       Clang->getHeaderSearchOpts()\&.ResourceDir\&.empty())
226     Clang->getHeaderSearchOpts()\&.ResourceDir =
227       CompilerInvocation::GetResourcesPath(Argv0, MainAddr);
228 
229   // Create the actual diagnostics engine\&.
230   Clang->createDiagnostics();
231   if (!Clang->hasDiagnostics())
232     return 1;
233 
234   // Set an error handler, so that any LLVM backend diagnostics go through our
235   // error handler\&.
236   llvm::install_fatal_error_handler(LLVMErrorHandler,
237                                   static_cast<void*>(&Clang->getDiagnostics()));
238 
239   DiagsBuffer->FlushDiagnostics(Clang->getDiagnostics());
240   if (!Success)
241     return 1;
242 
243   // Execute the frontend actions\&.
244   {
245     llvm::TimeTraceScope TimeScope("ExecuteCompiler");
246     Success = ExecuteCompilerInvocation(Clang\&.get());
247   }
248 
249   // If any timers were active but haven't been destroyed yet, print their
250   // results now\&.  This happens in -disable-free mode\&.
251   llvm::TimerGroup::printAll(llvm::errs());
252   llvm::TimerGroup::clearAll();
253 
254   if (llvm::timeTraceProfilerEnabled()) {
255     SmallString<128> Path(Clang->getFrontendOpts()\&.OutputFile);
256     llvm::sys::path::replace_extension(Path, "json");
257     if (auto profilerOutput = Clang->createOutputFile(
258             Path\&.str(), /*Binary=*/false, /*RemoveFileOnSignal=*/false,
259             /*useTemporary=*/false)) {
260       llvm::timeTraceProfilerWrite(*profilerOutput);
261       // FIXME(ibiryukov): make profilerOutput flush in destructor instead\&.
262       profilerOutput->flush();
263       llvm::timeTraceProfilerCleanup();
264       Clang->clearOutputFiles(false);
265     }
266   }
267 
268   // Our error handler depends on the Diagnostics object, which we're
269   // potentially about to delete\&. Uninstall the handler now so that any
270   // later errors use the default handling behavior instead\&.
271   llvm::remove_fatal_error_handler();
272 
273   // When running with -disable-free, don't do any destruction or shutdown\&.
274   if (Clang->getFrontendOpts()\&.DisableFree) {
275     llvm::BuryPointer(std::move(Clang));
276     return !Success;
277   }
278 
279   return !Success;
280 }
.fi
.SH "Author"
.PP 
Generated automatically by Doxygen for Regions Of Interest (ROI) Profiler from the source code\&.
