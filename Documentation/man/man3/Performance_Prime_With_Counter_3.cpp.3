.TH "Tests/Prime Tests Cases/Performance_Prime_With_Counter_3.cpp" 3 "Sat Feb 12 2022" "Version 1.2" "Regions Of Interest (ROI) Profiler" \" -*- nroff -*-
.ad l
.nh
.SH NAME
Tests/Prime Tests Cases/Performance_Prime_With_Counter_3.cpp
.SH SYNOPSIS
.br
.PP
\fC#include <chrono>\fP
.br
\fC#include <ctime>\fP
.br
\fC#include <iostream>\fP
.br
\fC#include <bitset>\fP
.br
\fC#include <map>\fP
.br
\fC#include <cstring>\fP
.br
\fC#include <cmath>\fP
.br
\fC#include <fstream>\fP
.br
\fC#include '\&.\&./lib/DataStorage\&.cpp'\fP
.br

.SS "Classes"

.in +1c
.ti -1c
.RI "class \fBBitArray\fP"
.br
.ti -1c
.RI "class \fBprime_sieve\fP"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "\fBDataStorage\fP \fBdataStorage\fP ('Runtime,Scope,CustomCompoundStmt i000002,WhileStmt 2844763')"
.br
.ti -1c
.RI "int \fBmain\fP ()"
.br
.in -1c
.SH "Function Documentation"
.PP 
.SS "\fBDataStorage\fP dataStorage (' Runtime, Scope, CustomCompoundStmt i000002, WhileStmt 2844763')"

.PP
Referenced by main(), and prime_sieve::runSieve()\&.
.SS "int main (void)"

.PP
Definition at line 178 of file Performance_Prime_With_Counter_3\&.cpp\&.
.PP
.nf
179 {
180 dataStorage\&.startEvent(0);
181     auto passes = 0;
182     auto tStart = steady_clock::now();
183 
184     while (true)
185     {
186         prime_sieve sieve(1000000L);
187         dataStorage\&.startEvent(1);
188 sieve\&.runSieve();
189 dataStorage\&.endEvent(1);
190         passes++;
191         if (duration_cast<seconds>(steady_clock::now() - tStart)\&.count() >= 5)
192         {
193             sieve\&.printResults(false, duration_cast<microseconds>(steady_clock::now() - tStart)\&.count() / 1000000\&.0, passes);
194             break;
195         }
196     }
197 
198     dataStorage\&.endEvent(0);
199 dataStorage\&.print();return 0;
200 }
.fi
.PP
References dataStorage(), DataStorage::endEvent(), DataStorage::print(), prime_sieve::printResults(), prime_sieve::runSieve(), and DataStorage::startEvent()\&.
.SH "Author"
.PP 
Generated automatically by Doxygen for Regions Of Interest (ROI) Profiler from the source code\&.
