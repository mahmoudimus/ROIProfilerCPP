.TH "hlibhelp" 3 "Sat Feb 12 2022" "Version 1.2" "Regions Of Interest (ROI) Profiler" \" -*- nroff -*-
.ad l
.nh
.SH NAME
hlibhelp
.SH SYNOPSIS
.br
.PP
.SS "Functions"

.in +1c
.ti -1c
.RI "string \fBgetUnit\fP (std::chrono::duration< double, std::nano > duration)"
.br
.ti -1c
.RI "string \fBgetUsageAsString\fP (double usage)"
.br
.ti -1c
.RI "double \fBconvertToSpecifiedUnit\fP (std::chrono::duration< double, std::nano > duration, string prefix)"
.br
.ti -1c
.RI "void \fBprintTableRow\fP (string identifier, string stmtClass, double duration, string unit, string scopeUsage, string totalUsage, string calls)"
.br
.ti -1c
.RI "void \fBprintTableSeparator\fP (int width, char separator, string escape)"
.br
.ti -1c
.RI "void \fBprintTableSeparator\fP (int width, string separator, string position, string escape)"
.br
.ti -1c
.RI "void \fBprintStatisticBanner\fP ()"
.br
.ti -1c
.RI "string * \fBgetSegmentsOfString\fP (string identifier)"
.br
.in -1c
.SH "Function Documentation"
.PP 
.SS "double hlibhelp::convertToSpecifiedUnit (std::chrono::duration< double, std::nano > duration, string prefix)"

.PP
Definition at line 43 of file Helper\&.cpp\&.
.PP
.nf
43                                                                                                 {
44         if ( prefix == "s" ) {
45             return duration\&.count( ) / 1000000000;
46         }
47 
48         if ( prefix == "ms" ) {
49             return duration\&.count( ) / 1000000;
50         }
51 
52         return duration\&.count( ) / 1000;
53     }
.fi
.PP
Referenced by DataStorage::print()\&.
.SS "string* hlibhelp::getSegmentsOfString (string identifier)"

.PP
Definition at line 146 of file Helper\&.cpp\&.
.PP
.nf
146                                                      {
147         std::stringstream identifierStream( identifier );
148         string identifierSegment;
149         string *segments = new string[2];
150         int segmentCounter = 0;
151         while ( std::getline( identifierStream, identifierSegment, ' ' )) {
152             segments[ segmentCounter++ ] = identifierSegment;
153         }
154         return segments;
155     }
.fi
.PP
Referenced by DataStorage::print()\&.
.SS "string hlibhelp::getUnit (std::chrono::duration< double, std::nano > duration)"

.PP
Definition at line 12 of file Helper\&.cpp\&.
.PP
.nf
12                                                                   {
13         cout << "\n" << duration\&.count();
14         if ( duration\&.count( ) > 60000000000 ) {
15             return " s";
16         }
17 
18         if ( duration\&.count( ) > 1000000000 ) {
19             return "ms";
20         }
21 
22         return "µs";
23     }
.fi
.PP
Referenced by DataStorage::print()\&.
.SS "string hlibhelp::getUsageAsString (double usage)"

.PP
Definition at line 26 of file Helper\&.cpp\&.
.PP
.nf
26                                             {
27         std::ostringstream customPrecision;
28 
29         if ( usage < 0\&.01 ) {
30             customPrecision << "<  0\&.01";
31         } else if ( usage > 99\&.99 ) {
32             customPrecision << "> 99\&.99";
33         } else {
34             customPrecision << std::fixed;
35             customPrecision << std::setprecision( 2 );
36             customPrecision << usage;
37         }
38 
39         return customPrecision\&.str( );
40     }
.fi
.PP
Referenced by DataStorage::print()\&.
.SS "void hlibhelp::printStatisticBanner ()"

.PP
Definition at line 138 of file Helper\&.cpp\&.
.PP
.nf
138                                  {
139         cout << "\n\n";
140         printTableSeparator( 108, '=', "\n" );
141         cout << setw( 60 ) << setfill( ' ' ) << "Statistic\n";
142         printTableSeparator( 109, '=', "\n\n" );
143     }
.fi
.PP
References printTableSeparator()\&.
.PP
Referenced by DataStorage::print()\&.
.SS "void hlibhelp::printTableRow (string identifier, string stmtClass, double duration, string unit, string scopeUsage, string totalUsage, string calls)"

.PP
Definition at line 56 of file Helper\&.cpp\&.
.PP
.nf
57                                                           {
58         string percentChar = "  %";
59         string separatorChar = "  │  ";
60         string hagnToolSeparatorChar = "  │  ";
61 
62         if ( identifier == "Runtime" || identifier == "Scope" ) {
63             percentChar = "";
64             separatorChar = "     ";
65             hagnToolSeparatorChar = "     ";
66         }
67         if ( identifier == "Hagn-Tool" ) {
68             hagnToolSeparatorChar = "     ";
69         }
70 
71 
72         std::ostringstream durationCustomPrecision;
73 
74         if ( duration < 0\&.001 ) {
75             durationCustomPrecision << "< 0\&.001";
76         } else {
77             durationCustomPrecision << std::fixed;
78             durationCustomPrecision << std::setprecision( 3 );
79             durationCustomPrecision << duration;
80         }
81 
82 
83         std::cout << setfill( ' ' ) << "│   "
84                   << std::setw( 15 ) << std::left << identifier << hagnToolSeparatorChar
85                   << std::setw( 25 ) << std::left << stmtClass << separatorChar;
86 
87         if ( identifier == "ID" ) {
88             std::cout << std::right << std::setw( 19 ) << "Runtime";
89         } else {
90             std::cout << std::right << std::setw( 15 ) << durationCustomPrecision\&.str( ) << "  " << unit;
91         }
92 
93         std::cout
94                 << std::setw( 5 ) << separatorChar
95 
96                 << std::right << std::setw( 10 ) << std::setprecision( 2 ) << scopeUsage + percentChar
97 
98                 << std::setw( 5 ) << separatorChar
99 
100                 << std::right << std::setw( 10 ) << std::setprecision( 2 ) << totalUsage + percentChar
101 
102                 << std::setw( 5 ) << separatorChar
103 
104                 << std::right << std::setw( 6 ) << std::setprecision( 0 ) << calls
105 
106                 << std::setw( 5 ) << "   │" << "\n";
107     }
.fi
.PP
Referenced by DataStorage::print()\&.
.SS "void hlibhelp::printTableSeparator (int width, char separator, string escape)"

.PP
Definition at line 110 of file Helper\&.cpp\&.
.PP
.nf
110                                                                          {
111         cout << setw( width ) << setfill( separator ) << escape;
112     }
.fi
.PP
References libscanbuild\&.report::escape()\&.
.PP
Referenced by DataStorage::print(), and printStatisticBanner()\&.
.SS "void hlibhelp::printTableSeparator (int width, string separator, string position, string escape)"

.PP
Definition at line 115 of file Helper\&.cpp\&.
.PP
.nf
115                                                                                             {
116         string leftSeparator = "├";
117         string rightSeparator = "┤";
118 
119         if ( position == "top" ) {
120             leftSeparator = "┌";
121             rightSeparator = "┐";
122         }
123 
124         if ( position == "bottom" ) {
125             leftSeparator = "└";
126             rightSeparator = "┘";
127         }
128 
129         cout << leftSeparator;
130         for ( int i = 0; i <= width; i++ ) {
131             cout << separator;
132         }
133 
134         cout << rightSeparator << escape;
135     }
.fi
.PP
References libscanbuild\&.report::escape()\&.
.SH "Author"
.PP 
Generated automatically by Doxygen for Regions Of Interest (ROI) Profiler from the source code\&.
