.TH "Tests/GTime Test Cases/Performance_Password_With_Counter_1.cpp" 3 "Sat Feb 12 2022" "Version 1.2" "Regions Of Interest (ROI) Profiler" \" -*- nroff -*-
.ad l
.nh
.SH NAME
Tests/GTime Test Cases/Performance_Password_With_Counter_1.cpp
.SH SYNOPSIS
.br
.PP
\fC#include <string>\fP
.br
\fC#include <vector>\fP
.br
\fC#include <iostream>\fP
.br
\fC#include '\&.\&./lib/DataStorage\&.cpp'\fP
.br

.SS "Functions"

.in +1c
.ti -1c
.RI "\fBDataStorage\fP \fBdataStorage\fP ('Runtime,Scope,CustomCompoundStmt i000002,ForStmt 2219672,CustomCompoundStmt i000005')"
.br
.ti -1c
.RI "int \fBmain\fP (void)"
.br
.in -1c
.SH "Function Documentation"
.PP 
.SS "\fBDataStorage\fP dataStorage (' Runtime, Scope, CustomCompoundStmt i000002, ForStmt 2219672, CustomCompoundStmt i000005')"

.SS "int main (void)"

.PP
Definition at line 6 of file Performance_Password_With_Counter_1\&.cpp\&.
.PP
.nf
6                {
7 dataStorage\&.startEvent(0);
8     dataStorage\&.startEvent(2);
9 std::vector <std::string> passwordStorage;
10     std::string password;
11     char current;
12 
13     dataStorage\&.endEvent(2);
14 dataStorage\&.startEvent(3);
15 for (int passwordCount = 0; passwordCount < 1000000; passwordCount++) {
16         for (int sectionCount = 0; sectionCount < 3; sectionCount++) {
17             for (int sectionLength = 0; sectionLength < 6; sectionLength++) {
18                 char lowerCase = rand() % 26 + 'a';
19                 char upperCase = rand() % 26 + 'A';
20                 char number = rand() % 10 + '0';
21 
22                 char randomChoice = (rand() % 100 + 1);
23                 if (randomChoice <= 40) {
24                     current = lowerCase;
25                 } else if (randomChoice <= 80) {
26                     current = upperCase;
27                 } else {
28                     current = number;
29                 }
30                 password += current;
31             }
32             password += '-';
33         }
34         password\&.pop_back();
35         passwordStorage\&.push_back(password);
36         password\&.clear();
37     }
38 dataStorage\&.endEvent(3);
39 
40     dataStorage\&.startEvent(4);
41 std::sort(passwordStorage\&.begin(), passwordStorage\&.end());
42     passwordStorage\&.erase(std::unique(passwordStorage\&.begin(),
43                                             passwordStorage\&.end()),
44                           passwordStorage\&.end());
45 
46     for (std::string currentPassword: passwordStorage) {
47         std::cout << currentPassword << '\n';
48     }
49 dataStorage\&.endEvent(4);
50 
51     dataStorage\&.endEvent(0);
52 dataStorage\&.print();return 0;
53 }
.fi
.PP
References dataStorage(), DataStorage::endEvent(), DataStorage::print(), and DataStorage::startEvent()\&.
.SH "Author"
.PP 
Generated automatically by Doxygen for Regions Of Interest (ROI) Profiler from the source code\&.
