.TH "cmake-build-debug/CMakeFiles/3.20.2/CompilerIdC/CMakeCCompilerId.c" 3 "Sun Nov 14 2021" "Version 1.0" "Hagn Tool Performance Counter" \" -*- nroff -*-
.ad l
.nh
.SH NAME
cmake-build-debug/CMakeFiles/3.20.2/CompilerIdC/CMakeCCompilerId.c
.SH SYNOPSIS
.br
.PP
.SS "Macros"

.in +1c
.ti -1c
.RI "#define \fBCOMPILER_ID\fP   ''"
.br
.ti -1c
.RI "#define \fBSTRINGIFY_HELPER\fP(X)   #X"
.br
.ti -1c
.RI "#define \fBSTRINGIFY\fP(X)   \fBSTRINGIFY_HELPER\fP(X)"
.br
.ti -1c
.RI "#define \fBPLATFORM_ID\fP"
.br
.ti -1c
.RI "#define \fBARCHITECTURE_ID\fP"
.br
.ti -1c
.RI "#define \fBDEC\fP(n)"
.br
.ti -1c
.RI "#define \fBHEX\fP(n)"
.br
.ti -1c
.RI "#define \fBC_DIALECT\fP"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "int \fBmain\fP (int argc, char *argv[])"
.br
.in -1c
.SS "Variables"

.in +1c
.ti -1c
.RI "char const  * \fBinfo_compiler\fP = 'INFO' ':' 'compiler[' COMPILER_ID ']'"
.br
.ti -1c
.RI "char const  * \fBinfo_platform\fP = 'INFO' ':' 'platform[' PLATFORM_ID ']'"
.br
.ti -1c
.RI "char const  * \fBinfo_arch\fP = 'INFO' ':' 'arch[' ARCHITECTURE_ID ']'"
.br
.ti -1c
.RI "const char * \fBinfo_language_dialect_default\fP"
.br
.in -1c
.SH "Macro Definition Documentation"
.PP 
.SS "#define ARCHITECTURE_ID"

.PP
Definition at line 622 of file CMakeCCompilerId\&.c\&.
.SS "#define C_DIALECT"

.PP
Definition at line 706 of file CMakeCCompilerId\&.c\&.
.SS "#define COMPILER_ID   ''"

.PP
Definition at line 369 of file CMakeCCompilerId\&.c\&.
.SS "#define DEC(n)"
\fBValue:\fP
.PP
.nf
  ('0' + (((n) / 10000000)%10)), \
  ('0' + (((n) / 1000000)%10)),  \
  ('0' + (((n) / 100000)%10)),   \
  ('0' + (((n) / 10000)%10)),    \
  ('0' + (((n) / 1000)%10)),     \
  ('0' + (((n) / 100)%10)),      \
  ('0' + (((n) / 10)%10)),       \
  ('0' +  ((n) % 10))
.fi
.PP
Definition at line 626 of file CMakeCCompilerId\&.c\&.
.SS "#define HEX(n)"
\fBValue:\fP
.PP
.nf
  ('0' + ((n)>>28 & 0xF)), \
  ('0' + ((n)>>24 & 0xF)), \
  ('0' + ((n)>>20 & 0xF)), \
  ('0' + ((n)>>16 & 0xF)), \
  ('0' + ((n)>>12 & 0xF)), \
  ('0' + ((n)>>8  & 0xF)), \
  ('0' + ((n)>>4  & 0xF)), \
  ('0' + ((n)     & 0xF))
.fi
.PP
Definition at line 637 of file CMakeCCompilerId\&.c\&.
.SS "#define PLATFORM_ID"

.PP
Definition at line 494 of file CMakeCCompilerId\&.c\&.
.SS "#define STRINGIFY(X)   \fBSTRINGIFY_HELPER\fP(X)"

.PP
Definition at line 390 of file CMakeCCompilerId\&.c\&.
.SS "#define STRINGIFY_HELPER(X)   #X"

.PP
Definition at line 389 of file CMakeCCompilerId\&.c\&.
.SH "Function Documentation"
.PP 
.SS "int main (int argc, char * argv[])"

.PP
Definition at line 726 of file CMakeCCompilerId\&.c\&.
.PP
.nf
728 {
729   int require = 0;
730   require += info_compiler[argc];
731   require += info_platform[argc];
732   require += info_arch[argc];
733 #ifdef COMPILER_VERSION_MAJOR
734   require += info_version[argc];
735 #endif
736 #ifdef COMPILER_VERSION_INTERNAL
737   require += info_version_internal[argc];
738 #endif
739 #ifdef SIMULATE_ID
740   require += info_simulate[argc];
741 #endif
742 #ifdef SIMULATE_VERSION_MAJOR
743   require += info_simulate_version[argc];
744 #endif
745 #if defined(__CRAYXT_COMPUTE_LINUX_TARGET)
746   require += info_cray[argc];
747 #endif
748   require += info_language_dialect_default[argc];
749   (void)argv;
750   return require;
751 }
.fi
.PP
References info_arch, info_compiler, info_language_dialect_default, and info_platform\&.
.SH "Variable Documentation"
.PP 
.SS "char const* info_arch = 'INFO' ':' 'arch[' ARCHITECTURE_ID ']'"

.PP
Definition at line 697 of file CMakeCCompilerId\&.c\&.
.PP
Referenced by main()\&.
.SS "char const* info_compiler = 'INFO' ':' 'compiler[' COMPILER_ID ']'"

.PP
Definition at line 376 of file CMakeCCompilerId\&.c\&.
.PP
Referenced by main()\&.
.SS "const char* info_language_dialect_default"
\fBInitial value:\fP
.PP
.nf
=
  "INFO" ":" "dialect_default[" C_DIALECT "]"
.fi
.PP
Definition at line 715 of file CMakeCCompilerId\&.c\&.
.PP
Referenced by main()\&.
.SS "char const* info_platform = 'INFO' ':' 'platform[' PLATFORM_ID ']'"

.PP
Definition at line 696 of file CMakeCCompilerId\&.c\&.
.PP
Referenced by main()\&.
.SH "Author"
.PP 
Generated automatically by Doxygen for Hagn Tool Performance Counter from the source code\&.
