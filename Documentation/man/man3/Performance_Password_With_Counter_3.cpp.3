.TH "Tests/GTime Test Cases/Performance_Password_With_Counter_3.cpp" 3 "Sat Feb 12 2022" "Version 1.2" "Regions Of Interest (ROI) Profiler" \" -*- nroff -*-
.ad l
.nh
.SH NAME
Tests/GTime Test Cases/Performance_Password_With_Counter_3.cpp
.SH SYNOPSIS
.br
.PP
\fC#include <string>\fP
.br
\fC#include <vector>\fP
.br
\fC#include <iostream>\fP
.br
\fC#include '\&.\&./lib/DataStorage\&.cpp'\fP
.br

.SS "Functions"

.in +1c
.ti -1c
.RI "\fBDataStorage\fP \fBdataStorage\fP ('Runtime,Scope,ForStmt 2219423,CustomCompoundStmt i000004')"
.br
.ti -1c
.RI "int \fBmain\fP (void)"
.br
.in -1c
.SH "Function Documentation"
.PP 
.SS "\fBDataStorage\fP dataStorage (' Runtime, Scope, ForStmt 2219423, CustomCompoundStmt i000004')"

.SS "int main (void)"

.PP
Definition at line 6 of file Performance_Password_With_Counter_3\&.cpp\&.
.PP
.nf
6                {
7 dataStorage\&.startEvent(0);
8     std::vector <std::string> passwordStorage;
9     std::string password;
10     char current;
11 
12     for (int passwordCount = 0; passwordCount < 1000000; passwordCount++) {
13         dataStorage\&.startEvent(1);
14 for (int sectionCount = 0; sectionCount < 3; sectionCount++) {
15             dataStorage\&.startEvent(2);
16 for (int sectionLength = 0; sectionLength < 6; sectionLength++) {
17                 char lowerCase = rand() % 26 + 'a';
18                 char upperCase = rand() % 26 + 'A';
19                 char number = rand() % 10 + '0';
20 
21                 char randomChoice = (rand() % 100 + 1);
22                 if (randomChoice <= 40) {
23                     current = lowerCase;
24                 } else if (randomChoice <= 80) {
25                     current = upperCase;
26                 } else {
27                     current = number;
28                 }
29                 password += current;
30             }
31 dataStorage\&.endEvent(2);
32             dataStorage\&.startEvent(3);
33 password += '-';
34 dataStorage\&.endEvent(3);
35         }
36 dataStorage\&.endEvent(1);
37         password\&.pop_back();
38         passwordStorage\&.push_back(password);
39         password\&.clear();
40     }
41 
42     std::sort(passwordStorage\&.begin(), passwordStorage\&.end());
43     passwordStorage\&.erase(std::unique(passwordStorage\&.begin(),
44                                             passwordStorage\&.end()),
45                           passwordStorage\&.end());
46 
47     for (std::string currentPassword: passwordStorage) {
48         std::cout << currentPassword << '\n';
49     }
50 
51     dataStorage\&.endEvent(0);
52 dataStorage\&.print();return 0;
53 }
.fi
.PP
References dataStorage(), DataStorage::endEvent(), DataStorage::print(), and DataStorage::startEvent()\&.
.SH "Author"
.PP 
Generated automatically by Doxygen for Regions Of Interest (ROI) Profiler from the source code\&.
