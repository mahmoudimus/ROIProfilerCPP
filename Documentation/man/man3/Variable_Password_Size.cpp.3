.TH "Tests/VariablePassword Test/Variable_Password_Size.cpp" 3 "Sat Feb 12 2022" "Version 1.2" "Regions Of Interest (ROI) Profiler" \" -*- nroff -*-
.ad l
.nh
.SH NAME
Tests/VariablePassword Test/Variable_Password_Size.cpp
.SH SYNOPSIS
.br
.PP
\fC#include <string>\fP
.br
\fC#include <vector>\fP
.br
\fC#include <iostream>\fP
.br
\fC#include <random>\fP
.br
\fC#include '\&.\&./lib/DataStorage\&.cpp'\fP
.br

.SS "Functions"

.in +1c
.ti -1c
.RI "\fBDataStorage\fP \fBdataStorage\fP ('Runtime,Scope,CustomCompoundStmt i000002,IfStmt 2218252,CustomCompoundStmt i000005')"
.br
.ti -1c
.RI "int \fBmain\fP (void)"
.br
.in -1c
.SH "Function Documentation"
.PP 
.SS "\fBDataStorage\fP dataStorage (' Runtime, Scope, CustomCompoundStmt i000002, IfStmt 2218252, CustomCompoundStmt i000005')"

.PP
Referenced by main()\&.
.SS "int main (void)"

.PP
Definition at line 9 of file Variable_Password_Size\&.cpp\&.
.PP
.nf
9                {
10     std::random_device rd;
11     std::mt19937 gen(rd());
12     std::uniform_int_distribution<std::int64_t> dis(1, 20000000000);
13     dataStorage\&.startEvent(0);
14     std::vector <std::string> passwordStorage;
15     std::string password;
16     char current;
17     for (int passwordCount = 0; passwordCount < dis(gen); passwordCount++) {
18         for (int sectionCount = 0; sectionCount < 3; sectionCount++) {
19             dataStorage\&.startEvent(1);
20             for (int sectionLength = 0; sectionLength < 6; sectionLength++) {
21                 dataStorage\&.startEvent(2);
22                 char lowerCase = rand() % 26 + 'a';
23                 char upperCase = rand() % 26 + 'A';
24                 char number = rand() % 10 + '0';
25 
26                 char randomChoice = (rand() % 100 + 1);
27                 dataStorage\&.endEvent(2);
28                 dataStorage\&.startEvent(3);
29                 if (randomChoice <= 40) {
30                     current = lowerCase;
31                 } else if (randomChoice <= 80) {
32                     current = upperCase;
33                 } else {
34                     current = number;
35                 }
36                 dataStorage\&.endEvent(3);
37                 dataStorage\&.startEvent(4);
38                 password += current;
39                 dataStorage\&.endEvent(4);
40             }
41             dataStorage\&.endEvent(1);
42             password += '-';
43         }
44         password\&.pop_back();
45         passwordStorage\&.push_back(password);
46         password\&.clear();
47     }
48 
49     std::sort(passwordStorage\&.begin(), passwordStorage\&.end());
50     passwordStorage\&.erase(std::unique(passwordStorage\&.begin(),
51                                       passwordStorage\&.end()),
52                           passwordStorage\&.end());
53 
54     for (std::string currentPassword: passwordStorage) {
55         std::cout << currentPassword << '\n';
56         currentPassword\&.clear();
57     }
58 
59     dataStorage\&.endEvent(0);
60     dataStorage\&.print();
61     passwordStorage\&.clear();
62     passwordStorage\&.shrink_to_fit();
63     return 0;
64 }
.fi
.PP
References dataStorage(), DataStorage::endEvent(), DataStorage::print(), and DataStorage::startEvent()\&.
.SH "Author"
.PP 
Generated automatically by Doxygen for Regions Of Interest (ROI) Profiler from the source code\&.
