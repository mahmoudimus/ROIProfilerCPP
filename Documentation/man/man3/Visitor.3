.TH "Visitor" 3 "Sun Nov 14 2021" "Version 1.0" "Hagn Tool Performance Counter" \" -*- nroff -*-
.ad l
.nh
.SH NAME
Visitor
.SH SYNOPSIS
.br
.PP
.PP
Inherits RecursiveASTVisitor< Visitor >\&.
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBVisitor\fP (ASTContext *Context)"
.br
.ti -1c
.RI "virtual bool \fBVisitStmt\fP (Stmt *stmt)"
.br
.RI "Visit every statement linked to input file\&. If a stmt option is specified the tools searches for the first occurance of an statement with the specified id\&. The statement is then casted to the matching statement class and body of the statement will be extracted and annotated\&. "
.ti -1c
.RI "virtual bool \fBVisitFunctionDecl\fP (FunctionDecl *func)"
.br
.RI "Visit every function linked to input file\&. The functions are traversed to find locations for initialization, runtime performance counter and for printing the summary\&. If stmt option is not specified, the main method will be traversed\&. "
.ti -1c
.RI "virtual \fB~Visitor\fP ()"
.br
.in -1c
.SH "Detailed Description"
.PP 
Definition at line 212 of file HagnTool\&.cpp\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "Visitor::Visitor (ASTContext * Context)\fC [inline]\fP, \fC [explicit]\fP"

.PP
Definition at line 217 of file HagnTool\&.cpp\&.
.PP
.nf
218             : astContext( Context ) // initialize private members
219     {
220         rewriter\&.setSourceMgr( astContext->getSourceManager( ),
221                                astContext->getLangOpts( ));
222     }
.fi
.PP
References rewriter\&.
.SS "virtual Visitor::~Visitor ()\fC [inline]\fP, \fC [virtual]\fP"

.PP
Definition at line 328 of file HagnTool\&.cpp\&.
.PP
.nf
328 { }
.fi
.SH "Member Function Documentation"
.PP 
.SS "virtual bool Visitor::VisitFunctionDecl (FunctionDecl * func)\fC [inline]\fP, \fC [virtual]\fP"

.PP
Visit every function linked to input file\&. The functions are traversed to find locations for initialization, runtime performance counter and for printing the summary\&. If stmt option is not specified, the main method will be traversed\&. ! 
.PP
Definition at line 281 of file HagnTool\&.cpp\&.
.PP
.nf
281                                                          {
282 
283         // find initialization location for includes and initialization of hagn lib
284         if ( initializationLocation\&.isInvalid( ) &&
285              astContext->getSourceManager( )\&.isInMainFile( func->getLocation( ))) {
286             initializationLocation = func->getOuterLocStart( );
287         }
288 
289         // find first location in main class for runtime measurement
290         if ( runtimeStartLocation\&.isInvalid( ) &&
291              astContext->getSourceManager( )\&.isInMainFile( func->getLocation( ))) {
292             if ( func->isMain( )) {
293                 SourceLocation locAfterBrace( clang::Lexer::findLocationAfterToken(
294                         func->getBody( )->getBeginLoc( )\&.getLocWithOffset( -1 ), clang::tok::l_brace,
295                         astContext->getSourceManager( ),
296                         astContext->getLangOpts( ), true ));
297 
298                 runtimeStartLocation = locAfterBrace;
299             }
300         }
301 
302         // find summary location in main class for ending runtime event and print event
303         if ( summaryLocation\&.isInvalid( ) &&
304              astContext->getSourceManager( )\&.isInMainFile( func->getLocation( ))) {
305             if ( func->isMain( )) {
306                 for ( Stmt::child_iterator i = func->getBody( )->child_begin( ), e = func->getBody( )->child_end( );
307                       i != e; ++i ) {
308                     Stmt *currStmt = *i;
309                     if ( currStmt->getStmtClass( ) == Stmt::ReturnStmtClass ) {
310                         summaryLocation = currStmt->getBeginLoc( );
311                     }
312                 }
313             }
314         }
315 
316         // annotate only main function if statement option is start
317         if ( astContext->getSourceManager( )\&.isInMainFile( func->getLocation( ))) {
318             if ( statementOption == "start" ) {
319                 if ( func->isMain( )) {
320                     traverseChildren( func->getBody( ), astContext );
321                 }
322             }
323         }
324 
325         return 1;
326     }
.fi
.PP
References initializationLocation, runtimeStartLocation, statementOption, summaryLocation, and traverseChildren()\&.
.SS "virtual bool Visitor::VisitStmt (Stmt * stmt)\fC [inline]\fP, \fC [virtual]\fP"

.PP
Visit every statement linked to input file\&. If a stmt option is specified the tools searches for the first occurance of an statement with the specified id\&. The statement is then casted to the matching statement class and body of the statement will be extracted and annotated\&. ! 
.PP
Definition at line 232 of file HagnTool\&.cpp\&.
.PP
.nf
232                                          {
233         // only statements in main file
234         if ( astContext->getSourceManager( )\&.isInMainFile( stmt->getBeginLoc( ))) {
235             // when stmt identifier is specified
236             if ( statementOption != "start" ) {
237 
238                 // get statement identifier and cast to string
239                 int64_t currentId = stmt->getID( *astContext );
240                 std::string currentIdString = std::to_string( currentId );
241 
242                 // find statement with matching id
243                 if ( currentIdString == statementOption ) {
244                     rewriter\&.InsertText( stmt->getBeginLoc(), "dataStorage\&.startEvent(1);\n" );
245                     rewriter\&.InsertText( getLocationAfterToken(stmt->getEndLoc(), astContext), "dataStorage\&.endEvent(1);\n" );
246 
247                     if ( stmt->getStmtClass( ) == Stmt::CallExprClass ) {
248                         CallExpr *expr = cast<CallExpr>( stmt );
249                         Stmt *nextBody = expr->getDirectCallee( )->getBody( );
250                         traverseChildren( nextBody, astContext );
251                     }
252                     if ( stmt->getStmtClass( ) == Stmt::ForStmtClass ) {
253                         ForStmt *forStmt = cast<ForStmt>( stmt );
254                         Stmt *nextBody = forStmt->getBody( );
255                         traverseChildren( nextBody, astContext );
256                     }
257                     if ( stmt->getStmtClass( ) == Stmt::WhileStmtClass ) {
258                         WhileStmt *whileStmt = cast<WhileStmt>( stmt );
259                         Stmt *nextBody = whileStmt->getBody( );
260                         traverseChildren( nextBody, astContext );
261                     }
262                     if ( stmt->getStmtClass( ) == Stmt::IfStmtClass ) {
263                         IfStmt *ifStmt = cast<IfStmt>( stmt );
264                         Stmt *nextBody = ifStmt->getThen( );
265                         traverseChildren( nextBody, astContext );
266                     }
267                 }
268             }
269         }
270         return 1;
271     }
.fi
.PP
References getLocationAfterToken(), rewriter, statementOption, and traverseChildren()\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for Hagn Tool Performance Counter from the source code\&.
