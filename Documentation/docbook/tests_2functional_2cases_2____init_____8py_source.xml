<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_tests_2functional_2cases_2____init_____8py_source" xml:lang="en-US">
<title>__init__.py</title>
<indexterm><primary>/Users/maximilian/clang-llvm/clang/tools/scan-build-py/tests/functional/cases/__init__.py</primary></indexterm>
<programlisting><anchor xml:id="_tests_2functional_2cases_2____init_____8py_source_1l00001"/><link linkend="_namespacetests_1_1functional_1_1cases">00001</link> <emphasis role="comment">#&#32;-*-&#32;coding:&#32;utf-8&#32;-*-</emphasis>
00002 <emphasis role="comment">#&#32;Part&#32;of&#32;the&#32;LLVM&#32;Project,&#32;under&#32;the&#32;Apache&#32;License&#32;v2.0&#32;with&#32;LLVM&#32;Exceptions.</emphasis>
00003 <emphasis role="comment">#&#32;See&#32;https://llvm.org/LICENSE.txt&#32;for&#32;license&#32;information.</emphasis>
00004 <emphasis role="comment">#&#32;SPDX-License-Identifier:&#32;Apache-2.0&#32;WITH&#32;LLVM-exception</emphasis>
00005 
00006 <emphasis role="keyword">import</emphasis>&#32;re
00007 <emphasis role="keyword">import</emphasis>&#32;os.path
00008 <emphasis role="keyword">import</emphasis>&#32;subprocess
00009 
00010 
<anchor xml:id="_tests_2functional_2cases_2____init_____8py_source_1l00011"/><link linkend="_namespacetests_1_1functional_1_1cases_1ad2cfe420361c73119db59ae7fa4033fa">00011</link> <emphasis role="keyword">def&#32;</emphasis><link linkend="_namespacetests_1_1functional_1_1cases_1ad2cfe420361c73119db59ae7fa4033fa">load_tests</link>(loader,&#32;suite,&#32;pattern):
00012 &#32;&#32;&#32;&#32;<emphasis role="keyword">from</emphasis>&#32;.&#32;<emphasis role="keyword">import</emphasis>&#32;test_from_cdb
00013 &#32;&#32;&#32;&#32;suite.addTests(loader.loadTestsFromModule(test_from_cdb))
00014 &#32;&#32;&#32;&#32;<emphasis role="keyword">from</emphasis>&#32;.&#32;<emphasis role="keyword">import</emphasis>&#32;test_from_cmd
00015 &#32;&#32;&#32;&#32;suite.addTests(loader.loadTestsFromModule(test_from_cmd))
00016 &#32;&#32;&#32;&#32;<emphasis role="keyword">from</emphasis>&#32;.&#32;<emphasis role="keyword">import</emphasis>&#32;test_create_cdb
00017 &#32;&#32;&#32;&#32;suite.addTests(loader.loadTestsFromModule(test_create_cdb))
00018 &#32;&#32;&#32;&#32;<emphasis role="keyword">from</emphasis>&#32;.&#32;<emphasis role="keyword">import</emphasis>&#32;test_exec_anatomy
00019 &#32;&#32;&#32;&#32;suite.addTests(loader.loadTestsFromModule(test_exec_anatomy))
00020 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;suite
00021 
00022 
<anchor xml:id="_tests_2functional_2cases_2____init_____8py_source_1l00023"/><link linkend="_namespacetests_1_1functional_1_1cases_1afdf479d8f581ada915c125fd94e837c9">00023</link> <emphasis role="keyword">def&#32;</emphasis><link linkend="_namespacetests_1_1functional_1_1cases_1afdf479d8f581ada915c125fd94e837c9">make_args</link>(target):
00024 &#32;&#32;&#32;&#32;this_dir,&#32;_&#32;=&#32;os.path.split(__file__)
00025 &#32;&#32;&#32;&#32;path&#32;=&#32;os.path.abspath(os.path.join(this_dir,&#32;<emphasis role="stringliteral">&apos;..&apos;</emphasis>,&#32;<emphasis role="stringliteral">&apos;src&apos;</emphasis>))
00026 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;[<emphasis role="stringliteral">&apos;make&apos;</emphasis>,&#32;<emphasis role="stringliteral">&apos;SRCDIR={}&apos;</emphasis>.format(path),&#32;<emphasis role="stringliteral">&apos;OBJDIR={}&apos;</emphasis>.format(target),&#32;<emphasis role="stringliteral">&apos;-f&apos;</emphasis>,
00027 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;os.path.join(path,&#32;<emphasis role="stringliteral">&apos;build&apos;</emphasis>,&#32;<emphasis role="stringliteral">&apos;Makefile&apos;</emphasis>)]
00028 
00029 
<anchor xml:id="_tests_2functional_2cases_2____init_____8py_source_1l00030"/><link linkend="_namespacetests_1_1functional_1_1cases_1a7938ec1ad248e0480730d43397d6f3cd">00030</link> <emphasis role="keyword">def&#32;</emphasis><link linkend="_namespacetests_1_1functional_1_1cases_1a7938ec1ad248e0480730d43397d6f3cd">silent_call</link>(cmd,&#32;*args,&#32;**kwargs):
00031 &#32;&#32;&#32;&#32;kwargs.update({<emphasis role="stringliteral">&apos;stdout&apos;</emphasis>:&#32;subprocess.PIPE,&#32;<emphasis role="stringliteral">&apos;stderr&apos;</emphasis>:&#32;subprocess.STDOUT})
00032 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;subprocess.call(cmd,&#32;*args,&#32;**kwargs)
00033 
00034 
<anchor xml:id="_tests_2functional_2cases_2____init_____8py_source_1l00035"/><link linkend="_namespacetests_1_1functional_1_1cases_1adc1114de8d38e60438160311d84c8d43">00035</link> <emphasis role="keyword">def&#32;</emphasis><link linkend="_namespacetests_1_1functional_1_1cases_1adc1114de8d38e60438160311d84c8d43">silent_check_call</link>(cmd,&#32;*args,&#32;**kwargs):
00036 &#32;&#32;&#32;&#32;kwargs.update({<emphasis role="stringliteral">&apos;stdout&apos;</emphasis>:&#32;subprocess.PIPE,&#32;<emphasis role="stringliteral">&apos;stderr&apos;</emphasis>:&#32;subprocess.STDOUT})
00037 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;subprocess.check_call(cmd,&#32;*args,&#32;**kwargs)
00038 
00039 
<anchor xml:id="_tests_2functional_2cases_2____init_____8py_source_1l00040"/><link linkend="_namespacetests_1_1functional_1_1cases_1a024c367354bf63e4c7f8d4bccec8e2f9">00040</link> <emphasis role="keyword">def&#32;</emphasis><link linkend="_namespacetests_1_1functional_1_1cases_1a024c367354bf63e4c7f8d4bccec8e2f9">call_and_report</link>(analyzer_cmd,&#32;build_cmd):
00041 &#32;&#32;&#32;&#32;child&#32;=&#32;subprocess.Popen(analyzer_cmd&#32;+&#32;[<emphasis role="stringliteral">&apos;-v&apos;</emphasis>]&#32;+&#32;build_cmd,
00042 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;universal_newlines=<emphasis role="keyword">True</emphasis>,
00043 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;stdout=subprocess.PIPE,
00044 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;stderr=subprocess.STDOUT)
00045 
00046 &#32;&#32;&#32;&#32;pattern&#32;=&#32;re.compile(<emphasis role="stringliteral">&apos;Report&#32;directory&#32;created:&#32;(.+)&apos;</emphasis>)
00047 &#32;&#32;&#32;&#32;directory&#32;=&#32;<emphasis role="keywordtype">None</emphasis>
00048 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;line&#32;<emphasis role="keywordflow">in</emphasis>&#32;child.stdout.readlines():
00049 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;match&#32;=&#32;pattern.search(line)
00050 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;match&#32;<emphasis role="keywordflow">and</emphasis>&#32;match.lastindex&#32;==&#32;1:
00051 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;directory&#32;=&#32;match.group(1)
00052 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>
00053 &#32;&#32;&#32;&#32;child.stdout.close()
00054 &#32;&#32;&#32;&#32;child.wait()
00055 
00056 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(child.returncode,&#32;directory)
00057 
00058 
<anchor xml:id="_tests_2functional_2cases_2____init_____8py_source_1l00059"/><link linkend="_namespacetests_1_1functional_1_1cases_1a8d11835cf833f6de4ac834c961dcb01e">00059</link> <emphasis role="keyword">def&#32;</emphasis><link linkend="_namespacetests_1_1functional_1_1cases_1a8d11835cf833f6de4ac834c961dcb01e">check_call_and_report</link>(analyzer_cmd,&#32;build_cmd):
00060 &#32;&#32;&#32;&#32;exit_code,&#32;result&#32;=&#32;<link linkend="_namespacetests_1_1functional_1_1cases_1a024c367354bf63e4c7f8d4bccec8e2f9">call_and_report</link>(analyzer_cmd,&#32;build_cmd)
00061 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;exit_code&#32;!=&#32;0:
00062 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">raise</emphasis>&#32;subprocess.CalledProcessError(
00063 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;exit_code,&#32;analyzer_cmd&#32;+&#32;build_cmd,&#32;<emphasis role="keywordtype">None</emphasis>)
00064 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>:
00065 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;result
00066 
00067 
<anchor xml:id="_tests_2functional_2cases_2____init_____8py_source_1l00068"/><link linkend="_namespacetests_1_1functional_1_1cases_1a329bfe4766e9dade55f5b4e0ece589e1">00068</link> <emphasis role="keyword">def&#32;</emphasis><link linkend="_namespacetests_1_1functional_1_1cases_1a329bfe4766e9dade55f5b4e0ece589e1">create_empty_file</link>(filename):
00069 &#32;&#32;&#32;&#32;<emphasis role="keyword">with</emphasis>&#32;<link linkend="_namespacestartfile_1aa582f75134b683dc321c07d01ff8e501">open</link>(filename,&#32;<emphasis role="stringliteral">&apos;a&apos;</emphasis>)&#32;<emphasis role="keyword">as</emphasis>&#32;handle:
00070 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">pass</emphasis>
</programlisting></section>
