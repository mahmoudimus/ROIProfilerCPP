<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_class_file_handler" xml:lang="en-US">
<title>FileHandler Class Reference</title>
<indexterm><primary>FileHandler</primary></indexterm>
<para>

<para>Generic file handler interface. </para>
 
</para>
<para>Inheritance diagram for FileHandler:    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_file_handler.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
<simplesect>
    <title>Classes    </title>
        <itemizedlist>
            <listitem><para>struct <link linkend="_struct_file_handler_1_1_bundle_info">BundleInfo</link></para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Public Member Functions    </title>
        <itemizedlist>
            <listitem><para><link linkend="_class_file_handler_1a0d1ac8e9911e19255e8b2d99c2d93f43">FileHandler</link> ()</para>
</listitem>
            <listitem><para>virtual <link linkend="_class_file_handler_1a7763aaf84828a6eaaa5f14daca6b0797">~FileHandler</link> ()</para>
</listitem>
            <listitem><para>virtual Error <link linkend="_class_file_handler_1a0b973008bf7d7a53bc33d0f75b0dadef">ReadHeader</link> (MemoryBuffer &amp;Input)=0</para>
</listitem>
            <listitem><para>virtual Expected&lt; Optional&lt; StringRef &gt; &gt; <link linkend="_class_file_handler_1a5b31037af59fa8c77b8287d8ae9d84c4">ReadBundleStart</link> (MemoryBuffer &amp;Input)=0</para>
</listitem>
            <listitem><para>virtual Error <link linkend="_class_file_handler_1a0dc30eeb824c348cc6f9bba853c93c41">ReadBundleEnd</link> (MemoryBuffer &amp;Input)=0</para>

<para>Read the marker that closes the current bundle. </para>
</listitem>
            <listitem><para>virtual Error <link linkend="_class_file_handler_1a6e4e497d5160eff3cab43dfdfd7e2a13">ReadBundle</link> (raw_ostream &amp;OS, MemoryBuffer &amp;Input)=0</para>

<para>Read the current bundle and write the result into the stream <emphasis>OS</emphasis>. </para>
</listitem>
            <listitem><para>virtual Error <link linkend="_class_file_handler_1ab587b57538b319ab796b4f9ac060db56">WriteHeader</link> (raw_fd_ostream &amp;OS, ArrayRef&lt; std::unique_ptr&lt; MemoryBuffer &gt;&gt; Inputs)=0</para>
</listitem>
            <listitem><para>virtual Error <link linkend="_class_file_handler_1a023196b877e9ab83859f7194e9b38d9e">WriteBundleStart</link> (raw_fd_ostream &amp;OS, StringRef TargetTriple)=0</para>
</listitem>
            <listitem><para>virtual Error <link linkend="_class_file_handler_1a716f51f009426d516f30cd7527f25681">WriteBundleEnd</link> (raw_fd_ostream &amp;OS, StringRef TargetTriple)=0</para>
</listitem>
            <listitem><para>virtual Error <link linkend="_class_file_handler_1aa308cfef5f3c06d3c15478097799e0e5">WriteBundle</link> (raw_fd_ostream &amp;OS, MemoryBuffer &amp;Input)=0</para>

<para>Write the bundle from <emphasis>Input</emphasis> into <emphasis>OS</emphasis>. </para>
</listitem>
            <listitem><para>virtual Error <link linkend="_class_file_handler_1a70cbb9c0347d248c018e52993a13255b">listBundleIDs</link> (MemoryBuffer &amp;Input)</para>

<para>List bundle IDs in <emphasis>Input</emphasis>. </para>
</listitem>
            <listitem><para>Error <link linkend="_class_file_handler_1a70ed8dd129df99dcd5d5e42fffd7b125">forEachBundle</link> (MemoryBuffer &amp;Input, std::function&lt; Error(const <link linkend="_struct_file_handler_1_1_bundle_info">BundleInfo</link> &amp;)&gt; Func)</para>

<para>For each bundle in <emphasis>Input</emphasis>, do <emphasis>Func</emphasis>. </para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Protected Member Functions    </title>
        <itemizedlist>
            <listitem><para>virtual Error <link linkend="_class_file_handler_1af0a452c5014ddb59b9558614d21daaed">listBundleIDsCallback</link> (MemoryBuffer &amp;Input, const <link linkend="_struct_file_handler_1_1_bundle_info">BundleInfo</link> &amp;Info)</para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Detailed Description</title>

<para>Generic file handler interface. </para>
<para>
Definition at line <link linkend="__clang_offload_bundler_8cpp_source_1l00176">176</link> of file <link linkend="__clang_offload_bundler_8cpp_source">ClangOffloadBundler.cpp</link>.</para>
</section>
<section>
<title>Constructor &amp; Destructor Documentation</title>
<anchor xml:id="_class_file_handler_1a0d1ac8e9911e19255e8b2d99c2d93f43"/>    <section>
    <title>FileHandler()</title>
<indexterm><primary>FileHandler</primary><secondary>FileHandler</secondary></indexterm>
<indexterm><primary>FileHandler</primary><secondary>FileHandler</secondary></indexterm>
<para><computeroutput>FileHandler::FileHandler ( )<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line <link linkend="__clang_offload_bundler_8cpp_source_1l00182">182</link> of file <link linkend="__clang_offload_bundler_8cpp_source">ClangOffloadBundler.cpp</link>.</para>
<programlisting>00182 {}
</programlisting>    </section><anchor xml:id="_class_file_handler_1a7763aaf84828a6eaaa5f14daca6b0797"/>    <section>
    <title>~FileHandler()</title>
<indexterm><primary>~FileHandler</primary><secondary>FileHandler</secondary></indexterm>
<indexterm><primary>FileHandler</primary><secondary>~FileHandler</secondary></indexterm>
<para><computeroutput>virtual FileHandler::~FileHandler ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[virtual]</computeroutput></computeroutput></para><para>
Definition at line <link linkend="__clang_offload_bundler_8cpp_source_1l00184">184</link> of file <link linkend="__clang_offload_bundler_8cpp_source">ClangOffloadBundler.cpp</link>.</para>
<programlisting>00184 {}
</programlisting></section>
</section>
<section>
<title>Member Function Documentation</title>
<anchor xml:id="_class_file_handler_1a70ed8dd129df99dcd5d5e42fffd7b125"/>    <section>
    <title>forEachBundle()</title>
<indexterm><primary>forEachBundle</primary><secondary>FileHandler</secondary></indexterm>
<indexterm><primary>FileHandler</primary><secondary>forEachBundle</secondary></indexterm>
<para><computeroutput>Error FileHandler::forEachBundle (MemoryBuffer &amp; Input, std::function&lt; Error(const <link linkend="_struct_file_handler_1_1_bundle_info">BundleInfo</link> &amp;)&gt; Func)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>For each bundle in <emphasis>Input</emphasis>, do <emphasis>Func</emphasis>. </para>
</para>
<para>
Definition at line <link linkend="__clang_offload_bundler_8cpp_source_1l00234">234</link> of file <link linkend="__clang_offload_bundler_8cpp_source">ClangOffloadBundler.cpp</link>.</para>
<programlisting>00235 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00236 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(<emphasis role="keyword">true</emphasis>)&#32;{
00237 &#32;&#32;&#32;&#32;&#32;&#32;Expected&lt;Optional&lt;StringRef&gt;&gt;&#32;CurTripleOrErr&#32;=&#32;<link linkend="_class_file_handler_1a5b31037af59fa8c77b8287d8ae9d84c4">ReadBundleStart</link>(Input);
00238 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!CurTripleOrErr)
00239 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;CurTripleOrErr.takeError();
00240 
00241 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;No&#32;more&#32;bundles.</emphasis>
00242 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!*CurTripleOrErr)
00243 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
00244 
00245 &#32;&#32;&#32;&#32;&#32;&#32;StringRef&#32;CurTriple&#32;=&#32;**CurTripleOrErr;
00246 &#32;&#32;&#32;&#32;&#32;&#32;assert(!CurTriple.empty());
00247 
00248 &#32;&#32;&#32;&#32;&#32;&#32;BundleInfo&#32;Info{CurTriple};
00249 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(Error&#32;Err&#32;=&#32;Func(Info))
00250 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;Err;
00251 &#32;&#32;&#32;&#32;}
00252 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;Error::success();
00253 &#32;&#32;}
</programlisting>    </section><anchor xml:id="_class_file_handler_1a70cbb9c0347d248c018e52993a13255b"/>    <section>
    <title>listBundleIDs()</title>
<indexterm><primary>listBundleIDs</primary><secondary>FileHandler</secondary></indexterm>
<indexterm><primary>FileHandler</primary><secondary>listBundleIDs</secondary></indexterm>
<para><computeroutput>virtual Error FileHandler::listBundleIDs (MemoryBuffer &amp; Input)<computeroutput>[inline]</computeroutput>, <computeroutput>[virtual]</computeroutput></computeroutput></para><para>

<para>List bundle IDs in <emphasis>Input</emphasis>. </para>
</para>
<para>
Definition at line <link linkend="__clang_offload_bundler_8cpp_source_1l00220">220</link> of file <link linkend="__clang_offload_bundler_8cpp_source">ClangOffloadBundler.cpp</link>.</para>
<programlisting>00220 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00221 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(Error&#32;Err&#32;=&#32;<link linkend="_class_file_handler_1a0b973008bf7d7a53bc33d0f75b0dadef">ReadHeader</link>(Input))
00222 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;Err;
00223 
00224 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_class_file_handler_1a70ed8dd129df99dcd5d5e42fffd7b125">forEachBundle</link>(Input,&#32;[&amp;](<emphasis role="keyword">const</emphasis>&#32;BundleInfo&#32;&amp;Info)&#32;-&gt;&#32;Error&#32;{
00225 &#32;&#32;&#32;&#32;&#32;&#32;llvm::outs()&#32;&lt;&lt;&#32;Info.BundleID&#32;&lt;&lt;&#32;<emphasis role="charliteral">&apos;\n&apos;</emphasis>;
00226 &#32;&#32;&#32;&#32;&#32;&#32;Error&#32;Err&#32;=&#32;<link linkend="_class_file_handler_1af0a452c5014ddb59b9558614d21daaed">listBundleIDsCallback</link>(Input,&#32;Info);
00227 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(Err)
00228 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;Err;
00229 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;Error::success();
00230 &#32;&#32;&#32;&#32;});
00231 &#32;&#32;}
</programlisting>    </section><anchor xml:id="_class_file_handler_1af0a452c5014ddb59b9558614d21daaed"/>    <section>
    <title>listBundleIDsCallback()</title>
<indexterm><primary>listBundleIDsCallback</primary><secondary>FileHandler</secondary></indexterm>
<indexterm><primary>FileHandler</primary><secondary>listBundleIDsCallback</secondary></indexterm>
<para><computeroutput>virtual Error FileHandler::listBundleIDsCallback (MemoryBuffer &amp; Input, const <link linkend="_struct_file_handler_1_1_bundle_info">BundleInfo</link> &amp; Info)<computeroutput>[inline]</computeroutput>, <computeroutput>[protected]</computeroutput>, <computeroutput>[virtual]</computeroutput></computeroutput></para><para>
Reimplemented in <link linkend="_class_text_file_handler_1a87e2401d42b38125b706e0827723d5ec">TextFileHandler</link>.</para>
<para>
Definition at line <link linkend="__clang_offload_bundler_8cpp_source_1l00256">256</link> of file <link linkend="__clang_offload_bundler_8cpp_source">ClangOffloadBundler.cpp</link>.</para>
<programlisting>00257 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00258 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;Error::success();
00259 &#32;&#32;}
</programlisting>    </section><anchor xml:id="_class_file_handler_1a6e4e497d5160eff3cab43dfdfd7e2a13"/>    <section>
    <title>ReadBundle()</title>
<indexterm><primary>ReadBundle</primary><secondary>FileHandler</secondary></indexterm>
<indexterm><primary>FileHandler</primary><secondary>ReadBundle</secondary></indexterm>
<para><computeroutput>virtual Error FileHandler::ReadBundle (raw_ostream &amp; OS, MemoryBuffer &amp; Input)<computeroutput>[pure virtual]</computeroutput></computeroutput></para><para>

<para>Read the current bundle and write the result into the stream <emphasis>OS</emphasis>. </para>
</para>
<para>
Implemented in <link linkend="_class_text_file_handler_1a9c3c03be3a980778c30eb310515cd8d9">TextFileHandler</link>, <link linkend="_class_object_file_handler_1a8cf5a7c710bc3c27212d1976c80a8258">ObjectFileHandler</link>, and <link linkend="_class_binary_file_handler_1a03f6f2509a8d6d78e3ab800995f7f779">BinaryFileHandler</link>.</para>
    </section><anchor xml:id="_class_file_handler_1a0dc30eeb824c348cc6f9bba853c93c41"/>    <section>
    <title>ReadBundleEnd()</title>
<indexterm><primary>ReadBundleEnd</primary><secondary>FileHandler</secondary></indexterm>
<indexterm><primary>FileHandler</primary><secondary>ReadBundleEnd</secondary></indexterm>
<para><computeroutput>virtual Error FileHandler::ReadBundleEnd (MemoryBuffer &amp; Input)<computeroutput>[pure virtual]</computeroutput></computeroutput></para><para>

<para>Read the marker that closes the current bundle. </para>
</para>
<para>
Implemented in <link linkend="_class_text_file_handler_1ac39e2d78fcd9e6bb858e7b6efee23d65">TextFileHandler</link>, <link linkend="_class_object_file_handler_1ada66ffa9cbb4567b92dc3b371ea01481">ObjectFileHandler</link>, and <link linkend="_class_binary_file_handler_1af938c83df04fa66fe04c7e0563ade0f0">BinaryFileHandler</link>.</para>
    </section><anchor xml:id="_class_file_handler_1a5b31037af59fa8c77b8287d8ae9d84c4"/>    <section>
    <title>ReadBundleStart()</title>
<indexterm><primary>ReadBundleStart</primary><secondary>FileHandler</secondary></indexterm>
<indexterm><primary>FileHandler</primary><secondary>ReadBundleStart</secondary></indexterm>
<para><computeroutput>virtual Expected&lt;Optional&lt;StringRef&gt; &gt; FileHandler::ReadBundleStart (MemoryBuffer &amp; Input)<computeroutput>[pure virtual]</computeroutput></computeroutput></para>
<para>Read the marker of the next bundled to be read in the file. The bundle name is returned if there is one in the file, or <computeroutput>None</computeroutput> if there are no more bundles to be read. </para>
<para>
Implemented in <link linkend="_class_text_file_handler_1a6d1891944c44694f060e29b6782ccb23">TextFileHandler</link>, <link linkend="_class_object_file_handler_1ab8cb60c1eecea680fcdb327779cf66c3">ObjectFileHandler</link>, and <link linkend="_class_binary_file_handler_1a9ca3dc3dc36f16258fdd01844531f129">BinaryFileHandler</link>.</para>
    </section><anchor xml:id="_class_file_handler_1a0b973008bf7d7a53bc33d0f75b0dadef"/>    <section>
    <title>ReadHeader()</title>
<indexterm><primary>ReadHeader</primary><secondary>FileHandler</secondary></indexterm>
<indexterm><primary>FileHandler</primary><secondary>ReadHeader</secondary></indexterm>
<para><computeroutput>virtual Error FileHandler::ReadHeader (MemoryBuffer &amp; Input)<computeroutput>[pure virtual]</computeroutput></computeroutput></para>
<para>Update the file handler with information from the header of the bundled file. </para>
<para>
Implemented in <link linkend="_class_text_file_handler_1a1a17e99dd7b8dc26960f7cf517efe495">TextFileHandler</link>, <link linkend="_class_object_file_handler_1a721cdcac5b3554e5685c96f4788bc655">ObjectFileHandler</link>, and <link linkend="_class_binary_file_handler_1a4129cf2eeac5c792f546db1e43d5433c">BinaryFileHandler</link>.</para>
    </section><anchor xml:id="_class_file_handler_1aa308cfef5f3c06d3c15478097799e0e5"/>    <section>
    <title>WriteBundle()</title>
<indexterm><primary>WriteBundle</primary><secondary>FileHandler</secondary></indexterm>
<indexterm><primary>FileHandler</primary><secondary>WriteBundle</secondary></indexterm>
<para><computeroutput>virtual Error FileHandler::WriteBundle (raw_fd_ostream &amp; OS, MemoryBuffer &amp; Input)<computeroutput>[pure virtual]</computeroutput></computeroutput></para><para>

<para>Write the bundle from <emphasis>Input</emphasis> into <emphasis>OS</emphasis>. </para>
</para>
<para>
Implemented in <link linkend="_class_text_file_handler_1adad2a5ac6ba229cc8142dcf09d707246">TextFileHandler</link>, <link linkend="_class_object_file_handler_1ae617802036593fc283753c6ddf0ea221">ObjectFileHandler</link>, and <link linkend="_class_binary_file_handler_1ae293c57008f6d941531c76839d0cd371">BinaryFileHandler</link>.</para>
    </section><anchor xml:id="_class_file_handler_1a716f51f009426d516f30cd7527f25681"/>    <section>
    <title>WriteBundleEnd()</title>
<indexterm><primary>WriteBundleEnd</primary><secondary>FileHandler</secondary></indexterm>
<indexterm><primary>FileHandler</primary><secondary>WriteBundleEnd</secondary></indexterm>
<para><computeroutput>virtual Error FileHandler::WriteBundleEnd (raw_fd_ostream &amp; OS, StringRef TargetTriple)<computeroutput>[pure virtual]</computeroutput></computeroutput></para>
<para>Write the marker that closes a bundle for the triple <emphasis>TargetTriple</emphasis> to <emphasis>OS</emphasis>. </para>
<para>
Implemented in <link linkend="_class_text_file_handler_1a00f79b24f0428f2e285eaac0963367b5">TextFileHandler</link>, <link linkend="_class_object_file_handler_1aa0f573b07d6599ba4c403dfd4b43471a">ObjectFileHandler</link>, and <link linkend="_class_binary_file_handler_1ae8babe5e1a76494820097329a35f72ae">BinaryFileHandler</link>.</para>
    </section><anchor xml:id="_class_file_handler_1a023196b877e9ab83859f7194e9b38d9e"/>    <section>
    <title>WriteBundleStart()</title>
<indexterm><primary>WriteBundleStart</primary><secondary>FileHandler</secondary></indexterm>
<indexterm><primary>FileHandler</primary><secondary>WriteBundleStart</secondary></indexterm>
<para><computeroutput>virtual Error FileHandler::WriteBundleStart (raw_fd_ostream &amp; OS, StringRef TargetTriple)<computeroutput>[pure virtual]</computeroutput></computeroutput></para>
<para>Write the marker that initiates a bundle for the triple <emphasis>TargetTriple</emphasis> to <emphasis>OS</emphasis>. </para>
<para>
Implemented in <link linkend="_class_text_file_handler_1a2820cc3bdbf5f3070206e2a6dfd40b5c">TextFileHandler</link>, <link linkend="_class_object_file_handler_1a959f87929ecfa735f661b55a38695eda">ObjectFileHandler</link>, and <link linkend="_class_binary_file_handler_1aae0993fd9bf54ca80c3302f5e0810a8e">BinaryFileHandler</link>.</para>
    </section><anchor xml:id="_class_file_handler_1ab587b57538b319ab796b4f9ac060db56"/>    <section>
    <title>WriteHeader()</title>
<indexterm><primary>WriteHeader</primary><secondary>FileHandler</secondary></indexterm>
<indexterm><primary>FileHandler</primary><secondary>WriteHeader</secondary></indexterm>
<para><computeroutput>virtual Error FileHandler::WriteHeader (raw_fd_ostream &amp; OS, ArrayRef&lt; std::unique_ptr&lt; MemoryBuffer &gt;&gt; Inputs)<computeroutput>[pure virtual]</computeroutput></computeroutput></para>
<para>Write the header of the bundled file to <emphasis>OS</emphasis> based on the information gathered from <emphasis>Inputs</emphasis>. </para>
<para>
Implemented in <link linkend="_class_text_file_handler_1a08d81ba747fa631f4487236685048f82">TextFileHandler</link>, <link linkend="_class_object_file_handler_1a6bad7c10b02f3f50d099204afbc663a0">ObjectFileHandler</link>, and <link linkend="_class_binary_file_handler_1ab80cac5e41eaab070a155716de55c84d">BinaryFileHandler</link>.</para>
</section>
<para>
The documentation for this class was generated from the following file:</para>
/Users/maximilian/clang-llvm/clang/tools/clang-offload-bundler/<link linkend="__clang_offload_bundler_8cpp">ClangOffloadBundler.cpp</link></section>
</section>
