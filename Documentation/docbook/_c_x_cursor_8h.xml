<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="__c_x_cursor_8h" xml:lang="en-US">
<title>/Users/maximilian/clang-llvm/clang/tools/libclang/CXCursor.h File Reference</title>
<indexterm><primary>/Users/maximilian/clang-llvm/clang/tools/libclang/CXCursor.h</primary></indexterm>
<programlisting>#include &quot;clang-c/Index.h&quot;
#include &quot;clang/Basic/SourceLocation.h&quot;
#include &quot;llvm/ADT/PointerUnion.h&quot;
#include &lt;utility&gt;
</programlisting><simplesect>
    <title>Classes    </title>
        <itemizedlist>
            <listitem><para>class <link linkend="_classclang_1_1cxcursor_1_1_macro_expansion_cursor">clang::cxcursor::MacroExpansionCursor</link></para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Namespaces    </title>
        <itemizedlist>
            <listitem><para> <link linkend="_namespaceclang">clang</link></para>

<para>-rename </para>
</listitem>
            <listitem><para> <link linkend="_namespaceclang_1_1cxcursor">clang::cxcursor</link></para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Typedefs    </title>
        <itemizedlist>
            <listitem><para>typedef llvm::PointerUnion&lt; const OverloadExpr *, const Decl *, OverloadedTemplateStorage * &gt; <link linkend="_namespaceclang_1_1cxcursor_1a944e67de567f6905f10876d7585ac43b">clang::cxcursor::OverloadedDeclRefStorage</link></para>

<para>Internal storage for an overloaded declaration reference cursor;. </para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Functions    </title>
        <itemizedlist>
            <listitem><para>CXCursor <link linkend="_namespaceclang_1_1cxcursor_1a17dbc7b3a465bf9e70491f77a9a4f63b">clang::cxcursor::getCursor</link> (CXTranslationUnit, SourceLocation)</para>
</listitem>
            <listitem><para>CXCursor <link linkend="_namespaceclang_1_1cxcursor_1ab61ec2059175833672e8e78a376bb218">clang::cxcursor::MakeCXCursor</link> (const clang::Attr *A, const clang::Decl *Parent, CXTranslationUnit TU)</para>
</listitem>
            <listitem><para>CXCursor <link linkend="_namespaceclang_1_1cxcursor_1afb6735904aa885f268ed7ac96cd7d62c">clang::cxcursor::MakeCXCursor</link> (const clang::Decl *D, CXTranslationUnit TU, SourceRange RegionOfInterest=SourceRange(), bool FirstInDeclGroup=true)</para>
</listitem>
            <listitem><para>CXCursor <link linkend="_namespaceclang_1_1cxcursor_1a6821c2068a78ae14f1f106a8dc777101">clang::cxcursor::MakeCXCursor</link> (const clang::Stmt *S, const clang::Decl *Parent, CXTranslationUnit TU, SourceRange RegionOfInterest=SourceRange())</para>
</listitem>
            <listitem><para>CXCursor <link linkend="_namespaceclang_1_1cxcursor_1aa8325b990acde766ecd9276d7d9df53a">clang::cxcursor::MakeCXCursorInvalid</link> (CXCursorKind K, CXTranslationUnit TU=nullptr)</para>
</listitem>
            <listitem><para>CXCursor <link linkend="_namespaceclang_1_1cxcursor_1a81d6b09cb8995b57d394a8372437902a">clang::cxcursor::MakeCursorObjCSuperClassRef</link> (ObjCInterfaceDecl *Super, SourceLocation Loc, CXTranslationUnit TU)</para>

<para>Create an Objective-C superclass reference at the given location. </para>
</listitem>
            <listitem><para>std::pair&lt; const ObjCInterfaceDecl *, SourceLocation &gt; <link linkend="_namespaceclang_1_1cxcursor_1a071683bc881399c3bcadba5a4da408b2">clang::cxcursor::getCursorObjCSuperClassRef</link> (CXCursor C)</para>
</listitem>
            <listitem><para>CXCursor <link linkend="_namespaceclang_1_1cxcursor_1ac238ecc9f974783b9d0c2129f5aa675f">clang::cxcursor::MakeCursorObjCProtocolRef</link> (const ObjCProtocolDecl *Proto, SourceLocation Loc, CXTranslationUnit TU)</para>

<para>Create an Objective-C protocol reference at the given location. </para>
</listitem>
            <listitem><para>std::pair&lt; const ObjCProtocolDecl *, SourceLocation &gt; <link linkend="_namespaceclang_1_1cxcursor_1a1675d17bfec653da314fa2beff772829">clang::cxcursor::getCursorObjCProtocolRef</link> (CXCursor C)</para>
</listitem>
            <listitem><para>CXCursor <link linkend="_namespaceclang_1_1cxcursor_1aa0bea074dd325615cb85819eac47264e">clang::cxcursor::MakeCursorObjCClassRef</link> (const ObjCInterfaceDecl *Class, SourceLocation Loc, CXTranslationUnit TU)</para>

<para>Create an Objective-C class reference at the given location. </para>
</listitem>
            <listitem><para>std::pair&lt; const ObjCInterfaceDecl *, SourceLocation &gt; <link linkend="_namespaceclang_1_1cxcursor_1ad21fba4a3d5f6bdc63a19303b1cb42a3">clang::cxcursor::getCursorObjCClassRef</link> (CXCursor C)</para>
</listitem>
            <listitem><para>CXCursor <link linkend="_namespaceclang_1_1cxcursor_1a3534c264c1431ec3d09c975fcafa263d">clang::cxcursor::MakeCursorTypeRef</link> (const TypeDecl *Type, SourceLocation Loc, CXTranslationUnit TU)</para>

<para>Create a type reference at the given location. </para>
</listitem>
            <listitem><para>std::pair&lt; const TypeDecl *, SourceLocation &gt; <link linkend="_namespaceclang_1_1cxcursor_1ab0284c10c2cfeb2ffe43b99ec3e9dd9f">clang::cxcursor::getCursorTypeRef</link> (CXCursor C)</para>
</listitem>
            <listitem><para>CXCursor <link linkend="_namespaceclang_1_1cxcursor_1ac63e4fd5fdbaf88d0632a7682afbf744">clang::cxcursor::MakeCursorTemplateRef</link> (const TemplateDecl *Template, SourceLocation Loc, CXTranslationUnit TU)</para>

<para>Create a reference to a template at the given location. </para>
</listitem>
            <listitem><para>std::pair&lt; const TemplateDecl *, SourceLocation &gt; <link linkend="_namespaceclang_1_1cxcursor_1aacf77fc4aabf02cfa865e6fe19e55d08">clang::cxcursor::getCursorTemplateRef</link> (CXCursor C)</para>
</listitem>
            <listitem><para>CXCursor <link linkend="_namespaceclang_1_1cxcursor_1a6eadc019bbae1f61434528c197111b0e">clang::cxcursor::MakeCursorNamespaceRef</link> (const NamedDecl *NS, SourceLocation Loc, CXTranslationUnit TU)</para>
</listitem>
            <listitem><para>std::pair&lt; const NamedDecl *, SourceLocation &gt; <link linkend="_namespaceclang_1_1cxcursor_1ac87835a4525ca9f54e4666e7b76ec6f6">clang::cxcursor::getCursorNamespaceRef</link> (CXCursor C)</para>
</listitem>
            <listitem><para>CXCursor <link linkend="_namespaceclang_1_1cxcursor_1abb9724d664f29289d46fb5b34eaf94e9">clang::cxcursor::MakeCursorVariableRef</link> (const VarDecl *Var, SourceLocation Loc, CXTranslationUnit TU)</para>

<para>Create a reference to a variable at the given location. </para>
</listitem>
            <listitem><para>std::pair&lt; const VarDecl *, SourceLocation &gt; <link linkend="_namespaceclang_1_1cxcursor_1a53fa4c4c92a2fbaded59ad51eeed6e47">clang::cxcursor::getCursorVariableRef</link> (CXCursor C)</para>
</listitem>
            <listitem><para>CXCursor <link linkend="_namespaceclang_1_1cxcursor_1ad70c49c226f87377bc26fba7a4dbe973">clang::cxcursor::MakeCursorMemberRef</link> (const FieldDecl *Field, SourceLocation Loc, CXTranslationUnit TU)</para>

<para>Create a reference to a field at the given location. </para>
</listitem>
            <listitem><para>std::pair&lt; const FieldDecl *, SourceLocation &gt; <link linkend="_namespaceclang_1_1cxcursor_1af3f3d2390bed39285f0b3313c1fab84b">clang::cxcursor::getCursorMemberRef</link> (CXCursor C)</para>
</listitem>
            <listitem><para>CXCursor <link linkend="_namespaceclang_1_1cxcursor_1a13176d36398baf45f34e16a34ec04793">clang::cxcursor::MakeCursorCXXBaseSpecifier</link> (const CXXBaseSpecifier *B, CXTranslationUnit TU)</para>

<para>Create a CXX base specifier cursor. </para>
</listitem>
            <listitem><para>const CXXBaseSpecifier * <link linkend="_namespaceclang_1_1cxcursor_1a05b387c1d9aeb75b3de539f8622e0964">clang::cxcursor::getCursorCXXBaseSpecifier</link> (CXCursor C)</para>

<para>Unpack a CXXBaseSpecifier cursor into a CXXBaseSpecifier. </para>
</listitem>
            <listitem><para>CXCursor <link linkend="_namespaceclang_1_1cxcursor_1a1fb1c1775cb1f7e194f860c8e5903a71">clang::cxcursor::MakePreprocessingDirectiveCursor</link> (SourceRange Range, CXTranslationUnit TU)</para>

<para>Create a preprocessing directive cursor. </para>
</listitem>
            <listitem><para>SourceRange <link linkend="_namespaceclang_1_1cxcursor_1ad23bd48471b18d4d196d9777f3943e25">clang::cxcursor::getCursorPreprocessingDirective</link> (CXCursor C)</para>

<para>Unpack a given preprocessing directive to retrieve its source range. </para>
</listitem>
            <listitem><para>CXCursor <link linkend="_namespaceclang_1_1cxcursor_1a62e05b7f28b894bf90226918a8f3386a">clang::cxcursor::MakeMacroDefinitionCursor</link> (const MacroDefinitionRecord *, CXTranslationUnit TU)</para>

<para>Create a macro definition cursor. </para>
</listitem>
            <listitem><para>const MacroDefinitionRecord * <link linkend="_namespaceclang_1_1cxcursor_1a62254c8ae8eca4c0ca0f2d2a659e7d80">clang::cxcursor::getCursorMacroDefinition</link> (CXCursor C)</para>
</listitem>
            <listitem><para>CXCursor <link linkend="_namespaceclang_1_1cxcursor_1a64450be5a9ef97c872d47219caaccfce">clang::cxcursor::MakeMacroExpansionCursor</link> (MacroExpansion *, CXTranslationUnit TU)</para>

<para>Create a macro expansion cursor. </para>
</listitem>
            <listitem><para>CXCursor <link linkend="_namespaceclang_1_1cxcursor_1a2f0963c1339f8f17a78824250aee3918">clang::cxcursor::MakeMacroExpansionCursor</link> (MacroDefinitionRecord *, SourceLocation Loc, CXTranslationUnit TU)</para>
</listitem>
            <listitem><para>CXCursor <link linkend="_namespaceclang_1_1cxcursor_1acc1961183c2fb603b894a7f8621b16bb">clang::cxcursor::MakeInclusionDirectiveCursor</link> (InclusionDirective *, CXTranslationUnit TU)</para>

<para>Create an inclusion directive cursor. </para>
</listitem>
            <listitem><para>const InclusionDirective * <link linkend="_namespaceclang_1_1cxcursor_1a3894d584fef6edb8ba4333fc240315ac">clang::cxcursor::getCursorInclusionDirective</link> (CXCursor C)</para>
</listitem>
            <listitem><para>CXCursor <link linkend="_namespaceclang_1_1cxcursor_1a2e83069419ec783a32e4ee2b67d5144a">clang::cxcursor::MakeCursorLabelRef</link> (LabelStmt *Label, SourceLocation Loc, CXTranslationUnit TU)</para>

<para>Create a label reference at the given location. </para>
</listitem>
            <listitem><para>std::pair&lt; const LabelStmt *, SourceLocation &gt; <link linkend="_namespaceclang_1_1cxcursor_1a642e34370b829d06752d76d13c6a58dd">clang::cxcursor::getCursorLabelRef</link> (CXCursor C)</para>
</listitem>
            <listitem><para>CXCursor <link linkend="_namespaceclang_1_1cxcursor_1a631225e024301b99cc72be73f0ee9271">clang::cxcursor::MakeCursorOverloadedDeclRef</link> (const OverloadExpr *E, CXTranslationUnit TU)</para>

<para>Create a overloaded declaration reference cursor for an expression. </para>
</listitem>
            <listitem><para>CXCursor <link linkend="_namespaceclang_1_1cxcursor_1ad20f1744eb56e19aad0226a6cd6a0814">clang::cxcursor::MakeCursorOverloadedDeclRef</link> (const Decl *D, SourceLocation Location, CXTranslationUnit TU)</para>

<para>Create a overloaded declaration reference cursor for a declaration. </para>
</listitem>
            <listitem><para>CXCursor <link linkend="_namespaceclang_1_1cxcursor_1aa16bf67907c5d2ea8d38dbf9c25115f3">clang::cxcursor::MakeCursorOverloadedDeclRef</link> (TemplateName Template, SourceLocation Location, CXTranslationUnit TU)</para>

<para>Create a overloaded declaration reference cursor for a template name. </para>
</listitem>
            <listitem><para>std::pair&lt; <link linkend="_namespaceclang_1_1cxcursor_1a944e67de567f6905f10876d7585ac43b">OverloadedDeclRefStorage</link>, SourceLocation &gt; <link linkend="_namespaceclang_1_1cxcursor_1a4b41e93d6de24aed1376ec7f789efa2a">clang::cxcursor::getCursorOverloadedDeclRef</link> (CXCursor C)</para>
</listitem>
            <listitem><para>const Decl * <link linkend="_namespaceclang_1_1cxcursor_1a1f702246831c96afd990e457613dc642">clang::cxcursor::getCursorDecl</link> (CXCursor Cursor)</para>
</listitem>
            <listitem><para>const Expr * <link linkend="_namespaceclang_1_1cxcursor_1a80837a3710c6df0dfc24b5ee1d94ff9b">clang::cxcursor::getCursorExpr</link> (CXCursor Cursor)</para>
</listitem>
            <listitem><para>const Stmt * <link linkend="_namespaceclang_1_1cxcursor_1a2d5cb233204f81be58bd21deb628c7ad">clang::cxcursor::getCursorStmt</link> (CXCursor Cursor)</para>
</listitem>
            <listitem><para>const Attr * <link linkend="_namespaceclang_1_1cxcursor_1afdc6aa952869e16b4981b07f05adff7f">clang::cxcursor::getCursorAttr</link> (CXCursor Cursor)</para>
</listitem>
            <listitem><para>ASTContext &amp; <link linkend="_namespaceclang_1_1cxcursor_1a9f29c286f26b3cf616331c7e6554d373">clang::cxcursor::getCursorContext</link> (CXCursor Cursor)</para>
</listitem>
            <listitem><para>ASTUnit * <link linkend="_namespaceclang_1_1cxcursor_1a68c106f7bebde4f72b0fe7f6f67e8f29">clang::cxcursor::getCursorASTUnit</link> (CXCursor Cursor)</para>
</listitem>
            <listitem><para>CXTranslationUnit <link linkend="_namespaceclang_1_1cxcursor_1a23a495df22339e8289ae6d2421f493b6">clang::cxcursor::getCursorTU</link> (CXCursor Cursor)</para>
</listitem>
            <listitem><para>void <link linkend="_namespaceclang_1_1cxcursor_1ada86f0e873b92af5429ba6da7c7cd56f">clang::cxcursor::getOverriddenCursors</link> (CXCursor cursor, SmallVectorImpl&lt; CXCursor &gt; &amp;overridden)</para>
</listitem>
            <listitem><para>void * <link linkend="_namespaceclang_1_1cxcursor_1af71b6ad00df82de093f378557ee93240">clang::cxcursor::createOverridenCXCursorsPool</link> ()</para>
</listitem>
            <listitem><para>void <link linkend="_namespaceclang_1_1cxcursor_1a3e9eef17e1ba69991801fcfcfc8a0d9e">clang::cxcursor::disposeOverridenCXCursorsPool</link> (void *pool)</para>

<para>Dispose of the overridden CXCursors pool. </para>
</listitem>
            <listitem><para>std::pair&lt; int, SourceLocation &gt; <link linkend="_namespaceclang_1_1cxcursor_1ac0203107f2338d86b2c77680155c3bf5">clang::cxcursor::getSelectorIdentifierIndexAndLoc</link> (CXCursor)</para>
</listitem>
            <listitem><para>CXCursor <link linkend="_namespaceclang_1_1cxcursor_1a3fd86e25b3fca940466669d13b0ea93e">clang::cxcursor::getSelectorIdentifierCursor</link> (int SelIdx, CXCursor cursor)</para>
</listitem>
            <listitem><para>CXCursor <link linkend="_namespaceclang_1_1cxcursor_1aa5198a2a166b25337d2c20917d3d28ce">clang::cxcursor::getTypeRefCursor</link> (CXCursor cursor)</para>
</listitem>
            <listitem><para>bool <link linkend="_namespaceclang_1_1cxcursor_1a70c40817415cbc686e998bde4fe2e16e">clang::cxcursor::getDeclCursorUSR</link> (const Decl *D, SmallVectorImpl&lt; char &gt; &amp;Buf)</para>
</listitem>
            <listitem><para>bool <link linkend="_namespaceclang_1_1cxcursor_1a6eba9b639ae06e944e28d8a44767cf72">clang::cxcursor::operator==</link> (CXCursor X, CXCursor Y)</para>
</listitem>
            <listitem><para>bool <link linkend="_namespaceclang_1_1cxcursor_1a787f5669055ba25e698a444d0106005f">clang::cxcursor::operator!=</link> (CXCursor X, CXCursor Y)</para>
</listitem>
            <listitem><para>bool <link linkend="_namespaceclang_1_1cxcursor_1a1ae32d54126c07eca2ab10d9ce40af7c">clang::cxcursor::isFirstInDeclGroup</link> (CXCursor C)</para>
</listitem>
        </itemizedlist>
</simplesect>
</section>
