<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="__c_index_8cpp_source" xml:lang="en-US">
<title>CIndex.cpp</title>
<indexterm><primary>/Users/maximilian/clang-llvm/clang/tools/libclang/CIndex.cpp</primary></indexterm>
<programlisting>00001 <emphasis role="comment">//===-&#32;CIndex.cpp&#32;-&#32;Clang-C&#32;Source&#32;Indexing&#32;Library&#32;-----------------------===//</emphasis>
00002 <emphasis role="comment">//</emphasis>
00003 <emphasis role="comment">//&#32;Part&#32;of&#32;the&#32;LLVM&#32;Project,&#32;under&#32;the&#32;Apache&#32;License&#32;v2.0&#32;with&#32;LLVM&#32;Exceptions.</emphasis>
00004 <emphasis role="comment">//&#32;See&#32;https://llvm.org/LICENSE.txt&#32;for&#32;license&#32;information.</emphasis>
00005 <emphasis role="comment">//&#32;SPDX-License-Identifier:&#32;Apache-2.0&#32;WITH&#32;LLVM-exception</emphasis>
00006 <emphasis role="comment">//</emphasis>
00007 <emphasis role="comment">//===----------------------------------------------------------------------===//</emphasis>
00008 <emphasis role="comment">//</emphasis>
00009 <emphasis role="comment">//&#32;This&#32;file&#32;implements&#32;the&#32;main&#32;API&#32;hooks&#32;in&#32;the&#32;Clang-C&#32;Source&#32;Indexing</emphasis>
00010 <emphasis role="comment">//&#32;library.</emphasis>
00011 <emphasis role="comment">//</emphasis>
00012 <emphasis role="comment">//===----------------------------------------------------------------------===//</emphasis>
00013 
00014 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="__c_index_diagnostic_8h">CIndexDiagnostic.h</link>&quot;</emphasis>
00015 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="__c_indexer_8h">CIndexer.h</link>&quot;</emphasis>
00016 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="__c_log_8h">CLog.h</link>&quot;</emphasis>
00017 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="__c_x_cursor_8h">CXCursor.h</link>&quot;</emphasis>
00018 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="__c_x_source_location_8h">CXSourceLocation.h</link>&quot;</emphasis>
00019 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="__c_x_string_8h">CXString.h</link>&quot;</emphasis>
00020 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="__c_x_translation_unit_8h">CXTranslationUnit.h</link>&quot;</emphasis>
00021 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="__c_x_type_8h">CXType.h</link>&quot;</emphasis>
00022 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="__cursor_visitor_8h">CursorVisitor.h</link>&quot;</emphasis>
00023 <emphasis role="preprocessor">#include&#32;&quot;clang-c/FatalErrorHandler.h&quot;</emphasis>
00024 <emphasis role="preprocessor">#include&#32;&quot;clang/AST/Attr.h&quot;</emphasis>
00025 <emphasis role="preprocessor">#include&#32;&quot;clang/AST/DeclObjCCommon.h&quot;</emphasis>
00026 <emphasis role="preprocessor">#include&#32;&quot;clang/AST/Mangle.h&quot;</emphasis>
00027 <emphasis role="preprocessor">#include&#32;&quot;clang/AST/OpenMPClause.h&quot;</emphasis>
00028 <emphasis role="preprocessor">#include&#32;&quot;clang/AST/StmtVisitor.h&quot;</emphasis>
00029 <emphasis role="preprocessor">#include&#32;&quot;clang/Basic/Diagnostic.h&quot;</emphasis>
00030 <emphasis role="preprocessor">#include&#32;&quot;clang/Basic/DiagnosticCategories.h&quot;</emphasis>
00031 <emphasis role="preprocessor">#include&#32;&quot;clang/Basic/DiagnosticIDs.h&quot;</emphasis>
00032 <emphasis role="preprocessor">#include&#32;&quot;clang/Basic/Stack.h&quot;</emphasis>
00033 <emphasis role="preprocessor">#include&#32;&quot;clang/Basic/TargetInfo.h&quot;</emphasis>
00034 <emphasis role="preprocessor">#include&#32;&quot;clang/Basic/Version.h&quot;</emphasis>
00035 <emphasis role="preprocessor">#include&#32;&quot;clang/Frontend/ASTUnit.h&quot;</emphasis>
00036 <emphasis role="preprocessor">#include&#32;&quot;clang/Frontend/CompilerInstance.h&quot;</emphasis>
00037 <emphasis role="preprocessor">#include&#32;&quot;clang/Index/CommentToXML.h&quot;</emphasis>
00038 <emphasis role="preprocessor">#include&#32;&quot;clang/Lex/HeaderSearch.h&quot;</emphasis>
00039 <emphasis role="preprocessor">#include&#32;&quot;clang/Lex/Lexer.h&quot;</emphasis>
00040 <emphasis role="preprocessor">#include&#32;&quot;clang/Lex/PreprocessingRecord.h&quot;</emphasis>
00041 <emphasis role="preprocessor">#include&#32;&quot;clang/Lex/Preprocessor.h&quot;</emphasis>
00042 <emphasis role="preprocessor">#include&#32;&quot;llvm/ADT/Optional.h&quot;</emphasis>
00043 <emphasis role="preprocessor">#include&#32;&quot;llvm/ADT/STLExtras.h&quot;</emphasis>
00044 <emphasis role="preprocessor">#include&#32;&quot;llvm/ADT/StringSwitch.h&quot;</emphasis>
00045 <emphasis role="preprocessor">#include&#32;&quot;llvm/Config/llvm-config.h&quot;</emphasis>
00046 <emphasis role="preprocessor">#include&#32;&quot;llvm/Support/Compiler.h&quot;</emphasis>
00047 <emphasis role="preprocessor">#include&#32;&quot;llvm/Support/CrashRecoveryContext.h&quot;</emphasis>
00048 <emphasis role="preprocessor">#include&#32;&quot;llvm/Support/Format.h&quot;</emphasis>
00049 <emphasis role="preprocessor">#include&#32;&quot;llvm/Support/ManagedStatic.h&quot;</emphasis>
00050 <emphasis role="preprocessor">#include&#32;&quot;llvm/Support/MemoryBuffer.h&quot;</emphasis>
00051 <emphasis role="preprocessor">#include&#32;&quot;llvm/Support/Program.h&quot;</emphasis>
00052 <emphasis role="preprocessor">#include&#32;&quot;llvm/Support/SaveAndRestore.h&quot;</emphasis>
00053 <emphasis role="preprocessor">#include&#32;&quot;llvm/Support/Signals.h&quot;</emphasis>
00054 <emphasis role="preprocessor">#include&#32;&quot;llvm/Support/TargetSelect.h&quot;</emphasis>
00055 <emphasis role="preprocessor">#include&#32;&quot;llvm/Support/Threading.h&quot;</emphasis>
00056 <emphasis role="preprocessor">#include&#32;&quot;llvm/Support/Timer.h&quot;</emphasis>
00057 <emphasis role="preprocessor">#include&#32;&quot;llvm/Support/raw_ostream.h&quot;</emphasis>
00058 <emphasis role="preprocessor">#include&#32;&lt;mutex&gt;</emphasis>
00059 
00060 <emphasis role="preprocessor">#if&#32;LLVM_ENABLE_THREADS&#32;!=&#32;0&#32;&amp;&amp;&#32;defined(__APPLE__)</emphasis>
00061 <emphasis role="preprocessor">#define&#32;USE_DARWIN_THREADS</emphasis>
00062 <emphasis role="preprocessor">#endif</emphasis>
00063 
00064 <emphasis role="preprocessor">#ifdef&#32;USE_DARWIN_THREADS</emphasis>
00065 <emphasis role="preprocessor">#include&#32;&lt;pthread.h&gt;</emphasis>
00066 <emphasis role="preprocessor">#endif</emphasis>
00067 
00068 <emphasis role="keyword">using&#32;namespace&#32;</emphasis><link linkend="_namespaceclang">clang</link>;
00069 <emphasis role="keyword">using&#32;namespace&#32;</emphasis><link linkend="_namespaceclang_1_1cxcursor">clang::cxcursor</link>;
00070 <emphasis role="keyword">using&#32;namespace&#32;</emphasis><link linkend="_namespaceclang_1_1cxtu">clang::cxtu</link>;
00071 <emphasis role="keyword">using&#32;namespace&#32;</emphasis><link linkend="_namespaceclang_1_1cxindex">clang::cxindex</link>;
00072 
<anchor xml:id="__c_index_8cpp_source_1l00073"/><link linkend="_namespaceclang_1_1cxtu_1a00c98a9560b39abf66fa58c2059de48e">00073</link> CXTranslationUnit&#32;<link linkend="_namespaceclang_1_1cxtu_1a00c98a9560b39abf66fa58c2059de48e">cxtu::MakeCXTranslationUnit</link>(<link linkend="_classclang_1_1_c_indexer">CIndexer</link>&#32;*CIdx,
00074 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::unique_ptr&lt;ASTUnit&gt;&#32;AU)&#32;{
00075 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!AU)
00076 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">nullptr</emphasis>;
00077 &#32;&#32;assert(CIdx);
00078 &#32;&#32;CXTranslationUnit&#32;D&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_struct_c_x_translation_unit_impl">CXTranslationUnitImpl</link>();
00079 &#32;&#32;D-&gt;CIdx&#32;=&#32;CIdx;
00080 &#32;&#32;D-&gt;TheASTUnit&#32;=&#32;AU.release();
00081 &#32;&#32;D-&gt;StringPool&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_classclang_1_1cxstring_1_1_c_x_string_pool">cxstring::CXStringPool</link>();
00082 &#32;&#32;D-&gt;Diagnostics&#32;=&#32;<emphasis role="keyword">nullptr</emphasis>;
00083 &#32;&#32;D-&gt;OverridenCursorsPool&#32;=&#32;<link linkend="_namespaceclang_1_1cxcursor_1af71b6ad00df82de093f378557ee93240">createOverridenCXCursorsPool</link>();
00084 &#32;&#32;D-&gt;CommentToXML&#32;=&#32;<emphasis role="keyword">nullptr</emphasis>;
00085 &#32;&#32;D-&gt;ParsingOptions&#32;=&#32;0;
00086 &#32;&#32;D-&gt;Arguments&#32;=&#32;{};
00087 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;D;
00088 }
00089 
<anchor xml:id="__c_index_8cpp_source_1l00090"/><link linkend="_namespaceclang_1_1cxtu_1a780a13d3a9c39b2898045b05ff18c05e">00090</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_namespaceclang_1_1cxtu_1a780a13d3a9c39b2898045b05ff18c05e">cxtu::isASTReadError</link>(ASTUnit&#32;*AU)&#32;{
00091 &#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(ASTUnit::stored_diag_iterator&#32;D&#32;=&#32;AU-&gt;stored_diag_begin(),
00092 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;DEnd&#32;=&#32;AU-&gt;stored_diag_end();
00093 &#32;&#32;&#32;&#32;&#32;&#32;&#32;D&#32;!=&#32;DEnd;&#32;++D)&#32;{
00094 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(D-&gt;getLevel()&#32;&gt;=&#32;DiagnosticsEngine::Error&#32;&amp;&amp;
00095 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;DiagnosticIDs::getCategoryNumberForDiag(D-&gt;getID())&#32;==
00096 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;diag::DiagCat_AST_Deserialization_Issue)
00097 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
00098 &#32;&#32;}
00099 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
00100 }
00101 
<anchor xml:id="__c_index_8cpp_source_1l00102"/><link linkend="_classclang_1_1cxtu_1_1_c_x_t_u_owner_1a3e333d59a8dbbcd24fde7326edabce77">00102</link> <link linkend="_classclang_1_1cxtu_1_1_c_x_t_u_owner_1a3e333d59a8dbbcd24fde7326edabce77">cxtu::CXTUOwner::~CXTUOwner</link>()&#32;{
00103 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(TU)
00104 &#32;&#32;&#32;&#32;<link linkend="__c_index_8cpp_1a3af88c13004a1954abd6dc956faff3be">clang_disposeTranslationUnit</link>(TU);
00105 }
00106 
00109 <emphasis role="keyword">static</emphasis>&#32;<link linkend="__index___internal_8h_1afca6208bdc188ac29b169260314b7af2">RangeComparisonResult</link>&#32;RangeCompare(SourceManager&#32;&amp;SM,&#32;SourceRange&#32;R1,
00110 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;SourceRange&#32;R2)&#32;{
00111 &#32;&#32;assert(R1.isValid()&#32;&amp;&amp;&#32;<emphasis role="stringliteral">&quot;First&#32;range&#32;is&#32;invalid?&quot;</emphasis>);
00112 &#32;&#32;assert(R2.isValid()&#32;&amp;&amp;&#32;<emphasis role="stringliteral">&quot;Second&#32;range&#32;is&#32;invalid?&quot;</emphasis>);
00113 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(R1.getEnd()&#32;!=&#32;R2.getBegin()&#32;&amp;&amp;
00114 &#32;&#32;&#32;&#32;&#32;&#32;SM.isBeforeInTranslationUnit(R1.getEnd(),&#32;R2.getBegin()))
00115 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__index___internal_8h_1afca6208bdc188ac29b169260314b7af2a1626bf1782f58fe2a2bf082c4c30e850">RangeBefore</link>;
00116 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(R2.getEnd()&#32;!=&#32;R1.getBegin()&#32;&amp;&amp;
00117 &#32;&#32;&#32;&#32;&#32;&#32;SM.isBeforeInTranslationUnit(R2.getEnd(),&#32;R1.getBegin()))
00118 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__index___internal_8h_1afca6208bdc188ac29b169260314b7af2a7540aa4ebed8662d6f41ec33073611a0">RangeAfter</link>;
00119 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__index___internal_8h_1afca6208bdc188ac29b169260314b7af2a87e2eee30c9b5a3c2108f2128413157a">RangeOverlap</link>;
00120 }
00121 
00124 <emphasis role="keyword">static</emphasis>&#32;<link linkend="__index___internal_8h_1afca6208bdc188ac29b169260314b7af2">RangeComparisonResult</link>&#32;LocationCompare(SourceManager&#32;&amp;SM,
00125 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;SourceLocation&#32;L,&#32;SourceRange&#32;R)&#32;{
00126 &#32;&#32;assert(R.isValid()&#32;&amp;&amp;&#32;<emphasis role="stringliteral">&quot;First&#32;range&#32;is&#32;invalid?&quot;</emphasis>);
00127 &#32;&#32;assert(L.isValid()&#32;&amp;&amp;&#32;<emphasis role="stringliteral">&quot;Second&#32;range&#32;is&#32;invalid?&quot;</emphasis>);
00128 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(L&#32;==&#32;R.getBegin()&#32;||&#32;L&#32;==&#32;R.getEnd())
00129 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__index___internal_8h_1afca6208bdc188ac29b169260314b7af2a87e2eee30c9b5a3c2108f2128413157a">RangeOverlap</link>;
00130 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(SM.isBeforeInTranslationUnit(L,&#32;R.getBegin()))
00131 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__index___internal_8h_1afca6208bdc188ac29b169260314b7af2a1626bf1782f58fe2a2bf082c4c30e850">RangeBefore</link>;
00132 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(SM.isBeforeInTranslationUnit(R.getEnd(),&#32;L))
00133 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__index___internal_8h_1afca6208bdc188ac29b169260314b7af2a7540aa4ebed8662d6f41ec33073611a0">RangeAfter</link>;
00134 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__index___internal_8h_1afca6208bdc188ac29b169260314b7af2a87e2eee30c9b5a3c2108f2128413157a">RangeOverlap</link>;
00135 }
00136 
<anchor xml:id="__c_index_8cpp_source_1l00143"/><link linkend="_namespaceclang_1_1cxloc_1a39d02b462b1f3233518f01951d83d035">00143</link> CXSourceRange&#32;<link linkend="_namespaceclang_1_1cxloc_1a39d02b462b1f3233518f01951d83d035">cxloc::translateSourceRange</link>(<emphasis role="keyword">const</emphasis>&#32;SourceManager&#32;&amp;SM,
00144 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;LangOptions&#32;&amp;LangOpts,
00145 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;CharSourceRange&#32;&amp;R)&#32;{
00146 &#32;&#32;<emphasis role="comment">//&#32;We&#32;want&#32;the&#32;last&#32;character&#32;in&#32;this&#32;location,&#32;so&#32;we&#32;will&#32;adjust&#32;the</emphasis>
00147 &#32;&#32;<emphasis role="comment">//&#32;location&#32;accordingly.</emphasis>
00148 &#32;&#32;SourceLocation&#32;EndLoc&#32;=&#32;R.getEnd();
00149 &#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;IsTokenRange&#32;=&#32;R.isTokenRange();
00150 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(EndLoc.isValid()&#32;&amp;&amp;&#32;EndLoc.isMacroID()&#32;&amp;&amp;
00151 &#32;&#32;&#32;&#32;&#32;&#32;!SM.isMacroArgExpansion(EndLoc))&#32;{
00152 &#32;&#32;&#32;&#32;CharSourceRange&#32;Expansion&#32;=&#32;SM.getExpansionRange(EndLoc);
00153 &#32;&#32;&#32;&#32;EndLoc&#32;=&#32;Expansion.getEnd();
00154 &#32;&#32;&#32;&#32;IsTokenRange&#32;=&#32;Expansion.isTokenRange();
00155 &#32;&#32;}
00156 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(IsTokenRange&#32;&amp;&amp;&#32;EndLoc.isValid())&#32;{
00157 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;Length&#32;=
00158 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Lexer::MeasureTokenLength(SM.getSpellingLoc(EndLoc),&#32;SM,&#32;LangOpts);
00159 &#32;&#32;&#32;&#32;EndLoc&#32;=&#32;EndLoc.getLocWithOffset(Length);
00160 &#32;&#32;}
00161 
00162 &#32;&#32;CXSourceRange&#32;Result&#32;=&#32;{
00163 &#32;&#32;&#32;&#32;&#32;&#32;{&amp;SM,&#32;&amp;LangOpts},&#32;R.getBegin().getRawEncoding(),&#32;EndLoc.getRawEncoding()};
00164 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;Result;
00165 }
00166 
<anchor xml:id="__c_index_8cpp_source_1l00167"/><link linkend="_namespaceclang_1_1cxloc_1aa8c3cee435c88a9e8a61f79cc8a0c0da">00167</link> CharSourceRange&#32;<link linkend="_namespaceclang_1_1cxloc_1aa8c3cee435c88a9e8a61f79cc8a0c0da">cxloc::translateCXRangeToCharRange</link>(CXSourceRange&#32;R)&#32;{
00168 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;CharSourceRange::getCharRange(
00169 &#32;&#32;&#32;&#32;&#32;&#32;SourceLocation::getFromRawEncoding(R.begin_int_data),
00170 &#32;&#32;&#32;&#32;&#32;&#32;SourceLocation::getFromRawEncoding(R.end_int_data));
00171 }
00172 
00173 <emphasis role="comment">//===----------------------------------------------------------------------===//</emphasis>
00174 <emphasis role="comment">//&#32;Cursor&#32;visitor.</emphasis>
00175 <emphasis role="comment">//===----------------------------------------------------------------------===//</emphasis>
00176 
00177 <emphasis role="keyword">static</emphasis>&#32;SourceRange&#32;getRawCursorExtent(CXCursor&#32;C);
00178 <emphasis role="keyword">static</emphasis>&#32;SourceRange&#32;getFullCursorExtent(CXCursor&#32;C,&#32;SourceManager&#32;&amp;SrcMgr);
00179 
00180 <link linkend="__index___internal_8h_1afca6208bdc188ac29b169260314b7af2">RangeComparisonResult</link>&#32;CursorVisitor::CompareRegionOfInterest(SourceRange&#32;R)&#32;{
00181 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;RangeCompare(AU-&gt;getSourceManager(),&#32;R,&#32;RegionOfInterest);
00182 }
00183 
<anchor xml:id="__c_index_8cpp_source_1l00194"/><link linkend="_classclang_1_1cxcursor_1_1_cursor_visitor_1a01659df2ce565980ce5b581ba7a970e3">00194</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classclang_1_1cxcursor_1_1_cursor_visitor_1a01659df2ce565980ce5b581ba7a970e3">CursorVisitor::Visit</link>(CXCursor&#32;Cursor,&#32;<emphasis role="keywordtype">bool</emphasis>&#32;CheckedRegionOfInterest)&#32;{
00195 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="__c_index_8cpp_1a0c5b391d8bca745084fb8906cce6f66c">clang_isInvalid</link>(Cursor.kind))
00196 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
00197 
00198 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="__c_index_8cpp_1a5d47db8f608ae0c266d6551875d46b80">clang_isDeclaration</link>(Cursor.kind))&#32;{
00199 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;Decl&#32;*D&#32;=&#32;<link linkend="_namespaceclang_1_1cxcursor_1a1f702246831c96afd990e457613dc642">getCursorDecl</link>(Cursor);
00200 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!D)&#32;{
00201 &#32;&#32;&#32;&#32;&#32;&#32;assert(0&#32;&amp;&amp;&#32;<emphasis role="stringliteral">&quot;Invalid&#32;declaration&#32;cursor&quot;</emphasis>);
00202 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;&#32;<emphasis role="comment">//&#32;abort.</emphasis>
00203 &#32;&#32;&#32;&#32;}
00204 
00205 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Ignore&#32;implicit&#32;declarations,&#32;unless&#32;it&apos;s&#32;an&#32;objc&#32;method&#32;because</emphasis>
00206 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;currently&#32;we&#32;should&#32;report&#32;implicit&#32;methods&#32;for&#32;properties&#32;when&#32;indexing.</emphasis>
00207 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(D-&gt;isImplicit()&#32;&amp;&amp;&#32;!isa&lt;ObjCMethodDecl&gt;(D))
00208 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
00209 &#32;&#32;}
00210 
00211 &#32;&#32;<emphasis role="comment">//&#32;If&#32;we&#32;have&#32;a&#32;range&#32;of&#32;interest,&#32;and&#32;this&#32;cursor&#32;doesn&apos;t&#32;intersect&#32;with&#32;it,</emphasis>
00212 &#32;&#32;<emphasis role="comment">//&#32;we&apos;re&#32;done.</emphasis>
00213 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(RegionOfInterest.isValid()&#32;&amp;&amp;&#32;!CheckedRegionOfInterest)&#32;{
00214 &#32;&#32;&#32;&#32;SourceRange&#32;Range&#32;=&#32;getRawCursorExtent(Cursor);
00215 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(Range.isInvalid()&#32;||&#32;CompareRegionOfInterest(Range))
00216 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
00217 &#32;&#32;}
00218 
00219 &#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(Visitor(Cursor,&#32;Parent,&#32;ClientData))&#32;{
00220 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXChildVisit_Break:
00221 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
00222 
00223 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXChildVisit_Continue:
00224 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
00225 
00226 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXChildVisit_Recurse:&#32;{
00227 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;ret&#32;=&#32;VisitChildren(Cursor);
00228 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(PostChildrenVisitor)
00229 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(PostChildrenVisitor(Cursor,&#32;ClientData))
00230 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
00231 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;ret;
00232 &#32;&#32;}
00233 &#32;&#32;}
00234 
00235 &#32;&#32;llvm_unreachable(<emphasis role="stringliteral">&quot;Invalid&#32;CXChildVisitResult!&quot;</emphasis>);
00236 }
00237 
00238 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;visitPreprocessedEntitiesInRange(SourceRange&#32;R,
00239 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;PreprocessingRecord&#32;&amp;PPRec,
00240 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classclang_1_1cxcursor_1_1_cursor_visitor">CursorVisitor</link>&#32;&amp;Visitor)&#32;{
00241 &#32;&#32;SourceManager&#32;&amp;SM&#32;=&#32;Visitor.<link linkend="_classclang_1_1cxcursor_1_1_cursor_visitor_1a15a5897204e1c9d037e412c6f94df2a1">getASTUnit</link>()-&gt;getSourceManager();
00242 &#32;&#32;FileID&#32;FID;
00243 
00244 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!Visitor.<link linkend="_classclang_1_1cxcursor_1_1_cursor_visitor_1a4fdbc31529cd9171bac1ff4a347db1a6">shouldVisitIncludedEntities</link>())&#32;{
00245 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;If&#32;the&#32;begin/end&#32;of&#32;the&#32;range&#32;lie&#32;in&#32;the&#32;same&#32;FileID,&#32;do&#32;the&#32;optimization</emphasis>
00246 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;where&#32;we&#32;skip&#32;preprocessed&#32;entities&#32;that&#32;do&#32;not&#32;come&#32;from&#32;the&#32;same</emphasis>
00247 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;FileID.</emphasis>
00248 &#32;&#32;&#32;&#32;FID&#32;=&#32;SM.getFileID(SM.getFileLoc(R.getBegin()));
00249 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(FID&#32;!=&#32;SM.getFileID(SM.getFileLoc(R.getEnd())))
00250 &#32;&#32;&#32;&#32;&#32;&#32;FID&#32;=&#32;FileID();
00251 &#32;&#32;}
00252 
00253 &#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;&amp;Entities&#32;=&#32;PPRec.getPreprocessedEntitiesInRange(R);
00254 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;Visitor.<link linkend="_classclang_1_1cxcursor_1_1_cursor_visitor_1a70914a4f8ef86d9c92d0b65da5177111">visitPreprocessedEntities</link>(Entities.begin(),&#32;Entities.end(),
00255 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;PPRec,&#32;FID);
00256 }
00257 
<anchor xml:id="__c_index_8cpp_source_1l00258"/><link linkend="_classclang_1_1cxcursor_1_1_cursor_visitor_1a24fbcc462d22a47ef5e7c02eef77d610">00258</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classclang_1_1cxcursor_1_1_cursor_visitor_1a24fbcc462d22a47ef5e7c02eef77d610">CursorVisitor::visitFileRegion</link>()&#32;{
00259 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(RegionOfInterest.isInvalid())
00260 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
00261 
00262 &#32;&#32;ASTUnit&#32;*Unit&#32;=&#32;cxtu::getASTUnit(TU);
00263 &#32;&#32;SourceManager&#32;&amp;SM&#32;=&#32;Unit-&gt;getSourceManager();
00264 
00265 &#32;&#32;std::pair&lt;FileID,&#32;unsigned&gt;&#32;Begin&#32;=&#32;SM.getDecomposedLoc(
00266 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;SM.getFileLoc(RegionOfInterest.getBegin())),
00267 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;End&#32;=&#32;SM.getDecomposedLoc(
00268 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;SM.getFileLoc(RegionOfInterest.getEnd()));
00269 
00270 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(End.first&#32;!=&#32;Begin.first)&#32;{
00271 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;If&#32;the&#32;end&#32;does&#32;not&#32;reside&#32;in&#32;the&#32;same&#32;file,&#32;try&#32;to&#32;recover&#32;by</emphasis>
00272 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;picking&#32;the&#32;end&#32;of&#32;the&#32;file&#32;of&#32;begin&#32;location.</emphasis>
00273 &#32;&#32;&#32;&#32;End.first&#32;=&#32;Begin.first;
00274 &#32;&#32;&#32;&#32;End.second&#32;=&#32;SM.getFileIDSize(Begin.first);
00275 &#32;&#32;}
00276 
00277 &#32;&#32;assert(Begin.first&#32;==&#32;End.first);
00278 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(Begin.second&#32;&gt;&#32;End.second)
00279 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
00280 
00281 &#32;&#32;FileID&#32;File&#32;=&#32;Begin.first;
00282 &#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;Offset&#32;=&#32;Begin.second;
00283 &#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;Length&#32;=&#32;End.second&#32;-&#32;Begin.second;
00284 
00285 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!VisitDeclsOnly&#32;&amp;&amp;&#32;!VisitPreprocessorLast)
00286 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(visitPreprocessedEntitiesInRegion())
00287 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;&#32;<emphasis role="comment">//&#32;visitation&#32;break.</emphasis>
00288 
00289 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(visitDeclsFromFileRegion(File,&#32;Offset,&#32;Length))
00290 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;&#32;<emphasis role="comment">//&#32;visitation&#32;break.</emphasis>
00291 
00292 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!VisitDeclsOnly&#32;&amp;&amp;&#32;VisitPreprocessorLast)
00293 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;visitPreprocessedEntitiesInRegion();
00294 
00295 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
00296 }
00297 
00298 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;isInLexicalContext(Decl&#32;*D,&#32;DeclContext&#32;*DC)&#32;{
00299 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!DC)
00300 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
00301 
00302 &#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(DeclContext&#32;*DeclDC&#32;=&#32;D-&gt;getLexicalDeclContext();&#32;DeclDC;
00303 &#32;&#32;&#32;&#32;&#32;&#32;&#32;DeclDC&#32;=&#32;DeclDC-&gt;getLexicalParent())&#32;{
00304 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(DeclDC&#32;==&#32;DC)
00305 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
00306 &#32;&#32;}
00307 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
00308 }
00309 
00310 <emphasis role="keywordtype">bool</emphasis>&#32;CursorVisitor::visitDeclsFromFileRegion(FileID&#32;File,&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;Offset,
00311 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;Length)&#32;{
00312 &#32;&#32;ASTUnit&#32;*Unit&#32;=&#32;cxtu::getASTUnit(TU);
00313 &#32;&#32;SourceManager&#32;&amp;SM&#32;=&#32;Unit-&gt;getSourceManager();
00314 &#32;&#32;SourceRange&#32;Range&#32;=&#32;RegionOfInterest;
00315 
00316 &#32;&#32;SmallVector&lt;Decl&#32;*,&#32;16&gt;&#32;Decls;
00317 &#32;&#32;Unit-&gt;findFileRegionDecls(File,&#32;Offset,&#32;Length,&#32;Decls);
00318 
00319 &#32;&#32;<emphasis role="comment">//&#32;If&#32;we&#32;didn&apos;t&#32;find&#32;any&#32;file&#32;level&#32;decls&#32;for&#32;the&#32;file,&#32;try&#32;looking&#32;at&#32;the</emphasis>
00320 &#32;&#32;<emphasis role="comment">//&#32;file&#32;that&#32;it&#32;was&#32;included&#32;from.</emphasis>
00321 &#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(Decls.empty()&#32;||&#32;Decls.front()-&gt;isTopLevelDeclInObjCContainer())&#32;{
00322 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;Invalid&#32;=&#32;<emphasis role="keyword">false</emphasis>;
00323 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;SrcMgr::SLocEntry&#32;&amp;SLEntry&#32;=&#32;SM.getSLocEntry(File,&#32;&amp;Invalid);
00324 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(Invalid)
00325 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
00326 
00327 &#32;&#32;&#32;&#32;SourceLocation&#32;Outer;
00328 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(SLEntry.isFile())
00329 &#32;&#32;&#32;&#32;&#32;&#32;Outer&#32;=&#32;SLEntry.getFile().getIncludeLoc();
00330 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
00331 &#32;&#32;&#32;&#32;&#32;&#32;Outer&#32;=&#32;SLEntry.getExpansion().getExpansionLocStart();
00332 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(Outer.isInvalid())
00333 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
00334 
00335 &#32;&#32;&#32;&#32;std::tie(File,&#32;Offset)&#32;=&#32;SM.getDecomposedExpansionLoc(Outer);
00336 &#32;&#32;&#32;&#32;Length&#32;=&#32;0;
00337 &#32;&#32;&#32;&#32;Unit-&gt;findFileRegionDecls(File,&#32;Offset,&#32;Length,&#32;Decls);
00338 &#32;&#32;}
00339 
00340 &#32;&#32;assert(!Decls.empty());
00341 
00342 &#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;VisitedAtLeastOnce&#32;=&#32;<emphasis role="keyword">false</emphasis>;
00343 &#32;&#32;DeclContext&#32;*CurDC&#32;=&#32;<emphasis role="keyword">nullptr</emphasis>;
00344 &#32;&#32;SmallVectorImpl&lt;Decl&#32;*&gt;::iterator&#32;DIt&#32;=&#32;Decls.begin();
00345 &#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(SmallVectorImpl&lt;Decl&#32;*&gt;::iterator&#32;DE&#32;=&#32;Decls.end();&#32;DIt&#32;!=&#32;DE;&#32;++DIt)&#32;{
00346 &#32;&#32;&#32;&#32;Decl&#32;*D&#32;=&#32;*DIt;
00347 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(D-&gt;getSourceRange().isInvalid())
00348 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">continue</emphasis>;
00349 
00350 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(isInLexicalContext(D,&#32;CurDC))
00351 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">continue</emphasis>;
00352 
00353 &#32;&#32;&#32;&#32;CurDC&#32;=&#32;dyn_cast&lt;DeclContext&gt;(D);
00354 
00355 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(TagDecl&#32;*TD&#32;=&#32;dyn_cast&lt;TagDecl&gt;(D))
00356 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!TD-&gt;isFreeStanding())
00357 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">continue</emphasis>;
00358 
00359 &#32;&#32;&#32;&#32;<link linkend="__index___internal_8h_1afca6208bdc188ac29b169260314b7af2">RangeComparisonResult</link>&#32;CompRes&#32;=
00360 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;RangeCompare(SM,&#32;D-&gt;getSourceRange(),&#32;Range);
00361 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(CompRes&#32;==&#32;<link linkend="__index___internal_8h_1afca6208bdc188ac29b169260314b7af2a1626bf1782f58fe2a2bf082c4c30e850">RangeBefore</link>)
00362 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">continue</emphasis>;
00363 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(CompRes&#32;==&#32;<link linkend="__index___internal_8h_1afca6208bdc188ac29b169260314b7af2a7540aa4ebed8662d6f41ec33073611a0">RangeAfter</link>)
00364 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
00365 
00366 &#32;&#32;&#32;&#32;assert(CompRes&#32;==&#32;<link linkend="__index___internal_8h_1afca6208bdc188ac29b169260314b7af2a87e2eee30c9b5a3c2108f2128413157a">RangeOverlap</link>);
00367 &#32;&#32;&#32;&#32;VisitedAtLeastOnce&#32;=&#32;<emphasis role="keyword">true</emphasis>;
00368 
00369 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(isa&lt;ObjCContainerDecl&gt;(D))&#32;{
00370 &#32;&#32;&#32;&#32;&#32;&#32;FileDI_current&#32;=&#32;&amp;DIt;
00371 &#32;&#32;&#32;&#32;&#32;&#32;FileDE_current&#32;=&#32;DE;
00372 &#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
00373 &#32;&#32;&#32;&#32;&#32;&#32;FileDI_current&#32;=&#32;<emphasis role="keyword">nullptr</emphasis>;
00374 &#32;&#32;&#32;&#32;}
00375 
00376 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(Visit(<link linkend="_namespaceclang_1_1cxcursor_1ab61ec2059175833672e8e78a376bb218">MakeCXCursor</link>(D,&#32;TU,&#32;Range),&#32;<emphasis role="comment">/*CheckedRegionOfInterest=*/</emphasis><emphasis role="keyword">true</emphasis>))
00377 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;&#32;<emphasis role="comment">//&#32;visitation&#32;break.</emphasis>
00378 &#32;&#32;}
00379 
00380 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(VisitedAtLeastOnce)
00381 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
00382 
00383 &#32;&#32;<emphasis role="comment">//&#32;No&#32;Decls&#32;overlapped&#32;with&#32;the&#32;range.&#32;Move&#32;up&#32;the&#32;lexical&#32;context&#32;until&#32;there</emphasis>
00384 &#32;&#32;<emphasis role="comment">//&#32;is&#32;a&#32;context&#32;that&#32;contains&#32;the&#32;range&#32;or&#32;we&#32;reach&#32;the&#32;translation&#32;unit</emphasis>
00385 &#32;&#32;<emphasis role="comment">//&#32;level.</emphasis>
00386 &#32;&#32;DeclContext&#32;*DC&#32;=&#32;DIt&#32;==&#32;Decls.begin()
00387 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;?&#32;(*DIt)-&gt;getLexicalDeclContext()
00388 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;(*(DIt&#32;-&#32;1))-&gt;getLexicalDeclContext();
00389 
00390 &#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(DC&#32;&amp;&amp;&#32;!DC-&gt;isTranslationUnit())&#32;{
00391 &#32;&#32;&#32;&#32;Decl&#32;*D&#32;=&#32;cast&lt;Decl&gt;(DC);
00392 &#32;&#32;&#32;&#32;SourceRange&#32;CurDeclRange&#32;=&#32;D-&gt;getSourceRange();
00393 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(CurDeclRange.isInvalid())
00394 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
00395 
00396 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(RangeCompare(SM,&#32;CurDeclRange,&#32;Range)&#32;==&#32;<link linkend="__index___internal_8h_1afca6208bdc188ac29b169260314b7af2a87e2eee30c9b5a3c2108f2128413157a">RangeOverlap</link>)&#32;{
00397 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(Visit(<link linkend="_namespaceclang_1_1cxcursor_1ab61ec2059175833672e8e78a376bb218">MakeCXCursor</link>(D,&#32;TU,&#32;Range),&#32;<emphasis role="comment">/*CheckedRegionOfInterest=*/</emphasis><emphasis role="keyword">true</emphasis>))
00398 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;&#32;<emphasis role="comment">//&#32;visitation&#32;break.</emphasis>
00399 &#32;&#32;&#32;&#32;}
00400 
00401 &#32;&#32;&#32;&#32;DC&#32;=&#32;D-&gt;getLexicalDeclContext();
00402 &#32;&#32;}
00403 
00404 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
00405 }
00406 
<anchor xml:id="__c_index_8cpp_source_1l00407"/><link linkend="_classclang_1_1cxcursor_1_1_cursor_visitor_1a4f29bab7210fb14b41a847ab87705f46">00407</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classclang_1_1cxcursor_1_1_cursor_visitor_1a4f29bab7210fb14b41a847ab87705f46">CursorVisitor::visitPreprocessedEntitiesInRegion</link>()&#32;{
00408 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!AU-&gt;getPreprocessor().getPreprocessingRecord())
00409 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
00410 
00411 &#32;&#32;PreprocessingRecord&#32;&amp;PPRec&#32;=&#32;*AU-&gt;getPreprocessor().getPreprocessingRecord();
00412 &#32;&#32;SourceManager&#32;&amp;SM&#32;=&#32;AU-&gt;getSourceManager();
00413 
00414 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(RegionOfInterest.isValid())&#32;{
00415 &#32;&#32;&#32;&#32;SourceRange&#32;MappedRange&#32;=&#32;AU-&gt;mapRangeToPreamble(RegionOfInterest);
00416 &#32;&#32;&#32;&#32;SourceLocation&#32;B&#32;=&#32;MappedRange.getBegin();
00417 &#32;&#32;&#32;&#32;SourceLocation&#32;E&#32;=&#32;MappedRange.getEnd();
00418 
00419 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(AU-&gt;isInPreambleFileID(B))&#32;{
00420 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(SM.isLoadedSourceLocation(E))
00421 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;visitPreprocessedEntitiesInRange(SourceRange(B,&#32;E),&#32;PPRec,
00422 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*<emphasis role="keyword">this</emphasis>);
00423 
00424 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Beginning&#32;of&#32;range&#32;lies&#32;in&#32;the&#32;preamble&#32;but&#32;it&#32;also&#32;extends&#32;beyond</emphasis>
00425 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;it&#32;into&#32;the&#32;main&#32;file.&#32;Split&#32;the&#32;range&#32;into&#32;2&#32;parts,&#32;one&#32;covering</emphasis>
00426 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;the&#32;preamble&#32;and&#32;another&#32;covering&#32;the&#32;main&#32;file.&#32;This&#32;allows&#32;subsequent</emphasis>
00427 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;calls&#32;to&#32;visitPreprocessedEntitiesInRange&#32;to&#32;accept&#32;a&#32;source&#32;range&#32;that</emphasis>
00428 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;lies&#32;in&#32;the&#32;same&#32;FileID,&#32;allowing&#32;it&#32;to&#32;skip&#32;preprocessed&#32;entities&#32;that</emphasis>
00429 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;do&#32;not&#32;come&#32;from&#32;the&#32;same&#32;FileID.</emphasis>
00430 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;breaked&#32;=&#32;visitPreprocessedEntitiesInRange(
00431 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;SourceRange(B,&#32;AU-&gt;getEndOfPreambleFileID()),&#32;PPRec,&#32;*<emphasis role="keyword">this</emphasis>);
00432 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(breaked)
00433 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
00434 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;visitPreprocessedEntitiesInRange(
00435 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;SourceRange(AU-&gt;getStartOfMainFileID(),&#32;E),&#32;PPRec,&#32;*<emphasis role="keyword">this</emphasis>);
00436 &#32;&#32;&#32;&#32;}
00437 
00438 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;visitPreprocessedEntitiesInRange(SourceRange(B,&#32;E),&#32;PPRec,&#32;*<emphasis role="keyword">this</emphasis>);
00439 &#32;&#32;}
00440 
00441 &#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;OnlyLocalDecls&#32;=&#32;!AU-&gt;isMainFileAST()&#32;&amp;&amp;&#32;AU-&gt;getOnlyLocalDecls();
00442 
00443 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(OnlyLocalDecls)
00444 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;visitPreprocessedEntities(PPRec.local_begin(),&#32;PPRec.local_end(),
00445 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;PPRec);
00446 
00447 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;visitPreprocessedEntities(PPRec.begin(),&#32;PPRec.end(),&#32;PPRec);
00448 }
00449 
00450 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;InputIterator&gt;
<anchor xml:id="__c_index_8cpp_source_1l00451"/><link linkend="_classclang_1_1cxcursor_1_1_cursor_visitor_1a70914a4f8ef86d9c92d0b65da5177111">00451</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classclang_1_1cxcursor_1_1_cursor_visitor_1a70914a4f8ef86d9c92d0b65da5177111">CursorVisitor::visitPreprocessedEntities</link>(InputIterator&#32;First,
00452 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;InputIterator&#32;Last,
00453 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;PreprocessingRecord&#32;&amp;PPRec,
00454 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;FileID&#32;FID)&#32;{
00455 &#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(;&#32;First&#32;!=&#32;Last;&#32;++First)&#32;{
00456 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!FID.isInvalid()&#32;&amp;&amp;&#32;!PPRec.isEntityInFileID(First,&#32;FID))
00457 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">continue</emphasis>;
00458 
00459 &#32;&#32;&#32;&#32;PreprocessedEntity&#32;*PPE&#32;=&#32;*First;
00460 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!PPE)
00461 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">continue</emphasis>;
00462 
00463 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(MacroExpansion&#32;*ME&#32;=&#32;dyn_cast&lt;MacroExpansion&gt;(PPE))&#32;{
00464 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(Visit(<link linkend="_namespaceclang_1_1cxcursor_1a64450be5a9ef97c872d47219caaccfce">MakeMacroExpansionCursor</link>(ME,&#32;TU)))
00465 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
00466 
00467 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">continue</emphasis>;
00468 &#32;&#32;&#32;&#32;}
00469 
00470 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(MacroDefinitionRecord&#32;*MD&#32;=&#32;dyn_cast&lt;MacroDefinitionRecord&gt;(PPE))&#32;{
00471 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(Visit(<link linkend="_namespaceclang_1_1cxcursor_1a62e05b7f28b894bf90226918a8f3386a">MakeMacroDefinitionCursor</link>(MD,&#32;TU)))
00472 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
00473 
00474 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">continue</emphasis>;
00475 &#32;&#32;&#32;&#32;}
00476 
00477 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(InclusionDirective&#32;*ID&#32;=&#32;dyn_cast&lt;InclusionDirective&gt;(PPE))&#32;{
00478 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(Visit(<link linkend="_namespaceclang_1_1cxcursor_1acc1961183c2fb603b894a7f8621b16bb">MakeInclusionDirectiveCursor</link>(ID,&#32;TU)))
00479 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
00480 
00481 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">continue</emphasis>;
00482 &#32;&#32;&#32;&#32;}
00483 &#32;&#32;}
00484 
00485 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
00486 }
00487 
<anchor xml:id="__c_index_8cpp_source_1l00492"/><link linkend="_classclang_1_1cxcursor_1_1_cursor_visitor_1ada34939666b6f90e3144f4624fc64896">00492</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classclang_1_1cxcursor_1_1_cursor_visitor_1ada34939666b6f90e3144f4624fc64896">CursorVisitor::VisitChildren</link>(CXCursor&#32;Cursor)&#32;{
00493 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="__c_index_8cpp_1a8b03541653a9373d35919c45216bc70f">clang_isReference</link>(Cursor.kind)&#32;&amp;&amp;
00494 &#32;&#32;&#32;&#32;&#32;&#32;Cursor.kind&#32;!=&#32;CXCursor_CXXBaseSpecifier)&#32;{
00495 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;By&#32;definition,&#32;references&#32;have&#32;no&#32;children.</emphasis>
00496 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
00497 &#32;&#32;}
00498 
00499 &#32;&#32;<emphasis role="comment">//&#32;Set&#32;the&#32;Parent&#32;field&#32;to&#32;Cursor,&#32;then&#32;back&#32;to&#32;its&#32;old&#32;value&#32;once&#32;we&apos;re</emphasis>
00500 &#32;&#32;<emphasis role="comment">//&#32;done.</emphasis>
00501 &#32;&#32;SetParentRAII&#32;SetParent(Parent,&#32;StmtParent,&#32;Cursor);
00502 
00503 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="__c_index_8cpp_1a5d47db8f608ae0c266d6551875d46b80">clang_isDeclaration</link>(Cursor.kind))&#32;{
00504 &#32;&#32;&#32;&#32;Decl&#32;*D&#32;=&#32;<emphasis role="keyword">const_cast&lt;</emphasis>Decl&#32;*<emphasis role="keyword">&gt;</emphasis>(<link linkend="_namespaceclang_1_1cxcursor_1a1f702246831c96afd990e457613dc642">getCursorDecl</link>(Cursor));
00505 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!D)
00506 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
00507 
00508 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;VisitAttributes(D)&#32;||&#32;Visit(D);
00509 &#32;&#32;}
00510 
00511 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="__c_index_8cpp_1af186bec30eb4cb63c3a7a295ccbcfe8b">clang_isStatement</link>(Cursor.kind))&#32;{
00512 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;Stmt&#32;*S&#32;=&#32;<link linkend="_namespaceclang_1_1cxcursor_1a2d5cb233204f81be58bd21deb628c7ad">getCursorStmt</link>(Cursor))
00513 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;Visit(S);
00514 
00515 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
00516 &#32;&#32;}
00517 
00518 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="__c_index_8cpp_1ab958945dd59c351e1ae1a3f7f5668095">clang_isExpression</link>(Cursor.kind))&#32;{
00519 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;Expr&#32;*E&#32;=&#32;<link linkend="_namespaceclang_1_1cxcursor_1a80837a3710c6df0dfc24b5ee1d94ff9b">getCursorExpr</link>(Cursor))
00520 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;Visit(E);
00521 
00522 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
00523 &#32;&#32;}
00524 
00525 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="__c_index_8cpp_1ace455769e0f5681db67622db98f263a1">clang_isTranslationUnit</link>(Cursor.kind))&#32;{
00526 &#32;&#32;&#32;&#32;CXTranslationUnit&#32;TU&#32;=&#32;<link linkend="_namespaceclang_1_1cxcursor_1a23a495df22339e8289ae6d2421f493b6">getCursorTU</link>(Cursor);
00527 &#32;&#32;&#32;&#32;ASTUnit&#32;*CXXUnit&#32;=&#32;cxtu::getASTUnit(TU);
00528 
00529 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;VisitOrder[2]&#32;=&#32;{VisitPreprocessorLast,&#32;!VisitPreprocessorLast};
00530 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">unsigned</emphasis>&#32;I&#32;=&#32;0;&#32;I&#32;!=&#32;2;&#32;++I)&#32;{
00531 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(VisitOrder[I])&#32;{
00532 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!CXXUnit-&gt;isMainFileAST()&#32;&amp;&amp;&#32;CXXUnit-&gt;getOnlyLocalDecls()&#32;&amp;&amp;
00533 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;RegionOfInterest.isInvalid())&#32;{
00534 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(ASTUnit::top_level_iterator&#32;TL&#32;=&#32;CXXUnit-&gt;top_level_begin(),
00535 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;TLEnd&#32;=&#32;CXXUnit-&gt;top_level_end();
00536 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;TL&#32;!=&#32;TLEnd;&#32;++TL)&#32;{
00537 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;Optional&lt;bool&gt;&#32;V&#32;=&#32;handleDeclForVisitation(*TL);
00538 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!V.hasValue())
00539 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">continue</emphasis>;
00540 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;V.getValue();
00541 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00542 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(VisitDeclContext(
00543 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;CXXUnit-&gt;getASTContext().getTranslationUnitDecl()))
00544 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
00545 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">continue</emphasis>;
00546 &#32;&#32;&#32;&#32;&#32;&#32;}
00547 
00548 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Walk&#32;the&#32;preprocessing&#32;record.</emphasis>
00549 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(CXXUnit-&gt;getPreprocessor().getPreprocessingRecord())
00550 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;visitPreprocessedEntitiesInRegion();
00551 &#32;&#32;&#32;&#32;}
00552 
00553 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
00554 &#32;&#32;}
00555 
00556 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(Cursor.kind&#32;==&#32;CXCursor_CXXBaseSpecifier)&#32;{
00557 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;CXXBaseSpecifier&#32;*Base&#32;=&#32;<link linkend="_namespaceclang_1_1cxcursor_1a05b387c1d9aeb75b3de539f8622e0964">getCursorCXXBaseSpecifier</link>(Cursor))&#32;{
00558 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(TypeSourceInfo&#32;*BaseTSInfo&#32;=&#32;Base-&gt;getTypeSourceInfo())&#32;{
00559 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;Visit(BaseTSInfo-&gt;getTypeLoc());
00560 &#32;&#32;&#32;&#32;&#32;&#32;}
00561 &#32;&#32;&#32;&#32;}
00562 &#32;&#32;}
00563 
00564 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(Cursor.kind&#32;==&#32;CXCursor_IBOutletCollectionAttr)&#32;{
00565 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;IBOutletCollectionAttr&#32;*A&#32;=
00566 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cast&lt;IBOutletCollectionAttr&gt;(<link linkend="_namespaceclang_1_1cxcursor_1afdc6aa952869e16b4981b07f05adff7f">cxcursor::getCursorAttr</link>(Cursor));
00567 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;ObjCObjectType&#32;*ObjT&#32;=&#32;A-&gt;getInterface()-&gt;getAs&lt;ObjCObjectType&gt;())
00568 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;Visit(<link linkend="_namespaceclang_1_1cxcursor_1aa0bea074dd325615cb85819eac47264e">cxcursor::MakeCursorObjCClassRef</link>(
00569 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ObjT-&gt;getInterface(),
00570 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;A-&gt;getInterfaceLoc()-&gt;getTypeLoc().getBeginLoc(),&#32;TU));
00571 &#32;&#32;}
00572 
00573 &#32;&#32;<emphasis role="comment">//&#32;If&#32;pointing&#32;inside&#32;a&#32;macro&#32;definition,&#32;check&#32;if&#32;the&#32;token&#32;is&#32;an&#32;identifier</emphasis>
00574 &#32;&#32;<emphasis role="comment">//&#32;that&#32;was&#32;ever&#32;defined&#32;as&#32;a&#32;macro.&#32;In&#32;such&#32;a&#32;case,&#32;create&#32;a&#32;&quot;pseudo&quot;&#32;macro</emphasis>
00575 &#32;&#32;<emphasis role="comment">//&#32;expansion&#32;cursor&#32;for&#32;that&#32;token.</emphasis>
00576 &#32;&#32;SourceLocation&#32;BeginLoc&#32;=&#32;RegionOfInterest.getBegin();
00577 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(Cursor.kind&#32;==&#32;CXCursor_MacroDefinition&#32;&amp;&amp;
00578 &#32;&#32;&#32;&#32;&#32;&#32;BeginLoc&#32;==&#32;RegionOfInterest.getEnd())&#32;{
00579 &#32;&#32;&#32;&#32;SourceLocation&#32;Loc&#32;=&#32;AU-&gt;mapLocationToPreamble(BeginLoc);
00580 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;MacroInfo&#32;*MI&#32;=
00581 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespaceclang_1_1cxindex_1af7ce142e794a78913423f48c9d01c78d">getMacroInfo</link>(<link linkend="_namespaceclang_1_1cxcursor_1a62254c8ae8eca4c0ca0f2d2a659e7d80">cxcursor::getCursorMacroDefinition</link>(Cursor),&#32;TU);
00582 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(MacroDefinitionRecord&#32;*MacroDef&#32;=
00583 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespaceclang_1_1cxindex_1ac81be1c63a9bbf2e05be99daa2b11750">checkForMacroInMacroDefinition</link>(MI,&#32;Loc,&#32;TU))
00584 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;Visit(<link linkend="_namespaceclang_1_1cxcursor_1a64450be5a9ef97c872d47219caaccfce">cxcursor::MakeMacroExpansionCursor</link>(MacroDef,&#32;BeginLoc,&#32;TU));
00585 &#32;&#32;}
00586 
00587 &#32;&#32;<emphasis role="comment">//&#32;Nothing&#32;to&#32;visit&#32;at&#32;the&#32;moment.</emphasis>
00588 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
00589 }
00590 
<anchor xml:id="__c_index_8cpp_source_1l00591"/><link linkend="_classclang_1_1cxcursor_1_1_cursor_visitor_1af1429e52aeadb9b4b1388fa7b1b1ddf4">00591</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classclang_1_1cxcursor_1_1_cursor_visitor_1af1429e52aeadb9b4b1388fa7b1b1ddf4">CursorVisitor::VisitBlockDecl</link>(BlockDecl&#32;*B)&#32;{
00592 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(TypeSourceInfo&#32;*TSInfo&#32;=&#32;B-&gt;getSignatureAsWritten())
00593 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(Visit(TSInfo-&gt;getTypeLoc()))
00594 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
00595 
00596 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(Stmt&#32;*Body&#32;=&#32;B-&gt;getBody())
00597 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;Visit(<link linkend="_namespaceclang_1_1cxcursor_1ab61ec2059175833672e8e78a376bb218">MakeCXCursor</link>(Body,&#32;StmtParent,&#32;TU,&#32;RegionOfInterest));
00598 
00599 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
00600 }
00601 
<anchor xml:id="__c_index_8cpp_source_1l00602"/><link linkend="_classclang_1_1cxcursor_1_1_cursor_visitor_1a31db49ad4d23960990fa744b69517c0d">00602</link> Optional&lt;bool&gt;&#32;<link linkend="_classclang_1_1cxcursor_1_1_cursor_visitor_1a31db49ad4d23960990fa744b69517c0d">CursorVisitor::shouldVisitCursor</link>(CXCursor&#32;Cursor)&#32;{
00603 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(RegionOfInterest.isValid())&#32;{
00604 &#32;&#32;&#32;&#32;SourceRange&#32;Range&#32;=&#32;getFullCursorExtent(Cursor,&#32;AU-&gt;getSourceManager());
00605 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(Range.isInvalid())
00606 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;None;
00607 
00608 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(CompareRegionOfInterest(Range))&#32;{
00609 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="__index___internal_8h_1afca6208bdc188ac29b169260314b7af2a1626bf1782f58fe2a2bf082c4c30e850">RangeBefore</link>:
00610 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;This&#32;declaration&#32;comes&#32;before&#32;the&#32;region&#32;of&#32;interest;&#32;skip&#32;it.</emphasis>
00611 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;None;
00612 
00613 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="__index___internal_8h_1afca6208bdc188ac29b169260314b7af2a7540aa4ebed8662d6f41ec33073611a0">RangeAfter</link>:
00614 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;This&#32;declaration&#32;comes&#32;after&#32;the&#32;region&#32;of&#32;interest;&#32;we&apos;re&#32;done.</emphasis>
00615 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
00616 
00617 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="__index___internal_8h_1afca6208bdc188ac29b169260314b7af2a87e2eee30c9b5a3c2108f2128413157a">RangeOverlap</link>:
00618 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;This&#32;declaration&#32;overlaps&#32;the&#32;region&#32;of&#32;interest;&#32;visit&#32;it.</emphasis>
00619 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
00620 &#32;&#32;&#32;&#32;}
00621 &#32;&#32;}
00622 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
00623 }
00624 
<anchor xml:id="__c_index_8cpp_source_1l00625"/><link linkend="_classclang_1_1cxcursor_1_1_cursor_visitor_1a3bca6000335f6c6e012b01a042d10d32">00625</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classclang_1_1cxcursor_1_1_cursor_visitor_1a3bca6000335f6c6e012b01a042d10d32">CursorVisitor::VisitDeclContext</link>(DeclContext&#32;*DC)&#32;{
00626 &#32;&#32;DeclContext::decl_iterator&#32;I&#32;=&#32;DC-&gt;decls_begin(),&#32;E&#32;=&#32;DC-&gt;decls_end();
00627 
00628 &#32;&#32;<emphasis role="comment">//&#32;FIXME:&#32;Eventually&#32;remove.&#32;&#32;This&#32;part&#32;of&#32;a&#32;hack&#32;to&#32;support&#32;proper</emphasis>
00629 &#32;&#32;<emphasis role="comment">//&#32;iteration&#32;over&#32;all&#32;Decls&#32;contained&#32;lexically&#32;within&#32;an&#32;ObjC&#32;container.</emphasis>
00630 &#32;&#32;SaveAndRestore&lt;DeclContext::decl_iterator&#32;*&gt;&#32;DI_saved(DI_current,&#32;&amp;I);
00631 &#32;&#32;SaveAndRestore&lt;DeclContext::decl_iterator&gt;&#32;DE_saved(DE_current,&#32;E);
00632 
00633 &#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(;&#32;I&#32;!=&#32;E;&#32;++I)&#32;{
00634 &#32;&#32;&#32;&#32;Decl&#32;*D&#32;=&#32;*I;
00635 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(D-&gt;getLexicalDeclContext()&#32;!=&#32;DC)
00636 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">continue</emphasis>;
00637 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Filter&#32;out&#32;synthesized&#32;property&#32;accessor&#32;redeclarations.</emphasis>
00638 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(isa&lt;ObjCImplDecl&gt;(DC))
00639 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="keyword">auto</emphasis>&#32;*OMD&#32;=&#32;dyn_cast&lt;ObjCMethodDecl&gt;(D))
00640 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(OMD-&gt;isSynthesizedAccessorStub())
00641 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">continue</emphasis>;
00642 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;Optional&lt;bool&gt;&#32;V&#32;=&#32;handleDeclForVisitation(D);
00643 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!V.hasValue())
00644 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">continue</emphasis>;
00645 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;V.getValue();
00646 &#32;&#32;}
00647 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
00648 }
00649 
00650 Optional&lt;bool&gt;&#32;CursorVisitor::handleDeclForVisitation(<emphasis role="keyword">const</emphasis>&#32;Decl&#32;*D)&#32;{
00651 &#32;&#32;CXCursor&#32;Cursor&#32;=&#32;<link linkend="_namespaceclang_1_1cxcursor_1ab61ec2059175833672e8e78a376bb218">MakeCXCursor</link>(D,&#32;TU,&#32;RegionOfInterest);
00652 
00653 &#32;&#32;<emphasis role="comment">//&#32;Ignore&#32;synthesized&#32;ivars&#32;here,&#32;otherwise&#32;if&#32;we&#32;have&#32;something&#32;like:</emphasis>
00654 &#32;&#32;<emphasis role="comment">//&#32;&#32;&#32;@synthesize&#32;prop&#32;=&#32;_prop;</emphasis>
00655 &#32;&#32;<emphasis role="comment">//&#32;and&#32;&apos;_prop&apos;&#32;is&#32;not&#32;declared,&#32;we&#32;will&#32;encounter&#32;a&#32;&apos;_prop&apos;&#32;ivar&#32;before</emphasis>
00656 &#32;&#32;<emphasis role="comment">//&#32;encountering&#32;the&#32;&apos;prop&apos;&#32;synthesize&#32;declaration&#32;and&#32;we&#32;will&#32;think&#32;that</emphasis>
00657 &#32;&#32;<emphasis role="comment">//&#32;we&#32;passed&#32;the&#32;region-of-interest.</emphasis>
00658 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="keyword">auto</emphasis>&#32;*ivarD&#32;=&#32;dyn_cast&lt;ObjCIvarDecl&gt;(D))&#32;{
00659 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(ivarD-&gt;getSynthesize())
00660 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;None;
00661 &#32;&#32;}
00662 
00663 &#32;&#32;<emphasis role="comment">//&#32;FIXME:&#32;ObjCClassRef/ObjCProtocolRef&#32;for&#32;forward&#32;class/protocol</emphasis>
00664 &#32;&#32;<emphasis role="comment">//&#32;declarations&#32;is&#32;a&#32;mismatch&#32;with&#32;the&#32;compiler&#32;semantics.</emphasis>
00665 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(Cursor.kind&#32;==&#32;CXCursor_ObjCInterfaceDecl)&#32;{
00666 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;*ID&#32;=&#32;cast&lt;ObjCInterfaceDecl&gt;(D);
00667 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!ID-&gt;isThisDeclarationADefinition())
00668 &#32;&#32;&#32;&#32;&#32;&#32;Cursor&#32;=&#32;<link linkend="_namespaceclang_1_1cxcursor_1aa0bea074dd325615cb85819eac47264e">MakeCursorObjCClassRef</link>(ID,&#32;ID-&gt;getLocation(),&#32;TU);
00669 
00670 &#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(Cursor.kind&#32;==&#32;CXCursor_ObjCProtocolDecl)&#32;{
00671 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;*PD&#32;=&#32;cast&lt;ObjCProtocolDecl&gt;(D);
00672 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!PD-&gt;isThisDeclarationADefinition())
00673 &#32;&#32;&#32;&#32;&#32;&#32;Cursor&#32;=&#32;<link linkend="_namespaceclang_1_1cxcursor_1ac238ecc9f974783b9d0c2129f5aa675f">MakeCursorObjCProtocolRef</link>(PD,&#32;PD-&gt;getLocation(),&#32;TU);
00674 &#32;&#32;}
00675 
00676 &#32;&#32;<emphasis role="keyword">const</emphasis>&#32;Optional&lt;bool&gt;&#32;V&#32;=&#32;shouldVisitCursor(Cursor);
00677 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!V.hasValue())
00678 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;None;
00679 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!V.getValue())
00680 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
00681 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(Visit(Cursor,&#32;<emphasis role="keyword">true</emphasis>))
00682 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
00683 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;None;
00684 }
00685 
<anchor xml:id="__c_index_8cpp_source_1l00686"/><link linkend="_classclang_1_1cxcursor_1_1_cursor_visitor_1a255429be0e71e52043ad0b58872878d6">00686</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classclang_1_1cxcursor_1_1_cursor_visitor_1a255429be0e71e52043ad0b58872878d6">CursorVisitor::VisitTranslationUnitDecl</link>(TranslationUnitDecl&#32;*D)&#32;{
00687 &#32;&#32;llvm_unreachable(<emphasis role="stringliteral">&quot;Translation&#32;units&#32;are&#32;visited&#32;directly&#32;by&#32;Visit()&quot;</emphasis>);
00688 }
00689 
<anchor xml:id="__c_index_8cpp_source_1l00690"/><link linkend="_classclang_1_1cxcursor_1_1_cursor_visitor_1a8cf4e9055a473162dfae94e08dbad6b0">00690</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classclang_1_1cxcursor_1_1_cursor_visitor_1a8cf4e9055a473162dfae94e08dbad6b0">CursorVisitor::VisitTypeAliasTemplateDecl</link>(TypeAliasTemplateDecl&#32;*D)&#32;{
00691 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(VisitTemplateParameters(D-&gt;getTemplateParameters()))
00692 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
00693 
00694 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;Visit(<link linkend="_namespaceclang_1_1cxcursor_1ab61ec2059175833672e8e78a376bb218">MakeCXCursor</link>(D-&gt;getTemplatedDecl(),&#32;TU,&#32;RegionOfInterest));
00695 }
00696 
<anchor xml:id="__c_index_8cpp_source_1l00697"/><link linkend="_classclang_1_1cxcursor_1_1_cursor_visitor_1ab780a653c5903d22b4963df9731255db">00697</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classclang_1_1cxcursor_1_1_cursor_visitor_1ab780a653c5903d22b4963df9731255db">CursorVisitor::VisitTypeAliasDecl</link>(TypeAliasDecl&#32;*D)&#32;{
00698 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(TypeSourceInfo&#32;*TSInfo&#32;=&#32;D-&gt;getTypeSourceInfo())
00699 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;Visit(TSInfo-&gt;getTypeLoc());
00700 
00701 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
00702 }
00703 
<anchor xml:id="__c_index_8cpp_source_1l00704"/><link linkend="_classclang_1_1cxcursor_1_1_cursor_visitor_1a5079af293c5b548214614dbb8f33dc70">00704</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classclang_1_1cxcursor_1_1_cursor_visitor_1a5079af293c5b548214614dbb8f33dc70">CursorVisitor::VisitTypedefDecl</link>(TypedefDecl&#32;*D)&#32;{
00705 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(TypeSourceInfo&#32;*TSInfo&#32;=&#32;D-&gt;getTypeSourceInfo())
00706 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;Visit(TSInfo-&gt;getTypeLoc());
00707 
00708 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
00709 }
00710 
<anchor xml:id="__c_index_8cpp_source_1l00711"/><link linkend="_classclang_1_1cxcursor_1_1_cursor_visitor_1a223f8711bd4960db81ca391e57bcd6e0">00711</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classclang_1_1cxcursor_1_1_cursor_visitor_1a223f8711bd4960db81ca391e57bcd6e0">CursorVisitor::VisitTagDecl</link>(TagDecl&#32;*D)&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;VisitDeclContext(D);&#32;}
00712 
<anchor xml:id="__c_index_8cpp_source_1l00713"/><link linkend="_classclang_1_1cxcursor_1_1_cursor_visitor_1a876f03daa8892c332f4ed8e7b7acbbd6">00713</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classclang_1_1cxcursor_1_1_cursor_visitor_1a876f03daa8892c332f4ed8e7b7acbbd6">CursorVisitor::VisitClassTemplateSpecializationDecl</link>(
00714 &#32;&#32;&#32;&#32;ClassTemplateSpecializationDecl&#32;*D)&#32;{
00715 &#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;ShouldVisitBody&#32;=&#32;<emphasis role="keyword">false</emphasis>;
00716 &#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(D-&gt;getSpecializationKind())&#32;{
00717 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;TSK_Undeclared:
00718 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;TSK_ImplicitInstantiation:
00719 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Nothing&#32;to&#32;visit</emphasis>
00720 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
00721 
00722 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;TSK_ExplicitInstantiationDeclaration:
00723 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;TSK_ExplicitInstantiationDefinition:
00724 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
00725 
00726 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;TSK_ExplicitSpecialization:
00727 &#32;&#32;&#32;&#32;ShouldVisitBody&#32;=&#32;<emphasis role="keyword">true</emphasis>;
00728 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
00729 &#32;&#32;}
00730 
00731 &#32;&#32;<emphasis role="comment">//&#32;Visit&#32;the&#32;template&#32;arguments&#32;used&#32;in&#32;the&#32;specialization.</emphasis>
00732 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(TypeSourceInfo&#32;*SpecType&#32;=&#32;D-&gt;getTypeAsWritten())&#32;{
00733 &#32;&#32;&#32;&#32;TypeLoc&#32;TL&#32;=&#32;SpecType-&gt;getTypeLoc();
00734 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(TemplateSpecializationTypeLoc&#32;TSTLoc&#32;=
00735 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;TL.getAs&lt;TemplateSpecializationTypeLoc&gt;())&#32;{
00736 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">unsigned</emphasis>&#32;I&#32;=&#32;0,&#32;N&#32;=&#32;TSTLoc.getNumArgs();&#32;I&#32;!=&#32;N;&#32;++I)
00737 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(VisitTemplateArgumentLoc(TSTLoc.getArgLoc(I)))
00738 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
00739 &#32;&#32;&#32;&#32;}
00740 &#32;&#32;}
00741 
00742 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;ShouldVisitBody&#32;&amp;&amp;&#32;VisitCXXRecordDecl(D);
00743 }
00744 
<anchor xml:id="__c_index_8cpp_source_1l00745"/><link linkend="_classclang_1_1cxcursor_1_1_cursor_visitor_1ab59de33477389ac551aba37030befef7">00745</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classclang_1_1cxcursor_1_1_cursor_visitor_1ab59de33477389ac551aba37030befef7">CursorVisitor::VisitClassTemplatePartialSpecializationDecl</link>(
00746 &#32;&#32;&#32;&#32;ClassTemplatePartialSpecializationDecl&#32;*D)&#32;{
00747 &#32;&#32;<emphasis role="comment">//&#32;FIXME:&#32;Visit&#32;the&#32;&quot;outer&quot;&#32;template&#32;parameter&#32;lists&#32;on&#32;the&#32;TagDecl</emphasis>
00748 &#32;&#32;<emphasis role="comment">//&#32;before&#32;visiting&#32;these&#32;template&#32;parameters.</emphasis>
00749 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(VisitTemplateParameters(D-&gt;getTemplateParameters()))
00750 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
00751 
00752 &#32;&#32;<emphasis role="comment">//&#32;Visit&#32;the&#32;partial&#32;specialization&#32;arguments.</emphasis>
00753 &#32;&#32;<emphasis role="keyword">const</emphasis>&#32;ASTTemplateArgumentListInfo&#32;*Info&#32;=&#32;D-&gt;getTemplateArgsAsWritten();
00754 &#32;&#32;<emphasis role="keyword">const</emphasis>&#32;TemplateArgumentLoc&#32;*TemplateArgs&#32;=&#32;Info-&gt;getTemplateArgs();
00755 &#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">unsigned</emphasis>&#32;I&#32;=&#32;0,&#32;N&#32;=&#32;Info-&gt;NumTemplateArgs;&#32;I&#32;!=&#32;N;&#32;++I)
00756 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(VisitTemplateArgumentLoc(TemplateArgs[I]))
00757 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
00758 
00759 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;VisitCXXRecordDecl(D);
00760 }
00761 
<anchor xml:id="__c_index_8cpp_source_1l00762"/><link linkend="_classclang_1_1cxcursor_1_1_cursor_visitor_1a7eacc3f49e7683c24b020e63de315750">00762</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classclang_1_1cxcursor_1_1_cursor_visitor_1a7eacc3f49e7683c24b020e63de315750">CursorVisitor::VisitTemplateTypeParmDecl</link>(TemplateTypeParmDecl&#32;*D)&#32;{
00763 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;*TC&#32;=&#32;D-&gt;getTypeConstraint())
00764 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(Visit(<link linkend="_namespaceclang_1_1cxcursor_1ab61ec2059175833672e8e78a376bb218">MakeCXCursor</link>(TC-&gt;getImmediatelyDeclaredConstraint(),&#32;StmtParent,
00765 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;TU,&#32;RegionOfInterest)))
00766 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
00767 
00768 &#32;&#32;<emphasis role="comment">//&#32;Visit&#32;the&#32;default&#32;argument.</emphasis>
00769 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(D-&gt;hasDefaultArgument()&#32;&amp;&amp;&#32;!D-&gt;defaultArgumentWasInherited())
00770 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(TypeSourceInfo&#32;*DefArg&#32;=&#32;D-&gt;getDefaultArgumentInfo())
00771 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(Visit(DefArg-&gt;getTypeLoc()))
00772 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
00773 
00774 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
00775 }
00776 
<anchor xml:id="__c_index_8cpp_source_1l00777"/><link linkend="_classclang_1_1cxcursor_1_1_cursor_visitor_1aee21ccfb817e44aa1fabf5814e435716">00777</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classclang_1_1cxcursor_1_1_cursor_visitor_1aee21ccfb817e44aa1fabf5814e435716">CursorVisitor::VisitEnumConstantDecl</link>(EnumConstantDecl&#32;*D)&#32;{
00778 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(Expr&#32;*Init&#32;=&#32;D-&gt;getInitExpr())
00779 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;Visit(<link linkend="_namespaceclang_1_1cxcursor_1ab61ec2059175833672e8e78a376bb218">MakeCXCursor</link>(Init,&#32;StmtParent,&#32;TU,&#32;RegionOfInterest));
00780 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
00781 }
00782 
<anchor xml:id="__c_index_8cpp_source_1l00783"/><link linkend="_classclang_1_1cxcursor_1_1_cursor_visitor_1ab44c6ae2ac80500f37d37e2893c37552">00783</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classclang_1_1cxcursor_1_1_cursor_visitor_1ab44c6ae2ac80500f37d37e2893c37552">CursorVisitor::VisitDeclaratorDecl</link>(DeclaratorDecl&#32;*DD)&#32;{
00784 &#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;NumParamList&#32;=&#32;DD-&gt;getNumTemplateParameterLists();
00785 &#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">unsigned</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;NumParamList;&#32;i++)&#32;{
00786 &#32;&#32;&#32;&#32;TemplateParameterList&#32;*Params&#32;=&#32;DD-&gt;getTemplateParameterList(i);
00787 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(VisitTemplateParameters(Params))
00788 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
00789 &#32;&#32;}
00790 
00791 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(TypeSourceInfo&#32;*TSInfo&#32;=&#32;DD-&gt;getTypeSourceInfo())
00792 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(Visit(TSInfo-&gt;getTypeLoc()))
00793 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
00794 
00795 &#32;&#32;<emphasis role="comment">//&#32;Visit&#32;the&#32;nested-name-specifier,&#32;if&#32;present.</emphasis>
00796 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(NestedNameSpecifierLoc&#32;QualifierLoc&#32;=&#32;DD-&gt;getQualifierLoc())
00797 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(VisitNestedNameSpecifierLoc(QualifierLoc))
00798 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
00799 
00800 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
00801 }
00802 
00803 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;HasTrailingReturnType(FunctionDecl&#32;*ND)&#32;{
00804 &#32;&#32;<emphasis role="keyword">const</emphasis>&#32;QualType&#32;Ty&#32;=&#32;ND-&gt;getType();
00805 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;FunctionType&#32;*AFT&#32;=&#32;Ty-&gt;getAs&lt;FunctionType&gt;())&#32;{
00806 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;FunctionProtoType&#32;*FT&#32;=&#32;dyn_cast&lt;FunctionProtoType&gt;(AFT))
00807 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;FT-&gt;hasTrailingReturn();
00808 &#32;&#32;}
00809 
00810 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
00811 }
00812 
00814 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;CompareCXXCtorInitializers(CXXCtorInitializer&#32;*<emphasis role="keyword">const</emphasis>&#32;*X,
00815 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;CXXCtorInitializer&#32;*<emphasis role="keyword">const</emphasis>&#32;*Y)&#32;{
00816 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(*X)-&gt;getSourceOrder()&#32;-&#32;(*Y)-&gt;getSourceOrder();
00817 }
00818 
<anchor xml:id="__c_index_8cpp_source_1l00819"/><link linkend="_classclang_1_1cxcursor_1_1_cursor_visitor_1a15585d8e991ee7b5472c2971e986b3bf">00819</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classclang_1_1cxcursor_1_1_cursor_visitor_1a15585d8e991ee7b5472c2971e986b3bf">CursorVisitor::VisitFunctionDecl</link>(FunctionDecl&#32;*ND)&#32;{
00820 &#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;NumParamList&#32;=&#32;ND-&gt;getNumTemplateParameterLists();
00821 &#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">unsigned</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;NumParamList;&#32;i++)&#32;{
00822 &#32;&#32;&#32;&#32;TemplateParameterList&#32;*Params&#32;=&#32;ND-&gt;getTemplateParameterList(i);
00823 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(VisitTemplateParameters(Params))
00824 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
00825 &#32;&#32;}
00826 
00827 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(TypeSourceInfo&#32;*TSInfo&#32;=&#32;ND-&gt;getTypeSourceInfo())&#32;{
00828 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Visit&#32;the&#32;function&#32;declaration&apos;s&#32;syntactic&#32;components&#32;in&#32;the&#32;order</emphasis>
00829 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;written.&#32;This&#32;requires&#32;a&#32;bit&#32;of&#32;work.</emphasis>
00830 &#32;&#32;&#32;&#32;TypeLoc&#32;TL&#32;=&#32;TSInfo-&gt;getTypeLoc().IgnoreParens();
00831 &#32;&#32;&#32;&#32;FunctionTypeLoc&#32;FTL&#32;=&#32;TL.getAs&lt;FunctionTypeLoc&gt;();
00832 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;HasTrailingRT&#32;=&#32;HasTrailingReturnType(ND);
00833 
00834 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;If&#32;we&#32;have&#32;a&#32;function&#32;declared&#32;directly&#32;(without&#32;the&#32;use&#32;of&#32;a&#32;typedef),</emphasis>
00835 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;visit&#32;just&#32;the&#32;return&#32;type.&#32;Otherwise,&#32;just&#32;visit&#32;the&#32;function&apos;s&#32;type</emphasis>
00836 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;now.</emphasis>
00837 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;((FTL&#32;&amp;&amp;&#32;!isa&lt;CXXConversionDecl&gt;(ND)&#32;&amp;&amp;&#32;!HasTrailingRT&#32;&amp;&amp;
00838 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Visit(FTL.getReturnLoc()))&#32;||
00839 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(!FTL&#32;&amp;&amp;&#32;Visit(TL)))
00840 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
00841 
00842 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Visit&#32;the&#32;nested-name-specifier,&#32;if&#32;present.</emphasis>
00843 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(NestedNameSpecifierLoc&#32;QualifierLoc&#32;=&#32;ND-&gt;getQualifierLoc())
00844 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(VisitNestedNameSpecifierLoc(QualifierLoc))
00845 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
00846 
00847 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Visit&#32;the&#32;declaration&#32;name.</emphasis>
00848 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!isa&lt;CXXDestructorDecl&gt;(ND))
00849 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(VisitDeclarationNameInfo(ND-&gt;getNameInfo()))
00850 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
00851 
00852 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;FIXME:&#32;Visit&#32;explicitly-specified&#32;template&#32;arguments!</emphasis>
00853 
00854 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Visit&#32;the&#32;function&#32;parameters,&#32;if&#32;we&#32;have&#32;a&#32;function&#32;type.</emphasis>
00855 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(FTL&#32;&amp;&amp;&#32;VisitFunctionTypeLoc(FTL,&#32;<emphasis role="keyword">true</emphasis>))
00856 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
00857 
00858 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Visit&#32;the&#32;function&apos;s&#32;trailing&#32;return&#32;type.</emphasis>
00859 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(FTL&#32;&amp;&amp;&#32;HasTrailingRT&#32;&amp;&amp;&#32;Visit(FTL.getReturnLoc()))
00860 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
00861 
00862 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;FIXME:&#32;Attributes?</emphasis>
00863 &#32;&#32;}
00864 
00865 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(ND-&gt;doesThisDeclarationHaveABody()&#32;&amp;&amp;&#32;!ND-&gt;isLateTemplateParsed())&#32;{
00866 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(CXXConstructorDecl&#32;*Constructor&#32;=&#32;dyn_cast&lt;CXXConstructorDecl&gt;(ND))&#32;{
00867 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Find&#32;the&#32;initializers&#32;that&#32;were&#32;written&#32;in&#32;the&#32;source.</emphasis>
00868 &#32;&#32;&#32;&#32;&#32;&#32;SmallVector&lt;CXXCtorInitializer&#32;*,&#32;4&gt;&#32;WrittenInits;
00869 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">auto</emphasis>&#32;*I&#32;:&#32;Constructor-&gt;inits())&#32;{
00870 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!I-&gt;isWritten())
00871 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">continue</emphasis>;
00872 
00873 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;WrittenInits.push_back(I);
00874 &#32;&#32;&#32;&#32;&#32;&#32;}
00875 
00876 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Sort&#32;the&#32;initializers&#32;in&#32;source&#32;order</emphasis>
00877 &#32;&#32;&#32;&#32;&#32;&#32;llvm::array_pod_sort(WrittenInits.begin(),&#32;WrittenInits.end(),
00878 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;CompareCXXCtorInitializers);
00879 
00880 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Visit&#32;the&#32;initializers&#32;in&#32;source&#32;order</emphasis>
00881 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">unsigned</emphasis>&#32;I&#32;=&#32;0,&#32;N&#32;=&#32;WrittenInits.size();&#32;I&#32;!=&#32;N;&#32;++I)&#32;{
00882 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;CXXCtorInitializer&#32;*Init&#32;=&#32;WrittenInits[I];
00883 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(Init-&gt;isAnyMemberInitializer())&#32;{
00884 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(Visit(<link linkend="_namespaceclang_1_1cxcursor_1ad70c49c226f87377bc26fba7a4dbe973">MakeCursorMemberRef</link>(Init-&gt;getAnyMember(),
00885 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Init-&gt;getMemberLocation(),&#32;TU)))
00886 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
00887 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(TypeSourceInfo&#32;*TInfo&#32;=&#32;Init-&gt;getTypeSourceInfo())&#32;{
00888 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(Visit(TInfo-&gt;getTypeLoc()))
00889 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
00890 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00891 
00892 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Visit&#32;the&#32;initializer&#32;value.</emphasis>
00893 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(Expr&#32;*Initializer&#32;=&#32;Init-&gt;getInit())
00894 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(Visit(<link linkend="_namespaceclang_1_1cxcursor_1ab61ec2059175833672e8e78a376bb218">MakeCXCursor</link>(Initializer,&#32;ND,&#32;TU,&#32;RegionOfInterest)))
00895 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
00896 &#32;&#32;&#32;&#32;&#32;&#32;}
00897 &#32;&#32;&#32;&#32;}
00898 
00899 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(Visit(<link linkend="_namespaceclang_1_1cxcursor_1ab61ec2059175833672e8e78a376bb218">MakeCXCursor</link>(ND-&gt;getBody(),&#32;StmtParent,&#32;TU,&#32;RegionOfInterest)))
00900 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
00901 &#32;&#32;}
00902 
00903 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
00904 }
00905 
<anchor xml:id="__c_index_8cpp_source_1l00906"/><link linkend="_classclang_1_1cxcursor_1_1_cursor_visitor_1a1504a2ceb50669fa1471f9a61e58f598">00906</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classclang_1_1cxcursor_1_1_cursor_visitor_1a1504a2ceb50669fa1471f9a61e58f598">CursorVisitor::VisitFieldDecl</link>(FieldDecl&#32;*D)&#32;{
00907 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(VisitDeclaratorDecl(D))
00908 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
00909 
00910 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(Expr&#32;*BitWidth&#32;=&#32;D-&gt;getBitWidth())
00911 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;Visit(<link linkend="_namespaceclang_1_1cxcursor_1ab61ec2059175833672e8e78a376bb218">MakeCXCursor</link>(BitWidth,&#32;StmtParent,&#32;TU,&#32;RegionOfInterest));
00912 
00913 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(Expr&#32;*Init&#32;=&#32;D-&gt;getInClassInitializer())
00914 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;Visit(<link linkend="_namespaceclang_1_1cxcursor_1ab61ec2059175833672e8e78a376bb218">MakeCXCursor</link>(Init,&#32;StmtParent,&#32;TU,&#32;RegionOfInterest));
00915 
00916 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
00917 }
00918 
<anchor xml:id="__c_index_8cpp_source_1l00919"/><link linkend="_classclang_1_1cxcursor_1_1_cursor_visitor_1aa58af31bada238412e23dbba3a928162">00919</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classclang_1_1cxcursor_1_1_cursor_visitor_1aa58af31bada238412e23dbba3a928162">CursorVisitor::VisitVarDecl</link>(VarDecl&#32;*D)&#32;{
00920 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(VisitDeclaratorDecl(D))
00921 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
00922 
00923 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(Expr&#32;*Init&#32;=&#32;D-&gt;getInit())
00924 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;Visit(<link linkend="_namespaceclang_1_1cxcursor_1ab61ec2059175833672e8e78a376bb218">MakeCXCursor</link>(Init,&#32;StmtParent,&#32;TU,&#32;RegionOfInterest));
00925 
00926 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
00927 }
00928 
<anchor xml:id="__c_index_8cpp_source_1l00929"/><link linkend="_classclang_1_1cxcursor_1_1_cursor_visitor_1a400e0fc0d02c32b9307a7ff382fcd76f">00929</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classclang_1_1cxcursor_1_1_cursor_visitor_1a400e0fc0d02c32b9307a7ff382fcd76f">CursorVisitor::VisitNonTypeTemplateParmDecl</link>(NonTypeTemplateParmDecl&#32;*D)&#32;{
00930 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(VisitDeclaratorDecl(D))
00931 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
00932 
00933 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(D-&gt;hasDefaultArgument()&#32;&amp;&amp;&#32;!D-&gt;defaultArgumentWasInherited())
00934 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(Expr&#32;*DefArg&#32;=&#32;D-&gt;getDefaultArgument())
00935 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;Visit(<link linkend="_namespaceclang_1_1cxcursor_1ab61ec2059175833672e8e78a376bb218">MakeCXCursor</link>(DefArg,&#32;StmtParent,&#32;TU,&#32;RegionOfInterest));
00936 
00937 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
00938 }
00939 
<anchor xml:id="__c_index_8cpp_source_1l00940"/><link linkend="_classclang_1_1cxcursor_1_1_cursor_visitor_1aa73d041db79fce203778413557b8cafa">00940</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classclang_1_1cxcursor_1_1_cursor_visitor_1aa73d041db79fce203778413557b8cafa">CursorVisitor::VisitFunctionTemplateDecl</link>(FunctionTemplateDecl&#32;*D)&#32;{
00941 &#32;&#32;<emphasis role="comment">//&#32;FIXME:&#32;Visit&#32;the&#32;&quot;outer&quot;&#32;template&#32;parameter&#32;lists&#32;on&#32;the&#32;FunctionDecl</emphasis>
00942 &#32;&#32;<emphasis role="comment">//&#32;before&#32;visiting&#32;these&#32;template&#32;parameters.</emphasis>
00943 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(VisitTemplateParameters(D-&gt;getTemplateParameters()))
00944 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
00945 
00946 &#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;*FD&#32;=&#32;D-&gt;getTemplatedDecl();
00947 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;VisitAttributes(FD)&#32;||&#32;VisitFunctionDecl(FD);
00948 }
00949 
<anchor xml:id="__c_index_8cpp_source_1l00950"/><link linkend="_classclang_1_1cxcursor_1_1_cursor_visitor_1a1046e9b078429deffbd5f129b11d85b4">00950</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classclang_1_1cxcursor_1_1_cursor_visitor_1a1046e9b078429deffbd5f129b11d85b4">CursorVisitor::VisitClassTemplateDecl</link>(ClassTemplateDecl&#32;*D)&#32;{
00951 &#32;&#32;<emphasis role="comment">//&#32;FIXME:&#32;Visit&#32;the&#32;&quot;outer&quot;&#32;template&#32;parameter&#32;lists&#32;on&#32;the&#32;TagDecl</emphasis>
00952 &#32;&#32;<emphasis role="comment">//&#32;before&#32;visiting&#32;these&#32;template&#32;parameters.</emphasis>
00953 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(VisitTemplateParameters(D-&gt;getTemplateParameters()))
00954 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
00955 
00956 &#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;*CD&#32;=&#32;D-&gt;getTemplatedDecl();
00957 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;VisitAttributes(CD)&#32;||&#32;VisitCXXRecordDecl(CD);
00958 }
00959 
<anchor xml:id="__c_index_8cpp_source_1l00960"/><link linkend="_classclang_1_1cxcursor_1_1_cursor_visitor_1a1e38e6c0119deb8d59484bc5ccc0946c">00960</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classclang_1_1cxcursor_1_1_cursor_visitor_1a1e38e6c0119deb8d59484bc5ccc0946c">CursorVisitor::VisitTemplateTemplateParmDecl</link>(TemplateTemplateParmDecl&#32;*D)&#32;{
00961 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(VisitTemplateParameters(D-&gt;getTemplateParameters()))
00962 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
00963 
00964 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(D-&gt;hasDefaultArgument()&#32;&amp;&amp;&#32;!D-&gt;defaultArgumentWasInherited()&#32;&amp;&amp;
00965 &#32;&#32;&#32;&#32;&#32;&#32;VisitTemplateArgumentLoc(D-&gt;getDefaultArgument()))
00966 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
00967 
00968 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
00969 }
00970 
<anchor xml:id="__c_index_8cpp_source_1l00971"/><link linkend="_classclang_1_1cxcursor_1_1_cursor_visitor_1ae4ae51a63ce481b6c3c296d6ff58e4d6">00971</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classclang_1_1cxcursor_1_1_cursor_visitor_1ae4ae51a63ce481b6c3c296d6ff58e4d6">CursorVisitor::VisitObjCTypeParamDecl</link>(ObjCTypeParamDecl&#32;*D)&#32;{
00972 &#32;&#32;<emphasis role="comment">//&#32;Visit&#32;the&#32;bound,&#32;if&#32;it&apos;s&#32;explicit.</emphasis>
00973 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(D-&gt;hasExplicitBound())&#32;{
00974 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="keyword">auto</emphasis>&#32;TInfo&#32;=&#32;D-&gt;getTypeSourceInfo())&#32;{
00975 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(Visit(TInfo-&gt;getTypeLoc()))
00976 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
00977 &#32;&#32;&#32;&#32;}
00978 &#32;&#32;}
00979 
00980 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
00981 }
00982 
<anchor xml:id="__c_index_8cpp_source_1l00983"/><link linkend="_classclang_1_1cxcursor_1_1_cursor_visitor_1ae232b4aa473d4eae202b791b6780cd9e">00983</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classclang_1_1cxcursor_1_1_cursor_visitor_1ae232b4aa473d4eae202b791b6780cd9e">CursorVisitor::VisitObjCMethodDecl</link>(ObjCMethodDecl&#32;*ND)&#32;{
00984 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(TypeSourceInfo&#32;*TSInfo&#32;=&#32;ND-&gt;getReturnTypeSourceInfo())
00985 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(Visit(TSInfo-&gt;getTypeLoc()))
00986 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
00987 
00988 &#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;*P&#32;:&#32;ND-&gt;parameters())&#32;{
00989 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(Visit(<link linkend="_namespaceclang_1_1cxcursor_1ab61ec2059175833672e8e78a376bb218">MakeCXCursor</link>(P,&#32;TU,&#32;RegionOfInterest)))
00990 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
00991 &#32;&#32;}
00992 
00993 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;ND-&gt;isThisDeclarationADefinition()&#32;&amp;&amp;
00994 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Visit(<link linkend="_namespaceclang_1_1cxcursor_1ab61ec2059175833672e8e78a376bb218">MakeCXCursor</link>(ND-&gt;getBody(),&#32;StmtParent,&#32;TU,&#32;RegionOfInterest));
00995 }
00996 
00997 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;DeclIt&gt;
00998 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;addRangedDeclsInContainer(DeclIt&#32;*DI_current,&#32;DeclIt&#32;DE_current,
00999 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;SourceManager&#32;&amp;SM,&#32;SourceLocation&#32;EndLoc,
01000 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;SmallVectorImpl&lt;Decl&#32;*&gt;&#32;&amp;Decls)&#32;{
01001 &#32;&#32;DeclIt&#32;next&#32;=&#32;*DI_current;
01002 &#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(++next&#32;!=&#32;DE_current)&#32;{
01003 &#32;&#32;&#32;&#32;Decl&#32;*D_next&#32;=&#32;*next;
01004 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!D_next)
01005 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
01006 &#32;&#32;&#32;&#32;SourceLocation&#32;L&#32;=&#32;D_next-&gt;getBeginLoc();
01007 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!L.isValid())
01008 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
01009 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(SM.isBeforeInTranslationUnit(L,&#32;EndLoc))&#32;{
01010 &#32;&#32;&#32;&#32;&#32;&#32;*DI_current&#32;=&#32;next;
01011 &#32;&#32;&#32;&#32;&#32;&#32;Decls.push_back(D_next);
01012 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">continue</emphasis>;
01013 &#32;&#32;&#32;&#32;}
01014 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
01015 &#32;&#32;}
01016 }
01017 
<anchor xml:id="__c_index_8cpp_source_1l01018"/><link linkend="_classclang_1_1cxcursor_1_1_cursor_visitor_1a6cd04bb7010823f467388f85ee88178a">01018</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classclang_1_1cxcursor_1_1_cursor_visitor_1a6cd04bb7010823f467388f85ee88178a">CursorVisitor::VisitObjCContainerDecl</link>(ObjCContainerDecl&#32;*D)&#32;{
01019 &#32;&#32;<emphasis role="comment">//&#32;FIXME:&#32;Eventually&#32;convert&#32;back&#32;to&#32;just&#32;&apos;VisitDeclContext()&apos;.&#32;&#32;Essentially</emphasis>
01020 &#32;&#32;<emphasis role="comment">//&#32;an&#32;@implementation&#32;can&#32;lexically&#32;contain&#32;Decls&#32;that&#32;are&#32;not&#32;properly</emphasis>
01021 &#32;&#32;<emphasis role="comment">//&#32;nested&#32;in&#32;the&#32;AST.&#32;&#32;When&#32;we&#32;identify&#32;such&#32;cases,&#32;we&#32;need&#32;to&#32;retrofit</emphasis>
01022 &#32;&#32;<emphasis role="comment">//&#32;this&#32;nesting&#32;here.</emphasis>
01023 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!DI_current&#32;&amp;&amp;&#32;!FileDI_current)
01024 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;VisitDeclContext(D);
01025 
01026 &#32;&#32;<emphasis role="comment">//&#32;Scan&#32;the&#32;Decls&#32;that&#32;immediately&#32;come&#32;after&#32;the&#32;container</emphasis>
01027 &#32;&#32;<emphasis role="comment">//&#32;in&#32;the&#32;current&#32;DeclContext.&#32;&#32;If&#32;any&#32;fall&#32;within&#32;the</emphasis>
01028 &#32;&#32;<emphasis role="comment">//&#32;container&apos;s&#32;lexical&#32;region,&#32;stash&#32;them&#32;into&#32;a&#32;vector</emphasis>
01029 &#32;&#32;<emphasis role="comment">//&#32;for&#32;later&#32;processing.</emphasis>
01030 &#32;&#32;SmallVector&lt;Decl&#32;*,&#32;24&gt;&#32;DeclsInContainer;
01031 &#32;&#32;SourceLocation&#32;EndLoc&#32;=&#32;D-&gt;getSourceRange().getEnd();
01032 &#32;&#32;SourceManager&#32;&amp;SM&#32;=&#32;AU-&gt;getSourceManager();
01033 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(EndLoc.isValid())&#32;{
01034 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(DI_current)&#32;{
01035 &#32;&#32;&#32;&#32;&#32;&#32;addRangedDeclsInContainer(DI_current,&#32;DE_current,&#32;SM,&#32;EndLoc,
01036 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;DeclsInContainer);
01037 &#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
01038 &#32;&#32;&#32;&#32;&#32;&#32;addRangedDeclsInContainer(FileDI_current,&#32;FileDE_current,&#32;SM,&#32;EndLoc,
01039 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;DeclsInContainer);
01040 &#32;&#32;&#32;&#32;}
01041 &#32;&#32;}
01042 
01043 &#32;&#32;<emphasis role="comment">//&#32;The&#32;common&#32;case.</emphasis>
01044 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(DeclsInContainer.empty())
01045 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;VisitDeclContext(D);
01046 
01047 &#32;&#32;<emphasis role="comment">//&#32;Get&#32;all&#32;the&#32;Decls&#32;in&#32;the&#32;DeclContext,&#32;and&#32;sort&#32;them&#32;with&#32;the</emphasis>
01048 &#32;&#32;<emphasis role="comment">//&#32;additional&#32;ones&#32;we&apos;ve&#32;collected.&#32;&#32;Then&#32;visit&#32;them.</emphasis>
01049 &#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">auto</emphasis>&#32;*SubDecl&#32;:&#32;D-&gt;decls())&#32;{
01050 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!SubDecl&#32;||&#32;SubDecl-&gt;getLexicalDeclContext()&#32;!=&#32;D&#32;||
01051 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;SubDecl-&gt;getBeginLoc().isInvalid())
01052 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">continue</emphasis>;
01053 &#32;&#32;&#32;&#32;DeclsInContainer.push_back(SubDecl);
01054 &#32;&#32;}
01055 
01056 &#32;&#32;<emphasis role="comment">//&#32;Now&#32;sort&#32;the&#32;Decls&#32;so&#32;that&#32;they&#32;appear&#32;in&#32;lexical&#32;order.</emphasis>
01057 &#32;&#32;llvm::sort(DeclsInContainer,&#32;[&amp;SM](Decl&#32;*A,&#32;Decl&#32;*B)&#32;{
01058 &#32;&#32;&#32;&#32;SourceLocation&#32;L_A&#32;=&#32;A-&gt;getBeginLoc();
01059 &#32;&#32;&#32;&#32;SourceLocation&#32;L_B&#32;=&#32;B-&gt;getBeginLoc();
01060 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;L_A&#32;!=&#32;L_B
01061 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;?&#32;SM.isBeforeInTranslationUnit(L_A,&#32;L_B)
01062 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;SM.isBeforeInTranslationUnit(A-&gt;getEndLoc(),&#32;B-&gt;getEndLoc());
01063 &#32;&#32;});
01064 
01065 &#32;&#32;<emphasis role="comment">//&#32;Now&#32;visit&#32;the&#32;decls.</emphasis>
01066 &#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(SmallVectorImpl&lt;Decl&#32;*&gt;::iterator&#32;I&#32;=&#32;DeclsInContainer.begin(),
01067 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;E&#32;=&#32;DeclsInContainer.end();
01068 &#32;&#32;&#32;&#32;&#32;&#32;&#32;I&#32;!=&#32;E;&#32;++I)&#32;{
01069 &#32;&#32;&#32;&#32;CXCursor&#32;Cursor&#32;=&#32;<link linkend="_namespaceclang_1_1cxcursor_1ab61ec2059175833672e8e78a376bb218">MakeCXCursor</link>(*I,&#32;TU,&#32;RegionOfInterest);
01070 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;Optional&lt;bool&gt;&#32;&amp;V&#32;=&#32;shouldVisitCursor(Cursor);
01071 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!V.hasValue())
01072 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">continue</emphasis>;
01073 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!V.getValue())
01074 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
01075 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(Visit(Cursor,&#32;<emphasis role="keyword">true</emphasis>))
01076 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
01077 &#32;&#32;}
01078 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
01079 }
01080 
<anchor xml:id="__c_index_8cpp_source_1l01081"/><link linkend="_classclang_1_1cxcursor_1_1_cursor_visitor_1a1b34b238a762168d11b6b883dcd3b0fe">01081</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classclang_1_1cxcursor_1_1_cursor_visitor_1a1b34b238a762168d11b6b883dcd3b0fe">CursorVisitor::VisitObjCCategoryDecl</link>(ObjCCategoryDecl&#32;*ND)&#32;{
01082 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(Visit(<link linkend="_namespaceclang_1_1cxcursor_1aa0bea074dd325615cb85819eac47264e">MakeCursorObjCClassRef</link>(ND-&gt;getClassInterface(),&#32;ND-&gt;getLocation(),
01083 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;TU)))
01084 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
01085 
01086 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(VisitObjCTypeParamList(ND-&gt;getTypeParamList()))
01087 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
01088 
01089 &#32;&#32;ObjCCategoryDecl::protocol_loc_iterator&#32;PL&#32;=&#32;ND-&gt;protocol_loc_begin();
01090 &#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(ObjCCategoryDecl::protocol_iterator&#32;I&#32;=&#32;ND-&gt;protocol_begin(),
01091 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;E&#32;=&#32;ND-&gt;protocol_end();
01092 &#32;&#32;&#32;&#32;&#32;&#32;&#32;I&#32;!=&#32;E;&#32;++I,&#32;++PL)
01093 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(Visit(<link linkend="_namespaceclang_1_1cxcursor_1ac238ecc9f974783b9d0c2129f5aa675f">MakeCursorObjCProtocolRef</link>(*I,&#32;*PL,&#32;TU)))
01094 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
01095 
01096 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;VisitObjCContainerDecl(ND);
01097 }
01098 
<anchor xml:id="__c_index_8cpp_source_1l01099"/><link linkend="_classclang_1_1cxcursor_1_1_cursor_visitor_1a2c0feae123024ef1c7aeb8b10194d39a">01099</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classclang_1_1cxcursor_1_1_cursor_visitor_1a2c0feae123024ef1c7aeb8b10194d39a">CursorVisitor::VisitObjCProtocolDecl</link>(ObjCProtocolDecl&#32;*PID)&#32;{
01100 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!PID-&gt;isThisDeclarationADefinition())
01101 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;Visit(<link linkend="_namespaceclang_1_1cxcursor_1ac238ecc9f974783b9d0c2129f5aa675f">MakeCursorObjCProtocolRef</link>(PID,&#32;PID-&gt;getLocation(),&#32;TU));
01102 
01103 &#32;&#32;ObjCProtocolDecl::protocol_loc_iterator&#32;PL&#32;=&#32;PID-&gt;protocol_loc_begin();
01104 &#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(ObjCProtocolDecl::protocol_iterator&#32;I&#32;=&#32;PID-&gt;protocol_begin(),
01105 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;E&#32;=&#32;PID-&gt;protocol_end();
01106 &#32;&#32;&#32;&#32;&#32;&#32;&#32;I&#32;!=&#32;E;&#32;++I,&#32;++PL)
01107 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(Visit(<link linkend="_namespaceclang_1_1cxcursor_1ac238ecc9f974783b9d0c2129f5aa675f">MakeCursorObjCProtocolRef</link>(*I,&#32;*PL,&#32;TU)))
01108 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
01109 
01110 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;VisitObjCContainerDecl(PID);
01111 }
01112 
<anchor xml:id="__c_index_8cpp_source_1l01113"/><link linkend="_classclang_1_1cxcursor_1_1_cursor_visitor_1a605826428470d3401161655fe5ff5900">01113</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classclang_1_1cxcursor_1_1_cursor_visitor_1a605826428470d3401161655fe5ff5900">CursorVisitor::VisitObjCPropertyDecl</link>(ObjCPropertyDecl&#32;*PD)&#32;{
01114 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(PD-&gt;getTypeSourceInfo()&#32;&amp;&amp;&#32;Visit(PD-&gt;getTypeSourceInfo()-&gt;getTypeLoc()))
01115 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
01116 
01117 &#32;&#32;<emphasis role="comment">//&#32;FIXME:&#32;This&#32;implements&#32;a&#32;workaround&#32;with&#32;@property&#32;declarations&#32;also&#32;being</emphasis>
01118 &#32;&#32;<emphasis role="comment">//&#32;installed&#32;in&#32;the&#32;DeclContext&#32;for&#32;the&#32;@interface.&#32;&#32;Eventually&#32;this&#32;code</emphasis>
01119 &#32;&#32;<emphasis role="comment">//&#32;should&#32;be&#32;removed.</emphasis>
01120 &#32;&#32;ObjCCategoryDecl&#32;*CDecl&#32;=&#32;dyn_cast&lt;ObjCCategoryDecl&gt;(PD-&gt;getDeclContext());
01121 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!CDecl&#32;||&#32;!CDecl-&gt;IsClassExtension())
01122 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
01123 
01124 &#32;&#32;ObjCInterfaceDecl&#32;*ID&#32;=&#32;CDecl-&gt;getClassInterface();
01125 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!ID)
01126 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
01127 
01128 &#32;&#32;IdentifierInfo&#32;*PropertyId&#32;=&#32;PD-&gt;getIdentifier();
01129 &#32;&#32;ObjCPropertyDecl&#32;*prevDecl&#32;=&#32;ObjCPropertyDecl::findPropertyDecl(
01130 &#32;&#32;&#32;&#32;&#32;&#32;cast&lt;DeclContext&gt;(ID),&#32;PropertyId,&#32;PD-&gt;getQueryKind());
01131 
01132 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!prevDecl)
01133 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
01134 
01135 &#32;&#32;<emphasis role="comment">//&#32;Visit&#32;synthesized&#32;methods&#32;since&#32;they&#32;will&#32;be&#32;skipped&#32;when&#32;visiting</emphasis>
01136 &#32;&#32;<emphasis role="comment">//&#32;the&#32;@interface.</emphasis>
01137 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(ObjCMethodDecl&#32;*MD&#32;=&#32;prevDecl-&gt;getGetterMethodDecl())
01138 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(MD-&gt;isPropertyAccessor()&#32;&amp;&amp;&#32;MD-&gt;getLexicalDeclContext()&#32;==&#32;CDecl)
01139 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(Visit(<link linkend="_namespaceclang_1_1cxcursor_1ab61ec2059175833672e8e78a376bb218">MakeCXCursor</link>(MD,&#32;TU,&#32;RegionOfInterest)))
01140 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
01141 
01142 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(ObjCMethodDecl&#32;*MD&#32;=&#32;prevDecl-&gt;getSetterMethodDecl())
01143 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(MD-&gt;isPropertyAccessor()&#32;&amp;&amp;&#32;MD-&gt;getLexicalDeclContext()&#32;==&#32;CDecl)
01144 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(Visit(<link linkend="_namespaceclang_1_1cxcursor_1ab61ec2059175833672e8e78a376bb218">MakeCXCursor</link>(MD,&#32;TU,&#32;RegionOfInterest)))
01145 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
01146 
01147 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
01148 }
01149 
<anchor xml:id="__c_index_8cpp_source_1l01150"/><link linkend="_classclang_1_1cxcursor_1_1_cursor_visitor_1aaa6cff14e5a41f01f821b18c37b89df3">01150</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classclang_1_1cxcursor_1_1_cursor_visitor_1aaa6cff14e5a41f01f821b18c37b89df3">CursorVisitor::VisitObjCTypeParamList</link>(ObjCTypeParamList&#32;*typeParamList)&#32;{
01151 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!typeParamList)
01152 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
01153 
01154 &#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">auto</emphasis>&#32;*typeParam&#32;:&#32;*typeParamList)&#32;{
01155 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Visit&#32;the&#32;type&#32;parameter.</emphasis>
01156 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(Visit(<link linkend="_namespaceclang_1_1cxcursor_1ab61ec2059175833672e8e78a376bb218">MakeCXCursor</link>(typeParam,&#32;TU,&#32;RegionOfInterest)))
01157 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
01158 &#32;&#32;}
01159 
01160 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
01161 }
01162 
<anchor xml:id="__c_index_8cpp_source_1l01163"/><link linkend="_classclang_1_1cxcursor_1_1_cursor_visitor_1acb338f84620f6368cf377bb111d77b25">01163</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classclang_1_1cxcursor_1_1_cursor_visitor_1acb338f84620f6368cf377bb111d77b25">CursorVisitor::VisitObjCInterfaceDecl</link>(ObjCInterfaceDecl&#32;*D)&#32;{
01164 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!D-&gt;isThisDeclarationADefinition())&#32;{
01165 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Forward&#32;declaration&#32;is&#32;treated&#32;like&#32;a&#32;reference.</emphasis>
01166 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;Visit(<link linkend="_namespaceclang_1_1cxcursor_1aa0bea074dd325615cb85819eac47264e">MakeCursorObjCClassRef</link>(D,&#32;D-&gt;getLocation(),&#32;TU));
01167 &#32;&#32;}
01168 
01169 &#32;&#32;<emphasis role="comment">//&#32;Objective-C&#32;type&#32;parameters.</emphasis>
01170 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(VisitObjCTypeParamList(D-&gt;getTypeParamListAsWritten()))
01171 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
01172 
01173 &#32;&#32;<emphasis role="comment">//&#32;Issue&#32;callbacks&#32;for&#32;super&#32;class.</emphasis>
01174 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(D-&gt;getSuperClass()&#32;&amp;&amp;&#32;Visit(<link linkend="_namespaceclang_1_1cxcursor_1a81d6b09cb8995b57d394a8372437902a">MakeCursorObjCSuperClassRef</link>(
01175 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;D-&gt;getSuperClass(),&#32;D-&gt;getSuperClassLoc(),&#32;TU)))
01176 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
01177 
01178 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(TypeSourceInfo&#32;*SuperClassTInfo&#32;=&#32;D-&gt;getSuperClassTInfo())
01179 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(Visit(SuperClassTInfo-&gt;getTypeLoc()))
01180 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
01181 
01182 &#32;&#32;ObjCInterfaceDecl::protocol_loc_iterator&#32;PL&#32;=&#32;D-&gt;protocol_loc_begin();
01183 &#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(ObjCInterfaceDecl::protocol_iterator&#32;I&#32;=&#32;D-&gt;protocol_begin(),
01184 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;E&#32;=&#32;D-&gt;protocol_end();
01185 &#32;&#32;&#32;&#32;&#32;&#32;&#32;I&#32;!=&#32;E;&#32;++I,&#32;++PL)
01186 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(Visit(<link linkend="_namespaceclang_1_1cxcursor_1ac238ecc9f974783b9d0c2129f5aa675f">MakeCursorObjCProtocolRef</link>(*I,&#32;*PL,&#32;TU)))
01187 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
01188 
01189 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;VisitObjCContainerDecl(D);
01190 }
01191 
<anchor xml:id="__c_index_8cpp_source_1l01192"/><link linkend="_classclang_1_1cxcursor_1_1_cursor_visitor_1a2e740eceec896420d789bfecb55d7401">01192</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classclang_1_1cxcursor_1_1_cursor_visitor_1a2e740eceec896420d789bfecb55d7401">CursorVisitor::VisitObjCImplDecl</link>(ObjCImplDecl&#32;*D)&#32;{
01193 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;VisitObjCContainerDecl(D);
01194 }
01195 
<anchor xml:id="__c_index_8cpp_source_1l01196"/><link linkend="_classclang_1_1cxcursor_1_1_cursor_visitor_1af01009aeb52463835220b7dd0b7a38a5">01196</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classclang_1_1cxcursor_1_1_cursor_visitor_1af01009aeb52463835220b7dd0b7a38a5">CursorVisitor::VisitObjCCategoryImplDecl</link>(ObjCCategoryImplDecl&#32;*D)&#32;{
01197 &#32;&#32;<emphasis role="comment">//&#32;&apos;ID&apos;&#32;could&#32;be&#32;null&#32;when&#32;dealing&#32;with&#32;invalid&#32;code.</emphasis>
01198 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(ObjCInterfaceDecl&#32;*ID&#32;=&#32;D-&gt;getClassInterface())
01199 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(Visit(<link linkend="_namespaceclang_1_1cxcursor_1aa0bea074dd325615cb85819eac47264e">MakeCursorObjCClassRef</link>(ID,&#32;D-&gt;getLocation(),&#32;TU)))
01200 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
01201 
01202 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;VisitObjCImplDecl(D);
01203 }
01204 
<anchor xml:id="__c_index_8cpp_source_1l01205"/><link linkend="_classclang_1_1cxcursor_1_1_cursor_visitor_1aea7885c140d3c98feb0086019ca23a54">01205</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classclang_1_1cxcursor_1_1_cursor_visitor_1aea7885c140d3c98feb0086019ca23a54">CursorVisitor::VisitObjCImplementationDecl</link>(ObjCImplementationDecl&#32;*D)&#32;{
01206 <emphasis role="preprocessor">#if&#32;0</emphasis>
01207 &#32;&#32;<emphasis role="comment">//&#32;Issue&#32;callbacks&#32;for&#32;super&#32;class.</emphasis>
01208 &#32;&#32;<emphasis role="comment">//&#32;FIXME:&#32;No&#32;source&#32;location&#32;information!</emphasis>
01209 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(D-&gt;getSuperClass()&#32;&amp;&amp;
01210 &#32;&#32;&#32;&#32;&#32;&#32;Visit(<link linkend="_namespaceclang_1_1cxcursor_1a81d6b09cb8995b57d394a8372437902a">MakeCursorObjCSuperClassRef</link>(D-&gt;getSuperClass(),
01211 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;D-&gt;getSuperClassLoc(),
01212 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;TU)))
01213 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
01214 <emphasis role="preprocessor">#endif</emphasis>
01215 
01216 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;VisitObjCImplDecl(D);
01217 }
01218 
<anchor xml:id="__c_index_8cpp_source_1l01219"/><link linkend="_classclang_1_1cxcursor_1_1_cursor_visitor_1a6bdf80e7aa619732316432b8b393c9bb">01219</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classclang_1_1cxcursor_1_1_cursor_visitor_1a6bdf80e7aa619732316432b8b393c9bb">CursorVisitor::VisitObjCPropertyImplDecl</link>(ObjCPropertyImplDecl&#32;*PD)&#32;{
01220 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(ObjCIvarDecl&#32;*Ivar&#32;=&#32;PD-&gt;getPropertyIvarDecl())
01221 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(PD-&gt;isIvarNameSpecified())
01222 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;Visit(<link linkend="_namespaceclang_1_1cxcursor_1ad70c49c226f87377bc26fba7a4dbe973">MakeCursorMemberRef</link>(Ivar,&#32;PD-&gt;getPropertyIvarDeclLoc(),&#32;TU));
01223 
01224 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
01225 }
01226 
<anchor xml:id="__c_index_8cpp_source_1l01227"/><link linkend="_classclang_1_1cxcursor_1_1_cursor_visitor_1a8da19ba86bbcba98c07ba9b848887d8e">01227</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classclang_1_1cxcursor_1_1_cursor_visitor_1a8da19ba86bbcba98c07ba9b848887d8e">CursorVisitor::VisitNamespaceDecl</link>(NamespaceDecl&#32;*D)&#32;{
01228 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;VisitDeclContext(D);
01229 }
01230 
<anchor xml:id="__c_index_8cpp_source_1l01231"/><link linkend="_classclang_1_1cxcursor_1_1_cursor_visitor_1a93b38c417d905d364965d5e502b9613e">01231</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classclang_1_1cxcursor_1_1_cursor_visitor_1a93b38c417d905d364965d5e502b9613e">CursorVisitor::VisitNamespaceAliasDecl</link>(NamespaceAliasDecl&#32;*D)&#32;{
01232 &#32;&#32;<emphasis role="comment">//&#32;Visit&#32;nested-name-specifier.</emphasis>
01233 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(NestedNameSpecifierLoc&#32;QualifierLoc&#32;=&#32;D-&gt;getQualifierLoc())
01234 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(VisitNestedNameSpecifierLoc(QualifierLoc))
01235 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
01236 
01237 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;Visit(<link linkend="_namespaceclang_1_1cxcursor_1a6eadc019bbae1f61434528c197111b0e">MakeCursorNamespaceRef</link>(D-&gt;getAliasedNamespace(),
01238 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;D-&gt;getTargetNameLoc(),&#32;TU));
01239 }
01240 
<anchor xml:id="__c_index_8cpp_source_1l01241"/><link linkend="_classclang_1_1cxcursor_1_1_cursor_visitor_1a0f329ea11a8c32720cde84f12d06ba08">01241</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classclang_1_1cxcursor_1_1_cursor_visitor_1a0f329ea11a8c32720cde84f12d06ba08">CursorVisitor::VisitUsingDecl</link>(UsingDecl&#32;*D)&#32;{
01242 &#32;&#32;<emphasis role="comment">//&#32;Visit&#32;nested-name-specifier.</emphasis>
01243 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(NestedNameSpecifierLoc&#32;QualifierLoc&#32;=&#32;D-&gt;getQualifierLoc())&#32;{
01244 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(VisitNestedNameSpecifierLoc(QualifierLoc))
01245 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
01246 &#32;&#32;}
01247 
01248 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(Visit(<link linkend="_namespaceclang_1_1cxcursor_1a631225e024301b99cc72be73f0ee9271">MakeCursorOverloadedDeclRef</link>(D,&#32;D-&gt;getLocation(),&#32;TU)))
01249 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
01250 
01251 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;VisitDeclarationNameInfo(D-&gt;getNameInfo());
01252 }
01253 
<anchor xml:id="__c_index_8cpp_source_1l01254"/><link linkend="_classclang_1_1cxcursor_1_1_cursor_visitor_1a96fd01a9605ed4dbbdf75b760e9756b1">01254</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classclang_1_1cxcursor_1_1_cursor_visitor_1a96fd01a9605ed4dbbdf75b760e9756b1">CursorVisitor::VisitUsingDirectiveDecl</link>(UsingDirectiveDecl&#32;*D)&#32;{
01255 &#32;&#32;<emphasis role="comment">//&#32;Visit&#32;nested-name-specifier.</emphasis>
01256 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(NestedNameSpecifierLoc&#32;QualifierLoc&#32;=&#32;D-&gt;getQualifierLoc())
01257 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(VisitNestedNameSpecifierLoc(QualifierLoc))
01258 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
01259 
01260 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;Visit(<link linkend="_namespaceclang_1_1cxcursor_1a6eadc019bbae1f61434528c197111b0e">MakeCursorNamespaceRef</link>(D-&gt;getNominatedNamespaceAsWritten(),
01261 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;D-&gt;getIdentLocation(),&#32;TU));
01262 }
01263 
<anchor xml:id="__c_index_8cpp_source_1l01264"/><link linkend="_classclang_1_1cxcursor_1_1_cursor_visitor_1ab125dfb3d37b39ab6869040fceacfed1">01264</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classclang_1_1cxcursor_1_1_cursor_visitor_1ab125dfb3d37b39ab6869040fceacfed1">CursorVisitor::VisitUnresolvedUsingValueDecl</link>(UnresolvedUsingValueDecl&#32;*D)&#32;{
01265 &#32;&#32;<emphasis role="comment">//&#32;Visit&#32;nested-name-specifier.</emphasis>
01266 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(NestedNameSpecifierLoc&#32;QualifierLoc&#32;=&#32;D-&gt;getQualifierLoc())&#32;{
01267 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(VisitNestedNameSpecifierLoc(QualifierLoc))
01268 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
01269 &#32;&#32;}
01270 
01271 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;VisitDeclarationNameInfo(D-&gt;getNameInfo());
01272 }
01273 
<anchor xml:id="__c_index_8cpp_source_1l01274"/><link linkend="_classclang_1_1cxcursor_1_1_cursor_visitor_1ae5983704e0c3c63718f4adaeab38bb8a">01274</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classclang_1_1cxcursor_1_1_cursor_visitor_1ae5983704e0c3c63718f4adaeab38bb8a">CursorVisitor::VisitUnresolvedUsingTypenameDecl</link>(
01275 &#32;&#32;&#32;&#32;UnresolvedUsingTypenameDecl&#32;*D)&#32;{
01276 &#32;&#32;<emphasis role="comment">//&#32;Visit&#32;nested-name-specifier.</emphasis>
01277 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(NestedNameSpecifierLoc&#32;QualifierLoc&#32;=&#32;D-&gt;getQualifierLoc())
01278 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(VisitNestedNameSpecifierLoc(QualifierLoc))
01279 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
01280 
01281 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
01282 }
01283 
<anchor xml:id="__c_index_8cpp_source_1l01284"/><link linkend="_classclang_1_1cxcursor_1_1_cursor_visitor_1a993e67b4ec4c7c83711635a211dd78bf">01284</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classclang_1_1cxcursor_1_1_cursor_visitor_1a993e67b4ec4c7c83711635a211dd78bf">CursorVisitor::VisitStaticAssertDecl</link>(StaticAssertDecl&#32;*D)&#32;{
01285 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(Visit(<link linkend="_namespaceclang_1_1cxcursor_1ab61ec2059175833672e8e78a376bb218">MakeCXCursor</link>(D-&gt;getAssertExpr(),&#32;StmtParent,&#32;TU,&#32;RegionOfInterest)))
01286 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
01287 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(StringLiteral&#32;*Message&#32;=&#32;D-&gt;getMessage())
01288 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(Visit(<link linkend="_namespaceclang_1_1cxcursor_1ab61ec2059175833672e8e78a376bb218">MakeCXCursor</link>(Message,&#32;StmtParent,&#32;TU,&#32;RegionOfInterest)))
01289 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
01290 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
01291 }
01292 
<anchor xml:id="__c_index_8cpp_source_1l01293"/><link linkend="_classclang_1_1cxcursor_1_1_cursor_visitor_1a8dcd76b6d78498c519af0357f49b7672">01293</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classclang_1_1cxcursor_1_1_cursor_visitor_1a8dcd76b6d78498c519af0357f49b7672">CursorVisitor::VisitFriendDecl</link>(FriendDecl&#32;*D)&#32;{
01294 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(NamedDecl&#32;*FriendD&#32;=&#32;D-&gt;getFriendDecl())&#32;{
01295 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(Visit(<link linkend="_namespaceclang_1_1cxcursor_1ab61ec2059175833672e8e78a376bb218">MakeCXCursor</link>(FriendD,&#32;TU,&#32;RegionOfInterest)))
01296 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
01297 &#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(TypeSourceInfo&#32;*TI&#32;=&#32;D-&gt;getFriendType())&#32;{
01298 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(Visit(TI-&gt;getTypeLoc()))
01299 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
01300 &#32;&#32;}
01301 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
01302 }
01303 
<anchor xml:id="__c_index_8cpp_source_1l01304"/><link linkend="_classclang_1_1cxcursor_1_1_cursor_visitor_1a8fc88637e0d32bfd4a776d6a57e08d5e">01304</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classclang_1_1cxcursor_1_1_cursor_visitor_1a8fc88637e0d32bfd4a776d6a57e08d5e">CursorVisitor::VisitDecompositionDecl</link>(DecompositionDecl&#32;*D)&#32;{
01305 &#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">auto</emphasis>&#32;*B&#32;:&#32;D-&gt;bindings())&#32;{
01306 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(Visit(<link linkend="_namespaceclang_1_1cxcursor_1ab61ec2059175833672e8e78a376bb218">MakeCXCursor</link>(B,&#32;TU,&#32;RegionOfInterest)))
01307 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
01308 &#32;&#32;}
01309 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;VisitVarDecl(D);
01310 }
01311 
<anchor xml:id="__c_index_8cpp_source_1l01312"/><link linkend="_classclang_1_1cxcursor_1_1_cursor_visitor_1adc36610328af99cbbd2f06d7f0292ec9">01312</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classclang_1_1cxcursor_1_1_cursor_visitor_1adc36610328af99cbbd2f06d7f0292ec9">CursorVisitor::VisitDeclarationNameInfo</link>(DeclarationNameInfo&#32;Name)&#32;{
01313 &#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(Name.getName().getNameKind())&#32;{
01314 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;clang::DeclarationName::Identifier:
01315 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;clang::DeclarationName::CXXLiteralOperatorName:
01316 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;clang::DeclarationName::CXXDeductionGuideName:
01317 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;clang::DeclarationName::CXXOperatorName:
01318 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;clang::DeclarationName::CXXUsingDirective:
01319 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
01320 
01321 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;clang::DeclarationName::CXXConstructorName:
01322 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;clang::DeclarationName::CXXDestructorName:
01323 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;clang::DeclarationName::CXXConversionFunctionName:
01324 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(TypeSourceInfo&#32;*TSInfo&#32;=&#32;Name.getNamedTypeInfo())
01325 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;Visit(TSInfo-&gt;getTypeLoc());
01326 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
01327 
01328 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;clang::DeclarationName::ObjCZeroArgSelector:
01329 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;clang::DeclarationName::ObjCOneArgSelector:
01330 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;clang::DeclarationName::ObjCMultiArgSelector:
01331 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;FIXME:&#32;Per-identifier&#32;location&#32;info?</emphasis>
01332 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
01333 &#32;&#32;}
01334 
01335 &#32;&#32;llvm_unreachable(<emphasis role="stringliteral">&quot;Invalid&#32;DeclarationName::Kind!&quot;</emphasis>);
01336 }
01337 
<anchor xml:id="__c_index_8cpp_source_1l01338"/><link linkend="_classclang_1_1cxcursor_1_1_cursor_visitor_1aae4d0351c44a0e33f9dc797fdc722445">01338</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classclang_1_1cxcursor_1_1_cursor_visitor_1aae4d0351c44a0e33f9dc797fdc722445">CursorVisitor::VisitNestedNameSpecifier</link>(NestedNameSpecifier&#32;*NNS,
01339 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;SourceRange&#32;Range)&#32;{
01340 &#32;&#32;<emphasis role="comment">//&#32;FIXME:&#32;This&#32;whole&#32;routine&#32;is&#32;a&#32;hack&#32;to&#32;work&#32;around&#32;the&#32;lack&#32;of&#32;proper</emphasis>
01341 &#32;&#32;<emphasis role="comment">//&#32;source&#32;information&#32;in&#32;nested-name-specifiers&#32;(PR5791).&#32;Since&#32;we&#32;do&#32;have</emphasis>
01342 &#32;&#32;<emphasis role="comment">//&#32;a&#32;beginning&#32;source&#32;location,&#32;we&#32;can&#32;visit&#32;the&#32;first&#32;component&#32;of&#32;the</emphasis>
01343 &#32;&#32;<emphasis role="comment">//&#32;nested-name-specifier,&#32;if&#32;it&apos;s&#32;a&#32;single-token&#32;component.</emphasis>
01344 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!NNS)
01345 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
01346 
01347 &#32;&#32;<emphasis role="comment">//&#32;Get&#32;the&#32;first&#32;component&#32;in&#32;the&#32;nested-name-specifier.</emphasis>
01348 &#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(NestedNameSpecifier&#32;*Prefix&#32;=&#32;NNS-&gt;getPrefix())
01349 &#32;&#32;&#32;&#32;NNS&#32;=&#32;Prefix;
01350 
01351 &#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(NNS-&gt;getKind())&#32;{
01352 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;NestedNameSpecifier::Namespace:
01353 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;Visit(
01354 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespaceclang_1_1cxcursor_1a6eadc019bbae1f61434528c197111b0e">MakeCursorNamespaceRef</link>(NNS-&gt;getAsNamespace(),&#32;Range.getBegin(),&#32;TU));
01355 
01356 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;NestedNameSpecifier::NamespaceAlias:
01357 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;Visit(<link linkend="_namespaceclang_1_1cxcursor_1a6eadc019bbae1f61434528c197111b0e">MakeCursorNamespaceRef</link>(NNS-&gt;getAsNamespaceAlias(),
01358 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Range.getBegin(),&#32;TU));
01359 
01360 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;NestedNameSpecifier::TypeSpec:&#32;{
01361 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;If&#32;the&#32;type&#32;has&#32;a&#32;form&#32;where&#32;we&#32;know&#32;that&#32;the&#32;beginning&#32;of&#32;the&#32;source</emphasis>
01362 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;range&#32;matches&#32;up&#32;with&#32;a&#32;reference&#32;cursor.&#32;Visit&#32;the&#32;appropriate&#32;reference</emphasis>
01363 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;cursor.</emphasis>
01364 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;Type&#32;*T&#32;=&#32;NNS-&gt;getAsType();
01365 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;TypedefType&#32;*Typedef&#32;=&#32;dyn_cast&lt;TypedefType&gt;(T))
01366 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;Visit(<link linkend="_namespaceclang_1_1cxcursor_1a3534c264c1431ec3d09c975fcafa263d">MakeCursorTypeRef</link>(Typedef-&gt;getDecl(),&#32;Range.getBegin(),&#32;TU));
01367 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;TagType&#32;*Tag&#32;=&#32;dyn_cast&lt;TagType&gt;(T))
01368 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;Visit(<link linkend="_namespaceclang_1_1cxcursor_1a3534c264c1431ec3d09c975fcafa263d">MakeCursorTypeRef</link>(Tag-&gt;getDecl(),&#32;Range.getBegin(),&#32;TU));
01369 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;TemplateSpecializationType&#32;*TST&#32;=
01370 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;dyn_cast&lt;TemplateSpecializationType&gt;(T))
01371 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;VisitTemplateName(TST-&gt;getTemplateName(),&#32;Range.getBegin());
01372 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
01373 &#32;&#32;}
01374 
01375 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;NestedNameSpecifier::TypeSpecWithTemplate:
01376 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;NestedNameSpecifier::Global:
01377 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;NestedNameSpecifier::Identifier:
01378 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;NestedNameSpecifier::Super:
01379 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
01380 &#32;&#32;}
01381 
01382 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
01383 }
01384 
<anchor xml:id="__c_index_8cpp_source_1l01385"/><link linkend="_classclang_1_1cxcursor_1_1_cursor_visitor_1a7b754c2b2db487a1286e47d1134365bf">01385</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classclang_1_1cxcursor_1_1_cursor_visitor_1a7b754c2b2db487a1286e47d1134365bf">CursorVisitor::VisitNestedNameSpecifierLoc</link>(
01386 &#32;&#32;&#32;&#32;NestedNameSpecifierLoc&#32;Qualifier)&#32;{
01387 &#32;&#32;SmallVector&lt;NestedNameSpecifierLoc,&#32;4&gt;&#32;Qualifiers;
01388 &#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(;&#32;Qualifier;&#32;Qualifier&#32;=&#32;Qualifier.getPrefix())
01389 &#32;&#32;&#32;&#32;Qualifiers.push_back(Qualifier);
01390 
01391 &#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(!Qualifiers.empty())&#32;{
01392 &#32;&#32;&#32;&#32;NestedNameSpecifierLoc&#32;Q&#32;=&#32;Qualifiers.pop_back_val();
01393 &#32;&#32;&#32;&#32;NestedNameSpecifier&#32;*NNS&#32;=&#32;Q.getNestedNameSpecifier();
01394 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(NNS-&gt;getKind())&#32;{
01395 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;NestedNameSpecifier::Namespace:
01396 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(Visit(<link linkend="_namespaceclang_1_1cxcursor_1a6eadc019bbae1f61434528c197111b0e">MakeCursorNamespaceRef</link>(NNS-&gt;getAsNamespace(),
01397 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Q.getLocalBeginLoc(),&#32;TU)))
01398 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
01399 
01400 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
01401 
01402 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;NestedNameSpecifier::NamespaceAlias:
01403 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(Visit(<link linkend="_namespaceclang_1_1cxcursor_1a6eadc019bbae1f61434528c197111b0e">MakeCursorNamespaceRef</link>(NNS-&gt;getAsNamespaceAlias(),
01404 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Q.getLocalBeginLoc(),&#32;TU)))
01405 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
01406 
01407 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
01408 
01409 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;NestedNameSpecifier::TypeSpec:
01410 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;NestedNameSpecifier::TypeSpecWithTemplate:
01411 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(Visit(Q.getTypeLoc()))
01412 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
01413 
01414 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
01415 
01416 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;NestedNameSpecifier::Global:
01417 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;NestedNameSpecifier::Identifier:
01418 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;NestedNameSpecifier::Super:
01419 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
01420 &#32;&#32;&#32;&#32;}
01421 &#32;&#32;}
01422 
01423 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
01424 }
01425 
<anchor xml:id="__c_index_8cpp_source_1l01426"/><link linkend="_classclang_1_1cxcursor_1_1_cursor_visitor_1aeba17d0f7d6f7154cc856bb0d3ac55de">01426</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classclang_1_1cxcursor_1_1_cursor_visitor_1aeba17d0f7d6f7154cc856bb0d3ac55de">CursorVisitor::VisitTemplateParameters</link>(
01427 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;TemplateParameterList&#32;*Params)&#32;{
01428 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!Params)
01429 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
01430 
01431 &#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(TemplateParameterList::const_iterator&#32;P&#32;=&#32;Params-&gt;begin(),
01432 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;PEnd&#32;=&#32;Params-&gt;end();
01433 &#32;&#32;&#32;&#32;&#32;&#32;&#32;P&#32;!=&#32;PEnd;&#32;++P)&#32;{
01434 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(Visit(<link linkend="_namespaceclang_1_1cxcursor_1ab61ec2059175833672e8e78a376bb218">MakeCXCursor</link>(*P,&#32;TU,&#32;RegionOfInterest)))
01435 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
01436 &#32;&#32;}
01437 
01438 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
01439 }
01440 
<anchor xml:id="__c_index_8cpp_source_1l01441"/><link linkend="_classclang_1_1cxcursor_1_1_cursor_visitor_1aa6960261f98ac5f02749ece1e771464a">01441</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classclang_1_1cxcursor_1_1_cursor_visitor_1aa6960261f98ac5f02749ece1e771464a">CursorVisitor::VisitTemplateName</link>(TemplateName&#32;Name,&#32;SourceLocation&#32;Loc)&#32;{
01442 &#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(Name.getKind())&#32;{
01443 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;TemplateName::Template:
01444 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;Visit(<link linkend="_namespaceclang_1_1cxcursor_1ac63e4fd5fdbaf88d0632a7682afbf744">MakeCursorTemplateRef</link>(Name.getAsTemplateDecl(),&#32;Loc,&#32;TU));
01445 
01446 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;TemplateName::OverloadedTemplate:
01447 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Visit&#32;the&#32;overloaded&#32;template&#32;set.</emphasis>
01448 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(Visit(<link linkend="_namespaceclang_1_1cxcursor_1a631225e024301b99cc72be73f0ee9271">MakeCursorOverloadedDeclRef</link>(Name,&#32;Loc,&#32;TU)))
01449 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
01450 
01451 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
01452 
01453 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;TemplateName::AssumedTemplate:
01454 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;FIXME:&#32;Visit&#32;DeclarationName?</emphasis>
01455 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
01456 
01457 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;TemplateName::DependentTemplate:
01458 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;FIXME:&#32;Visit&#32;nested-name-specifier.</emphasis>
01459 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
01460 
01461 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;TemplateName::QualifiedTemplate:
01462 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;FIXME:&#32;Visit&#32;nested-name-specifier.</emphasis>
01463 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;Visit(<link linkend="_namespaceclang_1_1cxcursor_1ac63e4fd5fdbaf88d0632a7682afbf744">MakeCursorTemplateRef</link>(
01464 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Name.getAsQualifiedTemplateName()-&gt;getDecl(),&#32;Loc,&#32;TU));
01465 
01466 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;TemplateName::SubstTemplateTemplateParm:
01467 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;Visit(<link linkend="_namespaceclang_1_1cxcursor_1ac63e4fd5fdbaf88d0632a7682afbf744">MakeCursorTemplateRef</link>(
01468 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Name.getAsSubstTemplateTemplateParm()-&gt;getParameter(),&#32;Loc,&#32;TU));
01469 
01470 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;TemplateName::SubstTemplateTemplateParmPack:
01471 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;Visit(<link linkend="_namespaceclang_1_1cxcursor_1ac63e4fd5fdbaf88d0632a7682afbf744">MakeCursorTemplateRef</link>(
01472 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Name.getAsSubstTemplateTemplateParmPack()-&gt;getParameterPack(),&#32;Loc,
01473 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;TU));
01474 &#32;&#32;}
01475 
01476 &#32;&#32;llvm_unreachable(<emphasis role="stringliteral">&quot;Invalid&#32;TemplateName::Kind!&quot;</emphasis>);
01477 }
01478 
<anchor xml:id="__c_index_8cpp_source_1l01479"/><link linkend="_classclang_1_1cxcursor_1_1_cursor_visitor_1a4a8570d91cfdf0c794c0457c447d49e3">01479</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classclang_1_1cxcursor_1_1_cursor_visitor_1a4a8570d91cfdf0c794c0457c447d49e3">CursorVisitor::VisitTemplateArgumentLoc</link>(<emphasis role="keyword">const</emphasis>&#32;TemplateArgumentLoc&#32;&amp;TAL)&#32;{
01480 &#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(TAL.getArgument().getKind())&#32;{
01481 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;TemplateArgument::Null:
01482 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;TemplateArgument::Integral:
01483 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;TemplateArgument::Pack:
01484 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
01485 
01486 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;TemplateArgument::Type:
01487 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(TypeSourceInfo&#32;*TSInfo&#32;=&#32;TAL.getTypeSourceInfo())
01488 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;Visit(TSInfo-&gt;getTypeLoc());
01489 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
01490 
01491 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;TemplateArgument::Declaration:
01492 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(Expr&#32;*E&#32;=&#32;TAL.getSourceDeclExpression())
01493 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;Visit(<link linkend="_namespaceclang_1_1cxcursor_1ab61ec2059175833672e8e78a376bb218">MakeCXCursor</link>(E,&#32;StmtParent,&#32;TU,&#32;RegionOfInterest));
01494 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
01495 
01496 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;TemplateArgument::NullPtr:
01497 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(Expr&#32;*E&#32;=&#32;TAL.getSourceNullPtrExpression())
01498 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;Visit(<link linkend="_namespaceclang_1_1cxcursor_1ab61ec2059175833672e8e78a376bb218">MakeCXCursor</link>(E,&#32;StmtParent,&#32;TU,&#32;RegionOfInterest));
01499 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
01500 
01501 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;TemplateArgument::Expression:
01502 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(Expr&#32;*E&#32;=&#32;TAL.getSourceExpression())
01503 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;Visit(<link linkend="_namespaceclang_1_1cxcursor_1ab61ec2059175833672e8e78a376bb218">MakeCXCursor</link>(E,&#32;StmtParent,&#32;TU,&#32;RegionOfInterest));
01504 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
01505 
01506 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;TemplateArgument::Template:
01507 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;TemplateArgument::TemplateExpansion:
01508 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(VisitNestedNameSpecifierLoc(TAL.getTemplateQualifierLoc()))
01509 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
01510 
01511 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;VisitTemplateName(TAL.getArgument().getAsTemplateOrTemplatePattern(),
01512 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;TAL.getTemplateNameLoc());
01513 &#32;&#32;}
01514 
01515 &#32;&#32;llvm_unreachable(<emphasis role="stringliteral">&quot;Invalid&#32;TemplateArgument::Kind!&quot;</emphasis>);
01516 }
01517 
<anchor xml:id="__c_index_8cpp_source_1l01518"/><link linkend="_classclang_1_1cxcursor_1_1_cursor_visitor_1a7be65be3ded3c873b45451a03d19c402">01518</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classclang_1_1cxcursor_1_1_cursor_visitor_1a7be65be3ded3c873b45451a03d19c402">CursorVisitor::VisitLinkageSpecDecl</link>(LinkageSpecDecl&#32;*D)&#32;{
01519 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;VisitDeclContext(D);
01520 }
01521 
01522 <emphasis role="keywordtype">bool</emphasis>&#32;CursorVisitor::VisitQualifiedTypeLoc(QualifiedTypeLoc&#32;TL)&#32;{
01523 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;Visit(TL.getUnqualifiedLoc());
01524 }
01525 
01526 <emphasis role="keywordtype">bool</emphasis>&#32;CursorVisitor::VisitBuiltinTypeLoc(BuiltinTypeLoc&#32;TL)&#32;{
01527 &#32;&#32;ASTContext&#32;&amp;Context&#32;=&#32;AU-&gt;getASTContext();
01528 
01529 &#32;&#32;<emphasis role="comment">//&#32;Some&#32;builtin&#32;types&#32;(such&#32;as&#32;Objective-C&apos;s&#32;&quot;id&quot;,&#32;&quot;sel&quot;,&#32;and</emphasis>
01530 &#32;&#32;<emphasis role="comment">//&#32;&quot;Class&quot;)&#32;have&#32;associated&#32;declarations.&#32;Create&#32;cursors&#32;for&#32;those.</emphasis>
01531 &#32;&#32;QualType&#32;VisitType;
01532 &#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(TL.getTypePtr()-&gt;getKind())&#32;{
01533 
01534 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;BuiltinType::Void:
01535 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;BuiltinType::NullPtr:
01536 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;BuiltinType::Dependent:
01537 <emphasis role="preprocessor">#define&#32;IMAGE_TYPE(ImgType,&#32;Id,&#32;SingletonId,&#32;Access,&#32;Suffix)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
01538 <emphasis role="preprocessor">&#32;&#32;case&#32;BuiltinType::Id:</emphasis>
01539 <emphasis role="preprocessor">#include&#32;&quot;clang/Basic/OpenCLImageTypes.def&quot;</emphasis>
01540 <emphasis role="preprocessor">#define&#32;EXT_OPAQUE_TYPE(ExtTYpe,&#32;Id,&#32;Ext)&#32;case&#32;BuiltinType::Id:</emphasis>
01541 <emphasis role="preprocessor">#include&#32;&quot;clang/Basic/OpenCLExtensionTypes.def&quot;</emphasis>
01542 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;BuiltinType::OCLSampler:
01543 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;BuiltinType::OCLEvent:
01544 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;BuiltinType::OCLClkEvent:
01545 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;BuiltinType::OCLQueue:
01546 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;BuiltinType::OCLReserveID:
01547 <emphasis role="preprocessor">#define&#32;SVE_TYPE(Name,&#32;Id,&#32;SingletonId)&#32;case&#32;BuiltinType::Id:</emphasis>
01548 <emphasis role="preprocessor">#include&#32;&quot;clang/Basic/AArch64SVEACLETypes.def&quot;</emphasis>
01549 <emphasis role="preprocessor">#define&#32;PPC_VECTOR_TYPE(Name,&#32;Id,&#32;Size)&#32;case&#32;BuiltinType::Id:</emphasis>
01550 <emphasis role="preprocessor">#include&#32;&quot;clang/Basic/PPCTypes.def&quot;</emphasis>
01551 <emphasis role="preprocessor">#define&#32;RVV_TYPE(Name,&#32;Id,&#32;SingletonId)&#32;case&#32;BuiltinType::Id:</emphasis>
01552 <emphasis role="preprocessor">#include&#32;&quot;clang/Basic/RISCVVTypes.def&quot;</emphasis>
01553 <emphasis role="preprocessor">#define&#32;BUILTIN_TYPE(Id,&#32;SingletonId)</emphasis>
01554 <emphasis role="preprocessor">#define&#32;SIGNED_TYPE(Id,&#32;SingletonId)&#32;case&#32;BuiltinType::Id:</emphasis>
01555 <emphasis role="preprocessor">#define&#32;UNSIGNED_TYPE(Id,&#32;SingletonId)&#32;case&#32;BuiltinType::Id:</emphasis>
01556 <emphasis role="preprocessor">#define&#32;FLOATING_TYPE(Id,&#32;SingletonId)&#32;case&#32;BuiltinType::Id:</emphasis>
01557 <emphasis role="preprocessor">#define&#32;PLACEHOLDER_TYPE(Id,&#32;SingletonId)&#32;case&#32;BuiltinType::Id:</emphasis>
01558 <emphasis role="preprocessor">#include&#32;&quot;clang/AST/BuiltinTypes.def&quot;</emphasis>
01559 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
01560 
01561 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;BuiltinType::ObjCId:
01562 &#32;&#32;&#32;&#32;VisitType&#32;=&#32;Context.getObjCIdType();
01563 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
01564 
01565 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;BuiltinType::ObjCClass:
01566 &#32;&#32;&#32;&#32;VisitType&#32;=&#32;Context.getObjCClassType();
01567 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
01568 
01569 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;BuiltinType::ObjCSel:
01570 &#32;&#32;&#32;&#32;VisitType&#32;=&#32;Context.getObjCSelType();
01571 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
01572 &#32;&#32;}
01573 
01574 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!VisitType.isNull())&#32;{
01575 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;TypedefType&#32;*Typedef&#32;=&#32;VisitType-&gt;getAs&lt;TypedefType&gt;())
01576 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;Visit(
01577 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespaceclang_1_1cxcursor_1a3534c264c1431ec3d09c975fcafa263d">MakeCursorTypeRef</link>(Typedef-&gt;getDecl(),&#32;TL.getBuiltinLoc(),&#32;TU));
01578 &#32;&#32;}
01579 
01580 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
01581 }
01582 
01583 <emphasis role="keywordtype">bool</emphasis>&#32;CursorVisitor::VisitTypedefTypeLoc(TypedefTypeLoc&#32;TL)&#32;{
01584 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;Visit(<link linkend="_namespaceclang_1_1cxcursor_1a3534c264c1431ec3d09c975fcafa263d">MakeCursorTypeRef</link>(TL.getTypedefNameDecl(),&#32;TL.getNameLoc(),&#32;TU));
01585 }
01586 
01587 <emphasis role="keywordtype">bool</emphasis>&#32;CursorVisitor::VisitUnresolvedUsingTypeLoc(UnresolvedUsingTypeLoc&#32;TL)&#32;{
01588 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;Visit(<link linkend="_namespaceclang_1_1cxcursor_1a3534c264c1431ec3d09c975fcafa263d">MakeCursorTypeRef</link>(TL.getDecl(),&#32;TL.getNameLoc(),&#32;TU));
01589 }
01590 
<anchor xml:id="__c_index_8cpp_source_1l01591"/><link linkend="_classclang_1_1cxcursor_1_1_cursor_visitor_1ab7a464e6d58c07492c20d402c4048612">01591</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classclang_1_1cxcursor_1_1_cursor_visitor_1ab7a464e6d58c07492c20d402c4048612">CursorVisitor::VisitTagTypeLoc</link>(TagTypeLoc&#32;TL)&#32;{
01592 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(TL.isDefinition())
01593 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;Visit(<link linkend="_namespaceclang_1_1cxcursor_1ab61ec2059175833672e8e78a376bb218">MakeCXCursor</link>(TL.getDecl(),&#32;TU,&#32;RegionOfInterest));
01594 
01595 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;Visit(<link linkend="_namespaceclang_1_1cxcursor_1a3534c264c1431ec3d09c975fcafa263d">MakeCursorTypeRef</link>(TL.getDecl(),&#32;TL.getNameLoc(),&#32;TU));
01596 }
01597 
01598 <emphasis role="keywordtype">bool</emphasis>&#32;CursorVisitor::VisitTemplateTypeParmTypeLoc(TemplateTypeParmTypeLoc&#32;TL)&#32;{
01599 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;Visit(<link linkend="_namespaceclang_1_1cxcursor_1a3534c264c1431ec3d09c975fcafa263d">MakeCursorTypeRef</link>(TL.getDecl(),&#32;TL.getNameLoc(),&#32;TU));
01600 }
01601 
01602 <emphasis role="keywordtype">bool</emphasis>&#32;CursorVisitor::VisitObjCInterfaceTypeLoc(ObjCInterfaceTypeLoc&#32;TL)&#32;{
01603 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;Visit(<link linkend="_namespaceclang_1_1cxcursor_1aa0bea074dd325615cb85819eac47264e">MakeCursorObjCClassRef</link>(TL.getIFaceDecl(),&#32;TL.getNameLoc(),&#32;TU));
01604 }
01605 
01606 <emphasis role="keywordtype">bool</emphasis>&#32;CursorVisitor::VisitObjCTypeParamTypeLoc(ObjCTypeParamTypeLoc&#32;TL)&#32;{
01607 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(Visit(<link linkend="_namespaceclang_1_1cxcursor_1a3534c264c1431ec3d09c975fcafa263d">MakeCursorTypeRef</link>(TL.getDecl(),&#32;TL.getBeginLoc(),&#32;TU)))
01608 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
01609 &#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">unsigned</emphasis>&#32;I&#32;=&#32;0,&#32;N&#32;=&#32;TL.getNumProtocols();&#32;I&#32;!=&#32;N;&#32;++I)&#32;{
01610 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(Visit(<link linkend="_namespaceclang_1_1cxcursor_1ac238ecc9f974783b9d0c2129f5aa675f">MakeCursorObjCProtocolRef</link>(TL.getProtocol(I),&#32;TL.getProtocolLoc(I),
01611 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;TU)))
01612 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
01613 &#32;&#32;}
01614 
01615 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
01616 }
01617 
01618 <emphasis role="keywordtype">bool</emphasis>&#32;CursorVisitor::VisitObjCObjectTypeLoc(ObjCObjectTypeLoc&#32;TL)&#32;{
01619 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(TL.hasBaseTypeAsWritten()&#32;&amp;&amp;&#32;Visit(TL.getBaseLoc()))
01620 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
01621 
01622 &#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">unsigned</emphasis>&#32;I&#32;=&#32;0,&#32;N&#32;=&#32;TL.getNumTypeArgs();&#32;I&#32;!=&#32;N;&#32;++I)&#32;{
01623 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(Visit(TL.getTypeArgTInfo(I)-&gt;getTypeLoc()))
01624 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
01625 &#32;&#32;}
01626 
01627 &#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">unsigned</emphasis>&#32;I&#32;=&#32;0,&#32;N&#32;=&#32;TL.getNumProtocols();&#32;I&#32;!=&#32;N;&#32;++I)&#32;{
01628 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(Visit(<link linkend="_namespaceclang_1_1cxcursor_1ac238ecc9f974783b9d0c2129f5aa675f">MakeCursorObjCProtocolRef</link>(TL.getProtocol(I),&#32;TL.getProtocolLoc(I),
01629 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;TU)))
01630 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
01631 &#32;&#32;}
01632 
01633 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
01634 }
01635 
01636 <emphasis role="keywordtype">bool</emphasis>&#32;CursorVisitor::VisitObjCObjectPointerTypeLoc(ObjCObjectPointerTypeLoc&#32;TL)&#32;{
01637 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;Visit(TL.getPointeeLoc());
01638 }
01639 
01640 <emphasis role="keywordtype">bool</emphasis>&#32;CursorVisitor::VisitParenTypeLoc(ParenTypeLoc&#32;TL)&#32;{
01641 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;Visit(TL.getInnerLoc());
01642 }
01643 
01644 <emphasis role="keywordtype">bool</emphasis>&#32;CursorVisitor::VisitMacroQualifiedTypeLoc(MacroQualifiedTypeLoc&#32;TL)&#32;{
01645 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;Visit(TL.getInnerLoc());
01646 }
01647 
01648 <emphasis role="keywordtype">bool</emphasis>&#32;CursorVisitor::VisitPointerTypeLoc(PointerTypeLoc&#32;TL)&#32;{
01649 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;Visit(TL.getPointeeLoc());
01650 }
01651 
01652 <emphasis role="keywordtype">bool</emphasis>&#32;CursorVisitor::VisitBlockPointerTypeLoc(BlockPointerTypeLoc&#32;TL)&#32;{
01653 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;Visit(TL.getPointeeLoc());
01654 }
01655 
01656 <emphasis role="keywordtype">bool</emphasis>&#32;CursorVisitor::VisitMemberPointerTypeLoc(MemberPointerTypeLoc&#32;TL)&#32;{
01657 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;Visit(TL.getPointeeLoc());
01658 }
01659 
01660 <emphasis role="keywordtype">bool</emphasis>&#32;CursorVisitor::VisitLValueReferenceTypeLoc(LValueReferenceTypeLoc&#32;TL)&#32;{
01661 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;Visit(TL.getPointeeLoc());
01662 }
01663 
01664 <emphasis role="keywordtype">bool</emphasis>&#32;CursorVisitor::VisitRValueReferenceTypeLoc(RValueReferenceTypeLoc&#32;TL)&#32;{
01665 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;Visit(TL.getPointeeLoc());
01666 }
01667 
01668 <emphasis role="keywordtype">bool</emphasis>&#32;CursorVisitor::VisitAttributedTypeLoc(AttributedTypeLoc&#32;TL)&#32;{
01669 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;Visit(TL.getModifiedLoc());
01670 }
01671 
<anchor xml:id="__c_index_8cpp_source_1l01672"/><link linkend="_classclang_1_1cxcursor_1_1_cursor_visitor_1af8da0d143e5bf0dd9e597f6584ec605b">01672</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classclang_1_1cxcursor_1_1_cursor_visitor_1af8da0d143e5bf0dd9e597f6584ec605b">CursorVisitor::VisitFunctionTypeLoc</link>(FunctionTypeLoc&#32;TL,
01673 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;SkipResultType)&#32;{
01674 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!SkipResultType&#32;&amp;&amp;&#32;Visit(TL.getReturnLoc()))
01675 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
01676 
01677 &#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">unsigned</emphasis>&#32;I&#32;=&#32;0,&#32;N&#32;=&#32;TL.getNumParams();&#32;I&#32;!=&#32;N;&#32;++I)
01678 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(Decl&#32;*D&#32;=&#32;TL.getParam(I))
01679 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(Visit(<link linkend="_namespaceclang_1_1cxcursor_1ab61ec2059175833672e8e78a376bb218">MakeCXCursor</link>(D,&#32;TU,&#32;RegionOfInterest)))
01680 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
01681 
01682 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
01683 }
01684 
<anchor xml:id="__c_index_8cpp_source_1l01685"/><link linkend="_classclang_1_1cxcursor_1_1_cursor_visitor_1a15e1e593c973fb6611457f4a624d972c">01685</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classclang_1_1cxcursor_1_1_cursor_visitor_1a15e1e593c973fb6611457f4a624d972c">CursorVisitor::VisitArrayTypeLoc</link>(ArrayTypeLoc&#32;TL)&#32;{
01686 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(Visit(TL.getElementLoc()))
01687 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
01688 
01689 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(Expr&#32;*Size&#32;=&#32;TL.getSizeExpr())
01690 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;Visit(<link linkend="_namespaceclang_1_1cxcursor_1ab61ec2059175833672e8e78a376bb218">MakeCXCursor</link>(Size,&#32;StmtParent,&#32;TU,&#32;RegionOfInterest));
01691 
01692 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
01693 }
01694 
01695 <emphasis role="keywordtype">bool</emphasis>&#32;CursorVisitor::VisitDecayedTypeLoc(DecayedTypeLoc&#32;TL)&#32;{
01696 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;Visit(TL.getOriginalLoc());
01697 }
01698 
01699 <emphasis role="keywordtype">bool</emphasis>&#32;CursorVisitor::VisitAdjustedTypeLoc(AdjustedTypeLoc&#32;TL)&#32;{
01700 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;Visit(TL.getOriginalLoc());
01701 }
01702 
01703 <emphasis role="keywordtype">bool</emphasis>&#32;CursorVisitor::VisitDeducedTemplateSpecializationTypeLoc(
01704 &#32;&#32;&#32;&#32;DeducedTemplateSpecializationTypeLoc&#32;TL)&#32;{
01705 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(VisitTemplateName(TL.getTypePtr()-&gt;getTemplateName(),
01706 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;TL.getTemplateNameLoc()))
01707 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
01708 
01709 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
01710 }
01711 
01712 <emphasis role="keywordtype">bool</emphasis>&#32;CursorVisitor::VisitTemplateSpecializationTypeLoc(
01713 &#32;&#32;&#32;&#32;TemplateSpecializationTypeLoc&#32;TL)&#32;{
01714 &#32;&#32;<emphasis role="comment">//&#32;Visit&#32;the&#32;template&#32;name.</emphasis>
01715 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(VisitTemplateName(TL.getTypePtr()-&gt;getTemplateName(),
01716 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;TL.getTemplateNameLoc()))
01717 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
01718 
01719 &#32;&#32;<emphasis role="comment">//&#32;Visit&#32;the&#32;template&#32;arguments.</emphasis>
01720 &#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">unsigned</emphasis>&#32;I&#32;=&#32;0,&#32;N&#32;=&#32;TL.getNumArgs();&#32;I&#32;!=&#32;N;&#32;++I)
01721 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(VisitTemplateArgumentLoc(TL.getArgLoc(I)))
01722 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
01723 
01724 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
01725 }
01726 
01727 <emphasis role="keywordtype">bool</emphasis>&#32;CursorVisitor::VisitTypeOfExprTypeLoc(TypeOfExprTypeLoc&#32;TL)&#32;{
01728 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;Visit(<link linkend="_namespaceclang_1_1cxcursor_1ab61ec2059175833672e8e78a376bb218">MakeCXCursor</link>(TL.getUnderlyingExpr(),&#32;StmtParent,&#32;TU));
01729 }
01730 
01731 <emphasis role="keywordtype">bool</emphasis>&#32;CursorVisitor::VisitTypeOfTypeLoc(TypeOfTypeLoc&#32;TL)&#32;{
01732 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(TypeSourceInfo&#32;*TSInfo&#32;=&#32;TL.getUnderlyingTInfo())
01733 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;Visit(TSInfo-&gt;getTypeLoc());
01734 
01735 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
01736 }
01737 
01738 <emphasis role="keywordtype">bool</emphasis>&#32;CursorVisitor::VisitUnaryTransformTypeLoc(UnaryTransformTypeLoc&#32;TL)&#32;{
01739 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(TypeSourceInfo&#32;*TSInfo&#32;=&#32;TL.getUnderlyingTInfo())
01740 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;Visit(TSInfo-&gt;getTypeLoc());
01741 
01742 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
01743 }
01744 
01745 <emphasis role="keywordtype">bool</emphasis>&#32;CursorVisitor::VisitDependentNameTypeLoc(DependentNameTypeLoc&#32;TL)&#32;{
01746 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;VisitNestedNameSpecifierLoc(TL.getQualifierLoc());
01747 }
01748 
01749 <emphasis role="keywordtype">bool</emphasis>&#32;CursorVisitor::VisitDependentTemplateSpecializationTypeLoc(
01750 &#32;&#32;&#32;&#32;DependentTemplateSpecializationTypeLoc&#32;TL)&#32;{
01751 &#32;&#32;<emphasis role="comment">//&#32;Visit&#32;the&#32;nested-name-specifier,&#32;if&#32;there&#32;is&#32;one.</emphasis>
01752 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(TL.getQualifierLoc()&#32;&amp;&amp;&#32;VisitNestedNameSpecifierLoc(TL.getQualifierLoc()))
01753 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
01754 
01755 &#32;&#32;<emphasis role="comment">//&#32;Visit&#32;the&#32;template&#32;arguments.</emphasis>
01756 &#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">unsigned</emphasis>&#32;I&#32;=&#32;0,&#32;N&#32;=&#32;TL.getNumArgs();&#32;I&#32;!=&#32;N;&#32;++I)
01757 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(VisitTemplateArgumentLoc(TL.getArgLoc(I)))
01758 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
01759 
01760 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
01761 }
01762 
01763 <emphasis role="keywordtype">bool</emphasis>&#32;CursorVisitor::VisitElaboratedTypeLoc(ElaboratedTypeLoc&#32;TL)&#32;{
01764 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(VisitNestedNameSpecifierLoc(TL.getQualifierLoc()))
01765 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
01766 
01767 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;Visit(TL.getNamedTypeLoc());
01768 }
01769 
01770 <emphasis role="keywordtype">bool</emphasis>&#32;CursorVisitor::VisitPackExpansionTypeLoc(PackExpansionTypeLoc&#32;TL)&#32;{
01771 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;Visit(TL.getPatternLoc());
01772 }
01773 
01774 <emphasis role="keywordtype">bool</emphasis>&#32;CursorVisitor::VisitDecltypeTypeLoc(DecltypeTypeLoc&#32;TL)&#32;{
01775 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(Expr&#32;*E&#32;=&#32;TL.getUnderlyingExpr())
01776 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;Visit(<link linkend="_namespaceclang_1_1cxcursor_1ab61ec2059175833672e8e78a376bb218">MakeCXCursor</link>(E,&#32;StmtParent,&#32;TU));
01777 
01778 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
01779 }
01780 
01781 <emphasis role="keywordtype">bool</emphasis>&#32;CursorVisitor::VisitInjectedClassNameTypeLoc(InjectedClassNameTypeLoc&#32;TL)&#32;{
01782 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;Visit(<link linkend="_namespaceclang_1_1cxcursor_1a3534c264c1431ec3d09c975fcafa263d">MakeCursorTypeRef</link>(TL.getDecl(),&#32;TL.getNameLoc(),&#32;TU));
01783 }
01784 
01785 <emphasis role="keywordtype">bool</emphasis>&#32;CursorVisitor::VisitAtomicTypeLoc(AtomicTypeLoc&#32;TL)&#32;{
01786 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;Visit(TL.getValueLoc());
01787 }
01788 
01789 <emphasis role="keywordtype">bool</emphasis>&#32;CursorVisitor::VisitPipeTypeLoc(PipeTypeLoc&#32;TL)&#32;{
01790 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;Visit(TL.getValueLoc());
01791 }
01792 
<anchor xml:id="__c_index_8cpp_source_1l01793"/><link linkend="__c_index_8cpp_1a1fe77f9f91086eed81d3ce9a8eb220cc">01793</link> <emphasis role="preprocessor">#define&#32;DEFAULT_TYPELOC_IMPL(CLASS,&#32;PARENT)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
01794 <emphasis role="preprocessor">&#32;&#32;bool&#32;CursorVisitor::Visit##CLASS##TypeLoc(CLASS##TypeLoc&#32;TL)&#32;{&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
01795 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;return&#32;Visit##PARENT##Loc(TL);&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
01796 <emphasis role="preprocessor">&#32;&#32;}</emphasis>
01797 
01798 <link linkend="__c_index_8cpp_1a1fe77f9f91086eed81d3ce9a8eb220cc">DEFAULT_TYPELOC_IMPL</link>(Complex,&#32;Type)
01799 <link linkend="__c_index_8cpp_1a1fe77f9f91086eed81d3ce9a8eb220cc">DEFAULT_TYPELOC_IMPL</link>(ConstantArray,&#32;ArrayType)
01800 <link linkend="__c_index_8cpp_1a1fe77f9f91086eed81d3ce9a8eb220cc">DEFAULT_TYPELOC_IMPL</link>(IncompleteArray,&#32;ArrayType)
01801 <link linkend="__c_index_8cpp_1a1fe77f9f91086eed81d3ce9a8eb220cc">DEFAULT_TYPELOC_IMPL</link>(VariableArray,&#32;ArrayType)
01802 <link linkend="__c_index_8cpp_1a1fe77f9f91086eed81d3ce9a8eb220cc">DEFAULT_TYPELOC_IMPL</link>(DependentSizedArray,&#32;ArrayType)
01803 <link linkend="__c_index_8cpp_1a1fe77f9f91086eed81d3ce9a8eb220cc">DEFAULT_TYPELOC_IMPL</link>(DependentAddressSpace,&#32;Type)
01804 <link linkend="__c_index_8cpp_1a1fe77f9f91086eed81d3ce9a8eb220cc">DEFAULT_TYPELOC_IMPL</link>(DependentVector,&#32;Type)
01805 <link linkend="__c_index_8cpp_1a1fe77f9f91086eed81d3ce9a8eb220cc">DEFAULT_TYPELOC_IMPL</link>(DependentSizedExtVector,&#32;Type)
01806 <link linkend="__c_index_8cpp_1a1fe77f9f91086eed81d3ce9a8eb220cc">DEFAULT_TYPELOC_IMPL</link>(Vector,&#32;Type)
01807 <link linkend="__c_index_8cpp_1a1fe77f9f91086eed81d3ce9a8eb220cc">DEFAULT_TYPELOC_IMPL</link>(ExtVector,&#32;VectorType)
01808 <link linkend="__c_index_8cpp_1a1fe77f9f91086eed81d3ce9a8eb220cc">DEFAULT_TYPELOC_IMPL</link>(ConstantMatrix,&#32;MatrixType)
01809 <link linkend="__c_index_8cpp_1a1fe77f9f91086eed81d3ce9a8eb220cc">DEFAULT_TYPELOC_IMPL</link>(DependentSizedMatrix,&#32;MatrixType)
01810 <link linkend="__c_index_8cpp_1a1fe77f9f91086eed81d3ce9a8eb220cc">DEFAULT_TYPELOC_IMPL</link>(FunctionProto,&#32;FunctionType)
01811 <link linkend="__c_index_8cpp_1a1fe77f9f91086eed81d3ce9a8eb220cc">DEFAULT_TYPELOC_IMPL</link>(FunctionNoProto,&#32;FunctionType)
01812 <link linkend="__c_index_8cpp_1a1fe77f9f91086eed81d3ce9a8eb220cc">DEFAULT_TYPELOC_IMPL</link>(Record,&#32;TagType)
01813 <link linkend="__c_index_8cpp_1a1fe77f9f91086eed81d3ce9a8eb220cc">DEFAULT_TYPELOC_IMPL</link>(Enum,&#32;TagType)
01814 <link linkend="__c_index_8cpp_1a1fe77f9f91086eed81d3ce9a8eb220cc">DEFAULT_TYPELOC_IMPL</link>(SubstTemplateTypeParm,&#32;Type)
01815 <link linkend="__c_index_8cpp_1a1fe77f9f91086eed81d3ce9a8eb220cc">DEFAULT_TYPELOC_IMPL</link>(SubstTemplateTypeParmPack,&#32;Type)
01816 <link linkend="__c_index_8cpp_1a1fe77f9f91086eed81d3ce9a8eb220cc">DEFAULT_TYPELOC_IMPL</link>(Auto,&#32;Type)
01817 <link linkend="__c_index_8cpp_1a1fe77f9f91086eed81d3ce9a8eb220cc">DEFAULT_TYPELOC_IMPL</link>(ExtInt,&#32;Type)
01818 <link linkend="__c_index_8cpp_1a1fe77f9f91086eed81d3ce9a8eb220cc">DEFAULT_TYPELOC_IMPL</link>(DependentExtInt,&#32;Type)
01819 
<anchor xml:id="__c_index_8cpp_source_1l01820"/><link linkend="_classclang_1_1cxcursor_1_1_cursor_visitor_1addf32753eb7872041c23c5e5652d9907">01820</link> bool&#32;<link linkend="_classclang_1_1cxcursor_1_1_cursor_visitor">CursorVisitor</link>::VisitCXXRecordDecl(CXXRecordDecl&#32;*D)&#32;{
01821 &#32;&#32;<emphasis role="comment">//&#32;Visit&#32;the&#32;nested-name-specifier,&#32;if&#32;present.</emphasis>
01822 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(NestedNameSpecifierLoc&#32;QualifierLoc&#32;=&#32;D-&gt;getQualifierLoc())
01823 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(VisitNestedNameSpecifierLoc(QualifierLoc))
01824 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
01825 
01826 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(D-&gt;isCompleteDefinition())&#32;{
01827 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;&amp;I&#32;:&#32;D-&gt;bases())&#32;{
01828 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(Visit(<link linkend="_namespaceclang_1_1cxcursor_1a13176d36398baf45f34e16a34ec04793">cxcursor::MakeCursorCXXBaseSpecifier</link>(&amp;I,&#32;TU)))
01829 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
01830 &#32;&#32;&#32;&#32;}
01831 &#32;&#32;}
01832 
01833 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;VisitTagDecl(D);
01834 }
01835 
<anchor xml:id="__c_index_8cpp_source_1l01836"/><link linkend="_classclang_1_1cxcursor_1_1_cursor_visitor_1a3e41de558520b72762489e950d35d0b8">01836</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classclang_1_1cxcursor_1_1_cursor_visitor_1a3e41de558520b72762489e950d35d0b8">CursorVisitor::VisitAttributes</link>(Decl&#32;*D)&#32;{
01837 &#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;*I&#32;:&#32;D-&gt;attrs())
01838 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;((TU-&gt;ParsingOptions&#32;&amp;&#32;CXTranslationUnit_VisitImplicitAttributes&#32;||
01839 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;!I-&gt;isImplicit())&#32;&amp;&amp;
01840 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Visit(<link linkend="_namespaceclang_1_1cxcursor_1ab61ec2059175833672e8e78a376bb218">MakeCXCursor</link>(I,&#32;D,&#32;TU)))
01841 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
01842 
01843 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
01844 }
01845 
01846 <emphasis role="comment">//===----------------------------------------------------------------------===//</emphasis>
01847 <emphasis role="comment">//&#32;Data-recursive&#32;visitor&#32;methods.</emphasis>
01848 <emphasis role="comment">//===----------------------------------------------------------------------===//</emphasis>
01849 
01850 <emphasis role="keyword">namespace&#32;</emphasis>{
<anchor xml:id="__c_index_8cpp_source_1l01851"/><link linkend="__c_index_8cpp_1a0d1aa3cc2a5472f2b0a2b62616ca9292">01851</link> <emphasis role="preprocessor">#define&#32;DEF_JOB(NAME,&#32;DATA,&#32;KIND)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
01852 <emphasis role="preprocessor">&#32;&#32;class&#32;NAME&#32;:&#32;public&#32;VisitorJob&#32;{&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
01853 <emphasis role="preprocessor">&#32;&#32;public:&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
01854 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;NAME(const&#32;DATA&#32;*d,&#32;CXCursor&#32;parent)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
01855 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;VisitorJob(parent,&#32;VisitorJob::KIND,&#32;d)&#32;{}&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
01856 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;static&#32;bool&#32;classof(const&#32;VisitorJob&#32;*VJ)&#32;{&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
01857 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;return&#32;VJ-&gt;getKind()&#32;==&#32;KIND;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
01858 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;}&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
01859 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;const&#32;DATA&#32;*get()&#32;const&#32;{&#32;return&#32;static_cast&lt;const&#32;DATA&#32;*&gt;(data[0]);&#32;}&#32;&#32;&#32;&#32;&#32;\</emphasis>
01860 <emphasis role="preprocessor">&#32;&#32;};</emphasis>
01861 
01862 <link linkend="__c_index_8cpp_1a0d1aa3cc2a5472f2b0a2b62616ca9292">DEF_JOB</link>(StmtVisit,&#32;Stmt,&#32;StmtVisitKind)
01863 <link linkend="__c_index_8cpp_1a0d1aa3cc2a5472f2b0a2b62616ca9292">DEF_JOB</link>(MemberExprParts,&#32;MemberExpr,&#32;MemberExprPartsKind)
01864 <link linkend="__c_index_8cpp_1a0d1aa3cc2a5472f2b0a2b62616ca9292">DEF_JOB</link>(DeclRefExprParts,&#32;DeclRefExpr,&#32;DeclRefExprPartsKind)
01865 <link linkend="__c_index_8cpp_1a0d1aa3cc2a5472f2b0a2b62616ca9292">DEF_JOB</link>(OverloadExprParts,&#32;OverloadExpr,&#32;OverloadExprPartsKind)
01866 <link linkend="__c_index_8cpp_1a0d1aa3cc2a5472f2b0a2b62616ca9292">DEF_JOB</link>(SizeOfPackExprParts,&#32;SizeOfPackExpr,&#32;SizeOfPackExprPartsKind)
01867 <link linkend="__c_index_8cpp_1a0d1aa3cc2a5472f2b0a2b62616ca9292">DEF_JOB</link>(LambdaExprParts,&#32;LambdaExpr,&#32;LambdaExprPartsKind)
01868 <link linkend="__c_index_8cpp_1a0d1aa3cc2a5472f2b0a2b62616ca9292">DEF_JOB</link>(PostChildrenVisit,&#32;<emphasis role="keywordtype">void</emphasis>,&#32;PostChildrenVisitKind)
01869 <emphasis role="preprocessor">#undef&#32;DEF_JOB</emphasis>
01870 
01871 <emphasis role="keyword">class&#32;</emphasis>ExplicitTemplateArgsVisit&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;<link linkend="_classclang_1_1cxcursor_1_1_visitor_job">VisitorJob</link>&#32;{
01872 <emphasis role="keyword">public</emphasis>:
01873 &#32;&#32;ExplicitTemplateArgsVisit(<emphasis role="keyword">const</emphasis>&#32;TemplateArgumentLoc&#32;*Begin,
01874 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;TemplateArgumentLoc&#32;*End,&#32;CXCursor&#32;parent)
01875 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;<link linkend="_classclang_1_1cxcursor_1_1_visitor_job">VisitorJob</link>(parent,&#32;<link linkend="_classclang_1_1cxcursor_1_1_visitor_job_1a358d276241e4b5c9c75c3b0c66b0bf92a11d9fe5081d3b5eb885fea33416255c6">VisitorJob::ExplicitTemplateArgsVisitKind</link>,&#32;Begin,
01876 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;End)&#32;{}
01877 &#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;classof(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classclang_1_1cxcursor_1_1_visitor_job">VisitorJob</link>&#32;*VJ)&#32;{
01878 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;VJ-&gt;<link linkend="_classclang_1_1cxcursor_1_1_visitor_job_1aee9fca3379d1821e847ce816fef67219">getKind</link>()&#32;==&#32;ExplicitTemplateArgsVisitKind;
01879 &#32;&#32;}
01880 &#32;&#32;<emphasis role="keyword">const</emphasis>&#32;TemplateArgumentLoc&#32;*begin()<emphasis role="keyword">&#32;const&#32;</emphasis>{
01881 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keyword">const&#32;</emphasis>TemplateArgumentLoc&#32;*<emphasis role="keyword">&gt;</emphasis>(data[0]);
01882 &#32;&#32;}
01883 &#32;&#32;<emphasis role="keyword">const</emphasis>&#32;TemplateArgumentLoc&#32;*end()&#32;{
01884 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keyword">const&#32;</emphasis>TemplateArgumentLoc&#32;*<emphasis role="keyword">&gt;</emphasis>(data[1]);
01885 &#32;&#32;}
01886 };
01887 <emphasis role="keyword">class&#32;</emphasis>DeclVisit&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;<link linkend="_classclang_1_1cxcursor_1_1_visitor_job">VisitorJob</link>&#32;{
01888 <emphasis role="keyword">public</emphasis>:
01889 &#32;&#32;DeclVisit(<emphasis role="keyword">const</emphasis>&#32;Decl&#32;*D,&#32;CXCursor&#32;parent,&#32;<emphasis role="keywordtype">bool</emphasis>&#32;isFirst)
01890 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;<link linkend="_classclang_1_1cxcursor_1_1_visitor_job">VisitorJob</link>(parent,&#32;<link linkend="_classclang_1_1cxcursor_1_1_visitor_job">VisitorJob</link>::DeclVisitKind,&#32;D,
01891 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;isFirst&#32;?&#32;(void&#32;*)1&#32;:&#32;(void&#32;*)nullptr)&#32;{}
01892 &#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;classof(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classclang_1_1cxcursor_1_1_visitor_job">VisitorJob</link>&#32;*VJ)&#32;{
01893 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;VJ-&gt;<link linkend="_classclang_1_1cxcursor_1_1_visitor_job_1aee9fca3379d1821e847ce816fef67219">getKind</link>()&#32;==&#32;DeclVisitKind;
01894 &#32;&#32;}
01895 &#32;&#32;<emphasis role="keyword">const</emphasis>&#32;Decl&#32;*<link linkend="_namespacestartfile_1af8790d592af0bdf089efd317cbd70e2e">get</link>()<emphasis role="keyword">&#32;const&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keyword">const&#32;</emphasis>Decl&#32;*<emphasis role="keyword">&gt;</emphasis>(data[0]);&#32;}
01896 &#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;isFirst()<emphasis role="keyword">&#32;const&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;data[1]&#32;!=&#32;<emphasis role="keyword">nullptr</emphasis>;&#32;}
01897 };
01898 <emphasis role="keyword">class&#32;</emphasis>TypeLocVisit&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;<link linkend="_classclang_1_1cxcursor_1_1_visitor_job">VisitorJob</link>&#32;{
01899 <emphasis role="keyword">public</emphasis>:
01900 &#32;&#32;TypeLocVisit(TypeLoc&#32;tl,&#32;CXCursor&#32;parent)
01901 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;<link linkend="_classclang_1_1cxcursor_1_1_visitor_job">VisitorJob</link>(parent,&#32;<link linkend="_classclang_1_1cxcursor_1_1_visitor_job">VisitorJob</link>::TypeLocVisitKind,
01902 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;tl.getType().getAsOpaquePtr(),&#32;tl.getOpaqueData())&#32;{}
01903 
01904 &#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;classof(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classclang_1_1cxcursor_1_1_visitor_job">VisitorJob</link>&#32;*VJ)&#32;{
01905 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;VJ-&gt;<link linkend="_classclang_1_1cxcursor_1_1_visitor_job_1aee9fca3379d1821e847ce816fef67219">getKind</link>()&#32;==&#32;TypeLocVisitKind;
01906 &#32;&#32;}
01907 
01908 &#32;&#32;TypeLoc&#32;<link linkend="_namespacestartfile_1af8790d592af0bdf089efd317cbd70e2e">get</link>()<emphasis role="keyword">&#32;const&#32;</emphasis>{
01909 &#32;&#32;&#32;&#32;QualType&#32;T&#32;=&#32;QualType::getFromOpaquePtr(data[0]);
01910 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;TypeLoc(T,&#32;<emphasis role="keyword">const_cast&lt;</emphasis><emphasis role="keywordtype">void</emphasis>&#32;*<emphasis role="keyword">&gt;</emphasis>(data[1]));
01911 &#32;&#32;}
01912 };
01913 
01914 <emphasis role="keyword">class&#32;</emphasis>LabelRefVisit&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;<link linkend="_classclang_1_1cxcursor_1_1_visitor_job">VisitorJob</link>&#32;{
01915 <emphasis role="keyword">public</emphasis>:
01916 &#32;&#32;LabelRefVisit(LabelDecl&#32;*LD,&#32;SourceLocation&#32;labelLoc,&#32;CXCursor&#32;parent)
01917 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;<link linkend="_classclang_1_1cxcursor_1_1_visitor_job">VisitorJob</link>(parent,&#32;<link linkend="_classclang_1_1cxcursor_1_1_visitor_job">VisitorJob</link>::LabelRefVisitKind,&#32;LD,
01918 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;labelLoc.getPtrEncoding())&#32;{}
01919 
01920 &#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;classof(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classclang_1_1cxcursor_1_1_visitor_job">VisitorJob</link>&#32;*VJ)&#32;{
01921 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;VJ-&gt;<link linkend="_classclang_1_1cxcursor_1_1_visitor_job_1aee9fca3379d1821e847ce816fef67219">getKind</link>()&#32;==&#32;<link linkend="_classclang_1_1cxcursor_1_1_visitor_job_1a358d276241e4b5c9c75c3b0c66b0bf92aa00295bf354768aeca538fa4dc91e161">VisitorJob::LabelRefVisitKind</link>;
01922 &#32;&#32;}
01923 &#32;&#32;<emphasis role="keyword">const</emphasis>&#32;LabelDecl&#32;*<link linkend="_namespacestartfile_1af8790d592af0bdf089efd317cbd70e2e">get</link>()<emphasis role="keyword">&#32;const&#32;</emphasis>{
01924 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keyword">const&#32;</emphasis>LabelDecl&#32;*<emphasis role="keyword">&gt;</emphasis>(data[0]);
01925 &#32;&#32;}
01926 &#32;&#32;SourceLocation&#32;getLoc()<emphasis role="keyword">&#32;const&#32;</emphasis>{
01927 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;SourceLocation::getFromPtrEncoding(data[1]);
01928 &#32;&#32;}
01929 };
01930 
01931 <emphasis role="keyword">class&#32;</emphasis>NestedNameSpecifierLocVisit&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;<link linkend="_classclang_1_1cxcursor_1_1_visitor_job">VisitorJob</link>&#32;{
01932 <emphasis role="keyword">public</emphasis>:
01933 &#32;&#32;NestedNameSpecifierLocVisit(NestedNameSpecifierLoc&#32;Qualifier,&#32;CXCursor&#32;parent)
01934 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;<link linkend="_classclang_1_1cxcursor_1_1_visitor_job">VisitorJob</link>(parent,&#32;<link linkend="_classclang_1_1cxcursor_1_1_visitor_job">VisitorJob</link>::NestedNameSpecifierLocVisitKind,
01935 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Qualifier.getNestedNameSpecifier(),
01936 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Qualifier.getOpaqueData())&#32;{}
01937 
01938 &#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;classof(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classclang_1_1cxcursor_1_1_visitor_job">VisitorJob</link>&#32;*VJ)&#32;{
01939 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;VJ-&gt;<link linkend="_classclang_1_1cxcursor_1_1_visitor_job_1aee9fca3379d1821e847ce816fef67219">getKind</link>()&#32;==&#32;<link linkend="_classclang_1_1cxcursor_1_1_visitor_job_1a358d276241e4b5c9c75c3b0c66b0bf92a4c1fcd74e3dd7d6c199bf1cbbee68cd1">VisitorJob::NestedNameSpecifierLocVisitKind</link>;
01940 &#32;&#32;}
01941 
01942 &#32;&#32;NestedNameSpecifierLoc&#32;<link linkend="_namespacestartfile_1af8790d592af0bdf089efd317cbd70e2e">get</link>()<emphasis role="keyword">&#32;const&#32;</emphasis>{
01943 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;NestedNameSpecifierLoc(
01944 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const_cast&lt;</emphasis>NestedNameSpecifier&#32;*<emphasis role="keyword">&gt;</emphasis>(
01945 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keyword">const&#32;</emphasis>NestedNameSpecifier&#32;*<emphasis role="keyword">&gt;</emphasis>(data[0])),
01946 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const_cast&lt;</emphasis><emphasis role="keywordtype">void</emphasis>&#32;*<emphasis role="keyword">&gt;</emphasis>(data[1]));
01947 &#32;&#32;}
01948 };
01949 
01950 <emphasis role="keyword">class&#32;</emphasis>DeclarationNameInfoVisit&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;<link linkend="_classclang_1_1cxcursor_1_1_visitor_job">VisitorJob</link>&#32;{
01951 <emphasis role="keyword">public</emphasis>:
01952 &#32;&#32;DeclarationNameInfoVisit(<emphasis role="keyword">const</emphasis>&#32;Stmt&#32;*S,&#32;CXCursor&#32;parent)
01953 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;<link linkend="_classclang_1_1cxcursor_1_1_visitor_job">VisitorJob</link>(parent,&#32;<link linkend="_classclang_1_1cxcursor_1_1_visitor_job">VisitorJob</link>::DeclarationNameInfoVisitKind,&#32;S)&#32;{}
01954 &#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;classof(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classclang_1_1cxcursor_1_1_visitor_job">VisitorJob</link>&#32;*VJ)&#32;{
01955 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;VJ-&gt;<link linkend="_classclang_1_1cxcursor_1_1_visitor_job_1aee9fca3379d1821e847ce816fef67219">getKind</link>()&#32;==&#32;<link linkend="_classclang_1_1cxcursor_1_1_visitor_job_1a358d276241e4b5c9c75c3b0c66b0bf92af50cf21f078e11e9193efa61e3e27956">VisitorJob::DeclarationNameInfoVisitKind</link>;
01956 &#32;&#32;}
01957 &#32;&#32;DeclarationNameInfo&#32;<link linkend="_namespacestartfile_1af8790d592af0bdf089efd317cbd70e2e">get</link>()<emphasis role="keyword">&#32;const&#32;</emphasis>{
01958 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;Stmt&#32;*S&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keyword">const&#32;</emphasis>Stmt&#32;*<emphasis role="keyword">&gt;</emphasis>(data[0]);
01959 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(S-&gt;getStmtClass())&#32;{
01960 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">default</emphasis>:
01961 &#32;&#32;&#32;&#32;&#32;&#32;llvm_unreachable(<emphasis role="stringliteral">&quot;Unhandled&#32;Stmt&quot;</emphasis>);
01962 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;clang::Stmt::MSDependentExistsStmtClass:
01963 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;cast&lt;MSDependentExistsStmt&gt;(S)-&gt;getNameInfo();
01964 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;Stmt::CXXDependentScopeMemberExprClass:
01965 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;cast&lt;CXXDependentScopeMemberExpr&gt;(S)-&gt;getMemberNameInfo();
01966 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;Stmt::DependentScopeDeclRefExprClass:
01967 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;cast&lt;DependentScopeDeclRefExpr&gt;(S)-&gt;getNameInfo();
01968 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;Stmt::OMPCriticalDirectiveClass:
01969 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;cast&lt;OMPCriticalDirective&gt;(S)-&gt;getDirectiveName();
01970 &#32;&#32;&#32;&#32;}
01971 &#32;&#32;}
01972 };
01973 <emphasis role="keyword">class&#32;</emphasis>MemberRefVisit&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;<link linkend="_classclang_1_1cxcursor_1_1_visitor_job">VisitorJob</link>&#32;{
01974 <emphasis role="keyword">public</emphasis>:
01975 &#32;&#32;MemberRefVisit(<emphasis role="keyword">const</emphasis>&#32;FieldDecl&#32;*D,&#32;SourceLocation&#32;L,&#32;CXCursor&#32;parent)
01976 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;<link linkend="_classclang_1_1cxcursor_1_1_visitor_job">VisitorJob</link>(parent,&#32;<link linkend="_classclang_1_1cxcursor_1_1_visitor_job">VisitorJob</link>::MemberRefVisitKind,&#32;D,
01977 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;L.getPtrEncoding())&#32;{}
01978 &#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;classof(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classclang_1_1cxcursor_1_1_visitor_job">VisitorJob</link>&#32;*VJ)&#32;{
01979 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;VJ-&gt;<link linkend="_classclang_1_1cxcursor_1_1_visitor_job_1aee9fca3379d1821e847ce816fef67219">getKind</link>()&#32;==&#32;<link linkend="_classclang_1_1cxcursor_1_1_visitor_job_1a358d276241e4b5c9c75c3b0c66b0bf92a46e96453a10977baa1239dde989c9e1f">VisitorJob::MemberRefVisitKind</link>;
01980 &#32;&#32;}
01981 &#32;&#32;<emphasis role="keyword">const</emphasis>&#32;FieldDecl&#32;*<link linkend="_namespacestartfile_1af8790d592af0bdf089efd317cbd70e2e">get</link>()<emphasis role="keyword">&#32;const&#32;</emphasis>{
01982 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keyword">const&#32;</emphasis>FieldDecl&#32;*<emphasis role="keyword">&gt;</emphasis>(data[0]);
01983 &#32;&#32;}
01984 &#32;&#32;SourceLocation&#32;getLoc()<emphasis role="keyword">&#32;const&#32;</emphasis>{
01985 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;SourceLocation::getFromRawEncoding((<emphasis role="keywordtype">unsigned</emphasis>)(uintptr_t)data[1]);
01986 &#32;&#32;}
01987 };
01988 <emphasis role="keyword">class&#32;</emphasis>EnqueueVisitor&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;ConstStmtVisitor&lt;EnqueueVisitor,&#32;void&gt;&#32;{
01989 &#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keyword">class&#32;</emphasis>OMPClauseEnqueue;
01990 &#32;&#32;<link linkend="_namespaceclang_1_1cxcursor_1aab4e24121016c9d383e539a5938cb528">VisitorWorkList</link>&#32;&amp;WL;
01991 &#32;&#32;CXCursor&#32;Parent;
01992 
01993 <emphasis role="keyword">public</emphasis>:
01994 &#32;&#32;EnqueueVisitor(<link linkend="_namespaceclang_1_1cxcursor_1aab4e24121016c9d383e539a5938cb528">VisitorWorkList</link>&#32;&amp;wl,&#32;CXCursor&#32;parent)
01995 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;WL(wl),&#32;Parent(parent)&#32;{}
01996 
01997 &#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;VisitAddrLabelExpr(<emphasis role="keyword">const</emphasis>&#32;AddrLabelExpr&#32;*E);
01998 &#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;VisitBlockExpr(<emphasis role="keyword">const</emphasis>&#32;BlockExpr&#32;*B);
01999 &#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;VisitCompoundLiteralExpr(<emphasis role="keyword">const</emphasis>&#32;CompoundLiteralExpr&#32;*E);
02000 &#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;VisitCompoundStmt(<emphasis role="keyword">const</emphasis>&#32;CompoundStmt&#32;*S);
02001 &#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;VisitCXXDefaultArgExpr(<emphasis role="keyword">const</emphasis>&#32;CXXDefaultArgExpr&#32;*E)&#32;{&#32;<emphasis role="comment">/*&#32;Do&#32;nothing.&#32;*/</emphasis>
02002 &#32;&#32;}
02003 &#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;VisitMSDependentExistsStmt(<emphasis role="keyword">const</emphasis>&#32;MSDependentExistsStmt&#32;*S);
02004 &#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;VisitCXXDependentScopeMemberExpr(<emphasis role="keyword">const</emphasis>&#32;CXXDependentScopeMemberExpr&#32;*E);
02005 &#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;VisitCXXNewExpr(<emphasis role="keyword">const</emphasis>&#32;CXXNewExpr&#32;*E);
02006 &#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;VisitCXXScalarValueInitExpr(<emphasis role="keyword">const</emphasis>&#32;CXXScalarValueInitExpr&#32;*E);
02007 &#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;VisitCXXOperatorCallExpr(<emphasis role="keyword">const</emphasis>&#32;CXXOperatorCallExpr&#32;*E);
02008 &#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;VisitCXXPseudoDestructorExpr(<emphasis role="keyword">const</emphasis>&#32;CXXPseudoDestructorExpr&#32;*E);
02009 &#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;VisitCXXTemporaryObjectExpr(<emphasis role="keyword">const</emphasis>&#32;CXXTemporaryObjectExpr&#32;*E);
02010 &#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;VisitCXXTypeidExpr(<emphasis role="keyword">const</emphasis>&#32;CXXTypeidExpr&#32;*E);
02011 &#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;VisitCXXUnresolvedConstructExpr(<emphasis role="keyword">const</emphasis>&#32;CXXUnresolvedConstructExpr&#32;*E);
02012 &#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;VisitCXXUuidofExpr(<emphasis role="keyword">const</emphasis>&#32;CXXUuidofExpr&#32;*E);
02013 &#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;VisitCXXCatchStmt(<emphasis role="keyword">const</emphasis>&#32;CXXCatchStmt&#32;*S);
02014 &#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;VisitCXXForRangeStmt(<emphasis role="keyword">const</emphasis>&#32;CXXForRangeStmt&#32;*S);
02015 &#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;VisitDeclRefExpr(<emphasis role="keyword">const</emphasis>&#32;DeclRefExpr&#32;*D);
02016 &#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;VisitDeclStmt(<emphasis role="keyword">const</emphasis>&#32;DeclStmt&#32;*S);
02017 &#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;VisitDependentScopeDeclRefExpr(<emphasis role="keyword">const</emphasis>&#32;DependentScopeDeclRefExpr&#32;*E);
02018 &#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;VisitDesignatedInitExpr(<emphasis role="keyword">const</emphasis>&#32;DesignatedInitExpr&#32;*E);
02019 &#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;VisitExplicitCastExpr(<emphasis role="keyword">const</emphasis>&#32;ExplicitCastExpr&#32;*E);
02020 &#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;VisitForStmt(<emphasis role="keyword">const</emphasis>&#32;ForStmt&#32;*FS);
02021 &#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;VisitGotoStmt(<emphasis role="keyword">const</emphasis>&#32;GotoStmt&#32;*<link linkend="_namespacelibscanbuild_1_1intercept_1a307b2d7b862024676bdb2673d5595776">GS</link>);
02022 &#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;VisitIfStmt(<emphasis role="keyword">const</emphasis>&#32;IfStmt&#32;*If);
02023 &#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;VisitInitListExpr(<emphasis role="keyword">const</emphasis>&#32;InitListExpr&#32;*IE);
02024 &#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;VisitMemberExpr(<emphasis role="keyword">const</emphasis>&#32;MemberExpr&#32;*M);
02025 &#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;VisitOffsetOfExpr(<emphasis role="keyword">const</emphasis>&#32;OffsetOfExpr&#32;*E);
02026 &#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;VisitObjCEncodeExpr(<emphasis role="keyword">const</emphasis>&#32;ObjCEncodeExpr&#32;*E);
02027 &#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;VisitObjCMessageExpr(<emphasis role="keyword">const</emphasis>&#32;ObjCMessageExpr&#32;*M);
02028 &#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;VisitOverloadExpr(<emphasis role="keyword">const</emphasis>&#32;OverloadExpr&#32;*E);
02029 &#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;VisitUnaryExprOrTypeTraitExpr(<emphasis role="keyword">const</emphasis>&#32;UnaryExprOrTypeTraitExpr&#32;*E);
02030 &#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;VisitStmt(<emphasis role="keyword">const</emphasis>&#32;Stmt&#32;*S);
02031 &#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;VisitSwitchStmt(<emphasis role="keyword">const</emphasis>&#32;SwitchStmt&#32;*S);
02032 &#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;VisitWhileStmt(<emphasis role="keyword">const</emphasis>&#32;WhileStmt&#32;*W);
02033 &#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;VisitTypeTraitExpr(<emphasis role="keyword">const</emphasis>&#32;TypeTraitExpr&#32;*E);
02034 &#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;VisitArrayTypeTraitExpr(<emphasis role="keyword">const</emphasis>&#32;ArrayTypeTraitExpr&#32;*E);
02035 &#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;VisitExpressionTraitExpr(<emphasis role="keyword">const</emphasis>&#32;ExpressionTraitExpr&#32;*E);
02036 &#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;VisitUnresolvedMemberExpr(<emphasis role="keyword">const</emphasis>&#32;UnresolvedMemberExpr&#32;*U);
02037 &#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;VisitVAArgExpr(<emphasis role="keyword">const</emphasis>&#32;VAArgExpr&#32;*E);
02038 &#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;VisitSizeOfPackExpr(<emphasis role="keyword">const</emphasis>&#32;SizeOfPackExpr&#32;*E);
02039 &#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;VisitPseudoObjectExpr(<emphasis role="keyword">const</emphasis>&#32;PseudoObjectExpr&#32;*E);
02040 &#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;VisitOpaqueValueExpr(<emphasis role="keyword">const</emphasis>&#32;OpaqueValueExpr&#32;*E);
02041 &#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;VisitLambdaExpr(<emphasis role="keyword">const</emphasis>&#32;LambdaExpr&#32;*E);
02042 &#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;VisitOMPExecutableDirective(<emphasis role="keyword">const</emphasis>&#32;OMPExecutableDirective&#32;*D);
02043 &#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;VisitOMPLoopBasedDirective(<emphasis role="keyword">const</emphasis>&#32;OMPLoopBasedDirective&#32;*D);
02044 &#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;VisitOMPLoopDirective(<emphasis role="keyword">const</emphasis>&#32;OMPLoopDirective&#32;*D);
02045 &#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;VisitOMPParallelDirective(<emphasis role="keyword">const</emphasis>&#32;OMPParallelDirective&#32;*D);
02046 &#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;VisitOMPSimdDirective(<emphasis role="keyword">const</emphasis>&#32;OMPSimdDirective&#32;*D);
02047 &#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;VisitOMPTileDirective(<emphasis role="keyword">const</emphasis>&#32;OMPTileDirective&#32;*D);
02048 &#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;VisitOMPUnrollDirective(<emphasis role="keyword">const</emphasis>&#32;OMPUnrollDirective&#32;*D);
02049 &#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;VisitOMPForDirective(<emphasis role="keyword">const</emphasis>&#32;OMPForDirective&#32;*D);
02050 &#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;VisitOMPForSimdDirective(<emphasis role="keyword">const</emphasis>&#32;OMPForSimdDirective&#32;*D);
02051 &#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;VisitOMPSectionsDirective(<emphasis role="keyword">const</emphasis>&#32;OMPSectionsDirective&#32;*D);
02052 &#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;VisitOMPSectionDirective(<emphasis role="keyword">const</emphasis>&#32;OMPSectionDirective&#32;*D);
02053 &#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;VisitOMPSingleDirective(<emphasis role="keyword">const</emphasis>&#32;OMPSingleDirective&#32;*D);
02054 &#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;VisitOMPMasterDirective(<emphasis role="keyword">const</emphasis>&#32;OMPMasterDirective&#32;*D);
02055 &#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;VisitOMPCriticalDirective(<emphasis role="keyword">const</emphasis>&#32;OMPCriticalDirective&#32;*D);
02056 &#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;VisitOMPParallelForDirective(<emphasis role="keyword">const</emphasis>&#32;OMPParallelForDirective&#32;*D);
02057 &#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;VisitOMPParallelForSimdDirective(<emphasis role="keyword">const</emphasis>&#32;OMPParallelForSimdDirective&#32;*D);
02058 &#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;VisitOMPParallelMasterDirective(<emphasis role="keyword">const</emphasis>&#32;OMPParallelMasterDirective&#32;*D);
02059 &#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;VisitOMPParallelSectionsDirective(<emphasis role="keyword">const</emphasis>&#32;OMPParallelSectionsDirective&#32;*D);
02060 &#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;VisitOMPTaskDirective(<emphasis role="keyword">const</emphasis>&#32;OMPTaskDirective&#32;*D);
02061 &#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;VisitOMPTaskyieldDirective(<emphasis role="keyword">const</emphasis>&#32;OMPTaskyieldDirective&#32;*D);
02062 &#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;VisitOMPBarrierDirective(<emphasis role="keyword">const</emphasis>&#32;OMPBarrierDirective&#32;*D);
02063 &#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;VisitOMPTaskwaitDirective(<emphasis role="keyword">const</emphasis>&#32;OMPTaskwaitDirective&#32;*D);
02064 &#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;VisitOMPTaskgroupDirective(<emphasis role="keyword">const</emphasis>&#32;OMPTaskgroupDirective&#32;*D);
02065 &#32;&#32;<emphasis role="keywordtype">void</emphasis>
02066 &#32;&#32;VisitOMPCancellationPointDirective(<emphasis role="keyword">const</emphasis>&#32;OMPCancellationPointDirective&#32;*D);
02067 &#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;VisitOMPCancelDirective(<emphasis role="keyword">const</emphasis>&#32;OMPCancelDirective&#32;*D);
02068 &#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;VisitOMPFlushDirective(<emphasis role="keyword">const</emphasis>&#32;OMPFlushDirective&#32;*D);
02069 &#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;VisitOMPDepobjDirective(<emphasis role="keyword">const</emphasis>&#32;OMPDepobjDirective&#32;*D);
02070 &#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;VisitOMPScanDirective(<emphasis role="keyword">const</emphasis>&#32;OMPScanDirective&#32;*D);
02071 &#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;VisitOMPOrderedDirective(<emphasis role="keyword">const</emphasis>&#32;OMPOrderedDirective&#32;*D);
02072 &#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;VisitOMPAtomicDirective(<emphasis role="keyword">const</emphasis>&#32;OMPAtomicDirective&#32;*D);
02073 &#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;VisitOMPTargetDirective(<emphasis role="keyword">const</emphasis>&#32;OMPTargetDirective&#32;*D);
02074 &#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;VisitOMPTargetDataDirective(<emphasis role="keyword">const</emphasis>&#32;OMPTargetDataDirective&#32;*D);
02075 &#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;VisitOMPTargetEnterDataDirective(<emphasis role="keyword">const</emphasis>&#32;OMPTargetEnterDataDirective&#32;*D);
02076 &#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;VisitOMPTargetExitDataDirective(<emphasis role="keyword">const</emphasis>&#32;OMPTargetExitDataDirective&#32;*D);
02077 &#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;VisitOMPTargetParallelDirective(<emphasis role="keyword">const</emphasis>&#32;OMPTargetParallelDirective&#32;*D);
02078 &#32;&#32;<emphasis role="keywordtype">void</emphasis>
02079 &#32;&#32;VisitOMPTargetParallelForDirective(<emphasis role="keyword">const</emphasis>&#32;OMPTargetParallelForDirective&#32;*D);
02080 &#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;VisitOMPTeamsDirective(<emphasis role="keyword">const</emphasis>&#32;OMPTeamsDirective&#32;*D);
02081 &#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;VisitOMPTaskLoopDirective(<emphasis role="keyword">const</emphasis>&#32;OMPTaskLoopDirective&#32;*D);
02082 &#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;VisitOMPTaskLoopSimdDirective(<emphasis role="keyword">const</emphasis>&#32;OMPTaskLoopSimdDirective&#32;*D);
02083 &#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;VisitOMPMasterTaskLoopDirective(<emphasis role="keyword">const</emphasis>&#32;OMPMasterTaskLoopDirective&#32;*D);
02084 &#32;&#32;<emphasis role="keywordtype">void</emphasis>
02085 &#32;&#32;VisitOMPMasterTaskLoopSimdDirective(<emphasis role="keyword">const</emphasis>&#32;OMPMasterTaskLoopSimdDirective&#32;*D);
02086 &#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;VisitOMPParallelMasterTaskLoopDirective(
02087 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;OMPParallelMasterTaskLoopDirective&#32;*D);
02088 &#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;VisitOMPParallelMasterTaskLoopSimdDirective(
02089 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;OMPParallelMasterTaskLoopSimdDirective&#32;*D);
02090 &#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;VisitOMPDistributeDirective(<emphasis role="keyword">const</emphasis>&#32;OMPDistributeDirective&#32;*D);
02091 &#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;VisitOMPDistributeParallelForDirective(
02092 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;OMPDistributeParallelForDirective&#32;*D);
02093 &#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;VisitOMPDistributeParallelForSimdDirective(
02094 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;OMPDistributeParallelForSimdDirective&#32;*D);
02095 &#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;VisitOMPDistributeSimdDirective(<emphasis role="keyword">const</emphasis>&#32;OMPDistributeSimdDirective&#32;*D);
02096 &#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;VisitOMPTargetParallelForSimdDirective(
02097 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;OMPTargetParallelForSimdDirective&#32;*D);
02098 &#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;VisitOMPTargetSimdDirective(<emphasis role="keyword">const</emphasis>&#32;OMPTargetSimdDirective&#32;*D);
02099 &#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;VisitOMPTeamsDistributeDirective(<emphasis role="keyword">const</emphasis>&#32;OMPTeamsDistributeDirective&#32;*D);
02100 &#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;VisitOMPTeamsDistributeSimdDirective(
02101 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;OMPTeamsDistributeSimdDirective&#32;*D);
02102 &#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;VisitOMPTeamsDistributeParallelForSimdDirective(
02103 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;OMPTeamsDistributeParallelForSimdDirective&#32;*D);
02104 &#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;VisitOMPTeamsDistributeParallelForDirective(
02105 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;OMPTeamsDistributeParallelForDirective&#32;*D);
02106 &#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;VisitOMPTargetTeamsDirective(<emphasis role="keyword">const</emphasis>&#32;OMPTargetTeamsDirective&#32;*D);
02107 &#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;VisitOMPTargetTeamsDistributeDirective(
02108 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;OMPTargetTeamsDistributeDirective&#32;*D);
02109 &#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;VisitOMPTargetTeamsDistributeParallelForDirective(
02110 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;OMPTargetTeamsDistributeParallelForDirective&#32;*D);
02111 &#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;VisitOMPTargetTeamsDistributeParallelForSimdDirective(
02112 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;OMPTargetTeamsDistributeParallelForSimdDirective&#32;*D);
02113 &#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;VisitOMPTargetTeamsDistributeSimdDirective(
02114 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;OMPTargetTeamsDistributeSimdDirective&#32;*D);
02115 
02116 <emphasis role="keyword">private</emphasis>:
02117 &#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;AddDeclarationNameInfo(<emphasis role="keyword">const</emphasis>&#32;Stmt&#32;*S);
02118 &#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;AddNestedNameSpecifierLoc(NestedNameSpecifierLoc&#32;Qualifier);
02119 &#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;AddExplicitTemplateArgs(<emphasis role="keyword">const</emphasis>&#32;TemplateArgumentLoc&#32;*A,
02120 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;NumTemplateArgs);
02121 &#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;AddMemberRef(<emphasis role="keyword">const</emphasis>&#32;FieldDecl&#32;*D,&#32;SourceLocation&#32;L);
02122 &#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;AddStmt(<emphasis role="keyword">const</emphasis>&#32;Stmt&#32;*S);
02123 &#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;AddDecl(<emphasis role="keyword">const</emphasis>&#32;Decl&#32;*D,&#32;<emphasis role="keywordtype">bool</emphasis>&#32;isFirst&#32;=&#32;<emphasis role="keyword">true</emphasis>);
02124 &#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;AddTypeLoc(TypeSourceInfo&#32;*TI);
02125 &#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;EnqueueChildren(<emphasis role="keyword">const</emphasis>&#32;Stmt&#32;*S);
02126 &#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;EnqueueChildren(<emphasis role="keyword">const</emphasis>&#32;OMPClause&#32;*S);
02127 };
02128 }&#32;<emphasis role="comment">//&#32;namespace</emphasis>
02129 
02130 <emphasis role="keywordtype">void</emphasis>&#32;EnqueueVisitor::AddDeclarationNameInfo(<emphasis role="keyword">const</emphasis>&#32;Stmt&#32;*S)&#32;{
02131 &#32;&#32;<emphasis role="comment">//&#32;&apos;S&apos;&#32;should&#32;always&#32;be&#32;non-null,&#32;since&#32;it&#32;comes&#32;from&#32;the</emphasis>
02132 &#32;&#32;<emphasis role="comment">//&#32;statement&#32;we&#32;are&#32;visiting.</emphasis>
02133 &#32;&#32;WL.push_back(DeclarationNameInfoVisit(S,&#32;Parent));
02134 }
02135 
02136 <emphasis role="keywordtype">void</emphasis>&#32;EnqueueVisitor::AddNestedNameSpecifierLoc(
02137 &#32;&#32;&#32;&#32;NestedNameSpecifierLoc&#32;Qualifier)&#32;{
02138 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(Qualifier)
02139 &#32;&#32;&#32;&#32;WL.push_back(NestedNameSpecifierLocVisit(Qualifier,&#32;Parent));
02140 }
02141 
02142 <emphasis role="keywordtype">void</emphasis>&#32;EnqueueVisitor::AddStmt(<emphasis role="keyword">const</emphasis>&#32;Stmt&#32;*S)&#32;{
02143 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(S)
02144 &#32;&#32;&#32;&#32;WL.push_back(StmtVisit(S,&#32;Parent));
02145 }
02146 <emphasis role="keywordtype">void</emphasis>&#32;EnqueueVisitor::AddDecl(<emphasis role="keyword">const</emphasis>&#32;Decl&#32;*D,&#32;<emphasis role="keywordtype">bool</emphasis>&#32;isFirst)&#32;{
02147 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(D)
02148 &#32;&#32;&#32;&#32;WL.push_back(DeclVisit(D,&#32;Parent,&#32;isFirst));
02149 }
02150 <emphasis role="keywordtype">void</emphasis>&#32;EnqueueVisitor::AddExplicitTemplateArgs(<emphasis role="keyword">const</emphasis>&#32;TemplateArgumentLoc&#32;*A,
02151 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;NumTemplateArgs)&#32;{
02152 &#32;&#32;WL.push_back(ExplicitTemplateArgsVisit(A,&#32;A&#32;+&#32;NumTemplateArgs,&#32;Parent));
02153 }
02154 <emphasis role="keywordtype">void</emphasis>&#32;EnqueueVisitor::AddMemberRef(<emphasis role="keyword">const</emphasis>&#32;FieldDecl&#32;*D,&#32;SourceLocation&#32;L)&#32;{
02155 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(D)
02156 &#32;&#32;&#32;&#32;WL.push_back(MemberRefVisit(D,&#32;L,&#32;Parent));
02157 }
02158 <emphasis role="keywordtype">void</emphasis>&#32;EnqueueVisitor::AddTypeLoc(TypeSourceInfo&#32;*TI)&#32;{
02159 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(TI)
02160 &#32;&#32;&#32;&#32;WL.push_back(TypeLocVisit(TI-&gt;getTypeLoc(),&#32;Parent));
02161 }
02162 <emphasis role="keywordtype">void</emphasis>&#32;EnqueueVisitor::EnqueueChildren(<emphasis role="keyword">const</emphasis>&#32;Stmt&#32;*S)&#32;{
02163 &#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;size&#32;=&#32;WL.size();
02164 &#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;Stmt&#32;*SubStmt&#32;:&#32;S-&gt;children())&#32;{
02165 &#32;&#32;&#32;&#32;AddStmt(SubStmt);
02166 &#32;&#32;}
02167 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(size&#32;==&#32;WL.size())
02168 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
02169 &#32;&#32;<emphasis role="comment">//&#32;Now&#32;reverse&#32;the&#32;entries&#32;we&#32;just&#32;added.&#32;&#32;This&#32;will&#32;match&#32;the&#32;DFS</emphasis>
02170 &#32;&#32;<emphasis role="comment">//&#32;ordering&#32;performed&#32;by&#32;the&#32;worklist.</emphasis>
02171 &#32;&#32;VisitorWorkList::iterator&#32;I&#32;=&#32;WL.begin()&#32;+&#32;size,&#32;E&#32;=&#32;WL.end();
02172 &#32;&#32;std::reverse(I,&#32;E);
02173 }
02174 <emphasis role="keyword">namespace&#32;</emphasis>{
02175 <emphasis role="keyword">class&#32;</emphasis>OMPClauseEnqueue&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;ConstOMPClauseVisitor&lt;OMPClauseEnqueue&gt;&#32;{
02176 &#32;&#32;EnqueueVisitor&#32;*Visitor;
02178 &#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;&#32;<emphasis role="keywordtype">void</emphasis>&#32;VisitOMPClauseList(T&#32;*Node);
02179 
02180 <emphasis role="keyword">public</emphasis>:
02181 &#32;&#32;OMPClauseEnqueue(EnqueueVisitor&#32;*Visitor)&#32;:&#32;Visitor(Visitor)&#32;{}
<anchor xml:id="__c_index_8cpp_source_1l02182"/><link linkend="__c_index_8cpp_1a74c01d19d8da079646c91a83b77a07a8">02182</link> <emphasis role="preprocessor">#define&#32;GEN_CLANG_CLAUSE_CLASS</emphasis>
<anchor xml:id="__c_index_8cpp_source_1l02183"/><link linkend="__c_index_8cpp_1ad6bad911a6488fa2115dc9be0a0d4f60">02183</link> <emphasis role="preprocessor">#define&#32;CLAUSE_CLASS(Enum,&#32;Str,&#32;Class)&#32;void&#32;Visit##Class(const&#32;Class&#32;*C);</emphasis>
02184 <emphasis role="preprocessor">#include&#32;&quot;llvm/Frontend/OpenMP/OMP.inc&quot;</emphasis>
02185 &#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;VisitOMPClauseWithPreInit(<emphasis role="keyword">const</emphasis>&#32;OMPClauseWithPreInit&#32;*C);
02186 &#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;VisitOMPClauseWithPostUpdate(<emphasis role="keyword">const</emphasis>&#32;OMPClauseWithPostUpdate&#32;*C);
02187 };
02188 
02189 <emphasis role="keywordtype">void</emphasis>&#32;OMPClauseEnqueue::VisitOMPClauseWithPreInit(
02190 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;OMPClauseWithPreInit&#32;*C)&#32;{
02191 &#32;&#32;Visitor-&gt;AddStmt(C-&gt;getPreInitStmt());
02192 }
02193 
02194 <emphasis role="keywordtype">void</emphasis>&#32;OMPClauseEnqueue::VisitOMPClauseWithPostUpdate(
02195 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;OMPClauseWithPostUpdate&#32;*C)&#32;{
02196 &#32;&#32;VisitOMPClauseWithPreInit(C);
02197 &#32;&#32;Visitor-&gt;AddStmt(C-&gt;getPostUpdateExpr());
02198 }
02199 
02200 <emphasis role="keywordtype">void</emphasis>&#32;OMPClauseEnqueue::VisitOMPIfClause(<emphasis role="keyword">const</emphasis>&#32;OMPIfClause&#32;*C)&#32;{
02201 &#32;&#32;VisitOMPClauseWithPreInit(C);
02202 &#32;&#32;Visitor-&gt;AddStmt(C-&gt;getCondition());
02203 }
02204 
02205 <emphasis role="keywordtype">void</emphasis>&#32;OMPClauseEnqueue::VisitOMPFinalClause(<emphasis role="keyword">const</emphasis>&#32;OMPFinalClause&#32;*C)&#32;{
02206 &#32;&#32;Visitor-&gt;AddStmt(C-&gt;getCondition());
02207 }
02208 
02209 <emphasis role="keywordtype">void</emphasis>&#32;OMPClauseEnqueue::VisitOMPNumThreadsClause(<emphasis role="keyword">const</emphasis>&#32;OMPNumThreadsClause&#32;*C)&#32;{
02210 &#32;&#32;VisitOMPClauseWithPreInit(C);
02211 &#32;&#32;Visitor-&gt;AddStmt(C-&gt;getNumThreads());
02212 }
02213 
02214 <emphasis role="keywordtype">void</emphasis>&#32;OMPClauseEnqueue::VisitOMPSafelenClause(<emphasis role="keyword">const</emphasis>&#32;OMPSafelenClause&#32;*C)&#32;{
02215 &#32;&#32;Visitor-&gt;AddStmt(C-&gt;getSafelen());
02216 }
02217 
02218 <emphasis role="keywordtype">void</emphasis>&#32;OMPClauseEnqueue::VisitOMPSimdlenClause(<emphasis role="keyword">const</emphasis>&#32;OMPSimdlenClause&#32;*C)&#32;{
02219 &#32;&#32;Visitor-&gt;AddStmt(C-&gt;getSimdlen());
02220 }
02221 
02222 <emphasis role="keywordtype">void</emphasis>&#32;OMPClauseEnqueue::VisitOMPSizesClause(<emphasis role="keyword">const</emphasis>&#32;OMPSizesClause&#32;*C)&#32;{
02223 &#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">auto</emphasis>&#32;E&#32;:&#32;C-&gt;getSizesRefs())
02224 &#32;&#32;&#32;&#32;Visitor-&gt;AddStmt(E);
02225 }
02226 
02227 <emphasis role="keywordtype">void</emphasis>&#32;OMPClauseEnqueue::VisitOMPFullClause(<emphasis role="keyword">const</emphasis>&#32;OMPFullClause&#32;*C)&#32;{}
02228 
02229 <emphasis role="keywordtype">void</emphasis>&#32;OMPClauseEnqueue::VisitOMPPartialClause(<emphasis role="keyword">const</emphasis>&#32;OMPPartialClause&#32;*C)&#32;{
02230 &#32;&#32;Visitor-&gt;AddStmt(C-&gt;getFactor());
02231 }
02232 
02233 <emphasis role="keywordtype">void</emphasis>&#32;OMPClauseEnqueue::VisitOMPAllocatorClause(<emphasis role="keyword">const</emphasis>&#32;OMPAllocatorClause&#32;*C)&#32;{
02234 &#32;&#32;Visitor-&gt;AddStmt(C-&gt;getAllocator());
02235 }
02236 
02237 <emphasis role="keywordtype">void</emphasis>&#32;OMPClauseEnqueue::VisitOMPCollapseClause(<emphasis role="keyword">const</emphasis>&#32;OMPCollapseClause&#32;*C)&#32;{
02238 &#32;&#32;Visitor-&gt;AddStmt(C-&gt;getNumForLoops());
02239 }
02240 
02241 <emphasis role="keywordtype">void</emphasis>&#32;OMPClauseEnqueue::VisitOMPDefaultClause(<emphasis role="keyword">const</emphasis>&#32;OMPDefaultClause&#32;*C)&#32;{}
02242 
02243 <emphasis role="keywordtype">void</emphasis>&#32;OMPClauseEnqueue::VisitOMPProcBindClause(<emphasis role="keyword">const</emphasis>&#32;OMPProcBindClause&#32;*C)&#32;{}
02244 
02245 <emphasis role="keywordtype">void</emphasis>&#32;OMPClauseEnqueue::VisitOMPScheduleClause(<emphasis role="keyword">const</emphasis>&#32;OMPScheduleClause&#32;*C)&#32;{
02246 &#32;&#32;VisitOMPClauseWithPreInit(C);
02247 &#32;&#32;Visitor-&gt;AddStmt(C-&gt;getChunkSize());
02248 }
02249 
02250 <emphasis role="keywordtype">void</emphasis>&#32;OMPClauseEnqueue::VisitOMPOrderedClause(<emphasis role="keyword">const</emphasis>&#32;OMPOrderedClause&#32;*C)&#32;{
02251 &#32;&#32;Visitor-&gt;AddStmt(C-&gt;getNumForLoops());
02252 }
02253 
02254 <emphasis role="keywordtype">void</emphasis>&#32;OMPClauseEnqueue::VisitOMPDetachClause(<emphasis role="keyword">const</emphasis>&#32;OMPDetachClause&#32;*C)&#32;{
02255 &#32;&#32;Visitor-&gt;AddStmt(C-&gt;getEventHandler());
02256 }
02257 
02258 <emphasis role="keywordtype">void</emphasis>&#32;OMPClauseEnqueue::VisitOMPNowaitClause(<emphasis role="keyword">const</emphasis>&#32;OMPNowaitClause&#32;*)&#32;{}
02259 
02260 <emphasis role="keywordtype">void</emphasis>&#32;OMPClauseEnqueue::VisitOMPUntiedClause(<emphasis role="keyword">const</emphasis>&#32;OMPUntiedClause&#32;*)&#32;{}
02261 
02262 <emphasis role="keywordtype">void</emphasis>&#32;OMPClauseEnqueue::VisitOMPMergeableClause(<emphasis role="keyword">const</emphasis>&#32;OMPMergeableClause&#32;*)&#32;{}
02263 
02264 <emphasis role="keywordtype">void</emphasis>&#32;OMPClauseEnqueue::VisitOMPReadClause(<emphasis role="keyword">const</emphasis>&#32;OMPReadClause&#32;*)&#32;{}
02265 
02266 <emphasis role="keywordtype">void</emphasis>&#32;OMPClauseEnqueue::VisitOMPWriteClause(<emphasis role="keyword">const</emphasis>&#32;OMPWriteClause&#32;*)&#32;{}
02267 
02268 <emphasis role="keywordtype">void</emphasis>&#32;OMPClauseEnqueue::VisitOMPUpdateClause(<emphasis role="keyword">const</emphasis>&#32;OMPUpdateClause&#32;*)&#32;{}
02269 
02270 <emphasis role="keywordtype">void</emphasis>&#32;OMPClauseEnqueue::VisitOMPCaptureClause(<emphasis role="keyword">const</emphasis>&#32;OMPCaptureClause&#32;*)&#32;{}
02271 
02272 <emphasis role="keywordtype">void</emphasis>&#32;OMPClauseEnqueue::VisitOMPSeqCstClause(<emphasis role="keyword">const</emphasis>&#32;OMPSeqCstClause&#32;*)&#32;{}
02273 
02274 <emphasis role="keywordtype">void</emphasis>&#32;OMPClauseEnqueue::VisitOMPAcqRelClause(<emphasis role="keyword">const</emphasis>&#32;OMPAcqRelClause&#32;*)&#32;{}
02275 
02276 <emphasis role="keywordtype">void</emphasis>&#32;OMPClauseEnqueue::VisitOMPAcquireClause(<emphasis role="keyword">const</emphasis>&#32;OMPAcquireClause&#32;*)&#32;{}
02277 
02278 <emphasis role="keywordtype">void</emphasis>&#32;OMPClauseEnqueue::VisitOMPReleaseClause(<emphasis role="keyword">const</emphasis>&#32;OMPReleaseClause&#32;*)&#32;{}
02279 
02280 <emphasis role="keywordtype">void</emphasis>&#32;OMPClauseEnqueue::VisitOMPRelaxedClause(<emphasis role="keyword">const</emphasis>&#32;OMPRelaxedClause&#32;*)&#32;{}
02281 
02282 <emphasis role="keywordtype">void</emphasis>&#32;OMPClauseEnqueue::VisitOMPThreadsClause(<emphasis role="keyword">const</emphasis>&#32;OMPThreadsClause&#32;*)&#32;{}
02283 
02284 <emphasis role="keywordtype">void</emphasis>&#32;OMPClauseEnqueue::VisitOMPSIMDClause(<emphasis role="keyword">const</emphasis>&#32;OMPSIMDClause&#32;*)&#32;{}
02285 
02286 <emphasis role="keywordtype">void</emphasis>&#32;OMPClauseEnqueue::VisitOMPNogroupClause(<emphasis role="keyword">const</emphasis>&#32;OMPNogroupClause&#32;*)&#32;{}
02287 
02288 <emphasis role="keywordtype">void</emphasis>&#32;OMPClauseEnqueue::VisitOMPInitClause(<emphasis role="keyword">const</emphasis>&#32;OMPInitClause&#32;*C)&#32;{
02289 &#32;&#32;VisitOMPClauseList(C);
02290 }
02291 
02292 <emphasis role="keywordtype">void</emphasis>&#32;OMPClauseEnqueue::VisitOMPUseClause(<emphasis role="keyword">const</emphasis>&#32;OMPUseClause&#32;*C)&#32;{
02293 &#32;&#32;Visitor-&gt;AddStmt(C-&gt;getInteropVar());
02294 }
02295 
02296 <emphasis role="keywordtype">void</emphasis>&#32;OMPClauseEnqueue::VisitOMPDestroyClause(<emphasis role="keyword">const</emphasis>&#32;OMPDestroyClause&#32;*C)&#32;{
02297 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(C-&gt;getInteropVar())
02298 &#32;&#32;&#32;&#32;Visitor-&gt;AddStmt(C-&gt;getInteropVar());
02299 }
02300 
02301 <emphasis role="keywordtype">void</emphasis>&#32;OMPClauseEnqueue::VisitOMPNovariantsClause(<emphasis role="keyword">const</emphasis>&#32;OMPNovariantsClause&#32;*C)&#32;{
02302 &#32;&#32;Visitor-&gt;AddStmt(C-&gt;getCondition());
02303 }
02304 
02305 <emphasis role="keywordtype">void</emphasis>&#32;OMPClauseEnqueue::VisitOMPNocontextClause(<emphasis role="keyword">const</emphasis>&#32;OMPNocontextClause&#32;*C)&#32;{
02306 &#32;&#32;Visitor-&gt;AddStmt(C-&gt;getCondition());
02307 }
02308 
02309 <emphasis role="keywordtype">void</emphasis>&#32;OMPClauseEnqueue::VisitOMPFilterClause(<emphasis role="keyword">const</emphasis>&#32;OMPFilterClause&#32;*C)&#32;{
02310 &#32;&#32;VisitOMPClauseWithPreInit(C);
02311 &#32;&#32;Visitor-&gt;AddStmt(C-&gt;getThreadID());
02312 }
02313 
02314 <emphasis role="keywordtype">void</emphasis>&#32;OMPClauseEnqueue::VisitOMPUnifiedAddressClause(
02315 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;OMPUnifiedAddressClause&#32;*)&#32;{}
02316 
02317 <emphasis role="keywordtype">void</emphasis>&#32;OMPClauseEnqueue::VisitOMPUnifiedSharedMemoryClause(
02318 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;OMPUnifiedSharedMemoryClause&#32;*)&#32;{}
02319 
02320 <emphasis role="keywordtype">void</emphasis>&#32;OMPClauseEnqueue::VisitOMPReverseOffloadClause(
02321 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;OMPReverseOffloadClause&#32;*)&#32;{}
02322 
02323 <emphasis role="keywordtype">void</emphasis>&#32;OMPClauseEnqueue::VisitOMPDynamicAllocatorsClause(
02324 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;OMPDynamicAllocatorsClause&#32;*)&#32;{}
02325 
02326 <emphasis role="keywordtype">void</emphasis>&#32;OMPClauseEnqueue::VisitOMPAtomicDefaultMemOrderClause(
02327 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;OMPAtomicDefaultMemOrderClause&#32;*)&#32;{}
02328 
02329 <emphasis role="keywordtype">void</emphasis>&#32;OMPClauseEnqueue::VisitOMPDeviceClause(<emphasis role="keyword">const</emphasis>&#32;OMPDeviceClause&#32;*C)&#32;{
02330 &#32;&#32;Visitor-&gt;AddStmt(C-&gt;getDevice());
02331 }
02332 
02333 <emphasis role="keywordtype">void</emphasis>&#32;OMPClauseEnqueue::VisitOMPNumTeamsClause(<emphasis role="keyword">const</emphasis>&#32;OMPNumTeamsClause&#32;*C)&#32;{
02334 &#32;&#32;VisitOMPClauseWithPreInit(C);
02335 &#32;&#32;Visitor-&gt;AddStmt(C-&gt;getNumTeams());
02336 }
02337 
02338 <emphasis role="keywordtype">void</emphasis>&#32;OMPClauseEnqueue::VisitOMPThreadLimitClause(
02339 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;OMPThreadLimitClause&#32;*C)&#32;{
02340 &#32;&#32;VisitOMPClauseWithPreInit(C);
02341 &#32;&#32;Visitor-&gt;AddStmt(C-&gt;getThreadLimit());
02342 }
02343 
02344 <emphasis role="keywordtype">void</emphasis>&#32;OMPClauseEnqueue::VisitOMPPriorityClause(<emphasis role="keyword">const</emphasis>&#32;OMPPriorityClause&#32;*C)&#32;{
02345 &#32;&#32;Visitor-&gt;AddStmt(C-&gt;getPriority());
02346 }
02347 
02348 <emphasis role="keywordtype">void</emphasis>&#32;OMPClauseEnqueue::VisitOMPGrainsizeClause(<emphasis role="keyword">const</emphasis>&#32;OMPGrainsizeClause&#32;*C)&#32;{
02349 &#32;&#32;Visitor-&gt;AddStmt(C-&gt;getGrainsize());
02350 }
02351 
02352 <emphasis role="keywordtype">void</emphasis>&#32;OMPClauseEnqueue::VisitOMPNumTasksClause(<emphasis role="keyword">const</emphasis>&#32;OMPNumTasksClause&#32;*C)&#32;{
02353 &#32;&#32;Visitor-&gt;AddStmt(C-&gt;getNumTasks());
02354 }
02355 
02356 <emphasis role="keywordtype">void</emphasis>&#32;OMPClauseEnqueue::VisitOMPHintClause(<emphasis role="keyword">const</emphasis>&#32;OMPHintClause&#32;*C)&#32;{
02357 &#32;&#32;Visitor-&gt;AddStmt(C-&gt;getHint());
02358 }
02359 
02360 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;&#32;<emphasis role="keywordtype">void</emphasis>&#32;OMPClauseEnqueue::VisitOMPClauseList(T&#32;*Node)&#32;{
02361 &#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;*I&#32;:&#32;Node-&gt;varlists())&#32;{
02362 &#32;&#32;&#32;&#32;Visitor-&gt;AddStmt(I);
02363 &#32;&#32;}
02364 }
02365 
02366 <emphasis role="keywordtype">void</emphasis>&#32;OMPClauseEnqueue::VisitOMPInclusiveClause(<emphasis role="keyword">const</emphasis>&#32;OMPInclusiveClause&#32;*C)&#32;{
02367 &#32;&#32;VisitOMPClauseList(C);
02368 }
02369 <emphasis role="keywordtype">void</emphasis>&#32;OMPClauseEnqueue::VisitOMPExclusiveClause(<emphasis role="keyword">const</emphasis>&#32;OMPExclusiveClause&#32;*C)&#32;{
02370 &#32;&#32;VisitOMPClauseList(C);
02371 }
02372 <emphasis role="keywordtype">void</emphasis>&#32;OMPClauseEnqueue::VisitOMPAllocateClause(<emphasis role="keyword">const</emphasis>&#32;OMPAllocateClause&#32;*C)&#32;{
02373 &#32;&#32;VisitOMPClauseList(C);
02374 &#32;&#32;Visitor-&gt;AddStmt(C-&gt;getAllocator());
02375 }
02376 <emphasis role="keywordtype">void</emphasis>&#32;OMPClauseEnqueue::VisitOMPPrivateClause(<emphasis role="keyword">const</emphasis>&#32;OMPPrivateClause&#32;*C)&#32;{
02377 &#32;&#32;VisitOMPClauseList(C);
02378 &#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;*E&#32;:&#32;C-&gt;private_copies())&#32;{
02379 &#32;&#32;&#32;&#32;Visitor-&gt;AddStmt(E);
02380 &#32;&#32;}
02381 }
02382 <emphasis role="keywordtype">void</emphasis>&#32;OMPClauseEnqueue::VisitOMPFirstprivateClause(
02383 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;OMPFirstprivateClause&#32;*C)&#32;{
02384 &#32;&#32;VisitOMPClauseList(C);
02385 &#32;&#32;VisitOMPClauseWithPreInit(C);
02386 &#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;*E&#32;:&#32;C-&gt;private_copies())&#32;{
02387 &#32;&#32;&#32;&#32;Visitor-&gt;AddStmt(E);
02388 &#32;&#32;}
02389 &#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;*E&#32;:&#32;C-&gt;inits())&#32;{
02390 &#32;&#32;&#32;&#32;Visitor-&gt;AddStmt(E);
02391 &#32;&#32;}
02392 }
02393 <emphasis role="keywordtype">void</emphasis>&#32;OMPClauseEnqueue::VisitOMPLastprivateClause(
02394 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;OMPLastprivateClause&#32;*C)&#32;{
02395 &#32;&#32;VisitOMPClauseList(C);
02396 &#32;&#32;VisitOMPClauseWithPostUpdate(C);
02397 &#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">auto</emphasis>&#32;*E&#32;:&#32;C-&gt;private_copies())&#32;{
02398 &#32;&#32;&#32;&#32;Visitor-&gt;AddStmt(E);
02399 &#32;&#32;}
02400 &#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">auto</emphasis>&#32;*E&#32;:&#32;C-&gt;source_exprs())&#32;{
02401 &#32;&#32;&#32;&#32;Visitor-&gt;AddStmt(E);
02402 &#32;&#32;}
02403 &#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">auto</emphasis>&#32;*E&#32;:&#32;C-&gt;destination_exprs())&#32;{
02404 &#32;&#32;&#32;&#32;Visitor-&gt;AddStmt(E);
02405 &#32;&#32;}
02406 &#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">auto</emphasis>&#32;*E&#32;:&#32;C-&gt;assignment_ops())&#32;{
02407 &#32;&#32;&#32;&#32;Visitor-&gt;AddStmt(E);
02408 &#32;&#32;}
02409 }
02410 <emphasis role="keywordtype">void</emphasis>&#32;OMPClauseEnqueue::VisitOMPSharedClause(<emphasis role="keyword">const</emphasis>&#32;OMPSharedClause&#32;*C)&#32;{
02411 &#32;&#32;VisitOMPClauseList(C);
02412 }
02413 <emphasis role="keywordtype">void</emphasis>&#32;OMPClauseEnqueue::VisitOMPReductionClause(<emphasis role="keyword">const</emphasis>&#32;OMPReductionClause&#32;*C)&#32;{
02414 &#32;&#32;VisitOMPClauseList(C);
02415 &#32;&#32;VisitOMPClauseWithPostUpdate(C);
02416 &#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">auto</emphasis>&#32;*E&#32;:&#32;C-&gt;privates())&#32;{
02417 &#32;&#32;&#32;&#32;Visitor-&gt;AddStmt(E);
02418 &#32;&#32;}
02419 &#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">auto</emphasis>&#32;*E&#32;:&#32;C-&gt;lhs_exprs())&#32;{
02420 &#32;&#32;&#32;&#32;Visitor-&gt;AddStmt(E);
02421 &#32;&#32;}
02422 &#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">auto</emphasis>&#32;*E&#32;:&#32;C-&gt;rhs_exprs())&#32;{
02423 &#32;&#32;&#32;&#32;Visitor-&gt;AddStmt(E);
02424 &#32;&#32;}
02425 &#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">auto</emphasis>&#32;*E&#32;:&#32;C-&gt;reduction_ops())&#32;{
02426 &#32;&#32;&#32;&#32;Visitor-&gt;AddStmt(E);
02427 &#32;&#32;}
02428 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(C-&gt;getModifier()&#32;==&#32;clang::OMPC_REDUCTION_inscan)&#32;{
02429 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">auto</emphasis>&#32;*E&#32;:&#32;C-&gt;copy_ops())&#32;{
02430 &#32;&#32;&#32;&#32;&#32;&#32;Visitor-&gt;AddStmt(E);
02431 &#32;&#32;&#32;&#32;}
02432 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">auto</emphasis>&#32;*E&#32;:&#32;C-&gt;copy_array_temps())&#32;{
02433 &#32;&#32;&#32;&#32;&#32;&#32;Visitor-&gt;AddStmt(E);
02434 &#32;&#32;&#32;&#32;}
02435 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">auto</emphasis>&#32;*E&#32;:&#32;C-&gt;copy_array_elems())&#32;{
02436 &#32;&#32;&#32;&#32;&#32;&#32;Visitor-&gt;AddStmt(E);
02437 &#32;&#32;&#32;&#32;}
02438 &#32;&#32;}
02439 }
02440 <emphasis role="keywordtype">void</emphasis>&#32;OMPClauseEnqueue::VisitOMPTaskReductionClause(
02441 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;OMPTaskReductionClause&#32;*C)&#32;{
02442 &#32;&#32;VisitOMPClauseList(C);
02443 &#32;&#32;VisitOMPClauseWithPostUpdate(C);
02444 &#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">auto</emphasis>&#32;*E&#32;:&#32;C-&gt;privates())&#32;{
02445 &#32;&#32;&#32;&#32;Visitor-&gt;AddStmt(E);
02446 &#32;&#32;}
02447 &#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">auto</emphasis>&#32;*E&#32;:&#32;C-&gt;lhs_exprs())&#32;{
02448 &#32;&#32;&#32;&#32;Visitor-&gt;AddStmt(E);
02449 &#32;&#32;}
02450 &#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">auto</emphasis>&#32;*E&#32;:&#32;C-&gt;rhs_exprs())&#32;{
02451 &#32;&#32;&#32;&#32;Visitor-&gt;AddStmt(E);
02452 &#32;&#32;}
02453 &#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">auto</emphasis>&#32;*E&#32;:&#32;C-&gt;reduction_ops())&#32;{
02454 &#32;&#32;&#32;&#32;Visitor-&gt;AddStmt(E);
02455 &#32;&#32;}
02456 }
02457 <emphasis role="keywordtype">void</emphasis>&#32;OMPClauseEnqueue::VisitOMPInReductionClause(
02458 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;OMPInReductionClause&#32;*C)&#32;{
02459 &#32;&#32;VisitOMPClauseList(C);
02460 &#32;&#32;VisitOMPClauseWithPostUpdate(C);
02461 &#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">auto</emphasis>&#32;*E&#32;:&#32;C-&gt;privates())&#32;{
02462 &#32;&#32;&#32;&#32;Visitor-&gt;AddStmt(E);
02463 &#32;&#32;}
02464 &#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">auto</emphasis>&#32;*E&#32;:&#32;C-&gt;lhs_exprs())&#32;{
02465 &#32;&#32;&#32;&#32;Visitor-&gt;AddStmt(E);
02466 &#32;&#32;}
02467 &#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">auto</emphasis>&#32;*E&#32;:&#32;C-&gt;rhs_exprs())&#32;{
02468 &#32;&#32;&#32;&#32;Visitor-&gt;AddStmt(E);
02469 &#32;&#32;}
02470 &#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">auto</emphasis>&#32;*E&#32;:&#32;C-&gt;reduction_ops())&#32;{
02471 &#32;&#32;&#32;&#32;Visitor-&gt;AddStmt(E);
02472 &#32;&#32;}
02473 &#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">auto</emphasis>&#32;*E&#32;:&#32;C-&gt;taskgroup_descriptors())
02474 &#32;&#32;&#32;&#32;Visitor-&gt;AddStmt(E);
02475 }
02476 <emphasis role="keywordtype">void</emphasis>&#32;OMPClauseEnqueue::VisitOMPLinearClause(<emphasis role="keyword">const</emphasis>&#32;OMPLinearClause&#32;*C)&#32;{
02477 &#32;&#32;VisitOMPClauseList(C);
02478 &#32;&#32;VisitOMPClauseWithPostUpdate(C);
02479 &#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;*E&#32;:&#32;C-&gt;privates())&#32;{
02480 &#32;&#32;&#32;&#32;Visitor-&gt;AddStmt(E);
02481 &#32;&#32;}
02482 &#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;*E&#32;:&#32;C-&gt;inits())&#32;{
02483 &#32;&#32;&#32;&#32;Visitor-&gt;AddStmt(E);
02484 &#32;&#32;}
02485 &#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;*E&#32;:&#32;C-&gt;updates())&#32;{
02486 &#32;&#32;&#32;&#32;Visitor-&gt;AddStmt(E);
02487 &#32;&#32;}
02488 &#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;*E&#32;:&#32;C-&gt;finals())&#32;{
02489 &#32;&#32;&#32;&#32;Visitor-&gt;AddStmt(E);
02490 &#32;&#32;}
02491 &#32;&#32;Visitor-&gt;AddStmt(C-&gt;getStep());
02492 &#32;&#32;Visitor-&gt;AddStmt(C-&gt;getCalcStep());
02493 }
02494 <emphasis role="keywordtype">void</emphasis>&#32;OMPClauseEnqueue::VisitOMPAlignedClause(<emphasis role="keyword">const</emphasis>&#32;OMPAlignedClause&#32;*C)&#32;{
02495 &#32;&#32;VisitOMPClauseList(C);
02496 &#32;&#32;Visitor-&gt;AddStmt(C-&gt;getAlignment());
02497 }
02498 <emphasis role="keywordtype">void</emphasis>&#32;OMPClauseEnqueue::VisitOMPCopyinClause(<emphasis role="keyword">const</emphasis>&#32;OMPCopyinClause&#32;*C)&#32;{
02499 &#32;&#32;VisitOMPClauseList(C);
02500 &#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">auto</emphasis>&#32;*E&#32;:&#32;C-&gt;source_exprs())&#32;{
02501 &#32;&#32;&#32;&#32;Visitor-&gt;AddStmt(E);
02502 &#32;&#32;}
02503 &#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">auto</emphasis>&#32;*E&#32;:&#32;C-&gt;destination_exprs())&#32;{
02504 &#32;&#32;&#32;&#32;Visitor-&gt;AddStmt(E);
02505 &#32;&#32;}
02506 &#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">auto</emphasis>&#32;*E&#32;:&#32;C-&gt;assignment_ops())&#32;{
02507 &#32;&#32;&#32;&#32;Visitor-&gt;AddStmt(E);
02508 &#32;&#32;}
02509 }
02510 <emphasis role="keywordtype">void</emphasis>&#32;OMPClauseEnqueue::VisitOMPCopyprivateClause(
02511 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;OMPCopyprivateClause&#32;*C)&#32;{
02512 &#32;&#32;VisitOMPClauseList(C);
02513 &#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">auto</emphasis>&#32;*E&#32;:&#32;C-&gt;source_exprs())&#32;{
02514 &#32;&#32;&#32;&#32;Visitor-&gt;AddStmt(E);
02515 &#32;&#32;}
02516 &#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">auto</emphasis>&#32;*E&#32;:&#32;C-&gt;destination_exprs())&#32;{
02517 &#32;&#32;&#32;&#32;Visitor-&gt;AddStmt(E);
02518 &#32;&#32;}
02519 &#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">auto</emphasis>&#32;*E&#32;:&#32;C-&gt;assignment_ops())&#32;{
02520 &#32;&#32;&#32;&#32;Visitor-&gt;AddStmt(E);
02521 &#32;&#32;}
02522 }
02523 <emphasis role="keywordtype">void</emphasis>&#32;OMPClauseEnqueue::VisitOMPFlushClause(<emphasis role="keyword">const</emphasis>&#32;OMPFlushClause&#32;*C)&#32;{
02524 &#32;&#32;VisitOMPClauseList(C);
02525 }
02526 <emphasis role="keywordtype">void</emphasis>&#32;OMPClauseEnqueue::VisitOMPDepobjClause(<emphasis role="keyword">const</emphasis>&#32;OMPDepobjClause&#32;*C)&#32;{
02527 &#32;&#32;Visitor-&gt;AddStmt(C-&gt;getDepobj());
02528 }
02529 <emphasis role="keywordtype">void</emphasis>&#32;OMPClauseEnqueue::VisitOMPDependClause(<emphasis role="keyword">const</emphasis>&#32;OMPDependClause&#32;*C)&#32;{
02530 &#32;&#32;VisitOMPClauseList(C);
02531 }
02532 <emphasis role="keywordtype">void</emphasis>&#32;OMPClauseEnqueue::VisitOMPMapClause(<emphasis role="keyword">const</emphasis>&#32;OMPMapClause&#32;*C)&#32;{
02533 &#32;&#32;VisitOMPClauseList(C);
02534 }
02535 <emphasis role="keywordtype">void</emphasis>&#32;OMPClauseEnqueue::VisitOMPDistScheduleClause(
02536 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;OMPDistScheduleClause&#32;*C)&#32;{
02537 &#32;&#32;VisitOMPClauseWithPreInit(C);
02538 &#32;&#32;Visitor-&gt;AddStmt(C-&gt;getChunkSize());
02539 }
02540 <emphasis role="keywordtype">void</emphasis>&#32;OMPClauseEnqueue::VisitOMPDefaultmapClause(
02541 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;OMPDefaultmapClause&#32;*&#32;<emphasis role="comment">/*C*/</emphasis>)&#32;{}
02542 <emphasis role="keywordtype">void</emphasis>&#32;OMPClauseEnqueue::VisitOMPToClause(<emphasis role="keyword">const</emphasis>&#32;OMPToClause&#32;*C)&#32;{
02543 &#32;&#32;VisitOMPClauseList(C);
02544 }
02545 <emphasis role="keywordtype">void</emphasis>&#32;OMPClauseEnqueue::VisitOMPFromClause(<emphasis role="keyword">const</emphasis>&#32;OMPFromClause&#32;*C)&#32;{
02546 &#32;&#32;VisitOMPClauseList(C);
02547 }
02548 <emphasis role="keywordtype">void</emphasis>&#32;OMPClauseEnqueue::VisitOMPUseDevicePtrClause(
02549 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;OMPUseDevicePtrClause&#32;*C)&#32;{
02550 &#32;&#32;VisitOMPClauseList(C);
02551 }
02552 <emphasis role="keywordtype">void</emphasis>&#32;OMPClauseEnqueue::VisitOMPUseDeviceAddrClause(
02553 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;OMPUseDeviceAddrClause&#32;*C)&#32;{
02554 &#32;&#32;VisitOMPClauseList(C);
02555 }
02556 <emphasis role="keywordtype">void</emphasis>&#32;OMPClauseEnqueue::VisitOMPIsDevicePtrClause(
02557 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;OMPIsDevicePtrClause&#32;*C)&#32;{
02558 &#32;&#32;VisitOMPClauseList(C);
02559 }
02560 <emphasis role="keywordtype">void</emphasis>&#32;OMPClauseEnqueue::VisitOMPNontemporalClause(
02561 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;OMPNontemporalClause&#32;*C)&#32;{
02562 &#32;&#32;VisitOMPClauseList(C);
02563 &#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;*E&#32;:&#32;C-&gt;private_refs())
02564 &#32;&#32;&#32;&#32;Visitor-&gt;AddStmt(E);
02565 }
02566 <emphasis role="keywordtype">void</emphasis>&#32;OMPClauseEnqueue::VisitOMPOrderClause(<emphasis role="keyword">const</emphasis>&#32;OMPOrderClause&#32;*C)&#32;{}
02567 <emphasis role="keywordtype">void</emphasis>&#32;OMPClauseEnqueue::VisitOMPUsesAllocatorsClause(
02568 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;OMPUsesAllocatorsClause&#32;*C)&#32;{
02569 &#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">unsigned</emphasis>&#32;I&#32;=&#32;0,&#32;E&#32;=&#32;C-&gt;getNumberOfAllocators();&#32;I&#32;&lt;&#32;E;&#32;++I)&#32;{
02570 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;OMPUsesAllocatorsClause::Data&#32;&amp;D&#32;=&#32;C-&gt;getAllocatorData(I);
02571 &#32;&#32;&#32;&#32;Visitor-&gt;AddStmt(D.Allocator);
02572 &#32;&#32;&#32;&#32;Visitor-&gt;AddStmt(D.AllocatorTraits);
02573 &#32;&#32;}
02574 }
02575 <emphasis role="keywordtype">void</emphasis>&#32;OMPClauseEnqueue::VisitOMPAffinityClause(<emphasis role="keyword">const</emphasis>&#32;OMPAffinityClause&#32;*C)&#32;{
02576 &#32;&#32;Visitor-&gt;AddStmt(C-&gt;getModifier());
02577 &#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;Expr&#32;*E&#32;:&#32;C-&gt;varlists())
02578 &#32;&#32;&#32;&#32;Visitor-&gt;AddStmt(E);
02579 }
02580 }&#32;<emphasis role="comment">//&#32;namespace</emphasis>
02581 
02582 <emphasis role="keywordtype">void</emphasis>&#32;EnqueueVisitor::EnqueueChildren(<emphasis role="keyword">const</emphasis>&#32;OMPClause&#32;*S)&#32;{
02583 &#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;size&#32;=&#32;WL.size();
02584 &#32;&#32;OMPClauseEnqueue&#32;Visitor(<emphasis role="keyword">this</emphasis>);
02585 &#32;&#32;Visitor.<link linkend="_classclang_1_1cxcursor_1_1_cursor_visitor_1a01659df2ce565980ce5b581ba7a970e3">Visit</link>(S);
02586 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(size&#32;==&#32;WL.size())
02587 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
02588 &#32;&#32;<emphasis role="comment">//&#32;Now&#32;reverse&#32;the&#32;entries&#32;we&#32;just&#32;added.&#32;&#32;This&#32;will&#32;match&#32;the&#32;DFS</emphasis>
02589 &#32;&#32;<emphasis role="comment">//&#32;ordering&#32;performed&#32;by&#32;the&#32;worklist.</emphasis>
02590 &#32;&#32;VisitorWorkList::iterator&#32;I&#32;=&#32;WL.begin()&#32;+&#32;size,&#32;E&#32;=&#32;WL.end();
02591 &#32;&#32;std::reverse(I,&#32;E);
02592 }
02593 <emphasis role="keywordtype">void</emphasis>&#32;EnqueueVisitor::VisitAddrLabelExpr(<emphasis role="keyword">const</emphasis>&#32;AddrLabelExpr&#32;*E)&#32;{
02594 &#32;&#32;WL.push_back(LabelRefVisit(E-&gt;getLabel(),&#32;E-&gt;getLabelLoc(),&#32;Parent));
02595 }
02596 <emphasis role="keywordtype">void</emphasis>&#32;EnqueueVisitor::VisitBlockExpr(<emphasis role="keyword">const</emphasis>&#32;BlockExpr&#32;*B)&#32;{
02597 &#32;&#32;AddDecl(B-&gt;getBlockDecl());
02598 }
02599 <emphasis role="keywordtype">void</emphasis>&#32;EnqueueVisitor::VisitCompoundLiteralExpr(<emphasis role="keyword">const</emphasis>&#32;CompoundLiteralExpr&#32;*E)&#32;{
02600 &#32;&#32;EnqueueChildren(E);
02601 &#32;&#32;AddTypeLoc(E-&gt;getTypeSourceInfo());
02602 }
02603 <emphasis role="keywordtype">void</emphasis>&#32;EnqueueVisitor::VisitCompoundStmt(<emphasis role="keyword">const</emphasis>&#32;CompoundStmt&#32;*S)&#32;{
02604 &#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">auto</emphasis>&#32;&amp;I&#32;:&#32;llvm::reverse(S-&gt;body()))
02605 &#32;&#32;&#32;&#32;AddStmt(I);
02606 }
02607 <emphasis role="keywordtype">void</emphasis>&#32;EnqueueVisitor::VisitMSDependentExistsStmt(
02608 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;MSDependentExistsStmt&#32;*S)&#32;{
02609 &#32;&#32;AddStmt(S-&gt;getSubStmt());
02610 &#32;&#32;AddDeclarationNameInfo(S);
02611 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(NestedNameSpecifierLoc&#32;QualifierLoc&#32;=&#32;S-&gt;getQualifierLoc())
02612 &#32;&#32;&#32;&#32;AddNestedNameSpecifierLoc(QualifierLoc);
02613 }
02614 
02615 <emphasis role="keywordtype">void</emphasis>&#32;EnqueueVisitor::VisitCXXDependentScopeMemberExpr(
02616 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;CXXDependentScopeMemberExpr&#32;*E)&#32;{
02617 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(E-&gt;hasExplicitTemplateArgs())
02618 &#32;&#32;&#32;&#32;AddExplicitTemplateArgs(E-&gt;getTemplateArgs(),&#32;E-&gt;getNumTemplateArgs());
02619 &#32;&#32;AddDeclarationNameInfo(E);
02620 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(NestedNameSpecifierLoc&#32;QualifierLoc&#32;=&#32;E-&gt;getQualifierLoc())
02621 &#32;&#32;&#32;&#32;AddNestedNameSpecifierLoc(QualifierLoc);
02622 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!E-&gt;isImplicitAccess())
02623 &#32;&#32;&#32;&#32;AddStmt(E-&gt;getBase());
02624 }
02625 <emphasis role="keywordtype">void</emphasis>&#32;EnqueueVisitor::VisitCXXNewExpr(<emphasis role="keyword">const</emphasis>&#32;CXXNewExpr&#32;*E)&#32;{
02626 &#32;&#32;<emphasis role="comment">//&#32;Enqueue&#32;the&#32;initializer&#32;,&#32;if&#32;any.</emphasis>
02627 &#32;&#32;AddStmt(E-&gt;getInitializer());
02628 &#32;&#32;<emphasis role="comment">//&#32;Enqueue&#32;the&#32;array&#32;size,&#32;if&#32;any.</emphasis>
02629 &#32;&#32;AddStmt(E-&gt;getArraySize().getValueOr(<emphasis role="keyword">nullptr</emphasis>));
02630 &#32;&#32;<emphasis role="comment">//&#32;Enqueue&#32;the&#32;allocated&#32;type.</emphasis>
02631 &#32;&#32;AddTypeLoc(E-&gt;getAllocatedTypeSourceInfo());
02632 &#32;&#32;<emphasis role="comment">//&#32;Enqueue&#32;the&#32;placement&#32;arguments.</emphasis>
02633 &#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">unsigned</emphasis>&#32;I&#32;=&#32;E-&gt;getNumPlacementArgs();&#32;I&#32;&gt;&#32;0;&#32;--I)
02634 &#32;&#32;&#32;&#32;AddStmt(E-&gt;getPlacementArg(I&#32;-&#32;1));
02635 }
02636 <emphasis role="keywordtype">void</emphasis>&#32;EnqueueVisitor::VisitCXXOperatorCallExpr(<emphasis role="keyword">const</emphasis>&#32;CXXOperatorCallExpr&#32;*CE)&#32;{
02637 &#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">unsigned</emphasis>&#32;I&#32;=&#32;CE-&gt;getNumArgs();&#32;I&#32;&gt;&#32;1&#32;<emphasis role="comment">/*&#32;Yes,&#32;this&#32;is&#32;1&#32;*/</emphasis>;&#32;--I)
02638 &#32;&#32;&#32;&#32;AddStmt(CE-&gt;getArg(I&#32;-&#32;1));
02639 &#32;&#32;AddStmt(CE-&gt;getCallee());
02640 &#32;&#32;AddStmt(CE-&gt;getArg(0));
02641 }
02642 <emphasis role="keywordtype">void</emphasis>&#32;EnqueueVisitor::VisitCXXPseudoDestructorExpr(
02643 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;CXXPseudoDestructorExpr&#32;*E)&#32;{
02644 &#32;&#32;<emphasis role="comment">//&#32;Visit&#32;the&#32;name&#32;of&#32;the&#32;type&#32;being&#32;destroyed.</emphasis>
02645 &#32;&#32;AddTypeLoc(E-&gt;getDestroyedTypeInfo());
02646 &#32;&#32;<emphasis role="comment">//&#32;Visit&#32;the&#32;scope&#32;type&#32;that&#32;looks&#32;disturbingly&#32;like&#32;the&#32;nested-name-specifier</emphasis>
02647 &#32;&#32;<emphasis role="comment">//&#32;but&#32;isn&apos;t.</emphasis>
02648 &#32;&#32;AddTypeLoc(E-&gt;getScopeTypeInfo());
02649 &#32;&#32;<emphasis role="comment">//&#32;Visit&#32;the&#32;nested-name-specifier.</emphasis>
02650 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(NestedNameSpecifierLoc&#32;QualifierLoc&#32;=&#32;E-&gt;getQualifierLoc())
02651 &#32;&#32;&#32;&#32;AddNestedNameSpecifierLoc(QualifierLoc);
02652 &#32;&#32;<emphasis role="comment">//&#32;Visit&#32;base&#32;expression.</emphasis>
02653 &#32;&#32;AddStmt(E-&gt;getBase());
02654 }
02655 <emphasis role="keywordtype">void</emphasis>&#32;EnqueueVisitor::VisitCXXScalarValueInitExpr(
02656 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;CXXScalarValueInitExpr&#32;*E)&#32;{
02657 &#32;&#32;AddTypeLoc(E-&gt;getTypeSourceInfo());
02658 }
02659 <emphasis role="keywordtype">void</emphasis>&#32;EnqueueVisitor::VisitCXXTemporaryObjectExpr(
02660 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;CXXTemporaryObjectExpr&#32;*E)&#32;{
02661 &#32;&#32;EnqueueChildren(E);
02662 &#32;&#32;AddTypeLoc(E-&gt;getTypeSourceInfo());
02663 }
02664 <emphasis role="keywordtype">void</emphasis>&#32;EnqueueVisitor::VisitCXXTypeidExpr(<emphasis role="keyword">const</emphasis>&#32;CXXTypeidExpr&#32;*E)&#32;{
02665 &#32;&#32;EnqueueChildren(E);
02666 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(E-&gt;isTypeOperand())
02667 &#32;&#32;&#32;&#32;AddTypeLoc(E-&gt;getTypeOperandSourceInfo());
02668 }
02669 
02670 <emphasis role="keywordtype">void</emphasis>&#32;EnqueueVisitor::VisitCXXUnresolvedConstructExpr(
02671 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;CXXUnresolvedConstructExpr&#32;*E)&#32;{
02672 &#32;&#32;EnqueueChildren(E);
02673 &#32;&#32;AddTypeLoc(E-&gt;getTypeSourceInfo());
02674 }
02675 <emphasis role="keywordtype">void</emphasis>&#32;EnqueueVisitor::VisitCXXUuidofExpr(<emphasis role="keyword">const</emphasis>&#32;CXXUuidofExpr&#32;*E)&#32;{
02676 &#32;&#32;EnqueueChildren(E);
02677 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(E-&gt;isTypeOperand())
02678 &#32;&#32;&#32;&#32;AddTypeLoc(E-&gt;getTypeOperandSourceInfo());
02679 }
02680 
02681 <emphasis role="keywordtype">void</emphasis>&#32;EnqueueVisitor::VisitCXXCatchStmt(<emphasis role="keyword">const</emphasis>&#32;CXXCatchStmt&#32;*S)&#32;{
02682 &#32;&#32;EnqueueChildren(S);
02683 &#32;&#32;AddDecl(S-&gt;getExceptionDecl());
02684 }
02685 
02686 <emphasis role="keywordtype">void</emphasis>&#32;EnqueueVisitor::VisitCXXForRangeStmt(<emphasis role="keyword">const</emphasis>&#32;CXXForRangeStmt&#32;*S)&#32;{
02687 &#32;&#32;AddStmt(S-&gt;getBody());
02688 &#32;&#32;AddStmt(S-&gt;getRangeInit());
02689 &#32;&#32;AddDecl(S-&gt;getLoopVariable());
02690 }
02691 
02692 <emphasis role="keywordtype">void</emphasis>&#32;EnqueueVisitor::VisitDeclRefExpr(<emphasis role="keyword">const</emphasis>&#32;DeclRefExpr&#32;*DR)&#32;{
02693 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(DR-&gt;hasExplicitTemplateArgs())
02694 &#32;&#32;&#32;&#32;AddExplicitTemplateArgs(DR-&gt;getTemplateArgs(),&#32;DR-&gt;getNumTemplateArgs());
02695 &#32;&#32;WL.push_back(DeclRefExprParts(DR,&#32;Parent));
02696 }
02697 <emphasis role="keywordtype">void</emphasis>&#32;EnqueueVisitor::VisitDependentScopeDeclRefExpr(
02698 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;DependentScopeDeclRefExpr&#32;*E)&#32;{
02699 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(E-&gt;hasExplicitTemplateArgs())
02700 &#32;&#32;&#32;&#32;AddExplicitTemplateArgs(E-&gt;getTemplateArgs(),&#32;E-&gt;getNumTemplateArgs());
02701 &#32;&#32;AddDeclarationNameInfo(E);
02702 &#32;&#32;AddNestedNameSpecifierLoc(E-&gt;getQualifierLoc());
02703 }
02704 <emphasis role="keywordtype">void</emphasis>&#32;EnqueueVisitor::VisitDeclStmt(<emphasis role="keyword">const</emphasis>&#32;DeclStmt&#32;*S)&#32;{
02705 &#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;size&#32;=&#32;WL.size();
02706 &#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;isFirst&#32;=&#32;<emphasis role="keyword">true</emphasis>;
02707 &#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;*D&#32;:&#32;S-&gt;decls())&#32;{
02708 &#32;&#32;&#32;&#32;AddDecl(D,&#32;isFirst);
02709 &#32;&#32;&#32;&#32;isFirst&#32;=&#32;<emphasis role="keyword">false</emphasis>;
02710 &#32;&#32;}
02711 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(size&#32;==&#32;WL.size())
02712 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
02713 &#32;&#32;<emphasis role="comment">//&#32;Now&#32;reverse&#32;the&#32;entries&#32;we&#32;just&#32;added.&#32;&#32;This&#32;will&#32;match&#32;the&#32;DFS</emphasis>
02714 &#32;&#32;<emphasis role="comment">//&#32;ordering&#32;performed&#32;by&#32;the&#32;worklist.</emphasis>
02715 &#32;&#32;VisitorWorkList::iterator&#32;I&#32;=&#32;WL.begin()&#32;+&#32;size,&#32;E&#32;=&#32;WL.end();
02716 &#32;&#32;std::reverse(I,&#32;E);
02717 }
02718 <emphasis role="keywordtype">void</emphasis>&#32;EnqueueVisitor::VisitDesignatedInitExpr(<emphasis role="keyword">const</emphasis>&#32;DesignatedInitExpr&#32;*E)&#32;{
02719 &#32;&#32;AddStmt(E-&gt;getInit());
02720 &#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;DesignatedInitExpr::Designator&#32;&amp;D&#32;:
02721 &#32;&#32;&#32;&#32;&#32;&#32;&#32;llvm::reverse(E-&gt;designators()))&#32;{
02722 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(D.isFieldDesignator())&#32;{
02723 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(FieldDecl&#32;*Field&#32;=&#32;D.getField())
02724 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;AddMemberRef(Field,&#32;D.getFieldLoc());
02725 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">continue</emphasis>;
02726 &#32;&#32;&#32;&#32;}
02727 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(D.isArrayDesignator())&#32;{
02728 &#32;&#32;&#32;&#32;&#32;&#32;AddStmt(E-&gt;getArrayIndex(D));
02729 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">continue</emphasis>;
02730 &#32;&#32;&#32;&#32;}
02731 &#32;&#32;&#32;&#32;assert(D.isArrayRangeDesignator()&#32;&amp;&amp;&#32;<emphasis role="stringliteral">&quot;Unknown&#32;designator&#32;kind&quot;</emphasis>);
02732 &#32;&#32;&#32;&#32;AddStmt(E-&gt;getArrayRangeEnd(D));
02733 &#32;&#32;&#32;&#32;AddStmt(E-&gt;getArrayRangeStart(D));
02734 &#32;&#32;}
02735 }
02736 <emphasis role="keywordtype">void</emphasis>&#32;EnqueueVisitor::VisitExplicitCastExpr(<emphasis role="keyword">const</emphasis>&#32;ExplicitCastExpr&#32;*E)&#32;{
02737 &#32;&#32;EnqueueChildren(E);
02738 &#32;&#32;AddTypeLoc(E-&gt;getTypeInfoAsWritten());
02739 }
02740 <emphasis role="keywordtype">void</emphasis>&#32;EnqueueVisitor::VisitForStmt(<emphasis role="keyword">const</emphasis>&#32;ForStmt&#32;*FS)&#32;{
02741 &#32;&#32;AddStmt(FS-&gt;getBody());
02742 &#32;&#32;AddStmt(FS-&gt;getInc());
02743 &#32;&#32;AddStmt(FS-&gt;getCond());
02744 &#32;&#32;AddDecl(FS-&gt;getConditionVariable());
02745 &#32;&#32;AddStmt(FS-&gt;getInit());
02746 }
02747 <emphasis role="keywordtype">void</emphasis>&#32;EnqueueVisitor::VisitGotoStmt(<emphasis role="keyword">const</emphasis>&#32;GotoStmt&#32;*<link linkend="_namespacelibscanbuild_1_1intercept_1a307b2d7b862024676bdb2673d5595776">GS</link>)&#32;{
02748 &#32;&#32;WL.push_back(LabelRefVisit(<link linkend="_namespacelibscanbuild_1_1intercept_1a307b2d7b862024676bdb2673d5595776">GS</link>-&gt;getLabel(),&#32;<link linkend="_namespacelibscanbuild_1_1intercept_1a307b2d7b862024676bdb2673d5595776">GS</link>-&gt;getLabelLoc(),&#32;Parent));
02749 }
02750 <emphasis role="keywordtype">void</emphasis>&#32;EnqueueVisitor::VisitIfStmt(<emphasis role="keyword">const</emphasis>&#32;IfStmt&#32;*If)&#32;{
02751 &#32;&#32;AddStmt(If-&gt;getElse());
02752 &#32;&#32;AddStmt(If-&gt;getThen());
02753 &#32;&#32;AddStmt(If-&gt;getCond());
02754 &#32;&#32;AddStmt(If-&gt;getInit());
02755 &#32;&#32;AddDecl(If-&gt;getConditionVariable());
02756 }
02757 <emphasis role="keywordtype">void</emphasis>&#32;EnqueueVisitor::VisitInitListExpr(<emphasis role="keyword">const</emphasis>&#32;InitListExpr&#32;*IE)&#32;{
02758 &#32;&#32;<emphasis role="comment">//&#32;We&#32;care&#32;about&#32;the&#32;syntactic&#32;form&#32;of&#32;the&#32;initializer&#32;list,&#32;only.</emphasis>
02759 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(InitListExpr&#32;*Syntactic&#32;=&#32;IE-&gt;getSyntacticForm())
02760 &#32;&#32;&#32;&#32;IE&#32;=&#32;Syntactic;
02761 &#32;&#32;EnqueueChildren(IE);
02762 }
02763 <emphasis role="keywordtype">void</emphasis>&#32;EnqueueVisitor::VisitMemberExpr(<emphasis role="keyword">const</emphasis>&#32;MemberExpr&#32;*M)&#32;{
02764 &#32;&#32;WL.push_back(MemberExprParts(M,&#32;Parent));
02765 
02766 &#32;&#32;<emphasis role="comment">//&#32;If&#32;the&#32;base&#32;of&#32;the&#32;member&#32;access&#32;expression&#32;is&#32;an&#32;implicit&#32;&apos;this&apos;,&#32;don&apos;t</emphasis>
02767 &#32;&#32;<emphasis role="comment">//&#32;visit&#32;it.</emphasis>
02768 &#32;&#32;<emphasis role="comment">//&#32;FIXME:&#32;If&#32;we&#32;ever&#32;want&#32;to&#32;show&#32;these&#32;implicit&#32;accesses,&#32;this&#32;will&#32;be</emphasis>
02769 &#32;&#32;<emphasis role="comment">//&#32;unfortunate.&#32;However,&#32;clang_getCursor()&#32;relies&#32;on&#32;this&#32;behavior.</emphasis>
02770 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(M-&gt;isImplicitAccess())
02771 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
02772 
02773 &#32;&#32;<emphasis role="comment">//&#32;Ignore&#32;base&#32;anonymous&#32;struct/union&#32;fields,&#32;otherwise&#32;they&#32;will&#32;shadow&#32;the</emphasis>
02774 &#32;&#32;<emphasis role="comment">//&#32;real&#32;field&#32;that&#32;we&#32;are&#32;interested&#32;in.</emphasis>
02775 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="keyword">auto</emphasis>&#32;*SubME&#32;=&#32;dyn_cast&lt;MemberExpr&gt;(M-&gt;getBase()))&#32;{
02776 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="keyword">auto</emphasis>&#32;*FD&#32;=&#32;dyn_cast_or_null&lt;FieldDecl&gt;(SubME-&gt;getMemberDecl()))&#32;{
02777 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(FD-&gt;isAnonymousStructOrUnion())&#32;{
02778 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;AddStmt(SubME-&gt;getBase());
02779 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
02780 &#32;&#32;&#32;&#32;&#32;&#32;}
02781 &#32;&#32;&#32;&#32;}
02782 &#32;&#32;}
02783 
02784 &#32;&#32;AddStmt(M-&gt;getBase());
02785 }
02786 <emphasis role="keywordtype">void</emphasis>&#32;EnqueueVisitor::VisitObjCEncodeExpr(<emphasis role="keyword">const</emphasis>&#32;ObjCEncodeExpr&#32;*E)&#32;{
02787 &#32;&#32;AddTypeLoc(E-&gt;getEncodedTypeSourceInfo());
02788 }
02789 <emphasis role="keywordtype">void</emphasis>&#32;EnqueueVisitor::VisitObjCMessageExpr(<emphasis role="keyword">const</emphasis>&#32;ObjCMessageExpr&#32;*M)&#32;{
02790 &#32;&#32;EnqueueChildren(M);
02791 &#32;&#32;AddTypeLoc(M-&gt;getClassReceiverTypeInfo());
02792 }
02793 <emphasis role="keywordtype">void</emphasis>&#32;EnqueueVisitor::VisitOffsetOfExpr(<emphasis role="keyword">const</emphasis>&#32;OffsetOfExpr&#32;*E)&#32;{
02794 &#32;&#32;<emphasis role="comment">//&#32;Visit&#32;the&#32;components&#32;of&#32;the&#32;offsetof&#32;expression.</emphasis>
02795 &#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">unsigned</emphasis>&#32;N&#32;=&#32;E-&gt;getNumComponents(),&#32;I&#32;=&#32;N;&#32;I&#32;&gt;&#32;0;&#32;--I)&#32;{
02796 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;OffsetOfNode&#32;&amp;Node&#32;=&#32;E-&gt;getComponent(I&#32;-&#32;1);
02797 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(Node.getKind())&#32;{
02798 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;OffsetOfNode::Array:
02799 &#32;&#32;&#32;&#32;&#32;&#32;AddStmt(E-&gt;getIndexExpr(Node.getArrayExprIndex()));
02800 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
02801 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;OffsetOfNode::Field:
02802 &#32;&#32;&#32;&#32;&#32;&#32;AddMemberRef(Node.getField(),&#32;Node.getSourceRange().getEnd());
02803 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
02804 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;OffsetOfNode::Identifier:
02805 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;OffsetOfNode::Base:
02806 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">continue</emphasis>;
02807 &#32;&#32;&#32;&#32;}
02808 &#32;&#32;}
02809 &#32;&#32;<emphasis role="comment">//&#32;Visit&#32;the&#32;type&#32;into&#32;which&#32;we&apos;re&#32;computing&#32;the&#32;offset.</emphasis>
02810 &#32;&#32;AddTypeLoc(E-&gt;getTypeSourceInfo());
02811 }
02812 <emphasis role="keywordtype">void</emphasis>&#32;EnqueueVisitor::VisitOverloadExpr(<emphasis role="keyword">const</emphasis>&#32;OverloadExpr&#32;*E)&#32;{
02813 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(E-&gt;hasExplicitTemplateArgs())
02814 &#32;&#32;&#32;&#32;AddExplicitTemplateArgs(E-&gt;getTemplateArgs(),&#32;E-&gt;getNumTemplateArgs());
02815 &#32;&#32;WL.push_back(OverloadExprParts(E,&#32;Parent));
02816 }
02817 <emphasis role="keywordtype">void</emphasis>&#32;EnqueueVisitor::VisitUnaryExprOrTypeTraitExpr(
02818 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;UnaryExprOrTypeTraitExpr&#32;*E)&#32;{
02819 &#32;&#32;EnqueueChildren(E);
02820 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(E-&gt;isArgumentType())
02821 &#32;&#32;&#32;&#32;AddTypeLoc(E-&gt;getArgumentTypeInfo());
02822 }
02823 <emphasis role="keywordtype">void</emphasis>&#32;EnqueueVisitor::VisitStmt(<emphasis role="keyword">const</emphasis>&#32;Stmt&#32;*S)&#32;{&#32;EnqueueChildren(S);&#32;}
02824 <emphasis role="keywordtype">void</emphasis>&#32;EnqueueVisitor::VisitSwitchStmt(<emphasis role="keyword">const</emphasis>&#32;SwitchStmt&#32;*S)&#32;{
02825 &#32;&#32;AddStmt(S-&gt;getBody());
02826 &#32;&#32;AddStmt(S-&gt;getCond());
02827 &#32;&#32;AddDecl(S-&gt;getConditionVariable());
02828 }
02829 
02830 <emphasis role="keywordtype">void</emphasis>&#32;EnqueueVisitor::VisitWhileStmt(<emphasis role="keyword">const</emphasis>&#32;WhileStmt&#32;*W)&#32;{
02831 &#32;&#32;AddStmt(W-&gt;getBody());
02832 &#32;&#32;AddStmt(W-&gt;getCond());
02833 &#32;&#32;AddDecl(W-&gt;getConditionVariable());
02834 }
02835 
02836 <emphasis role="keywordtype">void</emphasis>&#32;EnqueueVisitor::VisitTypeTraitExpr(<emphasis role="keyword">const</emphasis>&#32;TypeTraitExpr&#32;*E)&#32;{
02837 &#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">unsigned</emphasis>&#32;I&#32;=&#32;E-&gt;getNumArgs();&#32;I&#32;&gt;&#32;0;&#32;--I)
02838 &#32;&#32;&#32;&#32;AddTypeLoc(E-&gt;getArg(I&#32;-&#32;1));
02839 }
02840 
02841 <emphasis role="keywordtype">void</emphasis>&#32;EnqueueVisitor::VisitArrayTypeTraitExpr(<emphasis role="keyword">const</emphasis>&#32;ArrayTypeTraitExpr&#32;*E)&#32;{
02842 &#32;&#32;AddTypeLoc(E-&gt;getQueriedTypeSourceInfo());
02843 }
02844 
02845 <emphasis role="keywordtype">void</emphasis>&#32;EnqueueVisitor::VisitExpressionTraitExpr(<emphasis role="keyword">const</emphasis>&#32;ExpressionTraitExpr&#32;*E)&#32;{
02846 &#32;&#32;EnqueueChildren(E);
02847 }
02848 
02849 <emphasis role="keywordtype">void</emphasis>&#32;EnqueueVisitor::VisitUnresolvedMemberExpr(<emphasis role="keyword">const</emphasis>&#32;UnresolvedMemberExpr&#32;*U)&#32;{
02850 &#32;&#32;VisitOverloadExpr(U);
02851 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!U-&gt;isImplicitAccess())
02852 &#32;&#32;&#32;&#32;AddStmt(U-&gt;getBase());
02853 }
02854 <emphasis role="keywordtype">void</emphasis>&#32;EnqueueVisitor::VisitVAArgExpr(<emphasis role="keyword">const</emphasis>&#32;VAArgExpr&#32;*E)&#32;{
02855 &#32;&#32;AddStmt(E-&gt;getSubExpr());
02856 &#32;&#32;AddTypeLoc(E-&gt;getWrittenTypeInfo());
02857 }
02858 <emphasis role="keywordtype">void</emphasis>&#32;EnqueueVisitor::VisitSizeOfPackExpr(<emphasis role="keyword">const</emphasis>&#32;SizeOfPackExpr&#32;*E)&#32;{
02859 &#32;&#32;WL.push_back(SizeOfPackExprParts(E,&#32;Parent));
02860 }
02861 <emphasis role="keywordtype">void</emphasis>&#32;EnqueueVisitor::VisitOpaqueValueExpr(<emphasis role="keyword">const</emphasis>&#32;OpaqueValueExpr&#32;*E)&#32;{
02862 &#32;&#32;<emphasis role="comment">//&#32;If&#32;the&#32;opaque&#32;value&#32;has&#32;a&#32;source&#32;expression,&#32;just&#32;transparently</emphasis>
02863 &#32;&#32;<emphasis role="comment">//&#32;visit&#32;that.&#32;&#32;This&#32;is&#32;useful&#32;for&#32;(e.g.)&#32;pseudo-object&#32;expressions.</emphasis>
02864 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(Expr&#32;*SourceExpr&#32;=&#32;E-&gt;getSourceExpr())
02865 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;Visit(SourceExpr);
02866 }
02867 <emphasis role="keywordtype">void</emphasis>&#32;EnqueueVisitor::VisitLambdaExpr(<emphasis role="keyword">const</emphasis>&#32;LambdaExpr&#32;*E)&#32;{
02868 &#32;&#32;AddStmt(E-&gt;getBody());
02869 &#32;&#32;WL.push_back(LambdaExprParts(E,&#32;Parent));
02870 }
02871 <emphasis role="keywordtype">void</emphasis>&#32;EnqueueVisitor::VisitPseudoObjectExpr(<emphasis role="keyword">const</emphasis>&#32;PseudoObjectExpr&#32;*E)&#32;{
02872 &#32;&#32;<emphasis role="comment">//&#32;Treat&#32;the&#32;expression&#32;like&#32;its&#32;syntactic&#32;form.</emphasis>
02873 &#32;&#32;Visit(E-&gt;getSyntacticForm());
02874 }
02875 
02876 <emphasis role="keywordtype">void</emphasis>&#32;EnqueueVisitor::VisitOMPExecutableDirective(
02877 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;OMPExecutableDirective&#32;*D)&#32;{
02878 &#32;&#32;EnqueueChildren(D);
02879 &#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(ArrayRef&lt;OMPClause&#32;*&gt;::iterator&#32;I&#32;=&#32;D-&gt;clauses().begin(),
02880 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;E&#32;=&#32;D-&gt;clauses().end();
02881 &#32;&#32;&#32;&#32;&#32;&#32;&#32;I&#32;!=&#32;E;&#32;++I)
02882 &#32;&#32;&#32;&#32;EnqueueChildren(*I);
02883 }
02884 
02885 <emphasis role="keywordtype">void</emphasis>&#32;EnqueueVisitor::VisitOMPLoopBasedDirective(
02886 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;OMPLoopBasedDirective&#32;*D)&#32;{
02887 &#32;&#32;VisitOMPExecutableDirective(D);
02888 }
02889 
02890 <emphasis role="keywordtype">void</emphasis>&#32;EnqueueVisitor::VisitOMPLoopDirective(<emphasis role="keyword">const</emphasis>&#32;OMPLoopDirective&#32;*D)&#32;{
02891 &#32;&#32;VisitOMPLoopBasedDirective(D);
02892 }
02893 
02894 <emphasis role="keywordtype">void</emphasis>&#32;EnqueueVisitor::VisitOMPParallelDirective(<emphasis role="keyword">const</emphasis>&#32;OMPParallelDirective&#32;*D)&#32;{
02895 &#32;&#32;VisitOMPExecutableDirective(D);
02896 }
02897 
02898 <emphasis role="keywordtype">void</emphasis>&#32;EnqueueVisitor::VisitOMPSimdDirective(<emphasis role="keyword">const</emphasis>&#32;OMPSimdDirective&#32;*D)&#32;{
02899 &#32;&#32;VisitOMPLoopDirective(D);
02900 }
02901 
02902 <emphasis role="keywordtype">void</emphasis>&#32;EnqueueVisitor::VisitOMPTileDirective(<emphasis role="keyword">const</emphasis>&#32;OMPTileDirective&#32;*D)&#32;{
02903 &#32;&#32;VisitOMPLoopBasedDirective(D);
02904 }
02905 
02906 <emphasis role="keywordtype">void</emphasis>&#32;EnqueueVisitor::VisitOMPUnrollDirective(<emphasis role="keyword">const</emphasis>&#32;OMPUnrollDirective&#32;*D)&#32;{
02907 &#32;&#32;VisitOMPLoopBasedDirective(D);
02908 }
02909 
02910 <emphasis role="keywordtype">void</emphasis>&#32;EnqueueVisitor::VisitOMPForDirective(<emphasis role="keyword">const</emphasis>&#32;OMPForDirective&#32;*D)&#32;{
02911 &#32;&#32;VisitOMPLoopDirective(D);
02912 }
02913 
02914 <emphasis role="keywordtype">void</emphasis>&#32;EnqueueVisitor::VisitOMPForSimdDirective(<emphasis role="keyword">const</emphasis>&#32;OMPForSimdDirective&#32;*D)&#32;{
02915 &#32;&#32;VisitOMPLoopDirective(D);
02916 }
02917 
02918 <emphasis role="keywordtype">void</emphasis>&#32;EnqueueVisitor::VisitOMPSectionsDirective(<emphasis role="keyword">const</emphasis>&#32;OMPSectionsDirective&#32;*D)&#32;{
02919 &#32;&#32;VisitOMPExecutableDirective(D);
02920 }
02921 
02922 <emphasis role="keywordtype">void</emphasis>&#32;EnqueueVisitor::VisitOMPSectionDirective(<emphasis role="keyword">const</emphasis>&#32;OMPSectionDirective&#32;*D)&#32;{
02923 &#32;&#32;VisitOMPExecutableDirective(D);
02924 }
02925 
02926 <emphasis role="keywordtype">void</emphasis>&#32;EnqueueVisitor::VisitOMPSingleDirective(<emphasis role="keyword">const</emphasis>&#32;OMPSingleDirective&#32;*D)&#32;{
02927 &#32;&#32;VisitOMPExecutableDirective(D);
02928 }
02929 
02930 <emphasis role="keywordtype">void</emphasis>&#32;EnqueueVisitor::VisitOMPMasterDirective(<emphasis role="keyword">const</emphasis>&#32;OMPMasterDirective&#32;*D)&#32;{
02931 &#32;&#32;VisitOMPExecutableDirective(D);
02932 }
02933 
02934 <emphasis role="keywordtype">void</emphasis>&#32;EnqueueVisitor::VisitOMPCriticalDirective(<emphasis role="keyword">const</emphasis>&#32;OMPCriticalDirective&#32;*D)&#32;{
02935 &#32;&#32;VisitOMPExecutableDirective(D);
02936 &#32;&#32;AddDeclarationNameInfo(D);
02937 }
02938 
02939 <emphasis role="keywordtype">void</emphasis>&#32;EnqueueVisitor::VisitOMPParallelForDirective(
02940 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;OMPParallelForDirective&#32;*D)&#32;{
02941 &#32;&#32;VisitOMPLoopDirective(D);
02942 }
02943 
02944 <emphasis role="keywordtype">void</emphasis>&#32;EnqueueVisitor::VisitOMPParallelForSimdDirective(
02945 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;OMPParallelForSimdDirective&#32;*D)&#32;{
02946 &#32;&#32;VisitOMPLoopDirective(D);
02947 }
02948 
02949 <emphasis role="keywordtype">void</emphasis>&#32;EnqueueVisitor::VisitOMPParallelMasterDirective(
02950 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;OMPParallelMasterDirective&#32;*D)&#32;{
02951 &#32;&#32;VisitOMPExecutableDirective(D);
02952 }
02953 
02954 <emphasis role="keywordtype">void</emphasis>&#32;EnqueueVisitor::VisitOMPParallelSectionsDirective(
02955 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;OMPParallelSectionsDirective&#32;*D)&#32;{
02956 &#32;&#32;VisitOMPExecutableDirective(D);
02957 }
02958 
02959 <emphasis role="keywordtype">void</emphasis>&#32;EnqueueVisitor::VisitOMPTaskDirective(<emphasis role="keyword">const</emphasis>&#32;OMPTaskDirective&#32;*D)&#32;{
02960 &#32;&#32;VisitOMPExecutableDirective(D);
02961 }
02962 
02963 <emphasis role="keywordtype">void</emphasis>&#32;EnqueueVisitor::VisitOMPTaskyieldDirective(
02964 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;OMPTaskyieldDirective&#32;*D)&#32;{
02965 &#32;&#32;VisitOMPExecutableDirective(D);
02966 }
02967 
02968 <emphasis role="keywordtype">void</emphasis>&#32;EnqueueVisitor::VisitOMPBarrierDirective(<emphasis role="keyword">const</emphasis>&#32;OMPBarrierDirective&#32;*D)&#32;{
02969 &#32;&#32;VisitOMPExecutableDirective(D);
02970 }
02971 
02972 <emphasis role="keywordtype">void</emphasis>&#32;EnqueueVisitor::VisitOMPTaskwaitDirective(<emphasis role="keyword">const</emphasis>&#32;OMPTaskwaitDirective&#32;*D)&#32;{
02973 &#32;&#32;VisitOMPExecutableDirective(D);
02974 }
02975 
02976 <emphasis role="keywordtype">void</emphasis>&#32;EnqueueVisitor::VisitOMPTaskgroupDirective(
02977 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;OMPTaskgroupDirective&#32;*D)&#32;{
02978 &#32;&#32;VisitOMPExecutableDirective(D);
02979 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;Expr&#32;*E&#32;=&#32;D-&gt;getReductionRef())
02980 &#32;&#32;&#32;&#32;VisitStmt(E);
02981 }
02982 
02983 <emphasis role="keywordtype">void</emphasis>&#32;EnqueueVisitor::VisitOMPFlushDirective(<emphasis role="keyword">const</emphasis>&#32;OMPFlushDirective&#32;*D)&#32;{
02984 &#32;&#32;VisitOMPExecutableDirective(D);
02985 }
02986 
02987 <emphasis role="keywordtype">void</emphasis>&#32;EnqueueVisitor::VisitOMPDepobjDirective(<emphasis role="keyword">const</emphasis>&#32;OMPDepobjDirective&#32;*D)&#32;{
02988 &#32;&#32;VisitOMPExecutableDirective(D);
02989 }
02990 
02991 <emphasis role="keywordtype">void</emphasis>&#32;EnqueueVisitor::VisitOMPScanDirective(<emphasis role="keyword">const</emphasis>&#32;OMPScanDirective&#32;*D)&#32;{
02992 &#32;&#32;VisitOMPExecutableDirective(D);
02993 }
02994 
02995 <emphasis role="keywordtype">void</emphasis>&#32;EnqueueVisitor::VisitOMPOrderedDirective(<emphasis role="keyword">const</emphasis>&#32;OMPOrderedDirective&#32;*D)&#32;{
02996 &#32;&#32;VisitOMPExecutableDirective(D);
02997 }
02998 
02999 <emphasis role="keywordtype">void</emphasis>&#32;EnqueueVisitor::VisitOMPAtomicDirective(<emphasis role="keyword">const</emphasis>&#32;OMPAtomicDirective&#32;*D)&#32;{
03000 &#32;&#32;VisitOMPExecutableDirective(D);
03001 }
03002 
03003 <emphasis role="keywordtype">void</emphasis>&#32;EnqueueVisitor::VisitOMPTargetDirective(<emphasis role="keyword">const</emphasis>&#32;OMPTargetDirective&#32;*D)&#32;{
03004 &#32;&#32;VisitOMPExecutableDirective(D);
03005 }
03006 
03007 <emphasis role="keywordtype">void</emphasis>&#32;EnqueueVisitor::VisitOMPTargetDataDirective(
03008 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;OMPTargetDataDirective&#32;*D)&#32;{
03009 &#32;&#32;VisitOMPExecutableDirective(D);
03010 }
03011 
03012 <emphasis role="keywordtype">void</emphasis>&#32;EnqueueVisitor::VisitOMPTargetEnterDataDirective(
03013 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;OMPTargetEnterDataDirective&#32;*D)&#32;{
03014 &#32;&#32;VisitOMPExecutableDirective(D);
03015 }
03016 
03017 <emphasis role="keywordtype">void</emphasis>&#32;EnqueueVisitor::VisitOMPTargetExitDataDirective(
03018 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;OMPTargetExitDataDirective&#32;*D)&#32;{
03019 &#32;&#32;VisitOMPExecutableDirective(D);
03020 }
03021 
03022 <emphasis role="keywordtype">void</emphasis>&#32;EnqueueVisitor::VisitOMPTargetParallelDirective(
03023 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;OMPTargetParallelDirective&#32;*D)&#32;{
03024 &#32;&#32;VisitOMPExecutableDirective(D);
03025 }
03026 
03027 <emphasis role="keywordtype">void</emphasis>&#32;EnqueueVisitor::VisitOMPTargetParallelForDirective(
03028 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;OMPTargetParallelForDirective&#32;*D)&#32;{
03029 &#32;&#32;VisitOMPLoopDirective(D);
03030 }
03031 
03032 <emphasis role="keywordtype">void</emphasis>&#32;EnqueueVisitor::VisitOMPTeamsDirective(<emphasis role="keyword">const</emphasis>&#32;OMPTeamsDirective&#32;*D)&#32;{
03033 &#32;&#32;VisitOMPExecutableDirective(D);
03034 }
03035 
03036 <emphasis role="keywordtype">void</emphasis>&#32;EnqueueVisitor::VisitOMPCancellationPointDirective(
03037 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;OMPCancellationPointDirective&#32;*D)&#32;{
03038 &#32;&#32;VisitOMPExecutableDirective(D);
03039 }
03040 
03041 <emphasis role="keywordtype">void</emphasis>&#32;EnqueueVisitor::VisitOMPCancelDirective(<emphasis role="keyword">const</emphasis>&#32;OMPCancelDirective&#32;*D)&#32;{
03042 &#32;&#32;VisitOMPExecutableDirective(D);
03043 }
03044 
03045 <emphasis role="keywordtype">void</emphasis>&#32;EnqueueVisitor::VisitOMPTaskLoopDirective(<emphasis role="keyword">const</emphasis>&#32;OMPTaskLoopDirective&#32;*D)&#32;{
03046 &#32;&#32;VisitOMPLoopDirective(D);
03047 }
03048 
03049 <emphasis role="keywordtype">void</emphasis>&#32;EnqueueVisitor::VisitOMPTaskLoopSimdDirective(
03050 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;OMPTaskLoopSimdDirective&#32;*D)&#32;{
03051 &#32;&#32;VisitOMPLoopDirective(D);
03052 }
03053 
03054 <emphasis role="keywordtype">void</emphasis>&#32;EnqueueVisitor::VisitOMPMasterTaskLoopDirective(
03055 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;OMPMasterTaskLoopDirective&#32;*D)&#32;{
03056 &#32;&#32;VisitOMPLoopDirective(D);
03057 }
03058 
03059 <emphasis role="keywordtype">void</emphasis>&#32;EnqueueVisitor::VisitOMPMasterTaskLoopSimdDirective(
03060 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;OMPMasterTaskLoopSimdDirective&#32;*D)&#32;{
03061 &#32;&#32;VisitOMPLoopDirective(D);
03062 }
03063 
03064 <emphasis role="keywordtype">void</emphasis>&#32;EnqueueVisitor::VisitOMPParallelMasterTaskLoopDirective(
03065 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;OMPParallelMasterTaskLoopDirective&#32;*D)&#32;{
03066 &#32;&#32;VisitOMPLoopDirective(D);
03067 }
03068 
03069 <emphasis role="keywordtype">void</emphasis>&#32;EnqueueVisitor::VisitOMPParallelMasterTaskLoopSimdDirective(
03070 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;OMPParallelMasterTaskLoopSimdDirective&#32;*D)&#32;{
03071 &#32;&#32;VisitOMPLoopDirective(D);
03072 }
03073 
03074 <emphasis role="keywordtype">void</emphasis>&#32;EnqueueVisitor::VisitOMPDistributeDirective(
03075 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;OMPDistributeDirective&#32;*D)&#32;{
03076 &#32;&#32;VisitOMPLoopDirective(D);
03077 }
03078 
03079 <emphasis role="keywordtype">void</emphasis>&#32;EnqueueVisitor::VisitOMPDistributeParallelForDirective(
03080 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;OMPDistributeParallelForDirective&#32;*D)&#32;{
03081 &#32;&#32;VisitOMPLoopDirective(D);
03082 }
03083 
03084 <emphasis role="keywordtype">void</emphasis>&#32;EnqueueVisitor::VisitOMPDistributeParallelForSimdDirective(
03085 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;OMPDistributeParallelForSimdDirective&#32;*D)&#32;{
03086 &#32;&#32;VisitOMPLoopDirective(D);
03087 }
03088 
03089 <emphasis role="keywordtype">void</emphasis>&#32;EnqueueVisitor::VisitOMPDistributeSimdDirective(
03090 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;OMPDistributeSimdDirective&#32;*D)&#32;{
03091 &#32;&#32;VisitOMPLoopDirective(D);
03092 }
03093 
03094 <emphasis role="keywordtype">void</emphasis>&#32;EnqueueVisitor::VisitOMPTargetParallelForSimdDirective(
03095 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;OMPTargetParallelForSimdDirective&#32;*D)&#32;{
03096 &#32;&#32;VisitOMPLoopDirective(D);
03097 }
03098 
03099 <emphasis role="keywordtype">void</emphasis>&#32;EnqueueVisitor::VisitOMPTargetSimdDirective(
03100 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;OMPTargetSimdDirective&#32;*D)&#32;{
03101 &#32;&#32;VisitOMPLoopDirective(D);
03102 }
03103 
03104 <emphasis role="keywordtype">void</emphasis>&#32;EnqueueVisitor::VisitOMPTeamsDistributeDirective(
03105 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;OMPTeamsDistributeDirective&#32;*D)&#32;{
03106 &#32;&#32;VisitOMPLoopDirective(D);
03107 }
03108 
03109 <emphasis role="keywordtype">void</emphasis>&#32;EnqueueVisitor::VisitOMPTeamsDistributeSimdDirective(
03110 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;OMPTeamsDistributeSimdDirective&#32;*D)&#32;{
03111 &#32;&#32;VisitOMPLoopDirective(D);
03112 }
03113 
03114 <emphasis role="keywordtype">void</emphasis>&#32;EnqueueVisitor::VisitOMPTeamsDistributeParallelForSimdDirective(
03115 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;OMPTeamsDistributeParallelForSimdDirective&#32;*D)&#32;{
03116 &#32;&#32;VisitOMPLoopDirective(D);
03117 }
03118 
03119 <emphasis role="keywordtype">void</emphasis>&#32;EnqueueVisitor::VisitOMPTeamsDistributeParallelForDirective(
03120 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;OMPTeamsDistributeParallelForDirective&#32;*D)&#32;{
03121 &#32;&#32;VisitOMPLoopDirective(D);
03122 }
03123 
03124 <emphasis role="keywordtype">void</emphasis>&#32;EnqueueVisitor::VisitOMPTargetTeamsDirective(
03125 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;OMPTargetTeamsDirective&#32;*D)&#32;{
03126 &#32;&#32;VisitOMPExecutableDirective(D);
03127 }
03128 
03129 <emphasis role="keywordtype">void</emphasis>&#32;EnqueueVisitor::VisitOMPTargetTeamsDistributeDirective(
03130 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;OMPTargetTeamsDistributeDirective&#32;*D)&#32;{
03131 &#32;&#32;VisitOMPLoopDirective(D);
03132 }
03133 
03134 <emphasis role="keywordtype">void</emphasis>&#32;EnqueueVisitor::VisitOMPTargetTeamsDistributeParallelForDirective(
03135 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;OMPTargetTeamsDistributeParallelForDirective&#32;*D)&#32;{
03136 &#32;&#32;VisitOMPLoopDirective(D);
03137 }
03138 
03139 <emphasis role="keywordtype">void</emphasis>&#32;EnqueueVisitor::VisitOMPTargetTeamsDistributeParallelForSimdDirective(
03140 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;OMPTargetTeamsDistributeParallelForSimdDirective&#32;*D)&#32;{
03141 &#32;&#32;VisitOMPLoopDirective(D);
03142 }
03143 
03144 <emphasis role="keywordtype">void</emphasis>&#32;EnqueueVisitor::VisitOMPTargetTeamsDistributeSimdDirective(
03145 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;OMPTargetTeamsDistributeSimdDirective&#32;*D)&#32;{
03146 &#32;&#32;VisitOMPLoopDirective(D);
03147 }
03148 
<anchor xml:id="__c_index_8cpp_source_1l03149"/><link linkend="_classclang_1_1cxcursor_1_1_cursor_visitor_1a7a599a85807e447ee974ccd7a65163cc">03149</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classclang_1_1cxcursor_1_1_cursor_visitor_1a7a599a85807e447ee974ccd7a65163cc">CursorVisitor::EnqueueWorkList</link>(<link linkend="_namespaceclang_1_1cxcursor_1aab4e24121016c9d383e539a5938cb528">VisitorWorkList</link>&#32;&amp;WL,&#32;<emphasis role="keyword">const</emphasis>&#32;Stmt&#32;*S)&#32;{
03150 &#32;&#32;EnqueueVisitor(WL,&#32;<link linkend="_namespaceclang_1_1cxcursor_1ab61ec2059175833672e8e78a376bb218">MakeCXCursor</link>(S,&#32;StmtParent,&#32;TU,&#32;RegionOfInterest))
03151 &#32;&#32;&#32;&#32;&#32;&#32;.Visit(S);
03152 }
03153 
<anchor xml:id="__c_index_8cpp_source_1l03154"/><link linkend="_classclang_1_1cxcursor_1_1_cursor_visitor_1a8551795875ea0a81cce4cad0becbe683">03154</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classclang_1_1cxcursor_1_1_cursor_visitor_1a8551795875ea0a81cce4cad0becbe683">CursorVisitor::IsInRegionOfInterest</link>(CXCursor&#32;C)&#32;{
03155 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(RegionOfInterest.isValid())&#32;{
03156 &#32;&#32;&#32;&#32;SourceRange&#32;Range&#32;=&#32;getRawCursorExtent(C);
03157 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(Range.isInvalid()&#32;||&#32;CompareRegionOfInterest(Range))
03158 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
03159 &#32;&#32;}
03160 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
03161 }
03162 
<anchor xml:id="__c_index_8cpp_source_1l03163"/><link linkend="_classclang_1_1cxcursor_1_1_cursor_visitor_1a63c6b8681070b8b8ae976c37ae90d2a5">03163</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classclang_1_1cxcursor_1_1_cursor_visitor_1a63c6b8681070b8b8ae976c37ae90d2a5">CursorVisitor::RunVisitorWorkList</link>(<link linkend="_namespaceclang_1_1cxcursor_1aab4e24121016c9d383e539a5938cb528">VisitorWorkList</link>&#32;&amp;WL)&#32;{
03164 &#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(!WL.empty())&#32;{
03165 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Dequeue&#32;the&#32;worklist&#32;item.</emphasis>
03166 &#32;&#32;&#32;&#32;<link linkend="_classclang_1_1cxcursor_1_1_visitor_job">VisitorJob</link>&#32;LI&#32;=&#32;WL.pop_back_val();
03167 
03168 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Set&#32;the&#32;Parent&#32;field,&#32;then&#32;back&#32;to&#32;its&#32;old&#32;value&#32;once&#32;we&apos;re&#32;done.</emphasis>
03169 &#32;&#32;&#32;&#32;SetParentRAII&#32;SetParent(Parent,&#32;StmtParent,&#32;LI.<link linkend="_classclang_1_1cxcursor_1_1_visitor_job_1a8d36560caf6be3218295b091a0bcdd55">getParent</link>());
03170 
03171 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(LI.<link linkend="_classclang_1_1cxcursor_1_1_visitor_job_1aee9fca3379d1821e847ce816fef67219">getKind</link>())&#32;{
03172 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_classclang_1_1cxcursor_1_1_visitor_job_1a358d276241e4b5c9c75c3b0c66b0bf92a0015180e463167d7078aa0dc78c224e1">VisitorJob::DeclVisitKind</link>:&#32;{
03173 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;Decl&#32;*D&#32;=&#32;cast&lt;DeclVisit&gt;(&amp;LI)-&gt;get();
03174 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!D)
03175 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">continue</emphasis>;
03176 
03177 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;For&#32;now,&#32;perform&#32;default&#32;visitation&#32;for&#32;Decls.</emphasis>
03178 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(Visit(<link linkend="_namespaceclang_1_1cxcursor_1ab61ec2059175833672e8e78a376bb218">MakeCXCursor</link>(D,&#32;TU,&#32;RegionOfInterest,
03179 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cast&lt;DeclVisit&gt;(&amp;LI)-&gt;isFirst())))
03180 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
03181 
03182 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">continue</emphasis>;
03183 &#32;&#32;&#32;&#32;}
03184 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_classclang_1_1cxcursor_1_1_visitor_job_1a358d276241e4b5c9c75c3b0c66b0bf92a11d9fe5081d3b5eb885fea33416255c6">VisitorJob::ExplicitTemplateArgsVisitKind</link>:&#32;{
03185 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;TemplateArgumentLoc&#32;&amp;Arg&#32;:
03186 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*cast&lt;ExplicitTemplateArgsVisit&gt;(&amp;LI))&#32;{
03187 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(VisitTemplateArgumentLoc(Arg))
03188 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
03189 &#32;&#32;&#32;&#32;&#32;&#32;}
03190 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">continue</emphasis>;
03191 &#32;&#32;&#32;&#32;}
03192 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_classclang_1_1cxcursor_1_1_visitor_job_1a358d276241e4b5c9c75c3b0c66b0bf92adf5c1ced13d3d596c10acfa648a1f752">VisitorJob::TypeLocVisitKind</link>:&#32;{
03193 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Perform&#32;default&#32;visitation&#32;for&#32;TypeLocs.</emphasis>
03194 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(Visit(cast&lt;TypeLocVisit&gt;(&amp;LI)-&gt;<link linkend="_namespacestartfile_1af8790d592af0bdf089efd317cbd70e2e">get</link>()))
03195 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
03196 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">continue</emphasis>;
03197 &#32;&#32;&#32;&#32;}
03198 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_classclang_1_1cxcursor_1_1_visitor_job_1a358d276241e4b5c9c75c3b0c66b0bf92aa00295bf354768aeca538fa4dc91e161">VisitorJob::LabelRefVisitKind</link>:&#32;{
03199 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;LabelDecl&#32;*LS&#32;=&#32;cast&lt;LabelRefVisit&gt;(&amp;LI)-&gt;get();
03200 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(LabelStmt&#32;*stmt&#32;=&#32;LS-&gt;getStmt())&#32;{
03201 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(Visit(<link linkend="_namespaceclang_1_1cxcursor_1a2e83069419ec783a32e4ee2b67d5144a">MakeCursorLabelRef</link>(stmt,&#32;cast&lt;LabelRefVisit&gt;(&amp;LI)-&gt;getLoc(),
03202 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;TU)))&#32;{
03203 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
03204 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
03205 &#32;&#32;&#32;&#32;&#32;&#32;}
03206 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">continue</emphasis>;
03207 &#32;&#32;&#32;&#32;}
03208 
03209 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_classclang_1_1cxcursor_1_1_visitor_job_1a358d276241e4b5c9c75c3b0c66b0bf92a4c1fcd74e3dd7d6c199bf1cbbee68cd1">VisitorJob::NestedNameSpecifierLocVisitKind</link>:&#32;{
03210 &#32;&#32;&#32;&#32;&#32;&#32;NestedNameSpecifierLocVisit&#32;*V&#32;=&#32;cast&lt;NestedNameSpecifierLocVisit&gt;(&amp;LI);
03211 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(VisitNestedNameSpecifierLoc(V-&gt;get()))
03212 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
03213 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">continue</emphasis>;
03214 &#32;&#32;&#32;&#32;}
03215 
03216 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_classclang_1_1cxcursor_1_1_visitor_job_1a358d276241e4b5c9c75c3b0c66b0bf92af50cf21f078e11e9193efa61e3e27956">VisitorJob::DeclarationNameInfoVisitKind</link>:&#32;{
03217 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(VisitDeclarationNameInfo(cast&lt;DeclarationNameInfoVisit&gt;(&amp;LI)-&gt;<link linkend="_namespacestartfile_1af8790d592af0bdf089efd317cbd70e2e">get</link>()))
03218 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
03219 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">continue</emphasis>;
03220 &#32;&#32;&#32;&#32;}
03221 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_classclang_1_1cxcursor_1_1_visitor_job_1a358d276241e4b5c9c75c3b0c66b0bf92a46e96453a10977baa1239dde989c9e1f">VisitorJob::MemberRefVisitKind</link>:&#32;{
03222 &#32;&#32;&#32;&#32;&#32;&#32;MemberRefVisit&#32;*V&#32;=&#32;cast&lt;MemberRefVisit&gt;(&amp;LI);
03223 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(Visit(<link linkend="_namespaceclang_1_1cxcursor_1ad70c49c226f87377bc26fba7a4dbe973">MakeCursorMemberRef</link>(V-&gt;get(),&#32;V-&gt;getLoc(),&#32;TU)))
03224 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
03225 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">continue</emphasis>;
03226 &#32;&#32;&#32;&#32;}
03227 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_classclang_1_1cxcursor_1_1_visitor_job_1a358d276241e4b5c9c75c3b0c66b0bf92ac10e8d81ba4dec533c3597bde1e0e628">VisitorJob::StmtVisitKind</link>:&#32;{
03228 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;Stmt&#32;*S&#32;=&#32;cast&lt;StmtVisit&gt;(&amp;LI)-&gt;get();
03229 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!S)
03230 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">continue</emphasis>;
03231 
03232 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Update&#32;the&#32;current&#32;cursor.</emphasis>
03233 &#32;&#32;&#32;&#32;&#32;&#32;CXCursor&#32;Cursor&#32;=&#32;<link linkend="_namespaceclang_1_1cxcursor_1ab61ec2059175833672e8e78a376bb218">MakeCXCursor</link>(S,&#32;StmtParent,&#32;TU,&#32;RegionOfInterest);
03234 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!IsInRegionOfInterest(Cursor))
03235 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">continue</emphasis>;
03236 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(Visitor(Cursor,&#32;Parent,&#32;ClientData))&#32;{
03237 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXChildVisit_Break:
03238 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
03239 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXChildVisit_Continue:
03240 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
03241 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXChildVisit_Recurse:
03242 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(PostChildrenVisitor)
03243 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;WL.push_back(PostChildrenVisit(<emphasis role="keyword">nullptr</emphasis>,&#32;Cursor));
03244 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;EnqueueWorkList(WL,&#32;S);
03245 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
03246 &#32;&#32;&#32;&#32;&#32;&#32;}
03247 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">continue</emphasis>;
03248 &#32;&#32;&#32;&#32;}
03249 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_classclang_1_1cxcursor_1_1_visitor_job_1a358d276241e4b5c9c75c3b0c66b0bf92a910d3000d5ebd97697b1b2f09ccaf12b">VisitorJob::MemberExprPartsKind</link>:&#32;{
03250 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Handle&#32;the&#32;other&#32;pieces&#32;in&#32;the&#32;MemberExpr&#32;besides&#32;the&#32;base.</emphasis>
03251 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;MemberExpr&#32;*M&#32;=&#32;cast&lt;MemberExprParts&gt;(&amp;LI)-&gt;get();
03252 
03253 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Visit&#32;the&#32;nested-name-specifier</emphasis>
03254 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(NestedNameSpecifierLoc&#32;QualifierLoc&#32;=&#32;M-&gt;getQualifierLoc())
03255 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(VisitNestedNameSpecifierLoc(QualifierLoc))
03256 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
03257 
03258 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Visit&#32;the&#32;declaration&#32;name.</emphasis>
03259 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(VisitDeclarationNameInfo(M-&gt;getMemberNameInfo()))
03260 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
03261 
03262 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Visit&#32;the&#32;explicitly-specified&#32;template&#32;arguments,&#32;if&#32;any.</emphasis>
03263 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(M-&gt;hasExplicitTemplateArgs())&#32;{
03264 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;TemplateArgumentLoc&#32;*Arg&#32;=&#32;M-&gt;getTemplateArgs(),
03265 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*ArgEnd&#32;=&#32;Arg&#32;+&#32;M-&gt;getNumTemplateArgs();
03266 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Arg&#32;!=&#32;ArgEnd;&#32;++Arg)&#32;{
03267 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(VisitTemplateArgumentLoc(*Arg))
03268 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
03269 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
03270 &#32;&#32;&#32;&#32;&#32;&#32;}
03271 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">continue</emphasis>;
03272 &#32;&#32;&#32;&#32;}
03273 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_classclang_1_1cxcursor_1_1_visitor_job_1a358d276241e4b5c9c75c3b0c66b0bf92a5e20f10863531934b9ceb8161fe1d8c5">VisitorJob::DeclRefExprPartsKind</link>:&#32;{
03274 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;DeclRefExpr&#32;*DR&#32;=&#32;cast&lt;DeclRefExprParts&gt;(&amp;LI)-&gt;get();
03275 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Visit&#32;nested-name-specifier,&#32;if&#32;present.</emphasis>
03276 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(NestedNameSpecifierLoc&#32;QualifierLoc&#32;=&#32;DR-&gt;getQualifierLoc())
03277 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(VisitNestedNameSpecifierLoc(QualifierLoc))
03278 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
03279 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Visit&#32;declaration&#32;name.</emphasis>
03280 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(VisitDeclarationNameInfo(DR-&gt;getNameInfo()))
03281 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
03282 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">continue</emphasis>;
03283 &#32;&#32;&#32;&#32;}
03284 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_classclang_1_1cxcursor_1_1_visitor_job_1a358d276241e4b5c9c75c3b0c66b0bf92ad8e8e069a830483f331118386e97cc07">VisitorJob::OverloadExprPartsKind</link>:&#32;{
03285 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;OverloadExpr&#32;*O&#32;=&#32;cast&lt;OverloadExprParts&gt;(&amp;LI)-&gt;get();
03286 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Visit&#32;the&#32;nested-name-specifier.</emphasis>
03287 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(NestedNameSpecifierLoc&#32;QualifierLoc&#32;=&#32;O-&gt;getQualifierLoc())
03288 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(VisitNestedNameSpecifierLoc(QualifierLoc))
03289 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
03290 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Visit&#32;the&#32;declaration&#32;name.</emphasis>
03291 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(VisitDeclarationNameInfo(O-&gt;getNameInfo()))
03292 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
03293 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Visit&#32;the&#32;overloaded&#32;declaration&#32;reference.</emphasis>
03294 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(Visit(<link linkend="_namespaceclang_1_1cxcursor_1a631225e024301b99cc72be73f0ee9271">MakeCursorOverloadedDeclRef</link>(O,&#32;TU)))
03295 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
03296 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">continue</emphasis>;
03297 &#32;&#32;&#32;&#32;}
03298 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_classclang_1_1cxcursor_1_1_visitor_job_1a358d276241e4b5c9c75c3b0c66b0bf92a5c3c2fc52d5a307d1cb3e5b7f259be6d">VisitorJob::SizeOfPackExprPartsKind</link>:&#32;{
03299 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;SizeOfPackExpr&#32;*E&#32;=&#32;cast&lt;SizeOfPackExprParts&gt;(&amp;LI)-&gt;get();
03300 &#32;&#32;&#32;&#32;&#32;&#32;NamedDecl&#32;*Pack&#32;=&#32;E-&gt;getPack();
03301 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(isa&lt;TemplateTypeParmDecl&gt;(Pack))&#32;{
03302 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(Visit(<link linkend="_namespaceclang_1_1cxcursor_1a3534c264c1431ec3d09c975fcafa263d">MakeCursorTypeRef</link>(cast&lt;TemplateTypeParmDecl&gt;(Pack),
03303 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;E-&gt;getPackLoc(),&#32;TU)))
03304 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
03305 
03306 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">continue</emphasis>;
03307 &#32;&#32;&#32;&#32;&#32;&#32;}
03308 
03309 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(isa&lt;TemplateTemplateParmDecl&gt;(Pack))&#32;{
03310 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(Visit(<link linkend="_namespaceclang_1_1cxcursor_1ac63e4fd5fdbaf88d0632a7682afbf744">MakeCursorTemplateRef</link>(cast&lt;TemplateTemplateParmDecl&gt;(Pack),
03311 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;E-&gt;getPackLoc(),&#32;TU)))
03312 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
03313 
03314 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">continue</emphasis>;
03315 &#32;&#32;&#32;&#32;&#32;&#32;}
03316 
03317 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Non-type&#32;template&#32;parameter&#32;packs&#32;and&#32;function&#32;parameter&#32;packs&#32;are</emphasis>
03318 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;treated&#32;like&#32;DeclRefExpr&#32;cursors.</emphasis>
03319 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">continue</emphasis>;
03320 &#32;&#32;&#32;&#32;}
03321 
03322 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_classclang_1_1cxcursor_1_1_visitor_job_1a358d276241e4b5c9c75c3b0c66b0bf92a2a8543019a911441dc8f45307db4cc1a">VisitorJob::LambdaExprPartsKind</link>:&#32;{
03323 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Visit&#32;non-init&#32;captures.</emphasis>
03324 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;LambdaExpr&#32;*E&#32;=&#32;cast&lt;LambdaExprParts&gt;(&amp;LI)-&gt;get();
03325 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(LambdaExpr::capture_iterator&#32;C&#32;=&#32;E-&gt;explicit_capture_begin(),
03326 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;CEnd&#32;=&#32;E-&gt;explicit_capture_end();
03327 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;C&#32;!=&#32;CEnd;&#32;++C)&#32;{
03328 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!C-&gt;capturesVariable())
03329 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">continue</emphasis>;
03330 
03331 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(Visit(<link linkend="_namespaceclang_1_1cxcursor_1abb9724d664f29289d46fb5b34eaf94e9">MakeCursorVariableRef</link>(C-&gt;getCapturedVar(),&#32;C-&gt;getLocation(),
03332 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;TU)))
03333 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
03334 &#32;&#32;&#32;&#32;&#32;&#32;}
03335 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Visit&#32;init&#32;captures</emphasis>
03336 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">auto</emphasis>&#32;InitExpr&#32;:&#32;E-&gt;capture_inits())&#32;{
03337 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(InitExpr&#32;&amp;&amp;&#32;Visit(InitExpr))
03338 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
03339 &#32;&#32;&#32;&#32;&#32;&#32;}
03340 
03341 &#32;&#32;&#32;&#32;&#32;&#32;TypeLoc&#32;TL&#32;=&#32;E-&gt;getCallOperator()-&gt;getTypeSourceInfo()-&gt;getTypeLoc();
03342 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Visit&#32;parameters&#32;and&#32;return&#32;type,&#32;if&#32;present.</emphasis>
03343 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(FunctionTypeLoc&#32;Proto&#32;=&#32;TL.getAs&lt;FunctionProtoTypeLoc&gt;())&#32;{
03344 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(E-&gt;hasExplicitParameters())&#32;{
03345 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Visit&#32;parameters.</emphasis>
03346 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">unsigned</emphasis>&#32;I&#32;=&#32;0,&#32;N&#32;=&#32;Proto.getNumParams();&#32;I&#32;!=&#32;N;&#32;++I)
03347 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(Visit(<link linkend="_namespaceclang_1_1cxcursor_1ab61ec2059175833672e8e78a376bb218">MakeCXCursor</link>(Proto.getParam(I),&#32;TU)))
03348 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
03349 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
03350 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(E-&gt;hasExplicitResultType())&#32;{
03351 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Visit&#32;result&#32;type.</emphasis>
03352 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(Visit(Proto.getReturnLoc()))
03353 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
03354 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
03355 &#32;&#32;&#32;&#32;&#32;&#32;}
03356 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
03357 &#32;&#32;&#32;&#32;}
03358 
03359 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_classclang_1_1cxcursor_1_1_visitor_job_1a358d276241e4b5c9c75c3b0c66b0bf92a159dff551be5f538e44f7811d92f102b">VisitorJob::PostChildrenVisitKind</link>:
03360 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(PostChildrenVisitor(Parent,&#32;ClientData))
03361 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
03362 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
03363 &#32;&#32;&#32;&#32;}
03364 &#32;&#32;}
03365 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
03366 }
03367 
<anchor xml:id="__c_index_8cpp_source_1l03368"/><link linkend="_classclang_1_1cxcursor_1_1_cursor_visitor_1a3d3842cdc75f63217a1146b02a2e8d8d">03368</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classclang_1_1cxcursor_1_1_cursor_visitor_1a01659df2ce565980ce5b581ba7a970e3">CursorVisitor::Visit</link>(<emphasis role="keyword">const</emphasis>&#32;Stmt&#32;*S)&#32;{
03369 &#32;&#32;<link linkend="_namespaceclang_1_1cxcursor_1aab4e24121016c9d383e539a5938cb528">VisitorWorkList</link>&#32;*WL&#32;=&#32;<emphasis role="keyword">nullptr</emphasis>;
03370 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!WorkListFreeList.empty())&#32;{
03371 &#32;&#32;&#32;&#32;WL&#32;=&#32;WorkListFreeList.back();
03372 &#32;&#32;&#32;&#32;WL-&gt;clear();
03373 &#32;&#32;&#32;&#32;WorkListFreeList.pop_back();
03374 &#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
03375 &#32;&#32;&#32;&#32;WL&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_namespaceclang_1_1cxcursor_1aab4e24121016c9d383e539a5938cb528">VisitorWorkList</link>();
03376 &#32;&#32;&#32;&#32;WorkListCache.push_back(WL);
03377 &#32;&#32;}
03378 &#32;&#32;EnqueueWorkList(*WL,&#32;S);
03379 &#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;result&#32;=&#32;RunVisitorWorkList(*WL);
03380 &#32;&#32;WorkListFreeList.push_back(WL);
03381 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;result;
03382 }
03383 
03384 <emphasis role="keyword">namespace&#32;</emphasis>{
03385 <emphasis role="keyword">typedef</emphasis>&#32;SmallVector&lt;SourceRange,&#32;4&gt;&#32;RefNamePieces;
03386 RefNamePieces&#32;buildPieces(<emphasis role="keywordtype">unsigned</emphasis>&#32;NameFlags,&#32;<emphasis role="keywordtype">bool</emphasis>&#32;IsMemberRefExpr,
03387 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;DeclarationNameInfo&#32;&amp;NI,&#32;SourceRange&#32;QLoc,
03388 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;SourceRange&#32;*TemplateArgsLoc&#32;=&#32;<emphasis role="keyword">nullptr</emphasis>)&#32;{
03389 &#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;WantQualifier&#32;=&#32;NameFlags&#32;&amp;&#32;CXNameRange_WantQualifier;
03390 &#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;WantTemplateArgs&#32;=&#32;NameFlags&#32;&amp;&#32;CXNameRange_WantTemplateArgs;
03391 &#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;WantSinglePiece&#32;=&#32;NameFlags&#32;&amp;&#32;CXNameRange_WantSinglePiece;
03392 
03393 &#32;&#32;<emphasis role="keyword">const</emphasis>&#32;DeclarationName::NameKind&#32;Kind&#32;=&#32;NI.getName().getNameKind();
03394 
03395 &#32;&#32;RefNamePieces&#32;Pieces;
03396 
03397 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(WantQualifier&#32;&amp;&amp;&#32;QLoc.isValid())
03398 &#32;&#32;&#32;&#32;Pieces.push_back(QLoc);
03399 
03400 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(Kind&#32;!=&#32;DeclarationName::CXXOperatorName&#32;||&#32;IsMemberRefExpr)
03401 &#32;&#32;&#32;&#32;Pieces.push_back(NI.getLoc());
03402 
03403 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(WantTemplateArgs&#32;&amp;&amp;&#32;TemplateArgsLoc&#32;&amp;&amp;&#32;TemplateArgsLoc-&gt;isValid())
03404 &#32;&#32;&#32;&#32;Pieces.push_back(*TemplateArgsLoc);
03405 
03406 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(Kind&#32;==&#32;DeclarationName::CXXOperatorName)&#32;{
03407 &#32;&#32;&#32;&#32;Pieces.push_back(NI.getInfo().getCXXOperatorNameBeginLoc());
03408 &#32;&#32;&#32;&#32;Pieces.push_back(NI.getInfo().getCXXOperatorNameEndLoc());
03409 &#32;&#32;}
03410 
03411 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(WantSinglePiece)&#32;{
03412 &#32;&#32;&#32;&#32;SourceRange&#32;R(Pieces.front().getBegin(),&#32;Pieces.back().getEnd());
03413 &#32;&#32;&#32;&#32;Pieces.clear();
03414 &#32;&#32;&#32;&#32;Pieces.push_back(R);
03415 &#32;&#32;}
03416 
03417 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;Pieces;
03418 }
03419 }&#32;<emphasis role="comment">//&#32;namespace</emphasis>
03420 
03421 <emphasis role="comment">//===----------------------------------------------------------------------===//</emphasis>
03422 <emphasis role="comment">//&#32;Misc.&#32;API&#32;hooks.</emphasis>
03423 <emphasis role="comment">//===----------------------------------------------------------------------===//</emphasis>
03424 
03425 <emphasis role="keyword">namespace&#32;</emphasis>{
03426 <emphasis role="keyword">struct&#32;</emphasis>RegisterFatalErrorHandler&#32;{
03427 &#32;&#32;RegisterFatalErrorHandler()&#32;{
03428 &#32;&#32;&#32;&#32;<link linkend="__fatal_error_handler_8cpp_1a406242fcb6c1acfa01cfeb6048bc1c2a">clang_install_aborting_llvm_fatal_error_handler</link>();
03429 &#32;&#32;}
03430 };
03431 }&#32;<emphasis role="comment">//&#32;namespace</emphasis>
03432 
03433 <emphasis role="keyword">static</emphasis>&#32;llvm::ManagedStatic&lt;RegisterFatalErrorHandler&gt;
03434 &#32;&#32;&#32;&#32;RegisterFatalErrorHandlerOnce;
03435 
<anchor xml:id="__c_index_8cpp_source_1l03436"/><link linkend="__c_index_8cpp_1a3420c8e7e10a7ff7906130b207cbb763">03436</link> CXIndex&#32;<link linkend="__c_index_8cpp_1a3420c8e7e10a7ff7906130b207cbb763">clang_createIndex</link>(<emphasis role="keywordtype">int</emphasis>&#32;excludeDeclarationsFromPCH,
03437 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;displayDiagnostics)&#32;{
03438 &#32;&#32;<emphasis role="comment">//&#32;We&#32;use&#32;crash&#32;recovery&#32;to&#32;make&#32;some&#32;of&#32;our&#32;APIs&#32;more&#32;reliable,&#32;implicitly</emphasis>
03439 &#32;&#32;<emphasis role="comment">//&#32;enable&#32;it.</emphasis>
03440 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!getenv(<emphasis role="stringliteral">&quot;LIBCLANG_DISABLE_CRASH_RECOVERY&quot;</emphasis>))
03441 &#32;&#32;&#32;&#32;llvm::CrashRecoveryContext::Enable();
03442 
03443 &#32;&#32;<emphasis role="comment">//&#32;Look&#32;through&#32;the&#32;managed&#32;static&#32;to&#32;trigger&#32;construction&#32;of&#32;the&#32;managed</emphasis>
03444 &#32;&#32;<emphasis role="comment">//&#32;static&#32;which&#32;registers&#32;our&#32;fatal&#32;error&#32;handler.&#32;This&#32;ensures&#32;it&#32;is&#32;only</emphasis>
03445 &#32;&#32;<emphasis role="comment">//&#32;registered&#32;once.</emphasis>
03446 &#32;&#32;(void)*RegisterFatalErrorHandlerOnce;
03447 
03448 &#32;&#32;<emphasis role="comment">//&#32;Initialize&#32;targets&#32;for&#32;clang&#32;module&#32;support.</emphasis>
03449 &#32;&#32;llvm::InitializeAllTargets();
03450 &#32;&#32;llvm::InitializeAllTargetMCs();
03451 &#32;&#32;llvm::InitializeAllAsmPrinters();
03452 &#32;&#32;llvm::InitializeAllAsmParsers();
03453 
03454 &#32;&#32;<link linkend="_classclang_1_1_c_indexer">CIndexer</link>&#32;*CIdxr&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_classclang_1_1_c_indexer">CIndexer</link>();
03455 
03456 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(excludeDeclarationsFromPCH)
03457 &#32;&#32;&#32;&#32;CIdxr-&gt;<link linkend="_classclang_1_1_c_indexer_1a591845d07c3aae50c8801150e077b826">setOnlyLocalDecls</link>();
03458 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(displayDiagnostics)
03459 &#32;&#32;&#32;&#32;CIdxr-&gt;<link linkend="_classclang_1_1_c_indexer_1ab2bceec4f09f9b42169a17e6de7a49ce">setDisplayDiagnostics</link>();
03460 
03461 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(getenv(<emphasis role="stringliteral">&quot;LIBCLANG_BGPRIO_INDEX&quot;</emphasis>))
03462 &#32;&#32;&#32;&#32;CIdxr-&gt;<link linkend="_classclang_1_1_c_indexer_1a082ac8e1740ef35ea17cba6ca71e9063">setCXGlobalOptFlags</link>(CIdxr-&gt;<link linkend="_classclang_1_1_c_indexer_1a4c543585b07f085ac744c5d16ead7b2c">getCXGlobalOptFlags</link>()&#32;|
03463 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;CXGlobalOpt_ThreadBackgroundPriorityForIndexing);
03464 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(getenv(<emphasis role="stringliteral">&quot;LIBCLANG_BGPRIO_EDIT&quot;</emphasis>))
03465 &#32;&#32;&#32;&#32;CIdxr-&gt;<link linkend="_classclang_1_1_c_indexer_1a082ac8e1740ef35ea17cba6ca71e9063">setCXGlobalOptFlags</link>(CIdxr-&gt;<link linkend="_classclang_1_1_c_indexer_1a4c543585b07f085ac744c5d16ead7b2c">getCXGlobalOptFlags</link>()&#32;|
03466 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;CXGlobalOpt_ThreadBackgroundPriorityForEditing);
03467 
03468 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;CIdxr;
03469 }
03470 
<anchor xml:id="__c_index_8cpp_source_1l03471"/><link linkend="__c_index_8cpp_1aea91ddf5e996cba0de2f781cb17db1d5">03471</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="__c_index_8cpp_1aea91ddf5e996cba0de2f781cb17db1d5">clang_disposeIndex</link>(CXIndex&#32;CIdx)&#32;{
03472 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(CIdx)
03473 &#32;&#32;&#32;&#32;<emphasis role="keyword">delete</emphasis>&#32;<emphasis role="keyword">static_cast&lt;</emphasis><link linkend="_classclang_1_1_c_indexer">CIndexer</link>&#32;*<emphasis role="keyword">&gt;</emphasis>(CIdx);
03474 }
03475 
<anchor xml:id="__c_index_8cpp_source_1l03476"/><link linkend="__c_index_8cpp_1aaeea40424d1a6168c98f76021b71f9b6">03476</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="__c_index_8cpp_1aaeea40424d1a6168c98f76021b71f9b6">clang_CXIndex_setGlobalOptions</link>(CXIndex&#32;CIdx,&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<link linkend="_namespaceoptions">options</link>)&#32;{
03477 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(CIdx)
03478 &#32;&#32;&#32;&#32;<emphasis role="keyword">static_cast&lt;</emphasis><link linkend="_classclang_1_1_c_indexer">CIndexer</link>&#32;*<emphasis role="keyword">&gt;</emphasis>(CIdx)-&gt;setCXGlobalOptFlags(<link linkend="_namespaceoptions">options</link>);
03479 }
03480 
<anchor xml:id="__c_index_8cpp_source_1l03481"/><link linkend="__c_index_8cpp_1a314f8348e1eb2def5b9e88eb8766f4ea">03481</link> <emphasis role="keywordtype">unsigned</emphasis>&#32;<link linkend="__c_index_8cpp_1a314f8348e1eb2def5b9e88eb8766f4ea">clang_CXIndex_getGlobalOptions</link>(CXIndex&#32;CIdx)&#32;{
03482 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(CIdx)
03483 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">static_cast&lt;</emphasis><link linkend="_classclang_1_1_c_indexer">CIndexer</link>&#32;*<emphasis role="keyword">&gt;</emphasis>(CIdx)-&gt;getCXGlobalOptFlags();
03484 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
03485 }
03486 
<anchor xml:id="__c_index_8cpp_source_1l03487"/><link linkend="__c_index_8cpp_1a97a15ecfe8f0c017cbcc5c45f558123c">03487</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="__c_index_8cpp_1a97a15ecfe8f0c017cbcc5c45f558123c">clang_CXIndex_setInvocationEmissionPathOption</link>(CXIndex&#32;CIdx,
03488 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*Path)&#32;{
03489 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(CIdx)
03490 &#32;&#32;&#32;&#32;<emphasis role="keyword">static_cast&lt;</emphasis><link linkend="_classclang_1_1_c_indexer">CIndexer</link>&#32;*<emphasis role="keyword">&gt;</emphasis>(CIdx)-&gt;setInvocationEmissionPath(Path&#32;?&#32;Path&#32;:&#32;<emphasis role="stringliteral">&quot;&quot;</emphasis>);
03491 }
03492 
<anchor xml:id="__c_index_8cpp_source_1l03493"/><link linkend="__c_index_8cpp_1a1675239d59b2b9cd24f867fb2c15455b">03493</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="__c_index_8cpp_1a1675239d59b2b9cd24f867fb2c15455b">clang_toggleCrashRecovery</link>(<emphasis role="keywordtype">unsigned</emphasis>&#32;isEnabled)&#32;{
03494 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(isEnabled)
03495 &#32;&#32;&#32;&#32;llvm::CrashRecoveryContext::Enable();
03496 &#32;&#32;<emphasis role="keywordflow">else</emphasis>
03497 &#32;&#32;&#32;&#32;llvm::CrashRecoveryContext::Disable();
03498 }
03499 
<anchor xml:id="__c_index_8cpp_source_1l03500"/><link linkend="__c_index_8cpp_1a42e314c492d0d545b1e0e3278894b75d">03500</link> CXTranslationUnit&#32;<link linkend="__c_index_8cpp_1a42e314c492d0d545b1e0e3278894b75d">clang_createTranslationUnit</link>(CXIndex&#32;CIdx,
03501 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*ast_filename)&#32;{
03502 &#32;&#32;CXTranslationUnit&#32;TU;
03503 &#32;&#32;<emphasis role="keyword">enum</emphasis>&#32;CXErrorCode&#32;Result&#32;=
03504 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__c_index_8cpp_1af1e8fe902a1fa65beb990cc7af6b7a2f">clang_createTranslationUnit2</link>(CIdx,&#32;ast_filename,&#32;&amp;TU);
03505 &#32;&#32;(void)Result;
03506 &#32;&#32;assert((TU&#32;&amp;&amp;&#32;Result&#32;==&#32;CXError_Success)&#32;||
03507 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(!TU&#32;&amp;&amp;&#32;Result&#32;!=&#32;CXError_Success));
03508 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;TU;
03509 }
03510 
03511 <emphasis role="keyword">enum</emphasis>&#32;CXErrorCode&#32;<link linkend="__c_index_8cpp_1af1e8fe902a1fa65beb990cc7af6b7a2f">clang_createTranslationUnit2</link>(CXIndex&#32;CIdx,
03512 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*ast_filename,
03513 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;CXTranslationUnit&#32;*out_TU)&#32;{
03514 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(out_TU)
03515 &#32;&#32;&#32;&#32;*out_TU&#32;=&#32;<emphasis role="keyword">nullptr</emphasis>;
03516 
03517 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!CIdx&#32;||&#32;!ast_filename&#32;||&#32;!out_TU)
03518 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;CXError_InvalidArguments;
03519 
03520 &#32;&#32;<link linkend="__c_log_8h_1a24474e48ce7e218f17ae9353103470d8">LOG_FUNC_SECTION</link>&#32;{&#32;*Log&#32;&lt;&lt;&#32;ast_filename;&#32;}
03521 
03522 &#32;&#32;<link linkend="_classclang_1_1_c_indexer">CIndexer</link>&#32;*CXXIdx&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis><link linkend="_classclang_1_1_c_indexer">CIndexer</link>&#32;*<emphasis role="keyword">&gt;</emphasis>(CIdx);
03523 &#32;&#32;FileSystemOptions&#32;FileSystemOpts;
03524 
03525 &#32;&#32;IntrusiveRefCntPtr&lt;DiagnosticsEngine&gt;&#32;Diags&#32;=
03526 &#32;&#32;&#32;&#32;&#32;&#32;CompilerInstance::createDiagnostics(<emphasis role="keyword">new</emphasis>&#32;DiagnosticOptions());
03527 &#32;&#32;std::unique_ptr&lt;ASTUnit&gt;&#32;AU&#32;=&#32;ASTUnit::LoadFromASTFile(
03528 &#32;&#32;&#32;&#32;&#32;&#32;ast_filename,&#32;CXXIdx-&gt;<link linkend="_classclang_1_1_c_indexer_1aca55b1e223fa5e22564d21c796f83b53">getPCHContainerOperations</link>()-&gt;getRawReader(),
03529 &#32;&#32;&#32;&#32;&#32;&#32;ASTUnit::LoadEverything,&#32;Diags,&#32;FileSystemOpts,&#32;<emphasis role="comment">/*UseDebugInfo=*/</emphasis><emphasis role="keyword">false</emphasis>,
03530 &#32;&#32;&#32;&#32;&#32;&#32;CXXIdx-&gt;<link linkend="_classclang_1_1_c_indexer_1ab98bc58a97c08a74688c5201ee108e99">getOnlyLocalDecls</link>(),&#32;CaptureDiagsKind::All,
03531 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*AllowASTWithCompilerErrors=*/</emphasis><emphasis role="keyword">true</emphasis>,
03532 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*UserFilesAreVolatile=*/</emphasis><emphasis role="keyword">true</emphasis>);
03533 &#32;&#32;*out_TU&#32;=&#32;<link linkend="_namespaceclang_1_1cxtu_1a00c98a9560b39abf66fa58c2059de48e">MakeCXTranslationUnit</link>(CXXIdx,&#32;std::move(AU));
03534 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*out_TU&#32;?&#32;CXError_Success&#32;:&#32;CXError_Failure;
03535 }
03536 
<anchor xml:id="__c_index_8cpp_source_1l03537"/><link linkend="__c_index_8cpp_1a9d5c8fae100ea9327d269f44d23da9b3">03537</link> <emphasis role="keywordtype">unsigned</emphasis>&#32;<link linkend="__c_index_8cpp_1a9d5c8fae100ea9327d269f44d23da9b3">clang_defaultEditingTranslationUnitOptions</link>()&#32;{
03538 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;CXTranslationUnit_PrecompiledPreamble&#32;|
03539 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;CXTranslationUnit_CacheCompletionResults;
03540 }
03541 
<anchor xml:id="__c_index_8cpp_source_1l03542"/><link linkend="__c_index_8cpp_1a177b88f3aeb9c8b214f43afce5c6dc2d">03542</link> CXTranslationUnit&#32;<link linkend="__c_index_8cpp_1a177b88f3aeb9c8b214f43afce5c6dc2d">clang_createTranslationUnitFromSourceFile</link>(
03543 &#32;&#32;&#32;&#32;CXIndex&#32;CIdx,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*source_filename,&#32;<emphasis role="keywordtype">int</emphasis>&#32;num_command_line_args,
03544 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*<emphasis role="keyword">const</emphasis>&#32;*command_line_args,&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;num_unsaved_files,
03545 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct</emphasis>&#32;CXUnsavedFile&#32;*unsaved_files)&#32;{
03546 &#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;Options&#32;=&#32;CXTranslationUnit_DetailedPreprocessingRecord;
03547 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__c_index_8cpp_1ad0a9bffbc13f2874a5c0cbfd78aaeded">clang_parseTranslationUnit</link>(CIdx,&#32;source_filename,&#32;command_line_args,
03548 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;num_command_line_args,&#32;unsaved_files,
03549 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;num_unsaved_files,&#32;Options);
03550 }
03551 
03552 <emphasis role="keyword">static</emphasis>&#32;CXErrorCode
03553 clang_parseTranslationUnit_Impl(CXIndex&#32;CIdx,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*source_filename,
03554 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*<emphasis role="keyword">const</emphasis>&#32;*command_line_args,
03555 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;num_command_line_args,
03556 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ArrayRef&lt;CXUnsavedFile&gt;&#32;unsaved_files,
03557 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<link linkend="_namespaceoptions">options</link>,&#32;CXTranslationUnit&#32;*out_TU)&#32;{
03558 &#32;&#32;<emphasis role="comment">//&#32;Set&#32;up&#32;the&#32;initial&#32;return&#32;values.</emphasis>
03559 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(out_TU)
03560 &#32;&#32;&#32;&#32;*out_TU&#32;=&#32;<emphasis role="keyword">nullptr</emphasis>;
03561 
03562 &#32;&#32;<emphasis role="comment">//&#32;Check&#32;arguments.</emphasis>
03563 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!CIdx&#32;||&#32;!out_TU)
03564 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;CXError_InvalidArguments;
03565 
03566 &#32;&#32;<link linkend="_classclang_1_1_c_indexer">CIndexer</link>&#32;*CXXIdx&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis><link linkend="_classclang_1_1_c_indexer">CIndexer</link>&#32;*<emphasis role="keyword">&gt;</emphasis>(CIdx);
03567 
03568 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(CXXIdx-&gt;<link linkend="_classclang_1_1_c_indexer_1a226e7b660fe75abfc7e93f72021a8db3">isOptEnabled</link>(CXGlobalOpt_ThreadBackgroundPriorityForIndexing))
03569 &#32;&#32;&#32;&#32;<link linkend="_namespaceclang_1ab1c32e4de49bdf7a50374807a6d2701c">setThreadBackgroundPriority</link>();
03570 
03571 &#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;PrecompilePreamble&#32;=&#32;<link linkend="_namespaceoptions">options</link>&#32;&amp;&#32;CXTranslationUnit_PrecompiledPreamble;
03572 &#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;CreatePreambleOnFirstParse&#32;=
03573 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespaceoptions">options</link>&#32;&amp;&#32;CXTranslationUnit_CreatePreambleOnFirstParse;
03574 &#32;&#32;<emphasis role="comment">//&#32;FIXME:&#32;Add&#32;a&#32;flag&#32;for&#32;modules.</emphasis>
03575 &#32;&#32;TranslationUnitKind&#32;TUKind&#32;=&#32;(<link linkend="_namespaceoptions">options</link>&#32;&amp;&#32;(CXTranslationUnit_Incomplete&#32;|
03576 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;CXTranslationUnit_SingleFileParse))
03577 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;?&#32;TU_Prefix
03578 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;TU_Complete;
03579 &#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;CacheCodeCompletionResults&#32;=
03580 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespaceoptions">options</link>&#32;&amp;&#32;CXTranslationUnit_CacheCompletionResults;
03581 &#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;IncludeBriefCommentsInCodeCompletion&#32;=
03582 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespaceoptions">options</link>&#32;&amp;&#32;CXTranslationUnit_IncludeBriefCommentsInCodeCompletion;
03583 &#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;SingleFileParse&#32;=&#32;<link linkend="_namespaceoptions">options</link>&#32;&amp;&#32;CXTranslationUnit_SingleFileParse;
03584 &#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;ForSerialization&#32;=&#32;<link linkend="_namespaceoptions">options</link>&#32;&amp;&#32;CXTranslationUnit_ForSerialization;
03585 &#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;RetainExcludedCB&#32;=
03586 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespaceoptions">options</link>&#32;&amp;&#32;CXTranslationUnit_RetainExcludedConditionalBlocks;
03587 &#32;&#32;SkipFunctionBodiesScope&#32;SkipFunctionBodies&#32;=&#32;SkipFunctionBodiesScope::None;
03588 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_namespaceoptions">options</link>&#32;&amp;&#32;CXTranslationUnit_SkipFunctionBodies)&#32;{
03589 &#32;&#32;&#32;&#32;SkipFunctionBodies&#32;=
03590 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(<link linkend="_namespaceoptions">options</link>&#32;&amp;&#32;CXTranslationUnit_LimitSkipFunctionBodiesToPreamble)
03591 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;?&#32;SkipFunctionBodiesScope::Preamble
03592 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;SkipFunctionBodiesScope::PreambleAndMainFile;
03593 &#32;&#32;}
03594 
03595 &#32;&#32;<emphasis role="comment">//&#32;Configure&#32;the&#32;diagnostics.</emphasis>
03596 &#32;&#32;IntrusiveRefCntPtr&lt;DiagnosticsEngine&gt;&#32;Diags(
03597 &#32;&#32;&#32;&#32;&#32;&#32;CompilerInstance::createDiagnostics(<emphasis role="keyword">new</emphasis>&#32;DiagnosticOptions));
03598 
03599 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_namespaceoptions">options</link>&#32;&amp;&#32;CXTranslationUnit_KeepGoing)
03600 &#32;&#32;&#32;&#32;Diags-&gt;setFatalsAsError(<emphasis role="keyword">true</emphasis>);
03601 
03602 &#32;&#32;CaptureDiagsKind&#32;CaptureDiagnostics&#32;=&#32;CaptureDiagsKind::All;
03603 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_namespaceoptions">options</link>&#32;&amp;&#32;CXTranslationUnit_IgnoreNonErrorsFromIncludedFiles)
03604 &#32;&#32;&#32;&#32;CaptureDiagnostics&#32;=&#32;CaptureDiagsKind::AllWithoutNonErrorsFromIncludes;
03605 
03606 &#32;&#32;<emphasis role="comment">//&#32;Recover&#32;resources&#32;if&#32;we&#32;crash&#32;before&#32;exiting&#32;this&#32;function.</emphasis>
03607 &#32;&#32;llvm::CrashRecoveryContextCleanupRegistrar&lt;
03608 &#32;&#32;&#32;&#32;&#32;&#32;DiagnosticsEngine,
03609 &#32;&#32;&#32;&#32;&#32;&#32;llvm::CrashRecoveryContextReleaseRefCleanup&lt;DiagnosticsEngine&gt;&gt;
03610 &#32;&#32;&#32;&#32;&#32;&#32;DiagCleanup(Diags.get());
03611 
03612 &#32;&#32;std::unique_ptr&lt;std::vector&lt;ASTUnit::RemappedFile&gt;&gt;&#32;RemappedFiles(
03613 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">new</emphasis>&#32;std::vector&lt;ASTUnit::RemappedFile&gt;());
03614 
03615 &#32;&#32;<emphasis role="comment">//&#32;Recover&#32;resources&#32;if&#32;we&#32;crash&#32;before&#32;exiting&#32;this&#32;function.</emphasis>
03616 &#32;&#32;llvm::CrashRecoveryContextCleanupRegistrar&lt;std::vector&lt;ASTUnit::RemappedFile&gt;&gt;
03617 &#32;&#32;&#32;&#32;&#32;&#32;RemappedCleanup(RemappedFiles.get());
03618 
03619 &#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">auto</emphasis>&#32;&amp;UF&#32;:&#32;unsaved_files)&#32;{
03620 &#32;&#32;&#32;&#32;std::unique_ptr&lt;llvm::MemoryBuffer&gt;&#32;MB&#32;=
03621 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;llvm::MemoryBuffer::getMemBufferCopy(getContents(UF),&#32;UF.Filename);
03622 &#32;&#32;&#32;&#32;RemappedFiles-&gt;push_back(std::make_pair(UF.Filename,&#32;MB.release()));
03623 &#32;&#32;}
03624 
03625 &#32;&#32;std::unique_ptr&lt;std::vector&lt;const&#32;char&#32;*&gt;&gt;&#32;Args(
03626 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">new</emphasis>&#32;std::vector&lt;const&#32;char&#32;*&gt;());
03627 
03628 &#32;&#32;<emphasis role="comment">//&#32;Recover&#32;resources&#32;if&#32;we&#32;crash&#32;before&#32;exiting&#32;this&#32;method.</emphasis>
03629 &#32;&#32;llvm::CrashRecoveryContextCleanupRegistrar&lt;std::vector&lt;const&#32;char&#32;*&gt;&gt;
03630 &#32;&#32;&#32;&#32;&#32;&#32;ArgsCleanup(Args.get());
03631 
03632 &#32;&#32;<emphasis role="comment">//&#32;Since&#32;the&#32;Clang&#32;C&#32;library&#32;is&#32;primarily&#32;used&#32;by&#32;batch&#32;tools&#32;dealing&#32;with</emphasis>
03633 &#32;&#32;<emphasis role="comment">//&#32;(often&#32;very&#32;broken)&#32;source&#32;code,&#32;where&#32;spell-checking&#32;can&#32;have&#32;a</emphasis>
03634 &#32;&#32;<emphasis role="comment">//&#32;significant&#32;negative&#32;impact&#32;on&#32;performance&#32;(particularly&#32;when</emphasis>
03635 &#32;&#32;<emphasis role="comment">//&#32;precompiled&#32;headers&#32;are&#32;involved),&#32;we&#32;disable&#32;it&#32;by&#32;default.</emphasis>
03636 &#32;&#32;<emphasis role="comment">//&#32;Only&#32;do&#32;this&#32;if&#32;we&#32;haven&apos;t&#32;found&#32;a&#32;spell-checking-related&#32;argument.</emphasis>
03637 &#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;FoundSpellCheckingArgument&#32;=&#32;<emphasis role="keyword">false</emphasis>;
03638 &#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;I&#32;=&#32;0;&#32;I&#32;!=&#32;num_command_line_args;&#32;++I)&#32;{
03639 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(strcmp(command_line_args[I],&#32;<emphasis role="stringliteral">&quot;-fno-spell-checking&quot;</emphasis>)&#32;==&#32;0&#32;||
03640 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;strcmp(command_line_args[I],&#32;<emphasis role="stringliteral">&quot;-fspell-checking&quot;</emphasis>)&#32;==&#32;0)&#32;{
03641 &#32;&#32;&#32;&#32;&#32;&#32;FoundSpellCheckingArgument&#32;=&#32;<emphasis role="keyword">true</emphasis>;
03642 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
03643 &#32;&#32;&#32;&#32;}
03644 &#32;&#32;}
03645 &#32;&#32;Args-&gt;insert(Args-&gt;end(),&#32;command_line_args,
03646 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;command_line_args&#32;+&#32;num_command_line_args);
03647 
03648 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!FoundSpellCheckingArgument)
03649 &#32;&#32;&#32;&#32;Args-&gt;insert(Args-&gt;begin()&#32;+&#32;1,&#32;<emphasis role="stringliteral">&quot;-fno-spell-checking&quot;</emphasis>);
03650 
03651 &#32;&#32;<emphasis role="comment">//&#32;The&#32;&apos;source_filename&apos;&#32;argument&#32;is&#32;optional.&#32;&#32;If&#32;the&#32;caller&#32;does&#32;not</emphasis>
03652 &#32;&#32;<emphasis role="comment">//&#32;specify&#32;it&#32;then&#32;it&#32;is&#32;assumed&#32;that&#32;the&#32;source&#32;file&#32;is&#32;specified</emphasis>
03653 &#32;&#32;<emphasis role="comment">//&#32;in&#32;the&#32;actual&#32;argument&#32;list.</emphasis>
03654 &#32;&#32;<emphasis role="comment">//&#32;Put&#32;the&#32;source&#32;file&#32;after&#32;command_line_args&#32;otherwise&#32;if&#32;&apos;-x&apos;&#32;flag&#32;is</emphasis>
03655 &#32;&#32;<emphasis role="comment">//&#32;present&#32;it&#32;will&#32;be&#32;unused.</emphasis>
03656 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(source_filename)
03657 &#32;&#32;&#32;&#32;Args-&gt;push_back(source_filename);
03658 
03659 &#32;&#32;<emphasis role="comment">//&#32;Do&#32;we&#32;need&#32;the&#32;detailed&#32;preprocessing&#32;record?</emphasis>
03660 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_namespaceoptions">options</link>&#32;&amp;&#32;CXTranslationUnit_DetailedPreprocessingRecord)&#32;{
03661 &#32;&#32;&#32;&#32;Args-&gt;push_back(<emphasis role="stringliteral">&quot;-Xclang&quot;</emphasis>);
03662 &#32;&#32;&#32;&#32;Args-&gt;push_back(<emphasis role="stringliteral">&quot;-detailed-preprocessing-record&quot;</emphasis>);
03663 &#32;&#32;}
03664 
03665 &#32;&#32;<emphasis role="comment">//&#32;Suppress&#32;any&#32;editor&#32;placeholder&#32;diagnostics.</emphasis>
03666 &#32;&#32;Args-&gt;push_back(<emphasis role="stringliteral">&quot;-fallow-editor-placeholders&quot;</emphasis>);
03667 
03668 &#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;NumErrors&#32;=&#32;Diags-&gt;getClient()-&gt;getNumErrors();
03669 &#32;&#32;std::unique_ptr&lt;ASTUnit&gt;&#32;ErrUnit;
03670 &#32;&#32;<emphasis role="comment">//&#32;Unless&#32;the&#32;user&#32;specified&#32;that&#32;they&#32;want&#32;the&#32;preamble&#32;on&#32;the&#32;first&#32;parse</emphasis>
03671 &#32;&#32;<emphasis role="comment">//&#32;set&#32;it&#32;up&#32;to&#32;be&#32;created&#32;on&#32;the&#32;first&#32;reparse.&#32;This&#32;makes&#32;the&#32;first&#32;parse</emphasis>
03672 &#32;&#32;<emphasis role="comment">//&#32;faster,&#32;trading&#32;for&#32;a&#32;slower&#32;(first)&#32;reparse.</emphasis>
03673 &#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;PrecompilePreambleAfterNParses&#32;=
03674 &#32;&#32;&#32;&#32;&#32;&#32;!PrecompilePreamble&#32;?&#32;0&#32;:&#32;2&#32;-&#32;CreatePreambleOnFirstParse;
03675 
03676 &#32;&#32;<link linkend="_classclang_1_1_libclang_invocation_reporter">LibclangInvocationReporter</link>&#32;InvocationReporter(
03677 &#32;&#32;&#32;&#32;&#32;&#32;*CXXIdx,&#32;<link linkend="_classclang_1_1_libclang_invocation_reporter_1accdb53ba461fb345cd984aa037eecf53ae6f6b50529513b200513042d023bebd9">LibclangInvocationReporter::OperationKind::ParseOperation</link>,
03678 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespaceoptions">options</link>,&#32;llvm::makeArrayRef(*Args),&#32;<emphasis role="comment">/*InvocationArgs=*/</emphasis>None,
03679 &#32;&#32;&#32;&#32;&#32;&#32;unsaved_files);
03680 &#32;&#32;std::unique_ptr&lt;ASTUnit&gt;&#32;Unit(ASTUnit::LoadFromCommandLine(
03681 &#32;&#32;&#32;&#32;&#32;&#32;Args-&gt;data(),&#32;Args-&gt;data()&#32;+&#32;Args-&gt;size(),
03682 &#32;&#32;&#32;&#32;&#32;&#32;CXXIdx-&gt;<link linkend="_classclang_1_1_c_indexer_1aca55b1e223fa5e22564d21c796f83b53">getPCHContainerOperations</link>(),&#32;Diags,
03683 &#32;&#32;&#32;&#32;&#32;&#32;CXXIdx-&gt;<link linkend="_classclang_1_1_c_indexer_1a4b292906114303ecabb75bec7ff17a92">getClangResourcesPath</link>(),&#32;CXXIdx-&gt;<link linkend="_classclang_1_1_c_indexer_1ab98bc58a97c08a74688c5201ee108e99">getOnlyLocalDecls</link>(),
03684 &#32;&#32;&#32;&#32;&#32;&#32;CaptureDiagnostics,&#32;*RemappedFiles.get(),
03685 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*RemappedFilesKeepOriginalName=*/</emphasis><emphasis role="keyword">true</emphasis>,&#32;PrecompilePreambleAfterNParses,
03686 &#32;&#32;&#32;&#32;&#32;&#32;TUKind,&#32;CacheCodeCompletionResults,&#32;IncludeBriefCommentsInCodeCompletion,
03687 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*AllowPCHWithCompilerErrors=*/</emphasis><emphasis role="keyword">true</emphasis>,&#32;SkipFunctionBodies,&#32;SingleFileParse,
03688 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*UserFilesAreVolatile=*/</emphasis><emphasis role="keyword">true</emphasis>,&#32;ForSerialization,&#32;RetainExcludedCB,
03689 &#32;&#32;&#32;&#32;&#32;&#32;CXXIdx-&gt;<link linkend="_classclang_1_1_c_indexer_1aca55b1e223fa5e22564d21c796f83b53">getPCHContainerOperations</link>()-&gt;getRawReader().getFormat(),
03690 &#32;&#32;&#32;&#32;&#32;&#32;&amp;ErrUnit));
03691 
03692 &#32;&#32;<emphasis role="comment">//&#32;Early&#32;failures&#32;in&#32;LoadFromCommandLine&#32;may&#32;return&#32;with&#32;ErrUnit&#32;unset.</emphasis>
03693 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!Unit&#32;&amp;&amp;&#32;!ErrUnit)
03694 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;CXError_ASTReadError;
03695 
03696 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(NumErrors&#32;!=&#32;Diags-&gt;getClient()-&gt;getNumErrors())&#32;{
03697 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Make&#32;sure&#32;to&#32;check&#32;that&#32;&apos;Unit&apos;&#32;is&#32;non-NULL.</emphasis>
03698 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(CXXIdx-&gt;<link linkend="_classclang_1_1_c_indexer_1ae579d1e9618455a663f4e882eaa86234">getDisplayDiagnostics</link>())
03699 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespaceclang_1_1cxindex_1a134d158252a9bfcc3db346dd2e65f09f">printDiagsToStderr</link>(Unit&#32;?&#32;Unit.get()&#32;:&#32;ErrUnit.get());
03700 &#32;&#32;}
03701 
03702 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_namespaceclang_1_1cxtu_1a780a13d3a9c39b2898045b05ff18c05e">isASTReadError</link>(Unit&#32;?&#32;Unit.get()&#32;:&#32;ErrUnit.get()))
03703 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;CXError_ASTReadError;
03704 
03705 &#32;&#32;*out_TU&#32;=&#32;<link linkend="_namespaceclang_1_1cxtu_1a00c98a9560b39abf66fa58c2059de48e">MakeCXTranslationUnit</link>(CXXIdx,&#32;std::move(Unit));
03706 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_struct_c_x_translation_unit_impl">CXTranslationUnitImpl</link>&#32;*TU&#32;=&#32;*out_TU)&#32;{
03707 &#32;&#32;&#32;&#32;TU-&gt;ParsingOptions&#32;=&#32;<link linkend="_namespaceoptions">options</link>;
03708 &#32;&#32;&#32;&#32;TU-&gt;Arguments.reserve(Args-&gt;size());
03709 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*Arg&#32;:&#32;*Args)
03710 &#32;&#32;&#32;&#32;&#32;&#32;TU-&gt;Arguments.push_back(Arg);
03711 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;CXError_Success;
03712 &#32;&#32;}
03713 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;CXError_Failure;
03714 }
03715 
03716 CXTranslationUnit
<anchor xml:id="__c_index_8cpp_source_1l03717"/><link linkend="__c_index_8cpp_1ad0a9bffbc13f2874a5c0cbfd78aaeded">03717</link> <link linkend="__c_index_8cpp_1ad0a9bffbc13f2874a5c0cbfd78aaeded">clang_parseTranslationUnit</link>(CXIndex&#32;CIdx,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*source_filename,
03718 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*<emphasis role="keyword">const</emphasis>&#32;*command_line_args,
03719 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;num_command_line_args,
03720 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">struct</emphasis>&#32;CXUnsavedFile&#32;*unsaved_files,
03721 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;num_unsaved_files,&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<link linkend="_namespaceoptions">options</link>)&#32;{
03722 &#32;&#32;CXTranslationUnit&#32;TU;
03723 &#32;&#32;<emphasis role="keyword">enum</emphasis>&#32;CXErrorCode&#32;Result&#32;=&#32;<link linkend="__c_index_8cpp_1a3ddd508cc891d95a82b747955738249a">clang_parseTranslationUnit2</link>(
03724 &#32;&#32;&#32;&#32;&#32;&#32;CIdx,&#32;source_filename,&#32;command_line_args,&#32;num_command_line_args,
03725 &#32;&#32;&#32;&#32;&#32;&#32;unsaved_files,&#32;num_unsaved_files,&#32;<link linkend="_namespaceoptions">options</link>,&#32;&amp;TU);
03726 &#32;&#32;(void)Result;
03727 &#32;&#32;assert((TU&#32;&amp;&amp;&#32;Result&#32;==&#32;CXError_Success)&#32;||
03728 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(!TU&#32;&amp;&amp;&#32;Result&#32;!=&#32;CXError_Success));
03729 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;TU;
03730 }
03731 
03732 <emphasis role="keyword">enum</emphasis>&#32;CXErrorCode&#32;<link linkend="__c_index_8cpp_1a3ddd508cc891d95a82b747955738249a">clang_parseTranslationUnit2</link>(
03733 &#32;&#32;&#32;&#32;CXIndex&#32;CIdx,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*source_filename,
03734 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*<emphasis role="keyword">const</emphasis>&#32;*command_line_args,&#32;<emphasis role="keywordtype">int</emphasis>&#32;num_command_line_args,
03735 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct</emphasis>&#32;CXUnsavedFile&#32;*unsaved_files,&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;num_unsaved_files,
03736 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<link linkend="_namespaceoptions">options</link>,&#32;CXTranslationUnit&#32;*out_TU)&#32;{
03737 &#32;&#32;noteBottomOfStack();
03738 &#32;&#32;SmallVector&lt;const&#32;char&#32;*,&#32;4&gt;&#32;Args;
03739 &#32;&#32;Args.push_back(<emphasis role="stringliteral">&quot;clang&quot;</emphasis>);
03740 &#32;&#32;Args.append(command_line_args,&#32;command_line_args&#32;+&#32;num_command_line_args);
03741 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__c_index_8cpp_1a2dd6d7ceea761f1f0e76ed6f0ba9692b">clang_parseTranslationUnit2FullArgv</link>(
03742 &#32;&#32;&#32;&#32;&#32;&#32;CIdx,&#32;source_filename,&#32;Args.data(),&#32;Args.size(),&#32;unsaved_files,
03743 &#32;&#32;&#32;&#32;&#32;&#32;num_unsaved_files,&#32;<link linkend="_namespaceoptions">options</link>,&#32;out_TU);
03744 }
03745 
03746 <emphasis role="keyword">enum</emphasis>&#32;CXErrorCode&#32;<link linkend="__c_index_8cpp_1a2dd6d7ceea761f1f0e76ed6f0ba9692b">clang_parseTranslationUnit2FullArgv</link>(
03747 &#32;&#32;&#32;&#32;CXIndex&#32;CIdx,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*source_filename,
03748 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*<emphasis role="keyword">const</emphasis>&#32;*command_line_args,&#32;<emphasis role="keywordtype">int</emphasis>&#32;num_command_line_args,
03749 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct</emphasis>&#32;CXUnsavedFile&#32;*unsaved_files,&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;num_unsaved_files,
03750 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<link linkend="_namespaceoptions">options</link>,&#32;CXTranslationUnit&#32;*out_TU)&#32;{
03751 &#32;&#32;<link linkend="__c_log_8h_1a24474e48ce7e218f17ae9353103470d8">LOG_FUNC_SECTION</link>&#32;{
03752 &#32;&#32;&#32;&#32;*Log&#32;&lt;&lt;&#32;source_filename&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;:&#32;&quot;</emphasis>;
03753 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;!=&#32;num_command_line_args;&#32;++i)
03754 &#32;&#32;&#32;&#32;&#32;&#32;*Log&#32;&lt;&lt;&#32;command_line_args[i]&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;&quot;</emphasis>;
03755 &#32;&#32;}
03756 
03757 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(num_unsaved_files&#32;&amp;&amp;&#32;!unsaved_files)
03758 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;CXError_InvalidArguments;
03759 
03760 &#32;&#32;CXErrorCode&#32;result&#32;=&#32;CXError_Failure;
03761 &#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;ParseTranslationUnitImpl&#32;=&#32;[=,&#32;&amp;result]&#32;{
03762 &#32;&#32;&#32;&#32;noteBottomOfStack();
03763 &#32;&#32;&#32;&#32;result&#32;=&#32;clang_parseTranslationUnit_Impl(
03764 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;CIdx,&#32;source_filename,&#32;command_line_args,&#32;num_command_line_args,
03765 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;llvm::makeArrayRef(unsaved_files,&#32;num_unsaved_files),&#32;<link linkend="_namespaceoptions">options</link>,&#32;out_TU);
03766 &#32;&#32;};
03767 
03768 &#32;&#32;llvm::CrashRecoveryContext&#32;CRC;
03769 
03770 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!<link linkend="_namespaceclang_1af866b018fe401ae941a367429bdd4c9a">RunSafely</link>(CRC,&#32;ParseTranslationUnitImpl))&#32;{
03771 &#32;&#32;&#32;&#32;fprintf(stderr,&#32;<emphasis role="stringliteral">&quot;libclang:&#32;crash&#32;detected&#32;during&#32;parsing:&#32;{\n&quot;</emphasis>);
03772 &#32;&#32;&#32;&#32;fprintf(stderr,&#32;<emphasis role="stringliteral">&quot;&#32;&#32;&apos;source_filename&apos;&#32;:&#32;&apos;%s&apos;\n&quot;</emphasis>,&#32;source_filename);
03773 &#32;&#32;&#32;&#32;fprintf(stderr,&#32;<emphasis role="stringliteral">&quot;&#32;&#32;&apos;command_line_args&apos;&#32;:&#32;[&quot;</emphasis>);
03774 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;!=&#32;num_command_line_args;&#32;++i)&#32;{
03775 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(i)
03776 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;fprintf(stderr,&#32;<emphasis role="stringliteral">&quot;,&#32;&quot;</emphasis>);
03777 &#32;&#32;&#32;&#32;&#32;&#32;fprintf(stderr,&#32;<emphasis role="stringliteral">&quot;&apos;%s&apos;&quot;</emphasis>,&#32;command_line_args[i]);
03778 &#32;&#32;&#32;&#32;}
03779 &#32;&#32;&#32;&#32;fprintf(stderr,&#32;<emphasis role="stringliteral">&quot;],\n&quot;</emphasis>);
03780 &#32;&#32;&#32;&#32;fprintf(stderr,&#32;<emphasis role="stringliteral">&quot;&#32;&#32;&apos;unsaved_files&apos;&#32;:&#32;[&quot;</emphasis>);
03781 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">unsigned</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;!=&#32;num_unsaved_files;&#32;++i)&#32;{
03782 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(i)
03783 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;fprintf(stderr,&#32;<emphasis role="stringliteral">&quot;,&#32;&quot;</emphasis>);
03784 &#32;&#32;&#32;&#32;&#32;&#32;fprintf(stderr,&#32;<emphasis role="stringliteral">&quot;(&apos;%s&apos;,&#32;&apos;...&apos;,&#32;%ld)&quot;</emphasis>,&#32;unsaved_files[i].Filename,
03785 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;unsaved_files[i].Length);
03786 &#32;&#32;&#32;&#32;}
03787 &#32;&#32;&#32;&#32;fprintf(stderr,&#32;<emphasis role="stringliteral">&quot;],\n&quot;</emphasis>);
03788 &#32;&#32;&#32;&#32;fprintf(stderr,&#32;<emphasis role="stringliteral">&quot;&#32;&#32;&apos;options&apos;&#32;:&#32;%d,\n&quot;</emphasis>,&#32;<link linkend="_namespaceoptions">options</link>);
03789 &#32;&#32;&#32;&#32;fprintf(stderr,&#32;<emphasis role="stringliteral">&quot;}\n&quot;</emphasis>);
03790 
03791 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;CXError_Crashed;
03792 &#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(getenv(<emphasis role="stringliteral">&quot;LIBCLANG_RESOURCE_USAGE&quot;</emphasis>))&#32;{
03793 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(CXTranslationUnit&#32;*TU&#32;=&#32;out_TU)
03794 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespaceclang_1aa969857ada50e5f302f7127c78a63018">PrintLibclangResourceUsage</link>(*TU);
03795 &#32;&#32;}
03796 
03797 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;result;
03798 }
03799 
<anchor xml:id="__c_index_8cpp_source_1l03800"/><link linkend="__c_index_8cpp_1a4e194e7ae768674631b733cec3815755">03800</link> CXString&#32;<link linkend="__c_index_8cpp_1a4e194e7ae768674631b733cec3815755">clang_Type_getObjCEncoding</link>(CXType&#32;CT)&#32;{
03801 &#32;&#32;CXTranslationUnit&#32;tu&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis>CXTranslationUnit<emphasis role="keyword">&gt;</emphasis>(CT.data[1]);
03802 &#32;&#32;ASTContext&#32;&amp;Ctx&#32;=&#32;getASTUnit(tu)-&gt;getASTContext();
03803 &#32;&#32;std::string&#32;encoding;
03804 &#32;&#32;Ctx.getObjCEncodingForType(QualType::getFromOpaquePtr(CT.data[0]),&#32;encoding);
03805 
03806 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1a19a4962be87f75a8c1fa5a0b75f76298">cxstring::createDup</link>(encoding);
03807 }
03808 
03809 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;IdentifierInfo&#32;*getMacroIdentifier(CXCursor&#32;C)&#32;{
03810 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(C.kind&#32;==&#32;CXCursor_MacroDefinition)&#32;{
03811 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;MacroDefinitionRecord&#32;*MDR&#32;=&#32;<link linkend="_namespaceclang_1_1cxcursor_1a62254c8ae8eca4c0ca0f2d2a659e7d80">getCursorMacroDefinition</link>(C))
03812 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;MDR-&gt;getName();
03813 &#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(C.kind&#32;==&#32;CXCursor_MacroExpansion)&#32;{
03814 &#32;&#32;&#32;&#32;<link linkend="_classclang_1_1cxcursor_1_1_macro_expansion_cursor">MacroExpansionCursor</link>&#32;ME&#32;=&#32;getCursorMacroExpansion(C);
03815 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;ME.<link linkend="_classclang_1_1cxcursor_1_1_macro_expansion_cursor_1aab31344cd77f9da9c4ea0fc96017270e">getName</link>();
03816 &#32;&#32;}
03817 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">nullptr</emphasis>;
03818 }
03819 
<anchor xml:id="__c_index_8cpp_source_1l03820"/><link linkend="__c_index_8cpp_1a1b3a4946c65f34996299af537fc263ae">03820</link> <emphasis role="keywordtype">unsigned</emphasis>&#32;<link linkend="__c_index_8cpp_1a1b3a4946c65f34996299af537fc263ae">clang_Cursor_isMacroFunctionLike</link>(CXCursor&#32;C)&#32;{
03821 &#32;&#32;<emphasis role="keyword">const</emphasis>&#32;IdentifierInfo&#32;*II&#32;=&#32;getMacroIdentifier(C);
03822 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!II)&#32;{
03823 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
03824 &#32;&#32;}
03825 &#32;&#32;ASTUnit&#32;*ASTU&#32;=&#32;<link linkend="_namespaceclang_1_1cxcursor_1a68c106f7bebde4f72b0fe7f6f67e8f29">getCursorASTUnit</link>(C);
03826 &#32;&#32;Preprocessor&#32;&amp;PP&#32;=&#32;ASTU-&gt;getPreprocessor();
03827 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;MacroInfo&#32;*MI&#32;=&#32;PP.getMacroInfo(II))
03828 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;MI-&gt;isFunctionLike();
03829 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
03830 }
03831 
<anchor xml:id="__c_index_8cpp_source_1l03832"/><link linkend="__c_index_8cpp_1aa87fa24bae2366008033005d52645e57">03832</link> <emphasis role="keywordtype">unsigned</emphasis>&#32;<link linkend="__c_index_8cpp_1aa87fa24bae2366008033005d52645e57">clang_Cursor_isMacroBuiltin</link>(CXCursor&#32;C)&#32;{
03833 &#32;&#32;<emphasis role="keyword">const</emphasis>&#32;IdentifierInfo&#32;*II&#32;=&#32;getMacroIdentifier(C);
03834 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!II)&#32;{
03835 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
03836 &#32;&#32;}
03837 &#32;&#32;ASTUnit&#32;*ASTU&#32;=&#32;<link linkend="_namespaceclang_1_1cxcursor_1a68c106f7bebde4f72b0fe7f6f67e8f29">getCursorASTUnit</link>(C);
03838 &#32;&#32;Preprocessor&#32;&amp;PP&#32;=&#32;ASTU-&gt;getPreprocessor();
03839 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;MacroInfo&#32;*MI&#32;=&#32;PP.getMacroInfo(II))
03840 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;MI-&gt;isBuiltinMacro();
03841 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
03842 }
03843 
<anchor xml:id="__c_index_8cpp_source_1l03844"/><link linkend="__c_index_8cpp_1a0d254aedfcfc4b673c697a6f20b294af">03844</link> <emphasis role="keywordtype">unsigned</emphasis>&#32;<link linkend="__c_index_8cpp_1a0d254aedfcfc4b673c697a6f20b294af">clang_Cursor_isFunctionInlined</link>(CXCursor&#32;C)&#32;{
03845 &#32;&#32;<emphasis role="keyword">const</emphasis>&#32;Decl&#32;*D&#32;=&#32;<link linkend="_namespaceclang_1_1cxcursor_1a1f702246831c96afd990e457613dc642">getCursorDecl</link>(C);
03846 &#32;&#32;<emphasis role="keyword">const</emphasis>&#32;FunctionDecl&#32;*FD&#32;=&#32;dyn_cast_or_null&lt;FunctionDecl&gt;(D);
03847 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!FD)&#32;{
03848 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
03849 &#32;&#32;}
03850 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;FD-&gt;isInlined();
03851 }
03852 
03853 <emphasis role="keyword">static</emphasis>&#32;StringLiteral&#32;*getCFSTR_value(CallExpr&#32;*callExpr)&#32;{
03854 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(callExpr-&gt;getNumArgs()&#32;!=&#32;1)&#32;{
03855 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">nullptr</emphasis>;
03856 &#32;&#32;}
03857 
03858 &#32;&#32;StringLiteral&#32;*S&#32;=&#32;<emphasis role="keyword">nullptr</emphasis>;
03859 &#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;*arg&#32;=&#32;callExpr-&gt;getArg(0);
03860 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(arg-&gt;getStmtClass()&#32;==&#32;Stmt::ImplicitCastExprClass)&#32;{
03861 &#32;&#32;&#32;&#32;ImplicitCastExpr&#32;*I&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis>ImplicitCastExpr&#32;*<emphasis role="keyword">&gt;</emphasis>(arg);
03862 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;*subExpr&#32;=&#32;I-&gt;getSubExprAsWritten();
03863 
03864 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(subExpr-&gt;getStmtClass()&#32;!=&#32;Stmt::StringLiteralClass)&#32;{
03865 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">nullptr</emphasis>;
03866 &#32;&#32;&#32;&#32;}
03867 
03868 &#32;&#32;&#32;&#32;S&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis>StringLiteral&#32;*<emphasis role="keyword">&gt;</emphasis>(I-&gt;getSubExprAsWritten());
03869 &#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(arg-&gt;getStmtClass()&#32;==&#32;Stmt::StringLiteralClass)&#32;{
03870 &#32;&#32;&#32;&#32;S&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis>StringLiteral&#32;*<emphasis role="keyword">&gt;</emphasis>(callExpr-&gt;getArg(0));
03871 &#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
03872 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">nullptr</emphasis>;
03873 &#32;&#32;}
03874 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;S;
03875 }
03876 
<anchor xml:id="__c_index_8cpp_source_1l03877"/><link linkend="_struct_expr_eval_result">03877</link> <emphasis role="keyword">struct&#32;</emphasis><link linkend="_struct_expr_eval_result">ExprEvalResult</link>&#32;{
<anchor xml:id="__c_index_8cpp_source_1l03878"/><link linkend="_struct_expr_eval_result_1aaa7298f454e1409c708d5e13ec1cbf7a">03878</link> &#32;&#32;CXEvalResultKind&#32;<link linkend="_struct_expr_eval_result_1aaa7298f454e1409c708d5e13ec1cbf7a">EvalType</link>;
03879 &#32;&#32;<emphasis role="keyword">union&#32;</emphasis>{
<anchor xml:id="__c_index_8cpp_source_1l03880"/><link linkend="_struct_expr_eval_result_1a87a770a677d35e69ce678183c43bae8d">03880</link> &#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;<link linkend="_struct_expr_eval_result_1a87a770a677d35e69ce678183c43bae8d">unsignedVal</link>;
<anchor xml:id="__c_index_8cpp_source_1l03881"/><link linkend="_struct_expr_eval_result_1ab0750e9729f12028852830d69f6d7571">03881</link> &#32;&#32;&#32;&#32;<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;<link linkend="_struct_expr_eval_result_1ab0750e9729f12028852830d69f6d7571">intVal</link>;
<anchor xml:id="__c_index_8cpp_source_1l03882"/><link linkend="_struct_expr_eval_result_1aee52967ffb124cc7ad70b5171988bce7">03882</link> &#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;<link linkend="_struct_expr_eval_result_1aee52967ffb124cc7ad70b5171988bce7">floatVal</link>;
<anchor xml:id="__c_index_8cpp_source_1l03883"/><link linkend="_struct_expr_eval_result_1ac2652bcda462e811dc3c2d37eff3bc08">03883</link> &#32;&#32;&#32;&#32;<emphasis role="keywordtype">char</emphasis>&#32;*<link linkend="_struct_expr_eval_result_1ac2652bcda462e811dc3c2d37eff3bc08">stringVal</link>;
<anchor xml:id="__c_index_8cpp_source_1l03884"/><link linkend="_struct_expr_eval_result_1a237e2f58375382a3bb3817f48f9917c2">03884</link> &#32;&#32;}&#32;EvalData;
<anchor xml:id="__c_index_8cpp_source_1l03885"/><link linkend="_struct_expr_eval_result_1a5744b386feb8207d293495ce187ab5ca">03885</link> &#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_struct_expr_eval_result_1a5744b386feb8207d293495ce187ab5ca">IsUnsignedInt</link>;
<anchor xml:id="__c_index_8cpp_source_1l03886"/><link linkend="_struct_expr_eval_result_1a8b25815dfac46ae84009d02e7a0225b1">03886</link> &#32;&#32;<link linkend="_struct_expr_eval_result_1a8b25815dfac46ae84009d02e7a0225b1">~ExprEvalResult</link>()&#32;{
03887 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(EvalType&#32;!=&#32;CXEval_UnExposed&#32;&amp;&amp;&#32;EvalType&#32;!=&#32;CXEval_Float&#32;&amp;&amp;
03888 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;EvalType&#32;!=&#32;CXEval_Int)&#32;{
03889 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">delete</emphasis>[]&#32;EvalData.stringVal;
03890 &#32;&#32;&#32;&#32;}
03891 &#32;&#32;}
03892 };
03893 
<anchor xml:id="__c_index_8cpp_source_1l03894"/><link linkend="__c_index_8cpp_1ae2f762d99b78b192138f9afd8773e82e">03894</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="__c_index_8cpp_1ae2f762d99b78b192138f9afd8773e82e">clang_EvalResult_dispose</link>(CXEvalResult&#32;E)&#32;{
03895 &#32;&#32;<emphasis role="keyword">delete</emphasis>&#32;<emphasis role="keyword">static_cast&lt;</emphasis><link linkend="_struct_expr_eval_result">ExprEvalResult</link>&#32;*<emphasis role="keyword">&gt;</emphasis>(E);
03896 }
03897 
<anchor xml:id="__c_index_8cpp_source_1l03898"/><link linkend="__c_index_8cpp_1ab1c0e24a69ad71276e7ce0d7bdf6b0a7">03898</link> CXEvalResultKind&#32;<link linkend="__c_index_8cpp_1ab1c0e24a69ad71276e7ce0d7bdf6b0a7">clang_EvalResult_getKind</link>(CXEvalResult&#32;E)&#32;{
03899 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!E)&#32;{
03900 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;CXEval_UnExposed;
03901 &#32;&#32;}
03902 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;((<link linkend="_struct_expr_eval_result">ExprEvalResult</link>&#32;*)E)-&gt;EvalType;
03903 }
03904 
<anchor xml:id="__c_index_8cpp_source_1l03905"/><link linkend="__c_index_8cpp_1a47aac07d5d2996189a958eb4140d7a78">03905</link> <emphasis role="keywordtype">int</emphasis>&#32;<link linkend="__c_index_8cpp_1a47aac07d5d2996189a958eb4140d7a78">clang_EvalResult_getAsInt</link>(CXEvalResult&#32;E)&#32;{
03906 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__c_index_8cpp_1ae4d4de22195dd716156c690b5e7e730e">clang_EvalResult_getAsLongLong</link>(E);
03907 }
03908 
<anchor xml:id="__c_index_8cpp_source_1l03909"/><link linkend="__c_index_8cpp_1ae4d4de22195dd716156c690b5e7e730e">03909</link> <emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;<link linkend="__c_index_8cpp_1ae4d4de22195dd716156c690b5e7e730e">clang_EvalResult_getAsLongLong</link>(CXEvalResult&#32;E)&#32;{
03910 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!E)&#32;{
03911 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
03912 &#32;&#32;}
03913 &#32;&#32;<link linkend="_struct_expr_eval_result">ExprEvalResult</link>&#32;*Result&#32;=&#32;(<link linkend="_struct_expr_eval_result">ExprEvalResult</link>&#32;*)E;
03914 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(Result-&gt;<link linkend="_struct_expr_eval_result_1a5744b386feb8207d293495ce187ab5ca">IsUnsignedInt</link>)
03915 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;Result-&gt;<link linkend="_struct_expr_eval_result_1a237e2f58375382a3bb3817f48f9917c2">EvalData</link>.<link linkend="_struct_expr_eval_result_1a87a770a677d35e69ce678183c43bae8d">unsignedVal</link>;
03916 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;Result-&gt;<link linkend="_struct_expr_eval_result_1a237e2f58375382a3bb3817f48f9917c2">EvalData</link>.<link linkend="_struct_expr_eval_result_1ab0750e9729f12028852830d69f6d7571">intVal</link>;
03917 }
03918 
<anchor xml:id="__c_index_8cpp_source_1l03919"/><link linkend="__c_index_8cpp_1a486e7728d10438206af8edb51eab14d8">03919</link> <emphasis role="keywordtype">unsigned</emphasis>&#32;<link linkend="__c_index_8cpp_1a486e7728d10438206af8edb51eab14d8">clang_EvalResult_isUnsignedInt</link>(CXEvalResult&#32;E)&#32;{
03920 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;((<link linkend="_struct_expr_eval_result">ExprEvalResult</link>&#32;*)E)-&gt;IsUnsignedInt;
03921 }
03922 
<anchor xml:id="__c_index_8cpp_source_1l03923"/><link linkend="__c_index_8cpp_1ada456f56037c9ae23b133bbeedb8edb8">03923</link> <emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;<link linkend="__c_index_8cpp_1ada456f56037c9ae23b133bbeedb8edb8">clang_EvalResult_getAsUnsigned</link>(CXEvalResult&#32;E)&#32;{
03924 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!E)&#32;{
03925 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
03926 &#32;&#32;}
03927 
03928 &#32;&#32;<link linkend="_struct_expr_eval_result">ExprEvalResult</link>&#32;*Result&#32;=&#32;(<link linkend="_struct_expr_eval_result">ExprEvalResult</link>&#32;*)E;
03929 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(Result-&gt;<link linkend="_struct_expr_eval_result_1a5744b386feb8207d293495ce187ab5ca">IsUnsignedInt</link>)
03930 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;Result-&gt;<link linkend="_struct_expr_eval_result_1a237e2f58375382a3bb3817f48f9917c2">EvalData</link>.<link linkend="_struct_expr_eval_result_1a87a770a677d35e69ce678183c43bae8d">unsignedVal</link>;
03931 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;Result-&gt;<link linkend="_struct_expr_eval_result_1a237e2f58375382a3bb3817f48f9917c2">EvalData</link>.<link linkend="_struct_expr_eval_result_1ab0750e9729f12028852830d69f6d7571">intVal</link>;
03932 }
03933 
<anchor xml:id="__c_index_8cpp_source_1l03934"/><link linkend="__c_index_8cpp_1ac04603c779fdaaa0beaab0db8b3acb5d">03934</link> <emphasis role="keywordtype">double</emphasis>&#32;<link linkend="__c_index_8cpp_1ac04603c779fdaaa0beaab0db8b3acb5d">clang_EvalResult_getAsDouble</link>(CXEvalResult&#32;E)&#32;{
03935 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!E)&#32;{
03936 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
03937 &#32;&#32;}
03938 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;((<link linkend="_struct_expr_eval_result">ExprEvalResult</link>&#32;*)E)-&gt;EvalData.floatVal;
03939 }
03940 
<anchor xml:id="__c_index_8cpp_source_1l03941"/><link linkend="__c_index_8cpp_1ae20bdaa6ecefb7fd9f66cd08e6da1e39">03941</link> <emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*<link linkend="__c_index_8cpp_1ae20bdaa6ecefb7fd9f66cd08e6da1e39">clang_EvalResult_getAsStr</link>(CXEvalResult&#32;E)&#32;{
03942 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!E)&#32;{
03943 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">nullptr</emphasis>;
03944 &#32;&#32;}
03945 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;((<link linkend="_struct_expr_eval_result">ExprEvalResult</link>&#32;*)E)-&gt;EvalData.stringVal;
03946 }
03947 
03948 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_struct_expr_eval_result">ExprEvalResult</link>&#32;*evaluateExpr(Expr&#32;*expr,&#32;CXCursor&#32;C)&#32;{
03949 &#32;&#32;Expr::EvalResult&#32;ER;
03950 &#32;&#32;ASTContext&#32;&amp;ctx&#32;=&#32;<link linkend="_namespaceclang_1_1cxcursor_1a9f29c286f26b3cf616331c7e6554d373">getCursorContext</link>(C);
03951 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!expr)
03952 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">nullptr</emphasis>;
03953 
03954 &#32;&#32;expr&#32;=&#32;expr-&gt;IgnoreParens();
03955 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(expr-&gt;isValueDependent())
03956 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">nullptr</emphasis>;
03957 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!expr-&gt;EvaluateAsRValue(ER,&#32;ctx))
03958 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">nullptr</emphasis>;
03959 
03960 &#32;&#32;QualType&#32;rettype;
03961 &#32;&#32;CallExpr&#32;*callExpr;
03962 &#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;result&#32;=&#32;std::make_unique&lt;ExprEvalResult&gt;();
03963 &#32;&#32;result-&gt;EvalType&#32;=&#32;CXEval_UnExposed;
03964 &#32;&#32;result-&gt;IsUnsignedInt&#32;=&#32;<emphasis role="keyword">false</emphasis>;
03965 
03966 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(ER.Val.isInt())&#32;{
03967 &#32;&#32;&#32;&#32;result-&gt;EvalType&#32;=&#32;CXEval_Int;
03968 
03969 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;&amp;val&#32;=&#32;ER.Val.getInt();
03970 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(val.isUnsigned())&#32;{
03971 &#32;&#32;&#32;&#32;&#32;&#32;result-&gt;IsUnsignedInt&#32;=&#32;<emphasis role="keyword">true</emphasis>;
03972 &#32;&#32;&#32;&#32;&#32;&#32;result-&gt;EvalData.unsignedVal&#32;=&#32;val.getZExtValue();
03973 &#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
03974 &#32;&#32;&#32;&#32;&#32;&#32;result-&gt;EvalData.intVal&#32;=&#32;val.getExtValue();
03975 &#32;&#32;&#32;&#32;}
03976 
03977 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;result.release();
03978 &#32;&#32;}
03979 
03980 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(ER.Val.isFloat())&#32;{
03981 &#32;&#32;&#32;&#32;llvm::SmallVector&lt;char,&#32;100&gt;&#32;Buffer;
03982 &#32;&#32;&#32;&#32;ER.Val.getFloat().toString(Buffer);
03983 &#32;&#32;&#32;&#32;std::string&#32;floatStr(Buffer.data(),&#32;Buffer.size());
03984 &#32;&#32;&#32;&#32;result-&gt;EvalType&#32;=&#32;CXEval_Float;
03985 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;ignored;
03986 &#32;&#32;&#32;&#32;llvm::APFloat&#32;apFloat&#32;=&#32;ER.Val.getFloat();
03987 &#32;&#32;&#32;&#32;apFloat.convert(llvm::APFloat::IEEEdouble(),
03988 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;llvm::APFloat::rmNearestTiesToEven,&#32;&amp;ignored);
03989 &#32;&#32;&#32;&#32;result-&gt;EvalData.floatVal&#32;=&#32;apFloat.convertToDouble();
03990 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;result.release();
03991 &#32;&#32;}
03992 
03993 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(expr-&gt;getStmtClass()&#32;==&#32;Stmt::ImplicitCastExprClass)&#32;{
03994 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;ImplicitCastExpr&#32;*I&#32;=&#32;dyn_cast&lt;ImplicitCastExpr&gt;(expr);
03995 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;*subExpr&#32;=&#32;I-&gt;getSubExprAsWritten();
03996 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(subExpr-&gt;getStmtClass()&#32;==&#32;Stmt::StringLiteralClass&#32;||
03997 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;subExpr-&gt;getStmtClass()&#32;==&#32;Stmt::ObjCStringLiteralClass)&#32;{
03998 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;StringLiteral&#32;*StrE&#32;=&#32;<emphasis role="keyword">nullptr</emphasis>;
03999 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;ObjCStringLiteral&#32;*ObjCExpr;
04000 &#32;&#32;&#32;&#32;&#32;&#32;ObjCExpr&#32;=&#32;dyn_cast&lt;ObjCStringLiteral&gt;(subExpr);
04001 
04002 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(ObjCExpr)&#32;{
04003 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;StrE&#32;=&#32;ObjCExpr-&gt;getString();
04004 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;result-&gt;EvalType&#32;=&#32;CXEval_ObjCStrLiteral;
04005 &#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
04006 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;StrE&#32;=&#32;cast&lt;StringLiteral&gt;(I-&gt;getSubExprAsWritten());
04007 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;result-&gt;EvalType&#32;=&#32;CXEval_StrLiteral;
04008 &#32;&#32;&#32;&#32;&#32;&#32;}
04009 
04010 &#32;&#32;&#32;&#32;&#32;&#32;std::string&#32;strRef(StrE-&gt;getString().str());
04011 &#32;&#32;&#32;&#32;&#32;&#32;result-&gt;EvalData.stringVal&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>[strRef.size()&#32;+&#32;1];
04012 &#32;&#32;&#32;&#32;&#32;&#32;strncpy((<emphasis role="keywordtype">char</emphasis>&#32;*)result-&gt;EvalData.stringVal,&#32;strRef.c_str(),
04013 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;strRef.size());
04014 &#32;&#32;&#32;&#32;&#32;&#32;result-&gt;EvalData.stringVal[strRef.size()]&#32;=&#32;<emphasis role="charliteral">&apos;\0&apos;</emphasis>;
04015 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;result.release();
04016 &#32;&#32;&#32;&#32;}
04017 &#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(expr-&gt;getStmtClass()&#32;==&#32;Stmt::ObjCStringLiteralClass&#32;||
04018 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;expr-&gt;getStmtClass()&#32;==&#32;Stmt::StringLiteralClass)&#32;{
04019 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;StringLiteral&#32;*StrE&#32;=&#32;<emphasis role="keyword">nullptr</emphasis>;
04020 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;ObjCStringLiteral&#32;*ObjCExpr;
04021 &#32;&#32;&#32;&#32;ObjCExpr&#32;=&#32;dyn_cast&lt;ObjCStringLiteral&gt;(expr);
04022 
04023 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(ObjCExpr)&#32;{
04024 &#32;&#32;&#32;&#32;&#32;&#32;StrE&#32;=&#32;ObjCExpr-&gt;getString();
04025 &#32;&#32;&#32;&#32;&#32;&#32;result-&gt;EvalType&#32;=&#32;CXEval_ObjCStrLiteral;
04026 &#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
04027 &#32;&#32;&#32;&#32;&#32;&#32;StrE&#32;=&#32;cast&lt;StringLiteral&gt;(expr);
04028 &#32;&#32;&#32;&#32;&#32;&#32;result-&gt;EvalType&#32;=&#32;CXEval_StrLiteral;
04029 &#32;&#32;&#32;&#32;}
04030 
04031 &#32;&#32;&#32;&#32;std::string&#32;strRef(StrE-&gt;getString().str());
04032 &#32;&#32;&#32;&#32;result-&gt;EvalData.stringVal&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>[strRef.size()&#32;+&#32;1];
04033 &#32;&#32;&#32;&#32;strncpy((<emphasis role="keywordtype">char</emphasis>&#32;*)result-&gt;EvalData.stringVal,&#32;strRef.c_str(),&#32;strRef.size());
04034 &#32;&#32;&#32;&#32;result-&gt;EvalData.stringVal[strRef.size()]&#32;=&#32;<emphasis role="charliteral">&apos;\0&apos;</emphasis>;
04035 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;result.release();
04036 &#32;&#32;}
04037 
04038 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(expr-&gt;getStmtClass()&#32;==&#32;Stmt::CStyleCastExprClass)&#32;{
04039 &#32;&#32;&#32;&#32;CStyleCastExpr&#32;*CC&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis>CStyleCastExpr&#32;*<emphasis role="keyword">&gt;</emphasis>(expr);
04040 
04041 &#32;&#32;&#32;&#32;rettype&#32;=&#32;CC-&gt;getType();
04042 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(rettype.getAsString()&#32;==&#32;<emphasis role="stringliteral">&quot;CFStringRef&quot;</emphasis>&#32;&amp;&amp;
04043 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;CC-&gt;getSubExpr()-&gt;getStmtClass()&#32;==&#32;Stmt::CallExprClass)&#32;{
04044 
04045 &#32;&#32;&#32;&#32;&#32;&#32;callExpr&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis>CallExpr&#32;*<emphasis role="keyword">&gt;</emphasis>(CC-&gt;getSubExpr());
04046 &#32;&#32;&#32;&#32;&#32;&#32;StringLiteral&#32;*S&#32;=&#32;getCFSTR_value(callExpr);
04047 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(S)&#32;{
04048 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::string&#32;strLiteral(S-&gt;getString().str());
04049 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;result-&gt;EvalType&#32;=&#32;CXEval_CFStr;
04050 
04051 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;result-&gt;EvalData.stringVal&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>[strLiteral.size()&#32;+&#32;1];
04052 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;strncpy((<emphasis role="keywordtype">char</emphasis>&#32;*)result-&gt;EvalData.stringVal,&#32;strLiteral.c_str(),
04053 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;strLiteral.size());
04054 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;result-&gt;EvalData.stringVal[strLiteral.size()]&#32;=&#32;<emphasis role="charliteral">&apos;\0&apos;</emphasis>;
04055 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;result.release();
04056 &#32;&#32;&#32;&#32;&#32;&#32;}
04057 &#32;&#32;&#32;&#32;}
04058 
04059 &#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(expr-&gt;getStmtClass()&#32;==&#32;Stmt::CallExprClass)&#32;{
04060 &#32;&#32;&#32;&#32;callExpr&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis>CallExpr&#32;*<emphasis role="keyword">&gt;</emphasis>(expr);
04061 &#32;&#32;&#32;&#32;rettype&#32;=&#32;callExpr-&gt;getCallReturnType(ctx);
04062 
04063 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(rettype-&gt;isVectorType()&#32;||&#32;callExpr-&gt;getNumArgs()&#32;&gt;&#32;1)
04064 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">nullptr</emphasis>;
04065 
04066 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(rettype-&gt;isIntegralType(ctx)&#32;||&#32;rettype-&gt;isRealFloatingType())&#32;{
04067 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(callExpr-&gt;getNumArgs()&#32;==&#32;1&#32;&amp;&amp;
04068 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;!callExpr-&gt;getArg(0)-&gt;getType()-&gt;isIntegralType(ctx))
04069 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">nullptr</emphasis>;
04070 &#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(rettype.getAsString()&#32;==&#32;<emphasis role="stringliteral">&quot;CFStringRef&quot;</emphasis>)&#32;{
04071 
04072 &#32;&#32;&#32;&#32;&#32;&#32;StringLiteral&#32;*S&#32;=&#32;getCFSTR_value(callExpr);
04073 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(S)&#32;{
04074 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::string&#32;strLiteral(S-&gt;getString().str());
04075 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;result-&gt;EvalType&#32;=&#32;CXEval_CFStr;
04076 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;result-&gt;EvalData.stringVal&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>[strLiteral.size()&#32;+&#32;1];
04077 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;strncpy((<emphasis role="keywordtype">char</emphasis>&#32;*)result-&gt;EvalData.stringVal,&#32;strLiteral.c_str(),
04078 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;strLiteral.size());
04079 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;result-&gt;EvalData.stringVal[strLiteral.size()]&#32;=&#32;<emphasis role="charliteral">&apos;\0&apos;</emphasis>;
04080 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;result.release();
04081 &#32;&#32;&#32;&#32;&#32;&#32;}
04082 &#32;&#32;&#32;&#32;}
04083 &#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(expr-&gt;getStmtClass()&#32;==&#32;Stmt::DeclRefExprClass)&#32;{
04084 &#32;&#32;&#32;&#32;DeclRefExpr&#32;*D&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis>DeclRefExpr&#32;*<emphasis role="keyword">&gt;</emphasis>(expr);
04085 &#32;&#32;&#32;&#32;ValueDecl&#32;*V&#32;=&#32;D-&gt;getDecl();
04086 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(V-&gt;getKind()&#32;==&#32;Decl::Function)&#32;{
04087 &#32;&#32;&#32;&#32;&#32;&#32;std::string&#32;strName&#32;=&#32;V-&gt;getNameAsString();
04088 &#32;&#32;&#32;&#32;&#32;&#32;result-&gt;EvalType&#32;=&#32;CXEval_Other;
04089 &#32;&#32;&#32;&#32;&#32;&#32;result-&gt;EvalData.stringVal&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>[strName.size()&#32;+&#32;1];
04090 &#32;&#32;&#32;&#32;&#32;&#32;strncpy(result-&gt;EvalData.stringVal,&#32;strName.c_str(),&#32;strName.size());
04091 &#32;&#32;&#32;&#32;&#32;&#32;result-&gt;EvalData.stringVal[strName.size()]&#32;=&#32;<emphasis role="charliteral">&apos;\0&apos;</emphasis>;
04092 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;result.release();
04093 &#32;&#32;&#32;&#32;}
04094 &#32;&#32;}
04095 
04096 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">nullptr</emphasis>;
04097 }
04098 
04099 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;Expr&#32;*evaluateDeclExpr(<emphasis role="keyword">const</emphasis>&#32;Decl&#32;*D)&#32;{
04100 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!D)
04101 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">nullptr</emphasis>;
04102 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="keyword">auto</emphasis>&#32;*Var&#32;=&#32;dyn_cast&lt;VarDecl&gt;(D))
04103 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;Var-&gt;getInit();
04104 &#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="keyword">auto</emphasis>&#32;*Field&#32;=&#32;dyn_cast&lt;FieldDecl&gt;(D))
04105 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;Field-&gt;getInClassInitializer();
04106 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">nullptr</emphasis>;
04107 }
04108 
04109 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;Expr&#32;*evaluateCompoundStmtExpr(<emphasis role="keyword">const</emphasis>&#32;CompoundStmt&#32;*CS)&#32;{
04110 &#32;&#32;assert(CS&#32;&amp;&amp;&#32;<emphasis role="stringliteral">&quot;invalid&#32;compound&#32;statement&quot;</emphasis>);
04111 &#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">auto</emphasis>&#32;*bodyIterator&#32;:&#32;CS-&gt;body())&#32;{
04112 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;*E&#32;=&#32;dyn_cast&lt;Expr&gt;(bodyIterator))
04113 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;E;
04114 &#32;&#32;}
04115 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">nullptr</emphasis>;
04116 }
04117 
<anchor xml:id="__c_index_8cpp_source_1l04118"/><link linkend="__c_index_8cpp_1a79f2fabb1bf5025f2a5684281fd8a23c">04118</link> CXEvalResult&#32;<link linkend="__c_index_8cpp_1a79f2fabb1bf5025f2a5684281fd8a23c">clang_Cursor_Evaluate</link>(CXCursor&#32;C)&#32;{
04119 &#32;&#32;<emphasis role="keyword">const</emphasis>&#32;Expr&#32;*E&#32;=&#32;<emphasis role="keyword">nullptr</emphasis>;
04120 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="__c_index_8cpp_1a88e594fe730830706a0b7cff796eaedf">clang_getCursorKind</link>(C)&#32;==&#32;CXCursor_CompoundStmt)
04121 &#32;&#32;&#32;&#32;E&#32;=&#32;evaluateCompoundStmtExpr(cast&lt;CompoundStmt&gt;(<link linkend="_namespaceclang_1_1cxcursor_1a2d5cb233204f81be58bd21deb628c7ad">getCursorStmt</link>(C)));
04122 &#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="__c_index_8cpp_1a5d47db8f608ae0c266d6551875d46b80">clang_isDeclaration</link>(C.kind))
04123 &#32;&#32;&#32;&#32;E&#32;=&#32;evaluateDeclExpr(<link linkend="_namespaceclang_1_1cxcursor_1a1f702246831c96afd990e457613dc642">getCursorDecl</link>(C));
04124 &#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="__c_index_8cpp_1ab958945dd59c351e1ae1a3f7f5668095">clang_isExpression</link>(C.kind))
04125 &#32;&#32;&#32;&#32;E&#32;=&#32;<link linkend="_namespaceclang_1_1cxcursor_1a80837a3710c6df0dfc24b5ee1d94ff9b">getCursorExpr</link>(C);
04126 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(E)
04127 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">const_cast&lt;</emphasis>CXEvalResult<emphasis role="keyword">&gt;</emphasis>(
04128 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">reinterpret_cast&lt;</emphasis><emphasis role="keyword">const&#32;</emphasis><emphasis role="keywordtype">void</emphasis>&#32;*<emphasis role="keyword">&gt;</emphasis>(evaluateExpr(<emphasis role="keyword">const_cast&lt;</emphasis>Expr&#32;*<emphasis role="keyword">&gt;</emphasis>(E),&#32;C)));
04129 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">nullptr</emphasis>;
04130 }
04131 
<anchor xml:id="__c_index_8cpp_source_1l04132"/><link linkend="__c_index_8cpp_1a4104b63fec0184dea701b7bc6136270e">04132</link> <emphasis role="keywordtype">unsigned</emphasis>&#32;<link linkend="__c_index_8cpp_1a4104b63fec0184dea701b7bc6136270e">clang_Cursor_hasAttrs</link>(CXCursor&#32;C)&#32;{
04133 &#32;&#32;<emphasis role="keyword">const</emphasis>&#32;Decl&#32;*D&#32;=&#32;<link linkend="_namespaceclang_1_1cxcursor_1a1f702246831c96afd990e457613dc642">getCursorDecl</link>(C);
04134 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!D)&#32;{
04135 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
04136 &#32;&#32;}
04137 
04138 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(D-&gt;hasAttrs())&#32;{
04139 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;1;
04140 &#32;&#32;}
04141 
04142 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
04143 }
<anchor xml:id="__c_index_8cpp_source_1l04144"/><link linkend="__c_index_8cpp_1af7f47ec6ccc9f05c092f813102672290">04144</link> <emphasis role="keywordtype">unsigned</emphasis>&#32;<link linkend="__c_index_8cpp_1af7f47ec6ccc9f05c092f813102672290">clang_defaultSaveOptions</link>(CXTranslationUnit&#32;TU)&#32;{
04145 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;CXSaveTranslationUnit_None;
04146 }
04147 
04148 <emphasis role="keyword">static</emphasis>&#32;CXSaveError&#32;clang_saveTranslationUnit_Impl(CXTranslationUnit&#32;TU,
04149 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*FileName,
04150 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<link linkend="_namespaceoptions">options</link>)&#32;{
04151 &#32;&#32;<link linkend="_classclang_1_1_c_indexer">CIndexer</link>&#32;*CXXIdx&#32;=&#32;TU-&gt;CIdx;
04152 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(CXXIdx-&gt;<link linkend="_classclang_1_1_c_indexer_1a226e7b660fe75abfc7e93f72021a8db3">isOptEnabled</link>(CXGlobalOpt_ThreadBackgroundPriorityForIndexing))
04153 &#32;&#32;&#32;&#32;<link linkend="_namespaceclang_1ab1c32e4de49bdf7a50374807a6d2701c">setThreadBackgroundPriority</link>();
04154 
04155 &#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;hadError&#32;=&#32;cxtu::getASTUnit(TU)-&gt;Save(FileName);
04156 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;hadError&#32;?&#32;CXSaveError_Unknown&#32;:&#32;CXSaveError_None;
04157 }
04158 
<anchor xml:id="__c_index_8cpp_source_1l04159"/><link linkend="__c_index_8cpp_1a1be3baac9f48e48ba4119cbcdaf35391">04159</link> <emphasis role="keywordtype">int</emphasis>&#32;<link linkend="__c_index_8cpp_1a1be3baac9f48e48ba4119cbcdaf35391">clang_saveTranslationUnit</link>(CXTranslationUnit&#32;TU,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*FileName,
04160 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<link linkend="_namespaceoptions">options</link>)&#32;{
04161 &#32;&#32;<link linkend="__c_log_8h_1a24474e48ce7e218f17ae9353103470d8">LOG_FUNC_SECTION</link>&#32;{&#32;*Log&#32;&lt;&lt;&#32;TU&#32;&lt;&lt;&#32;<emphasis role="charliteral">&apos;&#32;&apos;</emphasis>&#32;&lt;&lt;&#32;FileName;&#32;}
04162 
04163 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(isNotUsableTU(TU))&#32;{
04164 &#32;&#32;&#32;&#32;<link linkend="__c_x_translation_unit_8h_1a4ec17e6e03ea0baf73e27802eae36106">LOG_BAD_TU</link>(TU);
04165 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;CXSaveError_InvalidTU;
04166 &#32;&#32;}
04167 
04168 &#32;&#32;ASTUnit&#32;*CXXUnit&#32;=&#32;cxtu::getASTUnit(TU);
04169 &#32;&#32;ASTUnit::ConcurrencyCheck&#32;Check(*CXXUnit);
04170 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!CXXUnit-&gt;hasSema())
04171 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;CXSaveError_InvalidTU;
04172 
04173 &#32;&#32;CXSaveError&#32;result;
04174 &#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;SaveTranslationUnitImpl&#32;=&#32;[=,&#32;&amp;result]()&#32;{
04175 &#32;&#32;&#32;&#32;result&#32;=&#32;clang_saveTranslationUnit_Impl(TU,&#32;FileName,&#32;<link linkend="_namespaceoptions">options</link>);
04176 &#32;&#32;};
04177 
04178 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!CXXUnit-&gt;getDiagnostics().hasUnrecoverableErrorOccurred())&#32;{
04179 &#32;&#32;&#32;&#32;SaveTranslationUnitImpl();
04180 
04181 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(getenv(<emphasis role="stringliteral">&quot;LIBCLANG_RESOURCE_USAGE&quot;</emphasis>))
04182 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespaceclang_1aa969857ada50e5f302f7127c78a63018">PrintLibclangResourceUsage</link>(TU);
04183 
04184 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;result;
04185 &#32;&#32;}
04186 
04187 &#32;&#32;<emphasis role="comment">//&#32;We&#32;have&#32;an&#32;AST&#32;that&#32;has&#32;invalid&#32;nodes&#32;due&#32;to&#32;compiler&#32;errors.</emphasis>
04188 &#32;&#32;<emphasis role="comment">//&#32;Use&#32;a&#32;crash&#32;recovery&#32;thread&#32;for&#32;protection.</emphasis>
04189 
04190 &#32;&#32;llvm::CrashRecoveryContext&#32;CRC;
04191 
04192 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!<link linkend="_namespaceclang_1af866b018fe401ae941a367429bdd4c9a">RunSafely</link>(CRC,&#32;SaveTranslationUnitImpl))&#32;{
04193 &#32;&#32;&#32;&#32;fprintf(stderr,&#32;<emphasis role="stringliteral">&quot;libclang:&#32;crash&#32;detected&#32;during&#32;AST&#32;saving:&#32;{\n&quot;</emphasis>);
04194 &#32;&#32;&#32;&#32;fprintf(stderr,&#32;<emphasis role="stringliteral">&quot;&#32;&#32;&apos;filename&apos;&#32;:&#32;&apos;%s&apos;\n&quot;</emphasis>,&#32;FileName);
04195 &#32;&#32;&#32;&#32;fprintf(stderr,&#32;<emphasis role="stringliteral">&quot;&#32;&#32;&apos;options&apos;&#32;:&#32;%d,\n&quot;</emphasis>,&#32;<link linkend="_namespaceoptions">options</link>);
04196 &#32;&#32;&#32;&#32;fprintf(stderr,&#32;<emphasis role="stringliteral">&quot;}\n&quot;</emphasis>);
04197 
04198 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;CXSaveError_Unknown;
04199 
04200 &#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(getenv(<emphasis role="stringliteral">&quot;LIBCLANG_RESOURCE_USAGE&quot;</emphasis>))&#32;{
04201 &#32;&#32;&#32;&#32;<link linkend="_namespaceclang_1aa969857ada50e5f302f7127c78a63018">PrintLibclangResourceUsage</link>(TU);
04202 &#32;&#32;}
04203 
04204 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;result;
04205 }
04206 
<anchor xml:id="__c_index_8cpp_source_1l04207"/><link linkend="__c_index_8cpp_1a3af88c13004a1954abd6dc956faff3be">04207</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="__c_index_8cpp_1a3af88c13004a1954abd6dc956faff3be">clang_disposeTranslationUnit</link>(CXTranslationUnit&#32;CTUnit)&#32;{
04208 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(CTUnit)&#32;{
04209 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;If&#32;the&#32;translation&#32;unit&#32;has&#32;been&#32;marked&#32;as&#32;unsafe&#32;to&#32;free,&#32;just&#32;discard</emphasis>
04210 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;it.</emphasis>
04211 &#32;&#32;&#32;&#32;ASTUnit&#32;*Unit&#32;=&#32;cxtu::getASTUnit(CTUnit);
04212 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(Unit&#32;&amp;&amp;&#32;Unit-&gt;isUnsafeToFree())
04213 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
04214 
04215 &#32;&#32;&#32;&#32;<emphasis role="keyword">delete</emphasis>&#32;cxtu::getASTUnit(CTUnit);
04216 &#32;&#32;&#32;&#32;<emphasis role="keyword">delete</emphasis>&#32;CTUnit-&gt;StringPool;
04217 &#32;&#32;&#32;&#32;<emphasis role="keyword">delete</emphasis>&#32;<emphasis role="keyword">static_cast&lt;</emphasis><link linkend="_classclang_1_1_c_x_diagnostic_set_impl">CXDiagnosticSetImpl</link>&#32;*<emphasis role="keyword">&gt;</emphasis>(CTUnit-&gt;Diagnostics);
04218 &#32;&#32;&#32;&#32;<link linkend="_namespaceclang_1_1cxcursor_1a3e9eef17e1ba69991801fcfcfc8a0d9e">disposeOverridenCXCursorsPool</link>(CTUnit-&gt;OverridenCursorsPool);
04219 &#32;&#32;&#32;&#32;<emphasis role="keyword">delete</emphasis>&#32;CTUnit-&gt;CommentToXML;
04220 &#32;&#32;&#32;&#32;<emphasis role="keyword">delete</emphasis>&#32;CTUnit;
04221 &#32;&#32;}
04222 }
04223 
<anchor xml:id="__c_index_8cpp_source_1l04224"/><link linkend="__c_index_8cpp_1a496961baac6bdcc6be5e7ceac9b2273d">04224</link> <emphasis role="keywordtype">unsigned</emphasis>&#32;<link linkend="__c_index_8cpp_1a496961baac6bdcc6be5e7ceac9b2273d">clang_suspendTranslationUnit</link>(CXTranslationUnit&#32;CTUnit)&#32;{
04225 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(CTUnit)&#32;{
04226 &#32;&#32;&#32;&#32;ASTUnit&#32;*Unit&#32;=&#32;cxtu::getASTUnit(CTUnit);
04227 
04228 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(Unit&#32;&amp;&amp;&#32;Unit-&gt;isUnsafeToFree())
04229 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
04230 
04231 &#32;&#32;&#32;&#32;Unit-&gt;ResetForParse();
04232 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
04233 &#32;&#32;}
04234 
04235 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
04236 }
04237 
<anchor xml:id="__c_index_8cpp_source_1l04238"/><link linkend="__c_index_8cpp_1a2f79bdd29d8f799a3943c6a5254eb789">04238</link> <emphasis role="keywordtype">unsigned</emphasis>&#32;<link linkend="__c_index_8cpp_1a2f79bdd29d8f799a3943c6a5254eb789">clang_defaultReparseOptions</link>(CXTranslationUnit&#32;TU)&#32;{
04239 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;CXReparse_None;
04240 }
04241 
04242 <emphasis role="keyword">static</emphasis>&#32;CXErrorCode
04243 clang_reparseTranslationUnit_Impl(CXTranslationUnit&#32;TU,
04244 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ArrayRef&lt;CXUnsavedFile&gt;&#32;unsaved_files,
04245 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<link linkend="_namespaceoptions">options</link>)&#32;{
04246 &#32;&#32;<emphasis role="comment">//&#32;Check&#32;arguments.</emphasis>
04247 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(isNotUsableTU(TU))&#32;{
04248 &#32;&#32;&#32;&#32;<link linkend="__c_x_translation_unit_8h_1a4ec17e6e03ea0baf73e27802eae36106">LOG_BAD_TU</link>(TU);
04249 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;CXError_InvalidArguments;
04250 &#32;&#32;}
04251 
04252 &#32;&#32;<emphasis role="comment">//&#32;Reset&#32;the&#32;associated&#32;diagnostics.</emphasis>
04253 &#32;&#32;<emphasis role="keyword">delete</emphasis>&#32;<emphasis role="keyword">static_cast&lt;</emphasis><link linkend="_classclang_1_1_c_x_diagnostic_set_impl">CXDiagnosticSetImpl</link>&#32;*<emphasis role="keyword">&gt;</emphasis>(TU-&gt;Diagnostics);
04254 &#32;&#32;TU-&gt;Diagnostics&#32;=&#32;<emphasis role="keyword">nullptr</emphasis>;
04255 
04256 &#32;&#32;<link linkend="_classclang_1_1_c_indexer">CIndexer</link>&#32;*CXXIdx&#32;=&#32;TU-&gt;CIdx;
04257 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(CXXIdx-&gt;<link linkend="_classclang_1_1_c_indexer_1a226e7b660fe75abfc7e93f72021a8db3">isOptEnabled</link>(CXGlobalOpt_ThreadBackgroundPriorityForEditing))
04258 &#32;&#32;&#32;&#32;<link linkend="_namespaceclang_1ab1c32e4de49bdf7a50374807a6d2701c">setThreadBackgroundPriority</link>();
04259 
04260 &#32;&#32;ASTUnit&#32;*CXXUnit&#32;=&#32;cxtu::getASTUnit(TU);
04261 &#32;&#32;ASTUnit::ConcurrencyCheck&#32;Check(*CXXUnit);
04262 
04263 &#32;&#32;std::unique_ptr&lt;std::vector&lt;ASTUnit::RemappedFile&gt;&gt;&#32;RemappedFiles(
04264 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">new</emphasis>&#32;std::vector&lt;ASTUnit::RemappedFile&gt;());
04265 
04266 &#32;&#32;<emphasis role="comment">//&#32;Recover&#32;resources&#32;if&#32;we&#32;crash&#32;before&#32;exiting&#32;this&#32;function.</emphasis>
04267 &#32;&#32;llvm::CrashRecoveryContextCleanupRegistrar&lt;std::vector&lt;ASTUnit::RemappedFile&gt;&gt;
04268 &#32;&#32;&#32;&#32;&#32;&#32;RemappedCleanup(RemappedFiles.get());
04269 
04270 &#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">auto</emphasis>&#32;&amp;UF&#32;:&#32;unsaved_files)&#32;{
04271 &#32;&#32;&#32;&#32;std::unique_ptr&lt;llvm::MemoryBuffer&gt;&#32;MB&#32;=
04272 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;llvm::MemoryBuffer::getMemBufferCopy(getContents(UF),&#32;UF.Filename);
04273 &#32;&#32;&#32;&#32;RemappedFiles-&gt;push_back(std::make_pair(UF.Filename,&#32;MB.release()));
04274 &#32;&#32;}
04275 
04276 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!CXXUnit-&gt;Reparse(CXXIdx-&gt;<link linkend="_classclang_1_1_c_indexer_1aca55b1e223fa5e22564d21c796f83b53">getPCHContainerOperations</link>(),
04277 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*RemappedFiles.get()))
04278 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;CXError_Success;
04279 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_namespaceclang_1_1cxtu_1a780a13d3a9c39b2898045b05ff18c05e">isASTReadError</link>(CXXUnit))
04280 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;CXError_ASTReadError;
04281 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;CXError_Failure;
04282 }
04283 
<anchor xml:id="__c_index_8cpp_source_1l04284"/><link linkend="__c_index_8cpp_1a2befc445c3dde1e89f6900c67892ceaa">04284</link> <emphasis role="keywordtype">int</emphasis>&#32;<link linkend="__c_index_8cpp_1a2befc445c3dde1e89f6900c67892ceaa">clang_reparseTranslationUnit</link>(CXTranslationUnit&#32;TU,
04285 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;num_unsaved_files,
04286 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">struct</emphasis>&#32;CXUnsavedFile&#32;*unsaved_files,
04287 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<link linkend="_namespaceoptions">options</link>)&#32;{
04288 &#32;&#32;<link linkend="__c_log_8h_1a24474e48ce7e218f17ae9353103470d8">LOG_FUNC_SECTION</link>&#32;{&#32;*Log&#32;&lt;&lt;&#32;TU;&#32;}
04289 
04290 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(num_unsaved_files&#32;&amp;&amp;&#32;!unsaved_files)
04291 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;CXError_InvalidArguments;
04292 
04293 &#32;&#32;CXErrorCode&#32;result;
04294 &#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;ReparseTranslationUnitImpl&#32;=&#32;[=,&#32;&amp;result]()&#32;{
04295 &#32;&#32;&#32;&#32;result&#32;=&#32;clang_reparseTranslationUnit_Impl(
04296 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;TU,&#32;llvm::makeArrayRef(unsaved_files,&#32;num_unsaved_files),&#32;<link linkend="_namespaceoptions">options</link>);
04297 &#32;&#32;};
04298 
04299 &#32;&#32;llvm::CrashRecoveryContext&#32;CRC;
04300 
04301 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!<link linkend="_namespaceclang_1af866b018fe401ae941a367429bdd4c9a">RunSafely</link>(CRC,&#32;ReparseTranslationUnitImpl))&#32;{
04302 &#32;&#32;&#32;&#32;fprintf(stderr,&#32;<emphasis role="stringliteral">&quot;libclang:&#32;crash&#32;detected&#32;during&#32;reparsing\n&quot;</emphasis>);
04303 &#32;&#32;&#32;&#32;cxtu::getASTUnit(TU)-&gt;setUnsafeToFree(<emphasis role="keyword">true</emphasis>);
04304 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;CXError_Crashed;
04305 &#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(getenv(<emphasis role="stringliteral">&quot;LIBCLANG_RESOURCE_USAGE&quot;</emphasis>))
04306 &#32;&#32;&#32;&#32;<link linkend="_namespaceclang_1aa969857ada50e5f302f7127c78a63018">PrintLibclangResourceUsage</link>(TU);
04307 
04308 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;result;
04309 }
04310 
<anchor xml:id="__c_index_8cpp_source_1l04311"/><link linkend="__c_index_8cpp_1a042c9228f6e47d598c5112eb05940837">04311</link> CXString&#32;<link linkend="__c_index_8cpp_1a042c9228f6e47d598c5112eb05940837">clang_getTranslationUnitSpelling</link>(CXTranslationUnit&#32;CTUnit)&#32;{
04312 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(isNotUsableTU(CTUnit))&#32;{
04313 &#32;&#32;&#32;&#32;<link linkend="__c_x_translation_unit_8h_1a4ec17e6e03ea0baf73e27802eae36106">LOG_BAD_TU</link>(CTUnit);
04314 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1a8a49aa6ea196abdde85886689f2630f9">cxstring::createEmpty</link>();
04315 &#32;&#32;}
04316 
04317 &#32;&#32;ASTUnit&#32;*CXXUnit&#32;=&#32;cxtu::getASTUnit(CTUnit);
04318 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1a19a4962be87f75a8c1fa5a0b75f76298">cxstring::createDup</link>(CXXUnit-&gt;getOriginalSourceFileName());
04319 }
04320 
<anchor xml:id="__c_index_8cpp_source_1l04321"/><link linkend="__c_index_8cpp_1af80b706bca2457340a69f2ff05258046">04321</link> CXCursor&#32;<link linkend="__c_index_8cpp_1af80b706bca2457340a69f2ff05258046">clang_getTranslationUnitCursor</link>(CXTranslationUnit&#32;TU)&#32;{
04322 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(isNotUsableTU(TU))&#32;{
04323 &#32;&#32;&#32;&#32;<link linkend="__c_x_translation_unit_8h_1a4ec17e6e03ea0baf73e27802eae36106">LOG_BAD_TU</link>(TU);
04324 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__c_index_8cpp_1aa22233466eaf91f6f3cf6b84255c3b68">clang_getNullCursor</link>();
04325 &#32;&#32;}
04326 
04327 &#32;&#32;ASTUnit&#32;*CXXUnit&#32;=&#32;cxtu::getASTUnit(TU);
04328 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxcursor_1ab61ec2059175833672e8e78a376bb218">MakeCXCursor</link>(CXXUnit-&gt;getASTContext().getTranslationUnitDecl(),&#32;TU);
04329 }
04330 
<anchor xml:id="__c_index_8cpp_source_1l04331"/><link linkend="__c_index_8cpp_1a5482a4dddd4f6874d9cbbf5e6012e2d5">04331</link> CXTargetInfo&#32;<link linkend="__c_index_8cpp_1a5482a4dddd4f6874d9cbbf5e6012e2d5">clang_getTranslationUnitTargetInfo</link>(CXTranslationUnit&#32;CTUnit)&#32;{
04332 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(isNotUsableTU(CTUnit))&#32;{
04333 &#32;&#32;&#32;&#32;<link linkend="__c_x_translation_unit_8h_1a4ec17e6e03ea0baf73e27802eae36106">LOG_BAD_TU</link>(CTUnit);
04334 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">nullptr</emphasis>;
04335 &#32;&#32;}
04336 
04337 &#32;&#32;<link linkend="_struct_c_x_target_info_impl">CXTargetInfoImpl</link>&#32;*impl&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_struct_c_x_target_info_impl">CXTargetInfoImpl</link>();
04338 &#32;&#32;impl-&gt;<link linkend="_struct_c_x_target_info_impl_1a662b201dca7d2848e362fee786c91485">TranslationUnit</link>&#32;=&#32;CTUnit;
04339 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;impl;
04340 }
04341 
<anchor xml:id="__c_index_8cpp_source_1l04342"/><link linkend="__c_index_8cpp_1a2406512f8007c7d88ae433c7c2b4cb0d">04342</link> CXString&#32;<link linkend="__c_index_8cpp_1a2406512f8007c7d88ae433c7c2b4cb0d">clang_TargetInfo_getTriple</link>(CXTargetInfo&#32;TargetInfo)&#32;{
04343 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!TargetInfo)
04344 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1a8a49aa6ea196abdde85886689f2630f9">cxstring::createEmpty</link>();
04345 
04346 &#32;&#32;CXTranslationUnit&#32;CTUnit&#32;=&#32;TargetInfo-&gt;TranslationUnit;
04347 &#32;&#32;assert(!isNotUsableTU(CTUnit)&#32;&amp;&amp;
04348 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;Unexpected&#32;unusable&#32;translation&#32;unit&#32;in&#32;TargetInfo&quot;</emphasis>);
04349 
04350 &#32;&#32;ASTUnit&#32;*CXXUnit&#32;=&#32;cxtu::getASTUnit(CTUnit);
04351 &#32;&#32;std::string&#32;Triple&#32;=
04352 &#32;&#32;&#32;&#32;&#32;&#32;CXXUnit-&gt;getASTContext().getTargetInfo().getTriple().normalize();
04353 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1a19a4962be87f75a8c1fa5a0b75f76298">cxstring::createDup</link>(Triple);
04354 }
04355 
<anchor xml:id="__c_index_8cpp_source_1l04356"/><link linkend="__c_index_8cpp_1a76a103dd593b0f42310028638e1cc493">04356</link> <emphasis role="keywordtype">int</emphasis>&#32;<link linkend="__c_index_8cpp_1a76a103dd593b0f42310028638e1cc493">clang_TargetInfo_getPointerWidth</link>(CXTargetInfo&#32;TargetInfo)&#32;{
04357 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!TargetInfo)
04358 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;-1;
04359 
04360 &#32;&#32;CXTranslationUnit&#32;CTUnit&#32;=&#32;TargetInfo-&gt;TranslationUnit;
04361 &#32;&#32;assert(!isNotUsableTU(CTUnit)&#32;&amp;&amp;
04362 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;Unexpected&#32;unusable&#32;translation&#32;unit&#32;in&#32;TargetInfo&quot;</emphasis>);
04363 
04364 &#32;&#32;ASTUnit&#32;*CXXUnit&#32;=&#32;cxtu::getASTUnit(CTUnit);
04365 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;CXXUnit-&gt;getASTContext().getTargetInfo().getMaxPointerWidth();
04366 }
04367 
<anchor xml:id="__c_index_8cpp_source_1l04368"/><link linkend="__c_index_8cpp_1a29eef1b64c55bf9aa87dbd3e8ff9420c">04368</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="__c_index_8cpp_1a29eef1b64c55bf9aa87dbd3e8ff9420c">clang_TargetInfo_dispose</link>(CXTargetInfo&#32;TargetInfo)&#32;{
04369 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!TargetInfo)
04370 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
04371 
04372 &#32;&#32;<emphasis role="keyword">delete</emphasis>&#32;TargetInfo;
04373 }
04374 
04375 <emphasis role="comment">//===----------------------------------------------------------------------===//</emphasis>
04376 <emphasis role="comment">//&#32;CXFile&#32;Operations.</emphasis>
04377 <emphasis role="comment">//===----------------------------------------------------------------------===//</emphasis>
04378 
<anchor xml:id="__c_index_8cpp_source_1l04379"/><link linkend="__c_index_8cpp_1a263c34f5782353186990b2c990d648fc">04379</link> CXString&#32;<link linkend="__c_index_8cpp_1a263c34f5782353186990b2c990d648fc">clang_getFileName</link>(CXFile&#32;SFile)&#32;{
04380 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!SFile)
04381 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1a8684a35d52ccb8c623144db89a0205e1">cxstring::createNull</link>();
04382 
04383 &#32;&#32;FileEntry&#32;*FEnt&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis>FileEntry&#32;*<emphasis role="keyword">&gt;</emphasis>(SFile);
04384 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(FEnt-&gt;getName());
04385 }
04386 
<anchor xml:id="__c_index_8cpp_source_1l04387"/><link linkend="__c_index_8cpp_1a67542ed54ee45f1eaead6d69d6dd2a5d">04387</link> time_t&#32;<link linkend="__c_index_8cpp_1a67542ed54ee45f1eaead6d69d6dd2a5d">clang_getFileTime</link>(CXFile&#32;SFile)&#32;{
04388 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!SFile)
04389 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
04390 
04391 &#32;&#32;FileEntry&#32;*FEnt&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis>FileEntry&#32;*<emphasis role="keyword">&gt;</emphasis>(SFile);
04392 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;FEnt-&gt;getModificationTime();
04393 }
04394 
<anchor xml:id="__c_index_8cpp_source_1l04395"/><link linkend="__c_index_8cpp_1a7c72c3450d02a5d985f152cc0dee1785">04395</link> CXFile&#32;<link linkend="__c_index_8cpp_1a7c72c3450d02a5d985f152cc0dee1785">clang_getFile</link>(CXTranslationUnit&#32;TU,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*file_name)&#32;{
04396 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(isNotUsableTU(TU))&#32;{
04397 &#32;&#32;&#32;&#32;<link linkend="__c_x_translation_unit_8h_1a4ec17e6e03ea0baf73e27802eae36106">LOG_BAD_TU</link>(TU);
04398 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">nullptr</emphasis>;
04399 &#32;&#32;}
04400 
04401 &#32;&#32;ASTUnit&#32;*CXXUnit&#32;=&#32;cxtu::getASTUnit(TU);
04402 
04403 &#32;&#32;FileManager&#32;&amp;FMgr&#32;=&#32;CXXUnit-&gt;getFileManager();
04404 &#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;File&#32;=&#32;FMgr.getFile(file_name);
04405 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!File)
04406 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">nullptr</emphasis>;
04407 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">const_cast&lt;</emphasis>FileEntry&#32;*<emphasis role="keyword">&gt;</emphasis>(*File);
04408 }
04409 
<anchor xml:id="__c_index_8cpp_source_1l04410"/><link linkend="__c_index_8cpp_1ab1b9031c14339924bb73c9460957700f">04410</link> <emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*<link linkend="__c_index_8cpp_1ab1b9031c14339924bb73c9460957700f">clang_getFileContents</link>(CXTranslationUnit&#32;TU,&#32;CXFile&#32;file,
04411 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;*size)&#32;{
04412 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(isNotUsableTU(TU))&#32;{
04413 &#32;&#32;&#32;&#32;<link linkend="__c_x_translation_unit_8h_1a4ec17e6e03ea0baf73e27802eae36106">LOG_BAD_TU</link>(TU);
04414 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">nullptr</emphasis>;
04415 &#32;&#32;}
04416 
04417 &#32;&#32;<emphasis role="keyword">const</emphasis>&#32;SourceManager&#32;&amp;SM&#32;=&#32;cxtu::getASTUnit(TU)-&gt;getSourceManager();
04418 &#32;&#32;FileID&#32;fid&#32;=&#32;SM.translateFile(<emphasis role="keyword">static_cast&lt;</emphasis>FileEntry&#32;*<emphasis role="keyword">&gt;</emphasis>(file));
04419 &#32;&#32;llvm::Optional&lt;llvm::MemoryBufferRef&gt;&#32;buf&#32;=&#32;SM.getBufferOrNone(fid);
04420 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!buf)&#32;{
04421 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(size)
04422 &#32;&#32;&#32;&#32;&#32;&#32;*size&#32;=&#32;0;
04423 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">nullptr</emphasis>;
04424 &#32;&#32;}
04425 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(size)
04426 &#32;&#32;&#32;&#32;*size&#32;=&#32;buf-&gt;getBufferSize();
04427 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;buf-&gt;getBufferStart();
04428 }
04429 
<anchor xml:id="__c_index_8cpp_source_1l04430"/><link linkend="__c_index_8cpp_1a685b41c679e149e18549cf4f96dd966e">04430</link> <emphasis role="keywordtype">unsigned</emphasis>&#32;<link linkend="__c_index_8cpp_1a685b41c679e149e18549cf4f96dd966e">clang_isFileMultipleIncludeGuarded</link>(CXTranslationUnit&#32;TU,&#32;CXFile&#32;file)&#32;{
04431 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(isNotUsableTU(TU))&#32;{
04432 &#32;&#32;&#32;&#32;<link linkend="__c_x_translation_unit_8h_1a4ec17e6e03ea0baf73e27802eae36106">LOG_BAD_TU</link>(TU);
04433 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
04434 &#32;&#32;}
04435 
04436 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!file)
04437 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
04438 
04439 &#32;&#32;ASTUnit&#32;*CXXUnit&#32;=&#32;cxtu::getASTUnit(TU);
04440 &#32;&#32;FileEntry&#32;*FEnt&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis>FileEntry&#32;*<emphasis role="keyword">&gt;</emphasis>(file);
04441 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;CXXUnit-&gt;getPreprocessor()
04442 &#32;&#32;&#32;&#32;&#32;&#32;.getHeaderSearchInfo()
04443 &#32;&#32;&#32;&#32;&#32;&#32;.isFileMultipleIncludeGuarded(FEnt);
04444 }
04445 
<anchor xml:id="__c_index_8cpp_source_1l04446"/><link linkend="__c_index_8cpp_1abe0d3306cef8c302d1d4b4e077dca925">04446</link> <emphasis role="keywordtype">int</emphasis>&#32;<link linkend="__c_index_8cpp_1abe0d3306cef8c302d1d4b4e077dca925">clang_getFileUniqueID</link>(CXFile&#32;file,&#32;CXFileUniqueID&#32;*outID)&#32;{
04447 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!file&#32;||&#32;!outID)
04448 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;1;
04449 
04450 &#32;&#32;FileEntry&#32;*FEnt&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis>FileEntry&#32;*<emphasis role="keyword">&gt;</emphasis>(file);
04451 &#32;&#32;<emphasis role="keyword">const</emphasis>&#32;llvm::sys::fs::UniqueID&#32;&amp;ID&#32;=&#32;FEnt-&gt;getUniqueID();
04452 &#32;&#32;outID-&gt;data[0]&#32;=&#32;ID.getDevice();
04453 &#32;&#32;outID-&gt;data[1]&#32;=&#32;ID.getFile();
04454 &#32;&#32;outID-&gt;data[2]&#32;=&#32;FEnt-&gt;getModificationTime();
04455 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
04456 }
04457 
<anchor xml:id="__c_index_8cpp_source_1l04458"/><link linkend="__c_index_8cpp_1afa28197effe920c89059cbfb6020b62d">04458</link> <emphasis role="keywordtype">int</emphasis>&#32;<link linkend="__c_index_8cpp_1afa28197effe920c89059cbfb6020b62d">clang_File_isEqual</link>(CXFile&#32;file1,&#32;CXFile&#32;file2)&#32;{
04459 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(file1&#32;==&#32;file2)
04460 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
04461 
04462 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!file1&#32;||&#32;!file2)
04463 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
04464 
04465 &#32;&#32;FileEntry&#32;*FEnt1&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis>FileEntry&#32;*<emphasis role="keyword">&gt;</emphasis>(file1);
04466 &#32;&#32;FileEntry&#32;*FEnt2&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis>FileEntry&#32;*<emphasis role="keyword">&gt;</emphasis>(file2);
04467 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;FEnt1-&gt;getUniqueID()&#32;==&#32;FEnt2-&gt;getUniqueID();
04468 }
04469 
<anchor xml:id="__c_index_8cpp_source_1l04470"/><link linkend="__c_index_8cpp_1a5cb0eeafc678bac68cefa057fea1e56b">04470</link> CXString&#32;<link linkend="__c_index_8cpp_1a5cb0eeafc678bac68cefa057fea1e56b">clang_File_tryGetRealPathName</link>(CXFile&#32;SFile)&#32;{
04471 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!SFile)
04472 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1a8684a35d52ccb8c623144db89a0205e1">cxstring::createNull</link>();
04473 
04474 &#32;&#32;FileEntry&#32;*FEnt&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis>FileEntry&#32;*<emphasis role="keyword">&gt;</emphasis>(SFile);
04475 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(FEnt-&gt;tryGetRealPathName());
04476 }
04477 
04478 <emphasis role="comment">//===----------------------------------------------------------------------===//</emphasis>
04479 <emphasis role="comment">//&#32;CXCursor&#32;Operations.</emphasis>
04480 <emphasis role="comment">//===----------------------------------------------------------------------===//</emphasis>
04481 
04482 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;Decl&#32;*getDeclFromExpr(<emphasis role="keyword">const</emphasis>&#32;Stmt&#32;*E)&#32;{
04483 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;ImplicitCastExpr&#32;*CE&#32;=&#32;dyn_cast&lt;ImplicitCastExpr&gt;(E))
04484 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;getDeclFromExpr(CE-&gt;getSubExpr());
04485 
04486 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;DeclRefExpr&#32;*RefExpr&#32;=&#32;dyn_cast&lt;DeclRefExpr&gt;(E))
04487 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;RefExpr-&gt;getDecl();
04488 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;MemberExpr&#32;*ME&#32;=&#32;dyn_cast&lt;MemberExpr&gt;(E))
04489 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;ME-&gt;getMemberDecl();
04490 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;ObjCIvarRefExpr&#32;*RE&#32;=&#32;dyn_cast&lt;ObjCIvarRefExpr&gt;(E))
04491 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;RE-&gt;getDecl();
04492 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;ObjCPropertyRefExpr&#32;*PRE&#32;=&#32;dyn_cast&lt;ObjCPropertyRefExpr&gt;(E))&#32;{
04493 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(PRE-&gt;isExplicitProperty())
04494 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;PRE-&gt;getExplicitProperty();
04495 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;It&#32;could&#32;be&#32;messaging&#32;both&#32;getter&#32;and&#32;setter&#32;as&#32;in:</emphasis>
04496 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;++myobj.myprop;</emphasis>
04497 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;in&#32;which&#32;case&#32;prefer&#32;to&#32;associate&#32;the&#32;setter&#32;since&#32;it&#32;is&#32;less&#32;obvious</emphasis>
04498 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;from&#32;inspecting&#32;the&#32;source&#32;that&#32;the&#32;setter&#32;is&#32;going&#32;to&#32;get&#32;called.</emphasis>
04499 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(PRE-&gt;isMessagingSetter())
04500 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;PRE-&gt;getImplicitPropertySetter();
04501 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;PRE-&gt;getImplicitPropertyGetter();
04502 &#32;&#32;}
04503 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;PseudoObjectExpr&#32;*POE&#32;=&#32;dyn_cast&lt;PseudoObjectExpr&gt;(E))
04504 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;getDeclFromExpr(POE-&gt;getSyntacticForm());
04505 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;OpaqueValueExpr&#32;*OVE&#32;=&#32;dyn_cast&lt;OpaqueValueExpr&gt;(E))
04506 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(Expr&#32;*Src&#32;=&#32;OVE-&gt;getSourceExpr())
04507 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;getDeclFromExpr(Src);
04508 
04509 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;CallExpr&#32;*CE&#32;=&#32;dyn_cast&lt;CallExpr&gt;(E))
04510 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;getDeclFromExpr(CE-&gt;getCallee());
04511 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;CXXConstructExpr&#32;*CE&#32;=&#32;dyn_cast&lt;CXXConstructExpr&gt;(E))
04512 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!CE-&gt;isElidable())
04513 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;CE-&gt;getConstructor();
04514 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;CXXInheritedCtorInitExpr&#32;*CE&#32;=
04515 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;dyn_cast&lt;CXXInheritedCtorInitExpr&gt;(E))
04516 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;CE-&gt;getConstructor();
04517 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;ObjCMessageExpr&#32;*OME&#32;=&#32;dyn_cast&lt;ObjCMessageExpr&gt;(E))
04518 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;OME-&gt;getMethodDecl();
04519 
04520 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;ObjCProtocolExpr&#32;*PE&#32;=&#32;dyn_cast&lt;ObjCProtocolExpr&gt;(E))
04521 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;PE-&gt;getProtocol();
04522 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;SubstNonTypeTemplateParmPackExpr&#32;*NTTP&#32;=
04523 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;dyn_cast&lt;SubstNonTypeTemplateParmPackExpr&gt;(E))
04524 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;NTTP-&gt;getParameterPack();
04525 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;SizeOfPackExpr&#32;*SizeOfPack&#32;=&#32;dyn_cast&lt;SizeOfPackExpr&gt;(E))
04526 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(isa&lt;NonTypeTemplateParmDecl&gt;(SizeOfPack-&gt;getPack())&#32;||
04527 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;isa&lt;ParmVarDecl&gt;(SizeOfPack-&gt;getPack()))
04528 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;SizeOfPack-&gt;getPack();
04529 
04530 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">nullptr</emphasis>;
04531 }
04532 
04533 <emphasis role="keyword">static</emphasis>&#32;SourceLocation&#32;getLocationFromExpr(<emphasis role="keyword">const</emphasis>&#32;Expr&#32;*E)&#32;{
04534 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;ImplicitCastExpr&#32;*CE&#32;=&#32;dyn_cast&lt;ImplicitCastExpr&gt;(E))
04535 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;getLocationFromExpr(CE-&gt;getSubExpr());
04536 
04537 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;ObjCMessageExpr&#32;*Msg&#32;=&#32;dyn_cast&lt;ObjCMessageExpr&gt;(E))
04538 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="comment">/*FIXME:*/</emphasis>&#32;Msg-&gt;getLeftLoc();
04539 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;DeclRefExpr&#32;*DRE&#32;=&#32;dyn_cast&lt;DeclRefExpr&gt;(E))
04540 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;DRE-&gt;getLocation();
04541 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;MemberExpr&#32;*Member&#32;=&#32;dyn_cast&lt;MemberExpr&gt;(E))
04542 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;Member-&gt;getMemberLoc();
04543 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;ObjCIvarRefExpr&#32;*Ivar&#32;=&#32;dyn_cast&lt;ObjCIvarRefExpr&gt;(E))
04544 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;Ivar-&gt;getLocation();
04545 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;SizeOfPackExpr&#32;*SizeOfPack&#32;=&#32;dyn_cast&lt;SizeOfPackExpr&gt;(E))
04546 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;SizeOfPack-&gt;getPackLoc();
04547 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;ObjCPropertyRefExpr&#32;*PropRef&#32;=&#32;dyn_cast&lt;ObjCPropertyRefExpr&gt;(E))
04548 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;PropRef-&gt;getLocation();
04549 
04550 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;E-&gt;getBeginLoc();
04551 }
04552 
04553 <emphasis role="keyword">extern</emphasis>&#32;<emphasis role="stringliteral">&quot;C&quot;</emphasis>&#32;{
04554 
<anchor xml:id="__c_index_8cpp_source_1l04555"/><link linkend="__c_index_8cpp_1a68f5626687386695a7c431807b46f085">04555</link> <emphasis role="keywordtype">unsigned</emphasis>&#32;<link linkend="__c_index_8cpp_1a68f5626687386695a7c431807b46f085">clang_visitChildren</link>(CXCursor&#32;parent,&#32;CXCursorVisitor&#32;visitor,
04556 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;CXClientData&#32;client_data)&#32;{
04557 &#32;&#32;<link linkend="_classclang_1_1cxcursor_1_1_cursor_visitor">CursorVisitor</link>&#32;CursorVis(<link linkend="_namespaceclang_1_1cxcursor_1a23a495df22339e8289ae6d2421f493b6">getCursorTU</link>(parent),&#32;visitor,&#32;client_data,
04558 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*VisitPreprocessorLast=*/</emphasis><emphasis role="keyword">false</emphasis>);
04559 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;CursorVis.<link linkend="_classclang_1_1cxcursor_1_1_cursor_visitor_1ada34939666b6f90e3144f4624fc64896">VisitChildren</link>(parent);
04560 }
04561 
04562 <emphasis role="preprocessor">#ifndef&#32;__has_feature</emphasis>
04563 <emphasis role="preprocessor">#define&#32;__has_feature(x)&#32;0</emphasis>
04564 <emphasis role="preprocessor">#endif</emphasis>
04565 <emphasis role="preprocessor">#if&#32;__has_feature(blocks)</emphasis>
04566 <emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">enum</emphasis>&#32;CXChildVisitResult&#32;(^<link linkend="_struct___c_x_child_visit_result">CXCursorVisitorBlock</link>)(CXCursor&#32;cursor,
04567 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;CXCursor&#32;parent);
04568 
04569 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">enum</emphasis>&#32;CXChildVisitResult&#32;visitWithBlock(CXCursor&#32;cursor,&#32;CXCursor&#32;parent,
04570 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;CXClientData&#32;client_data)&#32;{
04571 &#32;&#32;<link linkend="_struct___c_x_child_visit_result">CXCursorVisitorBlock</link>&#32;block&#32;=&#32;(<link linkend="__c_index_8cpp_1a9ea360dd4276806a13c2ad73b0ae7b93">CXCursorVisitorBlock</link>)client_data;
04572 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;block(cursor,&#32;parent);
04573 }
04574 <emphasis role="preprocessor">#else</emphasis>
04575 <emphasis role="comment">//&#32;If&#32;we&#32;are&#32;compiled&#32;with&#32;a&#32;compiler&#32;that&#32;doesn&apos;t&#32;have&#32;native&#32;blocks&#32;support,</emphasis>
04576 <emphasis role="comment">//&#32;define&#32;and&#32;call&#32;the&#32;block&#32;manually,&#32;so&#32;the</emphasis>
<anchor xml:id="__c_index_8cpp_source_1l04577"/><link linkend="_struct___c_x_child_visit_result">04577</link> <emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_struct___c_x_child_visit_result">_CXChildVisitResult</link>&#32;{
<anchor xml:id="__c_index_8cpp_source_1l04578"/><link linkend="_struct___c_x_child_visit_result_1a512ab843e0019e38619185d825e96bca">04578</link> &#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;*<link linkend="_struct___c_x_child_visit_result_1a512ab843e0019e38619185d825e96bca">isa</link>;
<anchor xml:id="__c_index_8cpp_source_1l04579"/><link linkend="_struct___c_x_child_visit_result_1a11978bc7ba344d1c4481589cf068034e">04579</link> &#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_struct___c_x_child_visit_result_1a11978bc7ba344d1c4481589cf068034e">flags</link>;
<anchor xml:id="__c_index_8cpp_source_1l04580"/><link linkend="_struct___c_x_child_visit_result_1a4c75e3170ea16cfb63842f3feca1bda7">04580</link> &#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;reserved;
04581 &#32;&#32;<emphasis role="keyword">enum</emphasis>&#32;CXChildVisitResult&#32;(*invoke)(<emphasis role="keyword">struct&#32;</emphasis><link linkend="_struct___c_x_child_visit_result">_CXChildVisitResult</link>&#32;*,&#32;CXCursor,
04582 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;CXCursor);
<anchor xml:id="__c_index_8cpp_source_1l04583"/><link linkend="__c_index_8cpp_1a9ea360dd4276806a13c2ad73b0ae7b93">04583</link> }&#32;*&#32;<link linkend="__c_index_8cpp_1a9ea360dd4276806a13c2ad73b0ae7b93">CXCursorVisitorBlock</link>;
04584 
04585 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">enum</emphasis>&#32;CXChildVisitResult&#32;visitWithBlock(CXCursor&#32;cursor,&#32;CXCursor&#32;parent,
04586 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;CXClientData&#32;client_data)&#32;{
04587 &#32;&#32;<link linkend="_struct___c_x_child_visit_result">CXCursorVisitorBlock</link>&#32;block&#32;=&#32;(<link linkend="__c_index_8cpp_1a9ea360dd4276806a13c2ad73b0ae7b93">CXCursorVisitorBlock</link>)client_data;
04588 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;block-&gt;<link linkend="_struct___c_x_child_visit_result_1a4c75e3170ea16cfb63842f3feca1bda7">invoke</link>(block,&#32;cursor,&#32;parent);
04589 }
04590 <emphasis role="preprocessor">#endif</emphasis>
04591 
<anchor xml:id="__c_index_8cpp_source_1l04592"/><link linkend="__c_index_8cpp_1a3b84afea8d2536aa205930809caa29c0">04592</link> <emphasis role="keywordtype">unsigned</emphasis>&#32;<link linkend="__c_index_8cpp_1a3b84afea8d2536aa205930809caa29c0">clang_visitChildrenWithBlock</link>(CXCursor&#32;parent,
04593 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct___c_x_child_visit_result">CXCursorVisitorBlock</link>&#32;block)&#32;{
04594 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__c_index_8cpp_1a68f5626687386695a7c431807b46f085">clang_visitChildren</link>(parent,&#32;visitWithBlock,&#32;block);
04595 }
04596 
04597 <emphasis role="keyword">static</emphasis>&#32;CXString&#32;getDeclSpelling(<emphasis role="keyword">const</emphasis>&#32;Decl&#32;*D)&#32;{
04598 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!D)
04599 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1a8a49aa6ea196abdde85886689f2630f9">cxstring::createEmpty</link>();
04600 
04601 &#32;&#32;<emphasis role="keyword">const</emphasis>&#32;NamedDecl&#32;*ND&#32;=&#32;dyn_cast&lt;NamedDecl&gt;(D);
04602 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!ND)&#32;{
04603 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;ObjCPropertyImplDecl&#32;*PropImpl&#32;=
04604 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;dyn_cast&lt;ObjCPropertyImplDecl&gt;(D))
04605 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(ObjCPropertyDecl&#32;*Property&#32;=&#32;PropImpl-&gt;getPropertyDecl())
04606 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1a19a4962be87f75a8c1fa5a0b75f76298">cxstring::createDup</link>(Property-&gt;getIdentifier()-&gt;getName());
04607 
04608 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;ImportDecl&#32;*ImportD&#32;=&#32;dyn_cast&lt;ImportDecl&gt;(D))
04609 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(Module&#32;*Mod&#32;=&#32;ImportD-&gt;getImportedModule())
04610 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1a19a4962be87f75a8c1fa5a0b75f76298">cxstring::createDup</link>(Mod-&gt;getFullModuleName());
04611 
04612 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1a8a49aa6ea196abdde85886689f2630f9">cxstring::createEmpty</link>();
04613 &#32;&#32;}
04614 
04615 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;ObjCMethodDecl&#32;*OMD&#32;=&#32;dyn_cast&lt;ObjCMethodDecl&gt;(ND))
04616 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1a19a4962be87f75a8c1fa5a0b75f76298">cxstring::createDup</link>(OMD-&gt;getSelector().getAsString());
04617 
04618 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;ObjCCategoryImplDecl&#32;*CIMP&#32;=&#32;dyn_cast&lt;ObjCCategoryImplDecl&gt;(ND))
04619 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;No,&#32;this&#32;isn&apos;t&#32;the&#32;same&#32;as&#32;the&#32;code&#32;below.&#32;getIdentifier()&#32;is&#32;non-virtual</emphasis>
04620 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;and&#32;returns&#32;different&#32;names.&#32;NamedDecl&#32;returns&#32;the&#32;class&#32;name&#32;and</emphasis>
04621 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;ObjCCategoryImplDecl&#32;returns&#32;the&#32;category&#32;name.</emphasis>
04622 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(CIMP-&gt;getIdentifier()-&gt;getNameStart());
04623 
04624 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(isa&lt;UsingDirectiveDecl&gt;(D))
04625 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1a8a49aa6ea196abdde85886689f2630f9">cxstring::createEmpty</link>();
04626 
04627 &#32;&#32;SmallString&lt;1024&gt;&#32;S;
04628 &#32;&#32;llvm::raw_svector_ostream&#32;os(S);
04629 &#32;&#32;ND-&gt;printName(os);
04630 
04631 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1a19a4962be87f75a8c1fa5a0b75f76298">cxstring::createDup</link>(os.str());
04632 }
04633 
<anchor xml:id="__c_index_8cpp_source_1l04634"/><link linkend="__c_index_8cpp_1a412f1282680f05ef2b991f21a59ad3ac">04634</link> CXString&#32;<link linkend="__c_index_8cpp_1a412f1282680f05ef2b991f21a59ad3ac">clang_getCursorSpelling</link>(CXCursor&#32;C)&#32;{
04635 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="__c_index_8cpp_1ace455769e0f5681db67622db98f263a1">clang_isTranslationUnit</link>(C.kind))
04636 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__c_index_8cpp_1a042c9228f6e47d598c5112eb05940837">clang_getTranslationUnitSpelling</link>(<link linkend="_namespaceclang_1_1cxcursor_1a23a495df22339e8289ae6d2421f493b6">getCursorTU</link>(C));
04637 
04638 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="__c_index_8cpp_1a8b03541653a9373d35919c45216bc70f">clang_isReference</link>(C.kind))&#32;{
04639 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(C.kind)&#32;{
04640 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_ObjCSuperClassRef:&#32;{
04641 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;ObjCInterfaceDecl&#32;*Super&#32;=&#32;<link linkend="_namespaceclang_1_1cxcursor_1a071683bc881399c3bcadba5a4da408b2">getCursorObjCSuperClassRef</link>(C).first;
04642 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(Super-&gt;getIdentifier()-&gt;getNameStart());
04643 &#32;&#32;&#32;&#32;}
04644 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_ObjCClassRef:&#32;{
04645 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;ObjCInterfaceDecl&#32;*Class&#32;=&#32;<link linkend="_namespaceclang_1_1cxcursor_1ad21fba4a3d5f6bdc63a19303b1cb42a3">getCursorObjCClassRef</link>(C).first;
04646 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(Class-&gt;getIdentifier()-&gt;getNameStart());
04647 &#32;&#32;&#32;&#32;}
04648 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_ObjCProtocolRef:&#32;{
04649 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;ObjCProtocolDecl&#32;*OID&#32;=&#32;<link linkend="_namespaceclang_1_1cxcursor_1a1675d17bfec653da314fa2beff772829">getCursorObjCProtocolRef</link>(C).first;
04650 &#32;&#32;&#32;&#32;&#32;&#32;assert(OID&#32;&amp;&amp;&#32;<emphasis role="stringliteral">&quot;getCursorSpelling():&#32;Missing&#32;protocol&#32;decl&quot;</emphasis>);
04651 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(OID-&gt;getIdentifier()-&gt;getNameStart());
04652 &#32;&#32;&#32;&#32;}
04653 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_CXXBaseSpecifier:&#32;{
04654 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;CXXBaseSpecifier&#32;*B&#32;=&#32;<link linkend="_namespaceclang_1_1cxcursor_1a05b387c1d9aeb75b3de539f8622e0964">getCursorCXXBaseSpecifier</link>(C);
04655 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1a19a4962be87f75a8c1fa5a0b75f76298">cxstring::createDup</link>(B-&gt;getType().getAsString());
04656 &#32;&#32;&#32;&#32;}
04657 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_TypeRef:&#32;{
04658 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;TypeDecl&#32;*Type&#32;=&#32;<link linkend="_namespaceclang_1_1cxcursor_1ab0284c10c2cfeb2ffe43b99ec3e9dd9f">getCursorTypeRef</link>(C).first;
04659 &#32;&#32;&#32;&#32;&#32;&#32;assert(Type&#32;&amp;&amp;&#32;<emphasis role="stringliteral">&quot;Missing&#32;type&#32;decl&quot;</emphasis>);
04660 
04661 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1a19a4962be87f75a8c1fa5a0b75f76298">cxstring::createDup</link>(
04662 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespaceclang_1_1cxcursor_1a9f29c286f26b3cf616331c7e6554d373">getCursorContext</link>(C).getTypeDeclType(Type).getAsString());
04663 &#32;&#32;&#32;&#32;}
04664 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_TemplateRef:&#32;{
04665 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;TemplateDecl&#32;*Template&#32;=&#32;<link linkend="_namespaceclang_1_1cxcursor_1aacf77fc4aabf02cfa865e6fe19e55d08">getCursorTemplateRef</link>(C).first;
04666 &#32;&#32;&#32;&#32;&#32;&#32;assert(Template&#32;&amp;&amp;&#32;<emphasis role="stringliteral">&quot;Missing&#32;template&#32;decl&quot;</emphasis>);
04667 
04668 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1a19a4962be87f75a8c1fa5a0b75f76298">cxstring::createDup</link>(Template-&gt;getNameAsString());
04669 &#32;&#32;&#32;&#32;}
04670 
04671 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_NamespaceRef:&#32;{
04672 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;NamedDecl&#32;*NS&#32;=&#32;<link linkend="_namespaceclang_1_1cxcursor_1ac87835a4525ca9f54e4666e7b76ec6f6">getCursorNamespaceRef</link>(C).first;
04673 &#32;&#32;&#32;&#32;&#32;&#32;assert(NS&#32;&amp;&amp;&#32;<emphasis role="stringliteral">&quot;Missing&#32;namespace&#32;decl&quot;</emphasis>);
04674 
04675 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1a19a4962be87f75a8c1fa5a0b75f76298">cxstring::createDup</link>(NS-&gt;getNameAsString());
04676 &#32;&#32;&#32;&#32;}
04677 
04678 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_MemberRef:&#32;{
04679 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;FieldDecl&#32;*Field&#32;=&#32;<link linkend="_namespaceclang_1_1cxcursor_1af3f3d2390bed39285f0b3313c1fab84b">getCursorMemberRef</link>(C).first;
04680 &#32;&#32;&#32;&#32;&#32;&#32;assert(Field&#32;&amp;&amp;&#32;<emphasis role="stringliteral">&quot;Missing&#32;member&#32;decl&quot;</emphasis>);
04681 
04682 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1a19a4962be87f75a8c1fa5a0b75f76298">cxstring::createDup</link>(Field-&gt;getNameAsString());
04683 &#32;&#32;&#32;&#32;}
04684 
04685 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_LabelRef:&#32;{
04686 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;LabelStmt&#32;*Label&#32;=&#32;<link linkend="_namespaceclang_1_1cxcursor_1a642e34370b829d06752d76d13c6a58dd">getCursorLabelRef</link>(C).first;
04687 &#32;&#32;&#32;&#32;&#32;&#32;assert(Label&#32;&amp;&amp;&#32;<emphasis role="stringliteral">&quot;Missing&#32;label&quot;</emphasis>);
04688 
04689 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(Label-&gt;getName());
04690 &#32;&#32;&#32;&#32;}
04691 
04692 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_OverloadedDeclRef:&#32;{
04693 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespaceclang_1_1cxcursor_1a944e67de567f6905f10876d7585ac43b">OverloadedDeclRefStorage</link>&#32;Storage&#32;=&#32;<link linkend="_namespaceclang_1_1cxcursor_1a4b41e93d6de24aed1376ec7f789efa2a">getCursorOverloadedDeclRef</link>(C).first;
04694 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;Decl&#32;*D&#32;=&#32;Storage.dyn_cast&lt;<emphasis role="keyword">const</emphasis>&#32;Decl&#32;*&gt;())&#32;{
04695 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;NamedDecl&#32;*ND&#32;=&#32;dyn_cast&lt;NamedDecl&gt;(D))
04696 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1a19a4962be87f75a8c1fa5a0b75f76298">cxstring::createDup</link>(ND-&gt;getNameAsString());
04697 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1a8a49aa6ea196abdde85886689f2630f9">cxstring::createEmpty</link>();
04698 &#32;&#32;&#32;&#32;&#32;&#32;}
04699 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;OverloadExpr&#32;*E&#32;=&#32;Storage.dyn_cast&lt;<emphasis role="keyword">const</emphasis>&#32;OverloadExpr&#32;*&gt;())
04700 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1a19a4962be87f75a8c1fa5a0b75f76298">cxstring::createDup</link>(E-&gt;getName().getAsString());
04701 &#32;&#32;&#32;&#32;&#32;&#32;OverloadedTemplateStorage&#32;*Ovl&#32;=
04702 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Storage.get&lt;OverloadedTemplateStorage&#32;*&gt;();
04703 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(Ovl-&gt;size()&#32;==&#32;0)
04704 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1a8a49aa6ea196abdde85886689f2630f9">cxstring::createEmpty</link>();
04705 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1a19a4962be87f75a8c1fa5a0b75f76298">cxstring::createDup</link>((*Ovl-&gt;begin())-&gt;getNameAsString());
04706 &#32;&#32;&#32;&#32;}
04707 
04708 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_VariableRef:&#32;{
04709 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;VarDecl&#32;*Var&#32;=&#32;<link linkend="_namespaceclang_1_1cxcursor_1a53fa4c4c92a2fbaded59ad51eeed6e47">getCursorVariableRef</link>(C).first;
04710 &#32;&#32;&#32;&#32;&#32;&#32;assert(Var&#32;&amp;&amp;&#32;<emphasis role="stringliteral">&quot;Missing&#32;variable&#32;decl&quot;</emphasis>);
04711 
04712 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1a19a4962be87f75a8c1fa5a0b75f76298">cxstring::createDup</link>(Var-&gt;getNameAsString());
04713 &#32;&#32;&#32;&#32;}
04714 
04715 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">default</emphasis>:
04716 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;&lt;not&#32;implemented&gt;&quot;</emphasis>);
04717 &#32;&#32;&#32;&#32;}
04718 &#32;&#32;}
04719 
04720 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="__c_index_8cpp_1ab958945dd59c351e1ae1a3f7f5668095">clang_isExpression</link>(C.kind))&#32;{
04721 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;Expr&#32;*E&#32;=&#32;<link linkend="_namespaceclang_1_1cxcursor_1a80837a3710c6df0dfc24b5ee1d94ff9b">getCursorExpr</link>(C);
04722 
04723 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(C.kind&#32;==&#32;CXCursor_ObjCStringLiteral&#32;||
04724 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;C.kind&#32;==&#32;CXCursor_StringLiteral)&#32;{
04725 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;StringLiteral&#32;*SLit;
04726 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;ObjCStringLiteral&#32;*OSL&#32;=&#32;dyn_cast&lt;ObjCStringLiteral&gt;(E))&#32;{
04727 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;SLit&#32;=&#32;OSL-&gt;getString();
04728 &#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
04729 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;SLit&#32;=&#32;cast&lt;StringLiteral&gt;(E);
04730 &#32;&#32;&#32;&#32;&#32;&#32;}
04731 &#32;&#32;&#32;&#32;&#32;&#32;SmallString&lt;256&gt;&#32;Buf;
04732 &#32;&#32;&#32;&#32;&#32;&#32;llvm::raw_svector_ostream&#32;OS(Buf);
04733 &#32;&#32;&#32;&#32;&#32;&#32;SLit-&gt;outputString(OS);
04734 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1a19a4962be87f75a8c1fa5a0b75f76298">cxstring::createDup</link>(OS.str());
04735 &#32;&#32;&#32;&#32;}
04736 
04737 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;Decl&#32;*D&#32;=&#32;getDeclFromExpr(<link linkend="_namespaceclang_1_1cxcursor_1a80837a3710c6df0dfc24b5ee1d94ff9b">getCursorExpr</link>(C));
04738 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(D)
04739 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;getDeclSpelling(D);
04740 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1a8a49aa6ea196abdde85886689f2630f9">cxstring::createEmpty</link>();
04741 &#32;&#32;}
04742 
04743 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="__c_index_8cpp_1af186bec30eb4cb63c3a7a295ccbcfe8b">clang_isStatement</link>(C.kind))&#32;{
04744 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;Stmt&#32;*S&#32;=&#32;<link linkend="_namespaceclang_1_1cxcursor_1a2d5cb233204f81be58bd21deb628c7ad">getCursorStmt</link>(C);
04745 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;LabelStmt&#32;*Label&#32;=&#32;dyn_cast_or_null&lt;LabelStmt&gt;(S))
04746 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(Label-&gt;getName());
04747 
04748 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1a8a49aa6ea196abdde85886689f2630f9">cxstring::createEmpty</link>();
04749 &#32;&#32;}
04750 
04751 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(C.kind&#32;==&#32;CXCursor_MacroExpansion)
04752 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(
04753 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;getCursorMacroExpansion(C).getName()-&gt;getNameStart());
04754 
04755 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(C.kind&#32;==&#32;CXCursor_MacroDefinition)
04756 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(
04757 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespaceclang_1_1cxcursor_1a62254c8ae8eca4c0ca0f2d2a659e7d80">getCursorMacroDefinition</link>(C)-&gt;getName()-&gt;getNameStart());
04758 
04759 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(C.kind&#32;==&#32;CXCursor_InclusionDirective)
04760 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1a19a4962be87f75a8c1fa5a0b75f76298">cxstring::createDup</link>(<link linkend="_namespaceclang_1_1cxcursor_1a3894d584fef6edb8ba4333fc240315ac">getCursorInclusionDirective</link>(C)-&gt;getFileName());
04761 
04762 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="__c_index_8cpp_1a5d47db8f608ae0c266d6551875d46b80">clang_isDeclaration</link>(C.kind))
04763 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;getDeclSpelling(<link linkend="_namespaceclang_1_1cxcursor_1a1f702246831c96afd990e457613dc642">getCursorDecl</link>(C));
04764 
04765 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(C.kind&#32;==&#32;CXCursor_AnnotateAttr)&#32;{
04766 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;AnnotateAttr&#32;*AA&#32;=&#32;cast&lt;AnnotateAttr&gt;(<link linkend="_namespaceclang_1_1cxcursor_1afdc6aa952869e16b4981b07f05adff7f">cxcursor::getCursorAttr</link>(C));
04767 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1a19a4962be87f75a8c1fa5a0b75f76298">cxstring::createDup</link>(AA-&gt;getAnnotation());
04768 &#32;&#32;}
04769 
04770 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(C.kind&#32;==&#32;CXCursor_AsmLabelAttr)&#32;{
04771 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;AsmLabelAttr&#32;*AA&#32;=&#32;cast&lt;AsmLabelAttr&gt;(<link linkend="_namespaceclang_1_1cxcursor_1afdc6aa952869e16b4981b07f05adff7f">cxcursor::getCursorAttr</link>(C));
04772 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1a19a4962be87f75a8c1fa5a0b75f76298">cxstring::createDup</link>(AA-&gt;getLabel());
04773 &#32;&#32;}
04774 
04775 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(C.kind&#32;==&#32;CXCursor_PackedAttr)&#32;{
04776 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;packed&quot;</emphasis>);
04777 &#32;&#32;}
04778 
04779 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(C.kind&#32;==&#32;CXCursor_VisibilityAttr)&#32;{
04780 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;VisibilityAttr&#32;*AA&#32;=&#32;cast&lt;VisibilityAttr&gt;(<link linkend="_namespaceclang_1_1cxcursor_1afdc6aa952869e16b4981b07f05adff7f">cxcursor::getCursorAttr</link>(C));
04781 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(AA-&gt;getVisibility())&#32;{
04782 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;VisibilityAttr::VisibilityType::Default:
04783 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;default&quot;</emphasis>);
04784 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;VisibilityAttr::VisibilityType::Hidden:
04785 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;hidden&quot;</emphasis>);
04786 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;VisibilityAttr::VisibilityType::Protected:
04787 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;protected&quot;</emphasis>);
04788 &#32;&#32;&#32;&#32;}
04789 &#32;&#32;&#32;&#32;llvm_unreachable(<emphasis role="stringliteral">&quot;unknown&#32;visibility&#32;type&quot;</emphasis>);
04790 &#32;&#32;}
04791 
04792 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1a8a49aa6ea196abdde85886689f2630f9">cxstring::createEmpty</link>();
04793 }
04794 
<anchor xml:id="__c_index_8cpp_source_1l04795"/><link linkend="__c_index_8cpp_1aedf6f9d3e1c24f3c4e29eae0dd24487d">04795</link> CXSourceRange&#32;<link linkend="__c_index_8cpp_1aedf6f9d3e1c24f3c4e29eae0dd24487d">clang_Cursor_getSpellingNameRange</link>(CXCursor&#32;C,&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;pieceIndex,
04796 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<link linkend="_namespaceoptions">options</link>)&#32;{
04797 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="__c_x_cursor_8cpp_1af734553e3bac74a4a1f6f7450513cf0f">clang_Cursor_isNull</link>(C))
04798 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__c_x_source_location_8cpp_1afadb1a95ce51366407cf6c363299a17f">clang_getNullRange</link>();
04799 
04800 &#32;&#32;ASTContext&#32;&amp;Ctx&#32;=&#32;<link linkend="_namespaceclang_1_1cxcursor_1a9f29c286f26b3cf616331c7e6554d373">getCursorContext</link>(C);
04801 
04802 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="__c_index_8cpp_1af186bec30eb4cb63c3a7a295ccbcfe8b">clang_isStatement</link>(C.kind))&#32;{
04803 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;Stmt&#32;*S&#32;=&#32;<link linkend="_namespaceclang_1_1cxcursor_1a2d5cb233204f81be58bd21deb628c7ad">getCursorStmt</link>(C);
04804 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;LabelStmt&#32;*Label&#32;=&#32;dyn_cast_or_null&lt;LabelStmt&gt;(S))&#32;{
04805 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(pieceIndex&#32;&gt;&#32;0)
04806 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__c_x_source_location_8cpp_1afadb1a95ce51366407cf6c363299a17f">clang_getNullRange</link>();
04807 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxloc_1a39d02b462b1f3233518f01951d83d035">cxloc::translateSourceRange</link>(Ctx,&#32;Label-&gt;getIdentLoc());
04808 &#32;&#32;&#32;&#32;}
04809 
04810 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__c_x_source_location_8cpp_1afadb1a95ce51366407cf6c363299a17f">clang_getNullRange</link>();
04811 &#32;&#32;}
04812 
04813 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(C.kind&#32;==&#32;CXCursor_ObjCMessageExpr)&#32;{
04814 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;ObjCMessageExpr&#32;*ME&#32;=
04815 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;dyn_cast_or_null&lt;ObjCMessageExpr&gt;(<link linkend="_namespaceclang_1_1cxcursor_1a80837a3710c6df0dfc24b5ee1d94ff9b">getCursorExpr</link>(C)))&#32;{
04816 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(pieceIndex&#32;&gt;=&#32;ME-&gt;getNumSelectorLocs())
04817 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__c_x_source_location_8cpp_1afadb1a95ce51366407cf6c363299a17f">clang_getNullRange</link>();
04818 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxloc_1a39d02b462b1f3233518f01951d83d035">cxloc::translateSourceRange</link>(Ctx,&#32;ME-&gt;getSelectorLoc(pieceIndex));
04819 &#32;&#32;&#32;&#32;}
04820 &#32;&#32;}
04821 
04822 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(C.kind&#32;==&#32;CXCursor_ObjCInstanceMethodDecl&#32;||
04823 &#32;&#32;&#32;&#32;&#32;&#32;C.kind&#32;==&#32;CXCursor_ObjCClassMethodDecl)&#32;{
04824 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;ObjCMethodDecl&#32;*MD&#32;=
04825 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;dyn_cast_or_null&lt;ObjCMethodDecl&gt;(<link linkend="_namespaceclang_1_1cxcursor_1a1f702246831c96afd990e457613dc642">getCursorDecl</link>(C)))&#32;{
04826 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(pieceIndex&#32;&gt;=&#32;MD-&gt;getNumSelectorLocs())
04827 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__c_x_source_location_8cpp_1afadb1a95ce51366407cf6c363299a17f">clang_getNullRange</link>();
04828 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxloc_1a39d02b462b1f3233518f01951d83d035">cxloc::translateSourceRange</link>(Ctx,&#32;MD-&gt;getSelectorLoc(pieceIndex));
04829 &#32;&#32;&#32;&#32;}
04830 &#32;&#32;}
04831 
04832 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(C.kind&#32;==&#32;CXCursor_ObjCCategoryDecl&#32;||
04833 &#32;&#32;&#32;&#32;&#32;&#32;C.kind&#32;==&#32;CXCursor_ObjCCategoryImplDecl)&#32;{
04834 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(pieceIndex&#32;&gt;&#32;0)
04835 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__c_x_source_location_8cpp_1afadb1a95ce51366407cf6c363299a17f">clang_getNullRange</link>();
04836 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;ObjCCategoryDecl&#32;*CD&#32;=
04837 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;dyn_cast_or_null&lt;ObjCCategoryDecl&gt;(<link linkend="_namespaceclang_1_1cxcursor_1a1f702246831c96afd990e457613dc642">getCursorDecl</link>(C)))
04838 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxloc_1a39d02b462b1f3233518f01951d83d035">cxloc::translateSourceRange</link>(Ctx,&#32;CD-&gt;getCategoryNameLoc());
04839 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;ObjCCategoryImplDecl&#32;*CID&#32;=
04840 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;dyn_cast_or_null&lt;ObjCCategoryImplDecl&gt;(<link linkend="_namespaceclang_1_1cxcursor_1a1f702246831c96afd990e457613dc642">getCursorDecl</link>(C)))
04841 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxloc_1a39d02b462b1f3233518f01951d83d035">cxloc::translateSourceRange</link>(Ctx,&#32;CID-&gt;getCategoryNameLoc());
04842 &#32;&#32;}
04843 
04844 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(C.kind&#32;==&#32;CXCursor_ModuleImportDecl)&#32;{
04845 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(pieceIndex&#32;&gt;&#32;0)
04846 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__c_x_source_location_8cpp_1afadb1a95ce51366407cf6c363299a17f">clang_getNullRange</link>();
04847 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;ImportDecl&#32;*ImportD&#32;=
04848 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;dyn_cast_or_null&lt;ImportDecl&gt;(<link linkend="_namespaceclang_1_1cxcursor_1a1f702246831c96afd990e457613dc642">getCursorDecl</link>(C)))&#32;{
04849 &#32;&#32;&#32;&#32;&#32;&#32;ArrayRef&lt;SourceLocation&gt;&#32;Locs&#32;=&#32;ImportD-&gt;getIdentifierLocs();
04850 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!Locs.empty())
04851 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxloc_1a39d02b462b1f3233518f01951d83d035">cxloc::translateSourceRange</link>(
04852 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Ctx,&#32;SourceRange(Locs.front(),&#32;Locs.back()));
04853 &#32;&#32;&#32;&#32;}
04854 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__c_x_source_location_8cpp_1afadb1a95ce51366407cf6c363299a17f">clang_getNullRange</link>();
04855 &#32;&#32;}
04856 
04857 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(C.kind&#32;==&#32;CXCursor_CXXMethod&#32;||&#32;C.kind&#32;==&#32;CXCursor_Destructor&#32;||
04858 &#32;&#32;&#32;&#32;&#32;&#32;C.kind&#32;==&#32;CXCursor_ConversionFunction&#32;||
04859 &#32;&#32;&#32;&#32;&#32;&#32;C.kind&#32;==&#32;CXCursor_FunctionDecl)&#32;{
04860 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(pieceIndex&#32;&gt;&#32;0)
04861 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__c_x_source_location_8cpp_1afadb1a95ce51366407cf6c363299a17f">clang_getNullRange</link>();
04862 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;FunctionDecl&#32;*FD&#32;=
04863 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;dyn_cast_or_null&lt;FunctionDecl&gt;(<link linkend="_namespaceclang_1_1cxcursor_1a1f702246831c96afd990e457613dc642">getCursorDecl</link>(C)))&#32;{
04864 &#32;&#32;&#32;&#32;&#32;&#32;DeclarationNameInfo&#32;FunctionName&#32;=&#32;FD-&gt;getNameInfo();
04865 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxloc_1a39d02b462b1f3233518f01951d83d035">cxloc::translateSourceRange</link>(Ctx,&#32;FunctionName.getSourceRange());
04866 &#32;&#32;&#32;&#32;}
04867 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__c_x_source_location_8cpp_1afadb1a95ce51366407cf6c363299a17f">clang_getNullRange</link>();
04868 &#32;&#32;}
04869 
04870 &#32;&#32;<emphasis role="comment">//&#32;FIXME:&#32;A&#32;CXCursor_InclusionDirective&#32;should&#32;give&#32;the&#32;location&#32;of&#32;the</emphasis>
04871 &#32;&#32;<emphasis role="comment">//&#32;filename,&#32;but&#32;we&#32;don&apos;t&#32;keep&#32;track&#32;of&#32;this.</emphasis>
04872 
04873 &#32;&#32;<emphasis role="comment">//&#32;FIXME:&#32;A&#32;CXCursor_AnnotateAttr&#32;should&#32;give&#32;the&#32;location&#32;of&#32;the&#32;annotation</emphasis>
04874 &#32;&#32;<emphasis role="comment">//&#32;but&#32;we&#32;don&apos;t&#32;keep&#32;track&#32;of&#32;this.</emphasis>
04875 
04876 &#32;&#32;<emphasis role="comment">//&#32;FIXME:&#32;A&#32;CXCursor_AsmLabelAttr&#32;should&#32;give&#32;the&#32;location&#32;of&#32;the&#32;label</emphasis>
04877 &#32;&#32;<emphasis role="comment">//&#32;but&#32;we&#32;don&apos;t&#32;keep&#32;track&#32;of&#32;this.</emphasis>
04878 
04879 &#32;&#32;<emphasis role="comment">//&#32;Default&#32;handling,&#32;give&#32;the&#32;location&#32;of&#32;the&#32;cursor.</emphasis>
04880 
04881 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(pieceIndex&#32;&gt;&#32;0)
04882 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__c_x_source_location_8cpp_1afadb1a95ce51366407cf6c363299a17f">clang_getNullRange</link>();
04883 
04884 &#32;&#32;CXSourceLocation&#32;CXLoc&#32;=&#32;<link linkend="__c_index_8cpp_1a98001a3f8eb3a76d9c12821c45ef3708">clang_getCursorLocation</link>(C);
04885 &#32;&#32;SourceLocation&#32;Loc&#32;=&#32;cxloc::translateSourceLocation(CXLoc);
04886 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxloc_1a39d02b462b1f3233518f01951d83d035">cxloc::translateSourceRange</link>(Ctx,&#32;Loc);
04887 }
04888 
<anchor xml:id="__c_index_8cpp_source_1l04889"/><link linkend="__c_index_8cpp_1af9df3cb95580d22d253ebb43e47bb466">04889</link> CXString&#32;<link linkend="__c_index_8cpp_1af9df3cb95580d22d253ebb43e47bb466">clang_Cursor_getMangling</link>(CXCursor&#32;C)&#32;{
04890 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="__c_index_8cpp_1a0c5b391d8bca745084fb8906cce6f66c">clang_isInvalid</link>(C.kind)&#32;||&#32;!<link linkend="__c_index_8cpp_1a5d47db8f608ae0c266d6551875d46b80">clang_isDeclaration</link>(C.kind))
04891 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1a8a49aa6ea196abdde85886689f2630f9">cxstring::createEmpty</link>();
04892 
04893 &#32;&#32;<emphasis role="comment">//&#32;Mangling&#32;only&#32;works&#32;for&#32;functions&#32;and&#32;variables.</emphasis>
04894 &#32;&#32;<emphasis role="keyword">const</emphasis>&#32;Decl&#32;*D&#32;=&#32;<link linkend="_namespaceclang_1_1cxcursor_1a1f702246831c96afd990e457613dc642">getCursorDecl</link>(C);
04895 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!D&#32;||&#32;!(isa&lt;FunctionDecl&gt;(D)&#32;||&#32;isa&lt;VarDecl&gt;(D)))
04896 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1a8a49aa6ea196abdde85886689f2630f9">cxstring::createEmpty</link>();
04897 
04898 &#32;&#32;ASTContext&#32;&amp;Ctx&#32;=&#32;D-&gt;getASTContext();
04899 &#32;&#32;ASTNameGenerator&#32;ASTNameGen(Ctx);
04900 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1a19a4962be87f75a8c1fa5a0b75f76298">cxstring::createDup</link>(ASTNameGen.getName(D));
04901 }
04902 
<anchor xml:id="__c_index_8cpp_source_1l04903"/><link linkend="__c_index_8cpp_1a2a901378706b8476950697e8073d65dc">04903</link> CXStringSet&#32;*<link linkend="__c_index_8cpp_1a2a901378706b8476950697e8073d65dc">clang_Cursor_getCXXManglings</link>(CXCursor&#32;C)&#32;{
04904 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="__c_index_8cpp_1a0c5b391d8bca745084fb8906cce6f66c">clang_isInvalid</link>(C.kind)&#32;||&#32;!<link linkend="__c_index_8cpp_1a5d47db8f608ae0c266d6551875d46b80">clang_isDeclaration</link>(C.kind))
04905 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">nullptr</emphasis>;
04906 
04907 &#32;&#32;<emphasis role="keyword">const</emphasis>&#32;Decl&#32;*D&#32;=&#32;<link linkend="_namespaceclang_1_1cxcursor_1a1f702246831c96afd990e457613dc642">getCursorDecl</link>(C);
04908 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!(isa&lt;CXXRecordDecl&gt;(D)&#32;||&#32;isa&lt;CXXMethodDecl&gt;(D)))
04909 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">nullptr</emphasis>;
04910 
04911 &#32;&#32;ASTContext&#32;&amp;Ctx&#32;=&#32;D-&gt;getASTContext();
04912 &#32;&#32;ASTNameGenerator&#32;ASTNameGen(Ctx);
04913 &#32;&#32;std::vector&lt;std::string&gt;&#32;Manglings&#32;=&#32;ASTNameGen.getAllManglings(D);
04914 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1a0ebb0924de5a075db7ae5d7937df8056">cxstring::createSet</link>(Manglings);
04915 }
04916 
<anchor xml:id="__c_index_8cpp_source_1l04917"/><link linkend="__c_index_8cpp_1a02df930dfd6a35f25132f6cc40281d8f">04917</link> CXStringSet&#32;*<link linkend="__c_index_8cpp_1a02df930dfd6a35f25132f6cc40281d8f">clang_Cursor_getObjCManglings</link>(CXCursor&#32;C)&#32;{
04918 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="__c_index_8cpp_1a0c5b391d8bca745084fb8906cce6f66c">clang_isInvalid</link>(C.kind)&#32;||&#32;!<link linkend="__c_index_8cpp_1a5d47db8f608ae0c266d6551875d46b80">clang_isDeclaration</link>(C.kind))
04919 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">nullptr</emphasis>;
04920 
04921 &#32;&#32;<emphasis role="keyword">const</emphasis>&#32;Decl&#32;*D&#32;=&#32;<link linkend="_namespaceclang_1_1cxcursor_1a1f702246831c96afd990e457613dc642">getCursorDecl</link>(C);
04922 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!(isa&lt;ObjCInterfaceDecl&gt;(D)&#32;||&#32;isa&lt;ObjCImplementationDecl&gt;(D)))
04923 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">nullptr</emphasis>;
04924 
04925 &#32;&#32;ASTContext&#32;&amp;Ctx&#32;=&#32;D-&gt;getASTContext();
04926 &#32;&#32;ASTNameGenerator&#32;ASTNameGen(Ctx);
04927 &#32;&#32;std::vector&lt;std::string&gt;&#32;Manglings&#32;=&#32;ASTNameGen.getAllManglings(D);
04928 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1a0ebb0924de5a075db7ae5d7937df8056">cxstring::createSet</link>(Manglings);
04929 }
04930 
<anchor xml:id="__c_index_8cpp_source_1l04931"/><link linkend="__c_index_8cpp_1a472e7c06c70965b983f908f49f27c2bf">04931</link> CXPrintingPolicy&#32;<link linkend="__c_index_8cpp_1a472e7c06c70965b983f908f49f27c2bf">clang_getCursorPrintingPolicy</link>(CXCursor&#32;C)&#32;{
04932 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="__c_x_cursor_8cpp_1af734553e3bac74a4a1f6f7450513cf0f">clang_Cursor_isNull</link>(C))
04933 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
04934 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">new</emphasis>&#32;PrintingPolicy(<link linkend="_namespaceclang_1_1cxcursor_1a9f29c286f26b3cf616331c7e6554d373">getCursorContext</link>(C).getPrintingPolicy());
04935 }
04936 
<anchor xml:id="__c_index_8cpp_source_1l04937"/><link linkend="__c_index_8cpp_1a5f4c201c1711cf708edccc3227e49197">04937</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="__c_index_8cpp_1a5f4c201c1711cf708edccc3227e49197">clang_PrintingPolicy_dispose</link>(CXPrintingPolicy&#32;Policy)&#32;{
04938 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(Policy)
04939 &#32;&#32;&#32;&#32;<emphasis role="keyword">delete</emphasis>&#32;<emphasis role="keyword">static_cast&lt;</emphasis>PrintingPolicy&#32;*<emphasis role="keyword">&gt;</emphasis>(Policy);
04940 }
04941 
04942 <emphasis role="keywordtype">unsigned</emphasis>
<anchor xml:id="__c_index_8cpp_source_1l04943"/><link linkend="__c_index_8cpp_1a99f7fd7cac9071d0a97588e42f111920">04943</link> <link linkend="__c_index_8cpp_1a99f7fd7cac9071d0a97588e42f111920">clang_PrintingPolicy_getProperty</link>(CXPrintingPolicy&#32;Policy,
04944 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">enum</emphasis>&#32;CXPrintingPolicyProperty&#32;Property)&#32;{
04945 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!Policy)
04946 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
04947 
04948 &#32;&#32;PrintingPolicy&#32;*P&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis>PrintingPolicy&#32;*<emphasis role="keyword">&gt;</emphasis>(Policy);
04949 &#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(Property)&#32;{
04950 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXPrintingPolicy_Indentation:
04951 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;P-&gt;Indentation;
04952 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXPrintingPolicy_SuppressSpecifiers:
04953 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;P-&gt;SuppressSpecifiers;
04954 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXPrintingPolicy_SuppressTagKeyword:
04955 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;P-&gt;SuppressTagKeyword;
04956 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXPrintingPolicy_IncludeTagDefinition:
04957 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;P-&gt;IncludeTagDefinition;
04958 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXPrintingPolicy_SuppressScope:
04959 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;P-&gt;SuppressScope;
04960 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXPrintingPolicy_SuppressUnwrittenScope:
04961 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;P-&gt;SuppressUnwrittenScope;
04962 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXPrintingPolicy_SuppressInitializers:
04963 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;P-&gt;SuppressInitializers;
04964 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXPrintingPolicy_ConstantArraySizeAsWritten:
04965 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;P-&gt;ConstantArraySizeAsWritten;
04966 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXPrintingPolicy_AnonymousTagLocations:
04967 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;P-&gt;AnonymousTagLocations;
04968 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXPrintingPolicy_SuppressStrongLifetime:
04969 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;P-&gt;SuppressStrongLifetime;
04970 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXPrintingPolicy_SuppressLifetimeQualifiers:
04971 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;P-&gt;SuppressLifetimeQualifiers;
04972 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXPrintingPolicy_SuppressTemplateArgsInCXXConstructors:
04973 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;P-&gt;SuppressTemplateArgsInCXXConstructors;
04974 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXPrintingPolicy_Bool:
04975 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;P-&gt;Bool;
04976 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXPrintingPolicy_Restrict:
04977 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;P-&gt;Restrict;
04978 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXPrintingPolicy_Alignof:
04979 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;P-&gt;Alignof;
04980 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXPrintingPolicy_UnderscoreAlignof:
04981 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;P-&gt;UnderscoreAlignof;
04982 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXPrintingPolicy_UseVoidForZeroParams:
04983 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;P-&gt;UseVoidForZeroParams;
04984 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXPrintingPolicy_TerseOutput:
04985 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;P-&gt;TerseOutput;
04986 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXPrintingPolicy_PolishForDeclaration:
04987 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;P-&gt;PolishForDeclaration;
04988 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXPrintingPolicy_Half:
04989 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;P-&gt;Half;
04990 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXPrintingPolicy_MSWChar:
04991 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;P-&gt;MSWChar;
04992 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXPrintingPolicy_IncludeNewlines:
04993 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;P-&gt;IncludeNewlines;
04994 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXPrintingPolicy_MSVCFormatting:
04995 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;P-&gt;MSVCFormatting;
04996 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXPrintingPolicy_ConstantsAsWritten:
04997 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;P-&gt;ConstantsAsWritten;
04998 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXPrintingPolicy_SuppressImplicitBase:
04999 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;P-&gt;SuppressImplicitBase;
05000 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXPrintingPolicy_FullyQualifiedName:
05001 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;P-&gt;FullyQualifiedName;
05002 &#32;&#32;}
05003 
05004 &#32;&#32;assert(<emphasis role="keyword">false</emphasis>&#32;&amp;&amp;&#32;<emphasis role="stringliteral">&quot;Invalid&#32;CXPrintingPolicyProperty&quot;</emphasis>);
05005 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
05006 }
05007 
<anchor xml:id="__c_index_8cpp_source_1l05008"/><link linkend="__c_index_8cpp_1a2f7497c4e8c46282bdf45b57d456a2a4">05008</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="__c_index_8cpp_1a2f7497c4e8c46282bdf45b57d456a2a4">clang_PrintingPolicy_setProperty</link>(CXPrintingPolicy&#32;Policy,
05009 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">enum</emphasis>&#32;CXPrintingPolicyProperty&#32;Property,
05010 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;Value)&#32;{
05011 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!Policy)
05012 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
05013 
05014 &#32;&#32;PrintingPolicy&#32;*P&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis>PrintingPolicy&#32;*<emphasis role="keyword">&gt;</emphasis>(Policy);
05015 &#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(Property)&#32;{
05016 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXPrintingPolicy_Indentation:
05017 &#32;&#32;&#32;&#32;P-&gt;Indentation&#32;=&#32;Value;
05018 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
05019 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXPrintingPolicy_SuppressSpecifiers:
05020 &#32;&#32;&#32;&#32;P-&gt;SuppressSpecifiers&#32;=&#32;Value;
05021 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
05022 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXPrintingPolicy_SuppressTagKeyword:
05023 &#32;&#32;&#32;&#32;P-&gt;SuppressTagKeyword&#32;=&#32;Value;
05024 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
05025 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXPrintingPolicy_IncludeTagDefinition:
05026 &#32;&#32;&#32;&#32;P-&gt;IncludeTagDefinition&#32;=&#32;Value;
05027 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
05028 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXPrintingPolicy_SuppressScope:
05029 &#32;&#32;&#32;&#32;P-&gt;SuppressScope&#32;=&#32;Value;
05030 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
05031 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXPrintingPolicy_SuppressUnwrittenScope:
05032 &#32;&#32;&#32;&#32;P-&gt;SuppressUnwrittenScope&#32;=&#32;Value;
05033 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
05034 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXPrintingPolicy_SuppressInitializers:
05035 &#32;&#32;&#32;&#32;P-&gt;SuppressInitializers&#32;=&#32;Value;
05036 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
05037 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXPrintingPolicy_ConstantArraySizeAsWritten:
05038 &#32;&#32;&#32;&#32;P-&gt;ConstantArraySizeAsWritten&#32;=&#32;Value;
05039 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
05040 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXPrintingPolicy_AnonymousTagLocations:
05041 &#32;&#32;&#32;&#32;P-&gt;AnonymousTagLocations&#32;=&#32;Value;
05042 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
05043 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXPrintingPolicy_SuppressStrongLifetime:
05044 &#32;&#32;&#32;&#32;P-&gt;SuppressStrongLifetime&#32;=&#32;Value;
05045 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
05046 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXPrintingPolicy_SuppressLifetimeQualifiers:
05047 &#32;&#32;&#32;&#32;P-&gt;SuppressLifetimeQualifiers&#32;=&#32;Value;
05048 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
05049 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXPrintingPolicy_SuppressTemplateArgsInCXXConstructors:
05050 &#32;&#32;&#32;&#32;P-&gt;SuppressTemplateArgsInCXXConstructors&#32;=&#32;Value;
05051 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
05052 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXPrintingPolicy_Bool:
05053 &#32;&#32;&#32;&#32;P-&gt;Bool&#32;=&#32;Value;
05054 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
05055 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXPrintingPolicy_Restrict:
05056 &#32;&#32;&#32;&#32;P-&gt;Restrict&#32;=&#32;Value;
05057 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
05058 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXPrintingPolicy_Alignof:
05059 &#32;&#32;&#32;&#32;P-&gt;Alignof&#32;=&#32;Value;
05060 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
05061 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXPrintingPolicy_UnderscoreAlignof:
05062 &#32;&#32;&#32;&#32;P-&gt;UnderscoreAlignof&#32;=&#32;Value;
05063 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
05064 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXPrintingPolicy_UseVoidForZeroParams:
05065 &#32;&#32;&#32;&#32;P-&gt;UseVoidForZeroParams&#32;=&#32;Value;
05066 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
05067 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXPrintingPolicy_TerseOutput:
05068 &#32;&#32;&#32;&#32;P-&gt;TerseOutput&#32;=&#32;Value;
05069 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
05070 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXPrintingPolicy_PolishForDeclaration:
05071 &#32;&#32;&#32;&#32;P-&gt;PolishForDeclaration&#32;=&#32;Value;
05072 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
05073 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXPrintingPolicy_Half:
05074 &#32;&#32;&#32;&#32;P-&gt;Half&#32;=&#32;Value;
05075 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
05076 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXPrintingPolicy_MSWChar:
05077 &#32;&#32;&#32;&#32;P-&gt;MSWChar&#32;=&#32;Value;
05078 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
05079 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXPrintingPolicy_IncludeNewlines:
05080 &#32;&#32;&#32;&#32;P-&gt;IncludeNewlines&#32;=&#32;Value;
05081 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
05082 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXPrintingPolicy_MSVCFormatting:
05083 &#32;&#32;&#32;&#32;P-&gt;MSVCFormatting&#32;=&#32;Value;
05084 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
05085 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXPrintingPolicy_ConstantsAsWritten:
05086 &#32;&#32;&#32;&#32;P-&gt;ConstantsAsWritten&#32;=&#32;Value;
05087 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
05088 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXPrintingPolicy_SuppressImplicitBase:
05089 &#32;&#32;&#32;&#32;P-&gt;SuppressImplicitBase&#32;=&#32;Value;
05090 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
05091 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXPrintingPolicy_FullyQualifiedName:
05092 &#32;&#32;&#32;&#32;P-&gt;FullyQualifiedName&#32;=&#32;Value;
05093 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
05094 &#32;&#32;}
05095 
05096 &#32;&#32;assert(<emphasis role="keyword">false</emphasis>&#32;&amp;&amp;&#32;<emphasis role="stringliteral">&quot;Invalid&#32;CXPrintingPolicyProperty&quot;</emphasis>);
05097 }
05098 
<anchor xml:id="__c_index_8cpp_source_1l05099"/><link linkend="__c_index_8cpp_1aaf6d4365916cd5424df38549e28ffd3b">05099</link> CXString&#32;<link linkend="__c_index_8cpp_1aaf6d4365916cd5424df38549e28ffd3b">clang_getCursorPrettyPrinted</link>(CXCursor&#32;C,&#32;CXPrintingPolicy&#32;cxPolicy)&#32;{
05100 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="__c_x_cursor_8cpp_1af734553e3bac74a4a1f6f7450513cf0f">clang_Cursor_isNull</link>(C))
05101 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1a8a49aa6ea196abdde85886689f2630f9">cxstring::createEmpty</link>();
05102 
05103 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="__c_index_8cpp_1a5d47db8f608ae0c266d6551875d46b80">clang_isDeclaration</link>(C.kind))&#32;{
05104 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;Decl&#32;*D&#32;=&#32;<link linkend="_namespaceclang_1_1cxcursor_1a1f702246831c96afd990e457613dc642">getCursorDecl</link>(C);
05105 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!D)
05106 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1a8a49aa6ea196abdde85886689f2630f9">cxstring::createEmpty</link>();
05107 
05108 &#32;&#32;&#32;&#32;SmallString&lt;128&gt;&#32;Str;
05109 &#32;&#32;&#32;&#32;llvm::raw_svector_ostream&#32;OS(Str);
05110 &#32;&#32;&#32;&#32;PrintingPolicy&#32;*UserPolicy&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis>PrintingPolicy&#32;*<emphasis role="keyword">&gt;</emphasis>(cxPolicy);
05111 &#32;&#32;&#32;&#32;D-&gt;print(OS,&#32;UserPolicy&#32;?&#32;*UserPolicy
05112 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;<link linkend="_namespaceclang_1_1cxcursor_1a9f29c286f26b3cf616331c7e6554d373">getCursorContext</link>(C).getPrintingPolicy());
05113 
05114 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1a19a4962be87f75a8c1fa5a0b75f76298">cxstring::createDup</link>(OS.str());
05115 &#32;&#32;}
05116 
05117 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1a8a49aa6ea196abdde85886689f2630f9">cxstring::createEmpty</link>();
05118 }
05119 
<anchor xml:id="__c_index_8cpp_source_1l05120"/><link linkend="__c_index_8cpp_1adacc338d2829e50ff0395a8384d507b3">05120</link> CXString&#32;<link linkend="__c_index_8cpp_1adacc338d2829e50ff0395a8384d507b3">clang_getCursorDisplayName</link>(CXCursor&#32;C)&#32;{
05121 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!<link linkend="__c_index_8cpp_1a5d47db8f608ae0c266d6551875d46b80">clang_isDeclaration</link>(C.kind))
05122 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__c_index_8cpp_1a412f1282680f05ef2b991f21a59ad3ac">clang_getCursorSpelling</link>(C);
05123 
05124 &#32;&#32;<emphasis role="keyword">const</emphasis>&#32;Decl&#32;*D&#32;=&#32;<link linkend="_namespaceclang_1_1cxcursor_1a1f702246831c96afd990e457613dc642">getCursorDecl</link>(C);
05125 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!D)
05126 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1a8a49aa6ea196abdde85886689f2630f9">cxstring::createEmpty</link>();
05127 
05128 &#32;&#32;PrintingPolicy&#32;Policy&#32;=&#32;<link linkend="_namespaceclang_1_1cxcursor_1a9f29c286f26b3cf616331c7e6554d373">getCursorContext</link>(C).getPrintingPolicy();
05129 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;FunctionTemplateDecl&#32;*FunTmpl&#32;=&#32;dyn_cast&lt;FunctionTemplateDecl&gt;(D))
05130 &#32;&#32;&#32;&#32;D&#32;=&#32;FunTmpl-&gt;getTemplatedDecl();
05131 
05132 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;FunctionDecl&#32;*Function&#32;=&#32;dyn_cast&lt;FunctionDecl&gt;(D))&#32;{
05133 &#32;&#32;&#32;&#32;SmallString&lt;64&gt;&#32;Str;
05134 &#32;&#32;&#32;&#32;llvm::raw_svector_ostream&#32;OS(Str);
05135 &#32;&#32;&#32;&#32;OS&#32;&lt;&lt;&#32;*Function;
05136 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(Function-&gt;getPrimaryTemplate())
05137 &#32;&#32;&#32;&#32;&#32;&#32;OS&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&lt;&gt;&quot;</emphasis>;
05138 &#32;&#32;&#32;&#32;OS&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;(&quot;</emphasis>;
05139 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">unsigned</emphasis>&#32;I&#32;=&#32;0,&#32;N&#32;=&#32;Function-&gt;getNumParams();&#32;I&#32;!=&#32;N;&#32;++I)&#32;{
05140 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(I)
05141 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;OS&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;,&#32;&quot;</emphasis>;
05142 &#32;&#32;&#32;&#32;&#32;&#32;OS&#32;&lt;&lt;&#32;Function-&gt;getParamDecl(I)-&gt;getType().getAsString(Policy);
05143 &#32;&#32;&#32;&#32;}
05144 
05145 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(Function-&gt;isVariadic())&#32;{
05146 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(Function-&gt;getNumParams())
05147 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;OS&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;,&#32;&quot;</emphasis>;
05148 &#32;&#32;&#32;&#32;&#32;&#32;OS&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;...&quot;</emphasis>;
05149 &#32;&#32;&#32;&#32;}
05150 &#32;&#32;&#32;&#32;OS&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;)&quot;</emphasis>;
05151 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1a19a4962be87f75a8c1fa5a0b75f76298">cxstring::createDup</link>(OS.str());
05152 &#32;&#32;}
05153 
05154 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;ClassTemplateDecl&#32;*ClassTemplate&#32;=&#32;dyn_cast&lt;ClassTemplateDecl&gt;(D))&#32;{
05155 &#32;&#32;&#32;&#32;SmallString&lt;64&gt;&#32;Str;
05156 &#32;&#32;&#32;&#32;llvm::raw_svector_ostream&#32;OS(Str);
05157 &#32;&#32;&#32;&#32;OS&#32;&lt;&lt;&#32;*ClassTemplate;
05158 &#32;&#32;&#32;&#32;OS&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&lt;&quot;</emphasis>;
05159 &#32;&#32;&#32;&#32;TemplateParameterList&#32;*Params&#32;=&#32;ClassTemplate-&gt;getTemplateParameters();
05160 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">unsigned</emphasis>&#32;I&#32;=&#32;0,&#32;N&#32;=&#32;Params-&gt;size();&#32;I&#32;!=&#32;N;&#32;++I)&#32;{
05161 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(I)
05162 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;OS&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;,&#32;&quot;</emphasis>;
05163 
05164 &#32;&#32;&#32;&#32;&#32;&#32;NamedDecl&#32;*Param&#32;=&#32;Params-&gt;getParam(I);
05165 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(Param-&gt;getIdentifier())&#32;{
05166 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;OS&#32;&lt;&lt;&#32;Param-&gt;getIdentifier()-&gt;getName();
05167 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">continue</emphasis>;
05168 &#32;&#32;&#32;&#32;&#32;&#32;}
05169 
05170 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;There&#32;is&#32;no&#32;parameter&#32;name,&#32;which&#32;makes&#32;this&#32;tricky.&#32;Try&#32;to&#32;come&#32;up</emphasis>
05171 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;with&#32;something&#32;useful&#32;that&#32;isn&apos;t&#32;too&#32;long.</emphasis>
05172 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(TemplateTypeParmDecl&#32;*TTP&#32;=&#32;dyn_cast&lt;TemplateTypeParmDecl&gt;(Param))
05173 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;*TC&#32;=&#32;TTP-&gt;getTypeConstraint())&#32;{
05174 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;TC-&gt;getConceptNameInfo().printName(OS,&#32;Policy);
05175 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(TC-&gt;hasExplicitTemplateArgs())
05176 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;OS&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&lt;...&gt;&quot;</emphasis>;
05177 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>
05178 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;OS&#32;&lt;&lt;&#32;(TTP-&gt;wasDeclaredWithTypename()&#32;?&#32;<emphasis role="stringliteral">&quot;typename&quot;</emphasis>&#32;:&#32;<emphasis role="stringliteral">&quot;class&quot;</emphasis>);
05179 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(NonTypeTemplateParmDecl&#32;*NTTP&#32;=
05180 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;dyn_cast&lt;NonTypeTemplateParmDecl&gt;(Param))
05181 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;OS&#32;&lt;&lt;&#32;NTTP-&gt;getType().getAsString(Policy);
05182 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
05183 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;OS&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;template&lt;...&gt;&#32;class&quot;</emphasis>;
05184 &#32;&#32;&#32;&#32;}
05185 
05186 &#32;&#32;&#32;&#32;OS&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&gt;&quot;</emphasis>;
05187 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1a19a4962be87f75a8c1fa5a0b75f76298">cxstring::createDup</link>(OS.str());
05188 &#32;&#32;}
05189 
05190 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;ClassTemplateSpecializationDecl&#32;*ClassSpec&#32;=
05191 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;dyn_cast&lt;ClassTemplateSpecializationDecl&gt;(D))&#32;{
05192 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;If&#32;the&#32;type&#32;was&#32;explicitly&#32;written,&#32;use&#32;that.</emphasis>
05193 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(TypeSourceInfo&#32;*TSInfo&#32;=&#32;ClassSpec-&gt;getTypeAsWritten())
05194 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1a19a4962be87f75a8c1fa5a0b75f76298">cxstring::createDup</link>(TSInfo-&gt;getType().getAsString(Policy));
05195 
05196 &#32;&#32;&#32;&#32;SmallString&lt;128&gt;&#32;Str;
05197 &#32;&#32;&#32;&#32;llvm::raw_svector_ostream&#32;OS(Str);
05198 &#32;&#32;&#32;&#32;OS&#32;&lt;&lt;&#32;*ClassSpec;
05199 &#32;&#32;&#32;&#32;printTemplateArgumentList(
05200 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;OS,&#32;ClassSpec-&gt;getTemplateArgs().asArray(),&#32;Policy,
05201 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ClassSpec-&gt;getSpecializedTemplate()-&gt;getTemplateParameters());
05202 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1a19a4962be87f75a8c1fa5a0b75f76298">cxstring::createDup</link>(OS.str());
05203 &#32;&#32;}
05204 
05205 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__c_index_8cpp_1a412f1282680f05ef2b991f21a59ad3ac">clang_getCursorSpelling</link>(C);
05206 }
05207 
<anchor xml:id="__c_index_8cpp_source_1l05208"/><link linkend="__c_index_8cpp_1a667cf97e111be828ff2c36e23d583fce">05208</link> CXString&#32;<link linkend="__c_index_8cpp_1a667cf97e111be828ff2c36e23d583fce">clang_getCursorKindSpelling</link>(<emphasis role="keyword">enum</emphasis>&#32;CXCursorKind&#32;Kind)&#32;{
05209 &#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(Kind)&#32;{
05210 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_FunctionDecl:
05211 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;FunctionDecl&quot;</emphasis>);
05212 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_TypedefDecl:
05213 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;TypedefDecl&quot;</emphasis>);
05214 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_EnumDecl:
05215 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;EnumDecl&quot;</emphasis>);
05216 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_EnumConstantDecl:
05217 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;EnumConstantDecl&quot;</emphasis>);
05218 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_StructDecl:
05219 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;StructDecl&quot;</emphasis>);
05220 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_UnionDecl:
05221 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;UnionDecl&quot;</emphasis>);
05222 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_ClassDecl:
05223 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;ClassDecl&quot;</emphasis>);
05224 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_FieldDecl:
05225 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;FieldDecl&quot;</emphasis>);
05226 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_VarDecl:
05227 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;VarDecl&quot;</emphasis>);
05228 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_ParmDecl:
05229 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;ParmDecl&quot;</emphasis>);
05230 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_ObjCInterfaceDecl:
05231 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;ObjCInterfaceDecl&quot;</emphasis>);
05232 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_ObjCCategoryDecl:
05233 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;ObjCCategoryDecl&quot;</emphasis>);
05234 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_ObjCProtocolDecl:
05235 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;ObjCProtocolDecl&quot;</emphasis>);
05236 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_ObjCPropertyDecl:
05237 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;ObjCPropertyDecl&quot;</emphasis>);
05238 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_ObjCIvarDecl:
05239 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;ObjCIvarDecl&quot;</emphasis>);
05240 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_ObjCInstanceMethodDecl:
05241 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;ObjCInstanceMethodDecl&quot;</emphasis>);
05242 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_ObjCClassMethodDecl:
05243 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;ObjCClassMethodDecl&quot;</emphasis>);
05244 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_ObjCImplementationDecl:
05245 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;ObjCImplementationDecl&quot;</emphasis>);
05246 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_ObjCCategoryImplDecl:
05247 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;ObjCCategoryImplDecl&quot;</emphasis>);
05248 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_CXXMethod:
05249 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;CXXMethod&quot;</emphasis>);
05250 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_UnexposedDecl:
05251 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;UnexposedDecl&quot;</emphasis>);
05252 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_ObjCSuperClassRef:
05253 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;ObjCSuperClassRef&quot;</emphasis>);
05254 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_ObjCProtocolRef:
05255 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;ObjCProtocolRef&quot;</emphasis>);
05256 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_ObjCClassRef:
05257 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;ObjCClassRef&quot;</emphasis>);
05258 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_TypeRef:
05259 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;TypeRef&quot;</emphasis>);
05260 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_TemplateRef:
05261 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;TemplateRef&quot;</emphasis>);
05262 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_NamespaceRef:
05263 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;NamespaceRef&quot;</emphasis>);
05264 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_MemberRef:
05265 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;MemberRef&quot;</emphasis>);
05266 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_LabelRef:
05267 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;LabelRef&quot;</emphasis>);
05268 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_OverloadedDeclRef:
05269 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;OverloadedDeclRef&quot;</emphasis>);
05270 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_VariableRef:
05271 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;VariableRef&quot;</emphasis>);
05272 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_IntegerLiteral:
05273 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;IntegerLiteral&quot;</emphasis>);
05274 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_FixedPointLiteral:
05275 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;FixedPointLiteral&quot;</emphasis>);
05276 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_FloatingLiteral:
05277 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;FloatingLiteral&quot;</emphasis>);
05278 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_ImaginaryLiteral:
05279 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;ImaginaryLiteral&quot;</emphasis>);
05280 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_StringLiteral:
05281 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;StringLiteral&quot;</emphasis>);
05282 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_CharacterLiteral:
05283 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;CharacterLiteral&quot;</emphasis>);
05284 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_ParenExpr:
05285 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;ParenExpr&quot;</emphasis>);
05286 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_UnaryOperator:
05287 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;UnaryOperator&quot;</emphasis>);
05288 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_ArraySubscriptExpr:
05289 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;ArraySubscriptExpr&quot;</emphasis>);
05290 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_OMPArraySectionExpr:
05291 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;OMPArraySectionExpr&quot;</emphasis>);
05292 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_OMPArrayShapingExpr:
05293 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;OMPArrayShapingExpr&quot;</emphasis>);
05294 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_OMPIteratorExpr:
05295 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;OMPIteratorExpr&quot;</emphasis>);
05296 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_BinaryOperator:
05297 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;BinaryOperator&quot;</emphasis>);
05298 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_CompoundAssignOperator:
05299 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;CompoundAssignOperator&quot;</emphasis>);
05300 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_ConditionalOperator:
05301 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;ConditionalOperator&quot;</emphasis>);
05302 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_CStyleCastExpr:
05303 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;CStyleCastExpr&quot;</emphasis>);
05304 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_CompoundLiteralExpr:
05305 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;CompoundLiteralExpr&quot;</emphasis>);
05306 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_InitListExpr:
05307 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;InitListExpr&quot;</emphasis>);
05308 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_AddrLabelExpr:
05309 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;AddrLabelExpr&quot;</emphasis>);
05310 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_StmtExpr:
05311 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;StmtExpr&quot;</emphasis>);
05312 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_GenericSelectionExpr:
05313 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;GenericSelectionExpr&quot;</emphasis>);
05314 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_GNUNullExpr:
05315 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;GNUNullExpr&quot;</emphasis>);
05316 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_CXXStaticCastExpr:
05317 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;CXXStaticCastExpr&quot;</emphasis>);
05318 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_CXXDynamicCastExpr:
05319 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;CXXDynamicCastExpr&quot;</emphasis>);
05320 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_CXXReinterpretCastExpr:
05321 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;CXXReinterpretCastExpr&quot;</emphasis>);
05322 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_CXXConstCastExpr:
05323 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;CXXConstCastExpr&quot;</emphasis>);
05324 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_CXXFunctionalCastExpr:
05325 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;CXXFunctionalCastExpr&quot;</emphasis>);
05326 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_CXXAddrspaceCastExpr:
05327 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;CXXAddrspaceCastExpr&quot;</emphasis>);
05328 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_CXXTypeidExpr:
05329 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;CXXTypeidExpr&quot;</emphasis>);
05330 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_CXXBoolLiteralExpr:
05331 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;CXXBoolLiteralExpr&quot;</emphasis>);
05332 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_CXXNullPtrLiteralExpr:
05333 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;CXXNullPtrLiteralExpr&quot;</emphasis>);
05334 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_CXXThisExpr:
05335 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;CXXThisExpr&quot;</emphasis>);
05336 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_CXXThrowExpr:
05337 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;CXXThrowExpr&quot;</emphasis>);
05338 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_CXXNewExpr:
05339 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;CXXNewExpr&quot;</emphasis>);
05340 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_CXXDeleteExpr:
05341 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;CXXDeleteExpr&quot;</emphasis>);
05342 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_UnaryExpr:
05343 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;UnaryExpr&quot;</emphasis>);
05344 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_ObjCStringLiteral:
05345 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;ObjCStringLiteral&quot;</emphasis>);
05346 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_ObjCBoolLiteralExpr:
05347 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;ObjCBoolLiteralExpr&quot;</emphasis>);
05348 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_ObjCAvailabilityCheckExpr:
05349 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;ObjCAvailabilityCheckExpr&quot;</emphasis>);
05350 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_ObjCSelfExpr:
05351 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;ObjCSelfExpr&quot;</emphasis>);
05352 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_ObjCEncodeExpr:
05353 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;ObjCEncodeExpr&quot;</emphasis>);
05354 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_ObjCSelectorExpr:
05355 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;ObjCSelectorExpr&quot;</emphasis>);
05356 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_ObjCProtocolExpr:
05357 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;ObjCProtocolExpr&quot;</emphasis>);
05358 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_ObjCBridgedCastExpr:
05359 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;ObjCBridgedCastExpr&quot;</emphasis>);
05360 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_BlockExpr:
05361 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;BlockExpr&quot;</emphasis>);
05362 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_PackExpansionExpr:
05363 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;PackExpansionExpr&quot;</emphasis>);
05364 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_SizeOfPackExpr:
05365 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;SizeOfPackExpr&quot;</emphasis>);
05366 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_LambdaExpr:
05367 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;LambdaExpr&quot;</emphasis>);
05368 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_UnexposedExpr:
05369 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;UnexposedExpr&quot;</emphasis>);
05370 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_DeclRefExpr:
05371 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;DeclRefExpr&quot;</emphasis>);
05372 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_MemberRefExpr:
05373 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;MemberRefExpr&quot;</emphasis>);
05374 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_CallExpr:
05375 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;CallExpr&quot;</emphasis>);
05376 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_ObjCMessageExpr:
05377 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;ObjCMessageExpr&quot;</emphasis>);
05378 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_BuiltinBitCastExpr:
05379 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;BuiltinBitCastExpr&quot;</emphasis>);
05380 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_UnexposedStmt:
05381 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;UnexposedStmt&quot;</emphasis>);
05382 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_DeclStmt:
05383 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;DeclStmt&quot;</emphasis>);
05384 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_LabelStmt:
05385 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;LabelStmt&quot;</emphasis>);
05386 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_CompoundStmt:
05387 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;CompoundStmt&quot;</emphasis>);
05388 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_CaseStmt:
05389 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;CaseStmt&quot;</emphasis>);
05390 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_DefaultStmt:
05391 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;DefaultStmt&quot;</emphasis>);
05392 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_IfStmt:
05393 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;IfStmt&quot;</emphasis>);
05394 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_SwitchStmt:
05395 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;SwitchStmt&quot;</emphasis>);
05396 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_WhileStmt:
05397 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;WhileStmt&quot;</emphasis>);
05398 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_DoStmt:
05399 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;DoStmt&quot;</emphasis>);
05400 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_ForStmt:
05401 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;ForStmt&quot;</emphasis>);
05402 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_GotoStmt:
05403 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;GotoStmt&quot;</emphasis>);
05404 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_IndirectGotoStmt:
05405 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;IndirectGotoStmt&quot;</emphasis>);
05406 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_ContinueStmt:
05407 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;ContinueStmt&quot;</emphasis>);
05408 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_BreakStmt:
05409 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;BreakStmt&quot;</emphasis>);
05410 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_ReturnStmt:
05411 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;ReturnStmt&quot;</emphasis>);
05412 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_GCCAsmStmt:
05413 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;GCCAsmStmt&quot;</emphasis>);
05414 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_MSAsmStmt:
05415 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;MSAsmStmt&quot;</emphasis>);
05416 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_ObjCAtTryStmt:
05417 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;ObjCAtTryStmt&quot;</emphasis>);
05418 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_ObjCAtCatchStmt:
05419 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;ObjCAtCatchStmt&quot;</emphasis>);
05420 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_ObjCAtFinallyStmt:
05421 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;ObjCAtFinallyStmt&quot;</emphasis>);
05422 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_ObjCAtThrowStmt:
05423 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;ObjCAtThrowStmt&quot;</emphasis>);
05424 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_ObjCAtSynchronizedStmt:
05425 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;ObjCAtSynchronizedStmt&quot;</emphasis>);
05426 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_ObjCAutoreleasePoolStmt:
05427 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;ObjCAutoreleasePoolStmt&quot;</emphasis>);
05428 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_ObjCForCollectionStmt:
05429 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;ObjCForCollectionStmt&quot;</emphasis>);
05430 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_CXXCatchStmt:
05431 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;CXXCatchStmt&quot;</emphasis>);
05432 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_CXXTryStmt:
05433 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;CXXTryStmt&quot;</emphasis>);
05434 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_CXXForRangeStmt:
05435 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;CXXForRangeStmt&quot;</emphasis>);
05436 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_SEHTryStmt:
05437 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;SEHTryStmt&quot;</emphasis>);
05438 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_SEHExceptStmt:
05439 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;SEHExceptStmt&quot;</emphasis>);
05440 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_SEHFinallyStmt:
05441 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;SEHFinallyStmt&quot;</emphasis>);
05442 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_SEHLeaveStmt:
05443 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;SEHLeaveStmt&quot;</emphasis>);
05444 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_NullStmt:
05445 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;NullStmt&quot;</emphasis>);
05446 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_InvalidFile:
05447 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;InvalidFile&quot;</emphasis>);
05448 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_InvalidCode:
05449 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;InvalidCode&quot;</emphasis>);
05450 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_NoDeclFound:
05451 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;NoDeclFound&quot;</emphasis>);
05452 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_NotImplemented:
05453 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;NotImplemented&quot;</emphasis>);
05454 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_TranslationUnit:
05455 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;TranslationUnit&quot;</emphasis>);
05456 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_UnexposedAttr:
05457 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;UnexposedAttr&quot;</emphasis>);
05458 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_IBActionAttr:
05459 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;attribute(ibaction)&quot;</emphasis>);
05460 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_IBOutletAttr:
05461 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;attribute(iboutlet)&quot;</emphasis>);
05462 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_IBOutletCollectionAttr:
05463 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;attribute(iboutletcollection)&quot;</emphasis>);
05464 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_CXXFinalAttr:
05465 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;attribute(final)&quot;</emphasis>);
05466 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_CXXOverrideAttr:
05467 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;attribute(override)&quot;</emphasis>);
05468 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_AnnotateAttr:
05469 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;attribute(annotate)&quot;</emphasis>);
05470 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_AsmLabelAttr:
05471 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;asm&#32;label&quot;</emphasis>);
05472 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_PackedAttr:
05473 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;attribute(packed)&quot;</emphasis>);
05474 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_PureAttr:
05475 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;attribute(pure)&quot;</emphasis>);
05476 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_ConstAttr:
05477 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;attribute(const)&quot;</emphasis>);
05478 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_NoDuplicateAttr:
05479 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;attribute(noduplicate)&quot;</emphasis>);
05480 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_CUDAConstantAttr:
05481 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;attribute(constant)&quot;</emphasis>);
05482 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_CUDADeviceAttr:
05483 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;attribute(device)&quot;</emphasis>);
05484 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_CUDAGlobalAttr:
05485 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;attribute(global)&quot;</emphasis>);
05486 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_CUDAHostAttr:
05487 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;attribute(host)&quot;</emphasis>);
05488 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_CUDASharedAttr:
05489 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;attribute(shared)&quot;</emphasis>);
05490 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_VisibilityAttr:
05491 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;attribute(visibility)&quot;</emphasis>);
05492 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_DLLExport:
05493 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;attribute(dllexport)&quot;</emphasis>);
05494 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_DLLImport:
05495 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;attribute(dllimport)&quot;</emphasis>);
05496 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_NSReturnsRetained:
05497 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;attribute(ns_returns_retained)&quot;</emphasis>);
05498 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_NSReturnsNotRetained:
05499 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;attribute(ns_returns_not_retained)&quot;</emphasis>);
05500 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_NSReturnsAutoreleased:
05501 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;attribute(ns_returns_autoreleased)&quot;</emphasis>);
05502 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_NSConsumesSelf:
05503 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;attribute(ns_consumes_self)&quot;</emphasis>);
05504 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_NSConsumed:
05505 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;attribute(ns_consumed)&quot;</emphasis>);
05506 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_ObjCException:
05507 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;attribute(objc_exception)&quot;</emphasis>);
05508 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_ObjCNSObject:
05509 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;attribute(NSObject)&quot;</emphasis>);
05510 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_ObjCIndependentClass:
05511 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;attribute(objc_independent_class)&quot;</emphasis>);
05512 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_ObjCPreciseLifetime:
05513 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;attribute(objc_precise_lifetime)&quot;</emphasis>);
05514 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_ObjCReturnsInnerPointer:
05515 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;attribute(objc_returns_inner_pointer)&quot;</emphasis>);
05516 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_ObjCRequiresSuper:
05517 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;attribute(objc_requires_super)&quot;</emphasis>);
05518 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_ObjCRootClass:
05519 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;attribute(objc_root_class)&quot;</emphasis>);
05520 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_ObjCSubclassingRestricted:
05521 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;attribute(objc_subclassing_restricted)&quot;</emphasis>);
05522 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_ObjCExplicitProtocolImpl:
05523 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(
05524 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;attribute(objc_protocol_requires_explicit_implementation)&quot;</emphasis>);
05525 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_ObjCDesignatedInitializer:
05526 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;attribute(objc_designated_initializer)&quot;</emphasis>);
05527 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_ObjCRuntimeVisible:
05528 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;attribute(objc_runtime_visible)&quot;</emphasis>);
05529 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_ObjCBoxable:
05530 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;attribute(objc_boxable)&quot;</emphasis>);
05531 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_FlagEnum:
05532 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;attribute(flag_enum)&quot;</emphasis>);
05533 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_PreprocessingDirective:
05534 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;preprocessing&#32;directive&quot;</emphasis>);
05535 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_MacroDefinition:
05536 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;macro&#32;definition&quot;</emphasis>);
05537 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_MacroExpansion:
05538 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;macro&#32;expansion&quot;</emphasis>);
05539 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_InclusionDirective:
05540 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;inclusion&#32;directive&quot;</emphasis>);
05541 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_Namespace:
05542 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;Namespace&quot;</emphasis>);
05543 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_LinkageSpec:
05544 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;LinkageSpec&quot;</emphasis>);
05545 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_CXXBaseSpecifier:
05546 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;C++&#32;base&#32;class&#32;specifier&quot;</emphasis>);
05547 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_Constructor:
05548 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;CXXConstructor&quot;</emphasis>);
05549 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_Destructor:
05550 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;CXXDestructor&quot;</emphasis>);
05551 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_ConversionFunction:
05552 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;CXXConversion&quot;</emphasis>);
05553 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_TemplateTypeParameter:
05554 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;TemplateTypeParameter&quot;</emphasis>);
05555 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_NonTypeTemplateParameter:
05556 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;NonTypeTemplateParameter&quot;</emphasis>);
05557 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_TemplateTemplateParameter:
05558 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;TemplateTemplateParameter&quot;</emphasis>);
05559 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_FunctionTemplate:
05560 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;FunctionTemplate&quot;</emphasis>);
05561 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_ClassTemplate:
05562 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;ClassTemplate&quot;</emphasis>);
05563 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_ClassTemplatePartialSpecialization:
05564 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;ClassTemplatePartialSpecialization&quot;</emphasis>);
05565 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_NamespaceAlias:
05566 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;NamespaceAlias&quot;</emphasis>);
05567 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_UsingDirective:
05568 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;UsingDirective&quot;</emphasis>);
05569 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_UsingDeclaration:
05570 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;UsingDeclaration&quot;</emphasis>);
05571 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_TypeAliasDecl:
05572 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;TypeAliasDecl&quot;</emphasis>);
05573 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_ObjCSynthesizeDecl:
05574 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;ObjCSynthesizeDecl&quot;</emphasis>);
05575 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_ObjCDynamicDecl:
05576 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;ObjCDynamicDecl&quot;</emphasis>);
05577 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_CXXAccessSpecifier:
05578 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;CXXAccessSpecifier&quot;</emphasis>);
05579 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_ModuleImportDecl:
05580 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;ModuleImport&quot;</emphasis>);
05581 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_OMPCanonicalLoop:
05582 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;OMPCanonicalLoop&quot;</emphasis>);
05583 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_OMPParallelDirective:
05584 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;OMPParallelDirective&quot;</emphasis>);
05585 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_OMPSimdDirective:
05586 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;OMPSimdDirective&quot;</emphasis>);
05587 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_OMPTileDirective:
05588 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;OMPTileDirective&quot;</emphasis>);
05589 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_OMPUnrollDirective:
05590 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;OMPUnrollDirective&quot;</emphasis>);
05591 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_OMPForDirective:
05592 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;OMPForDirective&quot;</emphasis>);
05593 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_OMPForSimdDirective:
05594 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;OMPForSimdDirective&quot;</emphasis>);
05595 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_OMPSectionsDirective:
05596 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;OMPSectionsDirective&quot;</emphasis>);
05597 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_OMPSectionDirective:
05598 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;OMPSectionDirective&quot;</emphasis>);
05599 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_OMPSingleDirective:
05600 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;OMPSingleDirective&quot;</emphasis>);
05601 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_OMPMasterDirective:
05602 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;OMPMasterDirective&quot;</emphasis>);
05603 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_OMPCriticalDirective:
05604 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;OMPCriticalDirective&quot;</emphasis>);
05605 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_OMPParallelForDirective:
05606 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;OMPParallelForDirective&quot;</emphasis>);
05607 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_OMPParallelForSimdDirective:
05608 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;OMPParallelForSimdDirective&quot;</emphasis>);
05609 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_OMPParallelMasterDirective:
05610 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;OMPParallelMasterDirective&quot;</emphasis>);
05611 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_OMPParallelSectionsDirective:
05612 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;OMPParallelSectionsDirective&quot;</emphasis>);
05613 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_OMPTaskDirective:
05614 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;OMPTaskDirective&quot;</emphasis>);
05615 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_OMPTaskyieldDirective:
05616 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;OMPTaskyieldDirective&quot;</emphasis>);
05617 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_OMPBarrierDirective:
05618 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;OMPBarrierDirective&quot;</emphasis>);
05619 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_OMPTaskwaitDirective:
05620 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;OMPTaskwaitDirective&quot;</emphasis>);
05621 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_OMPTaskgroupDirective:
05622 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;OMPTaskgroupDirective&quot;</emphasis>);
05623 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_OMPFlushDirective:
05624 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;OMPFlushDirective&quot;</emphasis>);
05625 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_OMPDepobjDirective:
05626 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;OMPDepobjDirective&quot;</emphasis>);
05627 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_OMPScanDirective:
05628 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;OMPScanDirective&quot;</emphasis>);
05629 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_OMPOrderedDirective:
05630 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;OMPOrderedDirective&quot;</emphasis>);
05631 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_OMPAtomicDirective:
05632 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;OMPAtomicDirective&quot;</emphasis>);
05633 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_OMPTargetDirective:
05634 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;OMPTargetDirective&quot;</emphasis>);
05635 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_OMPTargetDataDirective:
05636 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;OMPTargetDataDirective&quot;</emphasis>);
05637 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_OMPTargetEnterDataDirective:
05638 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;OMPTargetEnterDataDirective&quot;</emphasis>);
05639 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_OMPTargetExitDataDirective:
05640 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;OMPTargetExitDataDirective&quot;</emphasis>);
05641 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_OMPTargetParallelDirective:
05642 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;OMPTargetParallelDirective&quot;</emphasis>);
05643 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_OMPTargetParallelForDirective:
05644 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;OMPTargetParallelForDirective&quot;</emphasis>);
05645 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_OMPTargetUpdateDirective:
05646 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;OMPTargetUpdateDirective&quot;</emphasis>);
05647 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_OMPTeamsDirective:
05648 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;OMPTeamsDirective&quot;</emphasis>);
05649 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_OMPCancellationPointDirective:
05650 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;OMPCancellationPointDirective&quot;</emphasis>);
05651 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_OMPCancelDirective:
05652 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;OMPCancelDirective&quot;</emphasis>);
05653 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_OMPTaskLoopDirective:
05654 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;OMPTaskLoopDirective&quot;</emphasis>);
05655 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_OMPTaskLoopSimdDirective:
05656 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;OMPTaskLoopSimdDirective&quot;</emphasis>);
05657 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_OMPMasterTaskLoopDirective:
05658 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;OMPMasterTaskLoopDirective&quot;</emphasis>);
05659 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_OMPMasterTaskLoopSimdDirective:
05660 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;OMPMasterTaskLoopSimdDirective&quot;</emphasis>);
05661 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_OMPParallelMasterTaskLoopDirective:
05662 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;OMPParallelMasterTaskLoopDirective&quot;</emphasis>);
05663 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_OMPParallelMasterTaskLoopSimdDirective:
05664 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;OMPParallelMasterTaskLoopSimdDirective&quot;</emphasis>);
05665 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_OMPDistributeDirective:
05666 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;OMPDistributeDirective&quot;</emphasis>);
05667 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_OMPDistributeParallelForDirective:
05668 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;OMPDistributeParallelForDirective&quot;</emphasis>);
05669 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_OMPDistributeParallelForSimdDirective:
05670 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;OMPDistributeParallelForSimdDirective&quot;</emphasis>);
05671 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_OMPDistributeSimdDirective:
05672 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;OMPDistributeSimdDirective&quot;</emphasis>);
05673 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_OMPTargetParallelForSimdDirective:
05674 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;OMPTargetParallelForSimdDirective&quot;</emphasis>);
05675 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_OMPTargetSimdDirective:
05676 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;OMPTargetSimdDirective&quot;</emphasis>);
05677 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_OMPTeamsDistributeDirective:
05678 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;OMPTeamsDistributeDirective&quot;</emphasis>);
05679 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_OMPTeamsDistributeSimdDirective:
05680 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;OMPTeamsDistributeSimdDirective&quot;</emphasis>);
05681 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_OMPTeamsDistributeParallelForSimdDirective:
05682 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;OMPTeamsDistributeParallelForSimdDirective&quot;</emphasis>);
05683 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_OMPTeamsDistributeParallelForDirective:
05684 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;OMPTeamsDistributeParallelForDirective&quot;</emphasis>);
05685 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_OMPTargetTeamsDirective:
05686 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;OMPTargetTeamsDirective&quot;</emphasis>);
05687 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_OMPTargetTeamsDistributeDirective:
05688 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;OMPTargetTeamsDistributeDirective&quot;</emphasis>);
05689 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_OMPTargetTeamsDistributeParallelForDirective:
05690 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;OMPTargetTeamsDistributeParallelForDirective&quot;</emphasis>);
05691 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_OMPTargetTeamsDistributeParallelForSimdDirective:
05692 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(
05693 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;OMPTargetTeamsDistributeParallelForSimdDirective&quot;</emphasis>);
05694 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_OMPTargetTeamsDistributeSimdDirective:
05695 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;OMPTargetTeamsDistributeSimdDirective&quot;</emphasis>);
05696 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_OMPInteropDirective:
05697 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;OMPInteropDirective&quot;</emphasis>);
05698 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_OMPDispatchDirective:
05699 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;OMPDispatchDirective&quot;</emphasis>);
05700 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_OMPMaskedDirective:
05701 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;OMPMaskedDirective&quot;</emphasis>);
05702 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_OverloadCandidate:
05703 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;OverloadCandidate&quot;</emphasis>);
05704 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_TypeAliasTemplateDecl:
05705 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;TypeAliasTemplateDecl&quot;</emphasis>);
05706 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_StaticAssert:
05707 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;StaticAssert&quot;</emphasis>);
05708 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_FriendDecl:
05709 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;FriendDecl&quot;</emphasis>);
05710 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_ConvergentAttr:
05711 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;attribute(convergent)&quot;</emphasis>);
05712 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_WarnUnusedAttr:
05713 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;attribute(warn_unused)&quot;</emphasis>);
05714 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_WarnUnusedResultAttr:
05715 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;attribute(warn_unused_result)&quot;</emphasis>);
05716 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_AlignedAttr:
05717 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;attribute(aligned)&quot;</emphasis>);
05718 &#32;&#32;}
05719 
05720 &#32;&#32;llvm_unreachable(<emphasis role="stringliteral">&quot;Unhandled&#32;CXCursorKind&quot;</emphasis>);
05721 }
05722 
<anchor xml:id="__c_index_8cpp_source_1l05723"/><link linkend="_struct_get_cursor_data">05723</link> <emphasis role="keyword">struct&#32;</emphasis><link linkend="_struct_get_cursor_data">GetCursorData</link>&#32;{
<anchor xml:id="__c_index_8cpp_source_1l05724"/><link linkend="_struct_get_cursor_data_1a2d3e6a70192e999fea90f734e773b8e7">05724</link> &#32;&#32;SourceLocation&#32;<link linkend="_struct_get_cursor_data_1a2d3e6a70192e999fea90f734e773b8e7">TokenBeginLoc</link>;
<anchor xml:id="__c_index_8cpp_source_1l05725"/><link linkend="_struct_get_cursor_data_1ae9ae3275750d3fd5ab7512e8df68e36f">05725</link> &#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_struct_get_cursor_data_1ae9ae3275750d3fd5ab7512e8df68e36f">PointsAtMacroArgExpansion</link>;
<anchor xml:id="__c_index_8cpp_source_1l05726"/><link linkend="_struct_get_cursor_data_1ad854dc45efe8d9efa48c35a1475661da">05726</link> &#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_struct_get_cursor_data_1ad854dc45efe8d9efa48c35a1475661da">VisitedObjCPropertyImplDecl</link>;
<anchor xml:id="__c_index_8cpp_source_1l05727"/><link linkend="_struct_get_cursor_data_1a7735653d549b1f37d372bcba7d269d11">05727</link> &#32;&#32;SourceLocation&#32;<link linkend="_struct_get_cursor_data_1a7735653d549b1f37d372bcba7d269d11">VisitedDeclaratorDeclStartLoc</link>;
<anchor xml:id="__c_index_8cpp_source_1l05728"/><link linkend="_struct_get_cursor_data_1a86e1a8463d2430136847aac9c099b7c8">05728</link> &#32;&#32;CXCursor&#32;&amp;<link linkend="_struct_get_cursor_data_1a86e1a8463d2430136847aac9c099b7c8">BestCursor</link>;
05729 
<anchor xml:id="__c_index_8cpp_source_1l05730"/><link linkend="_struct_get_cursor_data_1a4379ab9c1144e2e9fcd62473c1100529">05730</link> &#32;&#32;<link linkend="_struct_get_cursor_data_1a4379ab9c1144e2e9fcd62473c1100529">GetCursorData</link>(SourceManager&#32;&amp;SM,&#32;SourceLocation&#32;tokenBegin,
05731 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;CXCursor&#32;&amp;outputCursor)
05732 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;TokenBeginLoc(tokenBegin),&#32;BestCursor(outputCursor)&#32;{
05733 &#32;&#32;&#32;&#32;PointsAtMacroArgExpansion&#32;=&#32;SM.isMacroArgExpansion(tokenBegin);
05734 &#32;&#32;&#32;&#32;VisitedObjCPropertyImplDecl&#32;=&#32;<emphasis role="keyword">false</emphasis>;
05735 &#32;&#32;}
05736 };
05737 
05738 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">enum</emphasis>&#32;CXChildVisitResult
05739 GetCursorVisitor(CXCursor&#32;cursor,&#32;CXCursor&#32;parent,&#32;CXClientData&#32;client_data)&#32;{
05740 &#32;&#32;<link linkend="_struct_get_cursor_data">GetCursorData</link>&#32;*Data&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis><link linkend="_struct_get_cursor_data">GetCursorData</link>&#32;*<emphasis role="keyword">&gt;</emphasis>(client_data);
05741 &#32;&#32;CXCursor&#32;*BestCursor&#32;=&#32;&amp;Data-&gt;<link linkend="_struct_get_cursor_data_1a86e1a8463d2430136847aac9c099b7c8">BestCursor</link>;
05742 
05743 &#32;&#32;<emphasis role="comment">//&#32;If&#32;we&#32;point&#32;inside&#32;a&#32;macro&#32;argument&#32;we&#32;should&#32;provide&#32;info&#32;of&#32;what&#32;the</emphasis>
05744 &#32;&#32;<emphasis role="comment">//&#32;token&#32;is&#32;so&#32;use&#32;the&#32;actual&#32;cursor,&#32;don&apos;t&#32;replace&#32;it&#32;with&#32;a&#32;macro&#32;expansion</emphasis>
05745 &#32;&#32;<emphasis role="comment">//&#32;cursor.</emphasis>
05746 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(cursor.kind&#32;==&#32;CXCursor_MacroExpansion&#32;&amp;&amp;&#32;Data-&gt;<link linkend="_struct_get_cursor_data_1ae9ae3275750d3fd5ab7512e8df68e36f">PointsAtMacroArgExpansion</link>)
05747 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;CXChildVisit_Recurse;
05748 
05749 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="__c_index_8cpp_1a5d47db8f608ae0c266d6551875d46b80">clang_isDeclaration</link>(cursor.kind))&#32;{
05750 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Avoid&#32;having&#32;the&#32;implicit&#32;methods&#32;override&#32;the&#32;property&#32;decls.</emphasis>
05751 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;ObjCMethodDecl&#32;*MD&#32;=
05752 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;dyn_cast_or_null&lt;ObjCMethodDecl&gt;(<link linkend="_namespaceclang_1_1cxcursor_1a1f702246831c96afd990e457613dc642">getCursorDecl</link>(cursor)))&#32;{
05753 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(MD-&gt;isImplicit())
05754 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;CXChildVisit_Break;
05755 
05756 &#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;ObjCInterfaceDecl&#32;*ID&#32;=
05757 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;dyn_cast_or_null&lt;ObjCInterfaceDecl&gt;(<link linkend="_namespaceclang_1_1cxcursor_1a1f702246831c96afd990e457613dc642">getCursorDecl</link>(cursor)))&#32;{
05758 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Check&#32;that&#32;when&#32;we&#32;have&#32;multiple&#32;@class&#32;references&#32;in&#32;the&#32;same&#32;line,</emphasis>
05759 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;that&#32;later&#32;ones&#32;do&#32;not&#32;override&#32;the&#32;previous&#32;ones.</emphasis>
05760 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;If&#32;we&#32;have:</emphasis>
05761 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;@class&#32;Foo,&#32;Bar;</emphasis>
05762 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;source&#32;ranges&#32;for&#32;both&#32;start&#32;at&#32;&apos;@&apos;,&#32;so&#32;&apos;Bar&apos;&#32;will&#32;end&#32;up&#32;overriding</emphasis>
05763 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&apos;Foo&apos;&#32;even&#32;though&#32;the&#32;cursor&#32;location&#32;was&#32;at&#32;&apos;Foo&apos;.</emphasis>
05764 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(BestCursor-&gt;kind&#32;==&#32;CXCursor_ObjCInterfaceDecl&#32;||
05765 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;BestCursor-&gt;kind&#32;==&#32;CXCursor_ObjCClassRef)
05766 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;ObjCInterfaceDecl&#32;*PrevID&#32;=
05767 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;dyn_cast_or_null&lt;ObjCInterfaceDecl&gt;(
05768 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespaceclang_1_1cxcursor_1a1f702246831c96afd990e457613dc642">getCursorDecl</link>(*BestCursor)))&#32;{
05769 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(PrevID&#32;!=&#32;ID&#32;&amp;&amp;&#32;!PrevID-&gt;isThisDeclarationADefinition()&#32;&amp;&amp;
05770 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;!ID-&gt;isThisDeclarationADefinition())
05771 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;CXChildVisit_Break;
05772 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
05773 
05774 &#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;DeclaratorDecl&#32;*DD&#32;=
05775 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;dyn_cast_or_null&lt;DeclaratorDecl&gt;(<link linkend="_namespaceclang_1_1cxcursor_1a1f702246831c96afd990e457613dc642">getCursorDecl</link>(cursor)))&#32;{
05776 &#32;&#32;&#32;&#32;&#32;&#32;SourceLocation&#32;StartLoc&#32;=&#32;DD-&gt;getSourceRange().getBegin();
05777 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Check&#32;that&#32;when&#32;we&#32;have&#32;multiple&#32;declarators&#32;in&#32;the&#32;same&#32;line,</emphasis>
05778 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;that&#32;later&#32;ones&#32;do&#32;not&#32;override&#32;the&#32;previous&#32;ones.</emphasis>
05779 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;If&#32;we&#32;have:</emphasis>
05780 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;int&#32;Foo,&#32;Bar;</emphasis>
05781 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;source&#32;ranges&#32;for&#32;both&#32;start&#32;at&#32;&apos;int&apos;,&#32;so&#32;&apos;Bar&apos;&#32;will&#32;end&#32;up&#32;overriding</emphasis>
05782 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&apos;Foo&apos;&#32;even&#32;though&#32;the&#32;cursor&#32;location&#32;was&#32;at&#32;&apos;Foo&apos;.</emphasis>
05783 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(Data-&gt;<link linkend="_struct_get_cursor_data_1a7735653d549b1f37d372bcba7d269d11">VisitedDeclaratorDeclStartLoc</link>&#32;==&#32;StartLoc)
05784 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;CXChildVisit_Break;
05785 &#32;&#32;&#32;&#32;&#32;&#32;Data-&gt;<link linkend="_struct_get_cursor_data_1a7735653d549b1f37d372bcba7d269d11">VisitedDeclaratorDeclStartLoc</link>&#32;=&#32;StartLoc;
05786 
05787 &#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;ObjCPropertyImplDecl&#32;*PropImp&#32;=
05788 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;dyn_cast_or_null&lt;ObjCPropertyImplDecl&gt;(
05789 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespaceclang_1_1cxcursor_1a1f702246831c96afd990e457613dc642">getCursorDecl</link>(cursor)))&#32;{
05790 &#32;&#32;&#32;&#32;&#32;&#32;(void)PropImp;
05791 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Check&#32;that&#32;when&#32;we&#32;have&#32;multiple&#32;@synthesize&#32;in&#32;the&#32;same&#32;line,</emphasis>
05792 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;that&#32;later&#32;ones&#32;do&#32;not&#32;override&#32;the&#32;previous&#32;ones.</emphasis>
05793 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;If&#32;we&#32;have:</emphasis>
05794 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;@synthesize&#32;Foo,&#32;Bar;</emphasis>
05795 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;source&#32;ranges&#32;for&#32;both&#32;start&#32;at&#32;&apos;@&apos;,&#32;so&#32;&apos;Bar&apos;&#32;will&#32;end&#32;up&#32;overriding</emphasis>
05796 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&apos;Foo&apos;&#32;even&#32;though&#32;the&#32;cursor&#32;location&#32;was&#32;at&#32;&apos;Foo&apos;.</emphasis>
05797 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(Data-&gt;<link linkend="_struct_get_cursor_data_1ad854dc45efe8d9efa48c35a1475661da">VisitedObjCPropertyImplDecl</link>)
05798 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;CXChildVisit_Break;
05799 &#32;&#32;&#32;&#32;&#32;&#32;Data-&gt;<link linkend="_struct_get_cursor_data_1ad854dc45efe8d9efa48c35a1475661da">VisitedObjCPropertyImplDecl</link>&#32;=&#32;<emphasis role="keyword">true</emphasis>;
05800 &#32;&#32;&#32;&#32;}
05801 &#32;&#32;}
05802 
05803 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="__c_index_8cpp_1ab958945dd59c351e1ae1a3f7f5668095">clang_isExpression</link>(cursor.kind)&#32;&amp;&amp;
05804 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__c_index_8cpp_1a5d47db8f608ae0c266d6551875d46b80">clang_isDeclaration</link>(BestCursor-&gt;kind))&#32;{
05805 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;Decl&#32;*D&#32;=&#32;<link linkend="_namespaceclang_1_1cxcursor_1a1f702246831c96afd990e457613dc642">getCursorDecl</link>(*BestCursor))&#32;{
05806 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Avoid&#32;having&#32;the&#32;cursor&#32;of&#32;an&#32;expression&#32;replace&#32;the&#32;declaration&#32;cursor</emphasis>
05807 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;when&#32;the&#32;expression&#32;source&#32;range&#32;overlaps&#32;the&#32;declaration&#32;range.</emphasis>
05808 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;This&#32;can&#32;happen&#32;for&#32;C++&#32;constructor&#32;expressions&#32;whose&#32;range&#32;generally</emphasis>
05809 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;include&#32;the&#32;variable&#32;declaration,&#32;e.g.:</emphasis>
05810 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;MyCXXClass&#32;foo;&#32;//&#32;Make&#32;sure&#32;pointing&#32;at&#32;&apos;foo&apos;&#32;returns&#32;a&#32;VarDecl</emphasis>
05811 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;cursor.</emphasis>
05812 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(D-&gt;getLocation().isValid()&#32;&amp;&amp;&#32;Data-&gt;<link linkend="_struct_get_cursor_data_1a2d3e6a70192e999fea90f734e773b8e7">TokenBeginLoc</link>.isValid()&#32;&amp;&amp;
05813 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;D-&gt;getLocation()&#32;==&#32;Data-&gt;<link linkend="_struct_get_cursor_data_1a2d3e6a70192e999fea90f734e773b8e7">TokenBeginLoc</link>)
05814 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;CXChildVisit_Break;
05815 &#32;&#32;&#32;&#32;}
05816 &#32;&#32;}
05817 
05818 &#32;&#32;<emphasis role="comment">//&#32;If&#32;our&#32;current&#32;best&#32;cursor&#32;is&#32;the&#32;construction&#32;of&#32;a&#32;temporary&#32;object,</emphasis>
05819 &#32;&#32;<emphasis role="comment">//&#32;don&apos;t&#32;replace&#32;that&#32;cursor&#32;with&#32;a&#32;type&#32;reference,&#32;because&#32;we&#32;want</emphasis>
05820 &#32;&#32;<emphasis role="comment">//&#32;clang_getCursor()&#32;to&#32;point&#32;at&#32;the&#32;constructor.</emphasis>
05821 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="__c_index_8cpp_1ab958945dd59c351e1ae1a3f7f5668095">clang_isExpression</link>(BestCursor-&gt;kind)&#32;&amp;&amp;
05822 &#32;&#32;&#32;&#32;&#32;&#32;isa&lt;CXXTemporaryObjectExpr&gt;(<link linkend="_namespaceclang_1_1cxcursor_1a80837a3710c6df0dfc24b5ee1d94ff9b">getCursorExpr</link>(*BestCursor))&#32;&amp;&amp;
05823 &#32;&#32;&#32;&#32;&#32;&#32;cursor.kind&#32;==&#32;CXCursor_TypeRef)&#32;{
05824 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Keep&#32;the&#32;cursor&#32;pointing&#32;at&#32;CXXTemporaryObjectExpr&#32;but&#32;also&#32;mark&#32;it</emphasis>
05825 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;as&#32;having&#32;the&#32;actual&#32;point&#32;on&#32;the&#32;type&#32;reference.</emphasis>
05826 &#32;&#32;&#32;&#32;*BestCursor&#32;=&#32;getTypeRefedCallExprCursor(*BestCursor);
05827 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;CXChildVisit_Recurse;
05828 &#32;&#32;}
05829 
05830 &#32;&#32;<emphasis role="comment">//&#32;If&#32;we&#32;already&#32;have&#32;an&#32;Objective-C&#32;superclass&#32;reference,&#32;don&apos;t</emphasis>
05831 &#32;&#32;<emphasis role="comment">//&#32;update&#32;it&#32;further.</emphasis>
05832 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(BestCursor-&gt;kind&#32;==&#32;CXCursor_ObjCSuperClassRef)
05833 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;CXChildVisit_Break;
05834 
05835 &#32;&#32;*BestCursor&#32;=&#32;cursor;
05836 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;CXChildVisit_Recurse;
05837 }
05838 
<anchor xml:id="__c_index_8cpp_source_1l05839"/><link linkend="__c_index_8cpp_1a98b7e00ed3ca471a2e35509110ddc0c5">05839</link> CXCursor&#32;<link linkend="__c_index_8cpp_1a98b7e00ed3ca471a2e35509110ddc0c5">clang_getCursor</link>(CXTranslationUnit&#32;TU,&#32;CXSourceLocation&#32;Loc)&#32;{
05840 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(isNotUsableTU(TU))&#32;{
05841 &#32;&#32;&#32;&#32;<link linkend="__c_x_translation_unit_8h_1a4ec17e6e03ea0baf73e27802eae36106">LOG_BAD_TU</link>(TU);
05842 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__c_index_8cpp_1aa22233466eaf91f6f3cf6b84255c3b68">clang_getNullCursor</link>();
05843 &#32;&#32;}
05844 
05845 &#32;&#32;ASTUnit&#32;*CXXUnit&#32;=&#32;cxtu::getASTUnit(TU);
05846 &#32;&#32;ASTUnit::ConcurrencyCheck&#32;Check(*CXXUnit);
05847 
05848 &#32;&#32;SourceLocation&#32;SLoc&#32;=&#32;cxloc::translateSourceLocation(Loc);
05849 &#32;&#32;CXCursor&#32;Result&#32;=&#32;<link linkend="_namespaceclang_1_1cxcursor_1a17dbc7b3a465bf9e70491f77a9a4f63b">cxcursor::getCursor</link>(TU,&#32;SLoc);
05850 
05851 &#32;&#32;<link linkend="__c_log_8h_1a24474e48ce7e218f17ae9353103470d8">LOG_FUNC_SECTION</link>&#32;{
05852 &#32;&#32;&#32;&#32;CXFile&#32;SearchFile;
05853 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;SearchLine,&#32;SearchColumn;
05854 &#32;&#32;&#32;&#32;CXFile&#32;ResultFile;
05855 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;ResultLine,&#32;ResultColumn;
05856 &#32;&#32;&#32;&#32;CXString&#32;SearchFileName,&#32;ResultFileName,&#32;KindSpelling,&#32;USR;
05857 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*IsDef&#32;=&#32;<link linkend="__c_index_8cpp_1a619396ba7a888dea29aa6cb0b35ddbe5">clang_isCursorDefinition</link>(Result)&#32;?&#32;<emphasis role="stringliteral">&quot;&#32;(Definition)&quot;</emphasis>&#32;:&#32;<emphasis role="stringliteral">&quot;&quot;</emphasis>;
05858 &#32;&#32;&#32;&#32;CXSourceLocation&#32;ResultLoc&#32;=&#32;<link linkend="__c_index_8cpp_1a98001a3f8eb3a76d9c12821c45ef3708">clang_getCursorLocation</link>(Result);
05859 
05860 &#32;&#32;&#32;&#32;<link linkend="__c_x_source_location_8cpp_1a35b4c0e781e65d746666e3d263b000e8">clang_getFileLocation</link>(Loc,&#32;&amp;SearchFile,&#32;&amp;SearchLine,&#32;&amp;SearchColumn,
05861 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">nullptr</emphasis>);
05862 &#32;&#32;&#32;&#32;<link linkend="__c_x_source_location_8cpp_1a35b4c0e781e65d746666e3d263b000e8">clang_getFileLocation</link>(ResultLoc,&#32;&amp;ResultFile,&#32;&amp;ResultLine,&#32;&amp;ResultColumn,
05863 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">nullptr</emphasis>);
05864 &#32;&#32;&#32;&#32;SearchFileName&#32;=&#32;<link linkend="__c_index_8cpp_1a263c34f5782353186990b2c990d648fc">clang_getFileName</link>(SearchFile);
05865 &#32;&#32;&#32;&#32;ResultFileName&#32;=&#32;<link linkend="__c_index_8cpp_1a263c34f5782353186990b2c990d648fc">clang_getFileName</link>(ResultFile);
05866 &#32;&#32;&#32;&#32;KindSpelling&#32;=&#32;<link linkend="__c_index_8cpp_1a667cf97e111be828ff2c36e23d583fce">clang_getCursorKindSpelling</link>(Result.kind);
05867 &#32;&#32;&#32;&#32;USR&#32;=&#32;<link linkend="__c_index_u_s_rs_8cpp_1ae603480d6cea9e6b8e4a3bc927c1f43b">clang_getCursorUSR</link>(Result);
05868 &#32;&#32;&#32;&#32;*Log&#32;&lt;&lt;&#32;llvm::format(<emphasis role="stringliteral">&quot;(%s:%d:%d)&#32;=&#32;%s&quot;</emphasis>,&#32;<link linkend="__c_x_string_8cpp_1acd478c1b1785e17c0fe377bd70a2195f">clang_getCString</link>(SearchFileName),
05869 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;SearchLine,&#32;SearchColumn,
05870 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__c_x_string_8cpp_1acd478c1b1785e17c0fe377bd70a2195f">clang_getCString</link>(KindSpelling))
05871 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;llvm::format(<emphasis role="stringliteral">&quot;(%s:%d:%d):%s%s&quot;</emphasis>,&#32;<link linkend="__c_x_string_8cpp_1acd478c1b1785e17c0fe377bd70a2195f">clang_getCString</link>(ResultFileName),
05872 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ResultLine,&#32;ResultColumn,&#32;<link linkend="__c_x_string_8cpp_1acd478c1b1785e17c0fe377bd70a2195f">clang_getCString</link>(USR),
05873 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;IsDef);
05874 &#32;&#32;&#32;&#32;<link linkend="__c_x_string_8cpp_1a46c85f1255580ed186aa6f7380a06883">clang_disposeString</link>(SearchFileName);
05875 &#32;&#32;&#32;&#32;<link linkend="__c_x_string_8cpp_1a46c85f1255580ed186aa6f7380a06883">clang_disposeString</link>(ResultFileName);
05876 &#32;&#32;&#32;&#32;<link linkend="__c_x_string_8cpp_1a46c85f1255580ed186aa6f7380a06883">clang_disposeString</link>(KindSpelling);
05877 &#32;&#32;&#32;&#32;<link linkend="__c_x_string_8cpp_1a46c85f1255580ed186aa6f7380a06883">clang_disposeString</link>(USR);
05878 
05879 &#32;&#32;&#32;&#32;CXCursor&#32;Definition&#32;=&#32;<link linkend="__c_index_8cpp_1a090e42b940779ab0c437188858f24dfb">clang_getCursorDefinition</link>(Result);
05880 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!<link linkend="__c_index_8cpp_1a96d5f0059613428736715de616ed38f9">clang_equalCursors</link>(Definition,&#32;<link linkend="__c_index_8cpp_1aa22233466eaf91f6f3cf6b84255c3b68">clang_getNullCursor</link>()))&#32;{
05881 &#32;&#32;&#32;&#32;&#32;&#32;CXSourceLocation&#32;DefinitionLoc&#32;=&#32;<link linkend="__c_index_8cpp_1a98001a3f8eb3a76d9c12821c45ef3708">clang_getCursorLocation</link>(Definition);
05882 &#32;&#32;&#32;&#32;&#32;&#32;CXString&#32;DefinitionKindSpelling&#32;=
05883 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__c_index_8cpp_1a667cf97e111be828ff2c36e23d583fce">clang_getCursorKindSpelling</link>(Definition.kind);
05884 &#32;&#32;&#32;&#32;&#32;&#32;CXFile&#32;DefinitionFile;
05885 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;DefinitionLine,&#32;DefinitionColumn;
05886 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__c_x_source_location_8cpp_1a35b4c0e781e65d746666e3d263b000e8">clang_getFileLocation</link>(DefinitionLoc,&#32;&amp;DefinitionFile,&#32;&amp;DefinitionLine,
05887 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;DefinitionColumn,&#32;<emphasis role="keyword">nullptr</emphasis>);
05888 &#32;&#32;&#32;&#32;&#32;&#32;CXString&#32;DefinitionFileName&#32;=&#32;<link linkend="__c_index_8cpp_1a263c34f5782353186990b2c990d648fc">clang_getFileName</link>(DefinitionFile);
05889 &#32;&#32;&#32;&#32;&#32;&#32;*Log&#32;&lt;&lt;&#32;llvm::format(<emphasis role="stringliteral">&quot;&#32;&#32;-&gt;&#32;%s(%s:%d:%d)&quot;</emphasis>,
05890 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__c_x_string_8cpp_1acd478c1b1785e17c0fe377bd70a2195f">clang_getCString</link>(DefinitionKindSpelling),
05891 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__c_x_string_8cpp_1acd478c1b1785e17c0fe377bd70a2195f">clang_getCString</link>(DefinitionFileName),&#32;DefinitionLine,
05892 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;DefinitionColumn);
05893 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__c_x_string_8cpp_1a46c85f1255580ed186aa6f7380a06883">clang_disposeString</link>(DefinitionFileName);
05894 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__c_x_string_8cpp_1a46c85f1255580ed186aa6f7380a06883">clang_disposeString</link>(DefinitionKindSpelling);
05895 &#32;&#32;&#32;&#32;}
05896 &#32;&#32;}
05897 
05898 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;Result;
05899 }
05900 
<anchor xml:id="__c_index_8cpp_source_1l05901"/><link linkend="__c_index_8cpp_1aa22233466eaf91f6f3cf6b84255c3b68">05901</link> CXCursor&#32;<link linkend="__c_index_8cpp_1aa22233466eaf91f6f3cf6b84255c3b68">clang_getNullCursor</link>(<emphasis role="keywordtype">void</emphasis>)&#32;{
05902 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxcursor_1aa8325b990acde766ecd9276d7d9df53a">MakeCXCursorInvalid</link>(CXCursor_InvalidFile);
05903 }
05904 
<anchor xml:id="__c_index_8cpp_source_1l05905"/><link linkend="__c_index_8cpp_1a96d5f0059613428736715de616ed38f9">05905</link> <emphasis role="keywordtype">unsigned</emphasis>&#32;<link linkend="__c_index_8cpp_1a96d5f0059613428736715de616ed38f9">clang_equalCursors</link>(CXCursor&#32;X,&#32;CXCursor&#32;Y)&#32;{
05906 &#32;&#32;<emphasis role="comment">//&#32;Clear&#32;out&#32;the&#32;&quot;FirstInDeclGroup&quot;&#32;part&#32;in&#32;a&#32;declaration&#32;cursor,&#32;since&#32;we</emphasis>
05907 &#32;&#32;<emphasis role="comment">//&#32;can&apos;t&#32;set&#32;consistently.&#32;For&#32;example,&#32;when&#32;visiting&#32;a&#32;DeclStmt&#32;we&#32;will&#32;set</emphasis>
05908 &#32;&#32;<emphasis role="comment">//&#32;it&#32;but&#32;we&#32;don&apos;t&#32;set&#32;it&#32;on&#32;the&#32;result&#32;of&#32;clang_getCursorDefinition&#32;for</emphasis>
05909 &#32;&#32;<emphasis role="comment">//&#32;a&#32;reference&#32;of&#32;the&#32;same&#32;declaration.</emphasis>
05910 &#32;&#32;<emphasis role="comment">//&#32;FIXME:&#32;Setting&#32;&quot;FirstInDeclGroup&quot;&#32;in&#32;CXCursors&#32;is&#32;a&#32;hack&#32;that&#32;only&#32;works</emphasis>
05911 &#32;&#32;<emphasis role="comment">//&#32;when&#32;visiting&#32;a&#32;DeclStmt&#32;currently,&#32;the&#32;AST&#32;should&#32;be&#32;enhanced&#32;to&#32;be&#32;able</emphasis>
05912 &#32;&#32;<emphasis role="comment">//&#32;to&#32;provide&#32;that&#32;kind&#32;of&#32;info.</emphasis>
05913 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="__c_index_8cpp_1a5d47db8f608ae0c266d6551875d46b80">clang_isDeclaration</link>(X.kind))
05914 &#32;&#32;&#32;&#32;X.data[1]&#32;=&#32;<emphasis role="keyword">nullptr</emphasis>;
05915 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="__c_index_8cpp_1a5d47db8f608ae0c266d6551875d46b80">clang_isDeclaration</link>(Y.kind))
05916 &#32;&#32;&#32;&#32;Y.data[1]&#32;=&#32;<emphasis role="keyword">nullptr</emphasis>;
05917 
05918 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;X&#32;==&#32;Y;
05919 }
05920 
<anchor xml:id="__c_index_8cpp_source_1l05921"/><link linkend="__c_index_8cpp_1ae1dbe324703f9f57822c6e5395cd0a45">05921</link> <emphasis role="keywordtype">unsigned</emphasis>&#32;<link linkend="__c_index_8cpp_1ae1dbe324703f9f57822c6e5395cd0a45">clang_hashCursor</link>(CXCursor&#32;C)&#32;{
05922 &#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;Index&#32;=&#32;0;
05923 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="__c_index_8cpp_1ab958945dd59c351e1ae1a3f7f5668095">clang_isExpression</link>(C.kind)&#32;||&#32;<link linkend="__c_index_8cpp_1af186bec30eb4cb63c3a7a295ccbcfe8b">clang_isStatement</link>(C.kind))
05924 &#32;&#32;&#32;&#32;Index&#32;=&#32;1;
05925 
05926 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;llvm::DenseMapInfo&lt;std::pair&lt;unsigned,&#32;const&#32;void&#32;*&gt;&gt;::getHashValue(
05927 &#32;&#32;&#32;&#32;&#32;&#32;std::make_pair(C.kind,&#32;C.data[Index]));
05928 }
05929 
<anchor xml:id="__c_index_8cpp_source_1l05930"/><link linkend="__c_index_8cpp_1a0c5b391d8bca745084fb8906cce6f66c">05930</link> <emphasis role="keywordtype">unsigned</emphasis>&#32;<link linkend="__c_index_8cpp_1a0c5b391d8bca745084fb8906cce6f66c">clang_isInvalid</link>(<emphasis role="keyword">enum</emphasis>&#32;CXCursorKind&#32;K)&#32;{
05931 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;K&#32;&gt;=&#32;CXCursor_FirstInvalid&#32;&amp;&amp;&#32;K&#32;&lt;=&#32;CXCursor_LastInvalid;
05932 }
05933 
<anchor xml:id="__c_index_8cpp_source_1l05934"/><link linkend="__c_index_8cpp_1a5d47db8f608ae0c266d6551875d46b80">05934</link> <emphasis role="keywordtype">unsigned</emphasis>&#32;<link linkend="__c_index_8cpp_1a5d47db8f608ae0c266d6551875d46b80">clang_isDeclaration</link>(<emphasis role="keyword">enum</emphasis>&#32;CXCursorKind&#32;K)&#32;{
05935 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(K&#32;&gt;=&#32;CXCursor_FirstDecl&#32;&amp;&amp;&#32;K&#32;&lt;=&#32;CXCursor_LastDecl)&#32;||
05936 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(K&#32;&gt;=&#32;CXCursor_FirstExtraDecl&#32;&amp;&amp;&#32;K&#32;&lt;=&#32;CXCursor_LastExtraDecl);
05937 }
05938 
<anchor xml:id="__c_index_8cpp_source_1l05939"/><link linkend="__c_index_8cpp_1aaaa646143a44711b01f7b4afdb67ff7d">05939</link> <emphasis role="keywordtype">unsigned</emphasis>&#32;<link linkend="__c_index_8cpp_1aaaa646143a44711b01f7b4afdb67ff7d">clang_isInvalidDeclaration</link>(CXCursor&#32;C)&#32;{
05940 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="__c_index_8cpp_1a5d47db8f608ae0c266d6551875d46b80">clang_isDeclaration</link>(C.kind))&#32;{
05941 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;Decl&#32;*D&#32;=&#32;<link linkend="_namespaceclang_1_1cxcursor_1a1f702246831c96afd990e457613dc642">getCursorDecl</link>(C))
05942 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;D-&gt;isInvalidDecl();
05943 &#32;&#32;}
05944 
05945 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
05946 }
05947 
<anchor xml:id="__c_index_8cpp_source_1l05948"/><link linkend="__c_index_8cpp_1a8b03541653a9373d35919c45216bc70f">05948</link> <emphasis role="keywordtype">unsigned</emphasis>&#32;<link linkend="__c_index_8cpp_1a8b03541653a9373d35919c45216bc70f">clang_isReference</link>(<emphasis role="keyword">enum</emphasis>&#32;CXCursorKind&#32;K)&#32;{
05949 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;K&#32;&gt;=&#32;CXCursor_FirstRef&#32;&amp;&amp;&#32;K&#32;&lt;=&#32;CXCursor_LastRef;
05950 }
05951 
<anchor xml:id="__c_index_8cpp_source_1l05952"/><link linkend="__c_index_8cpp_1ab958945dd59c351e1ae1a3f7f5668095">05952</link> <emphasis role="keywordtype">unsigned</emphasis>&#32;<link linkend="__c_index_8cpp_1ab958945dd59c351e1ae1a3f7f5668095">clang_isExpression</link>(<emphasis role="keyword">enum</emphasis>&#32;CXCursorKind&#32;K)&#32;{
05953 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;K&#32;&gt;=&#32;CXCursor_FirstExpr&#32;&amp;&amp;&#32;K&#32;&lt;=&#32;CXCursor_LastExpr;
05954 }
05955 
<anchor xml:id="__c_index_8cpp_source_1l05956"/><link linkend="__c_index_8cpp_1af186bec30eb4cb63c3a7a295ccbcfe8b">05956</link> <emphasis role="keywordtype">unsigned</emphasis>&#32;<link linkend="__c_index_8cpp_1af186bec30eb4cb63c3a7a295ccbcfe8b">clang_isStatement</link>(<emphasis role="keyword">enum</emphasis>&#32;CXCursorKind&#32;K)&#32;{
05957 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;K&#32;&gt;=&#32;CXCursor_FirstStmt&#32;&amp;&amp;&#32;K&#32;&lt;=&#32;CXCursor_LastStmt;
05958 }
05959 
<anchor xml:id="__c_index_8cpp_source_1l05960"/><link linkend="__c_index_8cpp_1ab407667e249e0d44e6c56af84f2c28ba">05960</link> <emphasis role="keywordtype">unsigned</emphasis>&#32;<link linkend="__c_index_8cpp_1ab407667e249e0d44e6c56af84f2c28ba">clang_isAttribute</link>(<emphasis role="keyword">enum</emphasis>&#32;CXCursorKind&#32;K)&#32;{
05961 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;K&#32;&gt;=&#32;CXCursor_FirstAttr&#32;&amp;&amp;&#32;K&#32;&lt;=&#32;CXCursor_LastAttr;
05962 }
05963 
<anchor xml:id="__c_index_8cpp_source_1l05964"/><link linkend="__c_index_8cpp_1ace455769e0f5681db67622db98f263a1">05964</link> <emphasis role="keywordtype">unsigned</emphasis>&#32;<link linkend="__c_index_8cpp_1ace455769e0f5681db67622db98f263a1">clang_isTranslationUnit</link>(<emphasis role="keyword">enum</emphasis>&#32;CXCursorKind&#32;K)&#32;{
05965 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;K&#32;==&#32;CXCursor_TranslationUnit;
05966 }
05967 
<anchor xml:id="__c_index_8cpp_source_1l05968"/><link linkend="__c_index_8cpp_1ae649be0d722f2ec48dae4b152a5b2709">05968</link> <emphasis role="keywordtype">unsigned</emphasis>&#32;<link linkend="__c_index_8cpp_1ae649be0d722f2ec48dae4b152a5b2709">clang_isPreprocessing</link>(<emphasis role="keyword">enum</emphasis>&#32;CXCursorKind&#32;K)&#32;{
05969 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;K&#32;&gt;=&#32;CXCursor_FirstPreprocessing&#32;&amp;&amp;&#32;K&#32;&lt;=&#32;CXCursor_LastPreprocessing;
05970 }
05971 
<anchor xml:id="__c_index_8cpp_source_1l05972"/><link linkend="__c_index_8cpp_1a0e56fac91aaded983a98dd1bf3bec5a1">05972</link> <emphasis role="keywordtype">unsigned</emphasis>&#32;<link linkend="__c_index_8cpp_1a0e56fac91aaded983a98dd1bf3bec5a1">clang_isUnexposed</link>(<emphasis role="keyword">enum</emphasis>&#32;CXCursorKind&#32;K)&#32;{
05973 &#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(K)&#32;{
05974 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_UnexposedDecl:
05975 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_UnexposedExpr:
05976 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_UnexposedStmt:
05977 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_UnexposedAttr:
05978 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
05979 &#32;&#32;<emphasis role="keywordflow">default</emphasis>:
05980 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
05981 &#32;&#32;}
05982 }
05983 
<anchor xml:id="__c_index_8cpp_source_1l05984"/><link linkend="__c_index_8cpp_1a88e594fe730830706a0b7cff796eaedf">05984</link> CXCursorKind&#32;<link linkend="__c_index_8cpp_1a88e594fe730830706a0b7cff796eaedf">clang_getCursorKind</link>(CXCursor&#32;C)&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;C.kind;&#32;}
05985 
<anchor xml:id="__c_index_8cpp_source_1l05986"/><link linkend="__c_index_8cpp_1a98001a3f8eb3a76d9c12821c45ef3708">05986</link> CXSourceLocation&#32;<link linkend="__c_index_8cpp_1a98001a3f8eb3a76d9c12821c45ef3708">clang_getCursorLocation</link>(CXCursor&#32;C)&#32;{
05987 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="__c_index_8cpp_1a8b03541653a9373d35919c45216bc70f">clang_isReference</link>(C.kind))&#32;{
05988 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(C.kind)&#32;{
05989 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_ObjCSuperClassRef:&#32;{
05990 &#32;&#32;&#32;&#32;&#32;&#32;std::pair&lt;const&#32;ObjCInterfaceDecl&#32;*,&#32;SourceLocation&gt;&#32;P&#32;=
05991 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespaceclang_1_1cxcursor_1a071683bc881399c3bcadba5a4da408b2">getCursorObjCSuperClassRef</link>(C);
05992 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;cxloc::translateSourceLocation(P.first-&gt;getASTContext(),&#32;P.second);
05993 &#32;&#32;&#32;&#32;}
05994 
05995 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_ObjCProtocolRef:&#32;{
05996 &#32;&#32;&#32;&#32;&#32;&#32;std::pair&lt;const&#32;ObjCProtocolDecl&#32;*,&#32;SourceLocation&gt;&#32;P&#32;=
05997 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespaceclang_1_1cxcursor_1a1675d17bfec653da314fa2beff772829">getCursorObjCProtocolRef</link>(C);
05998 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;cxloc::translateSourceLocation(P.first-&gt;getASTContext(),&#32;P.second);
05999 &#32;&#32;&#32;&#32;}
06000 
06001 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_ObjCClassRef:&#32;{
06002 &#32;&#32;&#32;&#32;&#32;&#32;std::pair&lt;const&#32;ObjCInterfaceDecl&#32;*,&#32;SourceLocation&gt;&#32;P&#32;=
06003 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespaceclang_1_1cxcursor_1ad21fba4a3d5f6bdc63a19303b1cb42a3">getCursorObjCClassRef</link>(C);
06004 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;cxloc::translateSourceLocation(P.first-&gt;getASTContext(),&#32;P.second);
06005 &#32;&#32;&#32;&#32;}
06006 
06007 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_TypeRef:&#32;{
06008 &#32;&#32;&#32;&#32;&#32;&#32;std::pair&lt;const&#32;TypeDecl&#32;*,&#32;SourceLocation&gt;&#32;P&#32;=&#32;<link linkend="_namespaceclang_1_1cxcursor_1ab0284c10c2cfeb2ffe43b99ec3e9dd9f">getCursorTypeRef</link>(C);
06009 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;cxloc::translateSourceLocation(P.first-&gt;getASTContext(),&#32;P.second);
06010 &#32;&#32;&#32;&#32;}
06011 
06012 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_TemplateRef:&#32;{
06013 &#32;&#32;&#32;&#32;&#32;&#32;std::pair&lt;const&#32;TemplateDecl&#32;*,&#32;SourceLocation&gt;&#32;P&#32;=
06014 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespaceclang_1_1cxcursor_1aacf77fc4aabf02cfa865e6fe19e55d08">getCursorTemplateRef</link>(C);
06015 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;cxloc::translateSourceLocation(P.first-&gt;getASTContext(),&#32;P.second);
06016 &#32;&#32;&#32;&#32;}
06017 
06018 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_NamespaceRef:&#32;{
06019 &#32;&#32;&#32;&#32;&#32;&#32;std::pair&lt;const&#32;NamedDecl&#32;*,&#32;SourceLocation&gt;&#32;P&#32;=&#32;<link linkend="_namespaceclang_1_1cxcursor_1ac87835a4525ca9f54e4666e7b76ec6f6">getCursorNamespaceRef</link>(C);
06020 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;cxloc::translateSourceLocation(P.first-&gt;getASTContext(),&#32;P.second);
06021 &#32;&#32;&#32;&#32;}
06022 
06023 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_MemberRef:&#32;{
06024 &#32;&#32;&#32;&#32;&#32;&#32;std::pair&lt;const&#32;FieldDecl&#32;*,&#32;SourceLocation&gt;&#32;P&#32;=&#32;<link linkend="_namespaceclang_1_1cxcursor_1af3f3d2390bed39285f0b3313c1fab84b">getCursorMemberRef</link>(C);
06025 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;cxloc::translateSourceLocation(P.first-&gt;getASTContext(),&#32;P.second);
06026 &#32;&#32;&#32;&#32;}
06027 
06028 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_VariableRef:&#32;{
06029 &#32;&#32;&#32;&#32;&#32;&#32;std::pair&lt;const&#32;VarDecl&#32;*,&#32;SourceLocation&gt;&#32;P&#32;=&#32;<link linkend="_namespaceclang_1_1cxcursor_1a53fa4c4c92a2fbaded59ad51eeed6e47">getCursorVariableRef</link>(C);
06030 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;cxloc::translateSourceLocation(P.first-&gt;getASTContext(),&#32;P.second);
06031 &#32;&#32;&#32;&#32;}
06032 
06033 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_CXXBaseSpecifier:&#32;{
06034 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;CXXBaseSpecifier&#32;*BaseSpec&#32;=&#32;<link linkend="_namespaceclang_1_1cxcursor_1a05b387c1d9aeb75b3de539f8622e0964">getCursorCXXBaseSpecifier</link>(C);
06035 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!BaseSpec)
06036 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__c_x_source_location_8cpp_1a20bb1e9a72e2c16fbcb21958f0648947">clang_getNullLocation</link>();
06037 
06038 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(TypeSourceInfo&#32;*TSInfo&#32;=&#32;BaseSpec-&gt;getTypeSourceInfo())
06039 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;cxloc::translateSourceLocation(
06040 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespaceclang_1_1cxcursor_1a9f29c286f26b3cf616331c7e6554d373">getCursorContext</link>(C),&#32;TSInfo-&gt;getTypeLoc().getBeginLoc());
06041 
06042 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;cxloc::translateSourceLocation(<link linkend="_namespaceclang_1_1cxcursor_1a9f29c286f26b3cf616331c7e6554d373">getCursorContext</link>(C),
06043 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;BaseSpec-&gt;getBeginLoc());
06044 &#32;&#32;&#32;&#32;}
06045 
06046 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_LabelRef:&#32;{
06047 &#32;&#32;&#32;&#32;&#32;&#32;std::pair&lt;const&#32;LabelStmt&#32;*,&#32;SourceLocation&gt;&#32;P&#32;=&#32;<link linkend="_namespaceclang_1_1cxcursor_1a642e34370b829d06752d76d13c6a58dd">getCursorLabelRef</link>(C);
06048 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;cxloc::translateSourceLocation(<link linkend="_namespaceclang_1_1cxcursor_1a9f29c286f26b3cf616331c7e6554d373">getCursorContext</link>(C),&#32;P.second);
06049 &#32;&#32;&#32;&#32;}
06050 
06051 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_OverloadedDeclRef:
06052 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;cxloc::translateSourceLocation(
06053 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespaceclang_1_1cxcursor_1a9f29c286f26b3cf616331c7e6554d373">getCursorContext</link>(C),&#32;<link linkend="_namespaceclang_1_1cxcursor_1a4b41e93d6de24aed1376ec7f789efa2a">getCursorOverloadedDeclRef</link>(C).second);
06054 
06055 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">default</emphasis>:
06056 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;FIXME:&#32;Need&#32;a&#32;way&#32;to&#32;enumerate&#32;all&#32;non-reference&#32;cases.</emphasis>
06057 &#32;&#32;&#32;&#32;&#32;&#32;llvm_unreachable(<emphasis role="stringliteral">&quot;Missed&#32;a&#32;reference&#32;kind&quot;</emphasis>);
06058 &#32;&#32;&#32;&#32;}
06059 &#32;&#32;}
06060 
06061 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="__c_index_8cpp_1ab958945dd59c351e1ae1a3f7f5668095">clang_isExpression</link>(C.kind))
06062 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;cxloc::translateSourceLocation(
06063 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespaceclang_1_1cxcursor_1a9f29c286f26b3cf616331c7e6554d373">getCursorContext</link>(C),&#32;getLocationFromExpr(<link linkend="_namespaceclang_1_1cxcursor_1a80837a3710c6df0dfc24b5ee1d94ff9b">getCursorExpr</link>(C)));
06064 
06065 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="__c_index_8cpp_1af186bec30eb4cb63c3a7a295ccbcfe8b">clang_isStatement</link>(C.kind))
06066 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;cxloc::translateSourceLocation(<link linkend="_namespaceclang_1_1cxcursor_1a9f29c286f26b3cf616331c7e6554d373">getCursorContext</link>(C),
06067 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespaceclang_1_1cxcursor_1a2d5cb233204f81be58bd21deb628c7ad">getCursorStmt</link>(C)-&gt;getBeginLoc());
06068 
06069 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(C.kind&#32;==&#32;CXCursor_PreprocessingDirective)&#32;{
06070 &#32;&#32;&#32;&#32;SourceLocation&#32;L&#32;=&#32;<link linkend="_namespaceclang_1_1cxcursor_1ad23bd48471b18d4d196d9777f3943e25">cxcursor::getCursorPreprocessingDirective</link>(C).getBegin();
06071 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;cxloc::translateSourceLocation(<link linkend="_namespaceclang_1_1cxcursor_1a9f29c286f26b3cf616331c7e6554d373">getCursorContext</link>(C),&#32;L);
06072 &#32;&#32;}
06073 
06074 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(C.kind&#32;==&#32;CXCursor_MacroExpansion)&#32;{
06075 &#32;&#32;&#32;&#32;SourceLocation&#32;L&#32;=
06076 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cxcursor::getCursorMacroExpansion(C).getSourceRange().getBegin();
06077 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;cxloc::translateSourceLocation(<link linkend="_namespaceclang_1_1cxcursor_1a9f29c286f26b3cf616331c7e6554d373">getCursorContext</link>(C),&#32;L);
06078 &#32;&#32;}
06079 
06080 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(C.kind&#32;==&#32;CXCursor_MacroDefinition)&#32;{
06081 &#32;&#32;&#32;&#32;SourceLocation&#32;L&#32;=&#32;<link linkend="_namespaceclang_1_1cxcursor_1a62254c8ae8eca4c0ca0f2d2a659e7d80">cxcursor::getCursorMacroDefinition</link>(C)-&gt;getLocation();
06082 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;cxloc::translateSourceLocation(<link linkend="_namespaceclang_1_1cxcursor_1a9f29c286f26b3cf616331c7e6554d373">getCursorContext</link>(C),&#32;L);
06083 &#32;&#32;}
06084 
06085 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(C.kind&#32;==&#32;CXCursor_InclusionDirective)&#32;{
06086 &#32;&#32;&#32;&#32;SourceLocation&#32;L&#32;=
06087 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespaceclang_1_1cxcursor_1a3894d584fef6edb8ba4333fc240315ac">cxcursor::getCursorInclusionDirective</link>(C)-&gt;getSourceRange().getBegin();
06088 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;cxloc::translateSourceLocation(<link linkend="_namespaceclang_1_1cxcursor_1a9f29c286f26b3cf616331c7e6554d373">getCursorContext</link>(C),&#32;L);
06089 &#32;&#32;}
06090 
06091 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="__c_index_8cpp_1ab407667e249e0d44e6c56af84f2c28ba">clang_isAttribute</link>(C.kind))&#32;{
06092 &#32;&#32;&#32;&#32;SourceLocation&#32;L&#32;=&#32;<link linkend="_namespaceclang_1_1cxcursor_1afdc6aa952869e16b4981b07f05adff7f">cxcursor::getCursorAttr</link>(C)-&gt;getLocation();
06093 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;cxloc::translateSourceLocation(<link linkend="_namespaceclang_1_1cxcursor_1a9f29c286f26b3cf616331c7e6554d373">getCursorContext</link>(C),&#32;L);
06094 &#32;&#32;}
06095 
06096 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!<link linkend="__c_index_8cpp_1a5d47db8f608ae0c266d6551875d46b80">clang_isDeclaration</link>(C.kind))
06097 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__c_x_source_location_8cpp_1a20bb1e9a72e2c16fbcb21958f0648947">clang_getNullLocation</link>();
06098 
06099 &#32;&#32;<emphasis role="keyword">const</emphasis>&#32;Decl&#32;*D&#32;=&#32;<link linkend="_namespaceclang_1_1cxcursor_1a1f702246831c96afd990e457613dc642">getCursorDecl</link>(C);
06100 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!D)
06101 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__c_x_source_location_8cpp_1a20bb1e9a72e2c16fbcb21958f0648947">clang_getNullLocation</link>();
06102 
06103 &#32;&#32;SourceLocation&#32;Loc&#32;=&#32;D-&gt;getLocation();
06104 &#32;&#32;<emphasis role="comment">//&#32;FIXME:&#32;Multiple&#32;variables&#32;declared&#32;in&#32;a&#32;single&#32;declaration</emphasis>
06105 &#32;&#32;<emphasis role="comment">//&#32;currently&#32;lack&#32;the&#32;information&#32;needed&#32;to&#32;correctly&#32;determine&#32;their</emphasis>
06106 &#32;&#32;<emphasis role="comment">//&#32;ranges&#32;when&#32;accounting&#32;for&#32;the&#32;type-specifier.&#32;&#32;We&#32;use&#32;context</emphasis>
06107 &#32;&#32;<emphasis role="comment">//&#32;stored&#32;in&#32;the&#32;CXCursor&#32;to&#32;determine&#32;if&#32;the&#32;VarDecl&#32;is&#32;in&#32;a&#32;DeclGroup,</emphasis>
06108 &#32;&#32;<emphasis role="comment">//&#32;and&#32;if&#32;so,&#32;whether&#32;it&#32;is&#32;the&#32;first&#32;decl.</emphasis>
06109 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;VarDecl&#32;*VD&#32;=&#32;dyn_cast&lt;VarDecl&gt;(D))&#32;{
06110 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!<link linkend="_namespaceclang_1_1cxcursor_1a1ae32d54126c07eca2ab10d9ce40af7c">cxcursor::isFirstInDeclGroup</link>(C))
06111 &#32;&#32;&#32;&#32;&#32;&#32;Loc&#32;=&#32;VD-&gt;getLocation();
06112 &#32;&#32;}
06113 
06114 &#32;&#32;<emphasis role="comment">//&#32;For&#32;ObjC&#32;methods,&#32;give&#32;the&#32;start&#32;location&#32;of&#32;the&#32;method&#32;name.</emphasis>
06115 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;ObjCMethodDecl&#32;*MD&#32;=&#32;dyn_cast&lt;ObjCMethodDecl&gt;(D))
06116 &#32;&#32;&#32;&#32;Loc&#32;=&#32;MD-&gt;getSelectorStartLoc();
06117 
06118 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;cxloc::translateSourceLocation(<link linkend="_namespaceclang_1_1cxcursor_1a9f29c286f26b3cf616331c7e6554d373">getCursorContext</link>(C),&#32;Loc);
06119 }
06120 
06121 }&#32;<emphasis role="comment">//&#32;end&#32;extern&#32;&quot;C&quot;</emphasis>
06122 
<anchor xml:id="__c_index_8cpp_source_1l06123"/><link linkend="_namespaceclang_1_1cxcursor_1a17dbc7b3a465bf9e70491f77a9a4f63b">06123</link> CXCursor&#32;<link linkend="_namespaceclang_1_1cxcursor_1a17dbc7b3a465bf9e70491f77a9a4f63b">cxcursor::getCursor</link>(CXTranslationUnit&#32;TU,&#32;SourceLocation&#32;SLoc)&#32;{
06124 &#32;&#32;assert(TU);
06125 
06126 &#32;&#32;<emphasis role="comment">//&#32;Guard&#32;against&#32;an&#32;invalid&#32;SourceLocation,&#32;or&#32;we&#32;may&#32;assert&#32;in&#32;one</emphasis>
06127 &#32;&#32;<emphasis role="comment">//&#32;of&#32;the&#32;following&#32;calls.</emphasis>
06128 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(SLoc.isInvalid())
06129 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__c_index_8cpp_1aa22233466eaf91f6f3cf6b84255c3b68">clang_getNullCursor</link>();
06130 
06131 &#32;&#32;ASTUnit&#32;*CXXUnit&#32;=&#32;cxtu::getASTUnit(TU);
06132 
06133 &#32;&#32;<emphasis role="comment">//&#32;Translate&#32;the&#32;given&#32;source&#32;location&#32;to&#32;make&#32;it&#32;point&#32;at&#32;the&#32;beginning&#32;of</emphasis>
06134 &#32;&#32;<emphasis role="comment">//&#32;the&#32;token&#32;under&#32;the&#32;cursor.</emphasis>
06135 &#32;&#32;SLoc&#32;=&#32;Lexer::GetBeginningOfToken(SLoc,&#32;CXXUnit-&gt;getSourceManager(),
06136 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;CXXUnit-&gt;getASTContext().getLangOpts());
06137 
06138 &#32;&#32;CXCursor&#32;Result&#32;=&#32;<link linkend="_namespaceclang_1_1cxcursor_1aa8325b990acde766ecd9276d7d9df53a">MakeCXCursorInvalid</link>(CXCursor_NoDeclFound);
06139 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(SLoc.isValid())&#32;{
06140 &#32;&#32;&#32;&#32;<link linkend="_struct_get_cursor_data">GetCursorData</link>&#32;ResultData(CXXUnit-&gt;getSourceManager(),&#32;SLoc,&#32;Result);
06141 &#32;&#32;&#32;&#32;<link linkend="_classclang_1_1cxcursor_1_1_cursor_visitor">CursorVisitor</link>&#32;CursorVis(TU,&#32;GetCursorVisitor,&#32;&amp;ResultData,
06142 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*VisitPreprocessorLast=*/</emphasis><emphasis role="keyword">true</emphasis>,
06143 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*VisitIncludedEntities=*/</emphasis><emphasis role="keyword">false</emphasis>,
06144 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;SourceLocation(SLoc));
06145 &#32;&#32;&#32;&#32;CursorVis.<link linkend="_classclang_1_1cxcursor_1_1_cursor_visitor_1a24fbcc462d22a47ef5e7c02eef77d610">visitFileRegion</link>();
06146 &#32;&#32;}
06147 
06148 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;Result;
06149 }
06150 
06151 <emphasis role="keyword">static</emphasis>&#32;SourceRange&#32;getRawCursorExtent(CXCursor&#32;C)&#32;{
06152 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="__c_index_8cpp_1a8b03541653a9373d35919c45216bc70f">clang_isReference</link>(C.kind))&#32;{
06153 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(C.kind)&#32;{
06154 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_ObjCSuperClassRef:
06155 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxcursor_1a071683bc881399c3bcadba5a4da408b2">getCursorObjCSuperClassRef</link>(C).second;
06156 
06157 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_ObjCProtocolRef:
06158 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxcursor_1a1675d17bfec653da314fa2beff772829">getCursorObjCProtocolRef</link>(C).second;
06159 
06160 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_ObjCClassRef:
06161 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxcursor_1ad21fba4a3d5f6bdc63a19303b1cb42a3">getCursorObjCClassRef</link>(C).second;
06162 
06163 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_TypeRef:
06164 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxcursor_1ab0284c10c2cfeb2ffe43b99ec3e9dd9f">getCursorTypeRef</link>(C).second;
06165 
06166 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_TemplateRef:
06167 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxcursor_1aacf77fc4aabf02cfa865e6fe19e55d08">getCursorTemplateRef</link>(C).second;
06168 
06169 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_NamespaceRef:
06170 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxcursor_1ac87835a4525ca9f54e4666e7b76ec6f6">getCursorNamespaceRef</link>(C).second;
06171 
06172 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_MemberRef:
06173 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxcursor_1af3f3d2390bed39285f0b3313c1fab84b">getCursorMemberRef</link>(C).second;
06174 
06175 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_CXXBaseSpecifier:
06176 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxcursor_1a05b387c1d9aeb75b3de539f8622e0964">getCursorCXXBaseSpecifier</link>(C)-&gt;getSourceRange();
06177 
06178 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_LabelRef:
06179 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxcursor_1a642e34370b829d06752d76d13c6a58dd">getCursorLabelRef</link>(C).second;
06180 
06181 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_OverloadedDeclRef:
06182 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxcursor_1a4b41e93d6de24aed1376ec7f789efa2a">getCursorOverloadedDeclRef</link>(C).second;
06183 
06184 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_VariableRef:
06185 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxcursor_1a53fa4c4c92a2fbaded59ad51eeed6e47">getCursorVariableRef</link>(C).second;
06186 
06187 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">default</emphasis>:
06188 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;FIXME:&#32;Need&#32;a&#32;way&#32;to&#32;enumerate&#32;all&#32;non-reference&#32;cases.</emphasis>
06189 &#32;&#32;&#32;&#32;&#32;&#32;llvm_unreachable(<emphasis role="stringliteral">&quot;Missed&#32;a&#32;reference&#32;kind&quot;</emphasis>);
06190 &#32;&#32;&#32;&#32;}
06191 &#32;&#32;}
06192 
06193 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="__c_index_8cpp_1ab958945dd59c351e1ae1a3f7f5668095">clang_isExpression</link>(C.kind))
06194 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxcursor_1a80837a3710c6df0dfc24b5ee1d94ff9b">getCursorExpr</link>(C)-&gt;getSourceRange();
06195 
06196 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="__c_index_8cpp_1af186bec30eb4cb63c3a7a295ccbcfe8b">clang_isStatement</link>(C.kind))
06197 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxcursor_1a2d5cb233204f81be58bd21deb628c7ad">getCursorStmt</link>(C)-&gt;getSourceRange();
06198 
06199 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="__c_index_8cpp_1ab407667e249e0d44e6c56af84f2c28ba">clang_isAttribute</link>(C.kind))
06200 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxcursor_1afdc6aa952869e16b4981b07f05adff7f">getCursorAttr</link>(C)-&gt;getRange();
06201 
06202 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(C.kind&#32;==&#32;CXCursor_PreprocessingDirective)
06203 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxcursor_1ad23bd48471b18d4d196d9777f3943e25">cxcursor::getCursorPreprocessingDirective</link>(C);
06204 
06205 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(C.kind&#32;==&#32;CXCursor_MacroExpansion)&#32;{
06206 &#32;&#32;&#32;&#32;ASTUnit&#32;*TU&#32;=&#32;<link linkend="_namespaceclang_1_1cxcursor_1a68c106f7bebde4f72b0fe7f6f67e8f29">getCursorASTUnit</link>(C);
06207 &#32;&#32;&#32;&#32;SourceRange&#32;Range&#32;=&#32;cxcursor::getCursorMacroExpansion(C).getSourceRange();
06208 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;TU-&gt;mapRangeFromPreamble(Range);
06209 &#32;&#32;}
06210 
06211 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(C.kind&#32;==&#32;CXCursor_MacroDefinition)&#32;{
06212 &#32;&#32;&#32;&#32;ASTUnit&#32;*TU&#32;=&#32;<link linkend="_namespaceclang_1_1cxcursor_1a68c106f7bebde4f72b0fe7f6f67e8f29">getCursorASTUnit</link>(C);
06213 &#32;&#32;&#32;&#32;SourceRange&#32;Range&#32;=&#32;<link linkend="_namespaceclang_1_1cxcursor_1a62254c8ae8eca4c0ca0f2d2a659e7d80">cxcursor::getCursorMacroDefinition</link>(C)-&gt;getSourceRange();
06214 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;TU-&gt;mapRangeFromPreamble(Range);
06215 &#32;&#32;}
06216 
06217 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(C.kind&#32;==&#32;CXCursor_InclusionDirective)&#32;{
06218 &#32;&#32;&#32;&#32;ASTUnit&#32;*TU&#32;=&#32;<link linkend="_namespaceclang_1_1cxcursor_1a68c106f7bebde4f72b0fe7f6f67e8f29">getCursorASTUnit</link>(C);
06219 &#32;&#32;&#32;&#32;SourceRange&#32;Range&#32;=
06220 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespaceclang_1_1cxcursor_1a3894d584fef6edb8ba4333fc240315ac">cxcursor::getCursorInclusionDirective</link>(C)-&gt;getSourceRange();
06221 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;TU-&gt;mapRangeFromPreamble(Range);
06222 &#32;&#32;}
06223 
06224 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(C.kind&#32;==&#32;CXCursor_TranslationUnit)&#32;{
06225 &#32;&#32;&#32;&#32;ASTUnit&#32;*TU&#32;=&#32;<link linkend="_namespaceclang_1_1cxcursor_1a68c106f7bebde4f72b0fe7f6f67e8f29">getCursorASTUnit</link>(C);
06226 &#32;&#32;&#32;&#32;FileID&#32;MainID&#32;=&#32;TU-&gt;getSourceManager().getMainFileID();
06227 &#32;&#32;&#32;&#32;SourceLocation&#32;Start&#32;=&#32;TU-&gt;getSourceManager().getLocForStartOfFile(MainID);
06228 &#32;&#32;&#32;&#32;SourceLocation&#32;End&#32;=&#32;TU-&gt;getSourceManager().getLocForEndOfFile(MainID);
06229 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;SourceRange(Start,&#32;End);
06230 &#32;&#32;}
06231 
06232 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="__c_index_8cpp_1a5d47db8f608ae0c266d6551875d46b80">clang_isDeclaration</link>(C.kind))&#32;{
06233 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;Decl&#32;*D&#32;=&#32;<link linkend="_namespaceclang_1_1cxcursor_1a1f702246831c96afd990e457613dc642">cxcursor::getCursorDecl</link>(C);
06234 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!D)
06235 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;SourceRange();
06236 
06237 &#32;&#32;&#32;&#32;SourceRange&#32;R&#32;=&#32;D-&gt;getSourceRange();
06238 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;FIXME:&#32;Multiple&#32;variables&#32;declared&#32;in&#32;a&#32;single&#32;declaration</emphasis>
06239 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;currently&#32;lack&#32;the&#32;information&#32;needed&#32;to&#32;correctly&#32;determine&#32;their</emphasis>
06240 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;ranges&#32;when&#32;accounting&#32;for&#32;the&#32;type-specifier.&#32;&#32;We&#32;use&#32;context</emphasis>
06241 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;stored&#32;in&#32;the&#32;CXCursor&#32;to&#32;determine&#32;if&#32;the&#32;VarDecl&#32;is&#32;in&#32;a&#32;DeclGroup,</emphasis>
06242 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;and&#32;if&#32;so,&#32;whether&#32;it&#32;is&#32;the&#32;first&#32;decl.</emphasis>
06243 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;VarDecl&#32;*VD&#32;=&#32;dyn_cast&lt;VarDecl&gt;(D))&#32;{
06244 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!<link linkend="_namespaceclang_1_1cxcursor_1a1ae32d54126c07eca2ab10d9ce40af7c">cxcursor::isFirstInDeclGroup</link>(C))
06245 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;R.setBegin(VD-&gt;getLocation());
06246 &#32;&#32;&#32;&#32;}
06247 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;R;
06248 &#32;&#32;}
06249 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;SourceRange();
06250 }
06251 
06254 <emphasis role="keyword">static</emphasis>&#32;SourceRange&#32;getFullCursorExtent(CXCursor&#32;C,&#32;SourceManager&#32;&amp;SrcMgr)&#32;{
06255 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="__c_index_8cpp_1a5d47db8f608ae0c266d6551875d46b80">clang_isDeclaration</link>(C.kind))&#32;{
06256 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;Decl&#32;*D&#32;=&#32;<link linkend="_namespaceclang_1_1cxcursor_1a1f702246831c96afd990e457613dc642">cxcursor::getCursorDecl</link>(C);
06257 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!D)
06258 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;SourceRange();
06259 
06260 &#32;&#32;&#32;&#32;SourceRange&#32;R&#32;=&#32;D-&gt;getSourceRange();
06261 
06262 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Adjust&#32;the&#32;start&#32;of&#32;the&#32;location&#32;for&#32;declarations&#32;preceded&#32;by</emphasis>
06263 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;declaration&#32;specifiers.</emphasis>
06264 &#32;&#32;&#32;&#32;SourceLocation&#32;StartLoc;
06265 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;DeclaratorDecl&#32;*DD&#32;=&#32;dyn_cast&lt;DeclaratorDecl&gt;(D))&#32;{
06266 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(TypeSourceInfo&#32;*TI&#32;=&#32;DD-&gt;getTypeSourceInfo())
06267 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;StartLoc&#32;=&#32;TI-&gt;getTypeLoc().getBeginLoc();
06268 &#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;TypedefDecl&#32;*Typedef&#32;=&#32;dyn_cast&lt;TypedefDecl&gt;(D))&#32;{
06269 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(TypeSourceInfo&#32;*TI&#32;=&#32;Typedef-&gt;getTypeSourceInfo())
06270 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;StartLoc&#32;=&#32;TI-&gt;getTypeLoc().getBeginLoc();
06271 &#32;&#32;&#32;&#32;}
06272 
06273 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(StartLoc.isValid()&#32;&amp;&amp;&#32;R.getBegin().isValid()&#32;&amp;&amp;
06274 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;SrcMgr.isBeforeInTranslationUnit(StartLoc,&#32;R.getBegin()))
06275 &#32;&#32;&#32;&#32;&#32;&#32;R.setBegin(StartLoc);
06276 
06277 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;FIXME:&#32;Multiple&#32;variables&#32;declared&#32;in&#32;a&#32;single&#32;declaration</emphasis>
06278 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;currently&#32;lack&#32;the&#32;information&#32;needed&#32;to&#32;correctly&#32;determine&#32;their</emphasis>
06279 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;ranges&#32;when&#32;accounting&#32;for&#32;the&#32;type-specifier.&#32;&#32;We&#32;use&#32;context</emphasis>
06280 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;stored&#32;in&#32;the&#32;CXCursor&#32;to&#32;determine&#32;if&#32;the&#32;VarDecl&#32;is&#32;in&#32;a&#32;DeclGroup,</emphasis>
06281 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;and&#32;if&#32;so,&#32;whether&#32;it&#32;is&#32;the&#32;first&#32;decl.</emphasis>
06282 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;VarDecl&#32;*VD&#32;=&#32;dyn_cast&lt;VarDecl&gt;(D))&#32;{
06283 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!<link linkend="_namespaceclang_1_1cxcursor_1a1ae32d54126c07eca2ab10d9ce40af7c">cxcursor::isFirstInDeclGroup</link>(C))
06284 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;R.setBegin(VD-&gt;getLocation());
06285 &#32;&#32;&#32;&#32;}
06286 
06287 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;R;
06288 &#32;&#32;}
06289 
06290 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;getRawCursorExtent(C);
06291 }
06292 
<anchor xml:id="__c_index_8cpp_source_1l06293"/><link linkend="__c_index_8cpp_1ac535682dfe6658513121c4cf6d4b4076">06293</link> CXSourceRange&#32;<link linkend="__c_index_8cpp_1ac535682dfe6658513121c4cf6d4b4076">clang_getCursorExtent</link>(CXCursor&#32;C)&#32;{
06294 &#32;&#32;SourceRange&#32;R&#32;=&#32;getRawCursorExtent(C);
06295 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(R.isInvalid())
06296 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__c_x_source_location_8cpp_1afadb1a95ce51366407cf6c363299a17f">clang_getNullRange</link>();
06297 
06298 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxloc_1a39d02b462b1f3233518f01951d83d035">cxloc::translateSourceRange</link>(<link linkend="_namespaceclang_1_1cxcursor_1a9f29c286f26b3cf616331c7e6554d373">getCursorContext</link>(C),&#32;R);
06299 }
06300 
<anchor xml:id="__c_index_8cpp_source_1l06301"/><link linkend="__c_index_8cpp_1ab26fc466345d015d7f9d418080166dc7">06301</link> CXCursor&#32;<link linkend="__c_index_8cpp_1ab26fc466345d015d7f9d418080166dc7">clang_getCursorReferenced</link>(CXCursor&#32;C)&#32;{
06302 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="__c_index_8cpp_1a0c5b391d8bca745084fb8906cce6f66c">clang_isInvalid</link>(C.kind))
06303 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__c_index_8cpp_1aa22233466eaf91f6f3cf6b84255c3b68">clang_getNullCursor</link>();
06304 
06305 &#32;&#32;CXTranslationUnit&#32;tu&#32;=&#32;<link linkend="_namespaceclang_1_1cxcursor_1a23a495df22339e8289ae6d2421f493b6">getCursorTU</link>(C);
06306 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="__c_index_8cpp_1a5d47db8f608ae0c266d6551875d46b80">clang_isDeclaration</link>(C.kind))&#32;{
06307 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;Decl&#32;*D&#32;=&#32;<link linkend="_namespaceclang_1_1cxcursor_1a1f702246831c96afd990e457613dc642">getCursorDecl</link>(C);
06308 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!D)
06309 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__c_index_8cpp_1aa22233466eaf91f6f3cf6b84255c3b68">clang_getNullCursor</link>();
06310 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;UsingDecl&#32;*Using&#32;=&#32;dyn_cast&lt;UsingDecl&gt;(D))
06311 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxcursor_1a631225e024301b99cc72be73f0ee9271">MakeCursorOverloadedDeclRef</link>(Using,&#32;D-&gt;getLocation(),&#32;tu);
06312 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;ObjCPropertyImplDecl&#32;*PropImpl&#32;=
06313 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;dyn_cast&lt;ObjCPropertyImplDecl&gt;(D))
06314 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(ObjCPropertyDecl&#32;*Property&#32;=&#32;PropImpl-&gt;getPropertyDecl())
06315 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxcursor_1ab61ec2059175833672e8e78a376bb218">MakeCXCursor</link>(Property,&#32;tu);
06316 
06317 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;C;
06318 &#32;&#32;}
06319 
06320 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="__c_index_8cpp_1ab958945dd59c351e1ae1a3f7f5668095">clang_isExpression</link>(C.kind))&#32;{
06321 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;Expr&#32;*E&#32;=&#32;<link linkend="_namespaceclang_1_1cxcursor_1a80837a3710c6df0dfc24b5ee1d94ff9b">getCursorExpr</link>(C);
06322 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;Decl&#32;*D&#32;=&#32;getDeclFromExpr(E);
06323 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(D)&#32;{
06324 &#32;&#32;&#32;&#32;&#32;&#32;CXCursor&#32;declCursor&#32;=&#32;<link linkend="_namespaceclang_1_1cxcursor_1ab61ec2059175833672e8e78a376bb218">MakeCXCursor</link>(D,&#32;tu);
06325 &#32;&#32;&#32;&#32;&#32;&#32;declCursor&#32;=&#32;<link linkend="_namespaceclang_1_1cxcursor_1a3fd86e25b3fca940466669d13b0ea93e">getSelectorIdentifierCursor</link>(getSelectorIdentifierIndex(C),
06326 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;declCursor);
06327 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;declCursor;
06328 &#32;&#32;&#32;&#32;}
06329 
06330 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;OverloadExpr&#32;*Ovl&#32;=&#32;dyn_cast_or_null&lt;OverloadExpr&gt;(E))
06331 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxcursor_1a631225e024301b99cc72be73f0ee9271">MakeCursorOverloadedDeclRef</link>(Ovl,&#32;tu);
06332 
06333 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__c_index_8cpp_1aa22233466eaf91f6f3cf6b84255c3b68">clang_getNullCursor</link>();
06334 &#32;&#32;}
06335 
06336 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="__c_index_8cpp_1af186bec30eb4cb63c3a7a295ccbcfe8b">clang_isStatement</link>(C.kind))&#32;{
06337 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;Stmt&#32;*S&#32;=&#32;<link linkend="_namespaceclang_1_1cxcursor_1a2d5cb233204f81be58bd21deb628c7ad">getCursorStmt</link>(C);
06338 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;GotoStmt&#32;*Goto&#32;=&#32;dyn_cast_or_null&lt;GotoStmt&gt;(S))
06339 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(LabelDecl&#32;*label&#32;=&#32;Goto-&gt;getLabel())
06340 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(LabelStmt&#32;*labelS&#32;=&#32;label-&gt;getStmt())
06341 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxcursor_1ab61ec2059175833672e8e78a376bb218">MakeCXCursor</link>(labelS,&#32;<link linkend="_namespaceclang_1_1cxcursor_1a1f702246831c96afd990e457613dc642">getCursorDecl</link>(C),&#32;tu);
06342 
06343 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__c_index_8cpp_1aa22233466eaf91f6f3cf6b84255c3b68">clang_getNullCursor</link>();
06344 &#32;&#32;}
06345 
06346 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(C.kind&#32;==&#32;CXCursor_MacroExpansion)&#32;{
06347 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;MacroDefinitionRecord&#32;*Def&#32;=
06348 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;getCursorMacroExpansion(C).getDefinition())
06349 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxcursor_1a62e05b7f28b894bf90226918a8f3386a">MakeMacroDefinitionCursor</link>(Def,&#32;tu);
06350 &#32;&#32;}
06351 
06352 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!<link linkend="__c_index_8cpp_1a8b03541653a9373d35919c45216bc70f">clang_isReference</link>(C.kind))
06353 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__c_index_8cpp_1aa22233466eaf91f6f3cf6b84255c3b68">clang_getNullCursor</link>();
06354 
06355 &#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(C.kind)&#32;{
06356 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_ObjCSuperClassRef:
06357 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxcursor_1ab61ec2059175833672e8e78a376bb218">MakeCXCursor</link>(<link linkend="_namespaceclang_1_1cxcursor_1a071683bc881399c3bcadba5a4da408b2">getCursorObjCSuperClassRef</link>(C).first,&#32;tu);
06358 
06359 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_ObjCProtocolRef:&#32;{
06360 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;ObjCProtocolDecl&#32;*Prot&#32;=&#32;<link linkend="_namespaceclang_1_1cxcursor_1a1675d17bfec653da314fa2beff772829">getCursorObjCProtocolRef</link>(C).first;
06361 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;ObjCProtocolDecl&#32;*Def&#32;=&#32;Prot-&gt;getDefinition())
06362 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxcursor_1ab61ec2059175833672e8e78a376bb218">MakeCXCursor</link>(Def,&#32;tu);
06363 
06364 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxcursor_1ab61ec2059175833672e8e78a376bb218">MakeCXCursor</link>(Prot,&#32;tu);
06365 &#32;&#32;}
06366 
06367 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_ObjCClassRef:&#32;{
06368 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;ObjCInterfaceDecl&#32;*Class&#32;=&#32;<link linkend="_namespaceclang_1_1cxcursor_1ad21fba4a3d5f6bdc63a19303b1cb42a3">getCursorObjCClassRef</link>(C).first;
06369 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;ObjCInterfaceDecl&#32;*Def&#32;=&#32;Class-&gt;getDefinition())
06370 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxcursor_1ab61ec2059175833672e8e78a376bb218">MakeCXCursor</link>(Def,&#32;tu);
06371 
06372 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxcursor_1ab61ec2059175833672e8e78a376bb218">MakeCXCursor</link>(Class,&#32;tu);
06373 &#32;&#32;}
06374 
06375 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_TypeRef:
06376 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxcursor_1ab61ec2059175833672e8e78a376bb218">MakeCXCursor</link>(<link linkend="_namespaceclang_1_1cxcursor_1ab0284c10c2cfeb2ffe43b99ec3e9dd9f">getCursorTypeRef</link>(C).first,&#32;tu);
06377 
06378 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_TemplateRef:
06379 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxcursor_1ab61ec2059175833672e8e78a376bb218">MakeCXCursor</link>(<link linkend="_namespaceclang_1_1cxcursor_1aacf77fc4aabf02cfa865e6fe19e55d08">getCursorTemplateRef</link>(C).first,&#32;tu);
06380 
06381 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_NamespaceRef:
06382 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxcursor_1ab61ec2059175833672e8e78a376bb218">MakeCXCursor</link>(<link linkend="_namespaceclang_1_1cxcursor_1ac87835a4525ca9f54e4666e7b76ec6f6">getCursorNamespaceRef</link>(C).first,&#32;tu);
06383 
06384 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_MemberRef:
06385 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxcursor_1ab61ec2059175833672e8e78a376bb218">MakeCXCursor</link>(<link linkend="_namespaceclang_1_1cxcursor_1af3f3d2390bed39285f0b3313c1fab84b">getCursorMemberRef</link>(C).first,&#32;tu);
06386 
06387 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_CXXBaseSpecifier:&#32;{
06388 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;CXXBaseSpecifier&#32;*B&#32;=&#32;<link linkend="_namespaceclang_1_1cxcursor_1a05b387c1d9aeb75b3de539f8622e0964">cxcursor::getCursorCXXBaseSpecifier</link>(C);
06389 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__c_x_type_8cpp_1af7b6b47bb98865b91a02e148f87062a2">clang_getTypeDeclaration</link>(<link linkend="_namespaceclang_1_1cxtype_1afab44f51bd657249b6dcf6476c6b6b98">cxtype::MakeCXType</link>(B-&gt;getType(),&#32;tu));
06390 &#32;&#32;}
06391 
06392 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_LabelRef:
06393 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;FIXME:&#32;We&#32;end&#32;up&#32;faking&#32;the&#32;&quot;parent&quot;&#32;declaration&#32;here&#32;because&#32;we</emphasis>
06394 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;don&apos;t&#32;want&#32;to&#32;make&#32;CXCursor&#32;larger.</emphasis>
06395 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxcursor_1ab61ec2059175833672e8e78a376bb218">MakeCXCursor</link>(
06396 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespaceclang_1_1cxcursor_1a642e34370b829d06752d76d13c6a58dd">getCursorLabelRef</link>(C).first,
06397 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cxtu::getASTUnit(tu)-&gt;getASTContext().getTranslationUnitDecl(),&#32;tu);
06398 
06399 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_OverloadedDeclRef:
06400 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;C;
06401 
06402 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_VariableRef:
06403 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxcursor_1ab61ec2059175833672e8e78a376bb218">MakeCXCursor</link>(<link linkend="_namespaceclang_1_1cxcursor_1a53fa4c4c92a2fbaded59ad51eeed6e47">getCursorVariableRef</link>(C).first,&#32;tu);
06404 
06405 &#32;&#32;<emphasis role="keywordflow">default</emphasis>:
06406 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;We&#32;would&#32;prefer&#32;to&#32;enumerate&#32;all&#32;non-reference&#32;cursor&#32;kinds&#32;here.</emphasis>
06407 &#32;&#32;&#32;&#32;llvm_unreachable(<emphasis role="stringliteral">&quot;Unhandled&#32;reference&#32;cursor&#32;kind&quot;</emphasis>);
06408 &#32;&#32;}
06409 }
06410 
<anchor xml:id="__c_index_8cpp_source_1l06411"/><link linkend="__c_index_8cpp_1a090e42b940779ab0c437188858f24dfb">06411</link> CXCursor&#32;<link linkend="__c_index_8cpp_1a090e42b940779ab0c437188858f24dfb">clang_getCursorDefinition</link>(CXCursor&#32;C)&#32;{
06412 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="__c_index_8cpp_1a0c5b391d8bca745084fb8906cce6f66c">clang_isInvalid</link>(C.kind))
06413 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__c_index_8cpp_1aa22233466eaf91f6f3cf6b84255c3b68">clang_getNullCursor</link>();
06414 
06415 &#32;&#32;CXTranslationUnit&#32;TU&#32;=&#32;<link linkend="_namespaceclang_1_1cxcursor_1a23a495df22339e8289ae6d2421f493b6">getCursorTU</link>(C);
06416 
06417 &#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;WasReference&#32;=&#32;<emphasis role="keyword">false</emphasis>;
06418 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="__c_index_8cpp_1a8b03541653a9373d35919c45216bc70f">clang_isReference</link>(C.kind)&#32;||&#32;<link linkend="__c_index_8cpp_1ab958945dd59c351e1ae1a3f7f5668095">clang_isExpression</link>(C.kind))&#32;{
06419 &#32;&#32;&#32;&#32;C&#32;=&#32;<link linkend="__c_index_8cpp_1ab26fc466345d015d7f9d418080166dc7">clang_getCursorReferenced</link>(C);
06420 &#32;&#32;&#32;&#32;WasReference&#32;=&#32;<emphasis role="keyword">true</emphasis>;
06421 &#32;&#32;}
06422 
06423 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(C.kind&#32;==&#32;CXCursor_MacroExpansion)
06424 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__c_index_8cpp_1ab26fc466345d015d7f9d418080166dc7">clang_getCursorReferenced</link>(C);
06425 
06426 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!<link linkend="__c_index_8cpp_1a5d47db8f608ae0c266d6551875d46b80">clang_isDeclaration</link>(C.kind))
06427 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__c_index_8cpp_1aa22233466eaf91f6f3cf6b84255c3b68">clang_getNullCursor</link>();
06428 
06429 &#32;&#32;<emphasis role="keyword">const</emphasis>&#32;Decl&#32;*D&#32;=&#32;<link linkend="_namespaceclang_1_1cxcursor_1a1f702246831c96afd990e457613dc642">getCursorDecl</link>(C);
06430 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!D)
06431 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__c_index_8cpp_1aa22233466eaf91f6f3cf6b84255c3b68">clang_getNullCursor</link>();
06432 
06433 &#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(D-&gt;getKind())&#32;{
06434 &#32;&#32;<emphasis role="comment">//&#32;Declaration&#32;kinds&#32;that&#32;don&apos;t&#32;really&#32;separate&#32;the&#32;notions&#32;of</emphasis>
06435 &#32;&#32;<emphasis role="comment">//&#32;declaration&#32;and&#32;definition.</emphasis>
06436 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;Decl::Namespace:
06437 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;Decl::Typedef:
06438 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;Decl::TypeAlias:
06439 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;Decl::TypeAliasTemplate:
06440 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;Decl::TemplateTypeParm:
06441 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;Decl::EnumConstant:
06442 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;Decl::Field:
06443 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;Decl::Binding:
06444 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;Decl::MSProperty:
06445 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;Decl::MSGuid:
06446 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;Decl::TemplateParamObject:
06447 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;Decl::IndirectField:
06448 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;Decl::ObjCIvar:
06449 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;Decl::ObjCAtDefsField:
06450 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;Decl::ImplicitParam:
06451 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;Decl::ParmVar:
06452 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;Decl::NonTypeTemplateParm:
06453 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;Decl::TemplateTemplateParm:
06454 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;Decl::ObjCCategoryImpl:
06455 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;Decl::ObjCImplementation:
06456 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;Decl::AccessSpec:
06457 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;Decl::LinkageSpec:
06458 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;Decl::Export:
06459 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;Decl::ObjCPropertyImpl:
06460 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;Decl::FileScopeAsm:
06461 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;Decl::StaticAssert:
06462 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;Decl::Block:
06463 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;Decl::Captured:
06464 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;Decl::OMPCapturedExpr:
06465 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;Decl::Label:&#32;<emphasis role="comment">//&#32;FIXME:&#32;Is&#32;this&#32;right??</emphasis>
06466 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;Decl::ClassScopeFunctionSpecialization:
06467 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;Decl::CXXDeductionGuide:
06468 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;Decl::Import:
06469 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;Decl::OMPThreadPrivate:
06470 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;Decl::OMPAllocate:
06471 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;Decl::OMPDeclareReduction:
06472 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;Decl::OMPDeclareMapper:
06473 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;Decl::OMPRequires:
06474 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;Decl::ObjCTypeParam:
06475 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;Decl::BuiltinTemplate:
06476 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;Decl::PragmaComment:
06477 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;Decl::PragmaDetectMismatch:
06478 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;Decl::UsingPack:
06479 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;Decl::Concept:
06480 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;Decl::LifetimeExtendedTemporary:
06481 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;Decl::RequiresExprBody:
06482 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;Decl::UnresolvedUsingIfExists:
06483 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;C;
06484 
06485 &#32;&#32;<emphasis role="comment">//&#32;Declaration&#32;kinds&#32;that&#32;don&apos;t&#32;make&#32;any&#32;sense&#32;here,&#32;but&#32;are</emphasis>
06486 &#32;&#32;<emphasis role="comment">//&#32;nonetheless&#32;harmless.</emphasis>
06487 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;Decl::Empty:
06488 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;Decl::TranslationUnit:
06489 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;Decl::ExternCContext:
06490 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
06491 
06492 &#32;&#32;<emphasis role="comment">//&#32;Declaration&#32;kinds&#32;for&#32;which&#32;the&#32;definition&#32;is&#32;not&#32;resolvable.</emphasis>
06493 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;Decl::UnresolvedUsingTypename:
06494 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;Decl::UnresolvedUsingValue:
06495 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
06496 
06497 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;Decl::UsingDirective:
06498 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxcursor_1ab61ec2059175833672e8e78a376bb218">MakeCXCursor</link>(cast&lt;UsingDirectiveDecl&gt;(D)-&gt;getNominatedNamespace(),
06499 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;TU);
06500 
06501 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;Decl::NamespaceAlias:
06502 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxcursor_1ab61ec2059175833672e8e78a376bb218">MakeCXCursor</link>(cast&lt;NamespaceAliasDecl&gt;(D)-&gt;getNamespace(),&#32;TU);
06503 
06504 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;Decl::Enum:
06505 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;Decl::Record:
06506 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;Decl::CXXRecord:
06507 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;Decl::ClassTemplateSpecialization:
06508 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;Decl::ClassTemplatePartialSpecialization:
06509 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(TagDecl&#32;*Def&#32;=&#32;cast&lt;TagDecl&gt;(D)-&gt;getDefinition())
06510 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxcursor_1ab61ec2059175833672e8e78a376bb218">MakeCXCursor</link>(Def,&#32;TU);
06511 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__c_index_8cpp_1aa22233466eaf91f6f3cf6b84255c3b68">clang_getNullCursor</link>();
06512 
06513 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;Decl::Function:
06514 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;Decl::CXXMethod:
06515 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;Decl::CXXConstructor:
06516 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;Decl::CXXDestructor:
06517 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;Decl::CXXConversion:&#32;{
06518 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;FunctionDecl&#32;*Def&#32;=&#32;<emphasis role="keyword">nullptr</emphasis>;
06519 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(cast&lt;FunctionDecl&gt;(D)-&gt;getBody(Def))
06520 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxcursor_1ab61ec2059175833672e8e78a376bb218">MakeCXCursor</link>(Def,&#32;TU);
06521 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__c_index_8cpp_1aa22233466eaf91f6f3cf6b84255c3b68">clang_getNullCursor</link>();
06522 &#32;&#32;}
06523 
06524 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;Decl::Var:
06525 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;Decl::VarTemplateSpecialization:
06526 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;Decl::VarTemplatePartialSpecialization:
06527 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;Decl::Decomposition:&#32;{
06528 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Ask&#32;the&#32;variable&#32;if&#32;it&#32;has&#32;a&#32;definition.</emphasis>
06529 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;VarDecl&#32;*Def&#32;=&#32;cast&lt;VarDecl&gt;(D)-&gt;getDefinition())
06530 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxcursor_1ab61ec2059175833672e8e78a376bb218">MakeCXCursor</link>(Def,&#32;TU);
06531 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__c_index_8cpp_1aa22233466eaf91f6f3cf6b84255c3b68">clang_getNullCursor</link>();
06532 &#32;&#32;}
06533 
06534 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;Decl::FunctionTemplate:&#32;{
06535 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;FunctionDecl&#32;*Def&#32;=&#32;<emphasis role="keyword">nullptr</emphasis>;
06536 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(cast&lt;FunctionTemplateDecl&gt;(D)-&gt;getTemplatedDecl()-&gt;getBody(Def))
06537 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxcursor_1ab61ec2059175833672e8e78a376bb218">MakeCXCursor</link>(Def-&gt;getDescribedFunctionTemplate(),&#32;TU);
06538 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__c_index_8cpp_1aa22233466eaf91f6f3cf6b84255c3b68">clang_getNullCursor</link>();
06539 &#32;&#32;}
06540 
06541 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;Decl::ClassTemplate:&#32;{
06542 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(RecordDecl&#32;*Def&#32;=
06543 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cast&lt;ClassTemplateDecl&gt;(D)-&gt;getTemplatedDecl()-&gt;getDefinition())
06544 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxcursor_1ab61ec2059175833672e8e78a376bb218">MakeCXCursor</link>(cast&lt;CXXRecordDecl&gt;(Def)-&gt;getDescribedClassTemplate(),
06545 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;TU);
06546 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__c_index_8cpp_1aa22233466eaf91f6f3cf6b84255c3b68">clang_getNullCursor</link>();
06547 &#32;&#32;}
06548 
06549 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;Decl::VarTemplate:&#32;{
06550 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(VarDecl&#32;*Def&#32;=
06551 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cast&lt;VarTemplateDecl&gt;(D)-&gt;getTemplatedDecl()-&gt;getDefinition())
06552 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxcursor_1ab61ec2059175833672e8e78a376bb218">MakeCXCursor</link>(cast&lt;VarDecl&gt;(Def)-&gt;getDescribedVarTemplate(),&#32;TU);
06553 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__c_index_8cpp_1aa22233466eaf91f6f3cf6b84255c3b68">clang_getNullCursor</link>();
06554 &#32;&#32;}
06555 
06556 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;Decl::Using:
06557 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;Decl::UsingEnum:
06558 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxcursor_1a631225e024301b99cc72be73f0ee9271">MakeCursorOverloadedDeclRef</link>(cast&lt;BaseUsingDecl&gt;(D),&#32;D-&gt;getLocation(),
06559 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;TU);
06560 
06561 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;Decl::UsingShadow:
06562 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;Decl::ConstructorUsingShadow:
06563 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__c_index_8cpp_1a090e42b940779ab0c437188858f24dfb">clang_getCursorDefinition</link>(
06564 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespaceclang_1_1cxcursor_1ab61ec2059175833672e8e78a376bb218">MakeCXCursor</link>(cast&lt;UsingShadowDecl&gt;(D)-&gt;getTargetDecl(),&#32;TU));
06565 
06566 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;Decl::ObjCMethod:&#32;{
06567 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;ObjCMethodDecl&#32;*Method&#32;=&#32;cast&lt;ObjCMethodDecl&gt;(D);
06568 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(Method-&gt;isThisDeclarationADefinition())
06569 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;C;
06570 
06571 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Dig&#32;out&#32;the&#32;method&#32;definition&#32;in&#32;the&#32;associated</emphasis>
06572 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;@implementation,&#32;if&#32;we&#32;have&#32;it.</emphasis>
06573 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;FIXME:&#32;The&#32;ASTs&#32;should&#32;make&#32;finding&#32;the&#32;definition&#32;easier.</emphasis>
06574 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;ObjCInterfaceDecl&#32;*Class&#32;=
06575 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;dyn_cast&lt;ObjCInterfaceDecl&gt;(Method-&gt;getDeclContext()))
06576 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(ObjCImplementationDecl&#32;*ClassImpl&#32;=&#32;Class-&gt;getImplementation())
06577 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(ObjCMethodDecl&#32;*Def&#32;=&#32;ClassImpl-&gt;getMethod(
06578 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Method-&gt;getSelector(),&#32;Method-&gt;isInstanceMethod()))
06579 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(Def-&gt;isThisDeclarationADefinition())
06580 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxcursor_1ab61ec2059175833672e8e78a376bb218">MakeCXCursor</link>(Def,&#32;TU);
06581 
06582 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__c_index_8cpp_1aa22233466eaf91f6f3cf6b84255c3b68">clang_getNullCursor</link>();
06583 &#32;&#32;}
06584 
06585 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;Decl::ObjCCategory:
06586 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(ObjCCategoryImplDecl&#32;*Impl&#32;=
06587 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cast&lt;ObjCCategoryDecl&gt;(D)-&gt;getImplementation())
06588 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxcursor_1ab61ec2059175833672e8e78a376bb218">MakeCXCursor</link>(Impl,&#32;TU);
06589 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__c_index_8cpp_1aa22233466eaf91f6f3cf6b84255c3b68">clang_getNullCursor</link>();
06590 
06591 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;Decl::ObjCProtocol:
06592 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;ObjCProtocolDecl&#32;*Def&#32;=
06593 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cast&lt;ObjCProtocolDecl&gt;(D)-&gt;getDefinition())
06594 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxcursor_1ab61ec2059175833672e8e78a376bb218">MakeCXCursor</link>(Def,&#32;TU);
06595 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__c_index_8cpp_1aa22233466eaf91f6f3cf6b84255c3b68">clang_getNullCursor</link>();
06596 
06597 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;Decl::ObjCInterface:&#32;{
06598 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;There&#32;are&#32;two&#32;notions&#32;of&#32;a&#32;&quot;definition&quot;&#32;for&#32;an&#32;Objective-C</emphasis>
06599 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;class:&#32;the&#32;interface&#32;and&#32;its&#32;implementation.&#32;When&#32;we&#32;resolved&#32;a</emphasis>
06600 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;reference&#32;to&#32;an&#32;Objective-C&#32;class,&#32;produce&#32;the&#32;@interface&#32;as</emphasis>
06601 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;the&#32;definition;&#32;when&#32;we&#32;were&#32;provided&#32;with&#32;the&#32;interface,</emphasis>
06602 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;produce&#32;the&#32;@implementation&#32;as&#32;the&#32;definition.</emphasis>
06603 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;ObjCInterfaceDecl&#32;*IFace&#32;=&#32;cast&lt;ObjCInterfaceDecl&gt;(D);
06604 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(WasReference)&#32;{
06605 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;ObjCInterfaceDecl&#32;*Def&#32;=&#32;IFace-&gt;getDefinition())
06606 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxcursor_1ab61ec2059175833672e8e78a376bb218">MakeCXCursor</link>(Def,&#32;TU);
06607 &#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(ObjCImplementationDecl&#32;*Impl&#32;=&#32;IFace-&gt;getImplementation())
06608 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxcursor_1ab61ec2059175833672e8e78a376bb218">MakeCXCursor</link>(Impl,&#32;TU);
06609 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__c_index_8cpp_1aa22233466eaf91f6f3cf6b84255c3b68">clang_getNullCursor</link>();
06610 &#32;&#32;}
06611 
06612 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;Decl::ObjCProperty:
06613 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;FIXME:&#32;We&#32;don&apos;t&#32;really&#32;know&#32;where&#32;to&#32;find&#32;the</emphasis>
06614 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;ObjCPropertyImplDecls&#32;that&#32;implement&#32;this&#32;property.</emphasis>
06615 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__c_index_8cpp_1aa22233466eaf91f6f3cf6b84255c3b68">clang_getNullCursor</link>();
06616 
06617 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;Decl::ObjCCompatibleAlias:
06618 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;ObjCInterfaceDecl&#32;*Class&#32;=
06619 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cast&lt;ObjCCompatibleAliasDecl&gt;(D)-&gt;getClassInterface())
06620 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;ObjCInterfaceDecl&#32;*Def&#32;=&#32;Class-&gt;getDefinition())
06621 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxcursor_1ab61ec2059175833672e8e78a376bb218">MakeCXCursor</link>(Def,&#32;TU);
06622 
06623 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__c_index_8cpp_1aa22233466eaf91f6f3cf6b84255c3b68">clang_getNullCursor</link>();
06624 
06625 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;Decl::Friend:
06626 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(NamedDecl&#32;*Friend&#32;=&#32;cast&lt;FriendDecl&gt;(D)-&gt;getFriendDecl())
06627 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__c_index_8cpp_1a090e42b940779ab0c437188858f24dfb">clang_getCursorDefinition</link>(<link linkend="_namespaceclang_1_1cxcursor_1ab61ec2059175833672e8e78a376bb218">MakeCXCursor</link>(Friend,&#32;TU));
06628 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__c_index_8cpp_1aa22233466eaf91f6f3cf6b84255c3b68">clang_getNullCursor</link>();
06629 
06630 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;Decl::FriendTemplate:
06631 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(NamedDecl&#32;*Friend&#32;=&#32;cast&lt;FriendTemplateDecl&gt;(D)-&gt;getFriendDecl())
06632 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__c_index_8cpp_1a090e42b940779ab0c437188858f24dfb">clang_getCursorDefinition</link>(<link linkend="_namespaceclang_1_1cxcursor_1ab61ec2059175833672e8e78a376bb218">MakeCXCursor</link>(Friend,&#32;TU));
06633 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__c_index_8cpp_1aa22233466eaf91f6f3cf6b84255c3b68">clang_getNullCursor</link>();
06634 &#32;&#32;}
06635 
06636 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__c_index_8cpp_1aa22233466eaf91f6f3cf6b84255c3b68">clang_getNullCursor</link>();
06637 }
06638 
<anchor xml:id="__c_index_8cpp_source_1l06639"/><link linkend="__c_index_8cpp_1a619396ba7a888dea29aa6cb0b35ddbe5">06639</link> <emphasis role="keywordtype">unsigned</emphasis>&#32;<link linkend="__c_index_8cpp_1a619396ba7a888dea29aa6cb0b35ddbe5">clang_isCursorDefinition</link>(CXCursor&#32;C)&#32;{
06640 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!<link linkend="__c_index_8cpp_1a5d47db8f608ae0c266d6551875d46b80">clang_isDeclaration</link>(C.kind))
06641 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
06642 
06643 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__c_index_8cpp_1a090e42b940779ab0c437188858f24dfb">clang_getCursorDefinition</link>(C)&#32;==&#32;C;
06644 }
06645 
<anchor xml:id="__c_index_8cpp_source_1l06646"/><link linkend="__c_index_8cpp_1a8a500567a7154c3ecfc347392e52be03">06646</link> CXCursor&#32;<link linkend="__c_index_8cpp_1a8a500567a7154c3ecfc347392e52be03">clang_getCanonicalCursor</link>(CXCursor&#32;C)&#32;{
06647 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!<link linkend="__c_index_8cpp_1a5d47db8f608ae0c266d6551875d46b80">clang_isDeclaration</link>(C.kind))
06648 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;C;
06649 
06650 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;Decl&#32;*D&#32;=&#32;<link linkend="_namespaceclang_1_1cxcursor_1a1f702246831c96afd990e457613dc642">getCursorDecl</link>(C))&#32;{
06651 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;ObjCCategoryImplDecl&#32;*CatImplD&#32;=
06652 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;dyn_cast&lt;ObjCCategoryImplDecl&gt;(D))
06653 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(ObjCCategoryDecl&#32;*CatD&#32;=&#32;CatImplD-&gt;getCategoryDecl())
06654 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxcursor_1ab61ec2059175833672e8e78a376bb218">MakeCXCursor</link>(CatD,&#32;<link linkend="_namespaceclang_1_1cxcursor_1a23a495df22339e8289ae6d2421f493b6">getCursorTU</link>(C));
06655 
06656 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;ObjCImplDecl&#32;*ImplD&#32;=&#32;dyn_cast&lt;ObjCImplDecl&gt;(D))
06657 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;ObjCInterfaceDecl&#32;*IFD&#32;=&#32;ImplD-&gt;getClassInterface())
06658 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxcursor_1ab61ec2059175833672e8e78a376bb218">MakeCXCursor</link>(IFD,&#32;<link linkend="_namespaceclang_1_1cxcursor_1a23a495df22339e8289ae6d2421f493b6">getCursorTU</link>(C));
06659 
06660 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxcursor_1ab61ec2059175833672e8e78a376bb218">MakeCXCursor</link>(D-&gt;getCanonicalDecl(),&#32;<link linkend="_namespaceclang_1_1cxcursor_1a23a495df22339e8289ae6d2421f493b6">getCursorTU</link>(C));
06661 &#32;&#32;}
06662 
06663 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;C;
06664 }
06665 
<anchor xml:id="__c_index_8cpp_source_1l06666"/><link linkend="__c_index_8cpp_1a026bd44ebbcdfe3b1585dc546051cdfa">06666</link> <emphasis role="keywordtype">int</emphasis>&#32;<link linkend="__c_index_8cpp_1a026bd44ebbcdfe3b1585dc546051cdfa">clang_Cursor_getObjCSelectorIndex</link>(CXCursor&#32;cursor)&#32;{
06667 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxcursor_1ac0203107f2338d86b2c77680155c3bf5">cxcursor::getSelectorIdentifierIndexAndLoc</link>(cursor).first;
06668 }
06669 
<anchor xml:id="__c_index_8cpp_source_1l06670"/><link linkend="__c_index_8cpp_1a0456530befeaf5dfc3ab402201f29eae">06670</link> <emphasis role="keywordtype">unsigned</emphasis>&#32;<link linkend="__c_index_8cpp_1a0456530befeaf5dfc3ab402201f29eae">clang_getNumOverloadedDecls</link>(CXCursor&#32;C)&#32;{
06671 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(C.kind&#32;!=&#32;CXCursor_OverloadedDeclRef)
06672 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
06673 
06674 &#32;&#32;<link linkend="_namespaceclang_1_1cxcursor_1a944e67de567f6905f10876d7585ac43b">OverloadedDeclRefStorage</link>&#32;Storage&#32;=&#32;<link linkend="_namespaceclang_1_1cxcursor_1a4b41e93d6de24aed1376ec7f789efa2a">getCursorOverloadedDeclRef</link>(C).first;
06675 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;OverloadExpr&#32;*E&#32;=&#32;Storage.dyn_cast&lt;<emphasis role="keyword">const</emphasis>&#32;OverloadExpr&#32;*&gt;())
06676 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;E-&gt;getNumDecls();
06677 
06678 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(OverloadedTemplateStorage&#32;*S&#32;=
06679 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Storage.dyn_cast&lt;OverloadedTemplateStorage&#32;*&gt;())
06680 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;S-&gt;size();
06681 
06682 &#32;&#32;<emphasis role="keyword">const</emphasis>&#32;Decl&#32;*D&#32;=&#32;Storage.get&lt;<emphasis role="keyword">const</emphasis>&#32;Decl&#32;*&gt;();
06683 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;UsingDecl&#32;*Using&#32;=&#32;dyn_cast&lt;UsingDecl&gt;(D))
06684 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;Using-&gt;shadow_size();
06685 
06686 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
06687 }
06688 
<anchor xml:id="__c_index_8cpp_source_1l06689"/><link linkend="__c_index_8cpp_1a5bfefc8c75349072669d306071ec6d30">06689</link> CXCursor&#32;<link linkend="__c_index_8cpp_1a5bfefc8c75349072669d306071ec6d30">clang_getOverloadedDecl</link>(CXCursor&#32;cursor,&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;index)&#32;{
06690 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(cursor.kind&#32;!=&#32;CXCursor_OverloadedDeclRef)
06691 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__c_index_8cpp_1aa22233466eaf91f6f3cf6b84255c3b68">clang_getNullCursor</link>();
06692 
06693 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(index&#32;&gt;=&#32;<link linkend="__c_index_8cpp_1a0456530befeaf5dfc3ab402201f29eae">clang_getNumOverloadedDecls</link>(cursor))
06694 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__c_index_8cpp_1aa22233466eaf91f6f3cf6b84255c3b68">clang_getNullCursor</link>();
06695 
06696 &#32;&#32;CXTranslationUnit&#32;TU&#32;=&#32;<link linkend="_namespaceclang_1_1cxcursor_1a23a495df22339e8289ae6d2421f493b6">getCursorTU</link>(cursor);
06697 &#32;&#32;<link linkend="_namespaceclang_1_1cxcursor_1a944e67de567f6905f10876d7585ac43b">OverloadedDeclRefStorage</link>&#32;Storage&#32;=&#32;<link linkend="_namespaceclang_1_1cxcursor_1a4b41e93d6de24aed1376ec7f789efa2a">getCursorOverloadedDeclRef</link>(cursor).first;
06698 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;OverloadExpr&#32;*E&#32;=&#32;Storage.dyn_cast&lt;<emphasis role="keyword">const</emphasis>&#32;OverloadExpr&#32;*&gt;())
06699 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxcursor_1ab61ec2059175833672e8e78a376bb218">MakeCXCursor</link>(E-&gt;decls_begin()[index],&#32;TU);
06700 
06701 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(OverloadedTemplateStorage&#32;*S&#32;=
06702 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Storage.dyn_cast&lt;OverloadedTemplateStorage&#32;*&gt;())
06703 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxcursor_1ab61ec2059175833672e8e78a376bb218">MakeCXCursor</link>(S-&gt;begin()[index],&#32;TU);
06704 
06705 &#32;&#32;<emphasis role="keyword">const</emphasis>&#32;Decl&#32;*D&#32;=&#32;Storage.get&lt;<emphasis role="keyword">const</emphasis>&#32;Decl&#32;*&gt;();
06706 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;UsingDecl&#32;*Using&#32;=&#32;dyn_cast&lt;UsingDecl&gt;(D))&#32;{
06707 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;FIXME:&#32;This&#32;is,&#32;unfortunately,&#32;linear&#32;time.</emphasis>
06708 &#32;&#32;&#32;&#32;UsingDecl::shadow_iterator&#32;Pos&#32;=&#32;Using-&gt;shadow_begin();
06709 &#32;&#32;&#32;&#32;std::advance(Pos,&#32;index);
06710 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxcursor_1ab61ec2059175833672e8e78a376bb218">MakeCXCursor</link>(cast&lt;UsingShadowDecl&gt;(*Pos)-&gt;getTargetDecl(),&#32;TU);
06711 &#32;&#32;}
06712 
06713 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__c_index_8cpp_1aa22233466eaf91f6f3cf6b84255c3b68">clang_getNullCursor</link>();
06714 }
06715 
<anchor xml:id="__c_index_8cpp_source_1l06716"/><link linkend="__c_index_8cpp_1a877e5ce84687daa2e6befb14dc8fea24">06716</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="__c_index_8cpp_1a877e5ce84687daa2e6befb14dc8fea24">clang_getDefinitionSpellingAndExtent</link>(
06717 &#32;&#32;&#32;&#32;CXCursor&#32;C,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;**startBuf,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;**endBuf,&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;*startLine,
06718 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;*startColumn,&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;*endLine,&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;*endColumn)&#32;{
06719 &#32;&#32;assert(<link linkend="_namespaceclang_1_1cxcursor_1a1f702246831c96afd990e457613dc642">getCursorDecl</link>(C)&#32;&amp;&amp;&#32;<emphasis role="stringliteral">&quot;CXCursor&#32;has&#32;null&#32;decl&quot;</emphasis>);
06720 &#32;&#32;<emphasis role="keyword">const</emphasis>&#32;FunctionDecl&#32;*FD&#32;=&#32;dyn_cast&lt;FunctionDecl&gt;(<link linkend="_namespaceclang_1_1cxcursor_1a1f702246831c96afd990e457613dc642">getCursorDecl</link>(C));
06721 &#32;&#32;CompoundStmt&#32;*Body&#32;=&#32;dyn_cast&lt;CompoundStmt&gt;(FD-&gt;getBody());
06722 
06723 &#32;&#32;SourceManager&#32;&amp;SM&#32;=&#32;FD-&gt;getASTContext().getSourceManager();
06724 &#32;&#32;*startBuf&#32;=&#32;SM.getCharacterData(Body-&gt;getLBracLoc());
06725 &#32;&#32;*endBuf&#32;=&#32;SM.getCharacterData(Body-&gt;getRBracLoc());
06726 &#32;&#32;*startLine&#32;=&#32;SM.getSpellingLineNumber(Body-&gt;getLBracLoc());
06727 &#32;&#32;*startColumn&#32;=&#32;SM.getSpellingColumnNumber(Body-&gt;getLBracLoc());
06728 &#32;&#32;*endLine&#32;=&#32;SM.getSpellingLineNumber(Body-&gt;getRBracLoc());
06729 &#32;&#32;*endColumn&#32;=&#32;SM.getSpellingColumnNumber(Body-&gt;getRBracLoc());
06730 }
06731 
<anchor xml:id="__c_index_8cpp_source_1l06732"/><link linkend="__c_index_8cpp_1afaace7c7d9d35d3f6d2b947d97a926df">06732</link> CXSourceRange&#32;<link linkend="__c_index_8cpp_1afaace7c7d9d35d3f6d2b947d97a926df">clang_getCursorReferenceNameRange</link>(CXCursor&#32;C,&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;NameFlags,
06733 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;PieceIndex)&#32;{
06734 &#32;&#32;RefNamePieces&#32;Pieces;
06735 
06736 &#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(C.kind)&#32;{
06737 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_MemberRefExpr:
06738 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;MemberExpr&#32;*E&#32;=&#32;dyn_cast&lt;MemberExpr&gt;(<link linkend="_namespaceclang_1_1cxcursor_1a80837a3710c6df0dfc24b5ee1d94ff9b">getCursorExpr</link>(C)))
06739 &#32;&#32;&#32;&#32;&#32;&#32;Pieces&#32;=&#32;buildPieces(NameFlags,&#32;<emphasis role="keyword">true</emphasis>,&#32;E-&gt;getMemberNameInfo(),
06740 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;E-&gt;getQualifierLoc().getSourceRange());
06741 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
06742 
06743 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_DeclRefExpr:
06744 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;DeclRefExpr&#32;*E&#32;=&#32;dyn_cast&lt;DeclRefExpr&gt;(<link linkend="_namespaceclang_1_1cxcursor_1a80837a3710c6df0dfc24b5ee1d94ff9b">getCursorExpr</link>(C)))&#32;{
06745 &#32;&#32;&#32;&#32;&#32;&#32;SourceRange&#32;TemplateArgLoc(E-&gt;getLAngleLoc(),&#32;E-&gt;getRAngleLoc());
06746 &#32;&#32;&#32;&#32;&#32;&#32;Pieces&#32;=
06747 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;buildPieces(NameFlags,&#32;<emphasis role="keyword">false</emphasis>,&#32;E-&gt;getNameInfo(),
06748 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;E-&gt;getQualifierLoc().getSourceRange(),&#32;&amp;TemplateArgLoc);
06749 &#32;&#32;&#32;&#32;}
06750 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
06751 
06752 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_CallExpr:
06753 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;CXXOperatorCallExpr&#32;*OCE&#32;=
06754 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;dyn_cast&lt;CXXOperatorCallExpr&gt;(<link linkend="_namespaceclang_1_1cxcursor_1a80837a3710c6df0dfc24b5ee1d94ff9b">getCursorExpr</link>(C)))&#32;{
06755 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;Expr&#32;*Callee&#32;=&#32;OCE-&gt;getCallee();
06756 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;ImplicitCastExpr&#32;*ICE&#32;=&#32;dyn_cast&lt;ImplicitCastExpr&gt;(Callee))
06757 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Callee&#32;=&#32;ICE-&gt;getSubExpr();
06758 
06759 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;DeclRefExpr&#32;*DRE&#32;=&#32;dyn_cast&lt;DeclRefExpr&gt;(Callee))
06760 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Pieces&#32;=&#32;buildPieces(NameFlags,&#32;<emphasis role="keyword">false</emphasis>,&#32;DRE-&gt;getNameInfo(),
06761 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;DRE-&gt;getQualifierLoc().getSourceRange());
06762 &#32;&#32;&#32;&#32;}
06763 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
06764 
06765 &#32;&#32;<emphasis role="keywordflow">default</emphasis>:
06766 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
06767 &#32;&#32;}
06768 
06769 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(Pieces.empty())&#32;{
06770 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(PieceIndex&#32;==&#32;0)
06771 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__c_index_8cpp_1ac535682dfe6658513121c4cf6d4b4076">clang_getCursorExtent</link>(C);
06772 &#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(PieceIndex&#32;&lt;&#32;Pieces.size())&#32;{
06773 &#32;&#32;&#32;&#32;SourceRange&#32;R&#32;=&#32;Pieces[PieceIndex];
06774 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(R.isValid())
06775 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxloc_1a39d02b462b1f3233518f01951d83d035">cxloc::translateSourceRange</link>(<link linkend="_namespaceclang_1_1cxcursor_1a9f29c286f26b3cf616331c7e6554d373">getCursorContext</link>(C),&#32;R);
06776 &#32;&#32;}
06777 
06778 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__c_x_source_location_8cpp_1afadb1a95ce51366407cf6c363299a17f">clang_getNullRange</link>();
06779 }
06780 
<anchor xml:id="__c_index_8cpp_source_1l06781"/><link linkend="__c_index_8cpp_1a459c002cff4b09901ca37e1ad44d3df3">06781</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="__c_index_8cpp_1a459c002cff4b09901ca37e1ad44d3df3">clang_enableStackTraces</link>(<emphasis role="keywordtype">void</emphasis>)&#32;{
06782 &#32;&#32;<emphasis role="comment">//&#32;FIXME:&#32;Provide&#32;an&#32;argv0&#32;here&#32;so&#32;we&#32;can&#32;find&#32;llvm-symbolizer.</emphasis>
06783 &#32;&#32;llvm::sys::PrintStackTraceOnErrorSignal(StringRef());
06784 }
06785 
<anchor xml:id="__c_index_8cpp_source_1l06786"/><link linkend="__c_index_8cpp_1aeb6cae453fe08d2720436c24d4629e8e">06786</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="__c_index_8cpp_1aeb6cae453fe08d2720436c24d4629e8e">clang_executeOnThread</link>(<emphasis role="keywordtype">void</emphasis>&#32;(*fn)(<emphasis role="keywordtype">void</emphasis>&#32;*),&#32;<emphasis role="keywordtype">void</emphasis>&#32;*user_data,
06787 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;stack_size)&#32;{
06788 &#32;&#32;llvm::llvm_execute_on_thread(fn,&#32;user_data,
06789 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;stack_size&#32;==&#32;0
06790 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;?&#32;clang::DesiredStackSize
06791 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;llvm::Optional&lt;unsigned&gt;(stack_size));
06792 }
06793 
06794 <emphasis role="comment">//===----------------------------------------------------------------------===//</emphasis>
06795 <emphasis role="comment">//&#32;Token-based&#32;Operations.</emphasis>
06796 <emphasis role="comment">//===----------------------------------------------------------------------===//</emphasis>
06797 
06798 <emphasis role="comment">/*&#32;CXToken&#32;layout:</emphasis>
06799 <emphasis role="comment">&#32;*&#32;&#32;&#32;int_data[0]:&#32;a&#32;CXTokenKind</emphasis>
06800 <emphasis role="comment">&#32;*&#32;&#32;&#32;int_data[1]:&#32;starting&#32;token&#32;location</emphasis>
06801 <emphasis role="comment">&#32;*&#32;&#32;&#32;int_data[2]:&#32;token&#32;length</emphasis>
06802 <emphasis role="comment">&#32;*&#32;&#32;&#32;int_data[3]:&#32;reserved</emphasis>
06803 <emphasis role="comment">&#32;*&#32;&#32;&#32;ptr_data:&#32;for&#32;identifiers&#32;and&#32;keywords,&#32;an&#32;IdentifierInfo*.</emphasis>
06804 <emphasis role="comment">&#32;*&#32;&#32;&#32;otherwise&#32;unused.</emphasis>
06805 <emphasis role="comment">&#32;*/</emphasis>
<anchor xml:id="__c_index_8cpp_source_1l06806"/><link linkend="__c_index_8cpp_1a656e3a514ed80a5f265fba4e2cbe6ab3">06806</link> CXTokenKind&#32;<link linkend="__c_index_8cpp_1a656e3a514ed80a5f265fba4e2cbe6ab3">clang_getTokenKind</link>(CXToken&#32;CXTok)&#32;{
06807 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">static_cast&lt;</emphasis>CXTokenKind<emphasis role="keyword">&gt;</emphasis>(CXTok.int_data[0]);
06808 }
06809 
<anchor xml:id="__c_index_8cpp_source_1l06810"/><link linkend="__c_index_8cpp_1ac54c8685910211b22533b6aea1e5793f">06810</link> CXString&#32;<link linkend="__c_index_8cpp_1ac54c8685910211b22533b6aea1e5793f">clang_getTokenSpelling</link>(CXTranslationUnit&#32;TU,&#32;CXToken&#32;CXTok)&#32;{
06811 &#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(<link linkend="__c_index_8cpp_1a656e3a514ed80a5f265fba4e2cbe6ab3">clang_getTokenKind</link>(CXTok))&#32;{
06812 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXToken_Identifier:
06813 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXToken_Keyword:
06814 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;We&#32;know&#32;we&#32;have&#32;an&#32;IdentifierInfo*,&#32;so&#32;use&#32;that.</emphasis>
06815 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(
06816 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_cast&lt;</emphasis>IdentifierInfo&#32;*<emphasis role="keyword">&gt;</emphasis>(CXTok.ptr_data)-&gt;getNameStart());
06817 
06818 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXToken_Literal:&#32;{
06819 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;We&#32;have&#32;stashed&#32;the&#32;starting&#32;pointer&#32;in&#32;the&#32;ptr_data&#32;field.&#32;Use&#32;it.</emphasis>
06820 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*Text&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keyword">const&#32;</emphasis><emphasis role="keywordtype">char</emphasis>&#32;*<emphasis role="keyword">&gt;</emphasis>(CXTok.ptr_data);
06821 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1a19a4962be87f75a8c1fa5a0b75f76298">cxstring::createDup</link>(StringRef(Text,&#32;CXTok.int_data[2]));
06822 &#32;&#32;}
06823 
06824 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXToken_Punctuation:
06825 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXToken_Comment:
06826 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
06827 &#32;&#32;}
06828 
06829 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(isNotUsableTU(TU))&#32;{
06830 &#32;&#32;&#32;&#32;<link linkend="__c_x_translation_unit_8h_1a4ec17e6e03ea0baf73e27802eae36106">LOG_BAD_TU</link>(TU);
06831 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1a8a49aa6ea196abdde85886689f2630f9">cxstring::createEmpty</link>();
06832 &#32;&#32;}
06833 
06834 &#32;&#32;<emphasis role="comment">//&#32;We&#32;have&#32;to&#32;find&#32;the&#32;starting&#32;buffer&#32;pointer&#32;the&#32;hard&#32;way,&#32;by</emphasis>
06835 &#32;&#32;<emphasis role="comment">//&#32;deconstructing&#32;the&#32;source&#32;location.</emphasis>
06836 &#32;&#32;ASTUnit&#32;*CXXUnit&#32;=&#32;cxtu::getASTUnit(TU);
06837 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!CXXUnit)
06838 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1a8a49aa6ea196abdde85886689f2630f9">cxstring::createEmpty</link>();
06839 
06840 &#32;&#32;SourceLocation&#32;Loc&#32;=&#32;SourceLocation::getFromRawEncoding(CXTok.int_data[1]);
06841 &#32;&#32;std::pair&lt;FileID,&#32;unsigned&gt;&#32;LocInfo&#32;=
06842 &#32;&#32;&#32;&#32;&#32;&#32;CXXUnit-&gt;getSourceManager().getDecomposedSpellingLoc(Loc);
06843 &#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;Invalid&#32;=&#32;<emphasis role="keyword">false</emphasis>;
06844 &#32;&#32;StringRef&#32;Buffer&#32;=
06845 &#32;&#32;&#32;&#32;&#32;&#32;CXXUnit-&gt;getSourceManager().getBufferData(LocInfo.first,&#32;&amp;Invalid);
06846 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(Invalid)
06847 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1a8a49aa6ea196abdde85886689f2630f9">cxstring::createEmpty</link>();
06848 
06849 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1a19a4962be87f75a8c1fa5a0b75f76298">cxstring::createDup</link>(Buffer.substr(LocInfo.second,&#32;CXTok.int_data[2]));
06850 }
06851 
<anchor xml:id="__c_index_8cpp_source_1l06852"/><link linkend="__c_index_8cpp_1a123bf1f8140225a384ea22b9a03b7c3a">06852</link> CXSourceLocation&#32;<link linkend="__c_index_8cpp_1a123bf1f8140225a384ea22b9a03b7c3a">clang_getTokenLocation</link>(CXTranslationUnit&#32;TU,&#32;CXToken&#32;CXTok)&#32;{
06853 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(isNotUsableTU(TU))&#32;{
06854 &#32;&#32;&#32;&#32;<link linkend="__c_x_translation_unit_8h_1a4ec17e6e03ea0baf73e27802eae36106">LOG_BAD_TU</link>(TU);
06855 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__c_x_source_location_8cpp_1a20bb1e9a72e2c16fbcb21958f0648947">clang_getNullLocation</link>();
06856 &#32;&#32;}
06857 
06858 &#32;&#32;ASTUnit&#32;*CXXUnit&#32;=&#32;cxtu::getASTUnit(TU);
06859 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!CXXUnit)
06860 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__c_x_source_location_8cpp_1a20bb1e9a72e2c16fbcb21958f0648947">clang_getNullLocation</link>();
06861 
06862 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;cxloc::translateSourceLocation(
06863 &#32;&#32;&#32;&#32;&#32;&#32;CXXUnit-&gt;getASTContext(),
06864 &#32;&#32;&#32;&#32;&#32;&#32;SourceLocation::getFromRawEncoding(CXTok.int_data[1]));
06865 }
06866 
<anchor xml:id="__c_index_8cpp_source_1l06867"/><link linkend="__c_index_8cpp_1a216d4670f967e3bd9f9c977691282047">06867</link> CXSourceRange&#32;<link linkend="__c_index_8cpp_1a216d4670f967e3bd9f9c977691282047">clang_getTokenExtent</link>(CXTranslationUnit&#32;TU,&#32;CXToken&#32;CXTok)&#32;{
06868 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(isNotUsableTU(TU))&#32;{
06869 &#32;&#32;&#32;&#32;<link linkend="__c_x_translation_unit_8h_1a4ec17e6e03ea0baf73e27802eae36106">LOG_BAD_TU</link>(TU);
06870 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__c_x_source_location_8cpp_1afadb1a95ce51366407cf6c363299a17f">clang_getNullRange</link>();
06871 &#32;&#32;}
06872 
06873 &#32;&#32;ASTUnit&#32;*CXXUnit&#32;=&#32;cxtu::getASTUnit(TU);
06874 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!CXXUnit)
06875 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__c_x_source_location_8cpp_1afadb1a95ce51366407cf6c363299a17f">clang_getNullRange</link>();
06876 
06877 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxloc_1a39d02b462b1f3233518f01951d83d035">cxloc::translateSourceRange</link>(
06878 &#32;&#32;&#32;&#32;&#32;&#32;CXXUnit-&gt;getASTContext(),
06879 &#32;&#32;&#32;&#32;&#32;&#32;SourceLocation::getFromRawEncoding(CXTok.int_data[1]));
06880 }
06881 
06882 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;getTokens(ASTUnit&#32;*CXXUnit,&#32;SourceRange&#32;Range,
06883 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;SmallVectorImpl&lt;CXToken&gt;&#32;&amp;CXTokens)&#32;{
06884 &#32;&#32;SourceManager&#32;&amp;SourceMgr&#32;=&#32;CXXUnit-&gt;getSourceManager();
06885 &#32;&#32;std::pair&lt;FileID,&#32;unsigned&gt;&#32;BeginLocInfo&#32;=
06886 &#32;&#32;&#32;&#32;&#32;&#32;SourceMgr.getDecomposedSpellingLoc(Range.getBegin());
06887 &#32;&#32;std::pair&lt;FileID,&#32;unsigned&gt;&#32;EndLocInfo&#32;=
06888 &#32;&#32;&#32;&#32;&#32;&#32;SourceMgr.getDecomposedSpellingLoc(Range.getEnd());
06889 
06890 &#32;&#32;<emphasis role="comment">//&#32;Cannot&#32;tokenize&#32;across&#32;files.</emphasis>
06891 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(BeginLocInfo.first&#32;!=&#32;EndLocInfo.first)
06892 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
06893 
06894 &#32;&#32;<emphasis role="comment">//&#32;Create&#32;a&#32;lexer</emphasis>
06895 &#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;Invalid&#32;=&#32;<emphasis role="keyword">false</emphasis>;
06896 &#32;&#32;StringRef&#32;Buffer&#32;=&#32;SourceMgr.getBufferData(BeginLocInfo.first,&#32;&amp;Invalid);
06897 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(Invalid)
06898 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
06899 
06900 &#32;&#32;Lexer&#32;Lex(SourceMgr.getLocForStartOfFile(BeginLocInfo.first),
06901 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;CXXUnit-&gt;getASTContext().getLangOpts(),&#32;Buffer.begin(),
06902 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Buffer.data()&#32;+&#32;BeginLocInfo.second,&#32;Buffer.end());
06903 &#32;&#32;Lex.SetCommentRetentionState(<emphasis role="keyword">true</emphasis>);
06904 
06905 &#32;&#32;<emphasis role="comment">//&#32;Lex&#32;tokens&#32;until&#32;we&#32;hit&#32;the&#32;end&#32;of&#32;the&#32;range.</emphasis>
06906 &#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*EffectiveBufferEnd&#32;=&#32;Buffer.data()&#32;+&#32;EndLocInfo.second;
06907 &#32;&#32;Token&#32;Tok;
06908 &#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;previousWasAt&#32;=&#32;<emphasis role="keyword">false</emphasis>;
06909 &#32;&#32;<emphasis role="keywordflow">do</emphasis>&#32;{
06910 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Lex&#32;the&#32;next&#32;token</emphasis>
06911 &#32;&#32;&#32;&#32;Lex.LexFromRawLexer(Tok);
06912 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(Tok.is(tok::eof))
06913 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
06914 
06915 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Initialize&#32;the&#32;CXToken.</emphasis>
06916 &#32;&#32;&#32;&#32;CXToken&#32;CXTok;
06917 
06918 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;&#32;-&#32;Common&#32;fields</emphasis>
06919 &#32;&#32;&#32;&#32;CXTok.int_data[1]&#32;=&#32;Tok.getLocation().getRawEncoding();
06920 &#32;&#32;&#32;&#32;CXTok.int_data[2]&#32;=&#32;Tok.getLength();
06921 &#32;&#32;&#32;&#32;CXTok.int_data[3]&#32;=&#32;0;
06922 
06923 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;&#32;-&#32;Kind-specific&#32;fields</emphasis>
06924 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(Tok.isLiteral())&#32;{
06925 &#32;&#32;&#32;&#32;&#32;&#32;CXTok.int_data[0]&#32;=&#32;CXToken_Literal;
06926 &#32;&#32;&#32;&#32;&#32;&#32;CXTok.ptr_data&#32;=&#32;<emphasis role="keyword">const_cast&lt;</emphasis><emphasis role="keywordtype">char</emphasis>&#32;*<emphasis role="keyword">&gt;</emphasis>(Tok.getLiteralData());
06927 &#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(Tok.is(tok::raw_identifier))&#32;{
06928 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Lookup&#32;the&#32;identifier&#32;to&#32;determine&#32;whether&#32;we&#32;have&#32;a&#32;keyword.</emphasis>
06929 &#32;&#32;&#32;&#32;&#32;&#32;IdentifierInfo&#32;*II&#32;=&#32;CXXUnit-&gt;getPreprocessor().LookUpIdentifierInfo(Tok);
06930 
06931 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;((II-&gt;getObjCKeywordID()&#32;!=&#32;tok::objc_not_keyword)&#32;&amp;&amp;&#32;previousWasAt)&#32;{
06932 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;CXTok.int_data[0]&#32;=&#32;CXToken_Keyword;
06933 &#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
06934 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;CXTok.int_data[0]&#32;=
06935 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Tok.is(tok::identifier)&#32;?&#32;CXToken_Identifier&#32;:&#32;CXToken_Keyword;
06936 &#32;&#32;&#32;&#32;&#32;&#32;}
06937 &#32;&#32;&#32;&#32;&#32;&#32;CXTok.ptr_data&#32;=&#32;II;
06938 &#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(Tok.is(<link linkend="_namespacelibscanbuild_1_1report_1a2dbff8736ede60f531df420dc9ba1069">tok::comment</link>))&#32;{
06939 &#32;&#32;&#32;&#32;&#32;&#32;CXTok.int_data[0]&#32;=&#32;CXToken_Comment;
06940 &#32;&#32;&#32;&#32;&#32;&#32;CXTok.ptr_data&#32;=&#32;<emphasis role="keyword">nullptr</emphasis>;
06941 &#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
06942 &#32;&#32;&#32;&#32;&#32;&#32;CXTok.int_data[0]&#32;=&#32;CXToken_Punctuation;
06943 &#32;&#32;&#32;&#32;&#32;&#32;CXTok.ptr_data&#32;=&#32;<emphasis role="keyword">nullptr</emphasis>;
06944 &#32;&#32;&#32;&#32;}
06945 &#32;&#32;&#32;&#32;CXTokens.push_back(CXTok);
06946 &#32;&#32;&#32;&#32;previousWasAt&#32;=&#32;Tok.is(tok::at);
06947 &#32;&#32;}&#32;<emphasis role="keywordflow">while</emphasis>&#32;(Lex.getBufferLocation()&#32;&lt;&#32;EffectiveBufferEnd);
06948 }
06949 
<anchor xml:id="__c_index_8cpp_source_1l06950"/><link linkend="__c_index_8cpp_1ae7b38c2c862cd0bde6882c48974b11e9">06950</link> CXToken&#32;*<link linkend="__c_index_8cpp_1ae7b38c2c862cd0bde6882c48974b11e9">clang_getToken</link>(CXTranslationUnit&#32;TU,&#32;CXSourceLocation&#32;Location)&#32;{
06951 &#32;&#32;<link linkend="__c_log_8h_1a24474e48ce7e218f17ae9353103470d8">LOG_FUNC_SECTION</link>&#32;{&#32;*Log&#32;&lt;&lt;&#32;TU&#32;&lt;&lt;&#32;<emphasis role="charliteral">&apos;&#32;&apos;</emphasis>&#32;&lt;&lt;&#32;Location;&#32;}
06952 
06953 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(isNotUsableTU(TU))&#32;{
06954 &#32;&#32;&#32;&#32;<link linkend="__c_x_translation_unit_8h_1a4ec17e6e03ea0baf73e27802eae36106">LOG_BAD_TU</link>(TU);
06955 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;NULL;
06956 &#32;&#32;}
06957 
06958 &#32;&#32;ASTUnit&#32;*CXXUnit&#32;=&#32;cxtu::getASTUnit(TU);
06959 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!CXXUnit)
06960 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;NULL;
06961 
06962 &#32;&#32;SourceLocation&#32;Begin&#32;=&#32;cxloc::translateSourceLocation(Location);
06963 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(Begin.isInvalid())
06964 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;NULL;
06965 &#32;&#32;SourceManager&#32;&amp;SM&#32;=&#32;CXXUnit-&gt;getSourceManager();
06966 &#32;&#32;std::pair&lt;FileID,&#32;unsigned&gt;&#32;DecomposedEnd&#32;=&#32;SM.getDecomposedLoc(Begin);
06967 &#32;&#32;DecomposedEnd.second&#32;+=
06968 &#32;&#32;&#32;&#32;&#32;&#32;Lexer::MeasureTokenLength(Begin,&#32;SM,&#32;CXXUnit-&gt;getLangOpts());
06969 
06970 &#32;&#32;SourceLocation&#32;End&#32;=
06971 &#32;&#32;&#32;&#32;&#32;&#32;SM.getComposedLoc(DecomposedEnd.first,&#32;DecomposedEnd.second);
06972 
06973 &#32;&#32;SmallVector&lt;CXToken,&#32;32&gt;&#32;CXTokens;
06974 &#32;&#32;getTokens(CXXUnit,&#32;SourceRange(Begin,&#32;End),&#32;CXTokens);
06975 
06976 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(CXTokens.empty())
06977 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;NULL;
06978 
06979 &#32;&#32;CXTokens.resize(1);
06980 &#32;&#32;CXToken&#32;*Token&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis>CXToken&#32;*<emphasis role="keyword">&gt;</emphasis>(llvm::safe_malloc(<emphasis role="keyword">sizeof</emphasis>(CXToken)));
06981 
06982 &#32;&#32;memmove(Token,&#32;CXTokens.data(),&#32;<emphasis role="keyword">sizeof</emphasis>(CXToken));
06983 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;Token;
06984 }
06985 
<anchor xml:id="__c_index_8cpp_source_1l06986"/><link linkend="__c_index_8cpp_1acb7d078bea44691adbb99cd63ce7e556">06986</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="__c_index_8cpp_1acb7d078bea44691adbb99cd63ce7e556">clang_tokenize</link>(CXTranslationUnit&#32;TU,&#32;CXSourceRange&#32;Range,&#32;CXToken&#32;**Tokens,
06987 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;*NumTokens)&#32;{
06988 &#32;&#32;<link linkend="__c_log_8h_1a24474e48ce7e218f17ae9353103470d8">LOG_FUNC_SECTION</link>&#32;{&#32;*Log&#32;&lt;&lt;&#32;TU&#32;&lt;&lt;&#32;<emphasis role="charliteral">&apos;&#32;&apos;</emphasis>&#32;&lt;&lt;&#32;Range;&#32;}
06989 
06990 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(Tokens)
06991 &#32;&#32;&#32;&#32;*Tokens&#32;=&#32;<emphasis role="keyword">nullptr</emphasis>;
06992 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(NumTokens)
06993 &#32;&#32;&#32;&#32;*NumTokens&#32;=&#32;0;
06994 
06995 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(isNotUsableTU(TU))&#32;{
06996 &#32;&#32;&#32;&#32;<link linkend="__c_x_translation_unit_8h_1a4ec17e6e03ea0baf73e27802eae36106">LOG_BAD_TU</link>(TU);
06997 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
06998 &#32;&#32;}
06999 
07000 &#32;&#32;ASTUnit&#32;*CXXUnit&#32;=&#32;cxtu::getASTUnit(TU);
07001 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!CXXUnit&#32;||&#32;!Tokens&#32;||&#32;!NumTokens)
07002 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
07003 
07004 &#32;&#32;ASTUnit::ConcurrencyCheck&#32;Check(*CXXUnit);
07005 
07006 &#32;&#32;SourceRange&#32;R&#32;=&#32;cxloc::translateCXSourceRange(Range);
07007 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(R.isInvalid())
07008 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
07009 
07010 &#32;&#32;SmallVector&lt;CXToken,&#32;32&gt;&#32;CXTokens;
07011 &#32;&#32;getTokens(CXXUnit,&#32;R,&#32;CXTokens);
07012 
07013 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(CXTokens.empty())
07014 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
07015 
07016 &#32;&#32;*Tokens&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis>CXToken&#32;*<emphasis role="keyword">&gt;</emphasis>(
07017 &#32;&#32;&#32;&#32;&#32;&#32;llvm::safe_malloc(<emphasis role="keyword">sizeof</emphasis>(CXToken)&#32;*&#32;CXTokens.size()));
07018 &#32;&#32;memmove(*Tokens,&#32;CXTokens.data(),&#32;<emphasis role="keyword">sizeof</emphasis>(CXToken)&#32;*&#32;CXTokens.size());
07019 &#32;&#32;*NumTokens&#32;=&#32;CXTokens.size();
07020 }
07021 
<anchor xml:id="__c_index_8cpp_source_1l07022"/><link linkend="__c_index_8cpp_1a69a3b1b393fd8cd3cf50802b2a5b08af">07022</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="__c_index_8cpp_1a69a3b1b393fd8cd3cf50802b2a5b08af">clang_disposeTokens</link>(CXTranslationUnit&#32;TU,&#32;CXToken&#32;*Tokens,
07023 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;NumTokens)&#32;{
07024 &#32;&#32;free(Tokens);
07025 }
07026 
07027 <emphasis role="comment">//===----------------------------------------------------------------------===//</emphasis>
07028 <emphasis role="comment">//&#32;Token&#32;annotation&#32;APIs.</emphasis>
07029 <emphasis role="comment">//===----------------------------------------------------------------------===//</emphasis>
07030 
07031 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">enum</emphasis>&#32;CXChildVisitResult&#32;AnnotateTokensVisitor(CXCursor&#32;cursor,
07032 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;CXCursor&#32;parent,
07033 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;CXClientData&#32;client_data);
07034 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;AnnotateTokensPostChildrenVisitor(CXCursor&#32;cursor,
07035 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;CXClientData&#32;client_data);
07036 
07037 <emphasis role="keyword">namespace&#32;</emphasis>{
07038 <emphasis role="keyword">class&#32;</emphasis>AnnotateTokensWorker&#32;{
07039 &#32;&#32;CXToken&#32;*Tokens;
07040 &#32;&#32;CXCursor&#32;*Cursors;
07041 &#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;NumTokens;
07042 &#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;TokIdx;
07043 &#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;PreprocessingTokIdx;
07044 &#32;&#32;<link linkend="_classclang_1_1cxcursor_1_1_cursor_visitor">CursorVisitor</link>&#32;AnnotateVis;
07045 &#32;&#32;SourceManager&#32;&amp;SrcMgr;
07046 &#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;HasContextSensitiveKeywords;
07047 
07048 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>PostChildrenAction&#32;{
07049 &#32;&#32;&#32;&#32;CXCursor&#32;cursor;
07050 &#32;&#32;&#32;&#32;<emphasis role="keyword">enum</emphasis>&#32;Action&#32;{&#32;Invalid,&#32;Ignore,&#32;Postpone&#32;}&#32;action;
07051 &#32;&#32;};
07052 &#32;&#32;<emphasis role="keyword">using</emphasis>&#32;PostChildrenActions&#32;=&#32;SmallVector&lt;PostChildrenAction,&#32;0&gt;;
07053 
07054 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>PostChildrenInfo&#32;{
07055 &#32;&#32;&#32;&#32;CXCursor&#32;Cursor;
07056 &#32;&#32;&#32;&#32;SourceRange&#32;CursorRange;
07057 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;BeforeReachingCursorIdx;
07058 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;BeforeChildrenTokenIdx;
07059 &#32;&#32;&#32;&#32;PostChildrenActions&#32;ChildActions;
07060 &#32;&#32;};
07061 &#32;&#32;SmallVector&lt;PostChildrenInfo,&#32;8&gt;&#32;PostChildrenInfos;
07062 
07063 &#32;&#32;CXToken&#32;&amp;getTok(<emphasis role="keywordtype">unsigned</emphasis>&#32;Idx)&#32;{
07064 &#32;&#32;&#32;&#32;assert(Idx&#32;&lt;&#32;NumTokens);
07065 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;Tokens[Idx];
07066 &#32;&#32;}
07067 &#32;&#32;<emphasis role="keyword">const</emphasis>&#32;CXToken&#32;&amp;getTok(<emphasis role="keywordtype">unsigned</emphasis>&#32;Idx)<emphasis role="keyword">&#32;const&#32;</emphasis>{
07068 &#32;&#32;&#32;&#32;assert(Idx&#32;&lt;&#32;NumTokens);
07069 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;Tokens[Idx];
07070 &#32;&#32;}
07071 &#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;MoreTokens()<emphasis role="keyword">&#32;const&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;TokIdx&#32;&lt;&#32;NumTokens;&#32;}
07072 &#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;NextToken()<emphasis role="keyword">&#32;const&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;TokIdx;&#32;}
07073 &#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;AdvanceToken()&#32;{&#32;++TokIdx;&#32;}
07074 &#32;&#32;SourceLocation&#32;GetTokenLoc(<emphasis role="keywordtype">unsigned</emphasis>&#32;tokI)&#32;{
07075 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;SourceLocation::getFromRawEncoding(getTok(tokI).int_data[1]);
07076 &#32;&#32;}
07077 &#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;isFunctionMacroToken(<emphasis role="keywordtype">unsigned</emphasis>&#32;tokI)<emphasis role="keyword">&#32;const&#32;</emphasis>{
07078 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;getTok(tokI).int_data[3]&#32;!=&#32;0;
07079 &#32;&#32;}
07080 &#32;&#32;SourceLocation&#32;getFunctionMacroTokenLoc(<emphasis role="keywordtype">unsigned</emphasis>&#32;tokI)<emphasis role="keyword">&#32;const&#32;</emphasis>{
07081 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;SourceLocation::getFromRawEncoding(getTok(tokI).int_data[3]);
07082 &#32;&#32;}
07083 
07084 &#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;annotateAndAdvanceTokens(CXCursor,&#32;<link linkend="__index___internal_8h_1afca6208bdc188ac29b169260314b7af2">RangeComparisonResult</link>,&#32;SourceRange);
07085 &#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;annotateAndAdvanceFunctionMacroTokens(CXCursor,&#32;<link linkend="__index___internal_8h_1afca6208bdc188ac29b169260314b7af2">RangeComparisonResult</link>,
07086 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;SourceRange);
07087 
07088 <emphasis role="keyword">public</emphasis>:
07089 &#32;&#32;AnnotateTokensWorker(CXToken&#32;*tokens,&#32;CXCursor&#32;*cursors,&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;numTokens,
07090 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;CXTranslationUnit&#32;TU,&#32;SourceRange&#32;RegionOfInterest)
07091 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;Tokens(tokens),&#32;Cursors(cursors),&#32;NumTokens(numTokens),&#32;TokIdx(0),
07092 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;PreprocessingTokIdx(0),
07093 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;AnnotateVis(TU,&#32;AnnotateTokensVisitor,&#32;this,
07094 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*VisitPreprocessorLast=*/</emphasis>true,
07095 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*VisitIncludedEntities=*/</emphasis>false,&#32;RegionOfInterest,
07096 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*VisitDeclsOnly=*/</emphasis>false,
07097 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;AnnotateTokensPostChildrenVisitor),
07098 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;SrcMgr(cxtu::getASTUnit(TU)-&gt;getSourceManager()),
07099 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;HasContextSensitiveKeywords(false)&#32;{}
07100 
07101 &#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;VisitChildren(CXCursor&#32;C)&#32;{&#32;AnnotateVis.<link linkend="_classclang_1_1cxcursor_1_1_cursor_visitor_1ada34939666b6f90e3144f4624fc64896">VisitChildren</link>(C);&#32;}
07102 &#32;&#32;<emphasis role="keyword">enum</emphasis>&#32;CXChildVisitResult&#32;Visit(CXCursor&#32;cursor,&#32;CXCursor&#32;parent);
07103 &#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;IsIgnoredChildCursor(CXCursor&#32;cursor)&#32;<emphasis role="keyword">const</emphasis>;
07104 &#32;&#32;PostChildrenActions&#32;DetermineChildActions(CXCursor&#32;Cursor)&#32;<emphasis role="keyword">const</emphasis>;
07105 
07106 &#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;postVisitChildren(CXCursor&#32;cursor);
07107 &#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;HandlePostPonedChildCursors(<emphasis role="keyword">const</emphasis>&#32;PostChildrenInfo&#32;&amp;Info);
07108 &#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;HandlePostPonedChildCursor(CXCursor&#32;Cursor,&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;StartTokenIndex);
07109 
07110 &#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;AnnotateTokens();
07111 
07114 &#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;hasContextSensitiveKeywords()<emphasis role="keyword">&#32;const&#32;</emphasis>{
07115 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;HasContextSensitiveKeywords;
07116 &#32;&#32;}
07117 
07118 &#32;&#32;~AnnotateTokensWorker()&#32;{&#32;assert(PostChildrenInfos.empty());&#32;}
07119 };
07120 }&#32;<emphasis role="comment">//&#32;namespace</emphasis>
07121 
07122 <emphasis role="keywordtype">void</emphasis>&#32;AnnotateTokensWorker::AnnotateTokens()&#32;{
07123 &#32;&#32;<emphasis role="comment">//&#32;Walk&#32;the&#32;AST&#32;within&#32;the&#32;region&#32;of&#32;interest,&#32;annotating&#32;tokens</emphasis>
07124 &#32;&#32;<emphasis role="comment">//&#32;along&#32;the&#32;way.</emphasis>
07125 &#32;&#32;AnnotateVis.<link linkend="_classclang_1_1cxcursor_1_1_cursor_visitor_1a24fbcc462d22a47ef5e7c02eef77d610">visitFileRegion</link>();
07126 }
07127 
07128 <emphasis role="keywordtype">bool</emphasis>&#32;AnnotateTokensWorker::IsIgnoredChildCursor(CXCursor&#32;cursor)<emphasis role="keyword">&#32;const&#32;</emphasis>{
07129 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(PostChildrenInfos.empty())
07130 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
07131 
07132 &#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;&amp;ChildAction&#32;:&#32;PostChildrenInfos.back().ChildActions)&#32;{
07133 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(ChildAction.cursor&#32;==&#32;cursor&#32;&amp;&amp;
07134 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ChildAction.action&#32;==&#32;PostChildrenAction::Ignore)&#32;{
07135 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
07136 &#32;&#32;&#32;&#32;}
07137 &#32;&#32;}
07138 
07139 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
07140 }
07141 
<anchor xml:id="__c_index_8cpp_source_1l07142"/><link linkend="__c_index_8cpp_1a6aae6780bf1701f1a1857b467af930a0">07142</link> <emphasis role="keyword">const</emphasis>&#32;CXXOperatorCallExpr&#32;*<link linkend="__c_index_8cpp_1a6aae6780bf1701f1a1857b467af930a0">GetSubscriptOrCallOperator</link>(CXCursor&#32;Cursor)&#32;{
07143 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!<link linkend="__c_index_8cpp_1ab958945dd59c351e1ae1a3f7f5668095">clang_isExpression</link>(Cursor.kind))
07144 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">nullptr</emphasis>;
07145 
07146 &#32;&#32;<emphasis role="keyword">const</emphasis>&#32;Expr&#32;*E&#32;=&#32;<link linkend="_namespaceclang_1_1cxcursor_1a80837a3710c6df0dfc24b5ee1d94ff9b">getCursorExpr</link>(Cursor);
07147 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;*OCE&#32;=&#32;dyn_cast&lt;CXXOperatorCallExpr&gt;(E))&#32;{
07148 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;OverloadedOperatorKind&#32;Kind&#32;=&#32;OCE-&gt;getOperator();
07149 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(Kind&#32;==&#32;OO_Call&#32;||&#32;Kind&#32;==&#32;OO_Subscript)
07150 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;OCE;
07151 &#32;&#32;}
07152 
07153 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">nullptr</emphasis>;
07154 }
07155 
07156 AnnotateTokensWorker::PostChildrenActions
07157 AnnotateTokensWorker::DetermineChildActions(CXCursor&#32;Cursor)<emphasis role="keyword">&#32;const&#32;</emphasis>{
07158 &#32;&#32;PostChildrenActions&#32;actions;
07159 
07160 &#32;&#32;<emphasis role="comment">//&#32;The&#32;DeclRefExpr&#32;of&#32;CXXOperatorCallExpr&#32;refering&#32;to&#32;the&#32;custom&#32;operator&#32;is</emphasis>
07161 &#32;&#32;<emphasis role="comment">//&#32;visited&#32;before&#32;the&#32;arguments&#32;to&#32;the&#32;operator&#32;call.&#32;For&#32;the&#32;Call&#32;and</emphasis>
07162 &#32;&#32;<emphasis role="comment">//&#32;Subscript&#32;operator&#32;the&#32;range&#32;of&#32;this&#32;DeclRefExpr&#32;includes&#32;the&#32;whole&#32;call</emphasis>
07163 &#32;&#32;<emphasis role="comment">//&#32;expression,&#32;so&#32;that&#32;all&#32;tokens&#32;in&#32;that&#32;range&#32;would&#32;be&#32;mapped&#32;to&#32;the</emphasis>
07164 &#32;&#32;<emphasis role="comment">//&#32;operator&#32;function,&#32;including&#32;the&#32;tokens&#32;of&#32;the&#32;arguments.&#32;To&#32;avoid&#32;that,</emphasis>
07165 &#32;&#32;<emphasis role="comment">//&#32;ensure&#32;to&#32;visit&#32;this&#32;DeclRefExpr&#32;as&#32;last&#32;node.</emphasis>
07166 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;*OCE&#32;=&#32;<link linkend="__c_index_8cpp_1a6aae6780bf1701f1a1857b467af930a0">GetSubscriptOrCallOperator</link>(Cursor))&#32;{
07167 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;Expr&#32;*Callee&#32;=&#32;OCE-&gt;getCallee();
07168 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;ImplicitCastExpr&#32;*ICE&#32;=&#32;dyn_cast&lt;ImplicitCastExpr&gt;(Callee))&#32;{
07169 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;Expr&#32;*SubExpr&#32;=&#32;ICE-&gt;getSubExpr();
07170 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;DeclRefExpr&#32;*DRE&#32;=&#32;dyn_cast&lt;DeclRefExpr&gt;(SubExpr))&#32;{
07171 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;Decl&#32;*parentDecl&#32;=&#32;<link linkend="_namespaceclang_1_1cxcursor_1a1f702246831c96afd990e457613dc642">getCursorDecl</link>(Cursor);
07172 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;CXTranslationUnit&#32;TU&#32;=&#32;<link linkend="__c_x_cursor_8cpp_1ace7e0a4fcee3aa54c74aa75615cef62a">clang_Cursor_getTranslationUnit</link>(Cursor);
07173 
07174 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Visit&#32;the&#32;DeclRefExpr&#32;as&#32;last.</emphasis>
07175 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;CXCursor&#32;cxChild&#32;=&#32;<link linkend="_namespaceclang_1_1cxcursor_1ab61ec2059175833672e8e78a376bb218">MakeCXCursor</link>(DRE,&#32;parentDecl,&#32;TU);
07176 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;actions.push_back({cxChild,&#32;PostChildrenAction::Postpone});
07177 
07178 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;The&#32;parent&#32;of&#32;the&#32;DeclRefExpr,&#32;an&#32;ImplicitCastExpr,&#32;has&#32;an&#32;equally</emphasis>
07179 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;wide&#32;range&#32;as&#32;the&#32;DeclRefExpr.&#32;We&#32;can&#32;skip&#32;visiting&#32;this&#32;entirely.</emphasis>
07180 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cxChild&#32;=&#32;<link linkend="_namespaceclang_1_1cxcursor_1ab61ec2059175833672e8e78a376bb218">MakeCXCursor</link>(ICE,&#32;parentDecl,&#32;TU);
07181 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;actions.push_back({cxChild,&#32;PostChildrenAction::Ignore});
07182 &#32;&#32;&#32;&#32;&#32;&#32;}
07183 &#32;&#32;&#32;&#32;}
07184 &#32;&#32;}
07185 
07186 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;actions;
07187 }
07188 
07189 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;updateCursorAnnotation(CXCursor&#32;&amp;Cursor,
07190 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;CXCursor&#32;&amp;updateC)&#32;{
07191 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="__c_index_8cpp_1a0c5b391d8bca745084fb8906cce6f66c">clang_isInvalid</link>(updateC.kind)&#32;||&#32;!<link linkend="__c_index_8cpp_1a0c5b391d8bca745084fb8906cce6f66c">clang_isInvalid</link>(Cursor.kind))
07192 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
07193 &#32;&#32;Cursor&#32;=&#32;updateC;
07194 }
07195 
07202 <emphasis role="keywordtype">void</emphasis>&#32;AnnotateTokensWorker::annotateAndAdvanceTokens(
07203 &#32;&#32;&#32;&#32;CXCursor&#32;updateC,&#32;<link linkend="__index___internal_8h_1afca6208bdc188ac29b169260314b7af2">RangeComparisonResult</link>&#32;compResult,&#32;SourceRange&#32;range)&#32;{
07204 &#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(MoreTokens())&#32;{
07205 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;I&#32;=&#32;NextToken();
07206 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(isFunctionMacroToken(I))
07207 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!annotateAndAdvanceFunctionMacroTokens(updateC,&#32;compResult,&#32;range))
07208 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
07209 
07210 &#32;&#32;&#32;&#32;SourceLocation&#32;TokLoc&#32;=&#32;GetTokenLoc(I);
07211 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(LocationCompare(SrcMgr,&#32;TokLoc,&#32;range)&#32;==&#32;compResult)&#32;{
07212 &#32;&#32;&#32;&#32;&#32;&#32;updateCursorAnnotation(Cursors[I],&#32;updateC);
07213 &#32;&#32;&#32;&#32;&#32;&#32;AdvanceToken();
07214 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">continue</emphasis>;
07215 &#32;&#32;&#32;&#32;}
07216 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
07217 &#32;&#32;}
07218 }
07219 
07222 <emphasis role="keywordtype">bool</emphasis>&#32;AnnotateTokensWorker::annotateAndAdvanceFunctionMacroTokens(
07223 &#32;&#32;&#32;&#32;CXCursor&#32;updateC,&#32;<link linkend="__index___internal_8h_1afca6208bdc188ac29b169260314b7af2">RangeComparisonResult</link>&#32;compResult,&#32;SourceRange&#32;range)&#32;{
07224 &#32;&#32;assert(MoreTokens());
07225 &#32;&#32;assert(isFunctionMacroToken(NextToken())&#32;&amp;&amp;
07226 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;Should&#32;be&#32;called&#32;only&#32;for&#32;macro&#32;arg&#32;tokens&quot;</emphasis>);
07227 
07228 &#32;&#32;<emphasis role="comment">//&#32;This&#32;works&#32;differently&#32;than&#32;annotateAndAdvanceTokens;&#32;because&#32;expanded</emphasis>
07229 &#32;&#32;<emphasis role="comment">//&#32;macro&#32;arguments&#32;can&#32;have&#32;arbitrary&#32;translation-unit&#32;source&#32;order,&#32;we&#32;do&#32;not</emphasis>
07230 &#32;&#32;<emphasis role="comment">//&#32;advance&#32;the&#32;token&#32;index&#32;one&#32;by&#32;one&#32;until&#32;a&#32;token&#32;fails&#32;the&#32;range&#32;test.</emphasis>
07231 &#32;&#32;<emphasis role="comment">//&#32;We&#32;only&#32;advance&#32;once&#32;past&#32;all&#32;of&#32;the&#32;macro&#32;arg&#32;tokens&#32;if&#32;all&#32;of&#32;them</emphasis>
07232 &#32;&#32;<emphasis role="comment">//&#32;pass&#32;the&#32;range&#32;test.&#32;If&#32;one&#32;of&#32;them&#32;fails&#32;we&#32;keep&#32;the&#32;token&#32;index&#32;pointing</emphasis>
07233 &#32;&#32;<emphasis role="comment">//&#32;at&#32;the&#32;start&#32;of&#32;the&#32;macro&#32;arg&#32;tokens&#32;so&#32;that&#32;the&#32;failing&#32;token&#32;will&#32;be</emphasis>
07234 &#32;&#32;<emphasis role="comment">//&#32;annotated&#32;by&#32;a&#32;subsequent&#32;annotation&#32;try.</emphasis>
07235 
07236 &#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;atLeastOneCompFail&#32;=&#32;<emphasis role="keyword">false</emphasis>;
07237 
07238 &#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;I&#32;=&#32;NextToken();
07239 &#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(;&#32;I&#32;&lt;&#32;NumTokens&#32;&amp;&amp;&#32;isFunctionMacroToken(I);&#32;++I)&#32;{
07240 &#32;&#32;&#32;&#32;SourceLocation&#32;TokLoc&#32;=&#32;getFunctionMacroTokenLoc(I);
07241 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(TokLoc.isFileID())
07242 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">continue</emphasis>;&#32;<emphasis role="comment">//&#32;not&#32;macro&#32;arg&#32;token,&#32;it&apos;s&#32;parens&#32;or&#32;comma.</emphasis>
07243 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(LocationCompare(SrcMgr,&#32;TokLoc,&#32;range)&#32;==&#32;compResult)&#32;{
07244 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="__c_index_8cpp_1a0c5b391d8bca745084fb8906cce6f66c">clang_isInvalid</link>(<link linkend="__c_index_8cpp_1a88e594fe730830706a0b7cff796eaedf">clang_getCursorKind</link>(Cursors[I])))
07245 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Cursors[I]&#32;=&#32;updateC;
07246 &#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>
07247 &#32;&#32;&#32;&#32;&#32;&#32;atLeastOneCompFail&#32;=&#32;<emphasis role="keyword">true</emphasis>;
07248 &#32;&#32;}
07249 
07250 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(atLeastOneCompFail)
07251 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
07252 
07253 &#32;&#32;TokIdx&#32;=&#32;I;&#32;<emphasis role="comment">//&#32;All&#32;of&#32;the&#32;tokens&#32;were&#32;handled,&#32;advance&#32;beyond&#32;all&#32;of&#32;them.</emphasis>
07254 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
07255 }
07256 
07257 <emphasis role="keyword">enum</emphasis>&#32;CXChildVisitResult&#32;AnnotateTokensWorker::Visit(CXCursor&#32;cursor,
07258 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;CXCursor&#32;parent)&#32;{
07259 &#32;&#32;SourceRange&#32;cursorRange&#32;=&#32;getRawCursorExtent(cursor);
07260 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(cursorRange.isInvalid())
07261 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;CXChildVisit_Recurse;
07262 
07263 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(IsIgnoredChildCursor(cursor))
07264 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;CXChildVisit_Continue;
07265 
07266 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!HasContextSensitiveKeywords)&#32;{
07267 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Objective-C&#32;properties&#32;can&#32;have&#32;context-sensitive&#32;keywords.</emphasis>
07268 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(cursor.kind&#32;==&#32;CXCursor_ObjCPropertyDecl)&#32;{
07269 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;ObjCPropertyDecl&#32;*Property&#32;=
07270 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;dyn_cast_or_null&lt;ObjCPropertyDecl&gt;(<link linkend="_namespaceclang_1_1cxcursor_1a1f702246831c96afd990e457613dc642">getCursorDecl</link>(cursor)))
07271 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;HasContextSensitiveKeywords&#32;=
07272 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Property-&gt;getPropertyAttributesAsWritten()&#32;!=&#32;0;
07273 &#32;&#32;&#32;&#32;}
07274 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Objective-C&#32;methods&#32;can&#32;have&#32;context-sensitive&#32;keywords.</emphasis>
07275 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(cursor.kind&#32;==&#32;CXCursor_ObjCInstanceMethodDecl&#32;||
07276 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cursor.kind&#32;==&#32;CXCursor_ObjCClassMethodDecl)&#32;{
07277 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;ObjCMethodDecl&#32;*Method&#32;=
07278 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;dyn_cast_or_null&lt;ObjCMethodDecl&gt;(<link linkend="_namespaceclang_1_1cxcursor_1a1f702246831c96afd990e457613dc642">getCursorDecl</link>(cursor)))&#32;{
07279 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(Method-&gt;getObjCDeclQualifier())
07280 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;HasContextSensitiveKeywords&#32;=&#32;<emphasis role="keyword">true</emphasis>;
07281 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
07282 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;*P&#32;:&#32;Method-&gt;parameters())&#32;{
07283 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(P-&gt;getObjCDeclQualifier())&#32;{
07284 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;HasContextSensitiveKeywords&#32;=&#32;<emphasis role="keyword">true</emphasis>;
07285 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
07286 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
07287 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
07288 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
07289 &#32;&#32;&#32;&#32;&#32;&#32;}
07290 &#32;&#32;&#32;&#32;}
07291 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;C++&#32;methods&#32;can&#32;have&#32;context-sensitive&#32;keywords.</emphasis>
07292 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(cursor.kind&#32;==&#32;CXCursor_CXXMethod)&#32;{
07293 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;CXXMethodDecl&#32;*Method&#32;=
07294 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;dyn_cast_or_null&lt;CXXMethodDecl&gt;(<link linkend="_namespaceclang_1_1cxcursor_1a1f702246831c96afd990e457613dc642">getCursorDecl</link>(cursor)))&#32;{
07295 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(Method-&gt;hasAttr&lt;FinalAttr&gt;()&#32;||&#32;Method-&gt;hasAttr&lt;OverrideAttr&gt;())
07296 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;HasContextSensitiveKeywords&#32;=&#32;<emphasis role="keyword">true</emphasis>;
07297 &#32;&#32;&#32;&#32;&#32;&#32;}
07298 &#32;&#32;&#32;&#32;}
07299 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;C++&#32;classes&#32;can&#32;have&#32;context-sensitive&#32;keywords.</emphasis>
07300 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(cursor.kind&#32;==&#32;CXCursor_StructDecl&#32;||
07301 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cursor.kind&#32;==&#32;CXCursor_ClassDecl&#32;||
07302 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cursor.kind&#32;==&#32;CXCursor_ClassTemplate&#32;||
07303 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cursor.kind&#32;==&#32;CXCursor_ClassTemplatePartialSpecialization)&#32;{
07304 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;Decl&#32;*D&#32;=&#32;<link linkend="_namespaceclang_1_1cxcursor_1a1f702246831c96afd990e457613dc642">getCursorDecl</link>(cursor))
07305 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(D-&gt;hasAttr&lt;FinalAttr&gt;())
07306 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;HasContextSensitiveKeywords&#32;=&#32;<emphasis role="keyword">true</emphasis>;
07307 &#32;&#32;&#32;&#32;}
07308 &#32;&#32;}
07309 
07310 &#32;&#32;<emphasis role="comment">//&#32;Don&apos;t&#32;override&#32;a&#32;property&#32;annotation&#32;with&#32;its&#32;getter/setter&#32;method.</emphasis>
07311 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(cursor.kind&#32;==&#32;CXCursor_ObjCInstanceMethodDecl&#32;&amp;&amp;
07312 &#32;&#32;&#32;&#32;&#32;&#32;parent.kind&#32;==&#32;CXCursor_ObjCPropertyDecl)
07313 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;CXChildVisit_Continue;
07314 
07315 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="__c_index_8cpp_1ae649be0d722f2ec48dae4b152a5b2709">clang_isPreprocessing</link>(cursor.kind))&#32;{
07316 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Items&#32;in&#32;the&#32;preprocessing&#32;record&#32;are&#32;kept&#32;separate&#32;from&#32;items&#32;in</emphasis>
07317 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;declarations,&#32;so&#32;we&#32;keep&#32;a&#32;separate&#32;token&#32;index.</emphasis>
07318 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;SavedTokIdx&#32;=&#32;TokIdx;
07319 &#32;&#32;&#32;&#32;TokIdx&#32;=&#32;PreprocessingTokIdx;
07320 
07321 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Skip&#32;tokens&#32;up&#32;until&#32;we&#32;catch&#32;up&#32;to&#32;the&#32;beginning&#32;of&#32;the&#32;preprocessing</emphasis>
07322 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;entry.</emphasis>
07323 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(MoreTokens())&#32;{
07324 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;I&#32;=&#32;NextToken();
07325 &#32;&#32;&#32;&#32;&#32;&#32;SourceLocation&#32;TokLoc&#32;=&#32;GetTokenLoc(I);
07326 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(LocationCompare(SrcMgr,&#32;TokLoc,&#32;cursorRange))&#32;{
07327 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="__index___internal_8h_1afca6208bdc188ac29b169260314b7af2a1626bf1782f58fe2a2bf082c4c30e850">RangeBefore</link>:
07328 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;AdvanceToken();
07329 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">continue</emphasis>;
07330 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="__index___internal_8h_1afca6208bdc188ac29b169260314b7af2a7540aa4ebed8662d6f41ec33073611a0">RangeAfter</link>:
07331 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="__index___internal_8h_1afca6208bdc188ac29b169260314b7af2a87e2eee30c9b5a3c2108f2128413157a">RangeOverlap</link>:
07332 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
07333 &#32;&#32;&#32;&#32;&#32;&#32;}
07334 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
07335 &#32;&#32;&#32;&#32;}
07336 
07337 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Look&#32;at&#32;all&#32;of&#32;the&#32;tokens&#32;within&#32;this&#32;range.</emphasis>
07338 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(MoreTokens())&#32;{
07339 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;I&#32;=&#32;NextToken();
07340 &#32;&#32;&#32;&#32;&#32;&#32;SourceLocation&#32;TokLoc&#32;=&#32;GetTokenLoc(I);
07341 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(LocationCompare(SrcMgr,&#32;TokLoc,&#32;cursorRange))&#32;{
07342 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="__index___internal_8h_1afca6208bdc188ac29b169260314b7af2a1626bf1782f58fe2a2bf082c4c30e850">RangeBefore</link>:
07343 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;llvm_unreachable(<emphasis role="stringliteral">&quot;Infeasible&quot;</emphasis>);
07344 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="__index___internal_8h_1afca6208bdc188ac29b169260314b7af2a7540aa4ebed8662d6f41ec33073611a0">RangeAfter</link>:
07345 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
07346 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="__index___internal_8h_1afca6208bdc188ac29b169260314b7af2a87e2eee30c9b5a3c2108f2128413157a">RangeOverlap</link>:
07347 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;For&#32;macro&#32;expansions,&#32;just&#32;note&#32;where&#32;the&#32;beginning&#32;of&#32;the&#32;macro</emphasis>
07348 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;expansion&#32;occurs.</emphasis>
07349 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(cursor.kind&#32;==&#32;CXCursor_MacroExpansion)&#32;{
07350 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(TokLoc&#32;==&#32;cursorRange.getBegin())
07351 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Cursors[I]&#32;=&#32;cursor;
07352 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;AdvanceToken();
07353 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
07354 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
07355 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;We&#32;may&#32;have&#32;already&#32;annotated&#32;macro&#32;names&#32;inside&#32;macro&#32;definitions.</emphasis>
07356 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(Cursors[I].kind&#32;!=&#32;CXCursor_MacroExpansion)
07357 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Cursors[I]&#32;=&#32;cursor;
07358 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;AdvanceToken();
07359 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">continue</emphasis>;
07360 &#32;&#32;&#32;&#32;&#32;&#32;}
07361 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
07362 &#32;&#32;&#32;&#32;}
07363 
07364 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Save&#32;the&#32;preprocessing&#32;token&#32;index;&#32;restore&#32;the&#32;non-preprocessing</emphasis>
07365 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;token&#32;index.</emphasis>
07366 &#32;&#32;&#32;&#32;PreprocessingTokIdx&#32;=&#32;TokIdx;
07367 &#32;&#32;&#32;&#32;TokIdx&#32;=&#32;SavedTokIdx;
07368 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;CXChildVisit_Recurse;
07369 &#32;&#32;}
07370 
07371 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(cursorRange.isInvalid())
07372 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;CXChildVisit_Continue;
07373 
07374 &#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;BeforeReachingCursorIdx&#32;=&#32;NextToken();
07375 &#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">enum</emphasis>&#32;CXCursorKind&#32;cursorK&#32;=&#32;<link linkend="__c_index_8cpp_1a88e594fe730830706a0b7cff796eaedf">clang_getCursorKind</link>(cursor);
07376 &#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">enum</emphasis>&#32;CXCursorKind&#32;K&#32;=&#32;<link linkend="__c_index_8cpp_1a88e594fe730830706a0b7cff796eaedf">clang_getCursorKind</link>(parent);
07377 &#32;&#32;<emphasis role="keyword">const</emphasis>&#32;CXCursor&#32;updateC&#32;=
07378 &#32;&#32;&#32;&#32;&#32;&#32;(<link linkend="__c_index_8cpp_1a0c5b391d8bca745084fb8906cce6f66c">clang_isInvalid</link>(K)&#32;||&#32;K&#32;==&#32;CXCursor_TranslationUnit&#32;||
07379 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Attributes&#32;are&#32;annotated&#32;out-of-order,&#32;skip&#32;tokens&#32;until&#32;we&#32;reach&#32;it.</emphasis>
07380 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__c_index_8cpp_1ab407667e249e0d44e6c56af84f2c28ba">clang_isAttribute</link>(cursor.kind))
07381 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;?&#32;<link linkend="__c_index_8cpp_1aa22233466eaf91f6f3cf6b84255c3b68">clang_getNullCursor</link>()
07382 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;parent;
07383 
07384 &#32;&#32;annotateAndAdvanceTokens(updateC,&#32;<link linkend="__index___internal_8h_1afca6208bdc188ac29b169260314b7af2a1626bf1782f58fe2a2bf082c4c30e850">RangeBefore</link>,&#32;cursorRange);
07385 
07386 &#32;&#32;<emphasis role="comment">//&#32;Avoid&#32;having&#32;the&#32;cursor&#32;of&#32;an&#32;expression&#32;&quot;overwrite&quot;&#32;the&#32;annotation&#32;of&#32;the</emphasis>
07387 &#32;&#32;<emphasis role="comment">//&#32;variable&#32;declaration&#32;that&#32;it&#32;belongs&#32;to.</emphasis>
07388 &#32;&#32;<emphasis role="comment">//&#32;This&#32;can&#32;happen&#32;for&#32;C++&#32;constructor&#32;expressions&#32;whose&#32;range&#32;generally</emphasis>
07389 &#32;&#32;<emphasis role="comment">//&#32;include&#32;the&#32;variable&#32;declaration,&#32;e.g.:</emphasis>
07390 &#32;&#32;<emphasis role="comment">//&#32;&#32;MyCXXClass&#32;foo;&#32;//&#32;Make&#32;sure&#32;we&#32;don&apos;t&#32;annotate&#32;&apos;foo&apos;&#32;as&#32;a&#32;CallExpr&#32;cursor.</emphasis>
07391 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="__c_index_8cpp_1ab958945dd59c351e1ae1a3f7f5668095">clang_isExpression</link>(cursorK)&#32;&amp;&amp;&#32;MoreTokens())&#32;{
07392 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;Expr&#32;*E&#32;=&#32;<link linkend="_namespaceclang_1_1cxcursor_1a80837a3710c6df0dfc24b5ee1d94ff9b">getCursorExpr</link>(cursor);
07393 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;Decl&#32;*D&#32;=&#32;<link linkend="_namespaceclang_1_1cxcursor_1a1f702246831c96afd990e457613dc642">getCursorDecl</link>(cursor))&#32;{
07394 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;I&#32;=&#32;NextToken();
07395 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(E-&gt;getBeginLoc().isValid()&#32;&amp;&amp;&#32;D-&gt;getLocation().isValid()&#32;&amp;&amp;
07396 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;E-&gt;getBeginLoc()&#32;==&#32;D-&gt;getLocation()&#32;&amp;&amp;
07397 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;E-&gt;getBeginLoc()&#32;==&#32;GetTokenLoc(I))&#32;{
07398 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;updateCursorAnnotation(Cursors[I],&#32;updateC);
07399 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;AdvanceToken();
07400 &#32;&#32;&#32;&#32;&#32;&#32;}
07401 &#32;&#32;&#32;&#32;}
07402 &#32;&#32;}
07403 
07404 &#32;&#32;<emphasis role="comment">//&#32;Before&#32;recursing&#32;into&#32;the&#32;children&#32;keep&#32;some&#32;state&#32;that&#32;we&#32;are&#32;going</emphasis>
07405 &#32;&#32;<emphasis role="comment">//&#32;to&#32;use&#32;in&#32;the&#32;AnnotateTokensWorker::postVisitChildren&#32;callback&#32;to&#32;do&#32;some</emphasis>
07406 &#32;&#32;<emphasis role="comment">//&#32;extra&#32;work&#32;after&#32;the&#32;child&#32;nodes&#32;are&#32;visited.</emphasis>
07407 &#32;&#32;<emphasis role="comment">//&#32;Note&#32;that&#32;we&#32;don&apos;t&#32;call&#32;VisitChildren&#32;here&#32;to&#32;avoid&#32;traversing&#32;statements</emphasis>
07408 &#32;&#32;<emphasis role="comment">//&#32;code-recursively&#32;which&#32;can&#32;blow&#32;the&#32;stack.</emphasis>
07409 
07410 &#32;&#32;PostChildrenInfo&#32;Info;
07411 &#32;&#32;Info.Cursor&#32;=&#32;cursor;
07412 &#32;&#32;Info.CursorRange&#32;=&#32;cursorRange;
07413 &#32;&#32;Info.BeforeReachingCursorIdx&#32;=&#32;BeforeReachingCursorIdx;
07414 &#32;&#32;Info.BeforeChildrenTokenIdx&#32;=&#32;NextToken();
07415 &#32;&#32;Info.ChildActions&#32;=&#32;DetermineChildActions(cursor);
07416 &#32;&#32;PostChildrenInfos.push_back(Info);
07417 
07418 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;CXChildVisit_Recurse;
07419 }
07420 
07421 <emphasis role="keywordtype">bool</emphasis>&#32;AnnotateTokensWorker::postVisitChildren(CXCursor&#32;cursor)&#32;{
07422 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(PostChildrenInfos.empty())
07423 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
07424 &#32;&#32;<emphasis role="keyword">const</emphasis>&#32;PostChildrenInfo&#32;&amp;Info&#32;=&#32;PostChildrenInfos.back();
07425 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!<link linkend="__c_index_8cpp_1a96d5f0059613428736715de616ed38f9">clang_equalCursors</link>(Info.Cursor,&#32;cursor))
07426 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
07427 
07428 &#32;&#32;HandlePostPonedChildCursors(Info);
07429 
07430 &#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;BeforeChildren&#32;=&#32;Info.BeforeChildrenTokenIdx;
07431 &#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;AfterChildren&#32;=&#32;NextToken();
07432 &#32;&#32;SourceRange&#32;cursorRange&#32;=&#32;Info.CursorRange;
07433 
07434 &#32;&#32;<emphasis role="comment">//&#32;Scan&#32;the&#32;tokens&#32;that&#32;are&#32;at&#32;the&#32;end&#32;of&#32;the&#32;cursor,&#32;but&#32;are&#32;not&#32;captured</emphasis>
07435 &#32;&#32;<emphasis role="comment">//&#32;but&#32;the&#32;child&#32;cursors.</emphasis>
07436 &#32;&#32;annotateAndAdvanceTokens(cursor,&#32;<link linkend="__index___internal_8h_1afca6208bdc188ac29b169260314b7af2a87e2eee30c9b5a3c2108f2128413157a">RangeOverlap</link>,&#32;cursorRange);
07437 
07438 &#32;&#32;<emphasis role="comment">//&#32;Scan&#32;the&#32;tokens&#32;that&#32;are&#32;at&#32;the&#32;beginning&#32;of&#32;the&#32;cursor,&#32;but&#32;are&#32;not</emphasis>
07439 &#32;&#32;<emphasis role="comment">//&#32;capture&#32;by&#32;the&#32;child&#32;cursors.</emphasis>
07440 &#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">unsigned</emphasis>&#32;I&#32;=&#32;BeforeChildren;&#32;I&#32;!=&#32;AfterChildren;&#32;++I)&#32;{
07441 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!<link linkend="__c_index_8cpp_1a0c5b391d8bca745084fb8906cce6f66c">clang_isInvalid</link>(<link linkend="__c_index_8cpp_1a88e594fe730830706a0b7cff796eaedf">clang_getCursorKind</link>(Cursors[I])))
07442 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
07443 
07444 &#32;&#32;&#32;&#32;Cursors[I]&#32;=&#32;cursor;
07445 &#32;&#32;}
07446 
07447 &#32;&#32;<emphasis role="comment">//&#32;Attributes&#32;are&#32;annotated&#32;out-of-order,&#32;rewind&#32;TokIdx&#32;to&#32;when&#32;we&#32;first</emphasis>
07448 &#32;&#32;<emphasis role="comment">//&#32;encountered&#32;the&#32;attribute&#32;cursor.</emphasis>
07449 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="__c_index_8cpp_1ab407667e249e0d44e6c56af84f2c28ba">clang_isAttribute</link>(cursor.kind))
07450 &#32;&#32;&#32;&#32;TokIdx&#32;=&#32;Info.BeforeReachingCursorIdx;
07451 
07452 &#32;&#32;PostChildrenInfos.pop_back();
07453 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
07454 }
07455 
07456 <emphasis role="keywordtype">void</emphasis>&#32;AnnotateTokensWorker::HandlePostPonedChildCursors(
07457 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;PostChildrenInfo&#32;&amp;Info)&#32;{
07458 &#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;&amp;ChildAction&#32;:&#32;Info.ChildActions)&#32;{
07459 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(ChildAction.action&#32;==&#32;PostChildrenAction::Postpone)&#32;{
07460 &#32;&#32;&#32;&#32;&#32;&#32;HandlePostPonedChildCursor(ChildAction.cursor,
07461 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Info.BeforeChildrenTokenIdx);
07462 &#32;&#32;&#32;&#32;}
07463 &#32;&#32;}
07464 }
07465 
07466 <emphasis role="keywordtype">void</emphasis>&#32;AnnotateTokensWorker::HandlePostPonedChildCursor(
07467 &#32;&#32;&#32;&#32;CXCursor&#32;Cursor,&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;StartTokenIndex)&#32;{
07468 &#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;I&#32;=&#32;StartTokenIndex;
07469 
07470 &#32;&#32;<emphasis role="comment">//&#32;The&#32;bracket&#32;tokens&#32;of&#32;a&#32;Call&#32;or&#32;Subscript&#32;operator&#32;are&#32;mapped&#32;to</emphasis>
07471 &#32;&#32;<emphasis role="comment">//&#32;CallExpr/CXXOperatorCallExpr&#32;because&#32;we&#32;skipped&#32;visiting&#32;the&#32;corresponding</emphasis>
07472 &#32;&#32;<emphasis role="comment">//&#32;DeclRefExpr.&#32;Remap&#32;these&#32;tokens&#32;to&#32;the&#32;DeclRefExpr&#32;cursors.</emphasis>
07473 &#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">unsigned</emphasis>&#32;RefNameRangeNr&#32;=&#32;0;&#32;I&#32;&lt;&#32;NumTokens;&#32;RefNameRangeNr++)&#32;{
07474 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;CXSourceRange&#32;CXRefNameRange&#32;=&#32;<link linkend="__c_index_8cpp_1afaace7c7d9d35d3f6d2b947d97a926df">clang_getCursorReferenceNameRange</link>(
07475 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Cursor,&#32;CXNameRange_WantQualifier,&#32;RefNameRangeNr);
07476 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="__c_x_source_location_8cpp_1ae11f8a52af4ea3ffd8018196f41f4128">clang_Range_isNull</link>(CXRefNameRange))
07477 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;&#32;<emphasis role="comment">//&#32;All&#32;ranges&#32;handled.</emphasis>
07478 
07479 &#32;&#32;&#32;&#32;SourceRange&#32;RefNameRange&#32;=&#32;cxloc::translateCXSourceRange(CXRefNameRange);
07480 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(I&#32;&lt;&#32;NumTokens)&#32;{
07481 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;SourceLocation&#32;TokenLocation&#32;=&#32;GetTokenLoc(I);
07482 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!TokenLocation.isValid())
07483 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
07484 
07485 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Adapt&#32;the&#32;end&#32;range,&#32;because&#32;LocationCompare()&#32;reports</emphasis>
07486 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;RangeOverlap&#32;even&#32;for&#32;the&#32;not-inclusive&#32;end&#32;location.</emphasis>
07487 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;SourceLocation&#32;fixedEnd&#32;=
07488 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;RefNameRange.getEnd().getLocWithOffset(-1);
07489 &#32;&#32;&#32;&#32;&#32;&#32;RefNameRange&#32;=&#32;SourceRange(RefNameRange.getBegin(),&#32;fixedEnd);
07490 
07491 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="__index___internal_8h_1afca6208bdc188ac29b169260314b7af2">RangeComparisonResult</link>&#32;ComparisonResult&#32;=
07492 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;LocationCompare(SrcMgr,&#32;TokenLocation,&#32;RefNameRange);
07493 
07494 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(ComparisonResult&#32;==&#32;<link linkend="__index___internal_8h_1afca6208bdc188ac29b169260314b7af2a87e2eee30c9b5a3c2108f2128413157a">RangeOverlap</link>)&#32;{
07495 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Cursors[I++]&#32;=&#32;Cursor;
07496 &#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(ComparisonResult&#32;==&#32;<link linkend="__index___internal_8h_1afca6208bdc188ac29b169260314b7af2a1626bf1782f58fe2a2bf082c4c30e850">RangeBefore</link>)&#32;{
07497 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;++I;&#32;<emphasis role="comment">//&#32;Not&#32;relevant&#32;token,&#32;check&#32;next&#32;one.</emphasis>
07498 &#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(ComparisonResult&#32;==&#32;<link linkend="__index___internal_8h_1afca6208bdc188ac29b169260314b7af2a7540aa4ebed8662d6f41ec33073611a0">RangeAfter</link>)&#32;{
07499 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;&#32;<emphasis role="comment">//&#32;All&#32;tokens&#32;updated&#32;for&#32;current&#32;range,&#32;check&#32;next.</emphasis>
07500 &#32;&#32;&#32;&#32;&#32;&#32;}
07501 &#32;&#32;&#32;&#32;}
07502 &#32;&#32;}
07503 }
07504 
07505 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">enum</emphasis>&#32;CXChildVisitResult&#32;AnnotateTokensVisitor(CXCursor&#32;cursor,
07506 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;CXCursor&#32;parent,
07507 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;CXClientData&#32;client_data)&#32;{
07508 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">static_cast&lt;</emphasis>AnnotateTokensWorker&#32;*<emphasis role="keyword">&gt;</emphasis>(client_data)
07509 &#32;&#32;&#32;&#32;&#32;&#32;-&gt;Visit(cursor,&#32;parent);
07510 }
07511 
07512 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;AnnotateTokensPostChildrenVisitor(CXCursor&#32;cursor,
07513 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;CXClientData&#32;client_data)&#32;{
07514 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">static_cast&lt;</emphasis>AnnotateTokensWorker&#32;*<emphasis role="keyword">&gt;</emphasis>(client_data)
07515 &#32;&#32;&#32;&#32;&#32;&#32;-&gt;postVisitChildren(cursor);
07516 }
07517 
07518 <emphasis role="keyword">namespace&#32;</emphasis>{
07519 
07523 <emphasis role="keyword">class&#32;</emphasis>MarkMacroArgTokensVisitor&#32;{
07524 &#32;&#32;SourceManager&#32;&amp;SM;
07525 &#32;&#32;CXToken&#32;*Tokens;
07526 &#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;NumTokens;
07527 &#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;CurIdx;
07528 
07529 <emphasis role="keyword">public</emphasis>:
07530 &#32;&#32;MarkMacroArgTokensVisitor(SourceManager&#32;&amp;SM,&#32;CXToken&#32;*tokens,
07531 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;numTokens)
07532 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;SM(SM),&#32;Tokens(tokens),&#32;NumTokens(numTokens),&#32;CurIdx(0)&#32;{}
07533 
07534 &#32;&#32;CXChildVisitResult&#32;visit(CXCursor&#32;cursor,&#32;CXCursor&#32;parent)&#32;{
07535 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(cursor.kind&#32;!=&#32;CXCursor_MacroExpansion)
07536 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;CXChildVisit_Continue;
07537 
07538 &#32;&#32;&#32;&#32;SourceRange&#32;macroRange&#32;=&#32;getCursorMacroExpansion(cursor).getSourceRange();
07539 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(macroRange.getBegin()&#32;==&#32;macroRange.getEnd())
07540 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;CXChildVisit_Continue;&#32;<emphasis role="comment">//&#32;it&apos;s&#32;not&#32;a&#32;function&#32;macro.</emphasis>
07541 
07542 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(;&#32;CurIdx&#32;&lt;&#32;NumTokens;&#32;++CurIdx)&#32;{
07543 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!SM.isBeforeInTranslationUnit(getTokenLoc(CurIdx),
07544 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;macroRange.getBegin()))
07545 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
07546 &#32;&#32;&#32;&#32;}
07547 
07548 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(CurIdx&#32;==&#32;NumTokens)
07549 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;CXChildVisit_Break;
07550 
07551 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(;&#32;CurIdx&#32;&lt;&#32;NumTokens;&#32;++CurIdx)&#32;{
07552 &#32;&#32;&#32;&#32;&#32;&#32;SourceLocation&#32;tokLoc&#32;=&#32;getTokenLoc(CurIdx);
07553 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!SM.isBeforeInTranslationUnit(tokLoc,&#32;macroRange.getEnd()))
07554 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
07555 
07556 &#32;&#32;&#32;&#32;&#32;&#32;setFunctionMacroTokenLoc(CurIdx,&#32;SM.getMacroArgExpandedLocation(tokLoc));
07557 &#32;&#32;&#32;&#32;}
07558 
07559 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(CurIdx&#32;==&#32;NumTokens)
07560 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;CXChildVisit_Break;
07561 
07562 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;CXChildVisit_Continue;
07563 &#32;&#32;}
07564 
07565 <emphasis role="keyword">private</emphasis>:
07566 &#32;&#32;CXToken&#32;&amp;getTok(<emphasis role="keywordtype">unsigned</emphasis>&#32;Idx)&#32;{
07567 &#32;&#32;&#32;&#32;assert(Idx&#32;&lt;&#32;NumTokens);
07568 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;Tokens[Idx];
07569 &#32;&#32;}
07570 &#32;&#32;<emphasis role="keyword">const</emphasis>&#32;CXToken&#32;&amp;getTok(<emphasis role="keywordtype">unsigned</emphasis>&#32;Idx)<emphasis role="keyword">&#32;const&#32;</emphasis>{
07571 &#32;&#32;&#32;&#32;assert(Idx&#32;&lt;&#32;NumTokens);
07572 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;Tokens[Idx];
07573 &#32;&#32;}
07574 
07575 &#32;&#32;SourceLocation&#32;getTokenLoc(<emphasis role="keywordtype">unsigned</emphasis>&#32;tokI)&#32;{
07576 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;SourceLocation::getFromRawEncoding(getTok(tokI).int_data[1]);
07577 &#32;&#32;}
07578 
07579 &#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;setFunctionMacroTokenLoc(<emphasis role="keywordtype">unsigned</emphasis>&#32;tokI,&#32;SourceLocation&#32;loc)&#32;{
07580 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;The&#32;third&#32;field&#32;is&#32;reserved&#32;and&#32;currently&#32;not&#32;used.&#32;Use&#32;it&#32;here</emphasis>
07581 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;to&#32;mark&#32;macro&#32;arg&#32;expanded&#32;tokens&#32;with&#32;their&#32;expanded&#32;locations.</emphasis>
07582 &#32;&#32;&#32;&#32;getTok(tokI).int_data[3]&#32;=&#32;loc.getRawEncoding();
07583 &#32;&#32;}
07584 };
07585 
07586 }&#32;<emphasis role="comment">//&#32;end&#32;anonymous&#32;namespace</emphasis>
07587 
07588 <emphasis role="keyword">static</emphasis>&#32;CXChildVisitResult
07589 MarkMacroArgTokensVisitorDelegate(CXCursor&#32;cursor,&#32;CXCursor&#32;parent,
07590 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;CXClientData&#32;client_data)&#32;{
07591 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">static_cast&lt;</emphasis>MarkMacroArgTokensVisitor&#32;*<emphasis role="keyword">&gt;</emphasis>(client_data)
07592 &#32;&#32;&#32;&#32;&#32;&#32;-&gt;visit(cursor,&#32;parent);
07593 }
07594 
07597 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;lexNext(Lexer&#32;&amp;Lex,&#32;Token&#32;&amp;Tok,&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;&amp;NextIdx,
07598 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;NumTokens)&#32;{
07599 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(NextIdx&#32;&gt;=&#32;NumTokens)
07600 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
07601 
07602 &#32;&#32;++NextIdx;
07603 &#32;&#32;Lex.LexFromRawLexer(Tok);
07604 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;Tok.is(tok::eof);
07605 }
07606 
07607 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;annotatePreprocessorTokens(CXTranslationUnit&#32;TU,
07608 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;SourceRange&#32;RegionOfInterest,
07609 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;CXCursor&#32;*Cursors,&#32;CXToken&#32;*Tokens,
07610 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;NumTokens)&#32;{
07611 &#32;&#32;ASTUnit&#32;*CXXUnit&#32;=&#32;cxtu::getASTUnit(TU);
07612 
07613 &#32;&#32;Preprocessor&#32;&amp;PP&#32;=&#32;CXXUnit-&gt;getPreprocessor();
07614 &#32;&#32;SourceManager&#32;&amp;SourceMgr&#32;=&#32;CXXUnit-&gt;getSourceManager();
07615 &#32;&#32;std::pair&lt;FileID,&#32;unsigned&gt;&#32;BeginLocInfo&#32;=
07616 &#32;&#32;&#32;&#32;&#32;&#32;SourceMgr.getDecomposedSpellingLoc(RegionOfInterest.getBegin());
07617 &#32;&#32;std::pair&lt;FileID,&#32;unsigned&gt;&#32;EndLocInfo&#32;=
07618 &#32;&#32;&#32;&#32;&#32;&#32;SourceMgr.getDecomposedSpellingLoc(RegionOfInterest.getEnd());
07619 
07620 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(BeginLocInfo.first&#32;!=&#32;EndLocInfo.first)
07621 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
07622 
07623 &#32;&#32;StringRef&#32;Buffer;
07624 &#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;Invalid&#32;=&#32;<emphasis role="keyword">false</emphasis>;
07625 &#32;&#32;Buffer&#32;=&#32;SourceMgr.getBufferData(BeginLocInfo.first,&#32;&amp;Invalid);
07626 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(Buffer.empty()&#32;||&#32;Invalid)
07627 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
07628 
07629 &#32;&#32;Lexer&#32;Lex(SourceMgr.getLocForStartOfFile(BeginLocInfo.first),
07630 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;CXXUnit-&gt;getASTContext().getLangOpts(),&#32;Buffer.begin(),
07631 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Buffer.data()&#32;+&#32;BeginLocInfo.second,&#32;Buffer.end());
07632 &#32;&#32;Lex.SetCommentRetentionState(<emphasis role="keyword">true</emphasis>);
07633 
07634 &#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;NextIdx&#32;=&#32;0;
07635 &#32;&#32;<emphasis role="comment">//&#32;Lex&#32;tokens&#32;in&#32;raw&#32;mode&#32;until&#32;we&#32;hit&#32;the&#32;end&#32;of&#32;the&#32;range,&#32;to&#32;avoid</emphasis>
07636 &#32;&#32;<emphasis role="comment">//&#32;entering&#32;#includes&#32;or&#32;expanding&#32;macros.</emphasis>
07637 &#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(<emphasis role="keyword">true</emphasis>)&#32;{
07638 &#32;&#32;&#32;&#32;Token&#32;Tok;
07639 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(lexNext(Lex,&#32;Tok,&#32;NextIdx,&#32;NumTokens))
07640 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
07641 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;TokIdx&#32;=&#32;NextIdx&#32;-&#32;1;
07642 &#32;&#32;&#32;&#32;assert(Tok.getLocation()&#32;==
07643 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;SourceLocation::getFromRawEncoding(Tokens[TokIdx].int_data[1]));
07644 
07645 &#32;&#32;reprocess:
07646 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(Tok.is(tok::hash)&#32;&amp;&amp;&#32;Tok.isAtStartOfLine())&#32;{
07647 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;We&#32;have&#32;found&#32;a&#32;preprocessing&#32;directive.&#32;Annotate&#32;the&#32;tokens</emphasis>
07648 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;appropriately.</emphasis>
07649 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//</emphasis>
07650 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;FIXME:&#32;Some&#32;simple&#32;tests&#32;here&#32;could&#32;identify&#32;macro&#32;definitions&#32;and</emphasis>
07651 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;#undefs,&#32;to&#32;provide&#32;specific&#32;cursor&#32;kinds&#32;for&#32;those.</emphasis>
07652 
07653 &#32;&#32;&#32;&#32;&#32;&#32;SourceLocation&#32;BeginLoc&#32;=&#32;Tok.getLocation();
07654 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(lexNext(Lex,&#32;Tok,&#32;NextIdx,&#32;NumTokens))
07655 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
07656 
07657 &#32;&#32;&#32;&#32;&#32;&#32;MacroInfo&#32;*MI&#32;=&#32;<emphasis role="keyword">nullptr</emphasis>;
07658 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(Tok.is(tok::raw_identifier)&#32;&amp;&amp;&#32;Tok.getRawIdentifier()&#32;==&#32;<emphasis role="stringliteral">&quot;define&quot;</emphasis>)&#32;{
07659 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(lexNext(Lex,&#32;Tok,&#32;NextIdx,&#32;NumTokens))
07660 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
07661 
07662 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(Tok.is(tok::raw_identifier))&#32;{
07663 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;IdentifierInfo&#32;&amp;II&#32;=
07664 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;PP.getIdentifierTable().get(Tok.getRawIdentifier());
07665 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;SourceLocation&#32;MappedTokLoc&#32;=
07666 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;CXXUnit-&gt;mapLocationToPreamble(Tok.getLocation());
07667 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;MI&#32;=&#32;<link linkend="_namespaceclang_1_1cxindex_1af7ce142e794a78913423f48c9d01c78d">getMacroInfo</link>(II,&#32;MappedTokLoc,&#32;TU);
07668 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
07669 &#32;&#32;&#32;&#32;&#32;&#32;}
07670 
07671 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;finished&#32;=&#32;<emphasis role="keyword">false</emphasis>;
07672 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">do</emphasis>&#32;{
07673 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(lexNext(Lex,&#32;Tok,&#32;NextIdx,&#32;NumTokens))&#32;{
07674 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;finished&#32;=&#32;<emphasis role="keyword">true</emphasis>;
07675 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
07676 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
07677 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;If&#32;we&#32;are&#32;in&#32;a&#32;macro&#32;definition,&#32;check&#32;if&#32;the&#32;token&#32;was&#32;ever&#32;a</emphasis>
07678 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;macro&#32;name&#32;and&#32;annotate&#32;it&#32;if&#32;that&apos;s&#32;the&#32;case.</emphasis>
07679 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(MI)&#32;{
07680 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;SourceLocation&#32;SaveLoc&#32;=&#32;Tok.getLocation();
07681 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Tok.setLocation(CXXUnit-&gt;mapLocationToPreamble(SaveLoc));
07682 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;MacroDefinitionRecord&#32;*MacroDef&#32;=
07683 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespaceclang_1_1cxindex_1ac81be1c63a9bbf2e05be99daa2b11750">checkForMacroInMacroDefinition</link>(MI,&#32;Tok,&#32;TU);
07684 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Tok.setLocation(SaveLoc);
07685 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(MacroDef)
07686 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Cursors[NextIdx&#32;-&#32;1]&#32;=
07687 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespaceclang_1_1cxcursor_1a64450be5a9ef97c872d47219caaccfce">MakeMacroExpansionCursor</link>(MacroDef,&#32;Tok.getLocation(),&#32;TU);
07688 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
07689 &#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">while</emphasis>&#32;(!Tok.isAtStartOfLine());
07690 
07691 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;LastIdx&#32;=&#32;finished&#32;?&#32;NextIdx&#32;-&#32;1&#32;:&#32;NextIdx&#32;-&#32;2;
07692 &#32;&#32;&#32;&#32;&#32;&#32;assert(TokIdx&#32;&lt;=&#32;LastIdx);
07693 &#32;&#32;&#32;&#32;&#32;&#32;SourceLocation&#32;EndLoc&#32;=
07694 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;SourceLocation::getFromRawEncoding(Tokens[LastIdx].int_data[1]);
07695 &#32;&#32;&#32;&#32;&#32;&#32;CXCursor&#32;Cursor&#32;=
07696 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespaceclang_1_1cxcursor_1a1fb1c1775cb1f7e194f860c8e5903a71">MakePreprocessingDirectiveCursor</link>(SourceRange(BeginLoc,&#32;EndLoc),&#32;TU);
07697 
07698 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(;&#32;TokIdx&#32;&lt;=&#32;LastIdx;&#32;++TokIdx)
07699 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;updateCursorAnnotation(Cursors[TokIdx],&#32;Cursor);
07700 
07701 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(finished)
07702 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
07703 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">goto</emphasis>&#32;reprocess;
07704 &#32;&#32;&#32;&#32;}
07705 &#32;&#32;}
07706 }
07707 
07708 <emphasis role="comment">//&#32;This&#32;gets&#32;run&#32;a&#32;separate&#32;thread&#32;to&#32;avoid&#32;stack&#32;blowout.</emphasis>
07709 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;clang_annotateTokensImpl(CXTranslationUnit&#32;TU,&#32;ASTUnit&#32;*CXXUnit,
07710 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;CXToken&#32;*Tokens,&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;NumTokens,
07711 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;CXCursor&#32;*Cursors)&#32;{
07712 &#32;&#32;<link linkend="_classclang_1_1_c_indexer">CIndexer</link>&#32;*CXXIdx&#32;=&#32;TU-&gt;CIdx;
07713 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(CXXIdx-&gt;<link linkend="_classclang_1_1_c_indexer_1a226e7b660fe75abfc7e93f72021a8db3">isOptEnabled</link>(CXGlobalOpt_ThreadBackgroundPriorityForEditing))
07714 &#32;&#32;&#32;&#32;<link linkend="_namespaceclang_1ab1c32e4de49bdf7a50374807a6d2701c">setThreadBackgroundPriority</link>();
07715 
07716 &#32;&#32;<emphasis role="comment">//&#32;Determine&#32;the&#32;region&#32;of&#32;interest,&#32;which&#32;contains&#32;all&#32;of&#32;the&#32;tokens.</emphasis>
07717 &#32;&#32;SourceRange&#32;RegionOfInterest;
07718 &#32;&#32;RegionOfInterest.setBegin(
07719 &#32;&#32;&#32;&#32;&#32;&#32;cxloc::translateSourceLocation(<link linkend="__c_index_8cpp_1a123bf1f8140225a384ea22b9a03b7c3a">clang_getTokenLocation</link>(TU,&#32;Tokens[0])));
07720 &#32;&#32;RegionOfInterest.setEnd(cxloc::translateSourceLocation(
07721 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__c_index_8cpp_1a123bf1f8140225a384ea22b9a03b7c3a">clang_getTokenLocation</link>(TU,&#32;Tokens[NumTokens&#32;-&#32;1])));
07722 
07723 &#32;&#32;<emphasis role="comment">//&#32;Relex&#32;the&#32;tokens&#32;within&#32;the&#32;source&#32;range&#32;to&#32;look&#32;for&#32;preprocessing</emphasis>
07724 &#32;&#32;<emphasis role="comment">//&#32;directives.</emphasis>
07725 &#32;&#32;annotatePreprocessorTokens(TU,&#32;RegionOfInterest,&#32;Cursors,&#32;Tokens,&#32;NumTokens);
07726 
07727 &#32;&#32;<emphasis role="comment">//&#32;If&#32;begin&#32;location&#32;points&#32;inside&#32;a&#32;macro&#32;argument,&#32;set&#32;it&#32;to&#32;the&#32;expansion</emphasis>
07728 &#32;&#32;<emphasis role="comment">//&#32;location&#32;so&#32;we&#32;can&#32;have&#32;the&#32;full&#32;context&#32;when&#32;annotating&#32;semantically.</emphasis>
07729 &#32;&#32;{
07730 &#32;&#32;&#32;&#32;SourceManager&#32;&amp;SM&#32;=&#32;CXXUnit-&gt;getSourceManager();
07731 &#32;&#32;&#32;&#32;SourceLocation&#32;Loc&#32;=
07732 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;SM.getMacroArgExpandedLocation(RegionOfInterest.getBegin());
07733 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(Loc.isMacroID())
07734 &#32;&#32;&#32;&#32;&#32;&#32;RegionOfInterest.setBegin(SM.getExpansionLoc(Loc));
07735 &#32;&#32;}
07736 
07737 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(CXXUnit-&gt;getPreprocessor().getPreprocessingRecord())&#32;{
07738 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Search&#32;and&#32;mark&#32;tokens&#32;that&#32;are&#32;macro&#32;argument&#32;expansions.</emphasis>
07739 &#32;&#32;&#32;&#32;MarkMacroArgTokensVisitor&#32;Visitor(CXXUnit-&gt;getSourceManager(),&#32;Tokens,
07740 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;NumTokens);
07741 &#32;&#32;&#32;&#32;<link linkend="_classclang_1_1cxcursor_1_1_cursor_visitor">CursorVisitor</link>&#32;MacroArgMarker(
07742 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;TU,&#32;MarkMacroArgTokensVisitorDelegate,&#32;&amp;Visitor,
07743 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*VisitPreprocessorLast=*/</emphasis><emphasis role="keyword">true</emphasis>,
07744 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*VisitIncludedEntities=*/</emphasis><emphasis role="keyword">false</emphasis>,&#32;RegionOfInterest);
07745 &#32;&#32;&#32;&#32;MacroArgMarker.visitPreprocessedEntitiesInRegion();
07746 &#32;&#32;}
07747 
07748 &#32;&#32;<emphasis role="comment">//&#32;Annotate&#32;all&#32;of&#32;the&#32;source&#32;locations&#32;in&#32;the&#32;region&#32;of&#32;interest&#32;that&#32;map&#32;to</emphasis>
07749 &#32;&#32;<emphasis role="comment">//&#32;a&#32;specific&#32;cursor.</emphasis>
07750 &#32;&#32;AnnotateTokensWorker&#32;W(Tokens,&#32;Cursors,&#32;NumTokens,&#32;TU,&#32;RegionOfInterest);
07751 
07752 &#32;&#32;<emphasis role="comment">//&#32;FIXME:&#32;We&#32;use&#32;a&#32;ridiculous&#32;stack&#32;size&#32;here&#32;because&#32;the&#32;data-recursion</emphasis>
07753 &#32;&#32;<emphasis role="comment">//&#32;algorithm&#32;uses&#32;a&#32;large&#32;stack&#32;frame&#32;than&#32;the&#32;non-data&#32;recursive&#32;version,</emphasis>
07754 &#32;&#32;<emphasis role="comment">//&#32;and&#32;AnnotationTokensWorker&#32;currently&#32;transforms&#32;the&#32;data-recursion</emphasis>
07755 &#32;&#32;<emphasis role="comment">//&#32;algorithm&#32;back&#32;into&#32;a&#32;traditional&#32;recursion&#32;by&#32;explicitly&#32;calling</emphasis>
07756 &#32;&#32;<emphasis role="comment">//&#32;VisitChildren().&#32;&#32;We&#32;will&#32;need&#32;to&#32;remove&#32;this&#32;explicit&#32;recursive&#32;call.</emphasis>
07757 &#32;&#32;W.AnnotateTokens();
07758 
07759 &#32;&#32;<emphasis role="comment">//&#32;If&#32;we&#32;ran&#32;into&#32;any&#32;entities&#32;that&#32;involve&#32;context-sensitive&#32;keywords,</emphasis>
07760 &#32;&#32;<emphasis role="comment">//&#32;take&#32;another&#32;pass&#32;through&#32;the&#32;tokens&#32;to&#32;mark&#32;them&#32;as&#32;such.</emphasis>
07761 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(W.hasContextSensitiveKeywords())&#32;{
07762 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">unsigned</emphasis>&#32;I&#32;=&#32;0;&#32;I&#32;!=&#32;NumTokens;&#32;++I)&#32;{
07763 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="__c_index_8cpp_1a656e3a514ed80a5f265fba4e2cbe6ab3">clang_getTokenKind</link>(Tokens[I])&#32;!=&#32;CXToken_Identifier)
07764 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">continue</emphasis>;
07765 
07766 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(Cursors[I].kind&#32;==&#32;CXCursor_ObjCPropertyDecl)&#32;{
07767 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;IdentifierInfo&#32;*II&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis>IdentifierInfo&#32;*<emphasis role="keyword">&gt;</emphasis>(Tokens[I].ptr_data);
07768 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;ObjCPropertyDecl&#32;*Property&#32;=
07769 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;dyn_cast_or_null&lt;ObjCPropertyDecl&gt;(<link linkend="_namespaceclang_1_1cxcursor_1a1f702246831c96afd990e457613dc642">getCursorDecl</link>(Cursors[I])))&#32;{
07770 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(Property-&gt;getPropertyAttributesAsWritten()&#32;!=&#32;0&#32;&amp;&amp;
07771 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;llvm::StringSwitch&lt;bool&gt;(II-&gt;getName())
07772 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;.Case(<emphasis role="stringliteral">&quot;readonly&quot;</emphasis>,&#32;<emphasis role="keyword">true</emphasis>)
07773 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;.Case(<emphasis role="stringliteral">&quot;assign&quot;</emphasis>,&#32;<emphasis role="keyword">true</emphasis>)
07774 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;.Case(<emphasis role="stringliteral">&quot;unsafe_unretained&quot;</emphasis>,&#32;<emphasis role="keyword">true</emphasis>)
07775 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;.Case(<emphasis role="stringliteral">&quot;readwrite&quot;</emphasis>,&#32;<emphasis role="keyword">true</emphasis>)
07776 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;.Case(<emphasis role="stringliteral">&quot;retain&quot;</emphasis>,&#32;<emphasis role="keyword">true</emphasis>)
07777 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;.Case(<emphasis role="stringliteral">&quot;copy&quot;</emphasis>,&#32;<emphasis role="keyword">true</emphasis>)
07778 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;.Case(<emphasis role="stringliteral">&quot;nonatomic&quot;</emphasis>,&#32;<emphasis role="keyword">true</emphasis>)
07779 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;.Case(<emphasis role="stringliteral">&quot;atomic&quot;</emphasis>,&#32;<emphasis role="keyword">true</emphasis>)
07780 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;.Case(<emphasis role="stringliteral">&quot;getter&quot;</emphasis>,&#32;<emphasis role="keyword">true</emphasis>)
07781 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;.Case(<emphasis role="stringliteral">&quot;setter&quot;</emphasis>,&#32;<emphasis role="keyword">true</emphasis>)
07782 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;.Case(<emphasis role="stringliteral">&quot;strong&quot;</emphasis>,&#32;<emphasis role="keyword">true</emphasis>)
07783 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;.Case(<emphasis role="stringliteral">&quot;weak&quot;</emphasis>,&#32;<emphasis role="keyword">true</emphasis>)
07784 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;.Case(<emphasis role="stringliteral">&quot;class&quot;</emphasis>,&#32;<emphasis role="keyword">true</emphasis>)
07785 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;.Default(<emphasis role="keyword">false</emphasis>))
07786 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Tokens[I].int_data[0]&#32;=&#32;CXToken_Keyword;
07787 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
07788 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">continue</emphasis>;
07789 &#32;&#32;&#32;&#32;&#32;&#32;}
07790 
07791 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(Cursors[I].kind&#32;==&#32;CXCursor_ObjCInstanceMethodDecl&#32;||
07792 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Cursors[I].kind&#32;==&#32;CXCursor_ObjCClassMethodDecl)&#32;{
07793 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;IdentifierInfo&#32;*II&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis>IdentifierInfo&#32;*<emphasis role="keyword">&gt;</emphasis>(Tokens[I].ptr_data);
07794 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(llvm::StringSwitch&lt;bool&gt;(II-&gt;getName())
07795 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;.Case(<emphasis role="stringliteral">&quot;in&quot;</emphasis>,&#32;<emphasis role="keyword">true</emphasis>)
07796 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;.Case(<emphasis role="stringliteral">&quot;out&quot;</emphasis>,&#32;<emphasis role="keyword">true</emphasis>)
07797 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;.Case(<emphasis role="stringliteral">&quot;inout&quot;</emphasis>,&#32;<emphasis role="keyword">true</emphasis>)
07798 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;.Case(<emphasis role="stringliteral">&quot;oneway&quot;</emphasis>,&#32;<emphasis role="keyword">true</emphasis>)
07799 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;.Case(<emphasis role="stringliteral">&quot;bycopy&quot;</emphasis>,&#32;<emphasis role="keyword">true</emphasis>)
07800 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;.Case(<emphasis role="stringliteral">&quot;byref&quot;</emphasis>,&#32;<emphasis role="keyword">true</emphasis>)
07801 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;.Default(<emphasis role="keyword">false</emphasis>))
07802 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Tokens[I].int_data[0]&#32;=&#32;CXToken_Keyword;
07803 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">continue</emphasis>;
07804 &#32;&#32;&#32;&#32;&#32;&#32;}
07805 
07806 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(Cursors[I].kind&#32;==&#32;CXCursor_CXXFinalAttr&#32;||
07807 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Cursors[I].kind&#32;==&#32;CXCursor_CXXOverrideAttr)&#32;{
07808 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Tokens[I].int_data[0]&#32;=&#32;CXToken_Keyword;
07809 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">continue</emphasis>;
07810 &#32;&#32;&#32;&#32;&#32;&#32;}
07811 &#32;&#32;&#32;&#32;}
07812 &#32;&#32;}
07813 }
07814 
<anchor xml:id="__c_index_8cpp_source_1l07815"/><link linkend="__c_index_8cpp_1aa53f8643daa75a0e72407ab0cee225f3">07815</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="__c_index_8cpp_1aa53f8643daa75a0e72407ab0cee225f3">clang_annotateTokens</link>(CXTranslationUnit&#32;TU,&#32;CXToken&#32;*Tokens,
07816 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;NumTokens,&#32;CXCursor&#32;*Cursors)&#32;{
07817 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(isNotUsableTU(TU))&#32;{
07818 &#32;&#32;&#32;&#32;<link linkend="__c_x_translation_unit_8h_1a4ec17e6e03ea0baf73e27802eae36106">LOG_BAD_TU</link>(TU);
07819 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
07820 &#32;&#32;}
07821 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(NumTokens&#32;==&#32;0&#32;||&#32;!Tokens&#32;||&#32;!Cursors)&#32;{
07822 &#32;&#32;&#32;&#32;<link linkend="__c_log_8h_1a24474e48ce7e218f17ae9353103470d8">LOG_FUNC_SECTION</link>&#32;{&#32;*Log&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&lt;null&#32;input&gt;&quot;</emphasis>;&#32;}
07823 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
07824 &#32;&#32;}
07825 
07826 &#32;&#32;<link linkend="__c_log_8h_1a24474e48ce7e218f17ae9353103470d8">LOG_FUNC_SECTION</link>&#32;{
07827 &#32;&#32;&#32;&#32;*Log&#32;&lt;&lt;&#32;TU&#32;&lt;&lt;&#32;<emphasis role="charliteral">&apos;&#32;&apos;</emphasis>;
07828 &#32;&#32;&#32;&#32;CXSourceLocation&#32;bloc&#32;=&#32;<link linkend="__c_index_8cpp_1a123bf1f8140225a384ea22b9a03b7c3a">clang_getTokenLocation</link>(TU,&#32;Tokens[0]);
07829 &#32;&#32;&#32;&#32;CXSourceLocation&#32;eloc&#32;=&#32;<link linkend="__c_index_8cpp_1a123bf1f8140225a384ea22b9a03b7c3a">clang_getTokenLocation</link>(TU,&#32;Tokens[NumTokens&#32;-&#32;1]);
07830 &#32;&#32;&#32;&#32;*Log&#32;&lt;&lt;&#32;<link linkend="__c_x_source_location_8cpp_1a6d436a40e815644209860de3f1416210">clang_getRange</link>(bloc,&#32;eloc);
07831 &#32;&#32;}
07832 
07833 &#32;&#32;<emphasis role="comment">//&#32;Any&#32;token&#32;we&#32;don&apos;t&#32;specifically&#32;annotate&#32;will&#32;have&#32;a&#32;NULL&#32;cursor.</emphasis>
07834 &#32;&#32;CXCursor&#32;C&#32;=&#32;<link linkend="__c_index_8cpp_1aa22233466eaf91f6f3cf6b84255c3b68">clang_getNullCursor</link>();
07835 &#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">unsigned</emphasis>&#32;I&#32;=&#32;0;&#32;I&#32;!=&#32;NumTokens;&#32;++I)
07836 &#32;&#32;&#32;&#32;Cursors[I]&#32;=&#32;C;
07837 
07838 &#32;&#32;ASTUnit&#32;*CXXUnit&#32;=&#32;cxtu::getASTUnit(TU);
07839 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!CXXUnit)
07840 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
07841 
07842 &#32;&#32;ASTUnit::ConcurrencyCheck&#32;Check(*CXXUnit);
07843 
07844 &#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;AnnotateTokensImpl&#32;=&#32;[=]()&#32;{
07845 &#32;&#32;&#32;&#32;clang_annotateTokensImpl(TU,&#32;CXXUnit,&#32;Tokens,&#32;NumTokens,&#32;Cursors);
07846 &#32;&#32;};
07847 &#32;&#32;llvm::CrashRecoveryContext&#32;CRC;
07848 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!<link linkend="_namespaceclang_1af866b018fe401ae941a367429bdd4c9a">RunSafely</link>(CRC,&#32;AnnotateTokensImpl,&#32;<link linkend="_namespaceclang_1a784fd2a03784a2dbb08d1841240adb88">GetSafetyThreadStackSize</link>()&#32;*&#32;2))&#32;{
07849 &#32;&#32;&#32;&#32;fprintf(stderr,&#32;<emphasis role="stringliteral">&quot;libclang:&#32;crash&#32;detected&#32;while&#32;annotating&#32;tokens\n&quot;</emphasis>);
07850 &#32;&#32;}
07851 }
07852 
07853 <emphasis role="comment">//===----------------------------------------------------------------------===//</emphasis>
07854 <emphasis role="comment">//&#32;Operations&#32;for&#32;querying&#32;linkage&#32;of&#32;a&#32;cursor.</emphasis>
07855 <emphasis role="comment">//===----------------------------------------------------------------------===//</emphasis>
07856 
<anchor xml:id="__c_index_8cpp_source_1l07857"/><link linkend="__c_index_8cpp_1a40ce3c0e400584ea807e89d96aa6a3f7">07857</link> CXLinkageKind&#32;<link linkend="__c_index_8cpp_1a40ce3c0e400584ea807e89d96aa6a3f7">clang_getCursorLinkage</link>(CXCursor&#32;cursor)&#32;{
07858 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!<link linkend="__c_index_8cpp_1a5d47db8f608ae0c266d6551875d46b80">clang_isDeclaration</link>(cursor.kind))
07859 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;CXLinkage_Invalid;
07860 
07861 &#32;&#32;<emphasis role="keyword">const</emphasis>&#32;Decl&#32;*D&#32;=&#32;<link linkend="_namespaceclang_1_1cxcursor_1a1f702246831c96afd990e457613dc642">cxcursor::getCursorDecl</link>(cursor);
07862 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;NamedDecl&#32;*ND&#32;=&#32;dyn_cast_or_null&lt;NamedDecl&gt;(D))
07863 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(ND-&gt;getLinkageInternal())&#32;{
07864 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;NoLinkage:
07865 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;VisibleNoLinkage:
07866 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;CXLinkage_NoLinkage;
07867 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;ModuleInternalLinkage:
07868 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;InternalLinkage:
07869 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;CXLinkage_Internal;
07870 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;UniqueExternalLinkage:
07871 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;CXLinkage_UniqueExternal;
07872 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;ModuleLinkage:
07873 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;ExternalLinkage:
07874 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;CXLinkage_External;
07875 &#32;&#32;&#32;&#32;};
07876 
07877 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;CXLinkage_Invalid;
07878 }
07879 
07880 <emphasis role="comment">//===----------------------------------------------------------------------===//</emphasis>
07881 <emphasis role="comment">//&#32;Operations&#32;for&#32;querying&#32;visibility&#32;of&#32;a&#32;cursor.</emphasis>
07882 <emphasis role="comment">//===----------------------------------------------------------------------===//</emphasis>
07883 
<anchor xml:id="__c_index_8cpp_source_1l07884"/><link linkend="__c_index_8cpp_1af05b946a0d65bb5a668e44875f440b2a">07884</link> CXVisibilityKind&#32;<link linkend="__c_index_8cpp_1af05b946a0d65bb5a668e44875f440b2a">clang_getCursorVisibility</link>(CXCursor&#32;cursor)&#32;{
07885 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!<link linkend="__c_index_8cpp_1a5d47db8f608ae0c266d6551875d46b80">clang_isDeclaration</link>(cursor.kind))
07886 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;CXVisibility_Invalid;
07887 
07888 &#32;&#32;<emphasis role="keyword">const</emphasis>&#32;Decl&#32;*D&#32;=&#32;<link linkend="_namespaceclang_1_1cxcursor_1a1f702246831c96afd990e457613dc642">cxcursor::getCursorDecl</link>(cursor);
07889 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;NamedDecl&#32;*ND&#32;=&#32;dyn_cast_or_null&lt;NamedDecl&gt;(D))
07890 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(ND-&gt;getVisibility())&#32;{
07891 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;HiddenVisibility:
07892 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;CXVisibility_Hidden;
07893 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;ProtectedVisibility:
07894 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;CXVisibility_Protected;
07895 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;DefaultVisibility:
07896 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;CXVisibility_Default;
07897 &#32;&#32;&#32;&#32;};
07898 
07899 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;CXVisibility_Invalid;
07900 }
07901 
07902 <emphasis role="comment">//===----------------------------------------------------------------------===//</emphasis>
07903 <emphasis role="comment">//&#32;Operations&#32;for&#32;querying&#32;language&#32;of&#32;a&#32;cursor.</emphasis>
07904 <emphasis role="comment">//===----------------------------------------------------------------------===//</emphasis>
07905 
07906 <emphasis role="keyword">static</emphasis>&#32;CXLanguageKind&#32;getDeclLanguage(<emphasis role="keyword">const</emphasis>&#32;Decl&#32;*D)&#32;{
07907 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!D)
07908 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;CXLanguage_C;
07909 
07910 &#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(D-&gt;getKind())&#32;{
07911 &#32;&#32;<emphasis role="keywordflow">default</emphasis>:
07912 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
07913 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;Decl::ImplicitParam:
07914 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;Decl::ObjCAtDefsField:
07915 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;Decl::ObjCCategory:
07916 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;Decl::ObjCCategoryImpl:
07917 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;Decl::ObjCCompatibleAlias:
07918 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;Decl::ObjCImplementation:
07919 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;Decl::ObjCInterface:
07920 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;Decl::ObjCIvar:
07921 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;Decl::ObjCMethod:
07922 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;Decl::ObjCProperty:
07923 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;Decl::ObjCPropertyImpl:
07924 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;Decl::ObjCProtocol:
07925 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;Decl::ObjCTypeParam:
07926 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;CXLanguage_ObjC;
07927 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;Decl::CXXConstructor:
07928 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;Decl::CXXConversion:
07929 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;Decl::CXXDestructor:
07930 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;Decl::CXXMethod:
07931 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;Decl::CXXRecord:
07932 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;Decl::ClassTemplate:
07933 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;Decl::ClassTemplatePartialSpecialization:
07934 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;Decl::ClassTemplateSpecialization:
07935 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;Decl::Friend:
07936 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;Decl::FriendTemplate:
07937 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;Decl::FunctionTemplate:
07938 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;Decl::LinkageSpec:
07939 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;Decl::Namespace:
07940 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;Decl::NamespaceAlias:
07941 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;Decl::NonTypeTemplateParm:
07942 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;Decl::StaticAssert:
07943 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;Decl::TemplateTemplateParm:
07944 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;Decl::TemplateTypeParm:
07945 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;Decl::UnresolvedUsingTypename:
07946 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;Decl::UnresolvedUsingValue:
07947 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;Decl::Using:
07948 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;Decl::UsingDirective:
07949 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;Decl::UsingShadow:
07950 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;CXLanguage_CPlusPlus;
07951 &#32;&#32;}
07952 
07953 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;CXLanguage_C;
07954 }
07955 
<anchor xml:id="__c_index_8cpp_source_1l07956"/><link linkend="__c_index_8cpp_1a3d2ecf17120d9e5f15b5544b8a901b7e">07956</link> <emphasis role="keyword">static</emphasis>&#32;CXAvailabilityKind&#32;getCursorAvailabilityForDecl(<emphasis role="keyword">const</emphasis>&#32;Decl&#32;*D)&#32;{
07957 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(isa&lt;FunctionDecl&gt;(D)&#32;&amp;&amp;&#32;cast&lt;FunctionDecl&gt;(D)-&gt;isDeleted())
07958 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;CXAvailability_NotAvailable;
07959 
07960 &#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(D-&gt;getAvailability())&#32;{
07961 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;AR_Available:
07962 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;AR_NotYetIntroduced:
07963 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;EnumConstantDecl&#32;*EnumConst&#32;=&#32;dyn_cast&lt;EnumConstantDecl&gt;(D))
07964 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;getCursorAvailabilityForDecl(
07965 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cast&lt;Decl&gt;(EnumConst-&gt;getDeclContext()));
07966 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;CXAvailability_Available;
07967 
07968 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;AR_Deprecated:
07969 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;CXAvailability_Deprecated;
07970 
07971 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;AR_Unavailable:
07972 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;CXAvailability_NotAvailable;
07973 &#32;&#32;}
07974 
07975 &#32;&#32;llvm_unreachable(<emphasis role="stringliteral">&quot;Unknown&#32;availability&#32;kind!&quot;</emphasis>);
07976 }
07977 
07978 <emphasis role="keyword">enum</emphasis>&#32;CXAvailabilityKind&#32;<link linkend="__c_index_8cpp_1a3d2ecf17120d9e5f15b5544b8a901b7e">clang_getCursorAvailability</link>(CXCursor&#32;cursor)&#32;{
07979 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="__c_index_8cpp_1a5d47db8f608ae0c266d6551875d46b80">clang_isDeclaration</link>(cursor.kind))
07980 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;Decl&#32;*D&#32;=&#32;<link linkend="_namespaceclang_1_1cxcursor_1a1f702246831c96afd990e457613dc642">cxcursor::getCursorDecl</link>(cursor))
07981 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;getCursorAvailabilityForDecl(D);
07982 
07983 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;CXAvailability_Available;
07984 }
07985 
07986 <emphasis role="keyword">static</emphasis>&#32;CXVersion&#32;convertVersion(VersionTuple&#32;In)&#32;{
07987 &#32;&#32;CXVersion&#32;Out&#32;=&#32;{-1,&#32;-1,&#32;-1};
07988 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(In.empty())
07989 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;Out;
07990 
07991 &#32;&#32;Out.Major&#32;=&#32;In.getMajor();
07992 
07993 &#32;&#32;Optional&lt;unsigned&gt;&#32;Minor&#32;=&#32;In.getMinor();
07994 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(Minor.hasValue())
07995 &#32;&#32;&#32;&#32;Out.Minor&#32;=&#32;*Minor;
07996 &#32;&#32;<emphasis role="keywordflow">else</emphasis>
07997 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;Out;
07998 
07999 &#32;&#32;Optional&lt;unsigned&gt;&#32;Subminor&#32;=&#32;In.getSubminor();
08000 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(Subminor.hasValue())
08001 &#32;&#32;&#32;&#32;Out.Subminor&#32;=&#32;*Subminor;
08002 
08003 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;Out;
08004 }
08005 
08006 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;getCursorPlatformAvailabilityForDecl(
08007 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;Decl&#32;*D,&#32;<emphasis role="keywordtype">int</emphasis>&#32;*always_deprecated,&#32;CXString&#32;*deprecated_message,
08008 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;*always_unavailable,&#32;CXString&#32;*unavailable_message,
08009 &#32;&#32;&#32;&#32;SmallVectorImpl&lt;AvailabilityAttr&#32;*&gt;&#32;&amp;AvailabilityAttrs)&#32;{
08010 &#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;HadAvailAttr&#32;=&#32;<emphasis role="keyword">false</emphasis>;
08011 &#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">auto</emphasis>&#32;A&#32;:&#32;D-&gt;attrs())&#32;{
08012 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(DeprecatedAttr&#32;*Deprecated&#32;=&#32;dyn_cast&lt;DeprecatedAttr&gt;(A))&#32;{
08013 &#32;&#32;&#32;&#32;&#32;&#32;HadAvailAttr&#32;=&#32;<emphasis role="keyword">true</emphasis>;
08014 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(always_deprecated)
08015 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*always_deprecated&#32;=&#32;1;
08016 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(deprecated_message)&#32;{
08017 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__c_x_string_8cpp_1a46c85f1255580ed186aa6f7380a06883">clang_disposeString</link>(*deprecated_message);
08018 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*deprecated_message&#32;=&#32;<link linkend="_namespaceclang_1_1cxstring_1a19a4962be87f75a8c1fa5a0b75f76298">cxstring::createDup</link>(Deprecated-&gt;getMessage());
08019 &#32;&#32;&#32;&#32;&#32;&#32;}
08020 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">continue</emphasis>;
08021 &#32;&#32;&#32;&#32;}
08022 
08023 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(UnavailableAttr&#32;*Unavailable&#32;=&#32;dyn_cast&lt;UnavailableAttr&gt;(A))&#32;{
08024 &#32;&#32;&#32;&#32;&#32;&#32;HadAvailAttr&#32;=&#32;<emphasis role="keyword">true</emphasis>;
08025 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(always_unavailable)
08026 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*always_unavailable&#32;=&#32;1;
08027 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(unavailable_message)&#32;{
08028 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__c_x_string_8cpp_1a46c85f1255580ed186aa6f7380a06883">clang_disposeString</link>(*unavailable_message);
08029 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*unavailable_message&#32;=&#32;<link linkend="_namespaceclang_1_1cxstring_1a19a4962be87f75a8c1fa5a0b75f76298">cxstring::createDup</link>(Unavailable-&gt;getMessage());
08030 &#32;&#32;&#32;&#32;&#32;&#32;}
08031 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">continue</emphasis>;
08032 &#32;&#32;&#32;&#32;}
08033 
08034 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(AvailabilityAttr&#32;*Avail&#32;=&#32;dyn_cast&lt;AvailabilityAttr&gt;(A))&#32;{
08035 &#32;&#32;&#32;&#32;&#32;&#32;AvailabilityAttrs.push_back(Avail);
08036 &#32;&#32;&#32;&#32;&#32;&#32;HadAvailAttr&#32;=&#32;<emphasis role="keyword">true</emphasis>;
08037 &#32;&#32;&#32;&#32;}
08038 &#32;&#32;}
08039 
08040 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!HadAvailAttr)
08041 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;EnumConstantDecl&#32;*EnumConst&#32;=&#32;dyn_cast&lt;EnumConstantDecl&gt;(D))
08042 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;getCursorPlatformAvailabilityForDecl(
08043 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cast&lt;Decl&gt;(EnumConst-&gt;getDeclContext()),&#32;always_deprecated,
08044 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;deprecated_message,&#32;always_unavailable,&#32;unavailable_message,
08045 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;AvailabilityAttrs);
08046 
08047 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(AvailabilityAttrs.empty())
08048 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
08049 
08050 &#32;&#32;llvm::sort(
08051 &#32;&#32;&#32;&#32;&#32;&#32;AvailabilityAttrs,&#32;[](AvailabilityAttr&#32;*LHS,&#32;AvailabilityAttr&#32;*RHS)&#32;{
08052 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;LHS-&gt;getPlatform()-&gt;getName()&#32;&lt;&#32;RHS-&gt;getPlatform()-&gt;getName();
08053 &#32;&#32;&#32;&#32;&#32;&#32;});
08054 &#32;&#32;ASTContext&#32;&amp;Ctx&#32;=&#32;D-&gt;getASTContext();
08055 &#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;It&#32;=&#32;std::unique(
08056 &#32;&#32;&#32;&#32;&#32;&#32;AvailabilityAttrs.begin(),&#32;AvailabilityAttrs.end(),
08057 &#32;&#32;&#32;&#32;&#32;&#32;[&amp;Ctx](AvailabilityAttr&#32;*LHS,&#32;AvailabilityAttr&#32;*RHS)&#32;{
08058 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;if&#32;(LHS-&gt;getPlatform()&#32;!=&#32;RHS-&gt;getPlatform())
08059 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;return&#32;false;
08060 
08061 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;if&#32;(LHS-&gt;getIntroduced()&#32;==&#32;RHS-&gt;getIntroduced()&#32;&amp;&amp;
08062 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;LHS-&gt;getDeprecated()&#32;==&#32;RHS-&gt;getDeprecated()&#32;&amp;&amp;
08063 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;LHS-&gt;getObsoleted()&#32;==&#32;RHS-&gt;getObsoleted()&#32;&amp;&amp;
08064 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;LHS-&gt;getMessage()&#32;==&#32;RHS-&gt;getMessage()&#32;&amp;&amp;
08065 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;LHS-&gt;getReplacement()&#32;==&#32;RHS-&gt;getReplacement())
08066 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;return&#32;true;
08067 
08068 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;if&#32;((!LHS-&gt;getIntroduced().empty()&#32;&amp;&amp;&#32;!RHS-&gt;getIntroduced().empty())&#32;||
08069 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(!LHS-&gt;getDeprecated().empty()&#32;&amp;&amp;&#32;!RHS-&gt;getDeprecated().empty())&#32;||
08070 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(!LHS-&gt;getObsoleted().empty()&#32;&amp;&amp;&#32;!RHS-&gt;getObsoleted().empty()))
08071 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;return&#32;false;
08072 
08073 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;if&#32;(LHS-&gt;getIntroduced().empty()&#32;&amp;&amp;&#32;!RHS-&gt;getIntroduced().empty())
08074 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;LHS-&gt;setIntroduced(Ctx,&#32;RHS-&gt;getIntroduced());
08075 
08076 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;if&#32;(LHS-&gt;getDeprecated().empty()&#32;&amp;&amp;&#32;!RHS-&gt;getDeprecated().empty())&#32;{
08077 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;LHS-&gt;setDeprecated(Ctx,&#32;RHS-&gt;getDeprecated());
08078 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;if&#32;(LHS-&gt;getMessage().empty())
08079 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;LHS-&gt;setMessage(Ctx,&#32;RHS-&gt;getMessage());
08080 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;if&#32;(LHS-&gt;getReplacement().empty())
08081 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;LHS-&gt;setReplacement(Ctx,&#32;RHS-&gt;getReplacement());
08082 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
08083 
08084 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;if&#32;(LHS-&gt;getObsoleted().empty()&#32;&amp;&amp;&#32;!RHS-&gt;getObsoleted().empty())&#32;{
08085 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;LHS-&gt;setObsoleted(Ctx,&#32;RHS-&gt;getObsoleted());
08086 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;if&#32;(LHS-&gt;getMessage().empty())
08087 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;LHS-&gt;setMessage(Ctx,&#32;RHS-&gt;getMessage());
08088 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;if&#32;(LHS-&gt;getReplacement().empty())
08089 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;LHS-&gt;setReplacement(Ctx,&#32;RHS-&gt;getReplacement());
08090 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
08091 
08092 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
08093 &#32;&#32;&#32;&#32;&#32;&#32;});
08094 &#32;&#32;AvailabilityAttrs.erase(It,&#32;AvailabilityAttrs.end());
08095 }
08096 
<anchor xml:id="__c_index_8cpp_source_1l08097"/><link linkend="__c_index_8cpp_1ab166e6d97e4c81463d7999917b30fb85">08097</link> <emphasis role="keywordtype">int</emphasis>&#32;<link linkend="__c_index_8cpp_1ab166e6d97e4c81463d7999917b30fb85">clang_getCursorPlatformAvailability</link>(CXCursor&#32;cursor,&#32;<emphasis role="keywordtype">int</emphasis>&#32;*always_deprecated,
08098 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;CXString&#32;*deprecated_message,
08099 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;*always_unavailable,
08100 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;CXString&#32;*unavailable_message,
08101 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;CXPlatformAvailability&#32;*availability,
08102 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;availability_size)&#32;{
08103 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(always_deprecated)
08104 &#32;&#32;&#32;&#32;*always_deprecated&#32;=&#32;0;
08105 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(deprecated_message)
08106 &#32;&#32;&#32;&#32;*deprecated_message&#32;=&#32;<link linkend="_namespaceclang_1_1cxstring_1a8a49aa6ea196abdde85886689f2630f9">cxstring::createEmpty</link>();
08107 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(always_unavailable)
08108 &#32;&#32;&#32;&#32;*always_unavailable&#32;=&#32;0;
08109 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(unavailable_message)
08110 &#32;&#32;&#32;&#32;*unavailable_message&#32;=&#32;<link linkend="_namespaceclang_1_1cxstring_1a8a49aa6ea196abdde85886689f2630f9">cxstring::createEmpty</link>();
08111 
08112 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!<link linkend="__c_index_8cpp_1a5d47db8f608ae0c266d6551875d46b80">clang_isDeclaration</link>(cursor.kind))
08113 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
08114 
08115 &#32;&#32;<emphasis role="keyword">const</emphasis>&#32;Decl&#32;*D&#32;=&#32;<link linkend="_namespaceclang_1_1cxcursor_1a1f702246831c96afd990e457613dc642">cxcursor::getCursorDecl</link>(cursor);
08116 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!D)
08117 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
08118 
08119 &#32;&#32;SmallVector&lt;AvailabilityAttr&#32;*,&#32;8&gt;&#32;AvailabilityAttrs;
08120 &#32;&#32;getCursorPlatformAvailabilityForDecl(D,&#32;always_deprecated,&#32;deprecated_message,
08121 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;always_unavailable,&#32;unavailable_message,
08122 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;AvailabilityAttrs);
08123 &#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;&amp;Avail&#32;:
08124 &#32;&#32;&#32;&#32;&#32;&#32;&#32;llvm::enumerate(llvm::makeArrayRef(AvailabilityAttrs)
08125 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;.take_front(availability_size)))&#32;{
08126 &#32;&#32;&#32;&#32;availability[Avail.index()].Platform&#32;=
08127 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespaceclang_1_1cxstring_1a19a4962be87f75a8c1fa5a0b75f76298">cxstring::createDup</link>(Avail.value()-&gt;getPlatform()-&gt;getName());
08128 &#32;&#32;&#32;&#32;availability[Avail.index()].Introduced&#32;=
08129 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;convertVersion(Avail.value()-&gt;getIntroduced());
08130 &#32;&#32;&#32;&#32;availability[Avail.index()].Deprecated&#32;=
08131 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;convertVersion(Avail.value()-&gt;getDeprecated());
08132 &#32;&#32;&#32;&#32;availability[Avail.index()].Obsoleted&#32;=
08133 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;convertVersion(Avail.value()-&gt;getObsoleted());
08134 &#32;&#32;&#32;&#32;availability[Avail.index()].Unavailable&#32;=&#32;Avail.value()-&gt;getUnavailable();
08135 &#32;&#32;&#32;&#32;availability[Avail.index()].Message&#32;=
08136 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespaceclang_1_1cxstring_1a19a4962be87f75a8c1fa5a0b75f76298">cxstring::createDup</link>(Avail.value()-&gt;getMessage());
08137 &#32;&#32;}
08138 
08139 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;AvailabilityAttrs.size();
08140 }
08141 
<anchor xml:id="__c_index_8cpp_source_1l08142"/><link linkend="__c_index_8cpp_1aaa67293732ecceedaed83ec2bac487e7">08142</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="__c_index_8cpp_1aaa67293732ecceedaed83ec2bac487e7">clang_disposeCXPlatformAvailability</link>(CXPlatformAvailability&#32;*availability)&#32;{
08143 &#32;&#32;<link linkend="__c_x_string_8cpp_1a46c85f1255580ed186aa6f7380a06883">clang_disposeString</link>(availability-&gt;Platform);
08144 &#32;&#32;<link linkend="__c_x_string_8cpp_1a46c85f1255580ed186aa6f7380a06883">clang_disposeString</link>(availability-&gt;Message);
08145 }
08146 
<anchor xml:id="__c_index_8cpp_source_1l08147"/><link linkend="__c_index_8cpp_1ad639f449c1c95d38ca5b5e283e72b40d">08147</link> CXLanguageKind&#32;<link linkend="__c_index_8cpp_1ad639f449c1c95d38ca5b5e283e72b40d">clang_getCursorLanguage</link>(CXCursor&#32;cursor)&#32;{
08148 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="__c_index_8cpp_1a5d47db8f608ae0c266d6551875d46b80">clang_isDeclaration</link>(cursor.kind))
08149 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;getDeclLanguage(<link linkend="_namespaceclang_1_1cxcursor_1a1f702246831c96afd990e457613dc642">cxcursor::getCursorDecl</link>(cursor));
08150 
08151 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;CXLanguage_Invalid;
08152 }
08153 
<anchor xml:id="__c_index_8cpp_source_1l08154"/><link linkend="__c_index_8cpp_1a50357467fc444ba7019986ea2dea65b7">08154</link> CXTLSKind&#32;<link linkend="__c_index_8cpp_1a50357467fc444ba7019986ea2dea65b7">clang_getCursorTLSKind</link>(CXCursor&#32;cursor)&#32;{
08155 &#32;&#32;<emphasis role="keyword">const</emphasis>&#32;Decl&#32;*D&#32;=&#32;<link linkend="_namespaceclang_1_1cxcursor_1a1f702246831c96afd990e457613dc642">cxcursor::getCursorDecl</link>(cursor);
08156 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;VarDecl&#32;*VD&#32;=&#32;dyn_cast&lt;VarDecl&gt;(D))&#32;{
08157 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(VD-&gt;getTLSKind())&#32;{
08158 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;VarDecl::TLS_None:
08159 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;CXTLS_None;
08160 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;VarDecl::TLS_Dynamic:
08161 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;CXTLS_Dynamic;
08162 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;VarDecl::TLS_Static:
08163 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;CXTLS_Static;
08164 &#32;&#32;&#32;&#32;}
08165 &#32;&#32;}
08166 
08167 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;CXTLS_None;
08168 }
08169 
<anchor xml:id="__c_index_8cpp_source_1l08173"/><link linkend="__c_index_8cpp_1a0191cd6b4fbd65668e4717719b3f2a00">08173</link> <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;Decl&#32;*maybeGetTemplateCursor(<emphasis role="keyword">const</emphasis>&#32;Decl&#32;*D)&#32;{
08174 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!D)
08175 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">nullptr</emphasis>;
08176 
08177 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;FunctionDecl&#32;*FD&#32;=&#32;dyn_cast&lt;FunctionDecl&gt;(D))
08178 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(FunctionTemplateDecl&#32;*FunTmpl&#32;=&#32;FD-&gt;getDescribedFunctionTemplate())
08179 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;FunTmpl;
08180 
08181 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;CXXRecordDecl&#32;*RD&#32;=&#32;dyn_cast&lt;CXXRecordDecl&gt;(D))
08182 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(ClassTemplateDecl&#32;*ClassTmpl&#32;=&#32;RD-&gt;getDescribedClassTemplate())
08183 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;ClassTmpl;
08184 
08185 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;D;
08186 }
08187 
08188 <emphasis role="keyword">enum</emphasis>&#32;CX_StorageClass&#32;<link linkend="__c_index_8cpp_1a0191cd6b4fbd65668e4717719b3f2a00">clang_Cursor_getStorageClass</link>(CXCursor&#32;C)&#32;{
08189 &#32;&#32;StorageClass&#32;sc&#32;=&#32;SC_None;
08190 &#32;&#32;<emphasis role="keyword">const</emphasis>&#32;Decl&#32;*D&#32;=&#32;<link linkend="_namespaceclang_1_1cxcursor_1a1f702246831c96afd990e457613dc642">getCursorDecl</link>(C);
08191 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(D)&#32;{
08192 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;FunctionDecl&#32;*FD&#32;=&#32;dyn_cast&lt;FunctionDecl&gt;(D))&#32;{
08193 &#32;&#32;&#32;&#32;&#32;&#32;sc&#32;=&#32;FD-&gt;getStorageClass();
08194 &#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;VarDecl&#32;*VD&#32;=&#32;dyn_cast&lt;VarDecl&gt;(D))&#32;{
08195 &#32;&#32;&#32;&#32;&#32;&#32;sc&#32;=&#32;VD-&gt;getStorageClass();
08196 &#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
08197 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;CX_SC_Invalid;
08198 &#32;&#32;&#32;&#32;}
08199 &#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
08200 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;CX_SC_Invalid;
08201 &#32;&#32;}
08202 &#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(sc)&#32;{
08203 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;SC_None:
08204 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;CX_SC_None;
08205 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;SC_Extern:
08206 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;CX_SC_Extern;
08207 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;SC_Static:
08208 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;CX_SC_Static;
08209 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;SC_PrivateExtern:
08210 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;CX_SC_PrivateExtern;
08211 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;SC_Auto:
08212 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;CX_SC_Auto;
08213 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;SC_Register:
08214 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;CX_SC_Register;
08215 &#32;&#32;}
08216 &#32;&#32;llvm_unreachable(<emphasis role="stringliteral">&quot;Unhandled&#32;storage&#32;class!&quot;</emphasis>);
08217 }
08218 
<anchor xml:id="__c_index_8cpp_source_1l08219"/><link linkend="__c_index_8cpp_1a114663793af87aa65d983a8514db6b43">08219</link> CXCursor&#32;<link linkend="__c_index_8cpp_1a114663793af87aa65d983a8514db6b43">clang_getCursorSemanticParent</link>(CXCursor&#32;cursor)&#32;{
08220 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="__c_index_8cpp_1a5d47db8f608ae0c266d6551875d46b80">clang_isDeclaration</link>(cursor.kind))&#32;{
08221 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;Decl&#32;*D&#32;=&#32;<link linkend="_namespaceclang_1_1cxcursor_1a1f702246831c96afd990e457613dc642">getCursorDecl</link>(cursor))&#32;{
08222 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;DeclContext&#32;*DC&#32;=&#32;D-&gt;getDeclContext();
08223 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!DC)
08224 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__c_index_8cpp_1aa22233466eaf91f6f3cf6b84255c3b68">clang_getNullCursor</link>();
08225 
08226 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxcursor_1ab61ec2059175833672e8e78a376bb218">MakeCXCursor</link>(maybeGetTemplateCursor(cast&lt;Decl&gt;(DC)),
08227 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespaceclang_1_1cxcursor_1a23a495df22339e8289ae6d2421f493b6">getCursorTU</link>(cursor));
08228 &#32;&#32;&#32;&#32;}
08229 &#32;&#32;}
08230 
08231 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="__c_index_8cpp_1af186bec30eb4cb63c3a7a295ccbcfe8b">clang_isStatement</link>(cursor.kind)&#32;||&#32;<link linkend="__c_index_8cpp_1ab958945dd59c351e1ae1a3f7f5668095">clang_isExpression</link>(cursor.kind))&#32;{
08232 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;Decl&#32;*D&#32;=&#32;<link linkend="_namespaceclang_1_1cxcursor_1a1f702246831c96afd990e457613dc642">getCursorDecl</link>(cursor))
08233 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxcursor_1ab61ec2059175833672e8e78a376bb218">MakeCXCursor</link>(D,&#32;<link linkend="_namespaceclang_1_1cxcursor_1a23a495df22339e8289ae6d2421f493b6">getCursorTU</link>(cursor));
08234 &#32;&#32;}
08235 
08236 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__c_index_8cpp_1aa22233466eaf91f6f3cf6b84255c3b68">clang_getNullCursor</link>();
08237 }
08238 
<anchor xml:id="__c_index_8cpp_source_1l08239"/><link linkend="__c_index_8cpp_1a777ad61fbe329a32f0478dd71cdeca61">08239</link> CXCursor&#32;<link linkend="__c_index_8cpp_1a777ad61fbe329a32f0478dd71cdeca61">clang_getCursorLexicalParent</link>(CXCursor&#32;cursor)&#32;{
08240 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="__c_index_8cpp_1a5d47db8f608ae0c266d6551875d46b80">clang_isDeclaration</link>(cursor.kind))&#32;{
08241 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;Decl&#32;*D&#32;=&#32;<link linkend="_namespaceclang_1_1cxcursor_1a1f702246831c96afd990e457613dc642">getCursorDecl</link>(cursor))&#32;{
08242 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;DeclContext&#32;*DC&#32;=&#32;D-&gt;getLexicalDeclContext();
08243 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!DC)
08244 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__c_index_8cpp_1aa22233466eaf91f6f3cf6b84255c3b68">clang_getNullCursor</link>();
08245 
08246 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxcursor_1ab61ec2059175833672e8e78a376bb218">MakeCXCursor</link>(maybeGetTemplateCursor(cast&lt;Decl&gt;(DC)),
08247 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespaceclang_1_1cxcursor_1a23a495df22339e8289ae6d2421f493b6">getCursorTU</link>(cursor));
08248 &#32;&#32;&#32;&#32;}
08249 &#32;&#32;}
08250 
08251 &#32;&#32;<emphasis role="comment">//&#32;FIXME:&#32;Note&#32;that&#32;we&#32;can&apos;t&#32;easily&#32;compute&#32;the&#32;lexical&#32;context&#32;of&#32;a</emphasis>
08252 &#32;&#32;<emphasis role="comment">//&#32;statement&#32;or&#32;expression,&#32;so&#32;we&#32;return&#32;nothing.</emphasis>
08253 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__c_index_8cpp_1aa22233466eaf91f6f3cf6b84255c3b68">clang_getNullCursor</link>();
08254 }
08255 
<anchor xml:id="__c_index_8cpp_source_1l08256"/><link linkend="__c_index_8cpp_1a9baf5d19004c01b13cca32574bf6f595">08256</link> CXFile&#32;<link linkend="__c_index_8cpp_1a9baf5d19004c01b13cca32574bf6f595">clang_getIncludedFile</link>(CXCursor&#32;cursor)&#32;{
08257 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(cursor.kind&#32;!=&#32;CXCursor_InclusionDirective)
08258 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">nullptr</emphasis>;
08259 
08260 &#32;&#32;<emphasis role="keyword">const</emphasis>&#32;InclusionDirective&#32;*ID&#32;=&#32;<link linkend="_namespaceclang_1_1cxcursor_1a3894d584fef6edb8ba4333fc240315ac">getCursorInclusionDirective</link>(cursor);
08261 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">const_cast&lt;</emphasis>FileEntry&#32;*<emphasis role="keyword">&gt;</emphasis>(ID-&gt;getFile());
08262 }
08263 
<anchor xml:id="__c_index_8cpp_source_1l08264"/><link linkend="__c_index_8cpp_1af65ce11e5a95923ac8a65745b5e4476c">08264</link> <emphasis role="keywordtype">unsigned</emphasis>&#32;<link linkend="__c_index_8cpp_1af65ce11e5a95923ac8a65745b5e4476c">clang_Cursor_getObjCPropertyAttributes</link>(CXCursor&#32;C,&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;reserved)&#32;{
08265 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(C.kind&#32;!=&#32;CXCursor_ObjCPropertyDecl)
08266 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;CXObjCPropertyAttr_noattr;
08267 
08268 &#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;Result&#32;=&#32;CXObjCPropertyAttr_noattr;
08269 &#32;&#32;<emphasis role="keyword">const</emphasis>&#32;ObjCPropertyDecl&#32;*PD&#32;=&#32;dyn_cast&lt;ObjCPropertyDecl&gt;(<link linkend="_namespaceclang_1_1cxcursor_1a1f702246831c96afd990e457613dc642">getCursorDecl</link>(C));
08270 &#32;&#32;ObjCPropertyAttribute::Kind&#32;Attr&#32;=&#32;PD-&gt;getPropertyAttributesAsWritten();
08271 
08272 <emphasis role="preprocessor">#define&#32;SET_CXOBJCPROP_ATTR(A)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
08273 <emphasis role="preprocessor">&#32;&#32;if&#32;(Attr&#32;&amp;&#32;ObjCPropertyAttribute::kind_##A)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
08274 <emphasis role="preprocessor">&#32;&#32;Result&#32;|=&#32;CXObjCPropertyAttr_##A</emphasis>
08275 &#32;&#32;<link linkend="__c_index_8cpp_1ad1cb77494b671d342a9e12ea17594ce7">SET_CXOBJCPROP_ATTR</link>(readonly);
08276 &#32;&#32;<link linkend="__c_index_8cpp_1ad1cb77494b671d342a9e12ea17594ce7">SET_CXOBJCPROP_ATTR</link>(getter);
08277 &#32;&#32;<link linkend="__c_index_8cpp_1ad1cb77494b671d342a9e12ea17594ce7">SET_CXOBJCPROP_ATTR</link>(assign);
08278 &#32;&#32;<link linkend="__c_index_8cpp_1ad1cb77494b671d342a9e12ea17594ce7">SET_CXOBJCPROP_ATTR</link>(readwrite);
08279 &#32;&#32;<link linkend="__c_index_8cpp_1ad1cb77494b671d342a9e12ea17594ce7">SET_CXOBJCPROP_ATTR</link>(retain);
08280 &#32;&#32;<link linkend="__c_index_8cpp_1ad1cb77494b671d342a9e12ea17594ce7">SET_CXOBJCPROP_ATTR</link>(copy);
08281 &#32;&#32;<link linkend="__c_index_8cpp_1ad1cb77494b671d342a9e12ea17594ce7">SET_CXOBJCPROP_ATTR</link>(nonatomic);
08282 &#32;&#32;<link linkend="__c_index_8cpp_1ad1cb77494b671d342a9e12ea17594ce7">SET_CXOBJCPROP_ATTR</link>(setter);
08283 &#32;&#32;<link linkend="__c_index_8cpp_1ad1cb77494b671d342a9e12ea17594ce7">SET_CXOBJCPROP_ATTR</link>(atomic);
08284 &#32;&#32;<link linkend="__c_index_8cpp_1ad1cb77494b671d342a9e12ea17594ce7">SET_CXOBJCPROP_ATTR</link>(weak);
08285 &#32;&#32;<link linkend="__c_index_8cpp_1ad1cb77494b671d342a9e12ea17594ce7">SET_CXOBJCPROP_ATTR</link>(strong);
08286 &#32;&#32;<link linkend="__c_index_8cpp_1ad1cb77494b671d342a9e12ea17594ce7">SET_CXOBJCPROP_ATTR</link>(unsafe_unretained);
08287 &#32;&#32;<link linkend="__c_index_8cpp_1ad1cb77494b671d342a9e12ea17594ce7">SET_CXOBJCPROP_ATTR</link>(<emphasis role="keyword">class</emphasis>);
08288 <emphasis role="preprocessor">#undef&#32;SET_CXOBJCPROP_ATTR</emphasis>
08289 
08290 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;Result;
08291 }
08292 
<anchor xml:id="__c_index_8cpp_source_1l08293"/><link linkend="__c_index_8cpp_1a74073124651f4d25994f1c660a3b097f">08293</link> CXString&#32;<link linkend="__c_index_8cpp_1a74073124651f4d25994f1c660a3b097f">clang_Cursor_getObjCPropertyGetterName</link>(CXCursor&#32;C)&#32;{
08294 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(C.kind&#32;!=&#32;CXCursor_ObjCPropertyDecl)
08295 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1a8684a35d52ccb8c623144db89a0205e1">cxstring::createNull</link>();
08296 
08297 &#32;&#32;<emphasis role="keyword">const</emphasis>&#32;ObjCPropertyDecl&#32;*PD&#32;=&#32;dyn_cast&lt;ObjCPropertyDecl&gt;(<link linkend="_namespaceclang_1_1cxcursor_1a1f702246831c96afd990e457613dc642">getCursorDecl</link>(C));
08298 &#32;&#32;Selector&#32;sel&#32;=&#32;PD-&gt;getGetterName();
08299 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(sel.isNull())
08300 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1a8684a35d52ccb8c623144db89a0205e1">cxstring::createNull</link>();
08301 
08302 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1a19a4962be87f75a8c1fa5a0b75f76298">cxstring::createDup</link>(sel.getAsString());
08303 }
08304 
<anchor xml:id="__c_index_8cpp_source_1l08305"/><link linkend="__c_index_8cpp_1ac65f3c2eccf604efa14c1b286cce5e26">08305</link> CXString&#32;<link linkend="__c_index_8cpp_1ac65f3c2eccf604efa14c1b286cce5e26">clang_Cursor_getObjCPropertySetterName</link>(CXCursor&#32;C)&#32;{
08306 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(C.kind&#32;!=&#32;CXCursor_ObjCPropertyDecl)
08307 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1a8684a35d52ccb8c623144db89a0205e1">cxstring::createNull</link>();
08308 
08309 &#32;&#32;<emphasis role="keyword">const</emphasis>&#32;ObjCPropertyDecl&#32;*PD&#32;=&#32;dyn_cast&lt;ObjCPropertyDecl&gt;(<link linkend="_namespaceclang_1_1cxcursor_1a1f702246831c96afd990e457613dc642">getCursorDecl</link>(C));
08310 &#32;&#32;Selector&#32;sel&#32;=&#32;PD-&gt;getSetterName();
08311 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(sel.isNull())
08312 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1a8684a35d52ccb8c623144db89a0205e1">cxstring::createNull</link>();
08313 
08314 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1a19a4962be87f75a8c1fa5a0b75f76298">cxstring::createDup</link>(sel.getAsString());
08315 }
08316 
<anchor xml:id="__c_index_8cpp_source_1l08317"/><link linkend="__c_index_8cpp_1a4aa93be0b9a3a68fbe3357f97e41b4ea">08317</link> <emphasis role="keywordtype">unsigned</emphasis>&#32;<link linkend="__c_index_8cpp_1a4aa93be0b9a3a68fbe3357f97e41b4ea">clang_Cursor_getObjCDeclQualifiers</link>(CXCursor&#32;C)&#32;{
08318 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!<link linkend="__c_index_8cpp_1a5d47db8f608ae0c266d6551875d46b80">clang_isDeclaration</link>(C.kind))
08319 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;CXObjCDeclQualifier_None;
08320 
08321 &#32;&#32;Decl::ObjCDeclQualifier&#32;QT&#32;=&#32;Decl::OBJC_TQ_None;
08322 &#32;&#32;<emphasis role="keyword">const</emphasis>&#32;Decl&#32;*D&#32;=&#32;<link linkend="_namespaceclang_1_1cxcursor_1a1f702246831c96afd990e457613dc642">getCursorDecl</link>(C);
08323 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;ObjCMethodDecl&#32;*MD&#32;=&#32;dyn_cast&lt;ObjCMethodDecl&gt;(D))
08324 &#32;&#32;&#32;&#32;QT&#32;=&#32;MD-&gt;getObjCDeclQualifier();
08325 &#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;ParmVarDecl&#32;*PD&#32;=&#32;dyn_cast&lt;ParmVarDecl&gt;(D))
08326 &#32;&#32;&#32;&#32;QT&#32;=&#32;PD-&gt;getObjCDeclQualifier();
08327 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(QT&#32;==&#32;Decl::OBJC_TQ_None)
08328 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;CXObjCDeclQualifier_None;
08329 
08330 &#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;Result&#32;=&#32;CXObjCDeclQualifier_None;
08331 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(QT&#32;&amp;&#32;Decl::OBJC_TQ_In)
08332 &#32;&#32;&#32;&#32;Result&#32;|=&#32;CXObjCDeclQualifier_In;
08333 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(QT&#32;&amp;&#32;Decl::OBJC_TQ_Inout)
08334 &#32;&#32;&#32;&#32;Result&#32;|=&#32;CXObjCDeclQualifier_Inout;
08335 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(QT&#32;&amp;&#32;Decl::OBJC_TQ_Out)
08336 &#32;&#32;&#32;&#32;Result&#32;|=&#32;CXObjCDeclQualifier_Out;
08337 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(QT&#32;&amp;&#32;Decl::OBJC_TQ_Bycopy)
08338 &#32;&#32;&#32;&#32;Result&#32;|=&#32;CXObjCDeclQualifier_Bycopy;
08339 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(QT&#32;&amp;&#32;Decl::OBJC_TQ_Byref)
08340 &#32;&#32;&#32;&#32;Result&#32;|=&#32;CXObjCDeclQualifier_Byref;
08341 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(QT&#32;&amp;&#32;Decl::OBJC_TQ_Oneway)
08342 &#32;&#32;&#32;&#32;Result&#32;|=&#32;CXObjCDeclQualifier_Oneway;
08343 
08344 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;Result;
08345 }
08346 
<anchor xml:id="__c_index_8cpp_source_1l08347"/><link linkend="__c_index_8cpp_1aa6b6ec13289e2906dab7a7e5974571cf">08347</link> <emphasis role="keywordtype">unsigned</emphasis>&#32;<link linkend="__c_index_8cpp_1aa6b6ec13289e2906dab7a7e5974571cf">clang_Cursor_isObjCOptional</link>(CXCursor&#32;C)&#32;{
08348 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!<link linkend="__c_index_8cpp_1a5d47db8f608ae0c266d6551875d46b80">clang_isDeclaration</link>(C.kind))
08349 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
08350 
08351 &#32;&#32;<emphasis role="keyword">const</emphasis>&#32;Decl&#32;*D&#32;=&#32;<link linkend="_namespaceclang_1_1cxcursor_1a1f702246831c96afd990e457613dc642">getCursorDecl</link>(C);
08352 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;ObjCPropertyDecl&#32;*PD&#32;=&#32;dyn_cast&lt;ObjCPropertyDecl&gt;(D))
08353 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;PD-&gt;getPropertyImplementation()&#32;==&#32;ObjCPropertyDecl::Optional;
08354 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;ObjCMethodDecl&#32;*MD&#32;=&#32;dyn_cast&lt;ObjCMethodDecl&gt;(D))
08355 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;MD-&gt;getImplementationControl()&#32;==&#32;ObjCMethodDecl::Optional;
08356 
08357 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
08358 }
08359 
<anchor xml:id="__c_index_8cpp_source_1l08360"/><link linkend="__c_index_8cpp_1a4c88f18c5be15491fbd88b1cacbf5fbf">08360</link> <emphasis role="keywordtype">unsigned</emphasis>&#32;<link linkend="__c_index_8cpp_1a4c88f18c5be15491fbd88b1cacbf5fbf">clang_Cursor_isVariadic</link>(CXCursor&#32;C)&#32;{
08361 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!<link linkend="__c_index_8cpp_1a5d47db8f608ae0c266d6551875d46b80">clang_isDeclaration</link>(C.kind))
08362 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
08363 
08364 &#32;&#32;<emphasis role="keyword">const</emphasis>&#32;Decl&#32;*D&#32;=&#32;<link linkend="_namespaceclang_1_1cxcursor_1a1f702246831c96afd990e457613dc642">getCursorDecl</link>(C);
08365 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;FunctionDecl&#32;*FD&#32;=&#32;dyn_cast&lt;FunctionDecl&gt;(D))
08366 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;FD-&gt;isVariadic();
08367 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;ObjCMethodDecl&#32;*MD&#32;=&#32;dyn_cast&lt;ObjCMethodDecl&gt;(D))
08368 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;MD-&gt;isVariadic();
08369 
08370 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
08371 }
08372 
<anchor xml:id="__c_index_8cpp_source_1l08373"/><link linkend="__c_index_8cpp_1a56b80d0bcb6eecee56bf8aa8e5c80896">08373</link> <emphasis role="keywordtype">unsigned</emphasis>&#32;<link linkend="__c_index_8cpp_1a56b80d0bcb6eecee56bf8aa8e5c80896">clang_Cursor_isExternalSymbol</link>(CXCursor&#32;C,&#32;CXString&#32;*language,
08374 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;CXString&#32;*definedIn,
08375 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;*isGenerated)&#32;{
08376 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!<link linkend="__c_index_8cpp_1a5d47db8f608ae0c266d6551875d46b80">clang_isDeclaration</link>(C.kind))
08377 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
08378 
08379 &#32;&#32;<emphasis role="keyword">const</emphasis>&#32;Decl&#32;*D&#32;=&#32;<link linkend="_namespaceclang_1_1cxcursor_1a1f702246831c96afd990e457613dc642">getCursorDecl</link>(C);
08380 
08381 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="keyword">auto</emphasis>&#32;*attr&#32;=&#32;D-&gt;getExternalSourceSymbolAttr())&#32;{
08382 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(language)
08383 &#32;&#32;&#32;&#32;&#32;&#32;*language&#32;=&#32;<link linkend="_namespaceclang_1_1cxstring_1a19a4962be87f75a8c1fa5a0b75f76298">cxstring::createDup</link>(attr-&gt;getLanguage());
08384 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(definedIn)
08385 &#32;&#32;&#32;&#32;&#32;&#32;*definedIn&#32;=&#32;<link linkend="_namespaceclang_1_1cxstring_1a19a4962be87f75a8c1fa5a0b75f76298">cxstring::createDup</link>(attr-&gt;getDefinedIn());
08386 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(isGenerated)
08387 &#32;&#32;&#32;&#32;&#32;&#32;*isGenerated&#32;=&#32;attr-&gt;getGeneratedDeclaration();
08388 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;1;
08389 &#32;&#32;}
08390 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
08391 }
08392 
<anchor xml:id="__c_index_8cpp_source_1l08393"/><link linkend="__c_index_8cpp_1acfc6a9db8380053fc33e62e70a4b294b">08393</link> CXSourceRange&#32;<link linkend="__c_index_8cpp_1acfc6a9db8380053fc33e62e70a4b294b">clang_Cursor_getCommentRange</link>(CXCursor&#32;C)&#32;{
08394 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!<link linkend="__c_index_8cpp_1a5d47db8f608ae0c266d6551875d46b80">clang_isDeclaration</link>(C.kind))
08395 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__c_x_source_location_8cpp_1afadb1a95ce51366407cf6c363299a17f">clang_getNullRange</link>();
08396 
08397 &#32;&#32;<emphasis role="keyword">const</emphasis>&#32;Decl&#32;*D&#32;=&#32;<link linkend="_namespaceclang_1_1cxcursor_1a1f702246831c96afd990e457613dc642">getCursorDecl</link>(C);
08398 &#32;&#32;ASTContext&#32;&amp;Context&#32;=&#32;<link linkend="_namespaceclang_1_1cxcursor_1a9f29c286f26b3cf616331c7e6554d373">getCursorContext</link>(C);
08399 &#32;&#32;<emphasis role="keyword">const</emphasis>&#32;RawComment&#32;*RC&#32;=&#32;Context.getRawCommentForAnyRedecl(D);
08400 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!RC)
08401 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__c_x_source_location_8cpp_1afadb1a95ce51366407cf6c363299a17f">clang_getNullRange</link>();
08402 
08403 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxloc_1a39d02b462b1f3233518f01951d83d035">cxloc::translateSourceRange</link>(Context,&#32;RC-&gt;getSourceRange());
08404 }
08405 
<anchor xml:id="__c_index_8cpp_source_1l08406"/><link linkend="__c_index_8cpp_1aa781f7c9e6773175108bd7539fa6cf38">08406</link> CXString&#32;<link linkend="__c_index_8cpp_1aa781f7c9e6773175108bd7539fa6cf38">clang_Cursor_getRawCommentText</link>(CXCursor&#32;C)&#32;{
08407 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!<link linkend="__c_index_8cpp_1a5d47db8f608ae0c266d6551875d46b80">clang_isDeclaration</link>(C.kind))
08408 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1a8684a35d52ccb8c623144db89a0205e1">cxstring::createNull</link>();
08409 
08410 &#32;&#32;<emphasis role="keyword">const</emphasis>&#32;Decl&#32;*D&#32;=&#32;<link linkend="_namespaceclang_1_1cxcursor_1a1f702246831c96afd990e457613dc642">getCursorDecl</link>(C);
08411 &#32;&#32;ASTContext&#32;&amp;Context&#32;=&#32;<link linkend="_namespaceclang_1_1cxcursor_1a9f29c286f26b3cf616331c7e6554d373">getCursorContext</link>(C);
08412 &#32;&#32;<emphasis role="keyword">const</emphasis>&#32;RawComment&#32;*RC&#32;=&#32;Context.getRawCommentForAnyRedecl(D);
08413 &#32;&#32;StringRef&#32;RawText&#32;=
08414 &#32;&#32;&#32;&#32;&#32;&#32;RC&#32;?&#32;RC-&gt;getRawText(Context.getSourceManager())&#32;:&#32;StringRef();
08415 
08416 &#32;&#32;<emphasis role="comment">//&#32;Don&apos;t&#32;duplicate&#32;the&#32;string&#32;because&#32;RawText&#32;points&#32;directly&#32;into&#32;source</emphasis>
08417 &#32;&#32;<emphasis role="comment">//&#32;code.</emphasis>
08418 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(RawText);
08419 }
08420 
<anchor xml:id="__c_index_8cpp_source_1l08421"/><link linkend="__c_index_8cpp_1a9fdbd8a38405153494cef86239d10bbb">08421</link> CXString&#32;<link linkend="__c_index_8cpp_1a9fdbd8a38405153494cef86239d10bbb">clang_Cursor_getBriefCommentText</link>(CXCursor&#32;C)&#32;{
08422 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!<link linkend="__c_index_8cpp_1a5d47db8f608ae0c266d6551875d46b80">clang_isDeclaration</link>(C.kind))
08423 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1a8684a35d52ccb8c623144db89a0205e1">cxstring::createNull</link>();
08424 
08425 &#32;&#32;<emphasis role="keyword">const</emphasis>&#32;Decl&#32;*D&#32;=&#32;<link linkend="_namespaceclang_1_1cxcursor_1a1f702246831c96afd990e457613dc642">getCursorDecl</link>(C);
08426 &#32;&#32;<emphasis role="keyword">const</emphasis>&#32;ASTContext&#32;&amp;Context&#32;=&#32;<link linkend="_namespaceclang_1_1cxcursor_1a9f29c286f26b3cf616331c7e6554d373">getCursorContext</link>(C);
08427 &#32;&#32;<emphasis role="keyword">const</emphasis>&#32;RawComment&#32;*RC&#32;=&#32;Context.getRawCommentForAnyRedecl(D);
08428 
08429 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(RC)&#32;{
08430 &#32;&#32;&#32;&#32;StringRef&#32;BriefText&#32;=&#32;RC-&gt;getBriefText(Context);
08431 
08432 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Don&apos;t&#32;duplicate&#32;the&#32;string&#32;because&#32;RawComment&#32;ensures&#32;that&#32;this&#32;memory</emphasis>
08433 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;will&#32;not&#32;go&#32;away.</emphasis>
08434 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(BriefText);
08435 &#32;&#32;}
08436 
08437 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1a8684a35d52ccb8c623144db89a0205e1">cxstring::createNull</link>();
08438 }
08439 
<anchor xml:id="__c_index_8cpp_source_1l08440"/><link linkend="__c_index_8cpp_1a2ca727eeafb4e4eded5e17a28ce42f3d">08440</link> CXModule&#32;<link linkend="__c_index_8cpp_1a2ca727eeafb4e4eded5e17a28ce42f3d">clang_Cursor_getModule</link>(CXCursor&#32;C)&#32;{
08441 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(C.kind&#32;==&#32;CXCursor_ModuleImportDecl)&#32;{
08442 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;ImportDecl&#32;*ImportD&#32;=
08443 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;dyn_cast_or_null&lt;ImportDecl&gt;(<link linkend="_namespaceclang_1_1cxcursor_1a1f702246831c96afd990e457613dc642">getCursorDecl</link>(C)))
08444 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;ImportD-&gt;getImportedModule();
08445 &#32;&#32;}
08446 
08447 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">nullptr</emphasis>;
08448 }
08449 
<anchor xml:id="__c_index_8cpp_source_1l08450"/><link linkend="__c_index_8cpp_1a4a0e32160409a25df3774943953152ba">08450</link> CXModule&#32;<link linkend="__c_index_8cpp_1a4a0e32160409a25df3774943953152ba">clang_getModuleForFile</link>(CXTranslationUnit&#32;TU,&#32;CXFile&#32;File)&#32;{
08451 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(isNotUsableTU(TU))&#32;{
08452 &#32;&#32;&#32;&#32;<link linkend="__c_x_translation_unit_8h_1a4ec17e6e03ea0baf73e27802eae36106">LOG_BAD_TU</link>(TU);
08453 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">nullptr</emphasis>;
08454 &#32;&#32;}
08455 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!File)
08456 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">nullptr</emphasis>;
08457 &#32;&#32;FileEntry&#32;*FE&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis>FileEntry&#32;*<emphasis role="keyword">&gt;</emphasis>(File);
08458 
08459 &#32;&#32;ASTUnit&#32;&amp;Unit&#32;=&#32;*cxtu::getASTUnit(TU);
08460 &#32;&#32;HeaderSearch&#32;&amp;HS&#32;=&#32;Unit.getPreprocessor().getHeaderSearchInfo();
08461 &#32;&#32;ModuleMap::KnownHeader&#32;Header&#32;=&#32;HS.findModuleForHeader(FE);
08462 
08463 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;Header.getModule();
08464 }
08465 
<anchor xml:id="__c_index_8cpp_source_1l08466"/><link linkend="__c_index_8cpp_1a70af2b7ec3ffa582bf6856a740af2fb3">08466</link> CXFile&#32;<link linkend="__c_index_8cpp_1a70af2b7ec3ffa582bf6856a740af2fb3">clang_Module_getASTFile</link>(CXModule&#32;CXMod)&#32;{
08467 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!CXMod)
08468 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">nullptr</emphasis>;
08469 &#32;&#32;Module&#32;*Mod&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis>Module&#32;*<emphasis role="keyword">&gt;</emphasis>(CXMod);
08470 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="keyword">auto</emphasis>&#32;File&#32;=&#32;Mod-&gt;getASTFile())
08471 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">const_cast&lt;</emphasis>FileEntry&#32;*<emphasis role="keyword">&gt;</emphasis>(&amp;File-&gt;getFileEntry());
08472 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">nullptr</emphasis>;
08473 }
08474 
<anchor xml:id="__c_index_8cpp_source_1l08475"/><link linkend="__c_index_8cpp_1aa90e248614976fd260dab3ad43a845e8">08475</link> CXModule&#32;<link linkend="__c_index_8cpp_1aa90e248614976fd260dab3ad43a845e8">clang_Module_getParent</link>(CXModule&#32;CXMod)&#32;{
08476 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!CXMod)
08477 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">nullptr</emphasis>;
08478 &#32;&#32;Module&#32;*Mod&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis>Module&#32;*<emphasis role="keyword">&gt;</emphasis>(CXMod);
08479 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;Mod-&gt;Parent;
08480 }
08481 
<anchor xml:id="__c_index_8cpp_source_1l08482"/><link linkend="__c_index_8cpp_1a2a1d6b9f6950cde7be6f62818a8a6253">08482</link> CXString&#32;<link linkend="__c_index_8cpp_1a2a1d6b9f6950cde7be6f62818a8a6253">clang_Module_getName</link>(CXModule&#32;CXMod)&#32;{
08483 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!CXMod)
08484 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1a8a49aa6ea196abdde85886689f2630f9">cxstring::createEmpty</link>();
08485 &#32;&#32;Module&#32;*Mod&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis>Module&#32;*<emphasis role="keyword">&gt;</emphasis>(CXMod);
08486 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1a19a4962be87f75a8c1fa5a0b75f76298">cxstring::createDup</link>(Mod-&gt;Name);
08487 }
08488 
<anchor xml:id="__c_index_8cpp_source_1l08489"/><link linkend="__c_index_8cpp_1a266036edc3230b98a9c96c33eedae46a">08489</link> CXString&#32;<link linkend="__c_index_8cpp_1a266036edc3230b98a9c96c33eedae46a">clang_Module_getFullName</link>(CXModule&#32;CXMod)&#32;{
08490 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!CXMod)
08491 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1a8a49aa6ea196abdde85886689f2630f9">cxstring::createEmpty</link>();
08492 &#32;&#32;Module&#32;*Mod&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis>Module&#32;*<emphasis role="keyword">&gt;</emphasis>(CXMod);
08493 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1a19a4962be87f75a8c1fa5a0b75f76298">cxstring::createDup</link>(Mod-&gt;getFullModuleName());
08494 }
08495 
<anchor xml:id="__c_index_8cpp_source_1l08496"/><link linkend="__c_index_8cpp_1ad14a1b11d95472b1b00952419b96b718">08496</link> <emphasis role="keywordtype">int</emphasis>&#32;<link linkend="__c_index_8cpp_1ad14a1b11d95472b1b00952419b96b718">clang_Module_isSystem</link>(CXModule&#32;CXMod)&#32;{
08497 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!CXMod)
08498 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
08499 &#32;&#32;Module&#32;*Mod&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis>Module&#32;*<emphasis role="keyword">&gt;</emphasis>(CXMod);
08500 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;Mod-&gt;IsSystem;
08501 }
08502 
<anchor xml:id="__c_index_8cpp_source_1l08503"/><link linkend="__c_index_8cpp_1a386d6d2cb23cfb6be756392a4fb18de7">08503</link> <emphasis role="keywordtype">unsigned</emphasis>&#32;<link linkend="__c_index_8cpp_1a386d6d2cb23cfb6be756392a4fb18de7">clang_Module_getNumTopLevelHeaders</link>(CXTranslationUnit&#32;TU,
08504 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;CXModule&#32;CXMod)&#32;{
08505 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(isNotUsableTU(TU))&#32;{
08506 &#32;&#32;&#32;&#32;<link linkend="__c_x_translation_unit_8h_1a4ec17e6e03ea0baf73e27802eae36106">LOG_BAD_TU</link>(TU);
08507 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
08508 &#32;&#32;}
08509 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!CXMod)
08510 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
08511 &#32;&#32;Module&#32;*Mod&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis>Module&#32;*<emphasis role="keyword">&gt;</emphasis>(CXMod);
08512 &#32;&#32;FileManager&#32;&amp;FileMgr&#32;=&#32;cxtu::getASTUnit(TU)-&gt;getFileManager();
08513 &#32;&#32;ArrayRef&lt;const&#32;FileEntry&#32;*&gt;&#32;TopHeaders&#32;=&#32;Mod-&gt;getTopHeaders(FileMgr);
08514 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;TopHeaders.size();
08515 }
08516 
<anchor xml:id="__c_index_8cpp_source_1l08517"/><link linkend="__c_index_8cpp_1a7616ad81129da898d08a576a8e603c78">08517</link> CXFile&#32;<link linkend="__c_index_8cpp_1a7616ad81129da898d08a576a8e603c78">clang_Module_getTopLevelHeader</link>(CXTranslationUnit&#32;TU,&#32;CXModule&#32;CXMod,
08518 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;Index)&#32;{
08519 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(isNotUsableTU(TU))&#32;{
08520 &#32;&#32;&#32;&#32;<link linkend="__c_x_translation_unit_8h_1a4ec17e6e03ea0baf73e27802eae36106">LOG_BAD_TU</link>(TU);
08521 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">nullptr</emphasis>;
08522 &#32;&#32;}
08523 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!CXMod)
08524 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">nullptr</emphasis>;
08525 &#32;&#32;Module&#32;*Mod&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis>Module&#32;*<emphasis role="keyword">&gt;</emphasis>(CXMod);
08526 &#32;&#32;FileManager&#32;&amp;FileMgr&#32;=&#32;cxtu::getASTUnit(TU)-&gt;getFileManager();
08527 
08528 &#32;&#32;ArrayRef&lt;const&#32;FileEntry&#32;*&gt;&#32;TopHeaders&#32;=&#32;Mod-&gt;getTopHeaders(FileMgr);
08529 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(Index&#32;&lt;&#32;TopHeaders.size())
08530 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">const_cast&lt;</emphasis>FileEntry&#32;*<emphasis role="keyword">&gt;</emphasis>(TopHeaders[Index]);
08531 
08532 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">nullptr</emphasis>;
08533 }
08534 
08535 <emphasis role="comment">//===----------------------------------------------------------------------===//</emphasis>
08536 <emphasis role="comment">//&#32;C++&#32;AST&#32;instrospection.</emphasis>
08537 <emphasis role="comment">//===----------------------------------------------------------------------===//</emphasis>
08538 
<anchor xml:id="__c_index_8cpp_source_1l08539"/><link linkend="__c_index_8cpp_1ac6857426b17cddb66fdc5dc421bd5563">08539</link> <emphasis role="keywordtype">unsigned</emphasis>&#32;<link linkend="__c_index_8cpp_1ac6857426b17cddb66fdc5dc421bd5563">clang_CXXConstructor_isDefaultConstructor</link>(CXCursor&#32;C)&#32;{
08540 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!<link linkend="__c_index_8cpp_1a5d47db8f608ae0c266d6551875d46b80">clang_isDeclaration</link>(C.kind))
08541 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
08542 
08543 &#32;&#32;<emphasis role="keyword">const</emphasis>&#32;Decl&#32;*D&#32;=&#32;<link linkend="_namespaceclang_1_1cxcursor_1a1f702246831c96afd990e457613dc642">cxcursor::getCursorDecl</link>(C);
08544 &#32;&#32;<emphasis role="keyword">const</emphasis>&#32;CXXConstructorDecl&#32;*Constructor&#32;=
08545 &#32;&#32;&#32;&#32;&#32;&#32;D&#32;?&#32;dyn_cast_or_null&lt;CXXConstructorDecl&gt;(D-&gt;getAsFunction())&#32;:&#32;<emphasis role="keyword">nullptr</emphasis>;
08546 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(Constructor&#32;&amp;&amp;&#32;Constructor-&gt;isDefaultConstructor())&#32;?&#32;1&#32;:&#32;0;
08547 }
08548 
<anchor xml:id="__c_index_8cpp_source_1l08549"/><link linkend="__c_index_8cpp_1a2c261341a67f895a0eb5d6f4c70763d1">08549</link> <emphasis role="keywordtype">unsigned</emphasis>&#32;<link linkend="__c_index_8cpp_1a2c261341a67f895a0eb5d6f4c70763d1">clang_CXXConstructor_isCopyConstructor</link>(CXCursor&#32;C)&#32;{
08550 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!<link linkend="__c_index_8cpp_1a5d47db8f608ae0c266d6551875d46b80">clang_isDeclaration</link>(C.kind))
08551 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
08552 
08553 &#32;&#32;<emphasis role="keyword">const</emphasis>&#32;Decl&#32;*D&#32;=&#32;<link linkend="_namespaceclang_1_1cxcursor_1a1f702246831c96afd990e457613dc642">cxcursor::getCursorDecl</link>(C);
08554 &#32;&#32;<emphasis role="keyword">const</emphasis>&#32;CXXConstructorDecl&#32;*Constructor&#32;=
08555 &#32;&#32;&#32;&#32;&#32;&#32;D&#32;?&#32;dyn_cast_or_null&lt;CXXConstructorDecl&gt;(D-&gt;getAsFunction())&#32;:&#32;<emphasis role="keyword">nullptr</emphasis>;
08556 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(Constructor&#32;&amp;&amp;&#32;Constructor-&gt;isCopyConstructor())&#32;?&#32;1&#32;:&#32;0;
08557 }
08558 
<anchor xml:id="__c_index_8cpp_source_1l08559"/><link linkend="__c_index_8cpp_1a3146967757d3544807a15b3a4f968aa9">08559</link> <emphasis role="keywordtype">unsigned</emphasis>&#32;<link linkend="__c_index_8cpp_1a3146967757d3544807a15b3a4f968aa9">clang_CXXConstructor_isMoveConstructor</link>(CXCursor&#32;C)&#32;{
08560 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!<link linkend="__c_index_8cpp_1a5d47db8f608ae0c266d6551875d46b80">clang_isDeclaration</link>(C.kind))
08561 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
08562 
08563 &#32;&#32;<emphasis role="keyword">const</emphasis>&#32;Decl&#32;*D&#32;=&#32;<link linkend="_namespaceclang_1_1cxcursor_1a1f702246831c96afd990e457613dc642">cxcursor::getCursorDecl</link>(C);
08564 &#32;&#32;<emphasis role="keyword">const</emphasis>&#32;CXXConstructorDecl&#32;*Constructor&#32;=
08565 &#32;&#32;&#32;&#32;&#32;&#32;D&#32;?&#32;dyn_cast_or_null&lt;CXXConstructorDecl&gt;(D-&gt;getAsFunction())&#32;:&#32;<emphasis role="keyword">nullptr</emphasis>;
08566 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(Constructor&#32;&amp;&amp;&#32;Constructor-&gt;isMoveConstructor())&#32;?&#32;1&#32;:&#32;0;
08567 }
08568 
<anchor xml:id="__c_index_8cpp_source_1l08569"/><link linkend="__c_index_8cpp_1acc53a751c76070406bc1a0d40a507416">08569</link> <emphasis role="keywordtype">unsigned</emphasis>&#32;<link linkend="__c_index_8cpp_1acc53a751c76070406bc1a0d40a507416">clang_CXXConstructor_isConvertingConstructor</link>(CXCursor&#32;C)&#32;{
08570 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!<link linkend="__c_index_8cpp_1a5d47db8f608ae0c266d6551875d46b80">clang_isDeclaration</link>(C.kind))
08571 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
08572 
08573 &#32;&#32;<emphasis role="keyword">const</emphasis>&#32;Decl&#32;*D&#32;=&#32;<link linkend="_namespaceclang_1_1cxcursor_1a1f702246831c96afd990e457613dc642">cxcursor::getCursorDecl</link>(C);
08574 &#32;&#32;<emphasis role="keyword">const</emphasis>&#32;CXXConstructorDecl&#32;*Constructor&#32;=
08575 &#32;&#32;&#32;&#32;&#32;&#32;D&#32;?&#32;dyn_cast_or_null&lt;CXXConstructorDecl&gt;(D-&gt;getAsFunction())&#32;:&#32;<emphasis role="keyword">nullptr</emphasis>;
08576 &#32;&#32;<emphasis role="comment">//&#32;Passing&#32;&apos;false&apos;&#32;excludes&#32;constructors&#32;marked&#32;&apos;explicit&apos;.</emphasis>
08577 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(Constructor&#32;&amp;&amp;&#32;Constructor-&gt;isConvertingConstructor(<emphasis role="keyword">false</emphasis>))&#32;?&#32;1&#32;:&#32;0;
08578 }
08579 
<anchor xml:id="__c_index_8cpp_source_1l08580"/><link linkend="__c_index_8cpp_1a9a284a8ec63f5e851daa500037e3c621">08580</link> <emphasis role="keywordtype">unsigned</emphasis>&#32;<link linkend="__c_index_8cpp_1a9a284a8ec63f5e851daa500037e3c621">clang_CXXField_isMutable</link>(CXCursor&#32;C)&#32;{
08581 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!<link linkend="__c_index_8cpp_1a5d47db8f608ae0c266d6551875d46b80">clang_isDeclaration</link>(C.kind))
08582 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
08583 
08584 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;D&#32;=&#32;<link linkend="_namespaceclang_1_1cxcursor_1a1f702246831c96afd990e457613dc642">cxcursor::getCursorDecl</link>(C))
08585 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;FD&#32;=&#32;dyn_cast_or_null&lt;FieldDecl&gt;(D))
08586 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;FD-&gt;isMutable()&#32;?&#32;1&#32;:&#32;0;
08587 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
08588 }
08589 
<anchor xml:id="__c_index_8cpp_source_1l08590"/><link linkend="__c_index_8cpp_1acb254e52b46647500e12d187d0f71e53">08590</link> <emphasis role="keywordtype">unsigned</emphasis>&#32;<link linkend="__c_index_8cpp_1acb254e52b46647500e12d187d0f71e53">clang_CXXMethod_isPureVirtual</link>(CXCursor&#32;C)&#32;{
08591 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!<link linkend="__c_index_8cpp_1a5d47db8f608ae0c266d6551875d46b80">clang_isDeclaration</link>(C.kind))
08592 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
08593 
08594 &#32;&#32;<emphasis role="keyword">const</emphasis>&#32;Decl&#32;*D&#32;=&#32;<link linkend="_namespaceclang_1_1cxcursor_1a1f702246831c96afd990e457613dc642">cxcursor::getCursorDecl</link>(C);
08595 &#32;&#32;<emphasis role="keyword">const</emphasis>&#32;CXXMethodDecl&#32;*Method&#32;=
08596 &#32;&#32;&#32;&#32;&#32;&#32;D&#32;?&#32;dyn_cast_or_null&lt;CXXMethodDecl&gt;(D-&gt;getAsFunction())&#32;:&#32;<emphasis role="keyword">nullptr</emphasis>;
08597 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(Method&#32;&amp;&amp;&#32;Method-&gt;isVirtual()&#32;&amp;&amp;&#32;Method-&gt;isPure())&#32;?&#32;1&#32;:&#32;0;
08598 }
08599 
<anchor xml:id="__c_index_8cpp_source_1l08600"/><link linkend="__c_index_8cpp_1a700b1fa88b7879f9cd9298b076f9fdfe">08600</link> <emphasis role="keywordtype">unsigned</emphasis>&#32;<link linkend="__c_index_8cpp_1a700b1fa88b7879f9cd9298b076f9fdfe">clang_CXXMethod_isConst</link>(CXCursor&#32;C)&#32;{
08601 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!<link linkend="__c_index_8cpp_1a5d47db8f608ae0c266d6551875d46b80">clang_isDeclaration</link>(C.kind))
08602 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
08603 
08604 &#32;&#32;<emphasis role="keyword">const</emphasis>&#32;Decl&#32;*D&#32;=&#32;<link linkend="_namespaceclang_1_1cxcursor_1a1f702246831c96afd990e457613dc642">cxcursor::getCursorDecl</link>(C);
08605 &#32;&#32;<emphasis role="keyword">const</emphasis>&#32;CXXMethodDecl&#32;*Method&#32;=
08606 &#32;&#32;&#32;&#32;&#32;&#32;D&#32;?&#32;dyn_cast_or_null&lt;CXXMethodDecl&gt;(D-&gt;getAsFunction())&#32;:&#32;<emphasis role="keyword">nullptr</emphasis>;
08607 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(Method&#32;&amp;&amp;&#32;Method-&gt;getMethodQualifiers().hasConst())&#32;?&#32;1&#32;:&#32;0;
08608 }
08609 
<anchor xml:id="__c_index_8cpp_source_1l08610"/><link linkend="__c_index_8cpp_1a8d4ee1fcce72ca516515388e6af796d3">08610</link> <emphasis role="keywordtype">unsigned</emphasis>&#32;<link linkend="__c_index_8cpp_1a8d4ee1fcce72ca516515388e6af796d3">clang_CXXMethod_isDefaulted</link>(CXCursor&#32;C)&#32;{
08611 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!<link linkend="__c_index_8cpp_1a5d47db8f608ae0c266d6551875d46b80">clang_isDeclaration</link>(C.kind))
08612 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
08613 
08614 &#32;&#32;<emphasis role="keyword">const</emphasis>&#32;Decl&#32;*D&#32;=&#32;<link linkend="_namespaceclang_1_1cxcursor_1a1f702246831c96afd990e457613dc642">cxcursor::getCursorDecl</link>(C);
08615 &#32;&#32;<emphasis role="keyword">const</emphasis>&#32;CXXMethodDecl&#32;*Method&#32;=
08616 &#32;&#32;&#32;&#32;&#32;&#32;D&#32;?&#32;dyn_cast_or_null&lt;CXXMethodDecl&gt;(D-&gt;getAsFunction())&#32;:&#32;<emphasis role="keyword">nullptr</emphasis>;
08617 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(Method&#32;&amp;&amp;&#32;Method-&gt;isDefaulted())&#32;?&#32;1&#32;:&#32;0;
08618 }
08619 
<anchor xml:id="__c_index_8cpp_source_1l08620"/><link linkend="__c_index_8cpp_1aca00e7b9f952a9bcb9edb9ba99be0c36">08620</link> <emphasis role="keywordtype">unsigned</emphasis>&#32;<link linkend="__c_index_8cpp_1aca00e7b9f952a9bcb9edb9ba99be0c36">clang_CXXMethod_isStatic</link>(CXCursor&#32;C)&#32;{
08621 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!<link linkend="__c_index_8cpp_1a5d47db8f608ae0c266d6551875d46b80">clang_isDeclaration</link>(C.kind))
08622 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
08623 
08624 &#32;&#32;<emphasis role="keyword">const</emphasis>&#32;Decl&#32;*D&#32;=&#32;<link linkend="_namespaceclang_1_1cxcursor_1a1f702246831c96afd990e457613dc642">cxcursor::getCursorDecl</link>(C);
08625 &#32;&#32;<emphasis role="keyword">const</emphasis>&#32;CXXMethodDecl&#32;*Method&#32;=
08626 &#32;&#32;&#32;&#32;&#32;&#32;D&#32;?&#32;dyn_cast_or_null&lt;CXXMethodDecl&gt;(D-&gt;getAsFunction())&#32;:&#32;<emphasis role="keyword">nullptr</emphasis>;
08627 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(Method&#32;&amp;&amp;&#32;Method-&gt;isStatic())&#32;?&#32;1&#32;:&#32;0;
08628 }
08629 
<anchor xml:id="__c_index_8cpp_source_1l08630"/><link linkend="__c_index_8cpp_1a59f93e621ce7b6a8fd8be167c9a0e353">08630</link> <emphasis role="keywordtype">unsigned</emphasis>&#32;<link linkend="__c_index_8cpp_1a59f93e621ce7b6a8fd8be167c9a0e353">clang_CXXMethod_isVirtual</link>(CXCursor&#32;C)&#32;{
08631 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!<link linkend="__c_index_8cpp_1a5d47db8f608ae0c266d6551875d46b80">clang_isDeclaration</link>(C.kind))
08632 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
08633 
08634 &#32;&#32;<emphasis role="keyword">const</emphasis>&#32;Decl&#32;*D&#32;=&#32;<link linkend="_namespaceclang_1_1cxcursor_1a1f702246831c96afd990e457613dc642">cxcursor::getCursorDecl</link>(C);
08635 &#32;&#32;<emphasis role="keyword">const</emphasis>&#32;CXXMethodDecl&#32;*Method&#32;=
08636 &#32;&#32;&#32;&#32;&#32;&#32;D&#32;?&#32;dyn_cast_or_null&lt;CXXMethodDecl&gt;(D-&gt;getAsFunction())&#32;:&#32;<emphasis role="keyword">nullptr</emphasis>;
08637 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(Method&#32;&amp;&amp;&#32;Method-&gt;isVirtual())&#32;?&#32;1&#32;:&#32;0;
08638 }
08639 
<anchor xml:id="__c_index_8cpp_source_1l08640"/><link linkend="__c_index_8cpp_1a7536535cae5849fc4c35143e09755fc4">08640</link> <emphasis role="keywordtype">unsigned</emphasis>&#32;<link linkend="__c_index_8cpp_1a7536535cae5849fc4c35143e09755fc4">clang_CXXRecord_isAbstract</link>(CXCursor&#32;C)&#32;{
08641 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!<link linkend="__c_index_8cpp_1a5d47db8f608ae0c266d6551875d46b80">clang_isDeclaration</link>(C.kind))
08642 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
08643 
08644 &#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;*D&#32;=&#32;<link linkend="_namespaceclang_1_1cxcursor_1a1f702246831c96afd990e457613dc642">cxcursor::getCursorDecl</link>(C);
08645 &#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;*RD&#32;=&#32;dyn_cast_or_null&lt;CXXRecordDecl&gt;(D);
08646 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(RD)
08647 &#32;&#32;&#32;&#32;RD&#32;=&#32;RD-&gt;getDefinition();
08648 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(RD&#32;&amp;&amp;&#32;RD-&gt;isAbstract())&#32;?&#32;1&#32;:&#32;0;
08649 }
08650 
<anchor xml:id="__c_index_8cpp_source_1l08651"/><link linkend="__c_index_8cpp_1a2b44e1c44b0977a639e424c1c775bb80">08651</link> <emphasis role="keywordtype">unsigned</emphasis>&#32;<link linkend="__c_index_8cpp_1a2b44e1c44b0977a639e424c1c775bb80">clang_EnumDecl_isScoped</link>(CXCursor&#32;C)&#32;{
08652 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!<link linkend="__c_index_8cpp_1a5d47db8f608ae0c266d6551875d46b80">clang_isDeclaration</link>(C.kind))
08653 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
08654 
08655 &#32;&#32;<emphasis role="keyword">const</emphasis>&#32;Decl&#32;*D&#32;=&#32;<link linkend="_namespaceclang_1_1cxcursor_1a1f702246831c96afd990e457613dc642">cxcursor::getCursorDecl</link>(C);
08656 &#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;*Enum&#32;=&#32;dyn_cast_or_null&lt;EnumDecl&gt;(D);
08657 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(Enum&#32;&amp;&amp;&#32;Enum-&gt;isScoped())&#32;?&#32;1&#32;:&#32;0;
08658 }
08659 
08660 <emphasis role="comment">//===----------------------------------------------------------------------===//</emphasis>
08661 <emphasis role="comment">//&#32;Attribute&#32;introspection.</emphasis>
08662 <emphasis role="comment">//===----------------------------------------------------------------------===//</emphasis>
08663 
<anchor xml:id="__c_index_8cpp_source_1l08664"/><link linkend="__c_index_8cpp_1abddfbdf52be8460f6501ca428494ee48">08664</link> CXType&#32;<link linkend="__c_index_8cpp_1abddfbdf52be8460f6501ca428494ee48">clang_getIBOutletCollectionType</link>(CXCursor&#32;C)&#32;{
08665 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(C.kind&#32;!=&#32;CXCursor_IBOutletCollectionAttr)
08666 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxtype_1afab44f51bd657249b6dcf6476c6b6b98">cxtype::MakeCXType</link>(QualType(),&#32;<link linkend="_namespaceclang_1_1cxcursor_1a23a495df22339e8289ae6d2421f493b6">cxcursor::getCursorTU</link>(C));
08667 
08668 &#32;&#32;<emphasis role="keyword">const</emphasis>&#32;IBOutletCollectionAttr&#32;*A&#32;=
08669 &#32;&#32;&#32;&#32;&#32;&#32;cast&lt;IBOutletCollectionAttr&gt;(<link linkend="_namespaceclang_1_1cxcursor_1afdc6aa952869e16b4981b07f05adff7f">cxcursor::getCursorAttr</link>(C));
08670 
08671 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxtype_1afab44f51bd657249b6dcf6476c6b6b98">cxtype::MakeCXType</link>(A-&gt;getInterface(),&#32;<link linkend="_namespaceclang_1_1cxcursor_1a23a495df22339e8289ae6d2421f493b6">cxcursor::getCursorTU</link>(C));
08672 }
08673 
08674 <emphasis role="comment">//===----------------------------------------------------------------------===//</emphasis>
08675 <emphasis role="comment">//&#32;Inspecting&#32;memory&#32;usage.</emphasis>
08676 <emphasis role="comment">//===----------------------------------------------------------------------===//</emphasis>
08677 
<anchor xml:id="__c_index_8cpp_source_1l08678"/><link linkend="__c_index_8cpp_1a8c5eea8e1522f74827362d4be37f75c8">08678</link> <emphasis role="keyword">typedef</emphasis>&#32;std::vector&lt;CXTUResourceUsageEntry&gt;&#32;<link linkend="__c_index_8cpp_1a8c5eea8e1522f74827362d4be37f75c8">MemUsageEntries</link>;
08679 
08680 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;createCXTUResourceUsageEntry(<link linkend="__c_index_8cpp_1a8c5eea8e1522f74827362d4be37f75c8">MemUsageEntries</link>&#32;&amp;entries,
08681 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">enum</emphasis>&#32;CXTUResourceUsageKind&#32;k,
08682 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;amount)&#32;{
08683 &#32;&#32;CXTUResourceUsageEntry&#32;entry&#32;=&#32;{k,&#32;amount};
08684 &#32;&#32;entries.push_back(entry);
08685 }
08686 
<anchor xml:id="__c_index_8cpp_source_1l08687"/><link linkend="__c_index_8cpp_1aeba9f6263fe5dbde18abb55b2f321a34">08687</link> <emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*<link linkend="__c_index_8cpp_1aeba9f6263fe5dbde18abb55b2f321a34">clang_getTUResourceUsageName</link>(CXTUResourceUsageKind&#32;kind)&#32;{
08688 &#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*str&#32;=&#32;<emphasis role="stringliteral">&quot;&quot;</emphasis>;
08689 &#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(kind)&#32;{
08690 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXTUResourceUsage_AST:
08691 &#32;&#32;&#32;&#32;str&#32;=&#32;<emphasis role="stringliteral">&quot;ASTContext:&#32;expressions,&#32;declarations,&#32;and&#32;types&quot;</emphasis>;
08692 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
08693 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXTUResourceUsage_Identifiers:
08694 &#32;&#32;&#32;&#32;str&#32;=&#32;<emphasis role="stringliteral">&quot;ASTContext:&#32;identifiers&quot;</emphasis>;
08695 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
08696 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXTUResourceUsage_Selectors:
08697 &#32;&#32;&#32;&#32;str&#32;=&#32;<emphasis role="stringliteral">&quot;ASTContext:&#32;selectors&quot;</emphasis>;
08698 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
08699 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXTUResourceUsage_GlobalCompletionResults:
08700 &#32;&#32;&#32;&#32;str&#32;=&#32;<emphasis role="stringliteral">&quot;Code&#32;completion:&#32;cached&#32;global&#32;results&quot;</emphasis>;
08701 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
08702 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXTUResourceUsage_SourceManagerContentCache:
08703 &#32;&#32;&#32;&#32;str&#32;=&#32;<emphasis role="stringliteral">&quot;SourceManager:&#32;content&#32;cache&#32;allocator&quot;</emphasis>;
08704 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
08705 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXTUResourceUsage_AST_SideTables:
08706 &#32;&#32;&#32;&#32;str&#32;=&#32;<emphasis role="stringliteral">&quot;ASTContext:&#32;side&#32;tables&quot;</emphasis>;
08707 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
08708 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXTUResourceUsage_SourceManager_Membuffer_Malloc:
08709 &#32;&#32;&#32;&#32;str&#32;=&#32;<emphasis role="stringliteral">&quot;SourceManager:&#32;malloc&apos;ed&#32;memory&#32;buffers&quot;</emphasis>;
08710 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
08711 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXTUResourceUsage_SourceManager_Membuffer_MMap:
08712 &#32;&#32;&#32;&#32;str&#32;=&#32;<emphasis role="stringliteral">&quot;SourceManager:&#32;mmap&apos;ed&#32;memory&#32;buffers&quot;</emphasis>;
08713 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
08714 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXTUResourceUsage_ExternalASTSource_Membuffer_Malloc:
08715 &#32;&#32;&#32;&#32;str&#32;=&#32;<emphasis role="stringliteral">&quot;ExternalASTSource:&#32;malloc&apos;ed&#32;memory&#32;buffers&quot;</emphasis>;
08716 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
08717 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXTUResourceUsage_ExternalASTSource_Membuffer_MMap:
08718 &#32;&#32;&#32;&#32;str&#32;=&#32;<emphasis role="stringliteral">&quot;ExternalASTSource:&#32;mmap&apos;ed&#32;memory&#32;buffers&quot;</emphasis>;
08719 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
08720 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXTUResourceUsage_Preprocessor:
08721 &#32;&#32;&#32;&#32;str&#32;=&#32;<emphasis role="stringliteral">&quot;Preprocessor:&#32;malloc&apos;ed&#32;memory&quot;</emphasis>;
08722 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
08723 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXTUResourceUsage_PreprocessingRecord:
08724 &#32;&#32;&#32;&#32;str&#32;=&#32;<emphasis role="stringliteral">&quot;Preprocessor:&#32;PreprocessingRecord&quot;</emphasis>;
08725 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
08726 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXTUResourceUsage_SourceManager_DataStructures:
08727 &#32;&#32;&#32;&#32;str&#32;=&#32;<emphasis role="stringliteral">&quot;SourceManager:&#32;data&#32;structures&#32;and&#32;tables&quot;</emphasis>;
08728 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
08729 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXTUResourceUsage_Preprocessor_HeaderSearch:
08730 &#32;&#32;&#32;&#32;str&#32;=&#32;<emphasis role="stringliteral">&quot;Preprocessor:&#32;header&#32;search&#32;tables&quot;</emphasis>;
08731 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
08732 &#32;&#32;}
08733 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;str;
08734 }
08735 
<anchor xml:id="__c_index_8cpp_source_1l08736"/><link linkend="__c_index_8cpp_1a72299455a328faf612d238bf6aee6eb6">08736</link> CXTUResourceUsage&#32;<link linkend="__c_index_8cpp_1a72299455a328faf612d238bf6aee6eb6">clang_getCXTUResourceUsage</link>(CXTranslationUnit&#32;TU)&#32;{
08737 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(isNotUsableTU(TU))&#32;{
08738 &#32;&#32;&#32;&#32;<link linkend="__c_x_translation_unit_8h_1a4ec17e6e03ea0baf73e27802eae36106">LOG_BAD_TU</link>(TU);
08739 &#32;&#32;&#32;&#32;CXTUResourceUsage&#32;usage&#32;=&#32;{(<emphasis role="keywordtype">void</emphasis>&#32;*)<emphasis role="keyword">nullptr</emphasis>,&#32;0,&#32;<emphasis role="keyword">nullptr</emphasis>};
08740 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;usage;
08741 &#32;&#32;}
08742 
08743 &#32;&#32;ASTUnit&#32;*astUnit&#32;=&#32;cxtu::getASTUnit(TU);
08744 &#32;&#32;std::unique_ptr&lt;MemUsageEntries&gt;&#32;entries(<emphasis role="keyword">new</emphasis>&#32;<link linkend="__c_index_8cpp_1a8c5eea8e1522f74827362d4be37f75c8">MemUsageEntries</link>());
08745 &#32;&#32;ASTContext&#32;&amp;astContext&#32;=&#32;astUnit-&gt;getASTContext();
08746 
08747 &#32;&#32;<emphasis role="comment">//&#32;How&#32;much&#32;memory&#32;is&#32;used&#32;by&#32;AST&#32;nodes&#32;and&#32;types?</emphasis>
08748 &#32;&#32;createCXTUResourceUsageEntry(
08749 &#32;&#32;&#32;&#32;&#32;&#32;*entries,&#32;CXTUResourceUsage_AST,
08750 &#32;&#32;&#32;&#32;&#32;&#32;(<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>)astContext.getASTAllocatedMemory());
08751 
08752 &#32;&#32;<emphasis role="comment">//&#32;How&#32;much&#32;memory&#32;is&#32;used&#32;by&#32;identifiers?</emphasis>
08753 &#32;&#32;createCXTUResourceUsageEntry(
08754 &#32;&#32;&#32;&#32;&#32;&#32;*entries,&#32;CXTUResourceUsage_Identifiers,
08755 &#32;&#32;&#32;&#32;&#32;&#32;(<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>)astContext.Idents.getAllocator().getTotalMemory());
08756 
08757 &#32;&#32;<emphasis role="comment">//&#32;How&#32;much&#32;memory&#32;is&#32;used&#32;for&#32;selectors?</emphasis>
08758 &#32;&#32;createCXTUResourceUsageEntry(
08759 &#32;&#32;&#32;&#32;&#32;&#32;*entries,&#32;CXTUResourceUsage_Selectors,
08760 &#32;&#32;&#32;&#32;&#32;&#32;(<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>)astContext.Selectors.getTotalMemory());
08761 
08762 &#32;&#32;<emphasis role="comment">//&#32;How&#32;much&#32;memory&#32;is&#32;used&#32;by&#32;ASTContext&apos;s&#32;side&#32;tables?</emphasis>
08763 &#32;&#32;createCXTUResourceUsageEntry(
08764 &#32;&#32;&#32;&#32;&#32;&#32;*entries,&#32;CXTUResourceUsage_AST_SideTables,
08765 &#32;&#32;&#32;&#32;&#32;&#32;(<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>)astContext.getSideTableAllocatedMemory());
08766 
08767 &#32;&#32;<emphasis role="comment">//&#32;How&#32;much&#32;memory&#32;is&#32;used&#32;for&#32;caching&#32;global&#32;code&#32;completion&#32;results?</emphasis>
08768 &#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;completionBytes&#32;=&#32;0;
08769 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(GlobalCodeCompletionAllocator&#32;*completionAllocator&#32;=
08770 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;astUnit-&gt;getCachedCompletionAllocator().get())&#32;{
08771 &#32;&#32;&#32;&#32;completionBytes&#32;=&#32;completionAllocator-&gt;getTotalMemory();
08772 &#32;&#32;}
08773 &#32;&#32;createCXTUResourceUsageEntry(
08774 &#32;&#32;&#32;&#32;&#32;&#32;*entries,&#32;CXTUResourceUsage_GlobalCompletionResults,&#32;completionBytes);
08775 
08776 &#32;&#32;<emphasis role="comment">//&#32;How&#32;much&#32;memory&#32;is&#32;being&#32;used&#32;by&#32;SourceManager&apos;s&#32;content&#32;cache?</emphasis>
08777 &#32;&#32;createCXTUResourceUsageEntry(
08778 &#32;&#32;&#32;&#32;&#32;&#32;*entries,&#32;CXTUResourceUsage_SourceManagerContentCache,
08779 &#32;&#32;&#32;&#32;&#32;&#32;(<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>)astContext.getSourceManager().getContentCacheSize());
08780 
08781 &#32;&#32;<emphasis role="comment">//&#32;How&#32;much&#32;memory&#32;is&#32;being&#32;used&#32;by&#32;the&#32;MemoryBuffer&apos;s&#32;in&#32;SourceManager?</emphasis>
08782 &#32;&#32;<emphasis role="keyword">const</emphasis>&#32;SourceManager::MemoryBufferSizes&#32;&amp;srcBufs&#32;=
08783 &#32;&#32;&#32;&#32;&#32;&#32;astUnit-&gt;getSourceManager().getMemoryBufferSizes();
08784 
08785 &#32;&#32;createCXTUResourceUsageEntry(*entries,
08786 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;CXTUResourceUsage_SourceManager_Membuffer_Malloc,
08787 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>)srcBufs.malloc_bytes);
08788 &#32;&#32;createCXTUResourceUsageEntry(*entries,
08789 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;CXTUResourceUsage_SourceManager_Membuffer_MMap,
08790 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>)srcBufs.mmap_bytes);
08791 &#32;&#32;createCXTUResourceUsageEntry(
08792 &#32;&#32;&#32;&#32;&#32;&#32;*entries,&#32;CXTUResourceUsage_SourceManager_DataStructures,
08793 &#32;&#32;&#32;&#32;&#32;&#32;(<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>)astContext.getSourceManager().getDataStructureSizes());
08794 
08795 &#32;&#32;<emphasis role="comment">//&#32;How&#32;much&#32;memory&#32;is&#32;being&#32;used&#32;by&#32;the&#32;ExternalASTSource?</emphasis>
08796 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(ExternalASTSource&#32;*esrc&#32;=&#32;astContext.getExternalSource())&#32;{
08797 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;ExternalASTSource::MemoryBufferSizes&#32;&amp;sizes&#32;=
08798 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;esrc-&gt;getMemoryBufferSizes();
08799 
08800 &#32;&#32;&#32;&#32;createCXTUResourceUsageEntry(
08801 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*entries,&#32;CXTUResourceUsage_ExternalASTSource_Membuffer_Malloc,
08802 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>)sizes.malloc_bytes);
08803 &#32;&#32;&#32;&#32;createCXTUResourceUsageEntry(
08804 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*entries,&#32;CXTUResourceUsage_ExternalASTSource_Membuffer_MMap,
08805 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>)sizes.mmap_bytes);
08806 &#32;&#32;}
08807 
08808 &#32;&#32;<emphasis role="comment">//&#32;How&#32;much&#32;memory&#32;is&#32;being&#32;used&#32;by&#32;the&#32;Preprocessor?</emphasis>
08809 &#32;&#32;Preprocessor&#32;&amp;pp&#32;=&#32;astUnit-&gt;getPreprocessor();
08810 &#32;&#32;createCXTUResourceUsageEntry(*entries,&#32;CXTUResourceUsage_Preprocessor,
08811 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;pp.getTotalMemory());
08812 
08813 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(PreprocessingRecord&#32;*pRec&#32;=&#32;pp.getPreprocessingRecord())&#32;{
08814 &#32;&#32;&#32;&#32;createCXTUResourceUsageEntry(*entries,
08815 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;CXTUResourceUsage_PreprocessingRecord,
08816 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;pRec-&gt;getTotalMemory());
08817 &#32;&#32;}
08818 
08819 &#32;&#32;createCXTUResourceUsageEntry(*entries,
08820 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;CXTUResourceUsage_Preprocessor_HeaderSearch,
08821 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;pp.getHeaderSearchInfo().getTotalMemory());
08822 
08823 &#32;&#32;CXTUResourceUsage&#32;usage&#32;=&#32;{(<emphasis role="keywordtype">void</emphasis>&#32;*)entries.get(),&#32;(unsigned)entries-&gt;size(),
08824 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;!entries-&gt;empty()&#32;?&#32;&amp;(*entries)[0]&#32;:&#32;<emphasis role="keyword">nullptr</emphasis>};
08825 &#32;&#32;(void)entries.release();
08826 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;usage;
08827 }
08828 
<anchor xml:id="__c_index_8cpp_source_1l08829"/><link linkend="__c_index_8cpp_1a3e9a2455e3253920304adc26c1084a6f">08829</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="__c_index_8cpp_1a3e9a2455e3253920304adc26c1084a6f">clang_disposeCXTUResourceUsage</link>(CXTUResourceUsage&#32;usage)&#32;{
08830 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(usage.data)
08831 &#32;&#32;&#32;&#32;<emphasis role="keyword">delete</emphasis>&#32;(<link linkend="__c_index_8cpp_1a8c5eea8e1522f74827362d4be37f75c8">MemUsageEntries</link>&#32;*)usage.data;
08832 }
08833 
<anchor xml:id="__c_index_8cpp_source_1l08834"/><link linkend="__c_index_8cpp_1add341497e44da969ce07c7fbc174d38a">08834</link> CXSourceRangeList&#32;*<link linkend="__c_index_8cpp_1add341497e44da969ce07c7fbc174d38a">clang_getSkippedRanges</link>(CXTranslationUnit&#32;TU,&#32;CXFile&#32;file)&#32;{
08835 &#32;&#32;CXSourceRangeList&#32;*skipped&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;CXSourceRangeList;
08836 &#32;&#32;skipped-&gt;count&#32;=&#32;0;
08837 &#32;&#32;skipped-&gt;ranges&#32;=&#32;<emphasis role="keyword">nullptr</emphasis>;
08838 
08839 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(isNotUsableTU(TU))&#32;{
08840 &#32;&#32;&#32;&#32;<link linkend="__c_x_translation_unit_8h_1a4ec17e6e03ea0baf73e27802eae36106">LOG_BAD_TU</link>(TU);
08841 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;skipped;
08842 &#32;&#32;}
08843 
08844 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!file)
08845 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;skipped;
08846 
08847 &#32;&#32;ASTUnit&#32;*astUnit&#32;=&#32;cxtu::getASTUnit(TU);
08848 &#32;&#32;PreprocessingRecord&#32;*ppRec&#32;=
08849 &#32;&#32;&#32;&#32;&#32;&#32;astUnit-&gt;getPreprocessor().getPreprocessingRecord();
08850 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!ppRec)
08851 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;skipped;
08852 
08853 &#32;&#32;ASTContext&#32;&amp;Ctx&#32;=&#32;astUnit-&gt;getASTContext();
08854 &#32;&#32;SourceManager&#32;&amp;sm&#32;=&#32;Ctx.getSourceManager();
08855 &#32;&#32;FileEntry&#32;*fileEntry&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis>FileEntry&#32;*<emphasis role="keyword">&gt;</emphasis>(file);
08856 &#32;&#32;FileID&#32;wantedFileID&#32;=&#32;sm.translateFile(fileEntry);
08857 &#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;isMainFile&#32;=&#32;wantedFileID&#32;==&#32;sm.getMainFileID();
08858 
08859 &#32;&#32;<emphasis role="keyword">const</emphasis>&#32;std::vector&lt;SourceRange&gt;&#32;&amp;SkippedRanges&#32;=&#32;ppRec-&gt;getSkippedRanges();
08860 &#32;&#32;std::vector&lt;SourceRange&gt;&#32;wantedRanges;
08861 &#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(std::vector&lt;SourceRange&gt;::const_iterator&#32;i&#32;=&#32;SkippedRanges.begin(),
08862 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ei&#32;=&#32;SkippedRanges.end();
08863 &#32;&#32;&#32;&#32;&#32;&#32;&#32;i&#32;!=&#32;ei;&#32;++i)&#32;{
08864 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(sm.getFileID(i-&gt;getBegin())&#32;==&#32;wantedFileID&#32;||
08865 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sm.getFileID(i-&gt;getEnd())&#32;==&#32;wantedFileID)
08866 &#32;&#32;&#32;&#32;&#32;&#32;wantedRanges.push_back(*i);
08867 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(isMainFile&#32;&amp;&amp;&#32;(astUnit-&gt;isInPreambleFileID(i-&gt;getBegin())&#32;||
08868 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;astUnit-&gt;isInPreambleFileID(i-&gt;getEnd())))
08869 &#32;&#32;&#32;&#32;&#32;&#32;wantedRanges.push_back(*i);
08870 &#32;&#32;}
08871 
08872 &#32;&#32;skipped-&gt;count&#32;=&#32;wantedRanges.size();
08873 &#32;&#32;skipped-&gt;ranges&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;CXSourceRange[skipped-&gt;count];
08874 &#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">unsigned</emphasis>&#32;i&#32;=&#32;0,&#32;ei&#32;=&#32;skipped-&gt;count;&#32;i&#32;!=&#32;ei;&#32;++i)
08875 &#32;&#32;&#32;&#32;skipped-&gt;ranges[i]&#32;=&#32;<link linkend="_namespaceclang_1_1cxloc_1a39d02b462b1f3233518f01951d83d035">cxloc::translateSourceRange</link>(Ctx,&#32;wantedRanges[i]);
08876 
08877 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;skipped;
08878 }
08879 
<anchor xml:id="__c_index_8cpp_source_1l08880"/><link linkend="__c_index_8cpp_1ab2c3529ea58276de8d365ba53873834f">08880</link> CXSourceRangeList&#32;*<link linkend="__c_index_8cpp_1ab2c3529ea58276de8d365ba53873834f">clang_getAllSkippedRanges</link>(CXTranslationUnit&#32;TU)&#32;{
08881 &#32;&#32;CXSourceRangeList&#32;*skipped&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;CXSourceRangeList;
08882 &#32;&#32;skipped-&gt;count&#32;=&#32;0;
08883 &#32;&#32;skipped-&gt;ranges&#32;=&#32;<emphasis role="keyword">nullptr</emphasis>;
08884 
08885 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(isNotUsableTU(TU))&#32;{
08886 &#32;&#32;&#32;&#32;<link linkend="__c_x_translation_unit_8h_1a4ec17e6e03ea0baf73e27802eae36106">LOG_BAD_TU</link>(TU);
08887 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;skipped;
08888 &#32;&#32;}
08889 
08890 &#32;&#32;ASTUnit&#32;*astUnit&#32;=&#32;cxtu::getASTUnit(TU);
08891 &#32;&#32;PreprocessingRecord&#32;*ppRec&#32;=
08892 &#32;&#32;&#32;&#32;&#32;&#32;astUnit-&gt;getPreprocessor().getPreprocessingRecord();
08893 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!ppRec)
08894 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;skipped;
08895 
08896 &#32;&#32;ASTContext&#32;&amp;Ctx&#32;=&#32;astUnit-&gt;getASTContext();
08897 
08898 &#32;&#32;<emphasis role="keyword">const</emphasis>&#32;std::vector&lt;SourceRange&gt;&#32;&amp;SkippedRanges&#32;=&#32;ppRec-&gt;getSkippedRanges();
08899 
08900 &#32;&#32;skipped-&gt;count&#32;=&#32;SkippedRanges.size();
08901 &#32;&#32;skipped-&gt;ranges&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;CXSourceRange[skipped-&gt;count];
08902 &#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">unsigned</emphasis>&#32;i&#32;=&#32;0,&#32;ei&#32;=&#32;skipped-&gt;count;&#32;i&#32;!=&#32;ei;&#32;++i)
08903 &#32;&#32;&#32;&#32;skipped-&gt;ranges[i]&#32;=&#32;<link linkend="_namespaceclang_1_1cxloc_1a39d02b462b1f3233518f01951d83d035">cxloc::translateSourceRange</link>(Ctx,&#32;SkippedRanges[i]);
08904 
08905 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;skipped;
08906 }
08907 
<anchor xml:id="__c_index_8cpp_source_1l08908"/><link linkend="__c_index_8cpp_1acfc7c338d3c08e516bf0773f4fa1180e">08908</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="__c_index_8cpp_1acfc7c338d3c08e516bf0773f4fa1180e">clang_disposeSourceRangeList</link>(CXSourceRangeList&#32;*ranges)&#32;{
08909 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(ranges)&#32;{
08910 &#32;&#32;&#32;&#32;<emphasis role="keyword">delete</emphasis>[]&#32;ranges-&gt;ranges;
08911 &#32;&#32;&#32;&#32;<emphasis role="keyword">delete</emphasis>&#32;ranges;
08912 &#32;&#32;}
08913 }
08914 
<anchor xml:id="__c_index_8cpp_source_1l08915"/><link linkend="_namespaceclang_1aa969857ada50e5f302f7127c78a63018">08915</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_namespaceclang_1aa969857ada50e5f302f7127c78a63018">clang::PrintLibclangResourceUsage</link>(CXTranslationUnit&#32;TU)&#32;{
08916 &#32;&#32;CXTUResourceUsage&#32;Usage&#32;=&#32;<link linkend="__c_index_8cpp_1a72299455a328faf612d238bf6aee6eb6">clang_getCXTUResourceUsage</link>(TU);
08917 &#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">unsigned</emphasis>&#32;I&#32;=&#32;0;&#32;I&#32;!=&#32;Usage.numEntries;&#32;++I)
08918 &#32;&#32;&#32;&#32;fprintf(stderr,&#32;<emphasis role="stringliteral">&quot;&#32;&#32;%s:&#32;%lu\n&quot;</emphasis>,
08919 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__c_index_8cpp_1aeba9f6263fe5dbde18abb55b2f321a34">clang_getTUResourceUsageName</link>(Usage.entries[I].kind),
08920 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Usage.entries[I].amount);
08921 
08922 &#32;&#32;<link linkend="__c_index_8cpp_1a3e9a2455e3253920304adc26c1084a6f">clang_disposeCXTUResourceUsage</link>(Usage);
08923 }
08924 
<anchor xml:id="__c_index_8cpp_source_1l08925"/><link linkend="__c_index_8cpp_1a325cc28e1127a386f3941a8282754977">08925</link> CXCursor&#32;<link linkend="__c_index_8cpp_1a325cc28e1127a386f3941a8282754977">clang_Cursor_getVarDeclInitializer</link>(CXCursor&#32;cursor)&#32;{
08926 &#32;&#32;<emphasis role="keyword">const</emphasis>&#32;Decl&#32;*<emphasis role="keyword">const</emphasis>&#32;D&#32;=&#32;<link linkend="_namespaceclang_1_1cxcursor_1a1f702246831c96afd990e457613dc642">getCursorDecl</link>(cursor);
08927 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!D)
08928 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__c_index_8cpp_1aa22233466eaf91f6f3cf6b84255c3b68">clang_getNullCursor</link>();
08929 &#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;*<emphasis role="keyword">const</emphasis>&#32;VD&#32;=&#32;dyn_cast&lt;VarDecl&gt;(D);
08930 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!VD)
08931 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__c_index_8cpp_1aa22233466eaf91f6f3cf6b84255c3b68">clang_getNullCursor</link>();
08932 &#32;&#32;<emphasis role="keyword">const</emphasis>&#32;Expr&#32;*<emphasis role="keyword">const</emphasis>&#32;Init&#32;=&#32;VD-&gt;getInit();
08933 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!Init)
08934 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__c_index_8cpp_1aa22233466eaf91f6f3cf6b84255c3b68">clang_getNullCursor</link>();
08935 
08936 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxcursor_1ab61ec2059175833672e8e78a376bb218">cxcursor::MakeCXCursor</link>(Init,&#32;VD,&#32;<link linkend="_namespaceclang_1_1cxcursor_1a23a495df22339e8289ae6d2421f493b6">cxcursor::getCursorTU</link>(cursor));
08937 }
08938 
<anchor xml:id="__c_index_8cpp_source_1l08939"/><link linkend="__c_index_8cpp_1ac99cd0fd7774986dfd8b58d0317da4d9">08939</link> <emphasis role="keywordtype">int</emphasis>&#32;<link linkend="__c_index_8cpp_1ac99cd0fd7774986dfd8b58d0317da4d9">clang_Cursor_hasVarDeclGlobalStorage</link>(CXCursor&#32;cursor)&#32;{
08940 &#32;&#32;<emphasis role="keyword">const</emphasis>&#32;Decl&#32;*<emphasis role="keyword">const</emphasis>&#32;D&#32;=&#32;<link linkend="_namespaceclang_1_1cxcursor_1a1f702246831c96afd990e457613dc642">getCursorDecl</link>(cursor);
08941 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!D)
08942 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;-1;
08943 &#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;*<emphasis role="keyword">const</emphasis>&#32;VD&#32;=&#32;dyn_cast&lt;VarDecl&gt;(D);
08944 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!VD)
08945 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;-1;
08946 
08947 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;VD-&gt;hasGlobalStorage();
08948 }
08949 
<anchor xml:id="__c_index_8cpp_source_1l08950"/><link linkend="__c_index_8cpp_1a2ad86229a550aad3311b1b1aa98d03bb">08950</link> <emphasis role="keywordtype">int</emphasis>&#32;<link linkend="__c_index_8cpp_1a2ad86229a550aad3311b1b1aa98d03bb">clang_Cursor_hasVarDeclExternalStorage</link>(CXCursor&#32;cursor)&#32;{
08951 &#32;&#32;<emphasis role="keyword">const</emphasis>&#32;Decl&#32;*<emphasis role="keyword">const</emphasis>&#32;D&#32;=&#32;<link linkend="_namespaceclang_1_1cxcursor_1a1f702246831c96afd990e457613dc642">getCursorDecl</link>(cursor);
08952 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!D)
08953 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;-1;
08954 &#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;*<emphasis role="keyword">const</emphasis>&#32;VD&#32;=&#32;dyn_cast&lt;VarDecl&gt;(D);
08955 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!VD)
08956 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;-1;
08957 
08958 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;VD-&gt;hasExternalStorage();
08959 }
08960 
08961 <emphasis role="comment">//===----------------------------------------------------------------------===//</emphasis>
08962 <emphasis role="comment">//&#32;Misc.&#32;utility&#32;functions.</emphasis>
08963 <emphasis role="comment">//===----------------------------------------------------------------------===//</emphasis>
08964 
08966 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;SafetyStackThreadSize&#32;=&#32;DesiredStackSize;
08967 
08968 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespaceclang">clang</link>&#32;{
08969 
<anchor xml:id="__c_index_8cpp_source_1l08970"/><link linkend="_namespaceclang_1af866b018fe401ae941a367429bdd4c9a">08970</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_namespaceclang_1af866b018fe401ae941a367429bdd4c9a">RunSafely</link>(llvm::CrashRecoveryContext&#32;&amp;CRC,&#32;llvm::function_ref&lt;<emphasis role="keywordtype">void</emphasis>()&gt;&#32;Fn,
08971 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;Size)&#32;{
08972 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!Size)
08973 &#32;&#32;&#32;&#32;Size&#32;=&#32;<link linkend="_namespaceclang_1a784fd2a03784a2dbb08d1841240adb88">GetSafetyThreadStackSize</link>();
08974 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(Size&#32;&amp;&amp;&#32;!getenv(<emphasis role="stringliteral">&quot;LIBCLANG_NOTHREADS&quot;</emphasis>))
08975 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;CRC.RunSafelyOnThread(Fn,&#32;Size);
08976 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;CRC.RunSafely(Fn);
08977 }
08978 
<anchor xml:id="__c_index_8cpp_source_1l08979"/><link linkend="_namespaceclang_1a784fd2a03784a2dbb08d1841240adb88">08979</link> <emphasis role="keywordtype">unsigned</emphasis>&#32;<link linkend="_namespaceclang_1a784fd2a03784a2dbb08d1841240adb88">GetSafetyThreadStackSize</link>()&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;SafetyStackThreadSize;&#32;}
08980 
<anchor xml:id="__c_index_8cpp_source_1l08981"/><link linkend="_namespaceclang_1a074a6c2b8523d8b50f446a28e8e0f5c4">08981</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_namespaceclang_1a074a6c2b8523d8b50f446a28e8e0f5c4">SetSafetyThreadStackSize</link>(<emphasis role="keywordtype">unsigned</emphasis>&#32;Value)&#32;{&#32;SafetyStackThreadSize&#32;=&#32;Value;&#32;}
08982 
08983 }&#32;<emphasis role="comment">//&#32;namespace&#32;clang</emphasis>
08984 
<anchor xml:id="__c_index_8cpp_source_1l08985"/><link linkend="_namespaceclang_1ab1c32e4de49bdf7a50374807a6d2701c">08985</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_namespaceclang_1ab1c32e4de49bdf7a50374807a6d2701c">clang::setThreadBackgroundPriority</link>()&#32;{
08986 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(getenv(<emphasis role="stringliteral">&quot;LIBCLANG_BGPRIO_DISABLE&quot;</emphasis>))
08987 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
08988 
08989 <emphasis role="preprocessor">#if&#32;LLVM_ENABLE_THREADS</emphasis>
08990 &#32;&#32;llvm::set_thread_priority(llvm::ThreadPriority::Background);
08991 <emphasis role="preprocessor">#endif</emphasis>
08992 }
08993 
<anchor xml:id="__c_index_8cpp_source_1l08994"/><link linkend="_namespaceclang_1_1cxindex_1a134d158252a9bfcc3db346dd2e65f09f">08994</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_namespaceclang_1_1cxindex_1a134d158252a9bfcc3db346dd2e65f09f">cxindex::printDiagsToStderr</link>(ASTUnit&#32;*Unit)&#32;{
08995 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!Unit)
08996 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
08997 
08998 &#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(ASTUnit::stored_diag_iterator&#32;D&#32;=&#32;Unit-&gt;stored_diag_begin(),
08999 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;DEnd&#32;=&#32;Unit-&gt;stored_diag_end();
09000 &#32;&#32;&#32;&#32;&#32;&#32;&#32;D&#32;!=&#32;DEnd;&#32;++D)&#32;{
09001 &#32;&#32;&#32;&#32;<link linkend="_structclang_1_1_c_x_stored_diagnostic">CXStoredDiagnostic</link>&#32;Diag(*D,&#32;Unit-&gt;getLangOpts());
09002 &#32;&#32;&#32;&#32;CXString&#32;Msg&#32;=
09003 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__c_index_diagnostic_8cpp_1a3ed169ee4a472764c11724cc7768e6eb">clang_formatDiagnostic</link>(&amp;Diag,&#32;<link linkend="__c_index_diagnostic_8cpp_1a1db1e7c1136fd6d171f47d0b7d4f8bd9">clang_defaultDiagnosticDisplayOptions</link>());
09004 &#32;&#32;&#32;&#32;fprintf(stderr,&#32;<emphasis role="stringliteral">&quot;%s\n&quot;</emphasis>,&#32;<link linkend="__c_x_string_8cpp_1acd478c1b1785e17c0fe377bd70a2195f">clang_getCString</link>(Msg));
09005 &#32;&#32;&#32;&#32;<link linkend="__c_x_string_8cpp_1a46c85f1255580ed186aa6f7380a06883">clang_disposeString</link>(Msg);
09006 &#32;&#32;}
09007 <emphasis role="preprocessor">#ifdef&#32;_WIN32</emphasis>
09008 &#32;&#32;<emphasis role="comment">//&#32;On&#32;Windows,&#32;force&#32;a&#32;flush,&#32;since&#32;there&#32;may&#32;be&#32;multiple&#32;copies&#32;of</emphasis>
09009 &#32;&#32;<emphasis role="comment">//&#32;stderr&#32;and&#32;stdout&#32;in&#32;the&#32;file&#32;system,&#32;all&#32;with&#32;different&#32;buffers</emphasis>
09010 &#32;&#32;<emphasis role="comment">//&#32;but&#32;writing&#32;to&#32;the&#32;same&#32;device.</emphasis>
09011 &#32;&#32;fflush(stderr);
09012 <emphasis role="preprocessor">#endif</emphasis>
09013 }
09014 
<anchor xml:id="__c_index_8cpp_source_1l09015"/><link linkend="_namespaceclang_1_1cxindex_1af7ce142e794a78913423f48c9d01c78d">09015</link> MacroInfo&#32;*<link linkend="_namespaceclang_1_1cxindex_1af7ce142e794a78913423f48c9d01c78d">cxindex::getMacroInfo</link>(<emphasis role="keyword">const</emphasis>&#32;IdentifierInfo&#32;&amp;II,
09016 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;SourceLocation&#32;MacroDefLoc,
09017 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;CXTranslationUnit&#32;TU)&#32;{
09018 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(MacroDefLoc.isInvalid()&#32;||&#32;!TU)
09019 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">nullptr</emphasis>;
09020 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!II.hadMacroDefinition())
09021 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">nullptr</emphasis>;
09022 
09023 &#32;&#32;ASTUnit&#32;*Unit&#32;=&#32;cxtu::getASTUnit(TU);
09024 &#32;&#32;Preprocessor&#32;&amp;PP&#32;=&#32;Unit-&gt;getPreprocessor();
09025 &#32;&#32;MacroDirective&#32;*MD&#32;=&#32;PP.getLocalMacroDirectiveHistory(&amp;II);
09026 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(MD)&#32;{
09027 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(MacroDirective::DefInfo&#32;Def&#32;=&#32;MD-&gt;getDefinition();&#32;Def;
09028 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Def&#32;=&#32;Def.getPreviousDefinition())&#32;{
09029 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(MacroDefLoc&#32;==&#32;Def.getMacroInfo()-&gt;getDefinitionLoc())
09030 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;Def.getMacroInfo();
09031 &#32;&#32;&#32;&#32;}
09032 &#32;&#32;}
09033 
09034 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">nullptr</emphasis>;
09035 }
09036 
<anchor xml:id="__c_index_8cpp_source_1l09037"/><link linkend="_namespaceclang_1_1cxindex_1a9af76d8fd72b3732e87a672007c73bcd">09037</link> <emphasis role="keyword">const</emphasis>&#32;MacroInfo&#32;*<link linkend="_namespaceclang_1_1cxindex_1af7ce142e794a78913423f48c9d01c78d">cxindex::getMacroInfo</link>(<emphasis role="keyword">const</emphasis>&#32;MacroDefinitionRecord&#32;*MacroDef,
09038 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;CXTranslationUnit&#32;TU)&#32;{
09039 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!MacroDef&#32;||&#32;!TU)
09040 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">nullptr</emphasis>;
09041 &#32;&#32;<emphasis role="keyword">const</emphasis>&#32;IdentifierInfo&#32;*II&#32;=&#32;MacroDef-&gt;getName();
09042 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!II)
09043 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">nullptr</emphasis>;
09044 
09045 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxindex_1af7ce142e794a78913423f48c9d01c78d">getMacroInfo</link>(*II,&#32;MacroDef-&gt;getLocation(),&#32;TU);
09046 }
09047 
09048 MacroDefinitionRecord&#32;*
<anchor xml:id="__c_index_8cpp_source_1l09049"/><link linkend="_namespaceclang_1_1cxindex_1afbdf83287fd5c579f0118d85ba76bb26">09049</link> <link linkend="_namespaceclang_1_1cxindex_1ac81be1c63a9bbf2e05be99daa2b11750">cxindex::checkForMacroInMacroDefinition</link>(<emphasis role="keyword">const</emphasis>&#32;MacroInfo&#32;*MI,&#32;<emphasis role="keyword">const</emphasis>&#32;Token&#32;&amp;Tok,
09050 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;CXTranslationUnit&#32;TU)&#32;{
09051 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!MI&#32;||&#32;!TU)
09052 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">nullptr</emphasis>;
09053 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(Tok.isNot(tok::raw_identifier))
09054 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">nullptr</emphasis>;
09055 
09056 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(MI-&gt;getNumTokens()&#32;==&#32;0)
09057 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">nullptr</emphasis>;
09058 &#32;&#32;SourceRange&#32;DefRange(MI-&gt;getReplacementToken(0).getLocation(),
09059 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;MI-&gt;getDefinitionEndLoc());
09060 &#32;&#32;ASTUnit&#32;*Unit&#32;=&#32;cxtu::getASTUnit(TU);
09061 
09062 &#32;&#32;<emphasis role="comment">//&#32;Check&#32;that&#32;the&#32;token&#32;is&#32;inside&#32;the&#32;definition&#32;and&#32;not&#32;its&#32;argument&#32;list.</emphasis>
09063 &#32;&#32;SourceManager&#32;&amp;SM&#32;=&#32;Unit-&gt;getSourceManager();
09064 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(SM.isBeforeInTranslationUnit(Tok.getLocation(),&#32;DefRange.getBegin()))
09065 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">nullptr</emphasis>;
09066 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(SM.isBeforeInTranslationUnit(DefRange.getEnd(),&#32;Tok.getLocation()))
09067 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">nullptr</emphasis>;
09068 
09069 &#32;&#32;Preprocessor&#32;&amp;PP&#32;=&#32;Unit-&gt;getPreprocessor();
09070 &#32;&#32;PreprocessingRecord&#32;*PPRec&#32;=&#32;PP.getPreprocessingRecord();
09071 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!PPRec)
09072 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">nullptr</emphasis>;
09073 
09074 &#32;&#32;IdentifierInfo&#32;&amp;II&#32;=&#32;PP.getIdentifierTable().get(Tok.getRawIdentifier());
09075 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!II.hadMacroDefinition())
09076 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">nullptr</emphasis>;
09077 
09078 &#32;&#32;<emphasis role="comment">//&#32;Check&#32;that&#32;the&#32;identifier&#32;is&#32;not&#32;one&#32;of&#32;the&#32;macro&#32;arguments.</emphasis>
09079 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(std::find(MI-&gt;param_begin(),&#32;MI-&gt;param_end(),&#32;&amp;II)&#32;!=&#32;MI-&gt;param_end())
09080 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">nullptr</emphasis>;
09081 
09082 &#32;&#32;MacroDirective&#32;*InnerMD&#32;=&#32;PP.getLocalMacroDirectiveHistory(&amp;II);
09083 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!InnerMD)
09084 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">nullptr</emphasis>;
09085 
09086 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;PPRec-&gt;findMacroDefinition(InnerMD-&gt;getMacroInfo());
09087 }
09088 
09089 MacroDefinitionRecord&#32;*
<anchor xml:id="__c_index_8cpp_source_1l09090"/><link linkend="_namespaceclang_1_1cxindex_1ac81be1c63a9bbf2e05be99daa2b11750">09090</link> <link linkend="_namespaceclang_1_1cxindex_1ac81be1c63a9bbf2e05be99daa2b11750">cxindex::checkForMacroInMacroDefinition</link>(<emphasis role="keyword">const</emphasis>&#32;MacroInfo&#32;*MI,&#32;SourceLocation&#32;Loc,
09091 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;CXTranslationUnit&#32;TU)&#32;{
09092 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(Loc.isInvalid()&#32;||&#32;!MI&#32;||&#32;!TU)
09093 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">nullptr</emphasis>;
09094 
09095 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(MI-&gt;getNumTokens()&#32;==&#32;0)
09096 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">nullptr</emphasis>;
09097 &#32;&#32;ASTUnit&#32;*Unit&#32;=&#32;cxtu::getASTUnit(TU);
09098 &#32;&#32;Preprocessor&#32;&amp;PP&#32;=&#32;Unit-&gt;getPreprocessor();
09099 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!PP.getPreprocessingRecord())
09100 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">nullptr</emphasis>;
09101 &#32;&#32;Loc&#32;=&#32;Unit-&gt;getSourceManager().getSpellingLoc(Loc);
09102 &#32;&#32;Token&#32;Tok;
09103 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(PP.getRawToken(Loc,&#32;Tok))
09104 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">nullptr</emphasis>;
09105 
09106 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxindex_1ac81be1c63a9bbf2e05be99daa2b11750">checkForMacroInMacroDefinition</link>(MI,&#32;Tok,&#32;TU);
09107 }
09108 
<anchor xml:id="__c_index_8cpp_source_1l09109"/><link linkend="__c_index_8cpp_1a57a512b9b350427fc6910ca78759e76d">09109</link> CXString&#32;<link linkend="__c_index_8cpp_1a57a512b9b350427fc6910ca78759e76d">clang_getClangVersion</link>()&#32;{
09110 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1a19a4962be87f75a8c1fa5a0b75f76298">cxstring::createDup</link>(getClangFullVersion());
09111 }
09112 
<anchor xml:id="__c_index_8cpp_source_1l09113"/><link linkend="_classclang_1_1cxindex_1_1_logger_1a051287c9aa1d57fb4f8db77f51934cd8">09113</link> <link linkend="_classclang_1_1cxindex_1_1_logger">Logger</link>&#32;&amp;<link linkend="_classclang_1_1cxindex_1_1_logger_1a051287c9aa1d57fb4f8db77f51934cd8">cxindex::Logger::operator&lt;&lt;</link>(CXTranslationUnit&#32;TU)&#32;{
09114 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(TU)&#32;{
09115 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(ASTUnit&#32;*Unit&#32;=&#32;cxtu::getASTUnit(TU))&#32;{
09116 &#32;&#32;&#32;&#32;&#32;&#32;LogOS&#32;&lt;&lt;&#32;<emphasis role="charliteral">&apos;&lt;&apos;</emphasis>&#32;&lt;&lt;&#32;Unit-&gt;getMainFileName()&#32;&lt;&lt;&#32;<emphasis role="charliteral">&apos;&gt;&apos;</emphasis>;
09117 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(Unit-&gt;isMainFileAST())
09118 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;LogOS&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;(&quot;</emphasis>&#32;&lt;&lt;&#32;Unit-&gt;getASTFileName()&#32;&lt;&lt;&#32;<emphasis role="charliteral">&apos;)&apos;</emphasis>;
09119 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
09120 &#32;&#32;&#32;&#32;}
09121 &#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
09122 &#32;&#32;&#32;&#32;LogOS&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&lt;NULL&#32;TU&gt;&quot;</emphasis>;
09123 &#32;&#32;}
09124 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
09125 }
09126 
<anchor xml:id="__c_index_8cpp_source_1l09127"/><link linkend="_classclang_1_1cxindex_1_1_logger_1a6b478a60bef57d44b756191aeed76977">09127</link> <link linkend="_classclang_1_1cxindex_1_1_logger">Logger</link>&#32;&amp;<link linkend="_classclang_1_1cxindex_1_1_logger_1a051287c9aa1d57fb4f8db77f51934cd8">cxindex::Logger::operator&lt;&lt;</link>(<emphasis role="keyword">const</emphasis>&#32;FileEntry&#32;*FE)&#32;{
09128 &#32;&#32;*<emphasis role="keyword">this</emphasis>&#32;&lt;&lt;&#32;FE-&gt;getName();
09129 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
09130 }
09131 
<anchor xml:id="__c_index_8cpp_source_1l09132"/><link linkend="_classclang_1_1cxindex_1_1_logger_1aa009cca679e69886e67d4f273a3b2040">09132</link> <link linkend="_classclang_1_1cxindex_1_1_logger">Logger</link>&#32;&amp;<link linkend="_classclang_1_1cxindex_1_1_logger_1a051287c9aa1d57fb4f8db77f51934cd8">cxindex::Logger::operator&lt;&lt;</link>(CXCursor&#32;cursor)&#32;{
09133 &#32;&#32;CXString&#32;cursorName&#32;=&#32;<link linkend="__c_index_8cpp_1adacc338d2829e50ff0395a8384d507b3">clang_getCursorDisplayName</link>(cursor);
09134 &#32;&#32;*<emphasis role="keyword">this</emphasis>&#32;&lt;&lt;&#32;cursorName&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;@&quot;</emphasis>&#32;&lt;&lt;&#32;<link linkend="__c_index_8cpp_1a98001a3f8eb3a76d9c12821c45ef3708">clang_getCursorLocation</link>(cursor);
09135 &#32;&#32;<link linkend="__c_x_string_8cpp_1a46c85f1255580ed186aa6f7380a06883">clang_disposeString</link>(cursorName);
09136 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
09137 }
09138 
<anchor xml:id="__c_index_8cpp_source_1l09139"/><link linkend="_classclang_1_1cxindex_1_1_logger_1a73a78023cdddd5fba6304a7503721c05">09139</link> <link linkend="_classclang_1_1cxindex_1_1_logger">Logger</link>&#32;&amp;<link linkend="_classclang_1_1cxindex_1_1_logger_1a051287c9aa1d57fb4f8db77f51934cd8">cxindex::Logger::operator&lt;&lt;</link>(CXSourceLocation&#32;Loc)&#32;{
09140 &#32;&#32;CXFile&#32;File;
09141 &#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;Line,&#32;Column;
09142 &#32;&#32;<link linkend="__c_x_source_location_8cpp_1a35b4c0e781e65d746666e3d263b000e8">clang_getFileLocation</link>(Loc,&#32;&amp;File,&#32;&amp;Line,&#32;&amp;Column,&#32;<emphasis role="keyword">nullptr</emphasis>);
09143 &#32;&#32;CXString&#32;FileName&#32;=&#32;<link linkend="__c_index_8cpp_1a263c34f5782353186990b2c990d648fc">clang_getFileName</link>(File);
09144 &#32;&#32;*<emphasis role="keyword">this</emphasis>&#32;&lt;&lt;&#32;llvm::format(<emphasis role="stringliteral">&quot;(%s:%d:%d)&quot;</emphasis>,&#32;<link linkend="__c_x_string_8cpp_1acd478c1b1785e17c0fe377bd70a2195f">clang_getCString</link>(FileName),&#32;Line,&#32;Column);
09145 &#32;&#32;<link linkend="__c_x_string_8cpp_1a46c85f1255580ed186aa6f7380a06883">clang_disposeString</link>(FileName);
09146 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
09147 }
09148 
<anchor xml:id="__c_index_8cpp_source_1l09149"/><link linkend="_classclang_1_1cxindex_1_1_logger_1aee27c999d935aa98123a7d84d9ba00f5">09149</link> <link linkend="_classclang_1_1cxindex_1_1_logger">Logger</link>&#32;&amp;<link linkend="_classclang_1_1cxindex_1_1_logger_1a051287c9aa1d57fb4f8db77f51934cd8">cxindex::Logger::operator&lt;&lt;</link>(CXSourceRange&#32;range)&#32;{
09150 &#32;&#32;CXSourceLocation&#32;BLoc&#32;=&#32;<link linkend="__c_x_source_location_8cpp_1a14a10dd8d9a4069c4fc1a7be62f58874">clang_getRangeStart</link>(range);
09151 &#32;&#32;CXSourceLocation&#32;ELoc&#32;=&#32;<link linkend="__c_x_source_location_8cpp_1a146c4bda0251ee320dc6e4b1b3fbb919">clang_getRangeEnd</link>(range);
09152 
09153 &#32;&#32;CXFile&#32;BFile;
09154 &#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;BLine,&#32;BColumn;
09155 &#32;&#32;<link linkend="__c_x_source_location_8cpp_1a35b4c0e781e65d746666e3d263b000e8">clang_getFileLocation</link>(BLoc,&#32;&amp;BFile,&#32;&amp;BLine,&#32;&amp;BColumn,&#32;<emphasis role="keyword">nullptr</emphasis>);
09156 
09157 &#32;&#32;CXFile&#32;EFile;
09158 &#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;ELine,&#32;EColumn;
09159 &#32;&#32;<link linkend="__c_x_source_location_8cpp_1a35b4c0e781e65d746666e3d263b000e8">clang_getFileLocation</link>(ELoc,&#32;&amp;EFile,&#32;&amp;ELine,&#32;&amp;EColumn,&#32;<emphasis role="keyword">nullptr</emphasis>);
09160 
09161 &#32;&#32;CXString&#32;BFileName&#32;=&#32;<link linkend="__c_index_8cpp_1a263c34f5782353186990b2c990d648fc">clang_getFileName</link>(BFile);
09162 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(BFile&#32;==&#32;EFile)&#32;{
09163 &#32;&#32;&#32;&#32;*<emphasis role="keyword">this</emphasis>&#32;&lt;&lt;&#32;llvm::format(<emphasis role="stringliteral">&quot;[%s&#32;%d:%d-%d:%d]&quot;</emphasis>,&#32;<link linkend="__c_x_string_8cpp_1acd478c1b1785e17c0fe377bd70a2195f">clang_getCString</link>(BFileName),
09164 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;BLine,&#32;BColumn,&#32;ELine,&#32;EColumn);
09165 &#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
09166 &#32;&#32;&#32;&#32;CXString&#32;EFileName&#32;=&#32;<link linkend="__c_index_8cpp_1a263c34f5782353186990b2c990d648fc">clang_getFileName</link>(EFile);
09167 &#32;&#32;&#32;&#32;*<emphasis role="keyword">this</emphasis>&#32;&lt;&lt;&#32;llvm::format(<emphasis role="stringliteral">&quot;[%s:%d:%d&#32;-&#32;&quot;</emphasis>,&#32;<link linkend="__c_x_string_8cpp_1acd478c1b1785e17c0fe377bd70a2195f">clang_getCString</link>(BFileName),&#32;BLine,
09168 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;BColumn)
09169 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;llvm::format(<emphasis role="stringliteral">&quot;%s:%d:%d]&quot;</emphasis>,&#32;<link linkend="__c_x_string_8cpp_1acd478c1b1785e17c0fe377bd70a2195f">clang_getCString</link>(EFileName),&#32;ELine,
09170 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;EColumn);
09171 &#32;&#32;&#32;&#32;<link linkend="__c_x_string_8cpp_1a46c85f1255580ed186aa6f7380a06883">clang_disposeString</link>(EFileName);
09172 &#32;&#32;}
09173 &#32;&#32;<link linkend="__c_x_string_8cpp_1a46c85f1255580ed186aa6f7380a06883">clang_disposeString</link>(BFileName);
09174 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
09175 }
09176 
<anchor xml:id="__c_index_8cpp_source_1l09177"/><link linkend="_classclang_1_1cxindex_1_1_logger_1a72afd6570e5f5b75d3efbdf852c23c54">09177</link> <link linkend="_classclang_1_1cxindex_1_1_logger">Logger</link>&#32;&amp;<link linkend="_classclang_1_1cxindex_1_1_logger_1a051287c9aa1d57fb4f8db77f51934cd8">cxindex::Logger::operator&lt;&lt;</link>(CXString&#32;Str)&#32;{
09178 &#32;&#32;*<emphasis role="keyword">this</emphasis>&#32;&lt;&lt;&#32;<link linkend="__c_x_string_8cpp_1acd478c1b1785e17c0fe377bd70a2195f">clang_getCString</link>(Str);
09179 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
09180 }
09181 
<anchor xml:id="__c_index_8cpp_source_1l09182"/><link linkend="_classclang_1_1cxindex_1_1_logger_1ada43f7ac002c06ed910f6f130fa09e9a">09182</link> <link linkend="_classclang_1_1cxindex_1_1_logger">Logger</link>&#32;&amp;<link linkend="_classclang_1_1cxindex_1_1_logger_1a051287c9aa1d57fb4f8db77f51934cd8">cxindex::Logger::operator&lt;&lt;</link>(<emphasis role="keyword">const</emphasis>&#32;llvm::format_object_base&#32;&amp;Fmt)&#32;{
09183 &#32;&#32;LogOS&#32;&lt;&lt;&#32;Fmt;
09184 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
09185 }
09186 
09187 <emphasis role="keyword">static</emphasis>&#32;llvm::ManagedStatic&lt;std::mutex&gt;&#32;LoggingMutex;
09188 
<anchor xml:id="__c_index_8cpp_source_1l09189"/><link linkend="_classclang_1_1cxindex_1_1_logger_1a516d6c56208926869892fe963609188b">09189</link> <link linkend="_classclang_1_1cxindex_1_1_logger_1a516d6c56208926869892fe963609188b">cxindex::Logger::~Logger</link>()&#32;{
09190 &#32;&#32;std::lock_guard&lt;std::mutex&gt;&#32;L(*LoggingMutex);
09191 
09192 &#32;&#32;<emphasis role="keyword">static</emphasis>&#32;llvm::TimeRecord&#32;sBeginTR&#32;=&#32;llvm::TimeRecord::getCurrentTime();
09193 
09194 &#32;&#32;raw_ostream&#32;&amp;OS&#32;=&#32;llvm::errs();
09195 &#32;&#32;OS&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;[libclang:&quot;</emphasis>&#32;&lt;&lt;&#32;Name&#32;&lt;&lt;&#32;<emphasis role="charliteral">&apos;:&apos;</emphasis>;
09196 
09197 <emphasis role="preprocessor">#ifdef&#32;USE_DARWIN_THREADS</emphasis>
09198 &#32;&#32;<emphasis role="comment">//&#32;TODO:&#32;Portability.</emphasis>
09199 &#32;&#32;mach_port_t&#32;tid&#32;=&#32;pthread_mach_thread_np(pthread_self());
09200 &#32;&#32;OS&#32;&lt;&lt;&#32;tid&#32;&lt;&lt;&#32;<emphasis role="charliteral">&apos;:&apos;</emphasis>;
09201 <emphasis role="preprocessor">#endif</emphasis>
09202 
09203 &#32;&#32;llvm::TimeRecord&#32;TR&#32;=&#32;llvm::TimeRecord::getCurrentTime();
09204 &#32;&#32;OS&#32;&lt;&lt;&#32;llvm::format(<emphasis role="stringliteral">&quot;%7.4f]&#32;&quot;</emphasis>,&#32;TR.getWallTime()&#32;-&#32;sBeginTR.getWallTime());
09205 &#32;&#32;OS&#32;&lt;&lt;&#32;Msg&#32;&lt;&lt;&#32;<emphasis role="charliteral">&apos;\n&apos;</emphasis>;
09206 
09207 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(Trace)&#32;{
09208 &#32;&#32;&#32;&#32;llvm::sys::PrintStackTrace(OS);
09209 &#32;&#32;&#32;&#32;OS&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;--------------------------------------------------\n&quot;</emphasis>;
09210 &#32;&#32;}
09211 }
</programlisting></section>
