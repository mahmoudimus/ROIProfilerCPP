<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_classtests_1_1unit_1_1test__analyze_1_1_analyzer_test" xml:lang="en-US">
<title>tests.unit.test_analyze.AnalyzerTest Class Reference</title>
<indexterm><primary>tests.unit.test_analyze.AnalyzerTest</primary></indexterm>
<para>Inheritance diagram for tests.unit.test_analyze.AnalyzerTest:    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="classtests_1_1unit_1_1test__analyze_1_1_analyzer_test.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
<simplesect>
    <title>Public Member Functions    </title>
        <itemizedlist>
            <listitem><para>def <link linkend="_classtests_1_1unit_1_1test__analyze_1_1_analyzer_test_1a39ea692e660a457f87852335f8de39a4">test_nodebug_macros_appended</link> (self)</para>
</listitem>
            <listitem><para>def <link linkend="_classtests_1_1unit_1_1test__analyze_1_1_analyzer_test_1a7725584d7f64259ee00f483cbbef597e">test_set_language_fall_through</link> (self)</para>
</listitem>
            <listitem><para>def <link linkend="_classtests_1_1unit_1_1test__analyze_1_1_analyzer_test_1a1c70f6f9c5158de1a1f7b8ece3700475">test_set_language_stops_on_not_supported</link> (self)</para>
</listitem>
            <listitem><para>def <link linkend="_classtests_1_1unit_1_1test__analyze_1_1_analyzer_test_1ab3912adedab3915c1622f2ed47423288">test_set_language_sets_flags</link> (self)</para>
</listitem>
            <listitem><para>def <link linkend="_classtests_1_1unit_1_1test__analyze_1_1_analyzer_test_1a57cb7910c5ec91655188a3f5ee299154">test_set_language_from_filename</link> (self)</para>
</listitem>
            <listitem><para>def <link linkend="_classtests_1_1unit_1_1test__analyze_1_1_analyzer_test_1a2c40cb5cec85d0a5539ab6bdfd21f23b">test_arch_loop_sets_flags</link> (self)</para>
</listitem>
            <listitem><para>def <link linkend="_classtests_1_1unit_1_1test__analyze_1_1_analyzer_test_1adfbb1e158e254c33b8533f9bda90315d">test_arch_loop_stops_on_not_supported</link> (self)</para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Detailed Description</title>
<para>
Definition at line <link linkend="_test__analyze_8py_source_1l00235">235</link> of file <link linkend="_test__analyze_8py_source">test_analyze.py</link>.</para>
</section>
<section>
<title>Member Function Documentation</title>
<anchor xml:id="_classtests_1_1unit_1_1test__analyze_1_1_analyzer_test_1a2c40cb5cec85d0a5539ab6bdfd21f23b"/>    <section>
    <title>test_arch_loop_sets_flags()</title>
<indexterm><primary>test_arch_loop_sets_flags</primary><secondary>tests.unit.test_analyze.AnalyzerTest</secondary></indexterm>
<indexterm><primary>tests.unit.test_analyze.AnalyzerTest</primary><secondary>test_arch_loop_sets_flags</secondary></indexterm>
<para><computeroutput>def tests.unit.test_analyze.AnalyzerTest.test_arch_loop_sets_flags ( self)</computeroutput></para><para>
Definition at line <link linkend="_test__analyze_8py_source_1l00295">295</link> of file <link linkend="_test__analyze_8py_source">test_analyze.py</link>.</para>
<programlisting>00295 &#32;&#32;&#32;&#32;<emphasis role="keyword">def&#32;</emphasis>test_arch_loop_sets_flags(self):
00296 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">def&#32;</emphasis>flags(archs):
00297 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;spy&#32;=&#32;Spy()
00298 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;input&#32;=&#32;{<emphasis role="stringliteral">&apos;flags&apos;</emphasis>:&#32;[],&#32;<emphasis role="stringliteral">&apos;arch_list&apos;</emphasis>:&#32;archs}
00299 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sut.arch_check(input,&#32;spy.call)
00300 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;spy.arg[<emphasis role="stringliteral">&apos;flags&apos;</emphasis>]
00301 
00302 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;self.assertEqual([],&#32;flags([]))
00303 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;self.assertEqual([<emphasis role="stringliteral">&apos;-arch&apos;</emphasis>,&#32;<emphasis role="stringliteral">&apos;i386&apos;</emphasis>],&#32;flags([<emphasis role="stringliteral">&apos;i386&apos;</emphasis>]))
00304 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;self.assertEqual([<emphasis role="stringliteral">&apos;-arch&apos;</emphasis>,&#32;<emphasis role="stringliteral">&apos;i386&apos;</emphasis>],&#32;flags([<emphasis role="stringliteral">&apos;i386&apos;</emphasis>,&#32;<emphasis role="stringliteral">&apos;ppc&apos;</emphasis>]))
00305 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;self.assertEqual([<emphasis role="stringliteral">&apos;-arch&apos;</emphasis>,&#32;<emphasis role="stringliteral">&apos;sparc&apos;</emphasis>],&#32;flags([<emphasis role="stringliteral">&apos;i386&apos;</emphasis>,&#32;<emphasis role="stringliteral">&apos;sparc&apos;</emphasis>]))
00306 
</programlisting>    </section><anchor xml:id="_classtests_1_1unit_1_1test__analyze_1_1_analyzer_test_1adfbb1e158e254c33b8533f9bda90315d"/>    <section>
    <title>test_arch_loop_stops_on_not_supported()</title>
<indexterm><primary>test_arch_loop_stops_on_not_supported</primary><secondary>tests.unit.test_analyze.AnalyzerTest</secondary></indexterm>
<indexterm><primary>tests.unit.test_analyze.AnalyzerTest</primary><secondary>test_arch_loop_stops_on_not_supported</secondary></indexterm>
<para><computeroutput>def tests.unit.test_analyze.AnalyzerTest.test_arch_loop_stops_on_not_supported ( self)</computeroutput></para><para>
Definition at line <link linkend="_test__analyze_8py_source_1l00307">307</link> of file <link linkend="_test__analyze_8py_source">test_analyze.py</link>.</para>
<programlisting>00307 &#32;&#32;&#32;&#32;<emphasis role="keyword">def&#32;</emphasis>test_arch_loop_stops_on_not_supported(self):
00308 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">def&#32;</emphasis>stop(archs):
00309 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;spy&#32;=&#32;Spy()
00310 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;input&#32;=&#32;{<emphasis role="stringliteral">&apos;flags&apos;</emphasis>:&#32;[],&#32;<emphasis role="stringliteral">&apos;arch_list&apos;</emphasis>:&#32;archs}
00311 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;self.assertIsNone(sut.arch_check(input,&#32;spy.call))
00312 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;self.assertIsNone(spy.arg)
00313 
00314 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;stop([<emphasis role="stringliteral">&apos;ppc&apos;</emphasis>])
00315 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;stop([<emphasis role="stringliteral">&apos;ppc64&apos;</emphasis>])
00316 
00317 
00318 <emphasis role="preprocessor">@sut.require([])</emphasis>
</programlisting>    </section><anchor xml:id="_classtests_1_1unit_1_1test__analyze_1_1_analyzer_test_1a39ea692e660a457f87852335f8de39a4"/>    <section>
    <title>test_nodebug_macros_appended()</title>
<indexterm><primary>test_nodebug_macros_appended</primary><secondary>tests.unit.test_analyze.AnalyzerTest</secondary></indexterm>
<indexterm><primary>tests.unit.test_analyze.AnalyzerTest</primary><secondary>test_nodebug_macros_appended</secondary></indexterm>
<para><computeroutput>def tests.unit.test_analyze.AnalyzerTest.test_nodebug_macros_appended ( self)</computeroutput></para><para>
Definition at line <link linkend="_test__analyze_8py_source_1l00237">237</link> of file <link linkend="_test__analyze_8py_source">test_analyze.py</link>.</para>
<programlisting>00237 &#32;&#32;&#32;&#32;<emphasis role="keyword">def&#32;</emphasis>test_nodebug_macros_appended(self):
00238 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">def&#32;</emphasis><link linkend="__function_call_decls_8cpp_1ae1a3968e7947464bee7714f6d43b7002">test</link>(flags):
00239 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;spy&#32;=&#32;Spy()
00240 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;opts&#32;=&#32;{<emphasis role="stringliteral">&apos;flags&apos;</emphasis>:&#32;flags,&#32;<emphasis role="stringliteral">&apos;force_debug&apos;</emphasis>:&#32;<emphasis role="keyword">True</emphasis>}
00241 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;self.assertEqual(spy.success,
00242 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sut.filter_debug_flags(opts,&#32;spy.call))
00243 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;spy.arg[<emphasis role="stringliteral">&apos;flags&apos;</emphasis>]
00244 
00245 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;self.assertEqual([<emphasis role="stringliteral">&apos;-UNDEBUG&apos;</emphasis>],&#32;<link linkend="__function_call_decls_8cpp_1ae1a3968e7947464bee7714f6d43b7002">test</link>([]))
00246 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;self.assertEqual([<emphasis role="stringliteral">&apos;-DNDEBUG&apos;</emphasis>,&#32;<emphasis role="stringliteral">&apos;-UNDEBUG&apos;</emphasis>],&#32;<link linkend="__function_call_decls_8cpp_1ae1a3968e7947464bee7714f6d43b7002">test</link>([<emphasis role="stringliteral">&apos;-DNDEBUG&apos;</emphasis>]))
00247 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;self.assertEqual([<emphasis role="stringliteral">&apos;-DSomething&apos;</emphasis>,&#32;<emphasis role="stringliteral">&apos;-UNDEBUG&apos;</emphasis>],&#32;<link linkend="__function_call_decls_8cpp_1ae1a3968e7947464bee7714f6d43b7002">test</link>([<emphasis role="stringliteral">&apos;-DSomething&apos;</emphasis>]))
00248 
</programlisting><para>
References <link linkend="__function_call_decls_8cpp_source_1l00003">test()</link>.</para>
    </section><anchor xml:id="_classtests_1_1unit_1_1test__analyze_1_1_analyzer_test_1a7725584d7f64259ee00f483cbbef597e"/>    <section>
    <title>test_set_language_fall_through()</title>
<indexterm><primary>test_set_language_fall_through</primary><secondary>tests.unit.test_analyze.AnalyzerTest</secondary></indexterm>
<indexterm><primary>tests.unit.test_analyze.AnalyzerTest</primary><secondary>test_set_language_fall_through</secondary></indexterm>
<para><computeroutput>def tests.unit.test_analyze.AnalyzerTest.test_set_language_fall_through ( self)</computeroutput></para><para>
Definition at line <link linkend="_test__analyze_8py_source_1l00249">249</link> of file <link linkend="_test__analyze_8py_source">test_analyze.py</link>.</para>
<programlisting>00249 &#32;&#32;&#32;&#32;<emphasis role="keyword">def&#32;</emphasis>test_set_language_fall_through(self):
00250 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">def&#32;</emphasis>language(expected,&#32;input):
00251 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;spy&#32;=&#32;Spy()
00252 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;input.update({<emphasis role="stringliteral">&apos;compiler&apos;</emphasis>:&#32;<emphasis role="stringliteral">&apos;c&apos;</emphasis>,&#32;<emphasis role="stringliteral">&apos;file&apos;</emphasis>:&#32;<emphasis role="stringliteral">&apos;test.c&apos;</emphasis>})
00253 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;self.assertEqual(spy.success,&#32;sut.language_check(input,&#32;spy.call))
00254 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;self.assertEqual(expected,&#32;spy.arg[<emphasis role="stringliteral">&apos;language&apos;</emphasis>])
00255 
00256 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;language(<emphasis role="stringliteral">&apos;c&apos;</emphasis>,&#32;&#32;&#32;{<emphasis role="stringliteral">&apos;language&apos;</emphasis>:&#32;<emphasis role="stringliteral">&apos;c&apos;</emphasis>,&#32;<emphasis role="stringliteral">&apos;flags&apos;</emphasis>:&#32;[]})
00257 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;language(<emphasis role="stringliteral">&apos;c++&apos;</emphasis>,&#32;{<emphasis role="stringliteral">&apos;language&apos;</emphasis>:&#32;<emphasis role="stringliteral">&apos;c++&apos;</emphasis>,&#32;<emphasis role="stringliteral">&apos;flags&apos;</emphasis>:&#32;[]})
00258 
</programlisting>    </section><anchor xml:id="_classtests_1_1unit_1_1test__analyze_1_1_analyzer_test_1a57cb7910c5ec91655188a3f5ee299154"/>    <section>
    <title>test_set_language_from_filename()</title>
<indexterm><primary>test_set_language_from_filename</primary><secondary>tests.unit.test_analyze.AnalyzerTest</secondary></indexterm>
<indexterm><primary>tests.unit.test_analyze.AnalyzerTest</primary><secondary>test_set_language_from_filename</secondary></indexterm>
<para><computeroutput>def tests.unit.test_analyze.AnalyzerTest.test_set_language_from_filename ( self)</computeroutput></para><para>
Definition at line <link linkend="_test__analyze_8py_source_1l00280">280</link> of file <link linkend="_test__analyze_8py_source">test_analyze.py</link>.</para>
<programlisting>00280 &#32;&#32;&#32;&#32;<emphasis role="keyword">def&#32;</emphasis>test_set_language_from_filename(self):
00281 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">def&#32;</emphasis>language(expected,&#32;input):
00282 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;spy&#32;=&#32;Spy()
00283 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;input.update({<emphasis role="stringliteral">&apos;language&apos;</emphasis>:&#32;<emphasis role="keywordtype">None</emphasis>,&#32;<emphasis role="stringliteral">&apos;flags&apos;</emphasis>:&#32;[]})
00284 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;self.assertEqual(spy.success,&#32;sut.language_check(input,&#32;spy.call))
00285 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;self.assertEqual(expected,&#32;spy.arg[<emphasis role="stringliteral">&apos;language&apos;</emphasis>])
00286 
00287 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;language(<emphasis role="stringliteral">&apos;c&apos;</emphasis>,&#32;&#32;&#32;{<emphasis role="stringliteral">&apos;file&apos;</emphasis>:&#32;<emphasis role="stringliteral">&apos;file.c&apos;</emphasis>,&#32;&#32;&#32;<emphasis role="stringliteral">&apos;compiler&apos;</emphasis>:&#32;<emphasis role="stringliteral">&apos;c&apos;</emphasis>})
00288 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;language(<emphasis role="stringliteral">&apos;c++&apos;</emphasis>,&#32;{<emphasis role="stringliteral">&apos;file&apos;</emphasis>:&#32;<emphasis role="stringliteral">&apos;file.c&apos;</emphasis>,&#32;&#32;&#32;<emphasis role="stringliteral">&apos;compiler&apos;</emphasis>:&#32;<emphasis role="stringliteral">&apos;c++&apos;</emphasis>})
00289 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;language(<emphasis role="stringliteral">&apos;c++&apos;</emphasis>,&#32;{<emphasis role="stringliteral">&apos;file&apos;</emphasis>:&#32;<emphasis role="stringliteral">&apos;file.cxx&apos;</emphasis>,&#32;<emphasis role="stringliteral">&apos;compiler&apos;</emphasis>:&#32;<emphasis role="stringliteral">&apos;c&apos;</emphasis>})
00290 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;language(<emphasis role="stringliteral">&apos;c++&apos;</emphasis>,&#32;{<emphasis role="stringliteral">&apos;file&apos;</emphasis>:&#32;<emphasis role="stringliteral">&apos;file.cxx&apos;</emphasis>,&#32;<emphasis role="stringliteral">&apos;compiler&apos;</emphasis>:&#32;<emphasis role="stringliteral">&apos;c++&apos;</emphasis>})
00291 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;language(<emphasis role="stringliteral">&apos;c++&apos;</emphasis>,&#32;{<emphasis role="stringliteral">&apos;file&apos;</emphasis>:&#32;<emphasis role="stringliteral">&apos;file.cpp&apos;</emphasis>,&#32;<emphasis role="stringliteral">&apos;compiler&apos;</emphasis>:&#32;<emphasis role="stringliteral">&apos;c++&apos;</emphasis>})
00292 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;language(<emphasis role="stringliteral">&apos;c-cpp-output&apos;</emphasis>,&#32;&#32;&#32;{<emphasis role="stringliteral">&apos;file&apos;</emphasis>:&#32;<emphasis role="stringliteral">&apos;file.i&apos;</emphasis>,&#32;<emphasis role="stringliteral">&apos;compiler&apos;</emphasis>:&#32;<emphasis role="stringliteral">&apos;c&apos;</emphasis>})
00293 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;language(<emphasis role="stringliteral">&apos;c++-cpp-output&apos;</emphasis>,&#32;{<emphasis role="stringliteral">&apos;file&apos;</emphasis>:&#32;<emphasis role="stringliteral">&apos;file.i&apos;</emphasis>,&#32;<emphasis role="stringliteral">&apos;compiler&apos;</emphasis>:&#32;<emphasis role="stringliteral">&apos;c++&apos;</emphasis>})
00294 
</programlisting>    </section><anchor xml:id="_classtests_1_1unit_1_1test__analyze_1_1_analyzer_test_1ab3912adedab3915c1622f2ed47423288"/>    <section>
    <title>test_set_language_sets_flags()</title>
<indexterm><primary>test_set_language_sets_flags</primary><secondary>tests.unit.test_analyze.AnalyzerTest</secondary></indexterm>
<indexterm><primary>tests.unit.test_analyze.AnalyzerTest</primary><secondary>test_set_language_sets_flags</secondary></indexterm>
<para><computeroutput>def tests.unit.test_analyze.AnalyzerTest.test_set_language_sets_flags ( self)</computeroutput></para><para>
Definition at line <link linkend="_test__analyze_8py_source_1l00270">270</link> of file <link linkend="_test__analyze_8py_source">test_analyze.py</link>.</para>
<programlisting>00270 &#32;&#32;&#32;&#32;<emphasis role="keyword">def&#32;</emphasis>test_set_language_sets_flags(self):
00271 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">def&#32;</emphasis>flags(expected,&#32;input):
00272 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;spy&#32;=&#32;Spy()
00273 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;input.update({<emphasis role="stringliteral">&apos;compiler&apos;</emphasis>:&#32;<emphasis role="stringliteral">&apos;c&apos;</emphasis>,&#32;<emphasis role="stringliteral">&apos;file&apos;</emphasis>:&#32;<emphasis role="stringliteral">&apos;test.c&apos;</emphasis>})
00274 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;self.assertEqual(spy.success,&#32;sut.language_check(input,&#32;spy.call))
00275 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;self.assertEqual(expected,&#32;spy.arg[<emphasis role="stringliteral">&apos;flags&apos;</emphasis>])
00276 
00277 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;flags([<emphasis role="stringliteral">&apos;-x&apos;</emphasis>,&#32;<emphasis role="stringliteral">&apos;c&apos;</emphasis>],&#32;&#32;&#32;{<emphasis role="stringliteral">&apos;language&apos;</emphasis>:&#32;<emphasis role="stringliteral">&apos;c&apos;</emphasis>,&#32;<emphasis role="stringliteral">&apos;flags&apos;</emphasis>:&#32;[]})
00278 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;flags([<emphasis role="stringliteral">&apos;-x&apos;</emphasis>,&#32;<emphasis role="stringliteral">&apos;c++&apos;</emphasis>],&#32;{<emphasis role="stringliteral">&apos;language&apos;</emphasis>:&#32;<emphasis role="stringliteral">&apos;c++&apos;</emphasis>,&#32;<emphasis role="stringliteral">&apos;flags&apos;</emphasis>:&#32;[]})
00279 
</programlisting>    </section><anchor xml:id="_classtests_1_1unit_1_1test__analyze_1_1_analyzer_test_1a1c70f6f9c5158de1a1f7b8ece3700475"/>    <section>
    <title>test_set_language_stops_on_not_supported()</title>
<indexterm><primary>test_set_language_stops_on_not_supported</primary><secondary>tests.unit.test_analyze.AnalyzerTest</secondary></indexterm>
<indexterm><primary>tests.unit.test_analyze.AnalyzerTest</primary><secondary>test_set_language_stops_on_not_supported</secondary></indexterm>
<para><computeroutput>def tests.unit.test_analyze.AnalyzerTest.test_set_language_stops_on_not_supported ( self)</computeroutput></para><para>
Definition at line <link linkend="_test__analyze_8py_source_1l00259">259</link> of file <link linkend="_test__analyze_8py_source">test_analyze.py</link>.</para>
<programlisting>00259 &#32;&#32;&#32;&#32;<emphasis role="keyword">def&#32;</emphasis>test_set_language_stops_on_not_supported(self):
00260 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;spy&#32;=&#32;Spy()
00261 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;input&#32;=&#32;{
00262 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&apos;compiler&apos;</emphasis>:&#32;<emphasis role="stringliteral">&apos;c&apos;</emphasis>,
00263 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&apos;flags&apos;</emphasis>:&#32;[],
00264 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&apos;file&apos;</emphasis>:&#32;<emphasis role="stringliteral">&apos;test.java&apos;</emphasis>,
00265 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&apos;language&apos;</emphasis>:&#32;<emphasis role="stringliteral">&apos;java&apos;</emphasis>
00266 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00267 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;self.assertIsNone(sut.language_check(input,&#32;spy.call))
00268 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;self.assertIsNone(spy.arg)
00269 
</programlisting></section>
<para>
The documentation for this class was generated from the following file:</para>
/Users/maximilian/clang-llvm/clang/tools/scan-build-py/tests/unit/<link linkend="_test__analyze_8py">test_analyze.py</link></section>
</section>
