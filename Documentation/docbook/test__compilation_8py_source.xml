<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_test__compilation_8py_source" xml:lang="en-US">
<title>test_compilation.py</title>
<indexterm><primary>/Users/maximilian/clang-llvm/clang/tools/scan-build-py/tests/unit/test_compilation.py</primary></indexterm>
<programlisting><anchor xml:id="_test__compilation_8py_source_1l00001"/><link linkend="_namespacetests_1_1unit_1_1test__compilation">00001</link> <emphasis role="comment">#&#32;-*-&#32;coding:&#32;utf-8&#32;-*-</emphasis>
00002 <emphasis role="comment">#&#32;Part&#32;of&#32;the&#32;LLVM&#32;Project,&#32;under&#32;the&#32;Apache&#32;License&#32;v2.0&#32;with&#32;LLVM&#32;Exceptions.</emphasis>
00003 <emphasis role="comment">#&#32;See&#32;https://llvm.org/LICENSE.txt&#32;for&#32;license&#32;information.</emphasis>
00004 <emphasis role="comment">#&#32;SPDX-License-Identifier:&#32;Apache-2.0&#32;WITH&#32;LLVM-exception</emphasis>
00005 
00006 <emphasis role="keyword">import</emphasis>&#32;<link linkend="_namespacelibscanbuild_1_1compilation">libscanbuild.compilation</link>&#32;<emphasis role="keyword">as</emphasis>&#32;sut
00007 <emphasis role="keyword">import</emphasis>&#32;unittest
00008 
00009 
<anchor xml:id="_test__compilation_8py_source_1l00010"/><link linkend="_classtests_1_1unit_1_1test__compilation_1_1_compiler_test">00010</link> <emphasis role="keyword">class&#32;</emphasis><link linkend="_classtests_1_1unit_1_1test__compilation_1_1_compiler_test">CompilerTest</link>(unittest.TestCase):
00011 
<anchor xml:id="_test__compilation_8py_source_1l00012"/><link linkend="_classtests_1_1unit_1_1test__compilation_1_1_compiler_test_1a593b2aaf8be692e0c9a0de8bce705d46">00012</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">def&#32;</emphasis><link linkend="_classtests_1_1unit_1_1test__compilation_1_1_compiler_test_1a593b2aaf8be692e0c9a0de8bce705d46">test_is_compiler_call</link>(self):
00013 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;self.assertIsNotNone(sut.compiler_language([<emphasis role="stringliteral">&apos;clang&apos;</emphasis>]))
00014 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;self.assertIsNotNone(sut.compiler_language([<emphasis role="stringliteral">&apos;clang-3.6&apos;</emphasis>]))
00015 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;self.assertIsNotNone(sut.compiler_language([<emphasis role="stringliteral">&apos;clang++&apos;</emphasis>]))
00016 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;self.assertIsNotNone(sut.compiler_language([<emphasis role="stringliteral">&apos;clang++-3.5.1&apos;</emphasis>]))
00017 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;self.assertIsNotNone(sut.compiler_language([<emphasis role="stringliteral">&apos;cc&apos;</emphasis>]))
00018 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;self.assertIsNotNone(sut.compiler_language([<emphasis role="stringliteral">&apos;c++&apos;</emphasis>]))
00019 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;self.assertIsNotNone(sut.compiler_language([<emphasis role="stringliteral">&apos;gcc&apos;</emphasis>]))
00020 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;self.assertIsNotNone(sut.compiler_language([<emphasis role="stringliteral">&apos;g++&apos;</emphasis>]))
00021 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;self.assertIsNotNone(sut.compiler_language([<emphasis role="stringliteral">&apos;/usr/local/bin/gcc&apos;</emphasis>]))
00022 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;self.assertIsNotNone(sut.compiler_language([<emphasis role="stringliteral">&apos;/usr/local/bin/g++&apos;</emphasis>]))
00023 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;self.assertIsNotNone(sut.compiler_language([<emphasis role="stringliteral">&apos;/usr/local/bin/clang&apos;</emphasis>]))
00024 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;self.assertIsNotNone(
00025 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sut.compiler_language([<emphasis role="stringliteral">&apos;armv7_neno-linux-gnueabi-g++&apos;</emphasis>]))
00026 
00027 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;self.assertIsNone(sut.compiler_language([]))
00028 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;self.assertIsNone(sut.compiler_language([<emphasis role="stringliteral">&apos;&apos;</emphasis>]))
00029 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;self.assertIsNone(sut.compiler_language([<emphasis role="stringliteral">&apos;ld&apos;</emphasis>]))
00030 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;self.assertIsNone(sut.compiler_language([<emphasis role="stringliteral">&apos;as&apos;</emphasis>]))
00031 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;self.assertIsNone(sut.compiler_language([<emphasis role="stringliteral">&apos;/usr/local/bin/compiler&apos;</emphasis>]))
00032 
00033 
<anchor xml:id="_test__compilation_8py_source_1l00034"/><link linkend="_classtests_1_1unit_1_1test__compilation_1_1_split_test">00034</link> <emphasis role="keyword">class&#32;</emphasis><link linkend="_classtests_1_1unit_1_1test__compilation_1_1_split_test">SplitTest</link>(unittest.TestCase):
00035 
<anchor xml:id="_test__compilation_8py_source_1l00036"/><link linkend="_classtests_1_1unit_1_1test__compilation_1_1_split_test_1a09b97b8751d83b59a12cb821c52b3f0f">00036</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">def&#32;</emphasis><link linkend="_classtests_1_1unit_1_1test__compilation_1_1_split_test_1a09b97b8751d83b59a12cb821c52b3f0f">test_detect_cxx_from_compiler_name</link>(self):
00037 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">def&#32;</emphasis><link linkend="__function_call_decls_8cpp_1ae1a3968e7947464bee7714f6d43b7002">test</link>(cmd):
00038 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;result&#32;=&#32;sut.split_command([cmd,&#32;<emphasis role="stringliteral">&apos;-c&apos;</emphasis>,&#32;<emphasis role="stringliteral">&apos;src.c&apos;</emphasis>])
00039 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;self.assertIsNotNone(result,&#32;<emphasis role="stringliteral">&quot;wrong&#32;input&#32;for&#32;test&quot;</emphasis>)
00040 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;result.compiler&#32;==&#32;<emphasis role="stringliteral">&apos;c++&apos;</emphasis>
00041 
00042 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;self.assertFalse(<link linkend="__function_call_decls_8cpp_1ae1a3968e7947464bee7714f6d43b7002">test</link>(<emphasis role="stringliteral">&apos;cc&apos;</emphasis>))
00043 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;self.assertFalse(<link linkend="__function_call_decls_8cpp_1ae1a3968e7947464bee7714f6d43b7002">test</link>(<emphasis role="stringliteral">&apos;gcc&apos;</emphasis>))
00044 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;self.assertFalse(<link linkend="__function_call_decls_8cpp_1ae1a3968e7947464bee7714f6d43b7002">test</link>(<emphasis role="stringliteral">&apos;clang&apos;</emphasis>))
00045 
00046 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;self.assertTrue(<link linkend="__function_call_decls_8cpp_1ae1a3968e7947464bee7714f6d43b7002">test</link>(<emphasis role="stringliteral">&apos;c++&apos;</emphasis>))
00047 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;self.assertTrue(<link linkend="__function_call_decls_8cpp_1ae1a3968e7947464bee7714f6d43b7002">test</link>(<emphasis role="stringliteral">&apos;g++&apos;</emphasis>))
00048 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;self.assertTrue(<link linkend="__function_call_decls_8cpp_1ae1a3968e7947464bee7714f6d43b7002">test</link>(<emphasis role="stringliteral">&apos;g++-5.3.1&apos;</emphasis>))
00049 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;self.assertTrue(<link linkend="__function_call_decls_8cpp_1ae1a3968e7947464bee7714f6d43b7002">test</link>(<emphasis role="stringliteral">&apos;clang++&apos;</emphasis>))
00050 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;self.assertTrue(<link linkend="__function_call_decls_8cpp_1ae1a3968e7947464bee7714f6d43b7002">test</link>(<emphasis role="stringliteral">&apos;clang++-3.7.1&apos;</emphasis>))
00051 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;self.assertTrue(<link linkend="__function_call_decls_8cpp_1ae1a3968e7947464bee7714f6d43b7002">test</link>(<emphasis role="stringliteral">&apos;armv7_neno-linux-gnueabi-g++&apos;</emphasis>))
00052 
<anchor xml:id="_test__compilation_8py_source_1l00053"/><link linkend="_classtests_1_1unit_1_1test__compilation_1_1_split_test_1a8415c040cc5d3680fea217f046eb0cb5">00053</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">def&#32;</emphasis><link linkend="_classtests_1_1unit_1_1test__compilation_1_1_split_test_1a8415c040cc5d3680fea217f046eb0cb5">test_action</link>(self):
00054 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;self.assertIsNotNone(sut.split_command([<emphasis role="stringliteral">&apos;clang&apos;</emphasis>,&#32;<emphasis role="stringliteral">&apos;source.c&apos;</emphasis>]))
00055 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;self.assertIsNotNone(sut.split_command([<emphasis role="stringliteral">&apos;clang&apos;</emphasis>,&#32;<emphasis role="stringliteral">&apos;-c&apos;</emphasis>,&#32;<emphasis role="stringliteral">&apos;source.c&apos;</emphasis>]))
00056 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;self.assertIsNotNone(sut.split_command([<emphasis role="stringliteral">&apos;clang&apos;</emphasis>,&#32;<emphasis role="stringliteral">&apos;-c&apos;</emphasis>,&#32;<emphasis role="stringliteral">&apos;source.c&apos;</emphasis>,
00057 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&apos;-MF&apos;</emphasis>,&#32;<emphasis role="stringliteral">&apos;a.d&apos;</emphasis>]))
00058 
00059 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;self.assertIsNone(sut.split_command([<emphasis role="stringliteral">&apos;clang&apos;</emphasis>,&#32;<emphasis role="stringliteral">&apos;-E&apos;</emphasis>,&#32;<emphasis role="stringliteral">&apos;source.c&apos;</emphasis>]))
00060 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;self.assertIsNone(sut.split_command([<emphasis role="stringliteral">&apos;clang&apos;</emphasis>,&#32;<emphasis role="stringliteral">&apos;-c&apos;</emphasis>,&#32;<emphasis role="stringliteral">&apos;-E&apos;</emphasis>,&#32;<emphasis role="stringliteral">&apos;source.c&apos;</emphasis>]))
00061 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;self.assertIsNone(sut.split_command([<emphasis role="stringliteral">&apos;clang&apos;</emphasis>,&#32;<emphasis role="stringliteral">&apos;-c&apos;</emphasis>,&#32;<emphasis role="stringliteral">&apos;-M&apos;</emphasis>,&#32;<emphasis role="stringliteral">&apos;source.c&apos;</emphasis>]))
00062 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;self.assertIsNone(
00063 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sut.split_command([<emphasis role="stringliteral">&apos;clang&apos;</emphasis>,&#32;<emphasis role="stringliteral">&apos;-c&apos;</emphasis>,&#32;<emphasis role="stringliteral">&apos;-MM&apos;</emphasis>,&#32;<emphasis role="stringliteral">&apos;source.c&apos;</emphasis>]))
00064 
<anchor xml:id="_test__compilation_8py_source_1l00065"/><link linkend="_classtests_1_1unit_1_1test__compilation_1_1_split_test_1a042a93d383d9e89beb5a36e24a5e36ed">00065</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">def&#32;</emphasis><link linkend="_classtests_1_1unit_1_1test__compilation_1_1_split_test_1a042a93d383d9e89beb5a36e24a5e36ed">test_source_file</link>(self):
00066 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">def&#32;</emphasis><link linkend="__function_call_decls_8cpp_1ae1a3968e7947464bee7714f6d43b7002">test</link>(expected,&#32;cmd):
00067 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;self.assertEqual(expected,&#32;sut.split_command(cmd).files)
00068 
00069 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__function_call_decls_8cpp_1ae1a3968e7947464bee7714f6d43b7002">test</link>([<emphasis role="stringliteral">&apos;src.c&apos;</emphasis>],&#32;[<emphasis role="stringliteral">&apos;clang&apos;</emphasis>,&#32;<emphasis role="stringliteral">&apos;src.c&apos;</emphasis>])
00070 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__function_call_decls_8cpp_1ae1a3968e7947464bee7714f6d43b7002">test</link>([<emphasis role="stringliteral">&apos;src.c&apos;</emphasis>],&#32;[<emphasis role="stringliteral">&apos;clang&apos;</emphasis>,&#32;<emphasis role="stringliteral">&apos;-c&apos;</emphasis>,&#32;<emphasis role="stringliteral">&apos;src.c&apos;</emphasis>])
00071 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__function_call_decls_8cpp_1ae1a3968e7947464bee7714f6d43b7002">test</link>([<emphasis role="stringliteral">&apos;src.C&apos;</emphasis>],&#32;[<emphasis role="stringliteral">&apos;clang&apos;</emphasis>,&#32;<emphasis role="stringliteral">&apos;-x&apos;</emphasis>,&#32;<emphasis role="stringliteral">&apos;c&apos;</emphasis>,&#32;<emphasis role="stringliteral">&apos;src.C&apos;</emphasis>])
00072 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__function_call_decls_8cpp_1ae1a3968e7947464bee7714f6d43b7002">test</link>([<emphasis role="stringliteral">&apos;src.cpp&apos;</emphasis>],&#32;[<emphasis role="stringliteral">&apos;clang++&apos;</emphasis>,&#32;<emphasis role="stringliteral">&apos;-c&apos;</emphasis>,&#32;<emphasis role="stringliteral">&apos;src.cpp&apos;</emphasis>])
00073 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__function_call_decls_8cpp_1ae1a3968e7947464bee7714f6d43b7002">test</link>([<emphasis role="stringliteral">&apos;s1.c&apos;</emphasis>,&#32;<emphasis role="stringliteral">&apos;s2.c&apos;</emphasis>],&#32;[<emphasis role="stringliteral">&apos;clang&apos;</emphasis>,&#32;<emphasis role="stringliteral">&apos;-c&apos;</emphasis>,&#32;<emphasis role="stringliteral">&apos;s1.c&apos;</emphasis>,&#32;<emphasis role="stringliteral">&apos;s2.c&apos;</emphasis>])
00074 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__function_call_decls_8cpp_1ae1a3968e7947464bee7714f6d43b7002">test</link>([<emphasis role="stringliteral">&apos;s1.c&apos;</emphasis>,&#32;<emphasis role="stringliteral">&apos;s2.c&apos;</emphasis>],&#32;[<emphasis role="stringliteral">&apos;cc&apos;</emphasis>,&#32;<emphasis role="stringliteral">&apos;s1.c&apos;</emphasis>,&#32;<emphasis role="stringliteral">&apos;s2.c&apos;</emphasis>,&#32;<emphasis role="stringliteral">&apos;-ldep&apos;</emphasis>,&#32;<emphasis role="stringliteral">&apos;-o&apos;</emphasis>,&#32;<emphasis role="stringliteral">&apos;a.out&apos;</emphasis>])
00075 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__function_call_decls_8cpp_1ae1a3968e7947464bee7714f6d43b7002">test</link>([<emphasis role="stringliteral">&apos;src.c&apos;</emphasis>],&#32;[<emphasis role="stringliteral">&apos;clang&apos;</emphasis>,&#32;<emphasis role="stringliteral">&apos;-c&apos;</emphasis>,&#32;<emphasis role="stringliteral">&apos;-I&apos;</emphasis>,&#32;<emphasis role="stringliteral">&apos;./include&apos;</emphasis>,&#32;<emphasis role="stringliteral">&apos;src.c&apos;</emphasis>])
00076 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__function_call_decls_8cpp_1ae1a3968e7947464bee7714f6d43b7002">test</link>([<emphasis role="stringliteral">&apos;src.c&apos;</emphasis>],&#32;[<emphasis role="stringliteral">&apos;clang&apos;</emphasis>,&#32;<emphasis role="stringliteral">&apos;-c&apos;</emphasis>,&#32;<emphasis role="stringliteral">&apos;-I&apos;</emphasis>,&#32;<emphasis role="stringliteral">&apos;/opt/me/include&apos;</emphasis>,&#32;<emphasis role="stringliteral">&apos;src.c&apos;</emphasis>])
00077 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__function_call_decls_8cpp_1ae1a3968e7947464bee7714f6d43b7002">test</link>([<emphasis role="stringliteral">&apos;src.c&apos;</emphasis>],&#32;[<emphasis role="stringliteral">&apos;clang&apos;</emphasis>,&#32;<emphasis role="stringliteral">&apos;-c&apos;</emphasis>,&#32;<emphasis role="stringliteral">&apos;-D&apos;</emphasis>,&#32;<emphasis role="stringliteral">&apos;config=file.c&apos;</emphasis>,&#32;<emphasis role="stringliteral">&apos;src.c&apos;</emphasis>])
00078 
00079 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;self.assertIsNone(
00080 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sut.split_command([<emphasis role="stringliteral">&apos;cc&apos;</emphasis>,&#32;<emphasis role="stringliteral">&apos;this.o&apos;</emphasis>,&#32;<emphasis role="stringliteral">&apos;that.o&apos;</emphasis>,&#32;<emphasis role="stringliteral">&apos;-o&apos;</emphasis>,&#32;<emphasis role="stringliteral">&apos;a.out&apos;</emphasis>]))
00081 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;self.assertIsNone(
00082 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sut.split_command([<emphasis role="stringliteral">&apos;cc&apos;</emphasis>,&#32;<emphasis role="stringliteral">&apos;this.o&apos;</emphasis>,&#32;<emphasis role="stringliteral">&apos;-lthat&apos;</emphasis>,&#32;<emphasis role="stringliteral">&apos;-o&apos;</emphasis>,&#32;<emphasis role="stringliteral">&apos;a.out&apos;</emphasis>]))
00083 
<anchor xml:id="_test__compilation_8py_source_1l00084"/><link linkend="_classtests_1_1unit_1_1test__compilation_1_1_split_test_1a0bd4467d2ce29b8882451d201d88eb54">00084</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">def&#32;</emphasis><link linkend="_classtests_1_1unit_1_1test__compilation_1_1_split_test_1a0bd4467d2ce29b8882451d201d88eb54">test_filter_flags</link>(self):
00085 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">def&#32;</emphasis><link linkend="__function_call_decls_8cpp_1ae1a3968e7947464bee7714f6d43b7002">test</link>(expected,&#32;flags):
00086 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;command&#32;=&#32;[<emphasis role="stringliteral">&apos;clang&apos;</emphasis>,&#32;<emphasis role="stringliteral">&apos;-c&apos;</emphasis>,&#32;<emphasis role="stringliteral">&apos;src.c&apos;</emphasis>]&#32;+&#32;flags
00087 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;self.assertEqual(expected,&#32;sut.split_command(command).flags)
00088 
00089 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">def&#32;</emphasis>same(expected):
00090 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__function_call_decls_8cpp_1ae1a3968e7947464bee7714f6d43b7002">test</link>(expected,&#32;expected)
00091 
00092 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">def&#32;</emphasis>filtered(flags):
00093 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__function_call_decls_8cpp_1ae1a3968e7947464bee7714f6d43b7002">test</link>([],&#32;flags)
00094 
00095 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;same([])
00096 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;same([<emphasis role="stringliteral">&apos;-I&apos;</emphasis>,&#32;<emphasis role="stringliteral">&apos;/opt/me/include&apos;</emphasis>,&#32;<emphasis role="stringliteral">&apos;-DNDEBUG&apos;</emphasis>,&#32;<emphasis role="stringliteral">&apos;-ULIMITS&apos;</emphasis>])
00097 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;same([<emphasis role="stringliteral">&apos;-O&apos;</emphasis>,&#32;<emphasis role="stringliteral">&apos;-O2&apos;</emphasis>])
00098 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;same([<emphasis role="stringliteral">&apos;-m32&apos;</emphasis>,&#32;<emphasis role="stringliteral">&apos;-mmms&apos;</emphasis>])
00099 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;same([<emphasis role="stringliteral">&apos;-Wall&apos;</emphasis>,&#32;<emphasis role="stringliteral">&apos;-Wno-unused&apos;</emphasis>,&#32;<emphasis role="stringliteral">&apos;-g&apos;</emphasis>,&#32;<emphasis role="stringliteral">&apos;-funroll-loops&apos;</emphasis>])
00100 
00101 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;filtered([])
00102 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;filtered([<emphasis role="stringliteral">&apos;-lclien&apos;</emphasis>,&#32;<emphasis role="stringliteral">&apos;-L/opt/me/lib&apos;</emphasis>,&#32;<emphasis role="stringliteral">&apos;-L&apos;</emphasis>,&#32;<emphasis role="stringliteral">&apos;/opt/you/lib&apos;</emphasis>])
00103 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;filtered([<emphasis role="stringliteral">&apos;-static&apos;</emphasis>])
00104 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;filtered([<emphasis role="stringliteral">&apos;-MD&apos;</emphasis>,&#32;<emphasis role="stringliteral">&apos;-MT&apos;</emphasis>,&#32;<emphasis role="stringliteral">&apos;something&apos;</emphasis>])
00105 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;filtered([<emphasis role="stringliteral">&apos;-MMD&apos;</emphasis>,&#32;<emphasis role="stringliteral">&apos;-MF&apos;</emphasis>,&#32;<emphasis role="stringliteral">&apos;something&apos;</emphasis>])
00106 
00107 
<anchor xml:id="_test__compilation_8py_source_1l00108"/><link linkend="_classtests_1_1unit_1_1test__compilation_1_1_source_classifier_test">00108</link> <emphasis role="keyword">class&#32;</emphasis><link linkend="_classtests_1_1unit_1_1test__compilation_1_1_source_classifier_test">SourceClassifierTest</link>(unittest.TestCase):
00109 
<anchor xml:id="_test__compilation_8py_source_1l00110"/><link linkend="_classtests_1_1unit_1_1test__compilation_1_1_source_classifier_test_1af870226b075edd961c006a8e987d7765">00110</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">def&#32;</emphasis><link linkend="_classtests_1_1unit_1_1test__compilation_1_1_source_classifier_test_1af870226b075edd961c006a8e987d7765">test_sources</link>(self):
00111 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;self.assertIsNone(sut.classify_source(<emphasis role="stringliteral">&apos;file.o&apos;</emphasis>))
00112 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;self.assertIsNone(sut.classify_source(<emphasis role="stringliteral">&apos;file.exe&apos;</emphasis>))
00113 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;self.assertIsNone(sut.classify_source(<emphasis role="stringliteral">&apos;/path/file.o&apos;</emphasis>))
00114 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;self.assertIsNone(sut.classify_source(<emphasis role="stringliteral">&apos;clang&apos;</emphasis>))
00115 
00116 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;self.assertEqual(<emphasis role="stringliteral">&apos;c&apos;</emphasis>,&#32;sut.classify_source(<emphasis role="stringliteral">&apos;file.c&apos;</emphasis>))
00117 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;self.assertEqual(<emphasis role="stringliteral">&apos;c&apos;</emphasis>,&#32;sut.classify_source(<emphasis role="stringliteral">&apos;./file.c&apos;</emphasis>))
00118 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;self.assertEqual(<emphasis role="stringliteral">&apos;c&apos;</emphasis>,&#32;sut.classify_source(<emphasis role="stringliteral">&apos;/path/file.c&apos;</emphasis>))
00119 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;self.assertEqual(<emphasis role="stringliteral">&apos;c++&apos;</emphasis>,&#32;sut.classify_source(<emphasis role="stringliteral">&apos;file.c&apos;</emphasis>,&#32;<emphasis role="keyword">False</emphasis>))
00120 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;self.assertEqual(<emphasis role="stringliteral">&apos;c++&apos;</emphasis>,&#32;sut.classify_source(<emphasis role="stringliteral">&apos;./file.c&apos;</emphasis>,&#32;<emphasis role="keyword">False</emphasis>))
00121 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;self.assertEqual(<emphasis role="stringliteral">&apos;c++&apos;</emphasis>,&#32;sut.classify_source(<emphasis role="stringliteral">&apos;/path/file.c&apos;</emphasis>,&#32;<emphasis role="keyword">False</emphasis>))
</programlisting></section>
