<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="__clang_format_fuzzer_8cpp" xml:lang="en-US">
<title>/Users/maximilian/clang-llvm/clang/tools/clang-format/fuzzer/ClangFormatFuzzer.cpp File Reference</title>
<indexterm><primary>/Users/maximilian/clang-llvm/clang/tools/clang-format/fuzzer/ClangFormatFuzzer.cpp</primary></indexterm>
<programlisting>#include &quot;clang/Format/Format.h&quot;
</programlisting><simplesect>
    <title>Functions    </title>
        <itemizedlist>
            <listitem><para>int <link linkend="__clang_format_fuzzer_8cpp_1aecb7ba40a567c045e6eb69209014e460">LLVMFuzzerTestOneInput</link> (uint8_t *data, size_t size)</para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Detailed Description</title>

<para>This file implements a function that runs Clang format on a single input. This function is then linked into the Fuzzer library. </para>
<para>
Definition in file <link linkend="__clang_format_fuzzer_8cpp_source">ClangFormatFuzzer.cpp</link>.</para>
</section>
<section>
<title>Function Documentation</title>
<anchor xml:id="__clang_format_fuzzer_8cpp_1aecb7ba40a567c045e6eb69209014e460"/>    <section>
    <title>LLVMFuzzerTestOneInput()</title>
<indexterm><primary>LLVMFuzzerTestOneInput</primary><secondary>ClangFormatFuzzer.cpp</secondary></indexterm>
<indexterm><primary>ClangFormatFuzzer.cpp</primary><secondary>LLVMFuzzerTestOneInput</secondary></indexterm>
<para><computeroutput>int LLVMFuzzerTestOneInput (uint8_t * data, size_t size)</computeroutput></para><para>
Definition at line <link linkend="__clang_format_fuzzer_8cpp_source_1l00017">17</link> of file <link linkend="__clang_format_fuzzer_8cpp_source">ClangFormatFuzzer.cpp</link>.</para>
<programlisting>00017 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00018 &#32;&#32;<emphasis role="comment">//&#32;FIXME:&#32;fuzz&#32;more&#32;things:&#32;different&#32;styles,&#32;different&#32;style&#32;features.</emphasis>
00019 &#32;&#32;std::string&#32;s((<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*)data,&#32;size);
00020 &#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;Style&#32;=&#32;getGoogleStyle(clang::format::FormatStyle::LK_Cpp);
00021 &#32;&#32;Style.ColumnLimit&#32;=&#32;60;
00022 &#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;Replaces&#32;=&#32;reformat(Style,&#32;s,&#32;clang::tooling::Range(0,&#32;s.size()));
00023 &#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;Result&#32;=&#32;applyAllReplacements(s,&#32;Replaces);
00024 
00025 &#32;&#32;<emphasis role="comment">//&#32;Output&#32;must&#32;be&#32;checked,&#32;as&#32;otherwise&#32;we&#32;crash.</emphasis>
00026 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!Result)&#32;{}
00027 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
00028 }
</programlisting></section>
</section>
</section>
