<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_namespaceclang__fuzzer" xml:lang="en-US">
<title>clang_fuzzer Namespace Reference</title>
<indexterm><primary>clang_fuzzer</primary></indexterm>
<simplesect>
    <title>Classes    </title>
        <itemizedlist>
            <listitem><para>class <link linkend="_classclang__fuzzer_1_1_inner_loop">InnerLoop</link></para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Functions    </title>
        <itemizedlist>
            <listitem><para>const std::vector&lt; const char * &gt; &amp; <link linkend="_namespaceclang__fuzzer_1a7204f11d358bc8d6b48eb043fdba0ce4">GetCLArgs</link> ()</para>
</listitem>
            <listitem><para>void <link linkend="_namespaceclang__fuzzer_1a27dbd4f50876f9f3532cb6145a78da33">HandleCXX</link> (const std::string &amp;S, const char *FileName, const std::vector&lt; const char * &gt; &amp;ExtraArgs)</para>
</listitem>
            <listitem><para>void <link linkend="_namespaceclang__fuzzer_1a3adbd0effd16c9fde62eef8b297c8fee">HandleLLVM</link> (const std::string &amp;S, const std::vector&lt; const char * &gt; &amp;ExtraArgs)</para>
</listitem>
            <listitem><para>std::ostream &amp; <link linkend="_namespaceclang__fuzzer_1a999bc51b48e947b0f7feb714749b0a21">operator&lt;&lt;</link> (std::ostream &amp;os, const BinaryOp &amp;x)</para>
</listitem>
            <listitem><para>std::ostream &amp; <link linkend="_namespaceclang__fuzzer_1aed1d352356cde87e890c29c8c4d67395">operator&lt;&lt;</link> (std::ostream &amp;os, const StatementSeq &amp;x)</para>
</listitem>
            <listitem><para>std::ostream &amp; <link linkend="_namespaceclang__fuzzer_1ac8954993cdf896f3a8247559fcd1c198">operator&lt;&lt;</link> (std::ostream &amp;os, const Const &amp;x)</para>
</listitem>
            <listitem><para>std::ostream &amp; <link linkend="_namespaceclang__fuzzer_1a495bf005e5556e5d7428afadce257135">operator&lt;&lt;</link> (std::ostream &amp;os, const VarRef &amp;x)</para>
</listitem>
            <listitem><para>std::ostream &amp; <link linkend="_namespaceclang__fuzzer_1a2375d76e387c15285dda8d15dad36f0e">operator&lt;&lt;</link> (std::ostream &amp;os, const Rvalue &amp;x)</para>
</listitem>
            <listitem><para>std::ostream &amp; <link linkend="_namespaceclang__fuzzer_1adefdaecdbb1de92f0eeba7640b89685b">operator&lt;&lt;</link> (std::ostream &amp;os, const AssignmentStatement &amp;x)</para>
</listitem>
            <listitem><para>std::ostream &amp; <link linkend="_namespaceclang__fuzzer_1ac90ec7b7ecf1e1ead9595d1a983f022d">operator&lt;&lt;</link> (std::ostream &amp;os, const Statement &amp;x)</para>
</listitem>
            <listitem><para>void <link linkend="_namespaceclang__fuzzer_1a1de27ebdd8a199c6bdbb5a195631f553">NestedLoopToString</link> (std::ostream &amp;os, const LoopFunction &amp;x)</para>
</listitem>
            <listitem><para>void <link linkend="_namespaceclang__fuzzer_1acecea2c5371f615b84065480211f1374">SingleLoopToString</link> (std::ostream &amp;os, const LoopFunction &amp;x)</para>
</listitem>
            <listitem><para>std::ostream &amp; <link linkend="_namespaceclang__fuzzer_1a52282fc06ac9b7761f21d2588974776a">operator&lt;&lt;</link> (std::ostream &amp;os, const LoopFunction &amp;x)</para>
</listitem>
            <listitem><para>std::string <link linkend="_namespaceclang__fuzzer_1a944a037574154e7dedf0c719e2a4baf7">LoopFunctionToString</link> (const LoopFunction &amp;input)</para>
</listitem>
            <listitem><para>std::string <link linkend="_namespaceclang__fuzzer_1acab6e28bea376a65f6d4ab66def83cac">LoopProtoToCxx</link> (const uint8_t *data, size_t size)</para>
</listitem>
            <listitem><para>std::ostream &amp; <link linkend="_namespaceclang__fuzzer_1a01009d2095a220beb7297b772b95ce61">operator&lt;&lt;</link> (std::ostream &amp;os, const Lvalue &amp;x)</para>
</listitem>
            <listitem><para>std::ostream &amp; <link linkend="_namespaceclang__fuzzer_1ae4bbba2bc2bf5451263da160878864db">operator&lt;&lt;</link> (std::ostream &amp;os, const IfElse &amp;x)</para>
</listitem>
            <listitem><para>std::ostream &amp; <link linkend="_namespaceclang__fuzzer_1a193185d5a2a899c1bc864a43049acc79">operator&lt;&lt;</link> (std::ostream &amp;os, const While &amp;x)</para>
</listitem>
            <listitem><para>std::ostream &amp; <link linkend="_namespaceclang__fuzzer_1adf345027d196651169672de25a74af76">operator&lt;&lt;</link> (std::ostream &amp;os, const Function &amp;x)</para>
</listitem>
            <listitem><para>std::string <link linkend="_namespaceclang__fuzzer_1a664b8472985d2ee4f34c16b89b02cc90">FunctionToString</link> (const Function &amp;input)</para>
</listitem>
            <listitem><para>std::string <link linkend="_namespaceclang__fuzzer_1aaf890a8f29ccba77145453c91cad912e">ProtoToCxx</link> (const uint8_t *data, size_t size)</para>
</listitem>
            <listitem><para>std::string <link linkend="_namespaceclang__fuzzer_1a2a135ddb6bd40169f7f809210bded8b3">BinopToString</link> (std::ostream &amp;os, const BinaryOp &amp;x)</para>
</listitem>
            <listitem><para>std::string <link linkend="_namespaceclang__fuzzer_1aa61cc7ac7e7f548b02f20fdbdd5aedc3">StateSeqToString</link> (std::ostream &amp;os, const StatementSeq &amp;x)</para>
</listitem>
            <listitem><para>std::string <link linkend="_namespaceclang__fuzzer_1a4286ea62a31f17f2f81fdbe82e84d30e">ConstToString</link> (const Const &amp;x)</para>
</listitem>
            <listitem><para>std::string <link linkend="_namespaceclang__fuzzer_1a42168c5369d315d97d112481cedf9e5a">VarRefToString</link> (std::ostream &amp;os, const VarRef &amp;x)</para>
</listitem>
            <listitem><para>std::string <link linkend="_namespaceclang__fuzzer_1af95d943f747b8628a4981aec82abb9d8">RvalueToString</link> (std::ostream &amp;os, const Rvalue &amp;x)</para>
</listitem>
            <listitem><para>std::string <link linkend="_namespaceclang__fuzzer_1a35ef2ec34abd6c5c09fcf55180046986">LoopFunctionToLLVMString</link> (const LoopFunction &amp;input)</para>
</listitem>
            <listitem><para>std::string <link linkend="_namespaceclang__fuzzer_1af604fc28b812e241cd6abfebaedc4797">LoopProtoToLLVM</link> (const uint8_t *data, size_t size)</para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Function Documentation</title>
<anchor xml:id="_namespaceclang__fuzzer_1a2a135ddb6bd40169f7f809210bded8b3"/>    <section>
    <title>BinopToString()</title>
<indexterm><primary>BinopToString</primary><secondary>clang_fuzzer</secondary></indexterm>
<indexterm><primary>clang_fuzzer</primary><secondary>BinopToString</secondary></indexterm>
<para><computeroutput>std::string clang_fuzzer::BinopToString (std::ostream &amp; os, const BinaryOp &amp; x)</computeroutput></para><para>
Definition at line <link linkend="_loop__proto__to__llvm_8cpp_source_1l00087">87</link> of file <link linkend="_loop__proto__to__llvm_8cpp_source">loop_proto_to_llvm.cpp</link>.</para>
<programlisting>00087 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00088 &#32;&#32;std::string&#32;left&#32;=&#32;<link linkend="_namespaceclang__fuzzer_1af95d943f747b8628a4981aec82abb9d8">RvalueToString</link>(os,&#32;x.left());
00089 &#32;&#32;std::string&#32;right&#32;=&#32;<link linkend="_namespaceclang__fuzzer_1af95d943f747b8628a4981aec82abb9d8">RvalueToString</link>(os,&#32;x.right());
00090 &#32;&#32;std::string&#32;op;
00091 &#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(x.op())&#32;{
00092 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;BinaryOp::PLUS:
00093 &#32;&#32;&#32;&#32;op&#32;=&#32;<emphasis role="stringliteral">&quot;add&quot;</emphasis>;
00094 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
00095 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;BinaryOp::MINUS:
00096 &#32;&#32;&#32;&#32;op&#32;=&#32;<emphasis role="stringliteral">&quot;sub&quot;</emphasis>;
00097 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
00098 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;BinaryOp::MUL:
00099 &#32;&#32;&#32;&#32;op&#32;=&#32;<emphasis role="stringliteral">&quot;mul&quot;</emphasis>;
00100 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
00101 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;BinaryOp::XOR:
00102 &#32;&#32;&#32;&#32;op&#32;=&#32;<emphasis role="stringliteral">&quot;xor&quot;</emphasis>;
00103 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
00104 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;BinaryOp::AND:
00105 &#32;&#32;&#32;&#32;op&#32;=&#32;<emphasis role="stringliteral">&quot;and&quot;</emphasis>;
00106 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
00107 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;BinaryOp::OR:
00108 &#32;&#32;&#32;&#32;op&#32;=&#32;<emphasis role="stringliteral">&quot;or&quot;</emphasis>;
00109 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
00110 &#32;&#32;<emphasis role="comment">//&#32;Support&#32;for&#32;Boolean&#32;operators&#32;will&#32;be&#32;added&#32;later</emphasis>
00111 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;BinaryOp::EQ:
00112 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;BinaryOp::NE:
00113 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;BinaryOp::LE:
00114 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;BinaryOp::GE:
00115 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;BinaryOp::LT:
00116 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;BinaryOp::GT:
00117 &#32;&#32;&#32;&#32;op&#32;=&#32;<emphasis role="stringliteral">&quot;add&quot;</emphasis>;
00118 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
00119 &#32;&#32;}
00120 &#32;&#32;std::string&#32;val_var&#32;=&#32;get_var();
00121 &#32;&#32;os&#32;&lt;&lt;&#32;val_var&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;=&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;op&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;i32&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;left&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;,&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;right&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;\n&quot;</emphasis>;
00122 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;val_var;
00123 }
</programlisting><para>
References <link linkend="_loop__proto__to__llvm_8cpp_source_1l00073">RvalueToString()</link>.</para>
<para>
Referenced by <link linkend="_loop__proto__to__llvm_8cpp_source_1l00073">RvalueToString()</link>.</para>
    </section><anchor xml:id="_namespaceclang__fuzzer_1a4286ea62a31f17f2f81fdbe82e84d30e"/>    <section>
    <title>ConstToString()</title>
<indexterm><primary>ConstToString</primary><secondary>clang_fuzzer</secondary></indexterm>
<indexterm><primary>clang_fuzzer</primary><secondary>ConstToString</secondary></indexterm>
<para><computeroutput>std::string clang_fuzzer::ConstToString (const Const &amp; x)</computeroutput></para><para>
Definition at line <link linkend="_loop__proto__to__llvm_8cpp_source_1l00051">51</link> of file <link linkend="_loop__proto__to__llvm_8cpp_source">loop_proto_to_llvm.cpp</link>.</para>
<programlisting>00051 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00052 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::to_string(x.val());
00053 }
</programlisting><para>
Referenced by <link linkend="_loop__proto__to__llvm_8cpp_source_1l00073">RvalueToString()</link>.</para>
    </section><anchor xml:id="_namespaceclang__fuzzer_1a664b8472985d2ee4f34c16b89b02cc90"/>    <section>
    <title>FunctionToString()</title>
<indexterm><primary>FunctionToString</primary><secondary>clang_fuzzer</secondary></indexterm>
<indexterm><primary>clang_fuzzer</primary><secondary>FunctionToString</secondary></indexterm>
<para><computeroutput>std::string clang_fuzzer::FunctionToString (const Function &amp; input)</computeroutput></para><para>
Definition at line <link linkend="_proto__to__cxx_8cpp_source_1l00088">88</link> of file <link linkend="_proto__to__cxx_8cpp_source">proto_to_cxx.cpp</link>.</para>
<programlisting>00088 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00089 &#32;&#32;std::ostringstream&#32;os;
00090 &#32;&#32;os&#32;&lt;&lt;&#32;input;
00091 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;os.str();
00092 
00093 }
</programlisting><para>
Referenced by <link linkend="__example_clang_proto_fuzzer_8cpp_source_1l00024">DEFINE_BINARY_PROTO_FUZZER()</link>, and <link linkend="_proto__to__cxx_8cpp_source_1l00094">ProtoToCxx()</link>.</para>
    </section><anchor xml:id="_namespaceclang__fuzzer_1a7204f11d358bc8d6b48eb043fdba0ce4"/>    <section>
    <title>GetCLArgs()</title>
<indexterm><primary>GetCLArgs</primary><secondary>clang_fuzzer</secondary></indexterm>
<indexterm><primary>clang_fuzzer</primary><secondary>GetCLArgs</secondary></indexterm>
<para><computeroutput>const std::vector&lt; const char * &gt; &amp; clang_fuzzer::GetCLArgs ( )</computeroutput></para><para>
Definition at line <link linkend="_fuzzer__initialize_8cpp_source_1l00031">31</link> of file <link linkend="_fuzzer__initialize_8cpp_source">fuzzer_initialize.cpp</link>.</para>
<programlisting>00031 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00032 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;CLArgs;
00033 }
</programlisting><para>
Referenced by <link linkend="__example_clang_l_l_v_m_proto_fuzzer_8cpp_source_1l00024">DEFINE_BINARY_PROTO_FUZZER()</link>.</para>
    </section><anchor xml:id="_namespaceclang__fuzzer_1a27dbd4f50876f9f3532cb6145a78da33"/>    <section>
    <title>HandleCXX()</title>
<indexterm><primary>HandleCXX</primary><secondary>clang_fuzzer</secondary></indexterm>
<indexterm><primary>clang_fuzzer</primary><secondary>HandleCXX</secondary></indexterm>
<para><computeroutput>void clang_fuzzer::HandleCXX (const std::string &amp; S, const char * FileName, const std::vector&lt; const char * &gt; &amp; ExtraArgs)</computeroutput></para><para>
Definition at line <link linkend="_handle__cxx_8cpp_source_1l00023">23</link> of file <link linkend="_handle__cxx_8cpp_source">handle_cxx.cpp</link>.</para>
<programlisting>00025 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00026 &#32;&#32;llvm::opt::ArgStringList&#32;CC1Args;
00027 &#32;&#32;CC1Args.push_back(<emphasis role="stringliteral">&quot;-cc1&quot;</emphasis>);
00028 &#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">auto</emphasis>&#32;&amp;A&#32;:&#32;ExtraArgs)
00029 &#32;&#32;&#32;&#32;CC1Args.push_back(A);
00030 &#32;&#32;CC1Args.push_back(FileName);
00031 
00032 &#32;&#32;llvm::IntrusiveRefCntPtr&lt;FileManager&gt;&#32;Files(
00033 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">new</emphasis>&#32;FileManager(FileSystemOptions()));
00034 &#32;&#32;IgnoringDiagConsumer&#32;Diags;
00035 &#32;&#32;IntrusiveRefCntPtr&lt;DiagnosticOptions&gt;&#32;DiagOpts&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;DiagnosticOptions();
00036 &#32;&#32;DiagnosticsEngine&#32;Diagnostics(
00037 &#32;&#32;&#32;&#32;&#32;&#32;IntrusiveRefCntPtr&lt;clang::DiagnosticIDs&gt;(<emphasis role="keyword">new</emphasis>&#32;DiagnosticIDs()),&#32;&amp;*DiagOpts,
00038 &#32;&#32;&#32;&#32;&#32;&#32;&amp;Diags,&#32;<emphasis role="keyword">false</emphasis>);
00039 &#32;&#32;std::unique_ptr&lt;clang::CompilerInvocation&gt;&#32;Invocation(
00040 &#32;&#32;&#32;&#32;&#32;&#32;tooling::newInvocation(&amp;Diagnostics,&#32;CC1Args,&#32;<emphasis role="comment">/*BinaryName=*/</emphasis><emphasis role="keyword">nullptr</emphasis>));
00041 &#32;&#32;std::unique_ptr&lt;llvm::MemoryBuffer&gt;&#32;Input&#32;=
00042 &#32;&#32;&#32;&#32;&#32;&#32;llvm::MemoryBuffer::getMemBuffer(S);
00043 &#32;&#32;Invocation-&gt;getPreprocessorOpts().addRemappedFile(FileName,
00044 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Input.release());
00045 &#32;&#32;std::unique_ptr&lt;tooling::ToolAction&gt;&#32;action(
00046 &#32;&#32;&#32;&#32;&#32;&#32;tooling::newFrontendActionFactory&lt;clang::EmitObjAction&gt;());
00047 &#32;&#32;std::shared_ptr&lt;PCHContainerOperations&gt;&#32;PCHContainerOps&#32;=
00048 &#32;&#32;&#32;&#32;&#32;&#32;std::make_shared&lt;PCHContainerOperations&gt;();
00049 &#32;&#32;action-&gt;runInvocation(std::move(Invocation),&#32;Files.get(),&#32;PCHContainerOps,
00050 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;Diags);
00051 }
</programlisting><para>
Referenced by <link linkend="__example_clang_loop_proto_fuzzer_8cpp_source_1l00026">DEFINE_BINARY_PROTO_FUZZER()</link>, and <link linkend="__clang_fuzzer_8cpp_source_1l00021">LLVMFuzzerTestOneInput()</link>.</para>
    </section><anchor xml:id="_namespaceclang__fuzzer_1a3adbd0effd16c9fde62eef8b297c8fee"/>    <section>
    <title>HandleLLVM()</title>
<indexterm><primary>HandleLLVM</primary><secondary>clang_fuzzer</secondary></indexterm>
<indexterm><primary>clang_fuzzer</primary><secondary>HandleLLVM</secondary></indexterm>
<para><computeroutput>void clang_fuzzer::HandleLLVM (const std::string &amp; S, const std::vector&lt; const char * &gt; &amp; ExtraArgs)</computeroutput></para><para>
Definition at line <link linkend="_handle__llvm_8cpp_source_1l00212">212</link> of file <link linkend="_handle__llvm_8cpp_source">handle_llvm.cpp</link>.</para>
<programlisting>00213 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00214 &#32;&#32;<emphasis role="comment">//&#32;Populate&#32;OptArrays&#32;and&#32;UnoptArrays&#32;with&#32;the&#32;arrays&#32;from&#32;InputArrays</emphasis>
00215 &#32;&#32;memcpy(OptArrays,&#32;InputArrays,&#32;kTotalSize);
00216 &#32;&#32;memcpy(UnoptArrays,&#32;InputArrays,&#32;kTotalSize);
00217 
00218 &#32;&#32;<emphasis role="comment">//&#32;Parse&#32;ExtraArgs&#32;to&#32;set&#32;the&#32;optimization&#32;level</emphasis>
00219 &#32;&#32;CodeGenOpt::Level&#32;OLvl;
00220 &#32;&#32;getOptLevel(ExtraArgs,&#32;OLvl);
00221 
00222 &#32;&#32;<emphasis role="comment">//&#32;First&#32;we&#32;optimize&#32;the&#32;IR&#32;by&#32;running&#32;a&#32;loop&#32;vectorizer&#32;pass</emphasis>
00223 &#32;&#32;std::string&#32;OptIR&#32;=&#32;OptLLVM(IR,&#32;OLvl);
00224 
00225 &#32;&#32;CreateAndRunJITFunc(OptIR,&#32;OLvl);
00226 &#32;&#32;CreateAndRunJITFunc(IR,&#32;CodeGenOpt::None);
00227 
00228 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(memcmp(OptArrays,&#32;UnoptArrays,&#32;kTotalSize))
00229 &#32;&#32;&#32;&#32;ErrorAndExit(<emphasis role="stringliteral">&quot;!!!BUG!!!&quot;</emphasis>);
00230 
00231 &#32;&#32;<emphasis role="keywordflow">return</emphasis>;
00232 }
</programlisting><para>
Referenced by <link linkend="__example_clang_l_l_v_m_proto_fuzzer_8cpp_source_1l00024">DEFINE_BINARY_PROTO_FUZZER()</link>.</para>
    </section><anchor xml:id="_namespaceclang__fuzzer_1a35ef2ec34abd6c5c09fcf55180046986"/>    <section>
    <title>LoopFunctionToLLVMString()</title>
<indexterm><primary>LoopFunctionToLLVMString</primary><secondary>clang_fuzzer</secondary></indexterm>
<indexterm><primary>clang_fuzzer</primary><secondary>LoopFunctionToLLVMString</secondary></indexterm>
<para><computeroutput>std::string clang_fuzzer::LoopFunctionToLLVMString (const LoopFunction &amp; input)</computeroutput></para><para>
Definition at line <link linkend="_loop__proto__to__llvm_8cpp_source_1l00197">197</link> of file <link linkend="_loop__proto__to__llvm_8cpp_source">loop_proto_to_llvm.cpp</link>.</para>
<programlisting>00197 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00198 &#32;&#32;std::ostringstream&#32;os;
00199 &#32;&#32;os&#32;&lt;&lt;&#32;input;
00200 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;os.str();
00201 }
</programlisting><para>
Referenced by <link linkend="__example_clang_l_l_v_m_proto_fuzzer_8cpp_source_1l00024">DEFINE_BINARY_PROTO_FUZZER()</link>, and <link linkend="_loop__proto__to__llvm_8cpp_source_1l00202">LoopProtoToLLVM()</link>.</para>
    </section><anchor xml:id="_namespaceclang__fuzzer_1a944a037574154e7dedf0c719e2a4baf7"/>    <section>
    <title>LoopFunctionToString()</title>
<indexterm><primary>LoopFunctionToString</primary><secondary>clang_fuzzer</secondary></indexterm>
<indexterm><primary>clang_fuzzer</primary><secondary>LoopFunctionToString</secondary></indexterm>
<para><computeroutput>std::string clang_fuzzer::LoopFunctionToString (const LoopFunction &amp; input)</computeroutput></para><para>
Definition at line <link linkend="_loop__proto__to__cxx_8cpp_source_1l00147">147</link> of file <link linkend="_loop__proto__to__cxx_8cpp_source">loop_proto_to_cxx.cpp</link>.</para>
<programlisting>00147 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00148 &#32;&#32;std::ostringstream&#32;os;
00149 &#32;&#32;os&#32;&lt;&lt;&#32;input;
00150 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;os.str();
00151 }
</programlisting><para>
Referenced by <link linkend="__example_clang_loop_proto_fuzzer_8cpp_source_1l00026">DEFINE_BINARY_PROTO_FUZZER()</link>, and <link linkend="_loop__proto__to__cxx_8cpp_source_1l00152">LoopProtoToCxx()</link>.</para>
    </section><anchor xml:id="_namespaceclang__fuzzer_1acab6e28bea376a65f6d4ab66def83cac"/>    <section>
    <title>LoopProtoToCxx()</title>
<indexterm><primary>LoopProtoToCxx</primary><secondary>clang_fuzzer</secondary></indexterm>
<indexterm><primary>clang_fuzzer</primary><secondary>LoopProtoToCxx</secondary></indexterm>
<para><computeroutput>std::string clang_fuzzer::LoopProtoToCxx (const uint8_t * data, size_t size)</computeroutput></para><para>
Definition at line <link linkend="_loop__proto__to__cxx_8cpp_source_1l00152">152</link> of file <link linkend="_loop__proto__to__cxx_8cpp_source">loop_proto_to_cxx.cpp</link>.</para>
<programlisting>00152 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00153 &#32;&#32;LoopFunction&#32;message;
00154 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!message.ParsePartialFromArray(data,&#32;size))
00155 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="stringliteral">&quot;#error&#32;invalid&#32;proto\n&quot;</emphasis>;
00156 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang__fuzzer_1a944a037574154e7dedf0c719e2a4baf7">LoopFunctionToString</link>(message);
00157 }
</programlisting><para>
References <link linkend="_loop__proto__to__cxx_8cpp_source_1l00147">LoopFunctionToString()</link>.</para>
<para>
Referenced by <link linkend="_loop__proto__to__cxx__main_8cpp_source_1l00021">main()</link>.</para>
    </section><anchor xml:id="_namespaceclang__fuzzer_1af604fc28b812e241cd6abfebaedc4797"/>    <section>
    <title>LoopProtoToLLVM()</title>
<indexterm><primary>LoopProtoToLLVM</primary><secondary>clang_fuzzer</secondary></indexterm>
<indexterm><primary>clang_fuzzer</primary><secondary>LoopProtoToLLVM</secondary></indexterm>
<para><computeroutput>std::string clang_fuzzer::LoopProtoToLLVM (const uint8_t * data, size_t size)</computeroutput></para><para>
Definition at line <link linkend="_loop__proto__to__llvm_8cpp_source_1l00202">202</link> of file <link linkend="_loop__proto__to__llvm_8cpp_source">loop_proto_to_llvm.cpp</link>.</para>
<programlisting>00202 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00203 &#32;&#32;LoopFunction&#32;message;
00204 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!message.ParsePartialFromArray(data,&#32;size))
00205 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="stringliteral">&quot;#error&#32;invalid&#32;proto\n&quot;</emphasis>;
00206 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang__fuzzer_1a35ef2ec34abd6c5c09fcf55180046986">LoopFunctionToLLVMString</link>(message);
00207 }
</programlisting><para>
References <link linkend="_loop__proto__to__llvm_8cpp_source_1l00197">LoopFunctionToLLVMString()</link>.</para>
<para>
Referenced by <link linkend="_loop__proto__to__llvm__main_8cpp_source_1l00021">main()</link>.</para>
    </section><anchor xml:id="_namespaceclang__fuzzer_1a1de27ebdd8a199c6bdbb5a195631f553"/>    <section>
    <title>NestedLoopToString()</title>
<indexterm><primary>NestedLoopToString</primary><secondary>clang_fuzzer</secondary></indexterm>
<indexterm><primary>clang_fuzzer</primary><secondary>NestedLoopToString</secondary></indexterm>
<para><computeroutput>void clang_fuzzer::NestedLoopToString (std::ostream &amp; os, const LoopFunction &amp; x)</computeroutput></para><para>
Definition at line <link linkend="_loop__proto__to__cxx_8cpp_source_1l00122">122</link> of file <link linkend="_loop__proto__to__cxx_8cpp_source">loop_proto_to_cxx.cpp</link>.</para>
<programlisting>00122 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00123 &#32;&#32;os&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;void&#32;foo(int&#32;*a,&#32;int&#32;*b,&#32;int&#32;*__restrict__&#32;c,&#32;size_t&#32;s)&#32;{\n&quot;</emphasis>
00124 &#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;for&#32;(int&#32;i=0;&#32;i&lt;s;&#32;i++){\n&quot;</emphasis>
00125 &#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;for&#32;(int&#32;j=0;&#32;j&lt;s;&#32;j++){\n&quot;</emphasis>;
00126 &#32;&#32;{
00127 &#32;&#32;&#32;&#32;InnerLoop&#32;IL;
00128 &#32;&#32;&#32;&#32;os&#32;&lt;&lt;&#32;x.inner_statements()&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;}\n&quot;</emphasis>;
00129 &#32;&#32;}
00130 &#32;&#32;os&#32;&lt;&lt;&#32;x.outer_statements()&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;}\n}\n&quot;</emphasis>;
00131 }
</programlisting><para>
Referenced by <link linkend="_loop__proto__to__cxx_8cpp_source_1l00137">operator&lt;&lt;()</link>.</para>
    </section><anchor xml:id="_namespaceclang__fuzzer_1adefdaecdbb1de92f0eeba7640b89685b"/>    <section>
    <title>operator&lt;&lt;()<computeroutput>[1/12]</computeroutput></title>
<indexterm><primary>operator&lt;&lt;</primary><secondary>clang_fuzzer</secondary></indexterm>
<indexterm><primary>clang_fuzzer</primary><secondary>operator&lt;&lt;</secondary></indexterm>
<para><computeroutput>std::ostream &amp; clang_fuzzer::operator&lt;&lt; (std::ostream &amp; os, const AssignmentStatement &amp; x)</computeroutput></para><para>
Definition at line <link linkend="_loop__proto__to__cxx_8cpp_source_1l00111">111</link> of file <link linkend="_loop__proto__to__cxx_8cpp_source">loop_proto_to_cxx.cpp</link>.</para>
<programlisting>00111 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00112 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;os&#32;&lt;&lt;&#32;x.varref()&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;=&quot;</emphasis>&#32;&lt;&lt;&#32;x.rvalue()&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;;\n&quot;</emphasis>;
00113 }
</programlisting>    </section><anchor xml:id="_namespaceclang__fuzzer_1a999bc51b48e947b0f7feb714749b0a21"/>    <section>
    <title>operator&lt;&lt;()<computeroutput>[2/12]</computeroutput></title>
<indexterm><primary>operator&lt;&lt;</primary><secondary>clang_fuzzer</secondary></indexterm>
<indexterm><primary>clang_fuzzer</primary><secondary>operator&lt;&lt;</secondary></indexterm>
<para><computeroutput>std::ostream &amp; clang_fuzzer::operator&lt;&lt; (std::ostream &amp; os, const BinaryOp &amp; x)</computeroutput></para><para>
Definition at line <link linkend="_loop__proto__to__cxx_8cpp_source_1l00069">69</link> of file <link linkend="_loop__proto__to__cxx_8cpp_source">loop_proto_to_cxx.cpp</link>.</para>
<programlisting>00069 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00070 &#32;&#32;os&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;(&quot;</emphasis>&#32;&lt;&lt;&#32;x.left();
00071 &#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(x.op())&#32;{
00072 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;BinaryOp::PLUS:
00073 &#32;&#32;&#32;&#32;os&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;+&quot;</emphasis>;
00074 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
00075 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;BinaryOp::MINUS:
00076 &#32;&#32;&#32;&#32;os&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;-&quot;</emphasis>;
00077 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
00078 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;BinaryOp::MUL:
00079 &#32;&#32;&#32;&#32;os&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;*&quot;</emphasis>;
00080 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
00081 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;BinaryOp::XOR:
00082 &#32;&#32;&#32;&#32;os&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;^&quot;</emphasis>;
00083 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
00084 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;BinaryOp::AND:
00085 &#32;&#32;&#32;&#32;os&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&amp;&quot;</emphasis>;
00086 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
00087 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;BinaryOp::OR:
00088 &#32;&#32;&#32;&#32;os&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;|&quot;</emphasis>;
00089 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
00090 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;BinaryOp::EQ:
00091 &#32;&#32;&#32;&#32;os&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;==&quot;</emphasis>;
00092 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
00093 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;BinaryOp::NE:
00094 &#32;&#32;&#32;&#32;os&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;!=&quot;</emphasis>;
00095 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
00096 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;BinaryOp::LE:
00097 &#32;&#32;&#32;&#32;os&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&lt;=&quot;</emphasis>;
00098 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
00099 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;BinaryOp::GE:
00100 &#32;&#32;&#32;&#32;os&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&gt;=&quot;</emphasis>;
00101 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
00102 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;BinaryOp::LT:
00103 &#32;&#32;&#32;&#32;os&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&lt;&quot;</emphasis>;
00104 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
00105 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;BinaryOp::GT:
00106 &#32;&#32;&#32;&#32;os&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&gt;&quot;</emphasis>;
00107 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
00108 &#32;&#32;}
00109 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;os&#32;&lt;&lt;&#32;x.right()&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;)&quot;</emphasis>;
00110 }
</programlisting>    </section><anchor xml:id="_namespaceclang__fuzzer_1ac8954993cdf896f3a8247559fcd1c198"/>    <section>
    <title>operator&lt;&lt;()<computeroutput>[3/12]</computeroutput></title>
<indexterm><primary>operator&lt;&lt;</primary><secondary>clang_fuzzer</secondary></indexterm>
<indexterm><primary>clang_fuzzer</primary><secondary>operator&lt;&lt;</secondary></indexterm>
<para><computeroutput>std::ostream &amp; clang_fuzzer::operator&lt;&lt; (std::ostream &amp; os, const Const &amp; x)</computeroutput></para><para>
Definition at line <link linkend="_loop__proto__to__cxx_8cpp_source_1l00046">46</link> of file <link linkend="_loop__proto__to__cxx_8cpp_source">loop_proto_to_cxx.cpp</link>.</para>
<programlisting>00046 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00047 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;os&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;(&quot;</emphasis>&#32;&lt;&lt;&#32;x.val()&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;)&quot;</emphasis>;
00048 }
</programlisting>    </section><anchor xml:id="_namespaceclang__fuzzer_1adf345027d196651169672de25a74af76"/>    <section>
    <title>operator&lt;&lt;()<computeroutput>[4/12]</computeroutput></title>
<indexterm><primary>operator&lt;&lt;</primary><secondary>clang_fuzzer</secondary></indexterm>
<indexterm><primary>clang_fuzzer</primary><secondary>operator&lt;&lt;</secondary></indexterm>
<para><computeroutput>std::ostream&amp; clang_fuzzer::operator&lt;&lt; (std::ostream &amp; os, const Function &amp; x)</computeroutput></para><para>
Definition at line <link linkend="_proto__to__cxx_8cpp_source_1l00082">82</link> of file <link linkend="_proto__to__cxx_8cpp_source">proto_to_cxx.cpp</link>.</para>
<programlisting>00082 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00083 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;os&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;void&#32;foo(int&#32;*a)&#32;{\n&quot;</emphasis>&#32;&lt;&lt;&#32;x.statements()&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;}\n&quot;</emphasis>;
00084 }
</programlisting>    </section><anchor xml:id="_namespaceclang__fuzzer_1ae4bbba2bc2bf5451263da160878864db"/>    <section>
    <title>operator&lt;&lt;()<computeroutput>[5/12]</computeroutput></title>
<indexterm><primary>operator&lt;&lt;</primary><secondary>clang_fuzzer</secondary></indexterm>
<indexterm><primary>clang_fuzzer</primary><secondary>operator&lt;&lt;</secondary></indexterm>
<para><computeroutput>std::ostream&amp; clang_fuzzer::operator&lt;&lt; (std::ostream &amp; os, const IfElse &amp; x)</computeroutput></para><para>
Definition at line <link linkend="_proto__to__cxx_8cpp_source_1l00064">64</link> of file <link linkend="_proto__to__cxx_8cpp_source">proto_to_cxx.cpp</link>.</para>
<programlisting>00064 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00065 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;os&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;if&#32;(&quot;</emphasis>&#32;&lt;&lt;&#32;x.cond()&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;){\n&quot;</emphasis>
00066 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;x.if_body()&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;}&#32;else&#32;{&#32;\n&quot;</emphasis>
00067 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;x.else_body()&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;}\n&quot;</emphasis>;
00068 }
</programlisting>    </section><anchor xml:id="_namespaceclang__fuzzer_1a52282fc06ac9b7761f21d2588974776a"/>    <section>
    <title>operator&lt;&lt;()<computeroutput>[6/12]</computeroutput></title>
<indexterm><primary>operator&lt;&lt;</primary><secondary>clang_fuzzer</secondary></indexterm>
<indexterm><primary>clang_fuzzer</primary><secondary>operator&lt;&lt;</secondary></indexterm>
<para><computeroutput>std::ostream &amp; clang_fuzzer::operator&lt;&lt; (std::ostream &amp; os, const LoopFunction &amp; x)</computeroutput></para><para>
Definition at line <link linkend="_loop__proto__to__cxx_8cpp_source_1l00137">137</link> of file <link linkend="_loop__proto__to__cxx_8cpp_source">loop_proto_to_cxx.cpp</link>.</para>
<programlisting>00137 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00138 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(x.has_inner_statements())
00139 &#32;&#32;&#32;&#32;<link linkend="_namespaceclang__fuzzer_1a1de27ebdd8a199c6bdbb5a195631f553">NestedLoopToString</link>(os,&#32;x);
00140 &#32;&#32;<emphasis role="keywordflow">else</emphasis>
00141 &#32;&#32;&#32;&#32;<link linkend="_namespaceclang__fuzzer_1acecea2c5371f615b84065480211f1374">SingleLoopToString</link>(os,&#32;x);
00142 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;os;
00143 }
</programlisting><para>
References <link linkend="_loop__proto__to__cxx_8cpp_source_1l00122">NestedLoopToString()</link>, and <link linkend="_loop__proto__to__cxx_8cpp_source_1l00132">SingleLoopToString()</link>.</para>
    </section><anchor xml:id="_namespaceclang__fuzzer_1a01009d2095a220beb7297b772b95ce61"/>    <section>
    <title>operator&lt;&lt;()<computeroutput>[7/12]</computeroutput></title>
<indexterm><primary>operator&lt;&lt;</primary><secondary>clang_fuzzer</secondary></indexterm>
<indexterm><primary>clang_fuzzer</primary><secondary>operator&lt;&lt;</secondary></indexterm>
<para><computeroutput>std::ostream&amp; clang_fuzzer::operator&lt;&lt; (std::ostream &amp; os, const Lvalue &amp; x)</computeroutput></para><para>
Definition at line <link linkend="_proto__to__cxx_8cpp_source_1l00032">32</link> of file <link linkend="_proto__to__cxx_8cpp_source">proto_to_cxx.cpp</link>.</para>
<programlisting>00032 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00033 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;os&#32;&lt;&lt;&#32;x.varref();
00034 }
</programlisting>    </section><anchor xml:id="_namespaceclang__fuzzer_1a2375d76e387c15285dda8d15dad36f0e"/>    <section>
    <title>operator&lt;&lt;()<computeroutput>[8/12]</computeroutput></title>
<indexterm><primary>operator&lt;&lt;</primary><secondary>clang_fuzzer</secondary></indexterm>
<indexterm><primary>clang_fuzzer</primary><secondary>operator&lt;&lt;</secondary></indexterm>
<para><computeroutput>std::ostream &amp; clang_fuzzer::operator&lt;&lt; (std::ostream &amp; os, const Rvalue &amp; x)</computeroutput></para><para>
Definition at line <link linkend="_loop__proto__to__cxx_8cpp_source_1l00060">60</link> of file <link linkend="_loop__proto__to__cxx_8cpp_source">loop_proto_to_cxx.cpp</link>.</para>
<programlisting>00060 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00061 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(x.has_cons())
00062 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;os&#32;&lt;&lt;&#32;x.cons();
00063 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(x.has_binop())
00064 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;os&#32;&lt;&lt;&#32;x.binop();
00065 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(x.has_varref())
00066 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;os&#32;&lt;&lt;&#32;x.varref();
00067 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;os&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;1&quot;</emphasis>;
00068 }
</programlisting>    </section><anchor xml:id="_namespaceclang__fuzzer_1ac90ec7b7ecf1e1ead9595d1a983f022d"/>    <section>
    <title>operator&lt;&lt;()<computeroutput>[9/12]</computeroutput></title>
<indexterm><primary>operator&lt;&lt;</primary><secondary>clang_fuzzer</secondary></indexterm>
<indexterm><primary>clang_fuzzer</primary><secondary>operator&lt;&lt;</secondary></indexterm>
<para><computeroutput>std::ostream &amp; clang_fuzzer::operator&lt;&lt; (std::ostream &amp; os, const Statement &amp; x)</computeroutput></para><para>
Definition at line <link linkend="_loop__proto__to__cxx_8cpp_source_1l00114">114</link> of file <link linkend="_loop__proto__to__cxx_8cpp_source">loop_proto_to_cxx.cpp</link>.</para>
<programlisting>00114 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00115 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;os&#32;&lt;&lt;&#32;x.assignment();
00116 }
</programlisting>    </section><anchor xml:id="_namespaceclang__fuzzer_1aed1d352356cde87e890c29c8c4d67395"/>    <section>
    <title>operator&lt;&lt;()<computeroutput>[10/12]</computeroutput></title>
<indexterm><primary>operator&lt;&lt;</primary><secondary>clang_fuzzer</secondary></indexterm>
<indexterm><primary>clang_fuzzer</primary><secondary>operator&lt;&lt;</secondary></indexterm>
<para><computeroutput>std::ostream &amp; clang_fuzzer::operator&lt;&lt; (std::ostream &amp; os, const StatementSeq &amp; x)</computeroutput></para><para>
Definition at line <link linkend="_loop__proto__to__cxx_8cpp_source_1l00117">117</link> of file <link linkend="_loop__proto__to__cxx_8cpp_source">loop_proto_to_cxx.cpp</link>.</para>
<programlisting>00117 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00118 &#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">auto</emphasis>&#32;&amp;st&#32;:&#32;x.statements())
00119 &#32;&#32;&#32;&#32;os&#32;&lt;&lt;&#32;st;
00120 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;os;
00121 }
</programlisting>    </section><anchor xml:id="_namespaceclang__fuzzer_1a495bf005e5556e5d7428afadce257135"/>    <section>
    <title>operator&lt;&lt;()<computeroutput>[11/12]</computeroutput></title>
<indexterm><primary>operator&lt;&lt;</primary><secondary>clang_fuzzer</secondary></indexterm>
<indexterm><primary>clang_fuzzer</primary><secondary>operator&lt;&lt;</secondary></indexterm>
<para><computeroutput>std::ostream &amp; clang_fuzzer::operator&lt;&lt; (std::ostream &amp; os, const VarRef &amp; x)</computeroutput></para><para>
Definition at line <link linkend="_loop__proto__to__cxx_8cpp_source_1l00049">49</link> of file <link linkend="_loop__proto__to__cxx_8cpp_source">loop_proto_to_cxx.cpp</link>.</para>
<programlisting>00049 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00050 &#32;&#32;std::string&#32;which_loop&#32;=&#32;inner_loop&#32;?&#32;<emphasis role="stringliteral">&quot;j&quot;</emphasis>&#32;:&#32;<emphasis role="stringliteral">&quot;i&quot;</emphasis>;
00051 &#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(x.arr())&#32;{
00052 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;VarRef::ARR_A:
00053 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;os&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;a[&quot;</emphasis>&#32;&lt;&lt;&#32;which_loop&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;]&quot;</emphasis>;
00054 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;VarRef::ARR_B:
00055 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;os&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;b[&quot;</emphasis>&#32;&lt;&lt;&#32;which_loop&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;]&quot;</emphasis>;
00056 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;VarRef::ARR_C:
00057 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;os&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;c[&quot;</emphasis>&#32;&lt;&lt;&#32;which_loop&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;]&quot;</emphasis>;
00058 &#32;&#32;}
00059 }
</programlisting>    </section><anchor xml:id="_namespaceclang__fuzzer_1a193185d5a2a899c1bc864a43049acc79"/>    <section>
    <title>operator&lt;&lt;()<computeroutput>[12/12]</computeroutput></title>
<indexterm><primary>operator&lt;&lt;</primary><secondary>clang_fuzzer</secondary></indexterm>
<indexterm><primary>clang_fuzzer</primary><secondary>operator&lt;&lt;</secondary></indexterm>
<para><computeroutput>std::ostream&amp; clang_fuzzer::operator&lt;&lt; (std::ostream &amp; os, const While &amp; x)</computeroutput></para><para>
Definition at line <link linkend="_proto__to__cxx_8cpp_source_1l00069">69</link> of file <link linkend="_proto__to__cxx_8cpp_source">proto_to_cxx.cpp</link>.</para>
<programlisting>00069 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00070 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;os&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;while&#32;(&quot;</emphasis>&#32;&lt;&lt;&#32;x.cond()&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;){\n&quot;</emphasis>&#32;&lt;&lt;&#32;x.body()&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;}\n&quot;</emphasis>;
00071 }
</programlisting>    </section><anchor xml:id="_namespaceclang__fuzzer_1aaf890a8f29ccba77145453c91cad912e"/>    <section>
    <title>ProtoToCxx()</title>
<indexterm><primary>ProtoToCxx</primary><secondary>clang_fuzzer</secondary></indexterm>
<indexterm><primary>clang_fuzzer</primary><secondary>ProtoToCxx</secondary></indexterm>
<para><computeroutput>std::string clang_fuzzer::ProtoToCxx (const uint8_t * data, size_t size)</computeroutput></para><para>
Definition at line <link linkend="_proto__to__cxx_8cpp_source_1l00094">94</link> of file <link linkend="_proto__to__cxx_8cpp_source">proto_to_cxx.cpp</link>.</para>
<programlisting>00094 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00095 &#32;&#32;Function&#32;message;
00096 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!message.ParsePartialFromArray(data,&#32;size))
00097 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="stringliteral">&quot;#error&#32;invalid&#32;proto\n&quot;</emphasis>;
00098 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang__fuzzer_1a664b8472985d2ee4f34c16b89b02cc90">FunctionToString</link>(message);
00099 }
</programlisting><para>
References <link linkend="_proto__to__cxx_8cpp_source_1l00088">FunctionToString()</link>.</para>
<para>
Referenced by <link linkend="_proto__to__cxx__main_8cpp_source_1l00019">main()</link>.</para>
    </section><anchor xml:id="_namespaceclang__fuzzer_1af95d943f747b8628a4981aec82abb9d8"/>    <section>
    <title>RvalueToString()</title>
<indexterm><primary>RvalueToString</primary><secondary>clang_fuzzer</secondary></indexterm>
<indexterm><primary>clang_fuzzer</primary><secondary>RvalueToString</secondary></indexterm>
<para><computeroutput>std::string clang_fuzzer::RvalueToString (std::ostream &amp; os, const Rvalue &amp; x)</computeroutput></para><para>
Definition at line <link linkend="_loop__proto__to__llvm_8cpp_source_1l00073">73</link> of file <link linkend="_loop__proto__to__llvm_8cpp_source">loop_proto_to_llvm.cpp</link>.</para>
<programlisting>00073 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00074 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(x.has_cons())
00075 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang__fuzzer_1a4286ea62a31f17f2f81fdbe82e84d30e">ConstToString</link>(x.cons());
00076 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(x.has_binop())
00077 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang__fuzzer_1a2a135ddb6bd40169f7f809210bded8b3">BinopToString</link>(os,&#32;x.binop());
00078 &#32;&#32;<emphasis role="keywordflow">if</emphasis>(x.has_varref())&#32;{
00079 &#32;&#32;&#32;&#32;std::string&#32;var_ref&#32;=&#32;<link linkend="_namespaceclang__fuzzer_1a42168c5369d315d97d112481cedf9e5a">VarRefToString</link>(os,&#32;x.varref());
00080 &#32;&#32;&#32;&#32;std::string&#32;val_var&#32;=&#32;get_var();
00081 &#32;&#32;&#32;&#32;os&#32;&lt;&lt;&#32;val_var&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;=&#32;load&#32;i32,&#32;i32*&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;var_ref&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;\n&quot;</emphasis>;
00082 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;val_var;
00083 &#32;&#32;}
00084 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="stringliteral">&quot;1&quot;</emphasis>;
00085 
00086 }
</programlisting><para>
References <link linkend="_loop__proto__to__llvm_8cpp_source_1l00087">BinopToString()</link>, <link linkend="_loop__proto__to__llvm_8cpp_source_1l00051">ConstToString()</link>, and <link linkend="_loop__proto__to__llvm_8cpp_source_1l00054">VarRefToString()</link>.</para>
<para>
Referenced by <link linkend="_loop__proto__to__llvm_8cpp_source_1l00087">BinopToString()</link>.</para>
    </section><anchor xml:id="_namespaceclang__fuzzer_1acecea2c5371f615b84065480211f1374"/>    <section>
    <title>SingleLoopToString()</title>
<indexterm><primary>SingleLoopToString</primary><secondary>clang_fuzzer</secondary></indexterm>
<indexterm><primary>clang_fuzzer</primary><secondary>SingleLoopToString</secondary></indexterm>
<para><computeroutput>void clang_fuzzer::SingleLoopToString (std::ostream &amp; os, const LoopFunction &amp; x)</computeroutput></para><para>
Definition at line <link linkend="_loop__proto__to__cxx_8cpp_source_1l00132">132</link> of file <link linkend="_loop__proto__to__cxx_8cpp_source">loop_proto_to_cxx.cpp</link>.</para>
<programlisting>00132 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00133 &#32;&#32;os&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;void&#32;foo(int&#32;*a,&#32;int&#32;*b,&#32;int&#32;*__restrict__&#32;c,&#32;size_t&#32;s)&#32;{\n&quot;</emphasis>
00134 &#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;for&#32;(int&#32;i=0;&#32;i&lt;s;&#32;i++){\n&quot;</emphasis>
00135 &#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;x.outer_statements()&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;}\n}\n&quot;</emphasis>;
00136 }
</programlisting><para>
Referenced by <link linkend="_loop__proto__to__cxx_8cpp_source_1l00137">operator&lt;&lt;()</link>.</para>
    </section><anchor xml:id="_namespaceclang__fuzzer_1aa61cc7ac7e7f548b02f20fdbdd5aedc3"/>    <section>
    <title>StateSeqToString()</title>
<indexterm><primary>StateSeqToString</primary><secondary>clang_fuzzer</secondary></indexterm>
<indexterm><primary>clang_fuzzer</primary><secondary>StateSeqToString</secondary></indexterm>
<para><computeroutput>std::string clang_fuzzer::StateSeqToString (std::ostream &amp; os, const StatementSeq &amp; x)</computeroutput></para>    </section><anchor xml:id="_namespaceclang__fuzzer_1a42168c5369d315d97d112481cedf9e5a"/>    <section>
    <title>VarRefToString()</title>
<indexterm><primary>VarRefToString</primary><secondary>clang_fuzzer</secondary></indexterm>
<indexterm><primary>clang_fuzzer</primary><secondary>VarRefToString</secondary></indexterm>
<para><computeroutput>std::string clang_fuzzer::VarRefToString (std::ostream &amp; os, const VarRef &amp; x)</computeroutput></para><para>
Definition at line <link linkend="_loop__proto__to__llvm_8cpp_source_1l00054">54</link> of file <link linkend="_loop__proto__to__llvm_8cpp_source">loop_proto_to_llvm.cpp</link>.</para>
<programlisting>00054 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00055 &#32;&#32;std::string&#32;which_loop&#32;=&#32;inner_loop&#32;?&#32;<emphasis role="stringliteral">&quot;inner&quot;</emphasis>&#32;:&#32;<emphasis role="stringliteral">&quot;outer&quot;</emphasis>;
00056 &#32;&#32;std::string&#32;arr;
00057 &#32;&#32;<emphasis role="keywordflow">switch</emphasis>(x.arr())&#32;{
00058 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;VarRef::ARR_A:
00059 &#32;&#32;&#32;&#32;arr&#32;=&#32;<emphasis role="stringliteral">&quot;%a&quot;</emphasis>;
00060 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
00061 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;VarRef::ARR_B:
00062 &#32;&#32;&#32;&#32;arr&#32;=&#32;<emphasis role="stringliteral">&quot;%b&quot;</emphasis>;
00063 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
00064 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;VarRef::ARR_C:
00065 &#32;&#32;&#32;&#32;arr&#32;=&#32;<emphasis role="stringliteral">&quot;%c&quot;</emphasis>;
00066 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
00067 &#32;&#32;}
00068 &#32;&#32;std::string&#32;ptr_var&#32;=&#32;get_var();
00069 &#32;&#32;os&#32;&lt;&lt;&#32;ptr_var&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;=&#32;getelementptr&#32;inbounds&#32;i32,&#32;i32*&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;arr
00070 &#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;,&#32;i64&#32;%&quot;</emphasis>&#32;&lt;&lt;&#32;which_loop&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;_ct\n&quot;</emphasis>;
00071 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;ptr_var;
00072 }
</programlisting><para>
Referenced by <link linkend="_loop__proto__to__llvm_8cpp_source_1l00073">RvalueToString()</link>.</para>
</section>
</section>
</section>
