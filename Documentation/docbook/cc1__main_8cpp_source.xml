<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_cc1__main_8cpp_source" xml:lang="en-US">
<title>cc1_main.cpp</title>
<indexterm><primary>/Users/maximilian/clang-llvm/clang/tools/driver/cc1_main.cpp</primary></indexterm>
<programlisting>00001 <emphasis role="comment">//===--&#32;cc1_main.cpp&#32;-&#32;Clang&#32;CC1&#32;Compiler&#32;Frontend&#32;------------------------===//</emphasis>
00002 <emphasis role="comment">//</emphasis>
00003 <emphasis role="comment">//&#32;Part&#32;of&#32;the&#32;LLVM&#32;Project,&#32;under&#32;the&#32;Apache&#32;License&#32;v2.0&#32;with&#32;LLVM&#32;Exceptions.</emphasis>
00004 <emphasis role="comment">//&#32;See&#32;https://llvm.org/LICENSE.txt&#32;for&#32;license&#32;information.</emphasis>
00005 <emphasis role="comment">//&#32;SPDX-License-Identifier:&#32;Apache-2.0&#32;WITH&#32;LLVM-exception</emphasis>
00006 <emphasis role="comment">//</emphasis>
00007 <emphasis role="comment">//===----------------------------------------------------------------------===//</emphasis>
00008 <emphasis role="comment">//</emphasis>
00009 <emphasis role="comment">//&#32;This&#32;is&#32;the&#32;entry&#32;point&#32;to&#32;the&#32;clang&#32;-cc1&#32;functionality,&#32;which&#32;implements&#32;the</emphasis>
00010 <emphasis role="comment">//&#32;core&#32;compiler&#32;functionality&#32;along&#32;with&#32;a&#32;number&#32;of&#32;additional&#32;tools&#32;for</emphasis>
00011 <emphasis role="comment">//&#32;demonstration&#32;and&#32;testing&#32;purposes.</emphasis>
00012 <emphasis role="comment">//</emphasis>
00013 <emphasis role="comment">//===----------------------------------------------------------------------===//</emphasis>
00014 
00015 <emphasis role="preprocessor">#include&#32;&quot;clang/Basic/Stack.h&quot;</emphasis>
00016 <emphasis role="preprocessor">#include&#32;&quot;clang/Basic/TargetOptions.h&quot;</emphasis>
00017 <emphasis role="preprocessor">#include&#32;&quot;clang/CodeGen/ObjectFilePCHContainerOperations.h&quot;</emphasis>
00018 <emphasis role="preprocessor">#include&#32;&quot;clang/Config/config.h&quot;</emphasis>
00019 <emphasis role="preprocessor">#include&#32;&quot;clang/Driver/DriverDiagnostic.h&quot;</emphasis>
00020 <emphasis role="preprocessor">#include&#32;&quot;clang/Driver/Options.h&quot;</emphasis>
00021 <emphasis role="preprocessor">#include&#32;&quot;clang/Frontend/CompilerInstance.h&quot;</emphasis>
00022 <emphasis role="preprocessor">#include&#32;&quot;clang/Frontend/CompilerInvocation.h&quot;</emphasis>
00023 <emphasis role="preprocessor">#include&#32;&quot;clang/Frontend/FrontendDiagnostic.h&quot;</emphasis>
00024 <emphasis role="preprocessor">#include&#32;&quot;clang/Frontend/TextDiagnosticBuffer.h&quot;</emphasis>
00025 <emphasis role="preprocessor">#include&#32;&quot;clang/Frontend/TextDiagnosticPrinter.h&quot;</emphasis>
00026 <emphasis role="preprocessor">#include&#32;&quot;clang/Frontend/Utils.h&quot;</emphasis>
00027 <emphasis role="preprocessor">#include&#32;&quot;clang/FrontendTool/Utils.h&quot;</emphasis>
00028 <emphasis role="preprocessor">#include&#32;&quot;llvm/ADT/Statistic.h&quot;</emphasis>
00029 <emphasis role="preprocessor">#include&#32;&quot;llvm/Config/llvm-config.h&quot;</emphasis>
00030 <emphasis role="preprocessor">#include&#32;&quot;llvm/LinkAllPasses.h&quot;</emphasis>
00031 <emphasis role="preprocessor">#include&#32;&quot;llvm/Option/Arg.h&quot;</emphasis>
00032 <emphasis role="preprocessor">#include&#32;&quot;llvm/Option/ArgList.h&quot;</emphasis>
00033 <emphasis role="preprocessor">#include&#32;&quot;llvm/Option/OptTable.h&quot;</emphasis>
00034 <emphasis role="preprocessor">#include&#32;&quot;llvm/Support/BuryPointer.h&quot;</emphasis>
00035 <emphasis role="preprocessor">#include&#32;&quot;llvm/Support/Compiler.h&quot;</emphasis>
00036 <emphasis role="preprocessor">#include&#32;&quot;llvm/Support/ErrorHandling.h&quot;</emphasis>
00037 <emphasis role="preprocessor">#include&#32;&quot;llvm/Support/ManagedStatic.h&quot;</emphasis>
00038 <emphasis role="preprocessor">#include&#32;&quot;llvm/Support/Path.h&quot;</emphasis>
00039 <emphasis role="preprocessor">#include&#32;&quot;llvm/Support/Process.h&quot;</emphasis>
00040 <emphasis role="preprocessor">#include&#32;&quot;llvm/Support/Signals.h&quot;</emphasis>
00041 <emphasis role="preprocessor">#include&#32;&quot;llvm/Support/TargetRegistry.h&quot;</emphasis>
00042 <emphasis role="preprocessor">#include&#32;&quot;llvm/Support/TargetSelect.h&quot;</emphasis>
00043 <emphasis role="preprocessor">#include&#32;&quot;llvm/Support/TimeProfiler.h&quot;</emphasis>
00044 <emphasis role="preprocessor">#include&#32;&quot;llvm/Support/Timer.h&quot;</emphasis>
00045 <emphasis role="preprocessor">#include&#32;&quot;llvm/Support/raw_ostream.h&quot;</emphasis>
00046 <emphasis role="preprocessor">#include&#32;&quot;llvm/Target/TargetMachine.h&quot;</emphasis>
00047 <emphasis role="preprocessor">#include&#32;&lt;cstdio&gt;</emphasis>
00048 
00049 <emphasis role="preprocessor">#ifdef&#32;CLANG_HAVE_RLIMITS</emphasis>
00050 <emphasis role="preprocessor">#include&#32;&lt;sys/resource.h&gt;</emphasis>
00051 <emphasis role="preprocessor">#endif</emphasis>
00052 
00053 <emphasis role="keyword">using&#32;namespace&#32;</emphasis><link linkend="_namespaceclang">clang</link>;
00054 <emphasis role="keyword">using&#32;namespace&#32;</emphasis>llvm::opt;
00055 
00056 <emphasis role="comment">//===----------------------------------------------------------------------===//</emphasis>
00057 <emphasis role="comment">//&#32;Main&#32;driver</emphasis>
00058 <emphasis role="comment">//===----------------------------------------------------------------------===//</emphasis>
00059 
00060 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;LLVMErrorHandler(<emphasis role="keywordtype">void</emphasis>&#32;*UserData,&#32;<emphasis role="keyword">const</emphasis>&#32;std::string&#32;&amp;Message,
00061 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;GenCrashDiag)&#32;{
00062 &#32;&#32;DiagnosticsEngine&#32;&amp;Diags&#32;=&#32;*<emphasis role="keyword">static_cast&lt;</emphasis>DiagnosticsEngine*<emphasis role="keyword">&gt;</emphasis>(UserData);
00063 
00064 &#32;&#32;Diags.Report(diag::err_fe_error_backend)&#32;&lt;&lt;&#32;Message;
00065 
00066 &#32;&#32;<emphasis role="comment">//&#32;Run&#32;the&#32;interrupt&#32;handlers&#32;to&#32;make&#32;sure&#32;any&#32;special&#32;cleanups&#32;get&#32;done,&#32;in</emphasis>
00067 &#32;&#32;<emphasis role="comment">//&#32;particular&#32;that&#32;we&#32;remove&#32;files&#32;registered&#32;with&#32;RemoveFileOnSignal.</emphasis>
00068 &#32;&#32;llvm::sys::RunInterruptHandlers();
00069 
00070 &#32;&#32;<emphasis role="comment">//&#32;We&#32;cannot&#32;recover&#32;from&#32;llvm&#32;errors.&#32;&#32;When&#32;reporting&#32;a&#32;fatal&#32;error,&#32;exit</emphasis>
00071 &#32;&#32;<emphasis role="comment">//&#32;with&#32;status&#32;70&#32;to&#32;generate&#32;crash&#32;diagnostics.&#32;&#32;For&#32;BSD&#32;systems&#32;this&#32;is</emphasis>
00072 &#32;&#32;<emphasis role="comment">//&#32;defined&#32;as&#32;an&#32;internal&#32;software&#32;error.&#32;&#32;Otherwise,&#32;exit&#32;with&#32;status&#32;1.</emphasis>
00073 &#32;&#32;llvm::sys::Process::Exit(GenCrashDiag&#32;?&#32;70&#32;:&#32;1);
00074 }
00075 
00076 <emphasis role="preprocessor">#ifdef&#32;CLANG_HAVE_RLIMITS</emphasis>
00077 <emphasis role="preprocessor">#if&#32;defined(__linux__)&#32;&amp;&amp;&#32;defined(__PIE__)</emphasis>
00078 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;getCurrentStackAllocation()&#32;{
00079 &#32;&#32;<emphasis role="comment">//&#32;If&#32;we&#32;can&apos;t&#32;compute&#32;the&#32;current&#32;stack&#32;usage,&#32;allow&#32;for&#32;512K&#32;of&#32;command</emphasis>
00080 &#32;&#32;<emphasis role="comment">//&#32;line&#32;arguments&#32;and&#32;environment.</emphasis>
00081 &#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;Usage&#32;=&#32;512&#32;*&#32;1024;
00082 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(FILE&#32;*StatFile&#32;=&#32;fopen(<emphasis role="stringliteral">&quot;/proc/self/stat&quot;</emphasis>,&#32;<emphasis role="stringliteral">&quot;r&quot;</emphasis>))&#32;{
00083 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;We&#32;assume&#32;that&#32;the&#32;stack&#32;extends&#32;from&#32;its&#32;current&#32;address&#32;to&#32;the&#32;end&#32;of</emphasis>
00084 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;the&#32;environment&#32;space.&#32;In&#32;reality,&#32;there&#32;is&#32;another&#32;string&#32;literal&#32;(the</emphasis>
00085 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;program&#32;name)&#32;after&#32;the&#32;environment,&#32;but&#32;this&#32;is&#32;close&#32;enough&#32;(we&#32;only</emphasis>
00086 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;need&#32;to&#32;be&#32;within&#32;100K&#32;or&#32;so).</emphasis>
00087 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;StackPtr,&#32;EnvEnd;
00088 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Disable&#32;silly&#32;GCC&#32;-Wformat&#32;warning&#32;that&#32;complains&#32;about&#32;length</emphasis>
00089 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;modifiers&#32;on&#32;ignored&#32;format&#32;specifiers.&#32;We&#32;want&#32;to&#32;retain&#32;these</emphasis>
00090 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;for&#32;documentation&#32;purposes&#32;even&#32;though&#32;they&#32;have&#32;no&#32;effect.</emphasis>
00091 <emphasis role="preprocessor">#if&#32;defined(__GNUC__)&#32;&amp;&amp;&#32;!defined(__clang__)</emphasis>
00092 <emphasis role="preprocessor">#pragma&#32;GCC&#32;diagnostic&#32;push</emphasis>
00093 <emphasis role="preprocessor">#pragma&#32;GCC&#32;diagnostic&#32;ignored&#32;&quot;-Wformat&quot;</emphasis>
00094 <emphasis role="preprocessor">#endif</emphasis>
00095 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(fscanf(StatFile,
00096 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;%*d&#32;%*s&#32;%*c&#32;%*d&#32;%*d&#32;%*d&#32;%*d&#32;%*d&#32;%*u&#32;%*lu&#32;%*lu&#32;%*lu&#32;%*lu&#32;%*lu&#32;&quot;</emphasis>
00097 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;%*lu&#32;%*ld&#32;%*ld&#32;%*ld&#32;%*ld&#32;%*ld&#32;%*ld&#32;%*llu&#32;%*lu&#32;%*ld&#32;%*lu&#32;%*lu&#32;&quot;</emphasis>
00098 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;%*lu&#32;%*lu&#32;%lu&#32;%*lu&#32;%*lu&#32;%*lu&#32;%*lu&#32;%*lu&#32;%*llu&#32;%*lu&#32;%*lu&#32;%*d&#32;%*d&#32;&quot;</emphasis>
00099 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;%*u&#32;%*u&#32;%*llu&#32;%*lu&#32;%*ld&#32;%*lu&#32;%*lu&#32;%*lu&#32;%*lu&#32;%*lu&#32;%*lu&#32;%lu&#32;%*d&quot;</emphasis>,
00100 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;StackPtr,&#32;&amp;EnvEnd)&#32;==&#32;2)&#32;{
00101 <emphasis role="preprocessor">#if&#32;defined(__GNUC__)&#32;&amp;&amp;&#32;!defined(__clang__)</emphasis>
00102 <emphasis role="preprocessor">#pragma&#32;GCC&#32;diagnostic&#32;pop</emphasis>
00103 <emphasis role="preprocessor">#endif</emphasis>
00104 &#32;&#32;&#32;&#32;&#32;&#32;Usage&#32;=&#32;StackPtr&#32;&lt;&#32;EnvEnd&#32;?&#32;EnvEnd&#32;-&#32;StackPtr&#32;:&#32;StackPtr&#32;-&#32;EnvEnd;
00105 &#32;&#32;&#32;&#32;}
00106 &#32;&#32;&#32;&#32;fclose(StatFile);
00107 &#32;&#32;}
00108 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;Usage;
00109 }
00110 
00111 <emphasis role="preprocessor">#include&#32;&lt;alloca.h&gt;</emphasis>
00112 
00113 LLVM_ATTRIBUTE_NOINLINE
00114 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;ensureStackAddressSpace()&#32;{
00115 &#32;&#32;<emphasis role="comment">//&#32;Linux&#32;kernels&#32;prior&#32;to&#32;4.1&#32;will&#32;sometimes&#32;locate&#32;the&#32;heap&#32;of&#32;a&#32;PIE&#32;binary</emphasis>
00116 &#32;&#32;<emphasis role="comment">//&#32;relatively&#32;close&#32;to&#32;the&#32;stack&#32;(they&#32;are&#32;only&#32;guaranteed&#32;to&#32;be&#32;128MiB</emphasis>
00117 &#32;&#32;<emphasis role="comment">//&#32;apart).&#32;This&#32;results&#32;in&#32;crashes&#32;if&#32;we&#32;happen&#32;to&#32;heap-allocate&#32;more&#32;than</emphasis>
00118 &#32;&#32;<emphasis role="comment">//&#32;128MiB&#32;before&#32;we&#32;reach&#32;our&#32;stack&#32;high-water&#32;mark.</emphasis>
00119 &#32;&#32;<emphasis role="comment">//</emphasis>
00120 &#32;&#32;<emphasis role="comment">//&#32;To&#32;avoid&#32;these&#32;crashes,&#32;ensure&#32;that&#32;we&#32;have&#32;sufficient&#32;virtual&#32;memory</emphasis>
00121 &#32;&#32;<emphasis role="comment">//&#32;pages&#32;allocated&#32;before&#32;we&#32;start&#32;running.</emphasis>
00122 &#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;Curr&#32;=&#32;getCurrentStackAllocation();
00123 &#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;kTargetStack&#32;=&#32;DesiredStackSize&#32;-&#32;256&#32;*&#32;1024;
00124 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(Curr&#32;&lt;&#32;kTargetStack)&#32;{
00125 &#32;&#32;&#32;&#32;<emphasis role="keyword">volatile</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*<emphasis role="keyword">volatile</emphasis>&#32;Alloc&#32;=
00126 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keyword">volatile&#32;</emphasis><emphasis role="keywordtype">char</emphasis>&#32;*<emphasis role="keyword">&gt;</emphasis>(alloca(kTargetStack&#32;-&#32;Curr));
00127 &#32;&#32;&#32;&#32;Alloc[0]&#32;=&#32;0;
00128 &#32;&#32;&#32;&#32;Alloc[kTargetStack&#32;-&#32;Curr&#32;-&#32;1]&#32;=&#32;0;
00129 &#32;&#32;}
00130 }
00131 <emphasis role="preprocessor">#else</emphasis>
00132 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;ensureStackAddressSpace()&#32;{}
00133 <emphasis role="preprocessor">#endif</emphasis>
00134 
00136 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;ensureSufficientStack()&#32;{
00137 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>rlimit&#32;rlim;
00138 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(getrlimit(RLIMIT_STACK,&#32;&amp;rlim)&#32;!=&#32;0)
00139 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
00140 
00141 &#32;&#32;<emphasis role="comment">//&#32;Increase&#32;the&#32;soft&#32;stack&#32;limit&#32;to&#32;our&#32;desired&#32;level,&#32;if&#32;necessary&#32;and</emphasis>
00142 &#32;&#32;<emphasis role="comment">//&#32;possible.</emphasis>
00143 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(rlim.rlim_cur&#32;!=&#32;RLIM_INFINITY&#32;&amp;&amp;
00144 &#32;&#32;&#32;&#32;&#32;&#32;rlim.rlim_cur&#32;&lt;&#32;rlim_t(DesiredStackSize))&#32;{
00145 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Try&#32;to&#32;allocate&#32;sufficient&#32;stack.</emphasis>
00146 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(rlim.rlim_max&#32;==&#32;RLIM_INFINITY&#32;||
00147 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;rlim.rlim_max&#32;&gt;=&#32;rlim_t(DesiredStackSize))
00148 &#32;&#32;&#32;&#32;&#32;&#32;rlim.rlim_cur&#32;=&#32;DesiredStackSize;
00149 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(rlim.rlim_cur&#32;==&#32;rlim.rlim_max)
00150 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
00151 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
00152 &#32;&#32;&#32;&#32;&#32;&#32;rlim.rlim_cur&#32;=&#32;rlim.rlim_max;
00153 
00154 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(setrlimit(RLIMIT_STACK,&#32;&amp;rlim)&#32;!=&#32;0&#32;||
00155 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;rlim.rlim_cur&#32;!=&#32;DesiredStackSize)
00156 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
00157 &#32;&#32;}
00158 
00159 &#32;&#32;<emphasis role="comment">//&#32;We&#32;should&#32;now&#32;have&#32;a&#32;stack&#32;of&#32;size&#32;at&#32;least&#32;DesiredStackSize.&#32;Ensure</emphasis>
00160 &#32;&#32;<emphasis role="comment">//&#32;that&#32;we&#32;can&#32;actually&#32;use&#32;that&#32;much,&#32;if&#32;necessary.</emphasis>
00161 &#32;&#32;ensureStackAddressSpace();
00162 }
00163 <emphasis role="preprocessor">#else</emphasis>
00164 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;ensureSufficientStack()&#32;{}
00165 <emphasis role="preprocessor">#endif</emphasis>
00166 
00168 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;PrintSupportedCPUs(std::string&#32;TargetStr)&#32;{
00169 &#32;&#32;std::string&#32;Error;
00170 &#32;&#32;<emphasis role="keyword">const</emphasis>&#32;llvm::Target&#32;*TheTarget&#32;=
00171 &#32;&#32;&#32;&#32;&#32;&#32;llvm::TargetRegistry::lookupTarget(TargetStr,&#32;Error);
00172 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!TheTarget)&#32;{
00173 &#32;&#32;&#32;&#32;llvm::errs()&#32;&lt;&lt;&#32;Error;
00174 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;1;
00175 &#32;&#32;}
00176 
00177 &#32;&#32;<emphasis role="comment">//&#32;the&#32;target&#32;machine&#32;will&#32;handle&#32;the&#32;mcpu&#32;printing</emphasis>
00178 &#32;&#32;llvm::TargetOptions&#32;Options;
00179 &#32;&#32;std::unique_ptr&lt;llvm::TargetMachine&gt;&#32;TheTargetMachine(
00180 &#32;&#32;&#32;&#32;&#32;&#32;TheTarget-&gt;createTargetMachine(TargetStr,&#32;<emphasis role="stringliteral">&quot;&quot;</emphasis>,&#32;<emphasis role="stringliteral">&quot;+cpuhelp&quot;</emphasis>,&#32;Options,&#32;None));
00181 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
00182 }
00183 
<anchor xml:id="_cc1__main_8cpp_source_1l00184"/><link linkend="_cc1__main_8cpp_1a86ac52e41ae670905ca66a8bf1eb04b9">00184</link> <emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_cc1__main_8cpp_1a86ac52e41ae670905ca66a8bf1eb04b9">cc1_main</link>(ArrayRef&lt;const&#32;char&#32;*&gt;&#32;Argv,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*Argv0,&#32;<emphasis role="keywordtype">void</emphasis>&#32;*MainAddr)&#32;{
00185 &#32;&#32;ensureSufficientStack();
00186 
00187 &#32;&#32;std::unique_ptr&lt;CompilerInstance&gt;&#32;Clang(<emphasis role="keyword">new</emphasis>&#32;CompilerInstance());
00188 &#32;&#32;IntrusiveRefCntPtr&lt;DiagnosticIDs&gt;&#32;DiagID(<emphasis role="keyword">new</emphasis>&#32;DiagnosticIDs());
00189 
00190 &#32;&#32;<emphasis role="comment">//&#32;Register&#32;the&#32;support&#32;for&#32;object-file-wrapped&#32;Clang&#32;modules.</emphasis>
00191 &#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;PCHOps&#32;=&#32;Clang-&gt;getPCHContainerOperations();
00192 &#32;&#32;PCHOps-&gt;registerWriter(std::make_unique&lt;ObjectFilePCHContainerWriter&gt;());
00193 &#32;&#32;PCHOps-&gt;registerReader(std::make_unique&lt;ObjectFilePCHContainerReader&gt;());
00194 
00195 &#32;&#32;<emphasis role="comment">//&#32;Initialize&#32;targets&#32;first,&#32;so&#32;that&#32;--version&#32;shows&#32;registered&#32;targets.</emphasis>
00196 &#32;&#32;llvm::InitializeAllTargets();
00197 &#32;&#32;llvm::InitializeAllTargetMCs();
00198 &#32;&#32;llvm::InitializeAllAsmPrinters();
00199 &#32;&#32;llvm::InitializeAllAsmParsers();
00200 
00201 &#32;&#32;<emphasis role="comment">//&#32;Buffer&#32;diagnostics&#32;from&#32;argument&#32;parsing&#32;so&#32;that&#32;we&#32;can&#32;output&#32;them&#32;using&#32;a</emphasis>
00202 &#32;&#32;<emphasis role="comment">//&#32;well&#32;formed&#32;diagnostic&#32;object.</emphasis>
00203 &#32;&#32;IntrusiveRefCntPtr&lt;DiagnosticOptions&gt;&#32;DiagOpts&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;DiagnosticOptions();
00204 &#32;&#32;TextDiagnosticBuffer&#32;*DiagsBuffer&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;TextDiagnosticBuffer;
00205 &#32;&#32;DiagnosticsEngine&#32;Diags(DiagID,&#32;&amp;*DiagOpts,&#32;DiagsBuffer);
00206 
00207 &#32;&#32;<emphasis role="comment">//&#32;Setup&#32;round-trip&#32;remarks&#32;for&#32;the&#32;DiagnosticsEngine&#32;used&#32;in&#32;CreateFromArgs.</emphasis>
00208 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(find(Argv,&#32;StringRef(<emphasis role="stringliteral">&quot;-Rround-trip-cc1-args&quot;</emphasis>))&#32;!=&#32;Argv.end())
00209 &#32;&#32;&#32;&#32;Diags.setSeverity(diag::remark_cc1_round_trip_generated,
00210 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;diag::Severity::Remark,&#32;{});
00211 
00212 &#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;Success&#32;=&#32;CompilerInvocation::CreateFromArgs(Clang-&gt;getInvocation(),
00213 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Argv,&#32;Diags,&#32;Argv0);
00214 
00215 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(Clang-&gt;getFrontendOpts().TimeTrace)&#32;{
00216 &#32;&#32;&#32;&#32;llvm::timeTraceProfilerInitialize(
00217 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Clang-&gt;getFrontendOpts().TimeTraceGranularity,&#32;Argv0);
00218 &#32;&#32;}
00219 &#32;&#32;<emphasis role="comment">//&#32;--print-supported-cpus&#32;takes&#32;priority&#32;over&#32;the&#32;actual&#32;compilation.</emphasis>
00220 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(Clang-&gt;getFrontendOpts().PrintSupportedCPUs)
00221 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;PrintSupportedCPUs(Clang-&gt;getTargetOpts().Triple);
00222 
00223 &#32;&#32;<emphasis role="comment">//&#32;Infer&#32;the&#32;builtin&#32;include&#32;path&#32;if&#32;unspecified.</emphasis>
00224 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(Clang-&gt;getHeaderSearchOpts().UseBuiltinIncludes&#32;&amp;&amp;
00225 &#32;&#32;&#32;&#32;&#32;&#32;Clang-&gt;getHeaderSearchOpts().ResourceDir.empty())
00226 &#32;&#32;&#32;&#32;Clang-&gt;getHeaderSearchOpts().ResourceDir&#32;=
00227 &#32;&#32;&#32;&#32;&#32;&#32;CompilerInvocation::GetResourcesPath(Argv0,&#32;MainAddr);
00228 
00229 &#32;&#32;<emphasis role="comment">//&#32;Create&#32;the&#32;actual&#32;diagnostics&#32;engine.</emphasis>
00230 &#32;&#32;Clang-&gt;createDiagnostics();
00231 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!Clang-&gt;hasDiagnostics())
00232 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;1;
00233 
00234 &#32;&#32;<emphasis role="comment">//&#32;Set&#32;an&#32;error&#32;handler,&#32;so&#32;that&#32;any&#32;LLVM&#32;backend&#32;diagnostics&#32;go&#32;through&#32;our</emphasis>
00235 &#32;&#32;<emphasis role="comment">//&#32;error&#32;handler.</emphasis>
00236 &#32;&#32;llvm::install_fatal_error_handler(LLVMErrorHandler,
00237 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">void</emphasis>*<emphasis role="keyword">&gt;</emphasis>(&amp;Clang-&gt;getDiagnostics()));
00238 
00239 &#32;&#32;DiagsBuffer-&gt;FlushDiagnostics(Clang-&gt;getDiagnostics());
00240 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!Success)
00241 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;1;
00242 
00243 &#32;&#32;<emphasis role="comment">//&#32;Execute&#32;the&#32;frontend&#32;actions.</emphasis>
00244 &#32;&#32;{
00245 &#32;&#32;&#32;&#32;llvm::TimeTraceScope&#32;TimeScope(<emphasis role="stringliteral">&quot;ExecuteCompiler&quot;</emphasis>);
00246 &#32;&#32;&#32;&#32;Success&#32;=&#32;ExecuteCompilerInvocation(Clang.get());
00247 &#32;&#32;}
00248 
00249 &#32;&#32;<emphasis role="comment">//&#32;If&#32;any&#32;timers&#32;were&#32;active&#32;but&#32;haven&apos;t&#32;been&#32;destroyed&#32;yet,&#32;print&#32;their</emphasis>
00250 &#32;&#32;<emphasis role="comment">//&#32;results&#32;now.&#32;&#32;This&#32;happens&#32;in&#32;-disable-free&#32;mode.</emphasis>
00251 &#32;&#32;llvm::TimerGroup::printAll(llvm::errs());
00252 &#32;&#32;llvm::TimerGroup::clearAll();
00253 
00254 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(llvm::timeTraceProfilerEnabled())&#32;{
00255 &#32;&#32;&#32;&#32;SmallString&lt;128&gt;&#32;Path(Clang-&gt;getFrontendOpts().OutputFile);
00256 &#32;&#32;&#32;&#32;llvm::sys::path::replace_extension(Path,&#32;<emphasis role="stringliteral">&quot;json&quot;</emphasis>);
00257 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="keyword">auto</emphasis>&#32;profilerOutput&#32;=&#32;Clang-&gt;createOutputFile(
00258 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Path.str(),&#32;<emphasis role="comment">/*Binary=*/</emphasis><emphasis role="keyword">false</emphasis>,&#32;<emphasis role="comment">/*RemoveFileOnSignal=*/</emphasis><emphasis role="keyword">false</emphasis>,
00259 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*useTemporary=*/</emphasis><emphasis role="keyword">false</emphasis>))&#32;{
00260 &#32;&#32;&#32;&#32;&#32;&#32;llvm::timeTraceProfilerWrite(*profilerOutput);
00261 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;FIXME(ibiryukov):&#32;make&#32;profilerOutput&#32;flush&#32;in&#32;destructor&#32;instead.</emphasis>
00262 &#32;&#32;&#32;&#32;&#32;&#32;profilerOutput-&gt;flush();
00263 &#32;&#32;&#32;&#32;&#32;&#32;llvm::timeTraceProfilerCleanup();
00264 &#32;&#32;&#32;&#32;&#32;&#32;Clang-&gt;clearOutputFiles(<emphasis role="keyword">false</emphasis>);
00265 &#32;&#32;&#32;&#32;}
00266 &#32;&#32;}
00267 
00268 &#32;&#32;<emphasis role="comment">//&#32;Our&#32;error&#32;handler&#32;depends&#32;on&#32;the&#32;Diagnostics&#32;object,&#32;which&#32;we&apos;re</emphasis>
00269 &#32;&#32;<emphasis role="comment">//&#32;potentially&#32;about&#32;to&#32;delete.&#32;Uninstall&#32;the&#32;handler&#32;now&#32;so&#32;that&#32;any</emphasis>
00270 &#32;&#32;<emphasis role="comment">//&#32;later&#32;errors&#32;use&#32;the&#32;default&#32;handling&#32;behavior&#32;instead.</emphasis>
00271 &#32;&#32;llvm::remove_fatal_error_handler();
00272 
00273 &#32;&#32;<emphasis role="comment">//&#32;When&#32;running&#32;with&#32;-disable-free,&#32;don&apos;t&#32;do&#32;any&#32;destruction&#32;or&#32;shutdown.</emphasis>
00274 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(Clang-&gt;getFrontendOpts().DisableFree)&#32;{
00275 &#32;&#32;&#32;&#32;llvm::BuryPointer(std::move(Clang));
00276 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;!Success;
00277 &#32;&#32;}
00278 
00279 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;!Success;
00280 }
</programlisting></section>
