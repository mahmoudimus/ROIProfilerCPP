<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_namespaceclang_1_1cxindex" xml:lang="en-US">
<title>clang::cxindex Namespace Reference</title>
<indexterm><primary>clang::cxindex</primary></indexterm>
<simplesect>
    <title>Classes    </title>
        <itemizedlist>
            <listitem><para>class <link linkend="_classclang_1_1cxindex_1_1_logger">Logger</link></para>
</listitem>
            <listitem><para>class <link linkend="_classclang_1_1cxindex_1_1_scratch_alloc">ScratchAlloc</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structclang_1_1cxindex_1_1_entity_info">EntityInfo</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structclang_1_1cxindex_1_1_container_info">ContainerInfo</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structclang_1_1cxindex_1_1_decl_info">DeclInfo</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structclang_1_1cxindex_1_1_obj_c_container_decl_info">ObjCContainerDeclInfo</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structclang_1_1cxindex_1_1_obj_c_interface_decl_info">ObjCInterfaceDeclInfo</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structclang_1_1cxindex_1_1_obj_c_protocol_decl_info">ObjCProtocolDeclInfo</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structclang_1_1cxindex_1_1_obj_c_category_decl_info">ObjCCategoryDeclInfo</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structclang_1_1cxindex_1_1_obj_c_property_decl_info">ObjCPropertyDeclInfo</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structclang_1_1cxindex_1_1_c_x_x_class_decl_info">CXXClassDeclInfo</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structclang_1_1cxindex_1_1_attr_info">AttrInfo</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structclang_1_1cxindex_1_1_i_b_outlet_collection_info">IBOutletCollectionInfo</link></para>
</listitem>
            <listitem><para>class <link linkend="_classclang_1_1cxindex_1_1_attr_list_info">AttrListInfo</link></para>
</listitem>
            <listitem><para>class <link linkend="_classclang_1_1cxindex_1_1_c_x_index_data_consumer">CXIndexDataConsumer</link></para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Typedefs    </title>
        <itemizedlist>
            <listitem><para>typedef IntrusiveRefCntPtr&lt; <link linkend="_classclang_1_1cxindex_1_1_logger">Logger</link> &gt; <link linkend="_namespaceclang_1_1cxindex_1a404a46a001568431816a6c375e7cd810">LogRef</link></para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Functions    </title>
        <itemizedlist>
            <listitem><para>void <link linkend="_namespaceclang_1_1cxindex_1a134d158252a9bfcc3db346dd2e65f09f">printDiagsToStderr</link> (ASTUnit *Unit)</para>
</listitem>
            <listitem><para>MacroInfo * <link linkend="_namespaceclang_1_1cxindex_1af7ce142e794a78913423f48c9d01c78d">getMacroInfo</link> (const IdentifierInfo &amp;II, SourceLocation MacroDefLoc, CXTranslationUnit TU)</para>
</listitem>
            <listitem><para>const MacroInfo * <link linkend="_namespaceclang_1_1cxindex_1a9af76d8fd72b3732e87a672007c73bcd">getMacroInfo</link> (const MacroDefinitionRecord *MacroDef, CXTranslationUnit TU)</para>

<para>Retrieves the corresponding MacroInfo of a MacroDefinitionRecord. </para>
</listitem>
            <listitem><para>MacroDefinitionRecord * <link linkend="_namespaceclang_1_1cxindex_1ac81be1c63a9bbf2e05be99daa2b11750">checkForMacroInMacroDefinition</link> (const MacroInfo *MI, SourceLocation Loc, CXTranslationUnit TU)</para>
</listitem>
            <listitem><para>MacroDefinitionRecord * <link linkend="_namespaceclang_1_1cxindex_1afbdf83287fd5c579f0118d85ba76bb26">checkForMacroInMacroDefinition</link> (const MacroInfo *MI, const Token &amp;Tok, CXTranslationUnit TU)</para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Typedef Documentation</title>
<anchor xml:id="_namespaceclang_1_1cxindex_1a404a46a001568431816a6c375e7cd810"/>    <section>
    <title>LogRef</title>
<indexterm><primary>LogRef</primary><secondary>clang::cxindex</secondary></indexterm>
<indexterm><primary>clang::cxindex</primary><secondary>LogRef</secondary></indexterm>
<para><computeroutput>typedef IntrusiveRefCntPtr&lt;<link linkend="_classclang_1_1cxindex_1_1_logger">Logger</link>&gt; <link linkend="_namespaceclang_1_1cxindex_1a404a46a001568431816a6c375e7cd810">clang::cxindex::LogRef</link></computeroutput></para><para>
Definition at line <link linkend="__c_log_8h_source_1l00031">31</link> of file <link linkend="__c_log_8h_source">CLog.h</link>.</para>
</section>
</section>
<section>
<title>Function Documentation</title>
<anchor xml:id="_namespaceclang_1_1cxindex_1afbdf83287fd5c579f0118d85ba76bb26"/>    <section>
    <title>checkForMacroInMacroDefinition()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>checkForMacroInMacroDefinition</primary><secondary>clang::cxindex</secondary></indexterm>
<indexterm><primary>clang::cxindex</primary><secondary>checkForMacroInMacroDefinition</secondary></indexterm>
<para><computeroutput>MacroDefinitionRecord * clang::cxindex::checkForMacroInMacroDefinition (const MacroInfo * MI, const Token &amp; Tok, CXTranslationUnit TU)</computeroutput></para>
<para>If <computeroutput>Tok</computeroutput> resides inside the definition of <computeroutput>MI</computeroutput> and it points at an identifier that has ever been a macro name, this returns the latest MacroDefinitionRecord for that name, otherwise it returns NULL. </para>
<para>
Definition at line <link linkend="__c_index_8cpp_source_1l09049">9049</link> of file <link linkend="__c_index_8cpp_source">CIndex.cpp</link>.</para>
<programlisting>09050 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
09051 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!MI&#32;||&#32;!TU)
09052 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">nullptr</emphasis>;
09053 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(Tok.isNot(tok::raw_identifier))
09054 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">nullptr</emphasis>;
09055 
09056 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(MI-&gt;getNumTokens()&#32;==&#32;0)
09057 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">nullptr</emphasis>;
09058 &#32;&#32;SourceRange&#32;DefRange(MI-&gt;getReplacementToken(0).getLocation(),
09059 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;MI-&gt;getDefinitionEndLoc());
09060 &#32;&#32;ASTUnit&#32;*Unit&#32;=&#32;cxtu::getASTUnit(TU);
09061 
09062 &#32;&#32;<emphasis role="comment">//&#32;Check&#32;that&#32;the&#32;token&#32;is&#32;inside&#32;the&#32;definition&#32;and&#32;not&#32;its&#32;argument&#32;list.</emphasis>
09063 &#32;&#32;SourceManager&#32;&amp;SM&#32;=&#32;Unit-&gt;getSourceManager();
09064 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(SM.isBeforeInTranslationUnit(Tok.getLocation(),&#32;DefRange.getBegin()))
09065 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">nullptr</emphasis>;
09066 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(SM.isBeforeInTranslationUnit(DefRange.getEnd(),&#32;Tok.getLocation()))
09067 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">nullptr</emphasis>;
09068 
09069 &#32;&#32;Preprocessor&#32;&amp;PP&#32;=&#32;Unit-&gt;getPreprocessor();
09070 &#32;&#32;PreprocessingRecord&#32;*PPRec&#32;=&#32;PP.getPreprocessingRecord();
09071 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!PPRec)
09072 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">nullptr</emphasis>;
09073 
09074 &#32;&#32;IdentifierInfo&#32;&amp;II&#32;=&#32;PP.getIdentifierTable().get(Tok.getRawIdentifier());
09075 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!II.hadMacroDefinition())
09076 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">nullptr</emphasis>;
09077 
09078 &#32;&#32;<emphasis role="comment">//&#32;Check&#32;that&#32;the&#32;identifier&#32;is&#32;not&#32;one&#32;of&#32;the&#32;macro&#32;arguments.</emphasis>
09079 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(std::find(MI-&gt;param_begin(),&#32;MI-&gt;param_end(),&#32;&amp;II)&#32;!=&#32;MI-&gt;param_end())
09080 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">nullptr</emphasis>;
09081 
09082 &#32;&#32;MacroDirective&#32;*InnerMD&#32;=&#32;PP.getLocalMacroDirectiveHistory(&amp;II);
09083 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!InnerMD)
09084 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">nullptr</emphasis>;
09085 
09086 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;PPRec-&gt;findMacroDefinition(InnerMD-&gt;getMacroInfo());
09087 }
</programlisting>    </section><anchor xml:id="_namespaceclang_1_1cxindex_1ac81be1c63a9bbf2e05be99daa2b11750"/>    <section>
    <title>checkForMacroInMacroDefinition()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>checkForMacroInMacroDefinition</primary><secondary>clang::cxindex</secondary></indexterm>
<indexterm><primary>clang::cxindex</primary><secondary>checkForMacroInMacroDefinition</secondary></indexterm>
<para><computeroutput>MacroDefinitionRecord * clang::cxindex::checkForMacroInMacroDefinition (const MacroInfo * MI, SourceLocation Loc, CXTranslationUnit TU)</computeroutput></para>
<para>If <computeroutput>Loc</computeroutput> resides inside the definition of <computeroutput>MI</computeroutput> and it points at an identifier that has ever been a macro name, this returns the latest MacroDefinitionRecord for that name, otherwise it returns NULL. </para>
<para>
Definition at line <link linkend="__c_index_8cpp_source_1l09090">9090</link> of file <link linkend="__c_index_8cpp_source">CIndex.cpp</link>.</para>
<programlisting>09091 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
09092 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(Loc.isInvalid()&#32;||&#32;!MI&#32;||&#32;!TU)
09093 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">nullptr</emphasis>;
09094 
09095 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(MI-&gt;getNumTokens()&#32;==&#32;0)
09096 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">nullptr</emphasis>;
09097 &#32;&#32;ASTUnit&#32;*Unit&#32;=&#32;cxtu::getASTUnit(TU);
09098 &#32;&#32;Preprocessor&#32;&amp;PP&#32;=&#32;Unit-&gt;getPreprocessor();
09099 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!PP.getPreprocessingRecord())
09100 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">nullptr</emphasis>;
09101 &#32;&#32;Loc&#32;=&#32;Unit-&gt;getSourceManager().getSpellingLoc(Loc);
09102 &#32;&#32;Token&#32;Tok;
09103 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(PP.getRawToken(Loc,&#32;Tok))
09104 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">nullptr</emphasis>;
09105 
09106 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxindex_1ac81be1c63a9bbf2e05be99daa2b11750">checkForMacroInMacroDefinition</link>(MI,&#32;Tok,&#32;TU);
09107 }
</programlisting>    </section><anchor xml:id="_namespaceclang_1_1cxindex_1af7ce142e794a78913423f48c9d01c78d"/>    <section>
    <title>getMacroInfo()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>getMacroInfo</primary><secondary>clang::cxindex</secondary></indexterm>
<indexterm><primary>clang::cxindex</primary><secondary>getMacroInfo</secondary></indexterm>
<para><computeroutput>MacroInfo * clang::cxindex::getMacroInfo (const IdentifierInfo &amp; II, SourceLocation MacroDefLoc, CXTranslationUnit TU)</computeroutput></para>
<para>If <computeroutput>MacroDefLoc</computeroutput> points at a macro definition with <computeroutput>II</computeroutput> as its name, this retrieves its MacroInfo. </para>
<para>
Definition at line <link linkend="__c_index_8cpp_source_1l09015">9015</link> of file <link linkend="__c_index_8cpp_source">CIndex.cpp</link>.</para>
<programlisting>09017 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
09018 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(MacroDefLoc.isInvalid()&#32;||&#32;!TU)
09019 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">nullptr</emphasis>;
09020 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!II.hadMacroDefinition())
09021 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">nullptr</emphasis>;
09022 
09023 &#32;&#32;ASTUnit&#32;*Unit&#32;=&#32;cxtu::getASTUnit(TU);
09024 &#32;&#32;Preprocessor&#32;&amp;PP&#32;=&#32;Unit-&gt;getPreprocessor();
09025 &#32;&#32;MacroDirective&#32;*MD&#32;=&#32;PP.getLocalMacroDirectiveHistory(&amp;II);
09026 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(MD)&#32;{
09027 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(MacroDirective::DefInfo&#32;Def&#32;=&#32;MD-&gt;getDefinition();&#32;Def;
09028 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Def&#32;=&#32;Def.getPreviousDefinition())&#32;{
09029 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(MacroDefLoc&#32;==&#32;Def.getMacroInfo()-&gt;getDefinitionLoc())
09030 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;Def.getMacroInfo();
09031 &#32;&#32;&#32;&#32;}
09032 &#32;&#32;}
09033 
09034 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">nullptr</emphasis>;
09035 }
</programlisting><para>
Referenced by <link linkend="__c_index_8cpp_source_1l09037">getMacroInfo()</link>.</para>
    </section><anchor xml:id="_namespaceclang_1_1cxindex_1a9af76d8fd72b3732e87a672007c73bcd"/>    <section>
    <title>getMacroInfo()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>getMacroInfo</primary><secondary>clang::cxindex</secondary></indexterm>
<indexterm><primary>clang::cxindex</primary><secondary>getMacroInfo</secondary></indexterm>
<para><computeroutput>const MacroInfo * clang::cxindex::getMacroInfo (const MacroDefinitionRecord * MacroDef, CXTranslationUnit TU)</computeroutput></para><para>

<para>Retrieves the corresponding MacroInfo of a MacroDefinitionRecord. </para>
</para>
<para>
Definition at line <link linkend="__c_index_8cpp_source_1l09037">9037</link> of file <link linkend="__c_index_8cpp_source">CIndex.cpp</link>.</para>
<programlisting>09038 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
09039 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!MacroDef&#32;||&#32;!TU)
09040 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">nullptr</emphasis>;
09041 &#32;&#32;<emphasis role="keyword">const</emphasis>&#32;IdentifierInfo&#32;*II&#32;=&#32;MacroDef-&gt;getName();
09042 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!II)
09043 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">nullptr</emphasis>;
09044 
09045 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxindex_1af7ce142e794a78913423f48c9d01c78d">getMacroInfo</link>(*II,&#32;MacroDef-&gt;getLocation(),&#32;TU);
09046 }
</programlisting><para>
References <link linkend="__c_index_8cpp_source_1l09015">getMacroInfo()</link>.</para>
    </section><anchor xml:id="_namespaceclang_1_1cxindex_1a134d158252a9bfcc3db346dd2e65f09f"/>    <section>
    <title>printDiagsToStderr()</title>
<indexterm><primary>printDiagsToStderr</primary><secondary>clang::cxindex</secondary></indexterm>
<indexterm><primary>clang::cxindex</primary><secondary>printDiagsToStderr</secondary></indexterm>
<para><computeroutput>void clang::cxindex::printDiagsToStderr (ASTUnit * Unit)</computeroutput></para><para>
Definition at line <link linkend="__c_index_8cpp_source_1l08994">8994</link> of file <link linkend="__c_index_8cpp_source">CIndex.cpp</link>.</para>
<programlisting>08994 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
08995 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!Unit)
08996 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
08997 
08998 &#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(ASTUnit::stored_diag_iterator&#32;D&#32;=&#32;Unit-&gt;stored_diag_begin(),
08999 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;DEnd&#32;=&#32;Unit-&gt;stored_diag_end();
09000 &#32;&#32;&#32;&#32;&#32;&#32;&#32;D&#32;!=&#32;DEnd;&#32;++D)&#32;{
09001 &#32;&#32;&#32;&#32;<link linkend="_structclang_1_1_c_x_stored_diagnostic">CXStoredDiagnostic</link>&#32;Diag(*D,&#32;Unit-&gt;getLangOpts());
09002 &#32;&#32;&#32;&#32;CXString&#32;Msg&#32;=
09003 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__c_index_diagnostic_8cpp_1a3ed169ee4a472764c11724cc7768e6eb">clang_formatDiagnostic</link>(&amp;Diag,&#32;<link linkend="__c_index_diagnostic_8cpp_1a1db1e7c1136fd6d171f47d0b7d4f8bd9">clang_defaultDiagnosticDisplayOptions</link>());
09004 &#32;&#32;&#32;&#32;fprintf(stderr,&#32;<emphasis role="stringliteral">&quot;%s\n&quot;</emphasis>,&#32;<link linkend="__c_x_string_8cpp_1acd478c1b1785e17c0fe377bd70a2195f">clang_getCString</link>(Msg));
09005 &#32;&#32;&#32;&#32;<link linkend="__c_x_string_8cpp_1a46c85f1255580ed186aa6f7380a06883">clang_disposeString</link>(Msg);
09006 &#32;&#32;}
09007 <emphasis role="preprocessor">#ifdef&#32;_WIN32</emphasis>
09008 &#32;&#32;<emphasis role="comment">//&#32;On&#32;Windows,&#32;force&#32;a&#32;flush,&#32;since&#32;there&#32;may&#32;be&#32;multiple&#32;copies&#32;of</emphasis>
09009 &#32;&#32;<emphasis role="comment">//&#32;stderr&#32;and&#32;stdout&#32;in&#32;the&#32;file&#32;system,&#32;all&#32;with&#32;different&#32;buffers</emphasis>
09010 &#32;&#32;<emphasis role="comment">//&#32;but&#32;writing&#32;to&#32;the&#32;same&#32;device.</emphasis>
09011 &#32;&#32;fflush(stderr);
09012 <emphasis role="preprocessor">#endif</emphasis>
09013 }
</programlisting><para>
References <link linkend="__c_index_diagnostic_8cpp_source_1l00361">clang_defaultDiagnosticDisplayOptions()</link>, <link linkend="__c_x_string_8cpp_source_1l00170">clang_disposeString()</link>, <link linkend="__c_index_diagnostic_8cpp_source_1l00241">clang_formatDiagnostic()</link>, and <link linkend="__c_x_string_8cpp_source_1l00163">clang_getCString()</link>.</para>
</section>
</section>
</section>
