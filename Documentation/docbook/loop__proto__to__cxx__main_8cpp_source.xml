<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_loop__proto__to__cxx__main_8cpp_source" xml:lang="en-US">
<title>loop_proto_to_cxx_main.cpp</title>
<indexterm><primary>/Users/maximilian/clang-llvm/clang/tools/clang-fuzzer/proto-to-cxx/loop_proto_to_cxx_main.cpp</primary></indexterm>
<programlisting>00001 <emphasis role="comment">//==--&#32;loop_proto_to_cxx_main.cpp&#32;-&#32;Driver&#32;for&#32;protobuf-C++&#32;conversion&#32;-----==//</emphasis>
00002 <emphasis role="comment">//</emphasis>
00003 <emphasis role="comment">//&#32;Part&#32;of&#32;the&#32;LLVM&#32;Project,&#32;under&#32;the&#32;Apache&#32;License&#32;v2.0&#32;with&#32;LLVM&#32;Exceptions.</emphasis>
00004 <emphasis role="comment">//&#32;See&#32;https://llvm.org/LICENSE.txt&#32;for&#32;license&#32;information.</emphasis>
00005 <emphasis role="comment">//&#32;SPDX-License-Identifier:&#32;Apache-2.0&#32;WITH&#32;LLVM-exception</emphasis>
00006 <emphasis role="comment">//</emphasis>
00007 <emphasis role="comment">//===----------------------------------------------------------------------===//</emphasis>
00008 <emphasis role="comment">//</emphasis>
00009 <emphasis role="comment">//&#32;Implements&#32;a&#32;simple&#32;driver&#32;to&#32;print&#32;a&#32;C++&#32;program&#32;from&#32;a&#32;protobuf&#32;with&#32;loops.</emphasis>
00010 <emphasis role="comment">//</emphasis>
00011 <emphasis role="comment">//===----------------------------------------------------------------------===//</emphasis>
00012 
00013 
00014 <emphasis role="preprocessor">#include&#32;&lt;fstream&gt;</emphasis>
00015 <emphasis role="preprocessor">#include&#32;&lt;iostream&gt;</emphasis>
00016 <emphasis role="preprocessor">#include&#32;&lt;streambuf&gt;</emphasis>
00017 <emphasis role="preprocessor">#include&#32;&lt;string&gt;</emphasis>
00018 
00019 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="_proto__to__cxx_8h">proto_to_cxx.h</link>&quot;</emphasis>
00020 
<anchor xml:id="_loop__proto__to__cxx__main_8cpp_source_1l00021"/><link linkend="_loop__proto__to__cxx__main_8cpp_1a3c04138a5bfe5d72780bb7e82a18e627">00021</link> <emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_loop__proto__to__cxx__main_8cpp_1a3c04138a5bfe5d72780bb7e82a18e627">main</link>(<emphasis role="keywordtype">int</emphasis>&#32;argc,&#32;<emphasis role="keywordtype">char</emphasis>&#32;**argv)&#32;{
00022 &#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;i&#32;=&#32;1;&#32;i&#32;&lt;&#32;argc;&#32;i++)&#32;{
00023 &#32;&#32;&#32;&#32;std::fstream&#32;in(argv[i]);
00024 &#32;&#32;&#32;&#32;std::string&#32;str((std::istreambuf_iterator&lt;char&gt;(in)),
00025 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::istreambuf_iterator&lt;char&gt;());
00026 &#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;//&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;argv[i]&#32;&lt;&lt;&#32;std::endl;
00027 &#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;<link linkend="_namespaceclang__fuzzer_1acab6e28bea376a65f6d4ab66def83cac">clang_fuzzer::LoopProtoToCxx</link>(
00028 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">reinterpret_cast&lt;</emphasis><emphasis role="keyword">const&#32;</emphasis>uint8_t&#32;*<emphasis role="keyword">&gt;</emphasis>(str.data()),&#32;str.size());
00029 &#32;&#32;}
00030 }
</programlisting></section>
