<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="__tool_refactoring_result_consumer_8h_source" xml:lang="en-US">
<title>ToolRefactoringResultConsumer.h</title>
<indexterm><primary>/Users/maximilian/clang-llvm/clang/tools/clang-refactor/ToolRefactoringResultConsumer.h</primary></indexterm>
<programlisting>00001 <emphasis role="comment">//===---&#32;ToolRefactoringResultConsumer.h&#32;-&#32;----------------------*-&#32;C++&#32;-*-===//</emphasis>
00002 <emphasis role="comment">//</emphasis>
00003 <emphasis role="comment">//&#32;Part&#32;of&#32;the&#32;LLVM&#32;Project,&#32;under&#32;the&#32;Apache&#32;License&#32;v2.0&#32;with&#32;LLVM&#32;Exceptions.</emphasis>
00004 <emphasis role="comment">//&#32;See&#32;https://llvm.org/LICENSE.txt&#32;for&#32;license&#32;information.</emphasis>
00005 <emphasis role="comment">//&#32;SPDX-License-Identifier:&#32;Apache-2.0&#32;WITH&#32;LLVM-exception</emphasis>
00006 <emphasis role="comment">//</emphasis>
00007 <emphasis role="comment">//===----------------------------------------------------------------------===//</emphasis>
00008 
00009 <emphasis role="preprocessor">#ifndef&#32;LLVM_CLANG_TOOLS_CLANG_REFACTOR_TOOL_REFACTORING_RESULT_CONSUMER_H</emphasis>
00010 <emphasis role="preprocessor">#define&#32;LLVM_CLANG_TOOLS_CLANG_REFACTOR_TOOL_REFACTORING_RESULT_CONSUMER_H</emphasis>
00011 
00012 <emphasis role="preprocessor">#include&#32;&quot;clang/AST/ASTContext.h&quot;</emphasis>
00013 <emphasis role="preprocessor">#include&#32;&quot;clang/Tooling/Refactoring/RefactoringResultConsumer.h&quot;</emphasis>
00014 
00015 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespaceclang">clang</link>&#32;{
00016 <emphasis role="keyword">namespace&#32;</emphasis>refactor&#32;{
00017 
<anchor xml:id="__tool_refactoring_result_consumer_8h_source_1l00020"/><link linkend="_classclang_1_1refactor_1_1_clang_refactor_tool_consumer_interface">00020</link> <emphasis role="keyword">class&#32;</emphasis><link linkend="_classclang_1_1refactor_1_1_clang_refactor_tool_consumer_interface">ClangRefactorToolConsumerInterface</link>
00021 &#32;&#32;&#32;&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;tooling::RefactoringResultConsumer&#32;{
00022 <emphasis role="keyword">public</emphasis>:
<anchor xml:id="__tool_refactoring_result_consumer_8h_source_1l00024"/><link linkend="_classclang_1_1refactor_1_1_clang_refactor_tool_consumer_interface_1a13ef9fd59ed53ecf20a8949f11ceeb5b">00024</link> &#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classclang_1_1refactor_1_1_clang_refactor_tool_consumer_interface_1a13ef9fd59ed53ecf20a8949f11ceeb5b">beginTU</link>(ASTContext&#32;&amp;Context)&#32;{
00025 &#32;&#32;&#32;&#32;assert(!Diags&#32;&amp;&amp;&#32;<emphasis role="stringliteral">&quot;Diags&#32;has&#32;been&#32;set&quot;</emphasis>);
00026 &#32;&#32;&#32;&#32;Diags&#32;=&#32;&amp;Context.getDiagnostics();
00027 &#32;&#32;}
00028 
<anchor xml:id="__tool_refactoring_result_consumer_8h_source_1l00030"/><link linkend="_classclang_1_1refactor_1_1_clang_refactor_tool_consumer_interface_1a683752cb4413da0bf2889519ea688a7b">00030</link> &#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classclang_1_1refactor_1_1_clang_refactor_tool_consumer_interface_1a683752cb4413da0bf2889519ea688a7b">endTU</link>()&#32;{
00031 &#32;&#32;&#32;&#32;assert(Diags&#32;&amp;&amp;&#32;<emphasis role="stringliteral">&quot;Diags&#32;unset&quot;</emphasis>);
00032 &#32;&#32;&#32;&#32;Diags&#32;=&#32;<emphasis role="keyword">nullptr</emphasis>;
00033 &#32;&#32;}
00034 
<anchor xml:id="__tool_refactoring_result_consumer_8h_source_1l00035"/><link linkend="_classclang_1_1refactor_1_1_clang_refactor_tool_consumer_interface_1ad4529d8d5cf3ba5ce55fcd5f5fa9b505">00035</link> &#32;&#32;DiagnosticsEngine&#32;&amp;<link linkend="_classclang_1_1refactor_1_1_clang_refactor_tool_consumer_interface_1ad4529d8d5cf3ba5ce55fcd5f5fa9b505">getDiags</link>()<emphasis role="keyword">&#32;const&#32;</emphasis>{
00036 &#32;&#32;&#32;&#32;assert(Diags&#32;&amp;&amp;&#32;<emphasis role="stringliteral">&quot;no&#32;diags&quot;</emphasis>);
00037 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*Diags;
00038 &#32;&#32;}
00039 
00040 <emphasis role="keyword">private</emphasis>:
00041 &#32;&#32;DiagnosticsEngine&#32;*Diags&#32;=&#32;<emphasis role="keyword">nullptr</emphasis>;
00042 };
00043 
00044 }&#32;<emphasis role="comment">//&#32;end&#32;namespace&#32;refactor</emphasis>
00045 }&#32;<emphasis role="comment">//&#32;end&#32;namespace&#32;clang</emphasis>
00046 
00047 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;LLVM_CLANG_TOOLS_CLANG_REFACTOR_TOOL_REFACTORING_RESULT_CONSUMER_H</emphasis>
</programlisting></section>
