<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_classclang_1_1cxcursor_1_1_cursor_visitor" xml:lang="en-US">
<title>clang::cxcursor::CursorVisitor Class Reference</title>
<indexterm><primary>clang::cxcursor::CursorVisitor</primary></indexterm>
<para>
<computeroutput>#include &lt;CursorVisitor.h&gt;</computeroutput>
</para>
<para>Inheritance diagram for clang::cxcursor::CursorVisitor:    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="classclang_1_1cxcursor_1_1_cursor_visitor.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
<simplesect>
    <title>Public Types    </title>
        <itemizedlist>
            <listitem><para>typedef bool(* <link linkend="_classclang_1_1cxcursor_1_1_cursor_visitor_1a519a469dc2dc65abfcd25963a5e9f23d">PostChildrenVisitorTy</link>) (CXCursor cursor, CXClientData client_data)</para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Public Member Functions    </title>
        <itemizedlist>
            <listitem><para><link linkend="_classclang_1_1cxcursor_1_1_cursor_visitor_1a0073624aca671227d17a9c8e0d6bac9f">CursorVisitor</link> (CXTranslationUnit TU, CXCursorVisitor Visitor, CXClientData ClientData, bool VisitPreprocessorLast, bool VisitIncludedPreprocessingEntries=false, SourceRange RegionOfInterest=SourceRange(), bool VisitDeclsOnly=false, <link linkend="_classclang_1_1cxcursor_1_1_cursor_visitor_1a519a469dc2dc65abfcd25963a5e9f23d">PostChildrenVisitorTy</link> PostChildrenVisitor=nullptr)</para>
</listitem>
            <listitem><para><link linkend="_classclang_1_1cxcursor_1_1_cursor_visitor_1ab7063cb2edd7c820d52c23d2a2151a15">~CursorVisitor</link> ()</para>
</listitem>
            <listitem><para>ASTUnit * <link linkend="_classclang_1_1cxcursor_1_1_cursor_visitor_1a15a5897204e1c9d037e412c6f94df2a1">getASTUnit</link> () const</para>
</listitem>
            <listitem><para>CXTranslationUnit <link linkend="_classclang_1_1cxcursor_1_1_cursor_visitor_1a1d2d369b79d1f552fc3224c217990c80">getTU</link> () const</para>
</listitem>
            <listitem><para>bool <link linkend="_classclang_1_1cxcursor_1_1_cursor_visitor_1a01659df2ce565980ce5b581ba7a970e3">Visit</link> (CXCursor Cursor, bool CheckedRegionOfInterest=false)</para>
</listitem>
            <listitem><para>bool <link linkend="_classclang_1_1cxcursor_1_1_cursor_visitor_1a24fbcc462d22a47ef5e7c02eef77d610">visitFileRegion</link> ()</para>
</listitem>
            <listitem><para>bool <link linkend="_classclang_1_1cxcursor_1_1_cursor_visitor_1a4f29bab7210fb14b41a847ab87705f46">visitPreprocessedEntitiesInRegion</link> ()</para>
</listitem>
            <listitem><para>bool <link linkend="_classclang_1_1cxcursor_1_1_cursor_visitor_1a4fdbc31529cd9171bac1ff4a347db1a6">shouldVisitIncludedEntities</link> () const</para>
</listitem>
            <listitem><para>template&lt;typename InputIterator &gt; </para><para>bool <link linkend="_classclang_1_1cxcursor_1_1_cursor_visitor_1a70914a4f8ef86d9c92d0b65da5177111">visitPreprocessedEntities</link> (InputIterator First, InputIterator Last, PreprocessingRecord &amp;PPRec, FileID FID=FileID())</para>
</listitem>
            <listitem><para>bool <link linkend="_classclang_1_1cxcursor_1_1_cursor_visitor_1ada34939666b6f90e3144f4624fc64896">VisitChildren</link> (CXCursor Parent)</para>
</listitem>
            <listitem><para>bool <link linkend="_classclang_1_1cxcursor_1_1_cursor_visitor_1a8cf4e9055a473162dfae94e08dbad6b0">VisitTypeAliasTemplateDecl</link> (TypeAliasTemplateDecl *D)</para>
</listitem>
            <listitem><para>bool <link linkend="_classclang_1_1cxcursor_1_1_cursor_visitor_1ab780a653c5903d22b4963df9731255db">VisitTypeAliasDecl</link> (TypeAliasDecl *D)</para>
</listitem>
            <listitem><para>bool <link linkend="_classclang_1_1cxcursor_1_1_cursor_visitor_1a3e41de558520b72762489e950d35d0b8">VisitAttributes</link> (Decl *D)</para>
</listitem>
            <listitem><para>bool <link linkend="_classclang_1_1cxcursor_1_1_cursor_visitor_1af1429e52aeadb9b4b1388fa7b1b1ddf4">VisitBlockDecl</link> (BlockDecl *B)</para>
</listitem>
            <listitem><para>bool <link linkend="_classclang_1_1cxcursor_1_1_cursor_visitor_1addf32753eb7872041c23c5e5652d9907">VisitCXXRecordDecl</link> (CXXRecordDecl *D)</para>
</listitem>
            <listitem><para>Optional&lt; bool &gt; <link linkend="_classclang_1_1cxcursor_1_1_cursor_visitor_1a31db49ad4d23960990fa744b69517c0d">shouldVisitCursor</link> (CXCursor C)</para>
</listitem>
            <listitem><para>bool <link linkend="_classclang_1_1cxcursor_1_1_cursor_visitor_1a3bca6000335f6c6e012b01a042d10d32">VisitDeclContext</link> (DeclContext *DC)</para>
</listitem>
            <listitem><para>bool <link linkend="_classclang_1_1cxcursor_1_1_cursor_visitor_1a255429be0e71e52043ad0b58872878d6">VisitTranslationUnitDecl</link> (TranslationUnitDecl *D)</para>
</listitem>
            <listitem><para>bool <link linkend="_classclang_1_1cxcursor_1_1_cursor_visitor_1a5079af293c5b548214614dbb8f33dc70">VisitTypedefDecl</link> (TypedefDecl *D)</para>
</listitem>
            <listitem><para>bool <link linkend="_classclang_1_1cxcursor_1_1_cursor_visitor_1a223f8711bd4960db81ca391e57bcd6e0">VisitTagDecl</link> (TagDecl *D)</para>
</listitem>
            <listitem><para>bool <link linkend="_classclang_1_1cxcursor_1_1_cursor_visitor_1a876f03daa8892c332f4ed8e7b7acbbd6">VisitClassTemplateSpecializationDecl</link> (ClassTemplateSpecializationDecl *D)</para>
</listitem>
            <listitem><para>bool <link linkend="_classclang_1_1cxcursor_1_1_cursor_visitor_1ab59de33477389ac551aba37030befef7">VisitClassTemplatePartialSpecializationDecl</link> (ClassTemplatePartialSpecializationDecl *D)</para>
</listitem>
            <listitem><para>bool <link linkend="_classclang_1_1cxcursor_1_1_cursor_visitor_1a7eacc3f49e7683c24b020e63de315750">VisitTemplateTypeParmDecl</link> (TemplateTypeParmDecl *D)</para>
</listitem>
            <listitem><para>bool <link linkend="_classclang_1_1cxcursor_1_1_cursor_visitor_1aee21ccfb817e44aa1fabf5814e435716">VisitEnumConstantDecl</link> (EnumConstantDecl *D)</para>
</listitem>
            <listitem><para>bool <link linkend="_classclang_1_1cxcursor_1_1_cursor_visitor_1ab44c6ae2ac80500f37d37e2893c37552">VisitDeclaratorDecl</link> (DeclaratorDecl *DD)</para>
</listitem>
            <listitem><para>bool <link linkend="_classclang_1_1cxcursor_1_1_cursor_visitor_1a15585d8e991ee7b5472c2971e986b3bf">VisitFunctionDecl</link> (FunctionDecl *ND)</para>
</listitem>
            <listitem><para>bool <link linkend="_classclang_1_1cxcursor_1_1_cursor_visitor_1a1504a2ceb50669fa1471f9a61e58f598">VisitFieldDecl</link> (FieldDecl *D)</para>
</listitem>
            <listitem><para>bool <link linkend="_classclang_1_1cxcursor_1_1_cursor_visitor_1aa58af31bada238412e23dbba3a928162">VisitVarDecl</link> (VarDecl *)</para>
</listitem>
            <listitem><para>bool <link linkend="_classclang_1_1cxcursor_1_1_cursor_visitor_1a400e0fc0d02c32b9307a7ff382fcd76f">VisitNonTypeTemplateParmDecl</link> (NonTypeTemplateParmDecl *D)</para>
</listitem>
            <listitem><para>bool <link linkend="_classclang_1_1cxcursor_1_1_cursor_visitor_1aa73d041db79fce203778413557b8cafa">VisitFunctionTemplateDecl</link> (FunctionTemplateDecl *D)</para>
</listitem>
            <listitem><para>bool <link linkend="_classclang_1_1cxcursor_1_1_cursor_visitor_1a1046e9b078429deffbd5f129b11d85b4">VisitClassTemplateDecl</link> (ClassTemplateDecl *D)</para>
</listitem>
            <listitem><para>bool <link linkend="_classclang_1_1cxcursor_1_1_cursor_visitor_1a1e38e6c0119deb8d59484bc5ccc0946c">VisitTemplateTemplateParmDecl</link> (TemplateTemplateParmDecl *D)</para>
</listitem>
            <listitem><para>bool <link linkend="_classclang_1_1cxcursor_1_1_cursor_visitor_1ae4ae51a63ce481b6c3c296d6ff58e4d6">VisitObjCTypeParamDecl</link> (ObjCTypeParamDecl *D)</para>
</listitem>
            <listitem><para>bool <link linkend="_classclang_1_1cxcursor_1_1_cursor_visitor_1ae232b4aa473d4eae202b791b6780cd9e">VisitObjCMethodDecl</link> (ObjCMethodDecl *ND)</para>
</listitem>
            <listitem><para>bool <link linkend="_classclang_1_1cxcursor_1_1_cursor_visitor_1a6cd04bb7010823f467388f85ee88178a">VisitObjCContainerDecl</link> (ObjCContainerDecl *D)</para>
</listitem>
            <listitem><para>bool <link linkend="_classclang_1_1cxcursor_1_1_cursor_visitor_1a1b34b238a762168d11b6b883dcd3b0fe">VisitObjCCategoryDecl</link> (ObjCCategoryDecl *ND)</para>
</listitem>
            <listitem><para>bool <link linkend="_classclang_1_1cxcursor_1_1_cursor_visitor_1a2c0feae123024ef1c7aeb8b10194d39a">VisitObjCProtocolDecl</link> (ObjCProtocolDecl *PID)</para>
</listitem>
            <listitem><para>bool <link linkend="_classclang_1_1cxcursor_1_1_cursor_visitor_1a605826428470d3401161655fe5ff5900">VisitObjCPropertyDecl</link> (ObjCPropertyDecl *PD)</para>
</listitem>
            <listitem><para>bool <link linkend="_classclang_1_1cxcursor_1_1_cursor_visitor_1aaa6cff14e5a41f01f821b18c37b89df3">VisitObjCTypeParamList</link> (ObjCTypeParamList *typeParamList)</para>
</listitem>
            <listitem><para>bool <link linkend="_classclang_1_1cxcursor_1_1_cursor_visitor_1acb338f84620f6368cf377bb111d77b25">VisitObjCInterfaceDecl</link> (ObjCInterfaceDecl *D)</para>
</listitem>
            <listitem><para>bool <link linkend="_classclang_1_1cxcursor_1_1_cursor_visitor_1a2e740eceec896420d789bfecb55d7401">VisitObjCImplDecl</link> (ObjCImplDecl *D)</para>
</listitem>
            <listitem><para>bool <link linkend="_classclang_1_1cxcursor_1_1_cursor_visitor_1af01009aeb52463835220b7dd0b7a38a5">VisitObjCCategoryImplDecl</link> (ObjCCategoryImplDecl *D)</para>
</listitem>
            <listitem><para>bool <link linkend="_classclang_1_1cxcursor_1_1_cursor_visitor_1aea7885c140d3c98feb0086019ca23a54">VisitObjCImplementationDecl</link> (ObjCImplementationDecl *D)</para>
</listitem>
            <listitem><para>bool <link linkend="_classclang_1_1cxcursor_1_1_cursor_visitor_1a6bdf80e7aa619732316432b8b393c9bb">VisitObjCPropertyImplDecl</link> (ObjCPropertyImplDecl *PD)</para>
</listitem>
            <listitem><para>bool <link linkend="_classclang_1_1cxcursor_1_1_cursor_visitor_1a7be65be3ded3c873b45451a03d19c402">VisitLinkageSpecDecl</link> (LinkageSpecDecl *D)</para>
</listitem>
            <listitem><para>bool <link linkend="_classclang_1_1cxcursor_1_1_cursor_visitor_1a8da19ba86bbcba98c07ba9b848887d8e">VisitNamespaceDecl</link> (NamespaceDecl *D)</para>
</listitem>
            <listitem><para>bool <link linkend="_classclang_1_1cxcursor_1_1_cursor_visitor_1a93b38c417d905d364965d5e502b9613e">VisitNamespaceAliasDecl</link> (NamespaceAliasDecl *D)</para>
</listitem>
            <listitem><para>bool <link linkend="_classclang_1_1cxcursor_1_1_cursor_visitor_1a96fd01a9605ed4dbbdf75b760e9756b1">VisitUsingDirectiveDecl</link> (UsingDirectiveDecl *D)</para>
</listitem>
            <listitem><para>bool <link linkend="_classclang_1_1cxcursor_1_1_cursor_visitor_1a0f329ea11a8c32720cde84f12d06ba08">VisitUsingDecl</link> (UsingDecl *D)</para>
</listitem>
            <listitem><para>bool <link linkend="_classclang_1_1cxcursor_1_1_cursor_visitor_1ab125dfb3d37b39ab6869040fceacfed1">VisitUnresolvedUsingValueDecl</link> (UnresolvedUsingValueDecl *D)</para>
</listitem>
            <listitem><para>bool <link linkend="_classclang_1_1cxcursor_1_1_cursor_visitor_1ae5983704e0c3c63718f4adaeab38bb8a">VisitUnresolvedUsingTypenameDecl</link> (UnresolvedUsingTypenameDecl *D)</para>
</listitem>
            <listitem><para>bool <link linkend="_classclang_1_1cxcursor_1_1_cursor_visitor_1a993e67b4ec4c7c83711635a211dd78bf">VisitStaticAssertDecl</link> (StaticAssertDecl *D)</para>
</listitem>
            <listitem><para>bool <link linkend="_classclang_1_1cxcursor_1_1_cursor_visitor_1a8dcd76b6d78498c519af0357f49b7672">VisitFriendDecl</link> (FriendDecl *D)</para>
</listitem>
            <listitem><para>bool <link linkend="_classclang_1_1cxcursor_1_1_cursor_visitor_1a8fc88637e0d32bfd4a776d6a57e08d5e">VisitDecompositionDecl</link> (DecompositionDecl *D)</para>
</listitem>
            <listitem><para>bool <link linkend="_classclang_1_1cxcursor_1_1_cursor_visitor_1adc36610328af99cbbd2f06d7f0292ec9">VisitDeclarationNameInfo</link> (DeclarationNameInfo Name)</para>
</listitem>
            <listitem><para>bool <link linkend="_classclang_1_1cxcursor_1_1_cursor_visitor_1aae4d0351c44a0e33f9dc797fdc722445">VisitNestedNameSpecifier</link> (NestedNameSpecifier *NNS, SourceRange Range)</para>
</listitem>
            <listitem><para>bool <link linkend="_classclang_1_1cxcursor_1_1_cursor_visitor_1a7b754c2b2db487a1286e47d1134365bf">VisitNestedNameSpecifierLoc</link> (NestedNameSpecifierLoc NNS)</para>
</listitem>
            <listitem><para>bool <link linkend="_classclang_1_1cxcursor_1_1_cursor_visitor_1aeba17d0f7d6f7154cc856bb0d3ac55de">VisitTemplateParameters</link> (const TemplateParameterList *Params)</para>
</listitem>
            <listitem><para>bool <link linkend="_classclang_1_1cxcursor_1_1_cursor_visitor_1aa6960261f98ac5f02749ece1e771464a">VisitTemplateName</link> (TemplateName Name, SourceLocation Loc)</para>
</listitem>
            <listitem><para>bool <link linkend="_classclang_1_1cxcursor_1_1_cursor_visitor_1a4a8570d91cfdf0c794c0457c447d49e3">VisitTemplateArgumentLoc</link> (const TemplateArgumentLoc &amp;TAL)</para>
</listitem>
            <listitem><para>bool <link linkend="_classclang_1_1cxcursor_1_1_cursor_visitor_1ab7a464e6d58c07492c20d402c4048612">VisitTagTypeLoc</link> (TagTypeLoc TL)</para>
</listitem>
            <listitem><para>bool <link linkend="_classclang_1_1cxcursor_1_1_cursor_visitor_1a15e1e593c973fb6611457f4a624d972c">VisitArrayTypeLoc</link> (ArrayTypeLoc TL)</para>
</listitem>
            <listitem><para>bool <link linkend="_classclang_1_1cxcursor_1_1_cursor_visitor_1af8da0d143e5bf0dd9e597f6584ec605b">VisitFunctionTypeLoc</link> (FunctionTypeLoc TL, bool SkipResultType=false)</para>
</listitem>
            <listitem><para>bool <link linkend="_classclang_1_1cxcursor_1_1_cursor_visitor_1a8551795875ea0a81cce4cad0becbe683">IsInRegionOfInterest</link> (CXCursor C)</para>
</listitem>
            <listitem><para>bool <link linkend="_classclang_1_1cxcursor_1_1_cursor_visitor_1a63c6b8681070b8b8ae976c37ae90d2a5">RunVisitorWorkList</link> (<link linkend="_namespaceclang_1_1cxcursor_1aab4e24121016c9d383e539a5938cb528">VisitorWorkList</link> &amp;WL)</para>
</listitem>
            <listitem><para>void <link linkend="_classclang_1_1cxcursor_1_1_cursor_visitor_1a7a599a85807e447ee974ccd7a65163cc">EnqueueWorkList</link> (<link linkend="_namespaceclang_1_1cxcursor_1aab4e24121016c9d383e539a5938cb528">VisitorWorkList</link> &amp;WL, const Stmt *S)</para>
</listitem>
            <listitem><para>LLVM_ATTRIBUTE_NOINLINE bool <link linkend="_classclang_1_1cxcursor_1_1_cursor_visitor_1a3d3842cdc75f63217a1146b02a2e8d8d">Visit</link> (const Stmt *S)</para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Detailed Description</title>
<para>
Definition at line <link linkend="__cursor_visitor_8h_source_1l00063">63</link> of file <link linkend="__cursor_visitor_8h_source">CursorVisitor.h</link>.</para>
</section>
<section>
<title>Member Typedef Documentation</title>
<anchor xml:id="_classclang_1_1cxcursor_1_1_cursor_visitor_1a519a469dc2dc65abfcd25963a5e9f23d"/>    <section>
    <title>PostChildrenVisitorTy</title>
<indexterm><primary>PostChildrenVisitorTy</primary><secondary>clang::cxcursor::CursorVisitor</secondary></indexterm>
<indexterm><primary>clang::cxcursor::CursorVisitor</primary><secondary>PostChildrenVisitorTy</secondary></indexterm>
<para><computeroutput>typedef bool(* clang::cxcursor::CursorVisitor::PostChildrenVisitorTy) (CXCursor cursor, CXClientData client_data)</computeroutput></para>
<para>Callback called after child nodes of a cursor have been visited. Return true to break visitation or false to continue. </para>
<para>
Definition at line <link linkend="__cursor_visitor_8h_source_1l00068">68</link> of file <link linkend="__cursor_visitor_8h_source">CursorVisitor.h</link>.</para>
</section>
</section>
<section>
<title>Constructor &amp; Destructor Documentation</title>
<anchor xml:id="_classclang_1_1cxcursor_1_1_cursor_visitor_1a0073624aca671227d17a9c8e0d6bac9f"/>    <section>
    <title>CursorVisitor()</title>
<indexterm><primary>CursorVisitor</primary><secondary>clang::cxcursor::CursorVisitor</secondary></indexterm>
<indexterm><primary>clang::cxcursor::CursorVisitor</primary><secondary>CursorVisitor</secondary></indexterm>
<para><computeroutput>clang::cxcursor::CursorVisitor::CursorVisitor (CXTranslationUnit TU, CXCursorVisitor Visitor, CXClientData ClientData, bool VisitPreprocessorLast, bool VisitIncludedPreprocessingEntries = <computeroutput>false</computeroutput>
, SourceRange RegionOfInterest = <computeroutput>SourceRange()</computeroutput>
, bool VisitDeclsOnly = <computeroutput>false</computeroutput>
, <link linkend="_classclang_1_1cxcursor_1_1_cursor_visitor_1a519a469dc2dc65abfcd25963a5e9f23d">PostChildrenVisitorTy</link> PostChildrenVisitor = <computeroutput>nullptr</computeroutput>
)<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line <link linkend="__cursor_visitor_8h_source_1l00150">150</link> of file <link linkend="__cursor_visitor_8h_source">CursorVisitor.h</link>.</para>
<programlisting>00156 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;TU(TU),&#32;AU(cxtu::getASTUnit(TU)),&#32;Visitor(Visitor),
00157 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;PostChildrenVisitor(PostChildrenVisitor),&#32;ClientData(ClientData),
00158 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;VisitPreprocessorLast(VisitPreprocessorLast),
00159 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;VisitIncludedEntities(VisitIncludedPreprocessingEntries),
00160 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;RegionOfInterest(RegionOfInterest),&#32;VisitDeclsOnly(VisitDeclsOnly),
00161 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;DI_current(<emphasis role="keyword">nullptr</emphasis>),&#32;FileDI_current(<emphasis role="keyword">nullptr</emphasis>)&#32;{
00162 &#32;&#32;&#32;&#32;Parent.kind&#32;=&#32;CXCursor_NoDeclFound;
00163 &#32;&#32;&#32;&#32;Parent.data[0]&#32;=&#32;<emphasis role="keyword">nullptr</emphasis>;
00164 &#32;&#32;&#32;&#32;Parent.data[1]&#32;=&#32;<emphasis role="keyword">nullptr</emphasis>;
00165 &#32;&#32;&#32;&#32;Parent.data[2]&#32;=&#32;<emphasis role="keyword">nullptr</emphasis>;
00166 &#32;&#32;&#32;&#32;StmtParent&#32;=&#32;<emphasis role="keyword">nullptr</emphasis>;
00167 &#32;&#32;}
</programlisting>    </section><anchor xml:id="_classclang_1_1cxcursor_1_1_cursor_visitor_1ab7063cb2edd7c820d52c23d2a2151a15"/>    <section>
    <title>~CursorVisitor()</title>
<indexterm><primary>~CursorVisitor</primary><secondary>clang::cxcursor::CursorVisitor</secondary></indexterm>
<indexterm><primary>clang::cxcursor::CursorVisitor</primary><secondary>~CursorVisitor</secondary></indexterm>
<para><computeroutput>clang::cxcursor::CursorVisitor::~CursorVisitor ( )<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line <link linkend="__cursor_visitor_8h_source_1l00169">169</link> of file <link linkend="__cursor_visitor_8h_source">CursorVisitor.h</link>.</para>
<programlisting>00169 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00170 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Free&#32;the&#32;pre-allocated&#32;worklists&#32;for&#32;data-recursion.</emphasis>
00171 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(SmallVectorImpl&lt;VisitorWorkList&#32;*&gt;::iterator&#32;I&#32;=&#32;WorkListCache.begin(),
00172 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;E&#32;=&#32;WorkListCache.end();
00173 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;I&#32;!=&#32;E;&#32;++I)&#32;{
00174 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">delete</emphasis>&#32;*I;
00175 &#32;&#32;&#32;&#32;}
00176 &#32;&#32;}
</programlisting></section>
</section>
<section>
<title>Member Function Documentation</title>
<anchor xml:id="_classclang_1_1cxcursor_1_1_cursor_visitor_1a7a599a85807e447ee974ccd7a65163cc"/>    <section>
    <title>EnqueueWorkList()</title>
<indexterm><primary>EnqueueWorkList</primary><secondary>clang::cxcursor::CursorVisitor</secondary></indexterm>
<indexterm><primary>clang::cxcursor::CursorVisitor</primary><secondary>EnqueueWorkList</secondary></indexterm>
<para><computeroutput>void CursorVisitor::EnqueueWorkList (<link linkend="_namespaceclang_1_1cxcursor_1aab4e24121016c9d383e539a5938cb528">VisitorWorkList</link> &amp; WL, const Stmt * S)</computeroutput></para><para>
Definition at line <link linkend="__c_index_8cpp_source_1l03149">3149</link> of file <link linkend="__c_index_8cpp_source">CIndex.cpp</link>.</para>
<programlisting>03149 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
03150 &#32;&#32;EnqueueVisitor(WL,&#32;<link linkend="_namespaceclang_1_1cxcursor_1ab61ec2059175833672e8e78a376bb218">MakeCXCursor</link>(S,&#32;StmtParent,&#32;TU,&#32;RegionOfInterest))
03151 &#32;&#32;&#32;&#32;&#32;&#32;.Visit(S);
03152 }
</programlisting><para>
References <link linkend="_namespaceclang_1_1cxcursor_1ab61ec2059175833672e8e78a376bb218">clang::cxcursor::MakeCXCursor()</link>.</para>
    </section><anchor xml:id="_classclang_1_1cxcursor_1_1_cursor_visitor_1a15a5897204e1c9d037e412c6f94df2a1"/>    <section>
    <title>getASTUnit()</title>
<indexterm><primary>getASTUnit</primary><secondary>clang::cxcursor::CursorVisitor</secondary></indexterm>
<indexterm><primary>clang::cxcursor::CursorVisitor</primary><secondary>getASTUnit</secondary></indexterm>
<para><computeroutput>ASTUnit* clang::cxcursor::CursorVisitor::getASTUnit ( ) const<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line <link linkend="__cursor_visitor_8h_source_1l00178">178</link> of file <link linkend="__cursor_visitor_8h_source">CursorVisitor.h</link>.</para>
<programlisting>00178 {&#32;<emphasis role="keywordflow">return</emphasis>&#32;AU;&#32;}
</programlisting>    </section><anchor xml:id="_classclang_1_1cxcursor_1_1_cursor_visitor_1a1d2d369b79d1f552fc3224c217990c80"/>    <section>
    <title>getTU()</title>
<indexterm><primary>getTU</primary><secondary>clang::cxcursor::CursorVisitor</secondary></indexterm>
<indexterm><primary>clang::cxcursor::CursorVisitor</primary><secondary>getTU</secondary></indexterm>
<para><computeroutput>CXTranslationUnit clang::cxcursor::CursorVisitor::getTU ( ) const<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line <link linkend="__cursor_visitor_8h_source_1l00179">179</link> of file <link linkend="__cursor_visitor_8h_source">CursorVisitor.h</link>.</para>
<programlisting>00179 {&#32;<emphasis role="keywordflow">return</emphasis>&#32;TU;&#32;}
</programlisting>    </section><anchor xml:id="_classclang_1_1cxcursor_1_1_cursor_visitor_1a8551795875ea0a81cce4cad0becbe683"/>    <section>
    <title>IsInRegionOfInterest()</title>
<indexterm><primary>IsInRegionOfInterest</primary><secondary>clang::cxcursor::CursorVisitor</secondary></indexterm>
<indexterm><primary>clang::cxcursor::CursorVisitor</primary><secondary>IsInRegionOfInterest</secondary></indexterm>
<para><computeroutput>bool CursorVisitor::IsInRegionOfInterest (CXCursor C)</computeroutput></para><para>
Definition at line <link linkend="__c_index_8cpp_source_1l03154">3154</link> of file <link linkend="__c_index_8cpp_source">CIndex.cpp</link>.</para>
<programlisting>03154 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
03155 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(RegionOfInterest.isValid())&#32;{
03156 &#32;&#32;&#32;&#32;SourceRange&#32;Range&#32;=&#32;getRawCursorExtent(C);
03157 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(Range.isInvalid()&#32;||&#32;CompareRegionOfInterest(Range))
03158 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
03159 &#32;&#32;}
03160 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
03161 }
</programlisting>    </section><anchor xml:id="_classclang_1_1cxcursor_1_1_cursor_visitor_1a63c6b8681070b8b8ae976c37ae90d2a5"/>    <section>
    <title>RunVisitorWorkList()</title>
<indexterm><primary>RunVisitorWorkList</primary><secondary>clang::cxcursor::CursorVisitor</secondary></indexterm>
<indexterm><primary>clang::cxcursor::CursorVisitor</primary><secondary>RunVisitorWorkList</secondary></indexterm>
<para><computeroutput>bool CursorVisitor::RunVisitorWorkList (<link linkend="_namespaceclang_1_1cxcursor_1aab4e24121016c9d383e539a5938cb528">VisitorWorkList</link> &amp; WL)</computeroutput></para><para>
Definition at line <link linkend="__c_index_8cpp_source_1l03163">3163</link> of file <link linkend="__c_index_8cpp_source">CIndex.cpp</link>.</para>
<programlisting>03163 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
03164 &#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(!WL.empty())&#32;{
03165 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Dequeue&#32;the&#32;worklist&#32;item.</emphasis>
03166 &#32;&#32;&#32;&#32;<link linkend="_classclang_1_1cxcursor_1_1_visitor_job">VisitorJob</link>&#32;LI&#32;=&#32;WL.pop_back_val();
03167 
03168 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Set&#32;the&#32;Parent&#32;field,&#32;then&#32;back&#32;to&#32;its&#32;old&#32;value&#32;once&#32;we&apos;re&#32;done.</emphasis>
03169 &#32;&#32;&#32;&#32;SetParentRAII&#32;SetParent(Parent,&#32;StmtParent,&#32;LI.<link linkend="_classclang_1_1cxcursor_1_1_visitor_job_1a8d36560caf6be3218295b091a0bcdd55">getParent</link>());
03170 
03171 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(LI.<link linkend="_classclang_1_1cxcursor_1_1_visitor_job_1aee9fca3379d1821e847ce816fef67219">getKind</link>())&#32;{
03172 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_classclang_1_1cxcursor_1_1_visitor_job_1a358d276241e4b5c9c75c3b0c66b0bf92a0015180e463167d7078aa0dc78c224e1">VisitorJob::DeclVisitKind</link>:&#32;{
03173 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;Decl&#32;*D&#32;=&#32;cast&lt;DeclVisit&gt;(&amp;LI)-&gt;get();
03174 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!D)
03175 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">continue</emphasis>;
03176 
03177 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;For&#32;now,&#32;perform&#32;default&#32;visitation&#32;for&#32;Decls.</emphasis>
03178 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_classclang_1_1cxcursor_1_1_cursor_visitor_1a01659df2ce565980ce5b581ba7a970e3">Visit</link>(<link linkend="_namespaceclang_1_1cxcursor_1ab61ec2059175833672e8e78a376bb218">MakeCXCursor</link>(D,&#32;TU,&#32;RegionOfInterest,
03179 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cast&lt;DeclVisit&gt;(&amp;LI)-&gt;isFirst())))
03180 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
03181 
03182 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">continue</emphasis>;
03183 &#32;&#32;&#32;&#32;}
03184 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_classclang_1_1cxcursor_1_1_visitor_job_1a358d276241e4b5c9c75c3b0c66b0bf92a11d9fe5081d3b5eb885fea33416255c6">VisitorJob::ExplicitTemplateArgsVisitKind</link>:&#32;{
03185 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;TemplateArgumentLoc&#32;&amp;Arg&#32;:
03186 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*cast&lt;ExplicitTemplateArgsVisit&gt;(&amp;LI))&#32;{
03187 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_classclang_1_1cxcursor_1_1_cursor_visitor_1a4a8570d91cfdf0c794c0457c447d49e3">VisitTemplateArgumentLoc</link>(Arg))
03188 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
03189 &#32;&#32;&#32;&#32;&#32;&#32;}
03190 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">continue</emphasis>;
03191 &#32;&#32;&#32;&#32;}
03192 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_classclang_1_1cxcursor_1_1_visitor_job_1a358d276241e4b5c9c75c3b0c66b0bf92adf5c1ced13d3d596c10acfa648a1f752">VisitorJob::TypeLocVisitKind</link>:&#32;{
03193 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Perform&#32;default&#32;visitation&#32;for&#32;TypeLocs.</emphasis>
03194 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_classclang_1_1cxcursor_1_1_cursor_visitor_1a01659df2ce565980ce5b581ba7a970e3">Visit</link>(cast&lt;TypeLocVisit&gt;(&amp;LI)-&gt;<link linkend="_namespacestartfile_1af8790d592af0bdf089efd317cbd70e2e">get</link>()))
03195 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
03196 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">continue</emphasis>;
03197 &#32;&#32;&#32;&#32;}
03198 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_classclang_1_1cxcursor_1_1_visitor_job_1a358d276241e4b5c9c75c3b0c66b0bf92aa00295bf354768aeca538fa4dc91e161">VisitorJob::LabelRefVisitKind</link>:&#32;{
03199 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;LabelDecl&#32;*LS&#32;=&#32;cast&lt;LabelRefVisit&gt;(&amp;LI)-&gt;get();
03200 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(LabelStmt&#32;*stmt&#32;=&#32;LS-&gt;getStmt())&#32;{
03201 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_classclang_1_1cxcursor_1_1_cursor_visitor_1a01659df2ce565980ce5b581ba7a970e3">Visit</link>(<link linkend="_namespaceclang_1_1cxcursor_1a2e83069419ec783a32e4ee2b67d5144a">MakeCursorLabelRef</link>(stmt,&#32;cast&lt;LabelRefVisit&gt;(&amp;LI)-&gt;getLoc(),
03202 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;TU)))&#32;{
03203 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
03204 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
03205 &#32;&#32;&#32;&#32;&#32;&#32;}
03206 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">continue</emphasis>;
03207 &#32;&#32;&#32;&#32;}
03208 
03209 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_classclang_1_1cxcursor_1_1_visitor_job_1a358d276241e4b5c9c75c3b0c66b0bf92a4c1fcd74e3dd7d6c199bf1cbbee68cd1">VisitorJob::NestedNameSpecifierLocVisitKind</link>:&#32;{
03210 &#32;&#32;&#32;&#32;&#32;&#32;NestedNameSpecifierLocVisit&#32;*V&#32;=&#32;cast&lt;NestedNameSpecifierLocVisit&gt;(&amp;LI);
03211 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_classclang_1_1cxcursor_1_1_cursor_visitor_1a7b754c2b2db487a1286e47d1134365bf">VisitNestedNameSpecifierLoc</link>(V-&gt;get()))
03212 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
03213 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">continue</emphasis>;
03214 &#32;&#32;&#32;&#32;}
03215 
03216 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_classclang_1_1cxcursor_1_1_visitor_job_1a358d276241e4b5c9c75c3b0c66b0bf92af50cf21f078e11e9193efa61e3e27956">VisitorJob::DeclarationNameInfoVisitKind</link>:&#32;{
03217 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_classclang_1_1cxcursor_1_1_cursor_visitor_1adc36610328af99cbbd2f06d7f0292ec9">VisitDeclarationNameInfo</link>(cast&lt;DeclarationNameInfoVisit&gt;(&amp;LI)-&gt;<link linkend="_namespacestartfile_1af8790d592af0bdf089efd317cbd70e2e">get</link>()))
03218 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
03219 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">continue</emphasis>;
03220 &#32;&#32;&#32;&#32;}
03221 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_classclang_1_1cxcursor_1_1_visitor_job_1a358d276241e4b5c9c75c3b0c66b0bf92a46e96453a10977baa1239dde989c9e1f">VisitorJob::MemberRefVisitKind</link>:&#32;{
03222 &#32;&#32;&#32;&#32;&#32;&#32;MemberRefVisit&#32;*V&#32;=&#32;cast&lt;MemberRefVisit&gt;(&amp;LI);
03223 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_classclang_1_1cxcursor_1_1_cursor_visitor_1a01659df2ce565980ce5b581ba7a970e3">Visit</link>(<link linkend="_namespaceclang_1_1cxcursor_1ad70c49c226f87377bc26fba7a4dbe973">MakeCursorMemberRef</link>(V-&gt;get(),&#32;V-&gt;getLoc(),&#32;TU)))
03224 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
03225 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">continue</emphasis>;
03226 &#32;&#32;&#32;&#32;}
03227 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_classclang_1_1cxcursor_1_1_visitor_job_1a358d276241e4b5c9c75c3b0c66b0bf92ac10e8d81ba4dec533c3597bde1e0e628">VisitorJob::StmtVisitKind</link>:&#32;{
03228 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;Stmt&#32;*S&#32;=&#32;cast&lt;StmtVisit&gt;(&amp;LI)-&gt;get();
03229 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!S)
03230 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">continue</emphasis>;
03231 
03232 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Update&#32;the&#32;current&#32;cursor.</emphasis>
03233 &#32;&#32;&#32;&#32;&#32;&#32;CXCursor&#32;Cursor&#32;=&#32;<link linkend="_namespaceclang_1_1cxcursor_1ab61ec2059175833672e8e78a376bb218">MakeCXCursor</link>(S,&#32;StmtParent,&#32;TU,&#32;RegionOfInterest);
03234 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!<link linkend="_classclang_1_1cxcursor_1_1_cursor_visitor_1a8551795875ea0a81cce4cad0becbe683">IsInRegionOfInterest</link>(Cursor))
03235 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">continue</emphasis>;
03236 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(Visitor(Cursor,&#32;Parent,&#32;ClientData))&#32;{
03237 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXChildVisit_Break:
03238 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
03239 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXChildVisit_Continue:
03240 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
03241 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXChildVisit_Recurse:
03242 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(PostChildrenVisitor)
03243 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;WL.push_back(PostChildrenVisit(<emphasis role="keyword">nullptr</emphasis>,&#32;Cursor));
03244 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classclang_1_1cxcursor_1_1_cursor_visitor_1a7a599a85807e447ee974ccd7a65163cc">EnqueueWorkList</link>(WL,&#32;S);
03245 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
03246 &#32;&#32;&#32;&#32;&#32;&#32;}
03247 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">continue</emphasis>;
03248 &#32;&#32;&#32;&#32;}
03249 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_classclang_1_1cxcursor_1_1_visitor_job_1a358d276241e4b5c9c75c3b0c66b0bf92a910d3000d5ebd97697b1b2f09ccaf12b">VisitorJob::MemberExprPartsKind</link>:&#32;{
03250 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Handle&#32;the&#32;other&#32;pieces&#32;in&#32;the&#32;MemberExpr&#32;besides&#32;the&#32;base.</emphasis>
03251 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;MemberExpr&#32;*M&#32;=&#32;cast&lt;MemberExprParts&gt;(&amp;LI)-&gt;get();
03252 
03253 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Visit&#32;the&#32;nested-name-specifier</emphasis>
03254 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(NestedNameSpecifierLoc&#32;QualifierLoc&#32;=&#32;M-&gt;getQualifierLoc())
03255 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_classclang_1_1cxcursor_1_1_cursor_visitor_1a7b754c2b2db487a1286e47d1134365bf">VisitNestedNameSpecifierLoc</link>(QualifierLoc))
03256 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
03257 
03258 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Visit&#32;the&#32;declaration&#32;name.</emphasis>
03259 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_classclang_1_1cxcursor_1_1_cursor_visitor_1adc36610328af99cbbd2f06d7f0292ec9">VisitDeclarationNameInfo</link>(M-&gt;getMemberNameInfo()))
03260 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
03261 
03262 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Visit&#32;the&#32;explicitly-specified&#32;template&#32;arguments,&#32;if&#32;any.</emphasis>
03263 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(M-&gt;hasExplicitTemplateArgs())&#32;{
03264 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;TemplateArgumentLoc&#32;*Arg&#32;=&#32;M-&gt;getTemplateArgs(),
03265 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*ArgEnd&#32;=&#32;Arg&#32;+&#32;M-&gt;getNumTemplateArgs();
03266 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Arg&#32;!=&#32;ArgEnd;&#32;++Arg)&#32;{
03267 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_classclang_1_1cxcursor_1_1_cursor_visitor_1a4a8570d91cfdf0c794c0457c447d49e3">VisitTemplateArgumentLoc</link>(*Arg))
03268 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
03269 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
03270 &#32;&#32;&#32;&#32;&#32;&#32;}
03271 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">continue</emphasis>;
03272 &#32;&#32;&#32;&#32;}
03273 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_classclang_1_1cxcursor_1_1_visitor_job_1a358d276241e4b5c9c75c3b0c66b0bf92a5e20f10863531934b9ceb8161fe1d8c5">VisitorJob::DeclRefExprPartsKind</link>:&#32;{
03274 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;DeclRefExpr&#32;*DR&#32;=&#32;cast&lt;DeclRefExprParts&gt;(&amp;LI)-&gt;get();
03275 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Visit&#32;nested-name-specifier,&#32;if&#32;present.</emphasis>
03276 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(NestedNameSpecifierLoc&#32;QualifierLoc&#32;=&#32;DR-&gt;getQualifierLoc())
03277 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_classclang_1_1cxcursor_1_1_cursor_visitor_1a7b754c2b2db487a1286e47d1134365bf">VisitNestedNameSpecifierLoc</link>(QualifierLoc))
03278 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
03279 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Visit&#32;declaration&#32;name.</emphasis>
03280 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_classclang_1_1cxcursor_1_1_cursor_visitor_1adc36610328af99cbbd2f06d7f0292ec9">VisitDeclarationNameInfo</link>(DR-&gt;getNameInfo()))
03281 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
03282 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">continue</emphasis>;
03283 &#32;&#32;&#32;&#32;}
03284 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_classclang_1_1cxcursor_1_1_visitor_job_1a358d276241e4b5c9c75c3b0c66b0bf92ad8e8e069a830483f331118386e97cc07">VisitorJob::OverloadExprPartsKind</link>:&#32;{
03285 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;OverloadExpr&#32;*O&#32;=&#32;cast&lt;OverloadExprParts&gt;(&amp;LI)-&gt;get();
03286 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Visit&#32;the&#32;nested-name-specifier.</emphasis>
03287 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(NestedNameSpecifierLoc&#32;QualifierLoc&#32;=&#32;O-&gt;getQualifierLoc())
03288 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_classclang_1_1cxcursor_1_1_cursor_visitor_1a7b754c2b2db487a1286e47d1134365bf">VisitNestedNameSpecifierLoc</link>(QualifierLoc))
03289 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
03290 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Visit&#32;the&#32;declaration&#32;name.</emphasis>
03291 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_classclang_1_1cxcursor_1_1_cursor_visitor_1adc36610328af99cbbd2f06d7f0292ec9">VisitDeclarationNameInfo</link>(O-&gt;getNameInfo()))
03292 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
03293 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Visit&#32;the&#32;overloaded&#32;declaration&#32;reference.</emphasis>
03294 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_classclang_1_1cxcursor_1_1_cursor_visitor_1a01659df2ce565980ce5b581ba7a970e3">Visit</link>(<link linkend="_namespaceclang_1_1cxcursor_1a631225e024301b99cc72be73f0ee9271">MakeCursorOverloadedDeclRef</link>(O,&#32;TU)))
03295 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
03296 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">continue</emphasis>;
03297 &#32;&#32;&#32;&#32;}
03298 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_classclang_1_1cxcursor_1_1_visitor_job_1a358d276241e4b5c9c75c3b0c66b0bf92a5c3c2fc52d5a307d1cb3e5b7f259be6d">VisitorJob::SizeOfPackExprPartsKind</link>:&#32;{
03299 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;SizeOfPackExpr&#32;*E&#32;=&#32;cast&lt;SizeOfPackExprParts&gt;(&amp;LI)-&gt;get();
03300 &#32;&#32;&#32;&#32;&#32;&#32;NamedDecl&#32;*Pack&#32;=&#32;E-&gt;getPack();
03301 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(isa&lt;TemplateTypeParmDecl&gt;(Pack))&#32;{
03302 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_classclang_1_1cxcursor_1_1_cursor_visitor_1a01659df2ce565980ce5b581ba7a970e3">Visit</link>(<link linkend="_namespaceclang_1_1cxcursor_1a3534c264c1431ec3d09c975fcafa263d">MakeCursorTypeRef</link>(cast&lt;TemplateTypeParmDecl&gt;(Pack),
03303 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;E-&gt;getPackLoc(),&#32;TU)))
03304 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
03305 
03306 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">continue</emphasis>;
03307 &#32;&#32;&#32;&#32;&#32;&#32;}
03308 
03309 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(isa&lt;TemplateTemplateParmDecl&gt;(Pack))&#32;{
03310 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_classclang_1_1cxcursor_1_1_cursor_visitor_1a01659df2ce565980ce5b581ba7a970e3">Visit</link>(<link linkend="_namespaceclang_1_1cxcursor_1ac63e4fd5fdbaf88d0632a7682afbf744">MakeCursorTemplateRef</link>(cast&lt;TemplateTemplateParmDecl&gt;(Pack),
03311 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;E-&gt;getPackLoc(),&#32;TU)))
03312 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
03313 
03314 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">continue</emphasis>;
03315 &#32;&#32;&#32;&#32;&#32;&#32;}
03316 
03317 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Non-type&#32;template&#32;parameter&#32;packs&#32;and&#32;function&#32;parameter&#32;packs&#32;are</emphasis>
03318 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;treated&#32;like&#32;DeclRefExpr&#32;cursors.</emphasis>
03319 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">continue</emphasis>;
03320 &#32;&#32;&#32;&#32;}
03321 
03322 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_classclang_1_1cxcursor_1_1_visitor_job_1a358d276241e4b5c9c75c3b0c66b0bf92a2a8543019a911441dc8f45307db4cc1a">VisitorJob::LambdaExprPartsKind</link>:&#32;{
03323 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Visit&#32;non-init&#32;captures.</emphasis>
03324 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;LambdaExpr&#32;*E&#32;=&#32;cast&lt;LambdaExprParts&gt;(&amp;LI)-&gt;get();
03325 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(LambdaExpr::capture_iterator&#32;C&#32;=&#32;E-&gt;explicit_capture_begin(),
03326 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;CEnd&#32;=&#32;E-&gt;explicit_capture_end();
03327 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;C&#32;!=&#32;CEnd;&#32;++C)&#32;{
03328 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!C-&gt;capturesVariable())
03329 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">continue</emphasis>;
03330 
03331 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_classclang_1_1cxcursor_1_1_cursor_visitor_1a01659df2ce565980ce5b581ba7a970e3">Visit</link>(<link linkend="_namespaceclang_1_1cxcursor_1abb9724d664f29289d46fb5b34eaf94e9">MakeCursorVariableRef</link>(C-&gt;getCapturedVar(),&#32;C-&gt;getLocation(),
03332 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;TU)))
03333 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
03334 &#32;&#32;&#32;&#32;&#32;&#32;}
03335 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Visit&#32;init&#32;captures</emphasis>
03336 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">auto</emphasis>&#32;InitExpr&#32;:&#32;E-&gt;capture_inits())&#32;{
03337 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(InitExpr&#32;&amp;&amp;&#32;<link linkend="_classclang_1_1cxcursor_1_1_cursor_visitor_1a01659df2ce565980ce5b581ba7a970e3">Visit</link>(InitExpr))
03338 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
03339 &#32;&#32;&#32;&#32;&#32;&#32;}
03340 
03341 &#32;&#32;&#32;&#32;&#32;&#32;TypeLoc&#32;TL&#32;=&#32;E-&gt;getCallOperator()-&gt;getTypeSourceInfo()-&gt;getTypeLoc();
03342 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Visit&#32;parameters&#32;and&#32;return&#32;type,&#32;if&#32;present.</emphasis>
03343 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(FunctionTypeLoc&#32;Proto&#32;=&#32;TL.getAs&lt;FunctionProtoTypeLoc&gt;())&#32;{
03344 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(E-&gt;hasExplicitParameters())&#32;{
03345 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Visit&#32;parameters.</emphasis>
03346 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">unsigned</emphasis>&#32;I&#32;=&#32;0,&#32;N&#32;=&#32;Proto.getNumParams();&#32;I&#32;!=&#32;N;&#32;++I)
03347 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_classclang_1_1cxcursor_1_1_cursor_visitor_1a01659df2ce565980ce5b581ba7a970e3">Visit</link>(<link linkend="_namespaceclang_1_1cxcursor_1ab61ec2059175833672e8e78a376bb218">MakeCXCursor</link>(Proto.getParam(I),&#32;TU)))
03348 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
03349 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
03350 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(E-&gt;hasExplicitResultType())&#32;{
03351 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Visit&#32;result&#32;type.</emphasis>
03352 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_classclang_1_1cxcursor_1_1_cursor_visitor_1a01659df2ce565980ce5b581ba7a970e3">Visit</link>(Proto.getReturnLoc()))
03353 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
03354 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
03355 &#32;&#32;&#32;&#32;&#32;&#32;}
03356 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
03357 &#32;&#32;&#32;&#32;}
03358 
03359 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_classclang_1_1cxcursor_1_1_visitor_job_1a358d276241e4b5c9c75c3b0c66b0bf92a159dff551be5f538e44f7811d92f102b">VisitorJob::PostChildrenVisitKind</link>:
03360 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(PostChildrenVisitor(Parent,&#32;ClientData))
03361 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
03362 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
03363 &#32;&#32;&#32;&#32;}
03364 &#32;&#32;}
03365 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
03366 }
</programlisting><para>
References <link linkend="__cursor_visitor_8h_source_1l00036">clang::cxcursor::VisitorJob::DeclarationNameInfoVisitKind</link>, <link linkend="__cursor_visitor_8h_source_1l00027">clang::cxcursor::VisitorJob::DeclVisitKind</link>, <link linkend="__cursor_visitor_8h_source_1l00034">clang::cxcursor::VisitorJob::ExplicitTemplateArgsVisitKind</link>, <link linkend="_startfile_8py_source_1l00181">startfile::get()</link>, <link linkend="__cursor_visitor_8h_source_1l00056">clang::cxcursor::VisitorJob::getKind()</link>, <link linkend="__cursor_visitor_8h_source_1l00057">clang::cxcursor::VisitorJob::getParent()</link>, <link linkend="__cursor_visitor_8h_source_1l00033">clang::cxcursor::VisitorJob::LabelRefVisitKind</link>, <link linkend="__c_x_cursor_8cpp_source_1l01045">clang::cxcursor::MakeCursorLabelRef()</link>, <link linkend="__c_x_cursor_8cpp_source_1l00947">clang::cxcursor::MakeCursorMemberRef()</link>, <link linkend="_namespaceclang_1_1cxcursor_1ab61ec2059175833672e8e78a376bb218">clang::cxcursor::MakeCXCursor()</link>, <link linkend="__cursor_visitor_8h_source_1l00037">clang::cxcursor::VisitorJob::MemberRefVisitKind</link>, <link linkend="__cursor_visitor_8h_source_1l00035">clang::cxcursor::VisitorJob::NestedNameSpecifierLocVisitKind</link>, <link linkend="__cursor_visitor_8h_source_1l00028">clang::cxcursor::VisitorJob::StmtVisitKind</link>, and <link linkend="__cursor_visitor_8h_source_1l00030">clang::cxcursor::VisitorJob::TypeLocVisitKind</link>.</para>
    </section><anchor xml:id="_classclang_1_1cxcursor_1_1_cursor_visitor_1a31db49ad4d23960990fa744b69517c0d"/>    <section>
    <title>shouldVisitCursor()</title>
<indexterm><primary>shouldVisitCursor</primary><secondary>clang::cxcursor::CursorVisitor</secondary></indexterm>
<indexterm><primary>clang::cxcursor::CursorVisitor</primary><secondary>shouldVisitCursor</secondary></indexterm>
<para><computeroutput>Optional&lt; bool &gt; CursorVisitor::shouldVisitCursor (CXCursor C)</computeroutput></para><para>
Definition at line <link linkend="__c_index_8cpp_source_1l00602">602</link> of file <link linkend="__c_index_8cpp_source">CIndex.cpp</link>.</para>
<programlisting>00602 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00603 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(RegionOfInterest.isValid())&#32;{
00604 &#32;&#32;&#32;&#32;SourceRange&#32;Range&#32;=&#32;getFullCursorExtent(Cursor,&#32;AU-&gt;getSourceManager());
00605 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(Range.isInvalid())
00606 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;None;
00607 
00608 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(CompareRegionOfInterest(Range))&#32;{
00609 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="__index___internal_8h_1afca6208bdc188ac29b169260314b7af2a1626bf1782f58fe2a2bf082c4c30e850">RangeBefore</link>:
00610 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;This&#32;declaration&#32;comes&#32;before&#32;the&#32;region&#32;of&#32;interest;&#32;skip&#32;it.</emphasis>
00611 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;None;
00612 
00613 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="__index___internal_8h_1afca6208bdc188ac29b169260314b7af2a7540aa4ebed8662d6f41ec33073611a0">RangeAfter</link>:
00614 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;This&#32;declaration&#32;comes&#32;after&#32;the&#32;region&#32;of&#32;interest;&#32;we&apos;re&#32;done.</emphasis>
00615 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
00616 
00617 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="__index___internal_8h_1afca6208bdc188ac29b169260314b7af2a87e2eee30c9b5a3c2108f2128413157a">RangeOverlap</link>:
00618 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;This&#32;declaration&#32;overlaps&#32;the&#32;region&#32;of&#32;interest;&#32;visit&#32;it.</emphasis>
00619 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
00620 &#32;&#32;&#32;&#32;}
00621 &#32;&#32;}
00622 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
00623 }
</programlisting>    </section><anchor xml:id="_classclang_1_1cxcursor_1_1_cursor_visitor_1a4fdbc31529cd9171bac1ff4a347db1a6"/>    <section>
    <title>shouldVisitIncludedEntities()</title>
<indexterm><primary>shouldVisitIncludedEntities</primary><secondary>clang::cxcursor::CursorVisitor</secondary></indexterm>
<indexterm><primary>clang::cxcursor::CursorVisitor</primary><secondary>shouldVisitIncludedEntities</secondary></indexterm>
<para><computeroutput>bool clang::cxcursor::CursorVisitor::shouldVisitIncludedEntities ( ) const<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line <link linkend="__cursor_visitor_8h_source_1l00189">189</link> of file <link linkend="__cursor_visitor_8h_source">CursorVisitor.h</link>.</para>
<programlisting>00189 {&#32;<emphasis role="keywordflow">return</emphasis>&#32;VisitIncludedEntities;&#32;}
</programlisting>    </section><anchor xml:id="_classclang_1_1cxcursor_1_1_cursor_visitor_1a3d3842cdc75f63217a1146b02a2e8d8d"/>    <section>
    <title>Visit()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>Visit</primary><secondary>clang::cxcursor::CursorVisitor</secondary></indexterm>
<indexterm><primary>clang::cxcursor::CursorVisitor</primary><secondary>Visit</secondary></indexterm>
<para><computeroutput>bool CursorVisitor::Visit (const Stmt * S)</computeroutput></para><para>
Definition at line <link linkend="__c_index_8cpp_source_1l03368">3368</link> of file <link linkend="__c_index_8cpp_source">CIndex.cpp</link>.</para>
<programlisting>03368 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
03369 &#32;&#32;<link linkend="_namespaceclang_1_1cxcursor_1aab4e24121016c9d383e539a5938cb528">VisitorWorkList</link>&#32;*WL&#32;=&#32;<emphasis role="keyword">nullptr</emphasis>;
03370 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!WorkListFreeList.empty())&#32;{
03371 &#32;&#32;&#32;&#32;WL&#32;=&#32;WorkListFreeList.back();
03372 &#32;&#32;&#32;&#32;WL-&gt;clear();
03373 &#32;&#32;&#32;&#32;WorkListFreeList.pop_back();
03374 &#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
03375 &#32;&#32;&#32;&#32;WL&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_namespaceclang_1_1cxcursor_1aab4e24121016c9d383e539a5938cb528">VisitorWorkList</link>();
03376 &#32;&#32;&#32;&#32;WorkListCache.push_back(WL);
03377 &#32;&#32;}
03378 &#32;&#32;<link linkend="_classclang_1_1cxcursor_1_1_cursor_visitor_1a7a599a85807e447ee974ccd7a65163cc">EnqueueWorkList</link>(*WL,&#32;S);
03379 &#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;result&#32;=&#32;<link linkend="_classclang_1_1cxcursor_1_1_cursor_visitor_1a63c6b8681070b8b8ae976c37ae90d2a5">RunVisitorWorkList</link>(*WL);
03380 &#32;&#32;WorkListFreeList.push_back(WL);
03381 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;result;
03382 }
</programlisting>    </section><anchor xml:id="_classclang_1_1cxcursor_1_1_cursor_visitor_1a01659df2ce565980ce5b581ba7a970e3"/>    <section>
    <title>Visit()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>Visit</primary><secondary>clang::cxcursor::CursorVisitor</secondary></indexterm>
<indexterm><primary>clang::cxcursor::CursorVisitor</primary><secondary>Visit</secondary></indexterm>
<para><computeroutput>bool CursorVisitor::Visit (CXCursor Cursor, bool CheckedRegionOfInterest = <computeroutput>false</computeroutput>
)</computeroutput></para>
<para>Visit the given cursor and, if requested by the visitor, its children.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>Cursor</entry>
                                <entry>
<para>the cursor to visit.</para>
</entry>
                            </row>
                            <row>
                                <entry>CheckedRegionOfInterest</entry>
                                <entry>
<para>if true, then the caller already checked that this cursor is within the region of interest.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>true if the visitation should be aborted, false if it should continue. </para>
</formalpara>
</para>
<para>
Definition at line <link linkend="__c_index_8cpp_source_1l00194">194</link> of file <link linkend="__c_index_8cpp_source">CIndex.cpp</link>.</para>
<programlisting>00194 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00195 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="__c_index_8cpp_1a0c5b391d8bca745084fb8906cce6f66c">clang_isInvalid</link>(Cursor.kind))
00196 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
00197 
00198 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="__c_index_8cpp_1a5d47db8f608ae0c266d6551875d46b80">clang_isDeclaration</link>(Cursor.kind))&#32;{
00199 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;Decl&#32;*D&#32;=&#32;<link linkend="_namespaceclang_1_1cxcursor_1a1f702246831c96afd990e457613dc642">getCursorDecl</link>(Cursor);
00200 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!D)&#32;{
00201 &#32;&#32;&#32;&#32;&#32;&#32;assert(0&#32;&amp;&amp;&#32;<emphasis role="stringliteral">&quot;Invalid&#32;declaration&#32;cursor&quot;</emphasis>);
00202 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;&#32;<emphasis role="comment">//&#32;abort.</emphasis>
00203 &#32;&#32;&#32;&#32;}
00204 
00205 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Ignore&#32;implicit&#32;declarations,&#32;unless&#32;it&apos;s&#32;an&#32;objc&#32;method&#32;because</emphasis>
00206 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;currently&#32;we&#32;should&#32;report&#32;implicit&#32;methods&#32;for&#32;properties&#32;when&#32;indexing.</emphasis>
00207 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(D-&gt;isImplicit()&#32;&amp;&amp;&#32;!isa&lt;ObjCMethodDecl&gt;(D))
00208 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
00209 &#32;&#32;}
00210 
00211 &#32;&#32;<emphasis role="comment">//&#32;If&#32;we&#32;have&#32;a&#32;range&#32;of&#32;interest,&#32;and&#32;this&#32;cursor&#32;doesn&apos;t&#32;intersect&#32;with&#32;it,</emphasis>
00212 &#32;&#32;<emphasis role="comment">//&#32;we&apos;re&#32;done.</emphasis>
00213 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(RegionOfInterest.isValid()&#32;&amp;&amp;&#32;!CheckedRegionOfInterest)&#32;{
00214 &#32;&#32;&#32;&#32;SourceRange&#32;Range&#32;=&#32;getRawCursorExtent(Cursor);
00215 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(Range.isInvalid()&#32;||&#32;CompareRegionOfInterest(Range))
00216 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
00217 &#32;&#32;}
00218 
00219 &#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(Visitor(Cursor,&#32;Parent,&#32;ClientData))&#32;{
00220 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXChildVisit_Break:
00221 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
00222 
00223 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXChildVisit_Continue:
00224 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
00225 
00226 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXChildVisit_Recurse:&#32;{
00227 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;ret&#32;=&#32;<link linkend="_classclang_1_1cxcursor_1_1_cursor_visitor_1ada34939666b6f90e3144f4624fc64896">VisitChildren</link>(Cursor);
00228 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(PostChildrenVisitor)
00229 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(PostChildrenVisitor(Cursor,&#32;ClientData))
00230 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
00231 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;ret;
00232 &#32;&#32;}
00233 &#32;&#32;}
00234 
00235 &#32;&#32;llvm_unreachable(<emphasis role="stringliteral">&quot;Invalid&#32;CXChildVisitResult!&quot;</emphasis>);
00236 }
</programlisting>    </section><anchor xml:id="_classclang_1_1cxcursor_1_1_cursor_visitor_1a15e1e593c973fb6611457f4a624d972c"/>    <section>
    <title>VisitArrayTypeLoc()</title>
<indexterm><primary>VisitArrayTypeLoc</primary><secondary>clang::cxcursor::CursorVisitor</secondary></indexterm>
<indexterm><primary>clang::cxcursor::CursorVisitor</primary><secondary>VisitArrayTypeLoc</secondary></indexterm>
<para><computeroutput>bool CursorVisitor::VisitArrayTypeLoc (ArrayTypeLoc TL)</computeroutput></para><para>
Definition at line <link linkend="__c_index_8cpp_source_1l01685">1685</link> of file <link linkend="__c_index_8cpp_source">CIndex.cpp</link>.</para>
<programlisting>01685 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
01686 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_classclang_1_1cxcursor_1_1_cursor_visitor_1a01659df2ce565980ce5b581ba7a970e3">Visit</link>(TL.getElementLoc()))
01687 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
01688 
01689 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(Expr&#32;*Size&#32;=&#32;TL.getSizeExpr())
01690 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classclang_1_1cxcursor_1_1_cursor_visitor_1a01659df2ce565980ce5b581ba7a970e3">Visit</link>(<link linkend="_namespaceclang_1_1cxcursor_1ab61ec2059175833672e8e78a376bb218">MakeCXCursor</link>(Size,&#32;StmtParent,&#32;TU,&#32;RegionOfInterest));
01691 
01692 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
01693 }
</programlisting><para>
References <link linkend="_namespaceclang_1_1cxcursor_1ab61ec2059175833672e8e78a376bb218">clang::cxcursor::MakeCXCursor()</link>.</para>
    </section><anchor xml:id="_classclang_1_1cxcursor_1_1_cursor_visitor_1a3e41de558520b72762489e950d35d0b8"/>    <section>
    <title>VisitAttributes()</title>
<indexterm><primary>VisitAttributes</primary><secondary>clang::cxcursor::CursorVisitor</secondary></indexterm>
<indexterm><primary>clang::cxcursor::CursorVisitor</primary><secondary>VisitAttributes</secondary></indexterm>
<para><computeroutput>bool CursorVisitor::VisitAttributes (Decl * D)</computeroutput></para><para>
Definition at line <link linkend="__c_index_8cpp_source_1l01836">1836</link> of file <link linkend="__c_index_8cpp_source">CIndex.cpp</link>.</para>
<programlisting>01836 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
01837 &#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;*I&#32;:&#32;D-&gt;attrs())
01838 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;((TU-&gt;ParsingOptions&#32;&amp;&#32;CXTranslationUnit_VisitImplicitAttributes&#32;||
01839 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;!I-&gt;isImplicit())&#32;&amp;&amp;
01840 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classclang_1_1cxcursor_1_1_cursor_visitor_1a01659df2ce565980ce5b581ba7a970e3">Visit</link>(<link linkend="_namespaceclang_1_1cxcursor_1ab61ec2059175833672e8e78a376bb218">MakeCXCursor</link>(I,&#32;D,&#32;TU)))
01841 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
01842 
01843 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
01844 }
</programlisting><para>
References <link linkend="_namespaceclang_1_1cxcursor_1ab61ec2059175833672e8e78a376bb218">clang::cxcursor::MakeCXCursor()</link>.</para>
    </section><anchor xml:id="_classclang_1_1cxcursor_1_1_cursor_visitor_1af1429e52aeadb9b4b1388fa7b1b1ddf4"/>    <section>
    <title>VisitBlockDecl()</title>
<indexterm><primary>VisitBlockDecl</primary><secondary>clang::cxcursor::CursorVisitor</secondary></indexterm>
<indexterm><primary>clang::cxcursor::CursorVisitor</primary><secondary>VisitBlockDecl</secondary></indexterm>
<para><computeroutput>bool CursorVisitor::VisitBlockDecl (BlockDecl * B)</computeroutput></para><para>
Definition at line <link linkend="__c_index_8cpp_source_1l00591">591</link> of file <link linkend="__c_index_8cpp_source">CIndex.cpp</link>.</para>
<programlisting>00591 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00592 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(TypeSourceInfo&#32;*TSInfo&#32;=&#32;B-&gt;getSignatureAsWritten())
00593 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_classclang_1_1cxcursor_1_1_cursor_visitor_1a01659df2ce565980ce5b581ba7a970e3">Visit</link>(TSInfo-&gt;getTypeLoc()))
00594 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
00595 
00596 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(Stmt&#32;*Body&#32;=&#32;B-&gt;getBody())
00597 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classclang_1_1cxcursor_1_1_cursor_visitor_1a01659df2ce565980ce5b581ba7a970e3">Visit</link>(<link linkend="_namespaceclang_1_1cxcursor_1ab61ec2059175833672e8e78a376bb218">MakeCXCursor</link>(Body,&#32;StmtParent,&#32;TU,&#32;RegionOfInterest));
00598 
00599 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
00600 }
</programlisting><para>
References <link linkend="_namespaceclang_1_1cxcursor_1ab61ec2059175833672e8e78a376bb218">clang::cxcursor::MakeCXCursor()</link>.</para>
    </section><anchor xml:id="_classclang_1_1cxcursor_1_1_cursor_visitor_1ada34939666b6f90e3144f4624fc64896"/>    <section>
    <title>VisitChildren()</title>
<indexterm><primary>VisitChildren</primary><secondary>clang::cxcursor::CursorVisitor</secondary></indexterm>
<indexterm><primary>clang::cxcursor::CursorVisitor</primary><secondary>VisitChildren</secondary></indexterm>
<para><computeroutput>bool CursorVisitor::VisitChildren (CXCursor Cursor)</computeroutput></para>
<para>Visit the children of the given cursor.</para>

<para><formalpara><title>Returns</title>

<para>true if the visitation should be aborted, false if it should continue. </para>
</formalpara>
</para>
<para>
Definition at line <link linkend="__c_index_8cpp_source_1l00492">492</link> of file <link linkend="__c_index_8cpp_source">CIndex.cpp</link>.</para>
<programlisting>00492 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00493 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="__c_index_8cpp_1a8b03541653a9373d35919c45216bc70f">clang_isReference</link>(Cursor.kind)&#32;&amp;&amp;
00494 &#32;&#32;&#32;&#32;&#32;&#32;Cursor.kind&#32;!=&#32;CXCursor_CXXBaseSpecifier)&#32;{
00495 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;By&#32;definition,&#32;references&#32;have&#32;no&#32;children.</emphasis>
00496 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
00497 &#32;&#32;}
00498 
00499 &#32;&#32;<emphasis role="comment">//&#32;Set&#32;the&#32;Parent&#32;field&#32;to&#32;Cursor,&#32;then&#32;back&#32;to&#32;its&#32;old&#32;value&#32;once&#32;we&apos;re</emphasis>
00500 &#32;&#32;<emphasis role="comment">//&#32;done.</emphasis>
00501 &#32;&#32;SetParentRAII&#32;SetParent(Parent,&#32;StmtParent,&#32;Cursor);
00502 
00503 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="__c_index_8cpp_1a5d47db8f608ae0c266d6551875d46b80">clang_isDeclaration</link>(Cursor.kind))&#32;{
00504 &#32;&#32;&#32;&#32;Decl&#32;*D&#32;=&#32;<emphasis role="keyword">const_cast&lt;</emphasis>Decl&#32;*<emphasis role="keyword">&gt;</emphasis>(<link linkend="_namespaceclang_1_1cxcursor_1a1f702246831c96afd990e457613dc642">getCursorDecl</link>(Cursor));
00505 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!D)
00506 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
00507 
00508 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classclang_1_1cxcursor_1_1_cursor_visitor_1a3e41de558520b72762489e950d35d0b8">VisitAttributes</link>(D)&#32;||&#32;<link linkend="_classclang_1_1cxcursor_1_1_cursor_visitor_1a01659df2ce565980ce5b581ba7a970e3">Visit</link>(D);
00509 &#32;&#32;}
00510 
00511 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="__c_index_8cpp_1af186bec30eb4cb63c3a7a295ccbcfe8b">clang_isStatement</link>(Cursor.kind))&#32;{
00512 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;Stmt&#32;*S&#32;=&#32;<link linkend="_namespaceclang_1_1cxcursor_1a2d5cb233204f81be58bd21deb628c7ad">getCursorStmt</link>(Cursor))
00513 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classclang_1_1cxcursor_1_1_cursor_visitor_1a01659df2ce565980ce5b581ba7a970e3">Visit</link>(S);
00514 
00515 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
00516 &#32;&#32;}
00517 
00518 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="__c_index_8cpp_1ab958945dd59c351e1ae1a3f7f5668095">clang_isExpression</link>(Cursor.kind))&#32;{
00519 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;Expr&#32;*E&#32;=&#32;<link linkend="_namespaceclang_1_1cxcursor_1a80837a3710c6df0dfc24b5ee1d94ff9b">getCursorExpr</link>(Cursor))
00520 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classclang_1_1cxcursor_1_1_cursor_visitor_1a01659df2ce565980ce5b581ba7a970e3">Visit</link>(E);
00521 
00522 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
00523 &#32;&#32;}
00524 
00525 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="__c_index_8cpp_1ace455769e0f5681db67622db98f263a1">clang_isTranslationUnit</link>(Cursor.kind))&#32;{
00526 &#32;&#32;&#32;&#32;CXTranslationUnit&#32;TU&#32;=&#32;<link linkend="_namespaceclang_1_1cxcursor_1a23a495df22339e8289ae6d2421f493b6">getCursorTU</link>(Cursor);
00527 &#32;&#32;&#32;&#32;ASTUnit&#32;*CXXUnit&#32;=&#32;cxtu::getASTUnit(TU);
00528 
00529 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;VisitOrder[2]&#32;=&#32;{VisitPreprocessorLast,&#32;!VisitPreprocessorLast};
00530 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">unsigned</emphasis>&#32;I&#32;=&#32;0;&#32;I&#32;!=&#32;2;&#32;++I)&#32;{
00531 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(VisitOrder[I])&#32;{
00532 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!CXXUnit-&gt;isMainFileAST()&#32;&amp;&amp;&#32;CXXUnit-&gt;getOnlyLocalDecls()&#32;&amp;&amp;
00533 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;RegionOfInterest.isInvalid())&#32;{
00534 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(ASTUnit::top_level_iterator&#32;TL&#32;=&#32;CXXUnit-&gt;top_level_begin(),
00535 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;TLEnd&#32;=&#32;CXXUnit-&gt;top_level_end();
00536 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;TL&#32;!=&#32;TLEnd;&#32;++TL)&#32;{
00537 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;Optional&lt;bool&gt;&#32;V&#32;=&#32;handleDeclForVisitation(*TL);
00538 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!V.hasValue())
00539 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">continue</emphasis>;
00540 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;V.getValue();
00541 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00542 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_classclang_1_1cxcursor_1_1_cursor_visitor_1a3bca6000335f6c6e012b01a042d10d32">VisitDeclContext</link>(
00543 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;CXXUnit-&gt;getASTContext().getTranslationUnitDecl()))
00544 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
00545 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">continue</emphasis>;
00546 &#32;&#32;&#32;&#32;&#32;&#32;}
00547 
00548 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Walk&#32;the&#32;preprocessing&#32;record.</emphasis>
00549 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(CXXUnit-&gt;getPreprocessor().getPreprocessingRecord())
00550 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classclang_1_1cxcursor_1_1_cursor_visitor_1a4f29bab7210fb14b41a847ab87705f46">visitPreprocessedEntitiesInRegion</link>();
00551 &#32;&#32;&#32;&#32;}
00552 
00553 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
00554 &#32;&#32;}
00555 
00556 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(Cursor.kind&#32;==&#32;CXCursor_CXXBaseSpecifier)&#32;{
00557 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;CXXBaseSpecifier&#32;*Base&#32;=&#32;<link linkend="_namespaceclang_1_1cxcursor_1a05b387c1d9aeb75b3de539f8622e0964">getCursorCXXBaseSpecifier</link>(Cursor))&#32;{
00558 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(TypeSourceInfo&#32;*BaseTSInfo&#32;=&#32;Base-&gt;getTypeSourceInfo())&#32;{
00559 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classclang_1_1cxcursor_1_1_cursor_visitor_1a01659df2ce565980ce5b581ba7a970e3">Visit</link>(BaseTSInfo-&gt;getTypeLoc());
00560 &#32;&#32;&#32;&#32;&#32;&#32;}
00561 &#32;&#32;&#32;&#32;}
00562 &#32;&#32;}
00563 
00564 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(Cursor.kind&#32;==&#32;CXCursor_IBOutletCollectionAttr)&#32;{
00565 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;IBOutletCollectionAttr&#32;*A&#32;=
00566 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cast&lt;IBOutletCollectionAttr&gt;(<link linkend="_namespaceclang_1_1cxcursor_1afdc6aa952869e16b4981b07f05adff7f">cxcursor::getCursorAttr</link>(Cursor));
00567 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;ObjCObjectType&#32;*ObjT&#32;=&#32;A-&gt;getInterface()-&gt;getAs&lt;ObjCObjectType&gt;())
00568 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classclang_1_1cxcursor_1_1_cursor_visitor_1a01659df2ce565980ce5b581ba7a970e3">Visit</link>(<link linkend="_namespaceclang_1_1cxcursor_1aa0bea074dd325615cb85819eac47264e">cxcursor::MakeCursorObjCClassRef</link>(
00569 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ObjT-&gt;getInterface(),
00570 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;A-&gt;getInterfaceLoc()-&gt;getTypeLoc().getBeginLoc(),&#32;TU));
00571 &#32;&#32;}
00572 
00573 &#32;&#32;<emphasis role="comment">//&#32;If&#32;pointing&#32;inside&#32;a&#32;macro&#32;definition,&#32;check&#32;if&#32;the&#32;token&#32;is&#32;an&#32;identifier</emphasis>
00574 &#32;&#32;<emphasis role="comment">//&#32;that&#32;was&#32;ever&#32;defined&#32;as&#32;a&#32;macro.&#32;In&#32;such&#32;a&#32;case,&#32;create&#32;a&#32;&quot;pseudo&quot;&#32;macro</emphasis>
00575 &#32;&#32;<emphasis role="comment">//&#32;expansion&#32;cursor&#32;for&#32;that&#32;token.</emphasis>
00576 &#32;&#32;SourceLocation&#32;BeginLoc&#32;=&#32;RegionOfInterest.getBegin();
00577 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(Cursor.kind&#32;==&#32;CXCursor_MacroDefinition&#32;&amp;&amp;
00578 &#32;&#32;&#32;&#32;&#32;&#32;BeginLoc&#32;==&#32;RegionOfInterest.getEnd())&#32;{
00579 &#32;&#32;&#32;&#32;SourceLocation&#32;Loc&#32;=&#32;AU-&gt;mapLocationToPreamble(BeginLoc);
00580 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;MacroInfo&#32;*MI&#32;=
00581 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespaceclang_1_1cxindex_1af7ce142e794a78913423f48c9d01c78d">getMacroInfo</link>(<link linkend="_namespaceclang_1_1cxcursor_1a62254c8ae8eca4c0ca0f2d2a659e7d80">cxcursor::getCursorMacroDefinition</link>(Cursor),&#32;TU);
00582 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(MacroDefinitionRecord&#32;*MacroDef&#32;=
00583 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespaceclang_1_1cxindex_1ac81be1c63a9bbf2e05be99daa2b11750">checkForMacroInMacroDefinition</link>(MI,&#32;Loc,&#32;TU))
00584 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classclang_1_1cxcursor_1_1_cursor_visitor_1a01659df2ce565980ce5b581ba7a970e3">Visit</link>(<link linkend="_namespaceclang_1_1cxcursor_1a64450be5a9ef97c872d47219caaccfce">cxcursor::MakeMacroExpansionCursor</link>(MacroDef,&#32;BeginLoc,&#32;TU));
00585 &#32;&#32;}
00586 
00587 &#32;&#32;<emphasis role="comment">//&#32;Nothing&#32;to&#32;visit&#32;at&#32;the&#32;moment.</emphasis>
00588 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
00589 }
</programlisting><para>
Referenced by <link linkend="__c_index_8cpp_source_1l04555">clang_visitChildren()</link>.</para>
    </section><anchor xml:id="_classclang_1_1cxcursor_1_1_cursor_visitor_1a1046e9b078429deffbd5f129b11d85b4"/>    <section>
    <title>VisitClassTemplateDecl()</title>
<indexterm><primary>VisitClassTemplateDecl</primary><secondary>clang::cxcursor::CursorVisitor</secondary></indexterm>
<indexterm><primary>clang::cxcursor::CursorVisitor</primary><secondary>VisitClassTemplateDecl</secondary></indexterm>
<para><computeroutput>bool CursorVisitor::VisitClassTemplateDecl (ClassTemplateDecl * D)</computeroutput></para><para>
Definition at line <link linkend="__c_index_8cpp_source_1l00950">950</link> of file <link linkend="__c_index_8cpp_source">CIndex.cpp</link>.</para>
<programlisting>00950 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00951 &#32;&#32;<emphasis role="comment">//&#32;FIXME:&#32;Visit&#32;the&#32;&quot;outer&quot;&#32;template&#32;parameter&#32;lists&#32;on&#32;the&#32;TagDecl</emphasis>
00952 &#32;&#32;<emphasis role="comment">//&#32;before&#32;visiting&#32;these&#32;template&#32;parameters.</emphasis>
00953 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_classclang_1_1cxcursor_1_1_cursor_visitor_1aeba17d0f7d6f7154cc856bb0d3ac55de">VisitTemplateParameters</link>(D-&gt;getTemplateParameters()))
00954 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
00955 
00956 &#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;*CD&#32;=&#32;D-&gt;getTemplatedDecl();
00957 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classclang_1_1cxcursor_1_1_cursor_visitor_1a3e41de558520b72762489e950d35d0b8">VisitAttributes</link>(CD)&#32;||&#32;<link linkend="_classclang_1_1cxcursor_1_1_cursor_visitor_1addf32753eb7872041c23c5e5652d9907">VisitCXXRecordDecl</link>(CD);
00958 }
</programlisting>    </section><anchor xml:id="_classclang_1_1cxcursor_1_1_cursor_visitor_1ab59de33477389ac551aba37030befef7"/>    <section>
    <title>VisitClassTemplatePartialSpecializationDecl()</title>
<indexterm><primary>VisitClassTemplatePartialSpecializationDecl</primary><secondary>clang::cxcursor::CursorVisitor</secondary></indexterm>
<indexterm><primary>clang::cxcursor::CursorVisitor</primary><secondary>VisitClassTemplatePartialSpecializationDecl</secondary></indexterm>
<para><computeroutput>bool CursorVisitor::VisitClassTemplatePartialSpecializationDecl (ClassTemplatePartialSpecializationDecl * D)</computeroutput></para><para>
Definition at line <link linkend="__c_index_8cpp_source_1l00745">745</link> of file <link linkend="__c_index_8cpp_source">CIndex.cpp</link>.</para>
<programlisting>00746 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00747 &#32;&#32;<emphasis role="comment">//&#32;FIXME:&#32;Visit&#32;the&#32;&quot;outer&quot;&#32;template&#32;parameter&#32;lists&#32;on&#32;the&#32;TagDecl</emphasis>
00748 &#32;&#32;<emphasis role="comment">//&#32;before&#32;visiting&#32;these&#32;template&#32;parameters.</emphasis>
00749 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_classclang_1_1cxcursor_1_1_cursor_visitor_1aeba17d0f7d6f7154cc856bb0d3ac55de">VisitTemplateParameters</link>(D-&gt;getTemplateParameters()))
00750 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
00751 
00752 &#32;&#32;<emphasis role="comment">//&#32;Visit&#32;the&#32;partial&#32;specialization&#32;arguments.</emphasis>
00753 &#32;&#32;<emphasis role="keyword">const</emphasis>&#32;ASTTemplateArgumentListInfo&#32;*Info&#32;=&#32;D-&gt;getTemplateArgsAsWritten();
00754 &#32;&#32;<emphasis role="keyword">const</emphasis>&#32;TemplateArgumentLoc&#32;*TemplateArgs&#32;=&#32;Info-&gt;getTemplateArgs();
00755 &#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">unsigned</emphasis>&#32;I&#32;=&#32;0,&#32;N&#32;=&#32;Info-&gt;NumTemplateArgs;&#32;I&#32;!=&#32;N;&#32;++I)
00756 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_classclang_1_1cxcursor_1_1_cursor_visitor_1a4a8570d91cfdf0c794c0457c447d49e3">VisitTemplateArgumentLoc</link>(TemplateArgs[I]))
00757 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
00758 
00759 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classclang_1_1cxcursor_1_1_cursor_visitor_1addf32753eb7872041c23c5e5652d9907">VisitCXXRecordDecl</link>(D);
00760 }
</programlisting>    </section><anchor xml:id="_classclang_1_1cxcursor_1_1_cursor_visitor_1a876f03daa8892c332f4ed8e7b7acbbd6"/>    <section>
    <title>VisitClassTemplateSpecializationDecl()</title>
<indexterm><primary>VisitClassTemplateSpecializationDecl</primary><secondary>clang::cxcursor::CursorVisitor</secondary></indexterm>
<indexterm><primary>clang::cxcursor::CursorVisitor</primary><secondary>VisitClassTemplateSpecializationDecl</secondary></indexterm>
<para><computeroutput>bool CursorVisitor::VisitClassTemplateSpecializationDecl (ClassTemplateSpecializationDecl * D)</computeroutput></para><para>
Definition at line <link linkend="__c_index_8cpp_source_1l00713">713</link> of file <link linkend="__c_index_8cpp_source">CIndex.cpp</link>.</para>
<programlisting>00714 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00715 &#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;ShouldVisitBody&#32;=&#32;<emphasis role="keyword">false</emphasis>;
00716 &#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(D-&gt;getSpecializationKind())&#32;{
00717 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;TSK_Undeclared:
00718 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;TSK_ImplicitInstantiation:
00719 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Nothing&#32;to&#32;visit</emphasis>
00720 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
00721 
00722 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;TSK_ExplicitInstantiationDeclaration:
00723 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;TSK_ExplicitInstantiationDefinition:
00724 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
00725 
00726 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;TSK_ExplicitSpecialization:
00727 &#32;&#32;&#32;&#32;ShouldVisitBody&#32;=&#32;<emphasis role="keyword">true</emphasis>;
00728 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
00729 &#32;&#32;}
00730 
00731 &#32;&#32;<emphasis role="comment">//&#32;Visit&#32;the&#32;template&#32;arguments&#32;used&#32;in&#32;the&#32;specialization.</emphasis>
00732 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(TypeSourceInfo&#32;*SpecType&#32;=&#32;D-&gt;getTypeAsWritten())&#32;{
00733 &#32;&#32;&#32;&#32;TypeLoc&#32;TL&#32;=&#32;SpecType-&gt;getTypeLoc();
00734 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(TemplateSpecializationTypeLoc&#32;TSTLoc&#32;=
00735 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;TL.getAs&lt;TemplateSpecializationTypeLoc&gt;())&#32;{
00736 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">unsigned</emphasis>&#32;I&#32;=&#32;0,&#32;N&#32;=&#32;TSTLoc.getNumArgs();&#32;I&#32;!=&#32;N;&#32;++I)
00737 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_classclang_1_1cxcursor_1_1_cursor_visitor_1a4a8570d91cfdf0c794c0457c447d49e3">VisitTemplateArgumentLoc</link>(TSTLoc.getArgLoc(I)))
00738 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
00739 &#32;&#32;&#32;&#32;}
00740 &#32;&#32;}
00741 
00742 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;ShouldVisitBody&#32;&amp;&amp;&#32;<link linkend="_classclang_1_1cxcursor_1_1_cursor_visitor_1addf32753eb7872041c23c5e5652d9907">VisitCXXRecordDecl</link>(D);
00743 }
</programlisting>    </section><anchor xml:id="_classclang_1_1cxcursor_1_1_cursor_visitor_1addf32753eb7872041c23c5e5652d9907"/>    <section>
    <title>VisitCXXRecordDecl()</title>
<indexterm><primary>VisitCXXRecordDecl</primary><secondary>clang::cxcursor::CursorVisitor</secondary></indexterm>
<indexterm><primary>clang::cxcursor::CursorVisitor</primary><secondary>VisitCXXRecordDecl</secondary></indexterm>
<para><computeroutput>bool CursorVisitor::VisitCXXRecordDecl (CXXRecordDecl * D)</computeroutput></para><para>
Definition at line <link linkend="__c_index_8cpp_source_1l01820">1820</link> of file <link linkend="__c_index_8cpp_source">CIndex.cpp</link>.</para>
<programlisting>01820 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
01821 &#32;&#32;<emphasis role="comment">//&#32;Visit&#32;the&#32;nested-name-specifier,&#32;if&#32;present.</emphasis>
01822 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(NestedNameSpecifierLoc&#32;QualifierLoc&#32;=&#32;D-&gt;getQualifierLoc())
01823 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_classclang_1_1cxcursor_1_1_cursor_visitor_1a7b754c2b2db487a1286e47d1134365bf">VisitNestedNameSpecifierLoc</link>(QualifierLoc))
01824 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
01825 
01826 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(D-&gt;isCompleteDefinition())&#32;{
01827 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;&amp;I&#32;:&#32;D-&gt;bases())&#32;{
01828 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_classclang_1_1cxcursor_1_1_cursor_visitor_1a01659df2ce565980ce5b581ba7a970e3">Visit</link>(<link linkend="_namespaceclang_1_1cxcursor_1a13176d36398baf45f34e16a34ec04793">cxcursor::MakeCursorCXXBaseSpecifier</link>(&amp;I,&#32;TU)))
01829 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
01830 &#32;&#32;&#32;&#32;}
01831 &#32;&#32;}
01832 
01833 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classclang_1_1cxcursor_1_1_cursor_visitor_1a223f8711bd4960db81ca391e57bcd6e0">VisitTagDecl</link>(D);
01834 }
</programlisting><para>
References <link linkend="__c_x_cursor_8cpp_source_1l00964">clang::cxcursor::MakeCursorCXXBaseSpecifier()</link>.</para>
    </section><anchor xml:id="_classclang_1_1cxcursor_1_1_cursor_visitor_1adc36610328af99cbbd2f06d7f0292ec9"/>    <section>
    <title>VisitDeclarationNameInfo()</title>
<indexterm><primary>VisitDeclarationNameInfo</primary><secondary>clang::cxcursor::CursorVisitor</secondary></indexterm>
<indexterm><primary>clang::cxcursor::CursorVisitor</primary><secondary>VisitDeclarationNameInfo</secondary></indexterm>
<para><computeroutput>bool CursorVisitor::VisitDeclarationNameInfo (DeclarationNameInfo Name)</computeroutput></para><para>
Definition at line <link linkend="__c_index_8cpp_source_1l01312">1312</link> of file <link linkend="__c_index_8cpp_source">CIndex.cpp</link>.</para>
<programlisting>01312 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
01313 &#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(Name.getName().getNameKind())&#32;{
01314 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;clang::DeclarationName::Identifier:
01315 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;clang::DeclarationName::CXXLiteralOperatorName:
01316 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;clang::DeclarationName::CXXDeductionGuideName:
01317 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;clang::DeclarationName::CXXOperatorName:
01318 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;clang::DeclarationName::CXXUsingDirective:
01319 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
01320 
01321 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;clang::DeclarationName::CXXConstructorName:
01322 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;clang::DeclarationName::CXXDestructorName:
01323 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;clang::DeclarationName::CXXConversionFunctionName:
01324 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(TypeSourceInfo&#32;*TSInfo&#32;=&#32;Name.getNamedTypeInfo())
01325 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classclang_1_1cxcursor_1_1_cursor_visitor_1a01659df2ce565980ce5b581ba7a970e3">Visit</link>(TSInfo-&gt;getTypeLoc());
01326 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
01327 
01328 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;clang::DeclarationName::ObjCZeroArgSelector:
01329 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;clang::DeclarationName::ObjCOneArgSelector:
01330 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;clang::DeclarationName::ObjCMultiArgSelector:
01331 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;FIXME:&#32;Per-identifier&#32;location&#32;info?</emphasis>
01332 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
01333 &#32;&#32;}
01334 
01335 &#32;&#32;llvm_unreachable(<emphasis role="stringliteral">&quot;Invalid&#32;DeclarationName::Kind!&quot;</emphasis>);
01336 }
</programlisting>    </section><anchor xml:id="_classclang_1_1cxcursor_1_1_cursor_visitor_1ab44c6ae2ac80500f37d37e2893c37552"/>    <section>
    <title>VisitDeclaratorDecl()</title>
<indexterm><primary>VisitDeclaratorDecl</primary><secondary>clang::cxcursor::CursorVisitor</secondary></indexterm>
<indexterm><primary>clang::cxcursor::CursorVisitor</primary><secondary>VisitDeclaratorDecl</secondary></indexterm>
<para><computeroutput>bool CursorVisitor::VisitDeclaratorDecl (DeclaratorDecl * DD)</computeroutput></para><para>
Definition at line <link linkend="__c_index_8cpp_source_1l00783">783</link> of file <link linkend="__c_index_8cpp_source">CIndex.cpp</link>.</para>
<programlisting>00783 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00784 &#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;NumParamList&#32;=&#32;DD-&gt;getNumTemplateParameterLists();
00785 &#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">unsigned</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;NumParamList;&#32;i++)&#32;{
00786 &#32;&#32;&#32;&#32;TemplateParameterList&#32;*Params&#32;=&#32;DD-&gt;getTemplateParameterList(i);
00787 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_classclang_1_1cxcursor_1_1_cursor_visitor_1aeba17d0f7d6f7154cc856bb0d3ac55de">VisitTemplateParameters</link>(Params))
00788 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
00789 &#32;&#32;}
00790 
00791 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(TypeSourceInfo&#32;*TSInfo&#32;=&#32;DD-&gt;getTypeSourceInfo())
00792 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_classclang_1_1cxcursor_1_1_cursor_visitor_1a01659df2ce565980ce5b581ba7a970e3">Visit</link>(TSInfo-&gt;getTypeLoc()))
00793 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
00794 
00795 &#32;&#32;<emphasis role="comment">//&#32;Visit&#32;the&#32;nested-name-specifier,&#32;if&#32;present.</emphasis>
00796 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(NestedNameSpecifierLoc&#32;QualifierLoc&#32;=&#32;DD-&gt;getQualifierLoc())
00797 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_classclang_1_1cxcursor_1_1_cursor_visitor_1a7b754c2b2db487a1286e47d1134365bf">VisitNestedNameSpecifierLoc</link>(QualifierLoc))
00798 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
00799 
00800 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
00801 }
</programlisting>    </section><anchor xml:id="_classclang_1_1cxcursor_1_1_cursor_visitor_1a3bca6000335f6c6e012b01a042d10d32"/>    <section>
    <title>VisitDeclContext()</title>
<indexterm><primary>VisitDeclContext</primary><secondary>clang::cxcursor::CursorVisitor</secondary></indexterm>
<indexterm><primary>clang::cxcursor::CursorVisitor</primary><secondary>VisitDeclContext</secondary></indexterm>
<para><computeroutput>bool CursorVisitor::VisitDeclContext (DeclContext * DC)</computeroutput></para><para>
Definition at line <link linkend="__c_index_8cpp_source_1l00625">625</link> of file <link linkend="__c_index_8cpp_source">CIndex.cpp</link>.</para>
<programlisting>00625 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00626 &#32;&#32;DeclContext::decl_iterator&#32;I&#32;=&#32;DC-&gt;decls_begin(),&#32;E&#32;=&#32;DC-&gt;decls_end();
00627 
00628 &#32;&#32;<emphasis role="comment">//&#32;FIXME:&#32;Eventually&#32;remove.&#32;&#32;This&#32;part&#32;of&#32;a&#32;hack&#32;to&#32;support&#32;proper</emphasis>
00629 &#32;&#32;<emphasis role="comment">//&#32;iteration&#32;over&#32;all&#32;Decls&#32;contained&#32;lexically&#32;within&#32;an&#32;ObjC&#32;container.</emphasis>
00630 &#32;&#32;SaveAndRestore&lt;DeclContext::decl_iterator&#32;*&gt;&#32;DI_saved(DI_current,&#32;&amp;I);
00631 &#32;&#32;SaveAndRestore&lt;DeclContext::decl_iterator&gt;&#32;DE_saved(DE_current,&#32;E);
00632 
00633 &#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(;&#32;I&#32;!=&#32;E;&#32;++I)&#32;{
00634 &#32;&#32;&#32;&#32;Decl&#32;*D&#32;=&#32;*I;
00635 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(D-&gt;getLexicalDeclContext()&#32;!=&#32;DC)
00636 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">continue</emphasis>;
00637 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Filter&#32;out&#32;synthesized&#32;property&#32;accessor&#32;redeclarations.</emphasis>
00638 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(isa&lt;ObjCImplDecl&gt;(DC))
00639 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="keyword">auto</emphasis>&#32;*OMD&#32;=&#32;dyn_cast&lt;ObjCMethodDecl&gt;(D))
00640 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(OMD-&gt;isSynthesizedAccessorStub())
00641 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">continue</emphasis>;
00642 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;Optional&lt;bool&gt;&#32;V&#32;=&#32;handleDeclForVisitation(D);
00643 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!V.hasValue())
00644 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">continue</emphasis>;
00645 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;V.getValue();
00646 &#32;&#32;}
00647 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
00648 }
</programlisting>    </section><anchor xml:id="_classclang_1_1cxcursor_1_1_cursor_visitor_1a8fc88637e0d32bfd4a776d6a57e08d5e"/>    <section>
    <title>VisitDecompositionDecl()</title>
<indexterm><primary>VisitDecompositionDecl</primary><secondary>clang::cxcursor::CursorVisitor</secondary></indexterm>
<indexterm><primary>clang::cxcursor::CursorVisitor</primary><secondary>VisitDecompositionDecl</secondary></indexterm>
<para><computeroutput>bool CursorVisitor::VisitDecompositionDecl (DecompositionDecl * D)</computeroutput></para><para>
Definition at line <link linkend="__c_index_8cpp_source_1l01304">1304</link> of file <link linkend="__c_index_8cpp_source">CIndex.cpp</link>.</para>
<programlisting>01304 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
01305 &#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">auto</emphasis>&#32;*B&#32;:&#32;D-&gt;bindings())&#32;{
01306 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_classclang_1_1cxcursor_1_1_cursor_visitor_1a01659df2ce565980ce5b581ba7a970e3">Visit</link>(<link linkend="_namespaceclang_1_1cxcursor_1ab61ec2059175833672e8e78a376bb218">MakeCXCursor</link>(B,&#32;TU,&#32;RegionOfInterest)))
01307 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
01308 &#32;&#32;}
01309 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classclang_1_1cxcursor_1_1_cursor_visitor_1aa58af31bada238412e23dbba3a928162">VisitVarDecl</link>(D);
01310 }
</programlisting><para>
References <link linkend="_namespaceclang_1_1cxcursor_1ab61ec2059175833672e8e78a376bb218">clang::cxcursor::MakeCXCursor()</link>.</para>
    </section><anchor xml:id="_classclang_1_1cxcursor_1_1_cursor_visitor_1aee21ccfb817e44aa1fabf5814e435716"/>    <section>
    <title>VisitEnumConstantDecl()</title>
<indexterm><primary>VisitEnumConstantDecl</primary><secondary>clang::cxcursor::CursorVisitor</secondary></indexterm>
<indexterm><primary>clang::cxcursor::CursorVisitor</primary><secondary>VisitEnumConstantDecl</secondary></indexterm>
<para><computeroutput>bool CursorVisitor::VisitEnumConstantDecl (EnumConstantDecl * D)</computeroutput></para><para>
Definition at line <link linkend="__c_index_8cpp_source_1l00777">777</link> of file <link linkend="__c_index_8cpp_source">CIndex.cpp</link>.</para>
<programlisting>00777 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00778 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(Expr&#32;*Init&#32;=&#32;D-&gt;getInitExpr())
00779 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classclang_1_1cxcursor_1_1_cursor_visitor_1a01659df2ce565980ce5b581ba7a970e3">Visit</link>(<link linkend="_namespaceclang_1_1cxcursor_1ab61ec2059175833672e8e78a376bb218">MakeCXCursor</link>(Init,&#32;StmtParent,&#32;TU,&#32;RegionOfInterest));
00780 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
00781 }
</programlisting><para>
References <link linkend="_namespaceclang_1_1cxcursor_1ab61ec2059175833672e8e78a376bb218">clang::cxcursor::MakeCXCursor()</link>.</para>
    </section><anchor xml:id="_classclang_1_1cxcursor_1_1_cursor_visitor_1a1504a2ceb50669fa1471f9a61e58f598"/>    <section>
    <title>VisitFieldDecl()</title>
<indexterm><primary>VisitFieldDecl</primary><secondary>clang::cxcursor::CursorVisitor</secondary></indexterm>
<indexterm><primary>clang::cxcursor::CursorVisitor</primary><secondary>VisitFieldDecl</secondary></indexterm>
<para><computeroutput>bool CursorVisitor::VisitFieldDecl (FieldDecl * D)</computeroutput></para><para>
Definition at line <link linkend="__c_index_8cpp_source_1l00906">906</link> of file <link linkend="__c_index_8cpp_source">CIndex.cpp</link>.</para>
<programlisting>00906 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00907 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_classclang_1_1cxcursor_1_1_cursor_visitor_1ab44c6ae2ac80500f37d37e2893c37552">VisitDeclaratorDecl</link>(D))
00908 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
00909 
00910 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(Expr&#32;*BitWidth&#32;=&#32;D-&gt;getBitWidth())
00911 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classclang_1_1cxcursor_1_1_cursor_visitor_1a01659df2ce565980ce5b581ba7a970e3">Visit</link>(<link linkend="_namespaceclang_1_1cxcursor_1ab61ec2059175833672e8e78a376bb218">MakeCXCursor</link>(BitWidth,&#32;StmtParent,&#32;TU,&#32;RegionOfInterest));
00912 
00913 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(Expr&#32;*Init&#32;=&#32;D-&gt;getInClassInitializer())
00914 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classclang_1_1cxcursor_1_1_cursor_visitor_1a01659df2ce565980ce5b581ba7a970e3">Visit</link>(<link linkend="_namespaceclang_1_1cxcursor_1ab61ec2059175833672e8e78a376bb218">MakeCXCursor</link>(Init,&#32;StmtParent,&#32;TU,&#32;RegionOfInterest));
00915 
00916 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
00917 }
</programlisting><para>
References <link linkend="_namespaceclang_1_1cxcursor_1ab61ec2059175833672e8e78a376bb218">clang::cxcursor::MakeCXCursor()</link>.</para>
    </section><anchor xml:id="_classclang_1_1cxcursor_1_1_cursor_visitor_1a24fbcc462d22a47ef5e7c02eef77d610"/>    <section>
    <title>visitFileRegion()</title>
<indexterm><primary>visitFileRegion</primary><secondary>clang::cxcursor::CursorVisitor</secondary></indexterm>
<indexterm><primary>clang::cxcursor::CursorVisitor</primary><secondary>visitFileRegion</secondary></indexterm>
<para><computeroutput>bool CursorVisitor::visitFileRegion ( )</computeroutput></para>
<para>Visit declarations and preprocessed entities for the file region designated by <formalpara><title>See also</title>

<para>RegionOfInterest. </para>
</formalpara>
</para>
<para>
Definition at line <link linkend="__c_index_8cpp_source_1l00258">258</link> of file <link linkend="__c_index_8cpp_source">CIndex.cpp</link>.</para>
<programlisting>00258 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00259 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(RegionOfInterest.isInvalid())
00260 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
00261 
00262 &#32;&#32;ASTUnit&#32;*Unit&#32;=&#32;cxtu::getASTUnit(TU);
00263 &#32;&#32;SourceManager&#32;&amp;SM&#32;=&#32;Unit-&gt;getSourceManager();
00264 
00265 &#32;&#32;std::pair&lt;FileID,&#32;unsigned&gt;&#32;Begin&#32;=&#32;SM.getDecomposedLoc(
00266 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;SM.getFileLoc(RegionOfInterest.getBegin())),
00267 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;End&#32;=&#32;SM.getDecomposedLoc(
00268 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;SM.getFileLoc(RegionOfInterest.getEnd()));
00269 
00270 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(End.first&#32;!=&#32;Begin.first)&#32;{
00271 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;If&#32;the&#32;end&#32;does&#32;not&#32;reside&#32;in&#32;the&#32;same&#32;file,&#32;try&#32;to&#32;recover&#32;by</emphasis>
00272 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;picking&#32;the&#32;end&#32;of&#32;the&#32;file&#32;of&#32;begin&#32;location.</emphasis>
00273 &#32;&#32;&#32;&#32;End.first&#32;=&#32;Begin.first;
00274 &#32;&#32;&#32;&#32;End.second&#32;=&#32;SM.getFileIDSize(Begin.first);
00275 &#32;&#32;}
00276 
00277 &#32;&#32;assert(Begin.first&#32;==&#32;End.first);
00278 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(Begin.second&#32;&gt;&#32;End.second)
00279 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
00280 
00281 &#32;&#32;FileID&#32;File&#32;=&#32;Begin.first;
00282 &#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;Offset&#32;=&#32;Begin.second;
00283 &#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;Length&#32;=&#32;End.second&#32;-&#32;Begin.second;
00284 
00285 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!VisitDeclsOnly&#32;&amp;&amp;&#32;!VisitPreprocessorLast)
00286 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_classclang_1_1cxcursor_1_1_cursor_visitor_1a4f29bab7210fb14b41a847ab87705f46">visitPreprocessedEntitiesInRegion</link>())
00287 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;&#32;<emphasis role="comment">//&#32;visitation&#32;break.</emphasis>
00288 
00289 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(visitDeclsFromFileRegion(File,&#32;Offset,&#32;Length))
00290 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;&#32;<emphasis role="comment">//&#32;visitation&#32;break.</emphasis>
00291 
00292 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!VisitDeclsOnly&#32;&amp;&amp;&#32;VisitPreprocessorLast)
00293 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classclang_1_1cxcursor_1_1_cursor_visitor_1a4f29bab7210fb14b41a847ab87705f46">visitPreprocessedEntitiesInRegion</link>();
00294 
00295 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
00296 }
</programlisting>    </section><anchor xml:id="_classclang_1_1cxcursor_1_1_cursor_visitor_1a8dcd76b6d78498c519af0357f49b7672"/>    <section>
    <title>VisitFriendDecl()</title>
<indexterm><primary>VisitFriendDecl</primary><secondary>clang::cxcursor::CursorVisitor</secondary></indexterm>
<indexterm><primary>clang::cxcursor::CursorVisitor</primary><secondary>VisitFriendDecl</secondary></indexterm>
<para><computeroutput>bool CursorVisitor::VisitFriendDecl (FriendDecl * D)</computeroutput></para><para>
Definition at line <link linkend="__c_index_8cpp_source_1l01293">1293</link> of file <link linkend="__c_index_8cpp_source">CIndex.cpp</link>.</para>
<programlisting>01293 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
01294 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(NamedDecl&#32;*FriendD&#32;=&#32;D-&gt;getFriendDecl())&#32;{
01295 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_classclang_1_1cxcursor_1_1_cursor_visitor_1a01659df2ce565980ce5b581ba7a970e3">Visit</link>(<link linkend="_namespaceclang_1_1cxcursor_1ab61ec2059175833672e8e78a376bb218">MakeCXCursor</link>(FriendD,&#32;TU,&#32;RegionOfInterest)))
01296 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
01297 &#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(TypeSourceInfo&#32;*TI&#32;=&#32;D-&gt;getFriendType())&#32;{
01298 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_classclang_1_1cxcursor_1_1_cursor_visitor_1a01659df2ce565980ce5b581ba7a970e3">Visit</link>(TI-&gt;getTypeLoc()))
01299 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
01300 &#32;&#32;}
01301 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
01302 }
</programlisting><para>
References <link linkend="_namespaceclang_1_1cxcursor_1ab61ec2059175833672e8e78a376bb218">clang::cxcursor::MakeCXCursor()</link>.</para>
    </section><anchor xml:id="_classclang_1_1cxcursor_1_1_cursor_visitor_1a15585d8e991ee7b5472c2971e986b3bf"/>    <section>
    <title>VisitFunctionDecl()</title>
<indexterm><primary>VisitFunctionDecl</primary><secondary>clang::cxcursor::CursorVisitor</secondary></indexterm>
<indexterm><primary>clang::cxcursor::CursorVisitor</primary><secondary>VisitFunctionDecl</secondary></indexterm>
<para><computeroutput>bool CursorVisitor::VisitFunctionDecl (FunctionDecl * ND)</computeroutput></para><para>
Definition at line <link linkend="__c_index_8cpp_source_1l00819">819</link> of file <link linkend="__c_index_8cpp_source">CIndex.cpp</link>.</para>
<programlisting>00819 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00820 &#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;NumParamList&#32;=&#32;ND-&gt;getNumTemplateParameterLists();
00821 &#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">unsigned</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;NumParamList;&#32;i++)&#32;{
00822 &#32;&#32;&#32;&#32;TemplateParameterList&#32;*Params&#32;=&#32;ND-&gt;getTemplateParameterList(i);
00823 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_classclang_1_1cxcursor_1_1_cursor_visitor_1aeba17d0f7d6f7154cc856bb0d3ac55de">VisitTemplateParameters</link>(Params))
00824 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
00825 &#32;&#32;}
00826 
00827 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(TypeSourceInfo&#32;*TSInfo&#32;=&#32;ND-&gt;getTypeSourceInfo())&#32;{
00828 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Visit&#32;the&#32;function&#32;declaration&apos;s&#32;syntactic&#32;components&#32;in&#32;the&#32;order</emphasis>
00829 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;written.&#32;This&#32;requires&#32;a&#32;bit&#32;of&#32;work.</emphasis>
00830 &#32;&#32;&#32;&#32;TypeLoc&#32;TL&#32;=&#32;TSInfo-&gt;getTypeLoc().IgnoreParens();
00831 &#32;&#32;&#32;&#32;FunctionTypeLoc&#32;FTL&#32;=&#32;TL.getAs&lt;FunctionTypeLoc&gt;();
00832 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;HasTrailingRT&#32;=&#32;HasTrailingReturnType(ND);
00833 
00834 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;If&#32;we&#32;have&#32;a&#32;function&#32;declared&#32;directly&#32;(without&#32;the&#32;use&#32;of&#32;a&#32;typedef),</emphasis>
00835 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;visit&#32;just&#32;the&#32;return&#32;type.&#32;Otherwise,&#32;just&#32;visit&#32;the&#32;function&apos;s&#32;type</emphasis>
00836 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;now.</emphasis>
00837 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;((FTL&#32;&amp;&amp;&#32;!isa&lt;CXXConversionDecl&gt;(ND)&#32;&amp;&amp;&#32;!HasTrailingRT&#32;&amp;&amp;
00838 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classclang_1_1cxcursor_1_1_cursor_visitor_1a01659df2ce565980ce5b581ba7a970e3">Visit</link>(FTL.getReturnLoc()))&#32;||
00839 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(!FTL&#32;&amp;&amp;&#32;<link linkend="_classclang_1_1cxcursor_1_1_cursor_visitor_1a01659df2ce565980ce5b581ba7a970e3">Visit</link>(TL)))
00840 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
00841 
00842 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Visit&#32;the&#32;nested-name-specifier,&#32;if&#32;present.</emphasis>
00843 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(NestedNameSpecifierLoc&#32;QualifierLoc&#32;=&#32;ND-&gt;getQualifierLoc())
00844 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_classclang_1_1cxcursor_1_1_cursor_visitor_1a7b754c2b2db487a1286e47d1134365bf">VisitNestedNameSpecifierLoc</link>(QualifierLoc))
00845 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
00846 
00847 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Visit&#32;the&#32;declaration&#32;name.</emphasis>
00848 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!isa&lt;CXXDestructorDecl&gt;(ND))
00849 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_classclang_1_1cxcursor_1_1_cursor_visitor_1adc36610328af99cbbd2f06d7f0292ec9">VisitDeclarationNameInfo</link>(ND-&gt;getNameInfo()))
00850 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
00851 
00852 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;FIXME:&#32;Visit&#32;explicitly-specified&#32;template&#32;arguments!</emphasis>
00853 
00854 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Visit&#32;the&#32;function&#32;parameters,&#32;if&#32;we&#32;have&#32;a&#32;function&#32;type.</emphasis>
00855 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(FTL&#32;&amp;&amp;&#32;<link linkend="_classclang_1_1cxcursor_1_1_cursor_visitor_1af8da0d143e5bf0dd9e597f6584ec605b">VisitFunctionTypeLoc</link>(FTL,&#32;<emphasis role="keyword">true</emphasis>))
00856 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
00857 
00858 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Visit&#32;the&#32;function&apos;s&#32;trailing&#32;return&#32;type.</emphasis>
00859 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(FTL&#32;&amp;&amp;&#32;HasTrailingRT&#32;&amp;&amp;&#32;<link linkend="_classclang_1_1cxcursor_1_1_cursor_visitor_1a01659df2ce565980ce5b581ba7a970e3">Visit</link>(FTL.getReturnLoc()))
00860 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
00861 
00862 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;FIXME:&#32;Attributes?</emphasis>
00863 &#32;&#32;}
00864 
00865 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(ND-&gt;doesThisDeclarationHaveABody()&#32;&amp;&amp;&#32;!ND-&gt;isLateTemplateParsed())&#32;{
00866 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(CXXConstructorDecl&#32;*Constructor&#32;=&#32;dyn_cast&lt;CXXConstructorDecl&gt;(ND))&#32;{
00867 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Find&#32;the&#32;initializers&#32;that&#32;were&#32;written&#32;in&#32;the&#32;source.</emphasis>
00868 &#32;&#32;&#32;&#32;&#32;&#32;SmallVector&lt;CXXCtorInitializer&#32;*,&#32;4&gt;&#32;WrittenInits;
00869 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">auto</emphasis>&#32;*I&#32;:&#32;Constructor-&gt;inits())&#32;{
00870 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!I-&gt;isWritten())
00871 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">continue</emphasis>;
00872 
00873 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;WrittenInits.push_back(I);
00874 &#32;&#32;&#32;&#32;&#32;&#32;}
00875 
00876 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Sort&#32;the&#32;initializers&#32;in&#32;source&#32;order</emphasis>
00877 &#32;&#32;&#32;&#32;&#32;&#32;llvm::array_pod_sort(WrittenInits.begin(),&#32;WrittenInits.end(),
00878 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;CompareCXXCtorInitializers);
00879 
00880 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Visit&#32;the&#32;initializers&#32;in&#32;source&#32;order</emphasis>
00881 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">unsigned</emphasis>&#32;I&#32;=&#32;0,&#32;N&#32;=&#32;WrittenInits.size();&#32;I&#32;!=&#32;N;&#32;++I)&#32;{
00882 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;CXXCtorInitializer&#32;*Init&#32;=&#32;WrittenInits[I];
00883 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(Init-&gt;isAnyMemberInitializer())&#32;{
00884 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_classclang_1_1cxcursor_1_1_cursor_visitor_1a01659df2ce565980ce5b581ba7a970e3">Visit</link>(<link linkend="_namespaceclang_1_1cxcursor_1ad70c49c226f87377bc26fba7a4dbe973">MakeCursorMemberRef</link>(Init-&gt;getAnyMember(),
00885 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Init-&gt;getMemberLocation(),&#32;TU)))
00886 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
00887 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(TypeSourceInfo&#32;*TInfo&#32;=&#32;Init-&gt;getTypeSourceInfo())&#32;{
00888 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_classclang_1_1cxcursor_1_1_cursor_visitor_1a01659df2ce565980ce5b581ba7a970e3">Visit</link>(TInfo-&gt;getTypeLoc()))
00889 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
00890 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00891 
00892 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Visit&#32;the&#32;initializer&#32;value.</emphasis>
00893 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(Expr&#32;*Initializer&#32;=&#32;Init-&gt;getInit())
00894 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_classclang_1_1cxcursor_1_1_cursor_visitor_1a01659df2ce565980ce5b581ba7a970e3">Visit</link>(<link linkend="_namespaceclang_1_1cxcursor_1ab61ec2059175833672e8e78a376bb218">MakeCXCursor</link>(Initializer,&#32;ND,&#32;TU,&#32;RegionOfInterest)))
00895 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
00896 &#32;&#32;&#32;&#32;&#32;&#32;}
00897 &#32;&#32;&#32;&#32;}
00898 
00899 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_classclang_1_1cxcursor_1_1_cursor_visitor_1a01659df2ce565980ce5b581ba7a970e3">Visit</link>(<link linkend="_namespaceclang_1_1cxcursor_1ab61ec2059175833672e8e78a376bb218">MakeCXCursor</link>(ND-&gt;getBody(),&#32;StmtParent,&#32;TU,&#32;RegionOfInterest)))
00900 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
00901 &#32;&#32;}
00902 
00903 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
00904 }
</programlisting>    </section><anchor xml:id="_classclang_1_1cxcursor_1_1_cursor_visitor_1aa73d041db79fce203778413557b8cafa"/>    <section>
    <title>VisitFunctionTemplateDecl()</title>
<indexterm><primary>VisitFunctionTemplateDecl</primary><secondary>clang::cxcursor::CursorVisitor</secondary></indexterm>
<indexterm><primary>clang::cxcursor::CursorVisitor</primary><secondary>VisitFunctionTemplateDecl</secondary></indexterm>
<para><computeroutput>bool CursorVisitor::VisitFunctionTemplateDecl (FunctionTemplateDecl * D)</computeroutput></para><para>
Definition at line <link linkend="__c_index_8cpp_source_1l00940">940</link> of file <link linkend="__c_index_8cpp_source">CIndex.cpp</link>.</para>
<programlisting>00940 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00941 &#32;&#32;<emphasis role="comment">//&#32;FIXME:&#32;Visit&#32;the&#32;&quot;outer&quot;&#32;template&#32;parameter&#32;lists&#32;on&#32;the&#32;FunctionDecl</emphasis>
00942 &#32;&#32;<emphasis role="comment">//&#32;before&#32;visiting&#32;these&#32;template&#32;parameters.</emphasis>
00943 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_classclang_1_1cxcursor_1_1_cursor_visitor_1aeba17d0f7d6f7154cc856bb0d3ac55de">VisitTemplateParameters</link>(D-&gt;getTemplateParameters()))
00944 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
00945 
00946 &#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;*FD&#32;=&#32;D-&gt;getTemplatedDecl();
00947 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classclang_1_1cxcursor_1_1_cursor_visitor_1a3e41de558520b72762489e950d35d0b8">VisitAttributes</link>(FD)&#32;||&#32;<link linkend="_classclang_1_1cxcursor_1_1_cursor_visitor_1a15585d8e991ee7b5472c2971e986b3bf">VisitFunctionDecl</link>(FD);
00948 }
</programlisting>    </section><anchor xml:id="_classclang_1_1cxcursor_1_1_cursor_visitor_1af8da0d143e5bf0dd9e597f6584ec605b"/>    <section>
    <title>VisitFunctionTypeLoc()</title>
<indexterm><primary>VisitFunctionTypeLoc</primary><secondary>clang::cxcursor::CursorVisitor</secondary></indexterm>
<indexterm><primary>clang::cxcursor::CursorVisitor</primary><secondary>VisitFunctionTypeLoc</secondary></indexterm>
<para><computeroutput>bool CursorVisitor::VisitFunctionTypeLoc (FunctionTypeLoc TL, bool SkipResultType = <computeroutput>false</computeroutput>
)</computeroutput></para><para>
Definition at line <link linkend="__c_index_8cpp_source_1l01672">1672</link> of file <link linkend="__c_index_8cpp_source">CIndex.cpp</link>.</para>
<programlisting>01673 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
01674 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!SkipResultType&#32;&amp;&amp;&#32;<link linkend="_classclang_1_1cxcursor_1_1_cursor_visitor_1a01659df2ce565980ce5b581ba7a970e3">Visit</link>(TL.getReturnLoc()))
01675 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
01676 
01677 &#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">unsigned</emphasis>&#32;I&#32;=&#32;0,&#32;N&#32;=&#32;TL.getNumParams();&#32;I&#32;!=&#32;N;&#32;++I)
01678 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(Decl&#32;*D&#32;=&#32;TL.getParam(I))
01679 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_classclang_1_1cxcursor_1_1_cursor_visitor_1a01659df2ce565980ce5b581ba7a970e3">Visit</link>(<link linkend="_namespaceclang_1_1cxcursor_1ab61ec2059175833672e8e78a376bb218">MakeCXCursor</link>(D,&#32;TU,&#32;RegionOfInterest)))
01680 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
01681 
01682 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
01683 }
</programlisting><para>
References <link linkend="_namespaceclang_1_1cxcursor_1ab61ec2059175833672e8e78a376bb218">clang::cxcursor::MakeCXCursor()</link>.</para>
    </section><anchor xml:id="_classclang_1_1cxcursor_1_1_cursor_visitor_1a7be65be3ded3c873b45451a03d19c402"/>    <section>
    <title>VisitLinkageSpecDecl()</title>
<indexterm><primary>VisitLinkageSpecDecl</primary><secondary>clang::cxcursor::CursorVisitor</secondary></indexterm>
<indexterm><primary>clang::cxcursor::CursorVisitor</primary><secondary>VisitLinkageSpecDecl</secondary></indexterm>
<para><computeroutput>bool CursorVisitor::VisitLinkageSpecDecl (LinkageSpecDecl * D)</computeroutput></para><para>
Definition at line <link linkend="__c_index_8cpp_source_1l01518">1518</link> of file <link linkend="__c_index_8cpp_source">CIndex.cpp</link>.</para>
<programlisting>01518 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
01519 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classclang_1_1cxcursor_1_1_cursor_visitor_1a3bca6000335f6c6e012b01a042d10d32">VisitDeclContext</link>(D);
01520 }
</programlisting>    </section><anchor xml:id="_classclang_1_1cxcursor_1_1_cursor_visitor_1a93b38c417d905d364965d5e502b9613e"/>    <section>
    <title>VisitNamespaceAliasDecl()</title>
<indexterm><primary>VisitNamespaceAliasDecl</primary><secondary>clang::cxcursor::CursorVisitor</secondary></indexterm>
<indexterm><primary>clang::cxcursor::CursorVisitor</primary><secondary>VisitNamespaceAliasDecl</secondary></indexterm>
<para><computeroutput>bool CursorVisitor::VisitNamespaceAliasDecl (NamespaceAliasDecl * D)</computeroutput></para><para>
Definition at line <link linkend="__c_index_8cpp_source_1l01231">1231</link> of file <link linkend="__c_index_8cpp_source">CIndex.cpp</link>.</para>
<programlisting>01231 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
01232 &#32;&#32;<emphasis role="comment">//&#32;Visit&#32;nested-name-specifier.</emphasis>
01233 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(NestedNameSpecifierLoc&#32;QualifierLoc&#32;=&#32;D-&gt;getQualifierLoc())
01234 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_classclang_1_1cxcursor_1_1_cursor_visitor_1a7b754c2b2db487a1286e47d1134365bf">VisitNestedNameSpecifierLoc</link>(QualifierLoc))
01235 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
01236 
01237 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classclang_1_1cxcursor_1_1_cursor_visitor_1a01659df2ce565980ce5b581ba7a970e3">Visit</link>(<link linkend="_namespaceclang_1_1cxcursor_1a6eadc019bbae1f61434528c197111b0e">MakeCursorNamespaceRef</link>(D-&gt;getAliasedNamespace(),
01238 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;D-&gt;getTargetNameLoc(),&#32;TU));
01239 }
</programlisting><para>
References <link linkend="__c_x_cursor_8cpp_source_1l00913">clang::cxcursor::MakeCursorNamespaceRef()</link>.</para>
    </section><anchor xml:id="_classclang_1_1cxcursor_1_1_cursor_visitor_1a8da19ba86bbcba98c07ba9b848887d8e"/>    <section>
    <title>VisitNamespaceDecl()</title>
<indexterm><primary>VisitNamespaceDecl</primary><secondary>clang::cxcursor::CursorVisitor</secondary></indexterm>
<indexterm><primary>clang::cxcursor::CursorVisitor</primary><secondary>VisitNamespaceDecl</secondary></indexterm>
<para><computeroutput>bool CursorVisitor::VisitNamespaceDecl (NamespaceDecl * D)</computeroutput></para><para>
Definition at line <link linkend="__c_index_8cpp_source_1l01227">1227</link> of file <link linkend="__c_index_8cpp_source">CIndex.cpp</link>.</para>
<programlisting>01227 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
01228 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classclang_1_1cxcursor_1_1_cursor_visitor_1a3bca6000335f6c6e012b01a042d10d32">VisitDeclContext</link>(D);
01229 }
</programlisting>    </section><anchor xml:id="_classclang_1_1cxcursor_1_1_cursor_visitor_1aae4d0351c44a0e33f9dc797fdc722445"/>    <section>
    <title>VisitNestedNameSpecifier()</title>
<indexterm><primary>VisitNestedNameSpecifier</primary><secondary>clang::cxcursor::CursorVisitor</secondary></indexterm>
<indexterm><primary>clang::cxcursor::CursorVisitor</primary><secondary>VisitNestedNameSpecifier</secondary></indexterm>
<para><computeroutput>bool CursorVisitor::VisitNestedNameSpecifier (NestedNameSpecifier * NNS, SourceRange Range)</computeroutput></para><para>
Definition at line <link linkend="__c_index_8cpp_source_1l01338">1338</link> of file <link linkend="__c_index_8cpp_source">CIndex.cpp</link>.</para>
<programlisting>01339 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
01340 &#32;&#32;<emphasis role="comment">//&#32;FIXME:&#32;This&#32;whole&#32;routine&#32;is&#32;a&#32;hack&#32;to&#32;work&#32;around&#32;the&#32;lack&#32;of&#32;proper</emphasis>
01341 &#32;&#32;<emphasis role="comment">//&#32;source&#32;information&#32;in&#32;nested-name-specifiers&#32;(PR5791).&#32;Since&#32;we&#32;do&#32;have</emphasis>
01342 &#32;&#32;<emphasis role="comment">//&#32;a&#32;beginning&#32;source&#32;location,&#32;we&#32;can&#32;visit&#32;the&#32;first&#32;component&#32;of&#32;the</emphasis>
01343 &#32;&#32;<emphasis role="comment">//&#32;nested-name-specifier,&#32;if&#32;it&apos;s&#32;a&#32;single-token&#32;component.</emphasis>
01344 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!NNS)
01345 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
01346 
01347 &#32;&#32;<emphasis role="comment">//&#32;Get&#32;the&#32;first&#32;component&#32;in&#32;the&#32;nested-name-specifier.</emphasis>
01348 &#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(NestedNameSpecifier&#32;*Prefix&#32;=&#32;NNS-&gt;getPrefix())
01349 &#32;&#32;&#32;&#32;NNS&#32;=&#32;Prefix;
01350 
01351 &#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(NNS-&gt;getKind())&#32;{
01352 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;NestedNameSpecifier::Namespace:
01353 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classclang_1_1cxcursor_1_1_cursor_visitor_1a01659df2ce565980ce5b581ba7a970e3">Visit</link>(
01354 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespaceclang_1_1cxcursor_1a6eadc019bbae1f61434528c197111b0e">MakeCursorNamespaceRef</link>(NNS-&gt;getAsNamespace(),&#32;Range.getBegin(),&#32;TU));
01355 
01356 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;NestedNameSpecifier::NamespaceAlias:
01357 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classclang_1_1cxcursor_1_1_cursor_visitor_1a01659df2ce565980ce5b581ba7a970e3">Visit</link>(<link linkend="_namespaceclang_1_1cxcursor_1a6eadc019bbae1f61434528c197111b0e">MakeCursorNamespaceRef</link>(NNS-&gt;getAsNamespaceAlias(),
01358 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Range.getBegin(),&#32;TU));
01359 
01360 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;NestedNameSpecifier::TypeSpec:&#32;{
01361 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;If&#32;the&#32;type&#32;has&#32;a&#32;form&#32;where&#32;we&#32;know&#32;that&#32;the&#32;beginning&#32;of&#32;the&#32;source</emphasis>
01362 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;range&#32;matches&#32;up&#32;with&#32;a&#32;reference&#32;cursor.&#32;Visit&#32;the&#32;appropriate&#32;reference</emphasis>
01363 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;cursor.</emphasis>
01364 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;Type&#32;*T&#32;=&#32;NNS-&gt;getAsType();
01365 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;TypedefType&#32;*Typedef&#32;=&#32;dyn_cast&lt;TypedefType&gt;(T))
01366 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classclang_1_1cxcursor_1_1_cursor_visitor_1a01659df2ce565980ce5b581ba7a970e3">Visit</link>(<link linkend="_namespaceclang_1_1cxcursor_1a3534c264c1431ec3d09c975fcafa263d">MakeCursorTypeRef</link>(Typedef-&gt;getDecl(),&#32;Range.getBegin(),&#32;TU));
01367 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;TagType&#32;*Tag&#32;=&#32;dyn_cast&lt;TagType&gt;(T))
01368 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classclang_1_1cxcursor_1_1_cursor_visitor_1a01659df2ce565980ce5b581ba7a970e3">Visit</link>(<link linkend="_namespaceclang_1_1cxcursor_1a3534c264c1431ec3d09c975fcafa263d">MakeCursorTypeRef</link>(Tag-&gt;getDecl(),&#32;Range.getBegin(),&#32;TU));
01369 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;TemplateSpecializationType&#32;*TST&#32;=
01370 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;dyn_cast&lt;TemplateSpecializationType&gt;(T))
01371 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classclang_1_1cxcursor_1_1_cursor_visitor_1aa6960261f98ac5f02749ece1e771464a">VisitTemplateName</link>(TST-&gt;getTemplateName(),&#32;Range.getBegin());
01372 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
01373 &#32;&#32;}
01374 
01375 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;NestedNameSpecifier::TypeSpecWithTemplate:
01376 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;NestedNameSpecifier::Global:
01377 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;NestedNameSpecifier::Identifier:
01378 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;NestedNameSpecifier::Super:
01379 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
01380 &#32;&#32;}
01381 
01382 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
01383 }
</programlisting><para>
References <link linkend="__c_x_cursor_8cpp_source_1l00913">clang::cxcursor::MakeCursorNamespaceRef()</link>, and <link linkend="__c_x_cursor_8cpp_source_1l00882">clang::cxcursor::MakeCursorTypeRef()</link>.</para>
    </section><anchor xml:id="_classclang_1_1cxcursor_1_1_cursor_visitor_1a7b754c2b2db487a1286e47d1134365bf"/>    <section>
    <title>VisitNestedNameSpecifierLoc()</title>
<indexterm><primary>VisitNestedNameSpecifierLoc</primary><secondary>clang::cxcursor::CursorVisitor</secondary></indexterm>
<indexterm><primary>clang::cxcursor::CursorVisitor</primary><secondary>VisitNestedNameSpecifierLoc</secondary></indexterm>
<para><computeroutput>bool CursorVisitor::VisitNestedNameSpecifierLoc (NestedNameSpecifierLoc NNS)</computeroutput></para><para>
Definition at line <link linkend="__c_index_8cpp_source_1l01385">1385</link> of file <link linkend="__c_index_8cpp_source">CIndex.cpp</link>.</para>
<programlisting>01386 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
01387 &#32;&#32;SmallVector&lt;NestedNameSpecifierLoc,&#32;4&gt;&#32;Qualifiers;
01388 &#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(;&#32;Qualifier;&#32;Qualifier&#32;=&#32;Qualifier.getPrefix())
01389 &#32;&#32;&#32;&#32;Qualifiers.push_back(Qualifier);
01390 
01391 &#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(!Qualifiers.empty())&#32;{
01392 &#32;&#32;&#32;&#32;NestedNameSpecifierLoc&#32;Q&#32;=&#32;Qualifiers.pop_back_val();
01393 &#32;&#32;&#32;&#32;NestedNameSpecifier&#32;*NNS&#32;=&#32;Q.getNestedNameSpecifier();
01394 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(NNS-&gt;getKind())&#32;{
01395 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;NestedNameSpecifier::Namespace:
01396 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_classclang_1_1cxcursor_1_1_cursor_visitor_1a01659df2ce565980ce5b581ba7a970e3">Visit</link>(<link linkend="_namespaceclang_1_1cxcursor_1a6eadc019bbae1f61434528c197111b0e">MakeCursorNamespaceRef</link>(NNS-&gt;getAsNamespace(),
01397 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Q.getLocalBeginLoc(),&#32;TU)))
01398 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
01399 
01400 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
01401 
01402 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;NestedNameSpecifier::NamespaceAlias:
01403 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_classclang_1_1cxcursor_1_1_cursor_visitor_1a01659df2ce565980ce5b581ba7a970e3">Visit</link>(<link linkend="_namespaceclang_1_1cxcursor_1a6eadc019bbae1f61434528c197111b0e">MakeCursorNamespaceRef</link>(NNS-&gt;getAsNamespaceAlias(),
01404 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Q.getLocalBeginLoc(),&#32;TU)))
01405 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
01406 
01407 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
01408 
01409 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;NestedNameSpecifier::TypeSpec:
01410 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;NestedNameSpecifier::TypeSpecWithTemplate:
01411 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_classclang_1_1cxcursor_1_1_cursor_visitor_1a01659df2ce565980ce5b581ba7a970e3">Visit</link>(Q.getTypeLoc()))
01412 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
01413 
01414 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
01415 
01416 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;NestedNameSpecifier::Global:
01417 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;NestedNameSpecifier::Identifier:
01418 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;NestedNameSpecifier::Super:
01419 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
01420 &#32;&#32;&#32;&#32;}
01421 &#32;&#32;}
01422 
01423 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
01424 }
</programlisting><para>
References <link linkend="__c_x_cursor_8cpp_source_1l00913">clang::cxcursor::MakeCursorNamespaceRef()</link>.</para>
    </section><anchor xml:id="_classclang_1_1cxcursor_1_1_cursor_visitor_1a400e0fc0d02c32b9307a7ff382fcd76f"/>    <section>
    <title>VisitNonTypeTemplateParmDecl()</title>
<indexterm><primary>VisitNonTypeTemplateParmDecl</primary><secondary>clang::cxcursor::CursorVisitor</secondary></indexterm>
<indexterm><primary>clang::cxcursor::CursorVisitor</primary><secondary>VisitNonTypeTemplateParmDecl</secondary></indexterm>
<para><computeroutput>bool CursorVisitor::VisitNonTypeTemplateParmDecl (NonTypeTemplateParmDecl * D)</computeroutput></para><para>
Definition at line <link linkend="__c_index_8cpp_source_1l00929">929</link> of file <link linkend="__c_index_8cpp_source">CIndex.cpp</link>.</para>
<programlisting>00929 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00930 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_classclang_1_1cxcursor_1_1_cursor_visitor_1ab44c6ae2ac80500f37d37e2893c37552">VisitDeclaratorDecl</link>(D))
00931 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
00932 
00933 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(D-&gt;hasDefaultArgument()&#32;&amp;&amp;&#32;!D-&gt;defaultArgumentWasInherited())
00934 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(Expr&#32;*DefArg&#32;=&#32;D-&gt;getDefaultArgument())
00935 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classclang_1_1cxcursor_1_1_cursor_visitor_1a01659df2ce565980ce5b581ba7a970e3">Visit</link>(<link linkend="_namespaceclang_1_1cxcursor_1ab61ec2059175833672e8e78a376bb218">MakeCXCursor</link>(DefArg,&#32;StmtParent,&#32;TU,&#32;RegionOfInterest));
00936 
00937 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
00938 }
</programlisting><para>
References <link linkend="_namespaceclang_1_1cxcursor_1ab61ec2059175833672e8e78a376bb218">clang::cxcursor::MakeCXCursor()</link>.</para>
    </section><anchor xml:id="_classclang_1_1cxcursor_1_1_cursor_visitor_1a1b34b238a762168d11b6b883dcd3b0fe"/>    <section>
    <title>VisitObjCCategoryDecl()</title>
<indexterm><primary>VisitObjCCategoryDecl</primary><secondary>clang::cxcursor::CursorVisitor</secondary></indexterm>
<indexterm><primary>clang::cxcursor::CursorVisitor</primary><secondary>VisitObjCCategoryDecl</secondary></indexterm>
<para><computeroutput>bool CursorVisitor::VisitObjCCategoryDecl (ObjCCategoryDecl * ND)</computeroutput></para><para>
Definition at line <link linkend="__c_index_8cpp_source_1l01081">1081</link> of file <link linkend="__c_index_8cpp_source">CIndex.cpp</link>.</para>
<programlisting>01081 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
01082 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_classclang_1_1cxcursor_1_1_cursor_visitor_1a01659df2ce565980ce5b581ba7a970e3">Visit</link>(<link linkend="_namespaceclang_1_1cxcursor_1aa0bea074dd325615cb85819eac47264e">MakeCursorObjCClassRef</link>(ND-&gt;getClassInterface(),&#32;ND-&gt;getLocation(),
01083 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;TU)))
01084 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
01085 
01086 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_classclang_1_1cxcursor_1_1_cursor_visitor_1aaa6cff14e5a41f01f821b18c37b89df3">VisitObjCTypeParamList</link>(ND-&gt;getTypeParamList()))
01087 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
01088 
01089 &#32;&#32;ObjCCategoryDecl::protocol_loc_iterator&#32;PL&#32;=&#32;ND-&gt;protocol_loc_begin();
01090 &#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(ObjCCategoryDecl::protocol_iterator&#32;I&#32;=&#32;ND-&gt;protocol_begin(),
01091 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;E&#32;=&#32;ND-&gt;protocol_end();
01092 &#32;&#32;&#32;&#32;&#32;&#32;&#32;I&#32;!=&#32;E;&#32;++I,&#32;++PL)
01093 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_classclang_1_1cxcursor_1_1_cursor_visitor_1a01659df2ce565980ce5b581ba7a970e3">Visit</link>(<link linkend="_namespaceclang_1_1cxcursor_1ac238ecc9f974783b9d0c2129f5aa675f">MakeCursorObjCProtocolRef</link>(*I,&#32;*PL,&#32;TU)))
01094 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
01095 
01096 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classclang_1_1cxcursor_1_1_cursor_visitor_1a6cd04bb7010823f467388f85ee88178a">VisitObjCContainerDecl</link>(ND);
01097 }
</programlisting><para>
References <link linkend="__c_x_cursor_8cpp_source_1l00863">clang::cxcursor::MakeCursorObjCClassRef()</link>, and <link linkend="__c_x_cursor_8cpp_source_1l00847">clang::cxcursor::MakeCursorObjCProtocolRef()</link>.</para>
    </section><anchor xml:id="_classclang_1_1cxcursor_1_1_cursor_visitor_1af01009aeb52463835220b7dd0b7a38a5"/>    <section>
    <title>VisitObjCCategoryImplDecl()</title>
<indexterm><primary>VisitObjCCategoryImplDecl</primary><secondary>clang::cxcursor::CursorVisitor</secondary></indexterm>
<indexterm><primary>clang::cxcursor::CursorVisitor</primary><secondary>VisitObjCCategoryImplDecl</secondary></indexterm>
<para><computeroutput>bool CursorVisitor::VisitObjCCategoryImplDecl (ObjCCategoryImplDecl * D)</computeroutput></para><para>
Definition at line <link linkend="__c_index_8cpp_source_1l01196">1196</link> of file <link linkend="__c_index_8cpp_source">CIndex.cpp</link>.</para>
<programlisting>01196 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
01197 &#32;&#32;<emphasis role="comment">//&#32;&apos;ID&apos;&#32;could&#32;be&#32;null&#32;when&#32;dealing&#32;with&#32;invalid&#32;code.</emphasis>
01198 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(ObjCInterfaceDecl&#32;*ID&#32;=&#32;D-&gt;getClassInterface())
01199 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_classclang_1_1cxcursor_1_1_cursor_visitor_1a01659df2ce565980ce5b581ba7a970e3">Visit</link>(<link linkend="_namespaceclang_1_1cxcursor_1aa0bea074dd325615cb85819eac47264e">MakeCursorObjCClassRef</link>(ID,&#32;D-&gt;getLocation(),&#32;TU)))
01200 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
01201 
01202 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classclang_1_1cxcursor_1_1_cursor_visitor_1a2e740eceec896420d789bfecb55d7401">VisitObjCImplDecl</link>(D);
01203 }
</programlisting><para>
References <link linkend="__c_x_cursor_8cpp_source_1l00863">clang::cxcursor::MakeCursorObjCClassRef()</link>.</para>
    </section><anchor xml:id="_classclang_1_1cxcursor_1_1_cursor_visitor_1a6cd04bb7010823f467388f85ee88178a"/>    <section>
    <title>VisitObjCContainerDecl()</title>
<indexterm><primary>VisitObjCContainerDecl</primary><secondary>clang::cxcursor::CursorVisitor</secondary></indexterm>
<indexterm><primary>clang::cxcursor::CursorVisitor</primary><secondary>VisitObjCContainerDecl</secondary></indexterm>
<para><computeroutput>bool CursorVisitor::VisitObjCContainerDecl (ObjCContainerDecl * D)</computeroutput></para><para>
Definition at line <link linkend="__c_index_8cpp_source_1l01018">1018</link> of file <link linkend="__c_index_8cpp_source">CIndex.cpp</link>.</para>
<programlisting>01018 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
01019 &#32;&#32;<emphasis role="comment">//&#32;FIXME:&#32;Eventually&#32;convert&#32;back&#32;to&#32;just&#32;&apos;VisitDeclContext()&apos;.&#32;&#32;Essentially</emphasis>
01020 &#32;&#32;<emphasis role="comment">//&#32;an&#32;@implementation&#32;can&#32;lexically&#32;contain&#32;Decls&#32;that&#32;are&#32;not&#32;properly</emphasis>
01021 &#32;&#32;<emphasis role="comment">//&#32;nested&#32;in&#32;the&#32;AST.&#32;&#32;When&#32;we&#32;identify&#32;such&#32;cases,&#32;we&#32;need&#32;to&#32;retrofit</emphasis>
01022 &#32;&#32;<emphasis role="comment">//&#32;this&#32;nesting&#32;here.</emphasis>
01023 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!DI_current&#32;&amp;&amp;&#32;!FileDI_current)
01024 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classclang_1_1cxcursor_1_1_cursor_visitor_1a3bca6000335f6c6e012b01a042d10d32">VisitDeclContext</link>(D);
01025 
01026 &#32;&#32;<emphasis role="comment">//&#32;Scan&#32;the&#32;Decls&#32;that&#32;immediately&#32;come&#32;after&#32;the&#32;container</emphasis>
01027 &#32;&#32;<emphasis role="comment">//&#32;in&#32;the&#32;current&#32;DeclContext.&#32;&#32;If&#32;any&#32;fall&#32;within&#32;the</emphasis>
01028 &#32;&#32;<emphasis role="comment">//&#32;container&apos;s&#32;lexical&#32;region,&#32;stash&#32;them&#32;into&#32;a&#32;vector</emphasis>
01029 &#32;&#32;<emphasis role="comment">//&#32;for&#32;later&#32;processing.</emphasis>
01030 &#32;&#32;SmallVector&lt;Decl&#32;*,&#32;24&gt;&#32;DeclsInContainer;
01031 &#32;&#32;SourceLocation&#32;EndLoc&#32;=&#32;D-&gt;getSourceRange().getEnd();
01032 &#32;&#32;SourceManager&#32;&amp;SM&#32;=&#32;AU-&gt;getSourceManager();
01033 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(EndLoc.isValid())&#32;{
01034 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(DI_current)&#32;{
01035 &#32;&#32;&#32;&#32;&#32;&#32;addRangedDeclsInContainer(DI_current,&#32;DE_current,&#32;SM,&#32;EndLoc,
01036 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;DeclsInContainer);
01037 &#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
01038 &#32;&#32;&#32;&#32;&#32;&#32;addRangedDeclsInContainer(FileDI_current,&#32;FileDE_current,&#32;SM,&#32;EndLoc,
01039 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;DeclsInContainer);
01040 &#32;&#32;&#32;&#32;}
01041 &#32;&#32;}
01042 
01043 &#32;&#32;<emphasis role="comment">//&#32;The&#32;common&#32;case.</emphasis>
01044 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(DeclsInContainer.empty())
01045 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classclang_1_1cxcursor_1_1_cursor_visitor_1a3bca6000335f6c6e012b01a042d10d32">VisitDeclContext</link>(D);
01046 
01047 &#32;&#32;<emphasis role="comment">//&#32;Get&#32;all&#32;the&#32;Decls&#32;in&#32;the&#32;DeclContext,&#32;and&#32;sort&#32;them&#32;with&#32;the</emphasis>
01048 &#32;&#32;<emphasis role="comment">//&#32;additional&#32;ones&#32;we&apos;ve&#32;collected.&#32;&#32;Then&#32;visit&#32;them.</emphasis>
01049 &#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">auto</emphasis>&#32;*SubDecl&#32;:&#32;D-&gt;decls())&#32;{
01050 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!SubDecl&#32;||&#32;SubDecl-&gt;getLexicalDeclContext()&#32;!=&#32;D&#32;||
01051 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;SubDecl-&gt;getBeginLoc().isInvalid())
01052 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">continue</emphasis>;
01053 &#32;&#32;&#32;&#32;DeclsInContainer.push_back(SubDecl);
01054 &#32;&#32;}
01055 
01056 &#32;&#32;<emphasis role="comment">//&#32;Now&#32;sort&#32;the&#32;Decls&#32;so&#32;that&#32;they&#32;appear&#32;in&#32;lexical&#32;order.</emphasis>
01057 &#32;&#32;llvm::sort(DeclsInContainer,&#32;[&amp;SM](Decl&#32;*A,&#32;Decl&#32;*B)&#32;{
01058 &#32;&#32;&#32;&#32;SourceLocation&#32;L_A&#32;=&#32;A-&gt;getBeginLoc();
01059 &#32;&#32;&#32;&#32;SourceLocation&#32;L_B&#32;=&#32;B-&gt;getBeginLoc();
01060 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;L_A&#32;!=&#32;L_B
01061 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;?&#32;SM.isBeforeInTranslationUnit(L_A,&#32;L_B)
01062 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;SM.isBeforeInTranslationUnit(A-&gt;getEndLoc(),&#32;B-&gt;getEndLoc());
01063 &#32;&#32;});
01064 
01065 &#32;&#32;<emphasis role="comment">//&#32;Now&#32;visit&#32;the&#32;decls.</emphasis>
01066 &#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(SmallVectorImpl&lt;Decl&#32;*&gt;::iterator&#32;I&#32;=&#32;DeclsInContainer.begin(),
01067 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;E&#32;=&#32;DeclsInContainer.end();
01068 &#32;&#32;&#32;&#32;&#32;&#32;&#32;I&#32;!=&#32;E;&#32;++I)&#32;{
01069 &#32;&#32;&#32;&#32;CXCursor&#32;Cursor&#32;=&#32;<link linkend="_namespaceclang_1_1cxcursor_1ab61ec2059175833672e8e78a376bb218">MakeCXCursor</link>(*I,&#32;TU,&#32;RegionOfInterest);
01070 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;Optional&lt;bool&gt;&#32;&amp;V&#32;=&#32;<link linkend="_classclang_1_1cxcursor_1_1_cursor_visitor_1a31db49ad4d23960990fa744b69517c0d">shouldVisitCursor</link>(Cursor);
01071 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!V.hasValue())
01072 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">continue</emphasis>;
01073 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!V.getValue())
01074 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
01075 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_classclang_1_1cxcursor_1_1_cursor_visitor_1a01659df2ce565980ce5b581ba7a970e3">Visit</link>(Cursor,&#32;<emphasis role="keyword">true</emphasis>))
01076 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
01077 &#32;&#32;}
01078 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
01079 }
</programlisting>    </section><anchor xml:id="_classclang_1_1cxcursor_1_1_cursor_visitor_1a2e740eceec896420d789bfecb55d7401"/>    <section>
    <title>VisitObjCImplDecl()</title>
<indexterm><primary>VisitObjCImplDecl</primary><secondary>clang::cxcursor::CursorVisitor</secondary></indexterm>
<indexterm><primary>clang::cxcursor::CursorVisitor</primary><secondary>VisitObjCImplDecl</secondary></indexterm>
<para><computeroutput>bool CursorVisitor::VisitObjCImplDecl (ObjCImplDecl * D)</computeroutput></para><para>
Definition at line <link linkend="__c_index_8cpp_source_1l01192">1192</link> of file <link linkend="__c_index_8cpp_source">CIndex.cpp</link>.</para>
<programlisting>01192 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
01193 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classclang_1_1cxcursor_1_1_cursor_visitor_1a6cd04bb7010823f467388f85ee88178a">VisitObjCContainerDecl</link>(D);
01194 }
</programlisting>    </section><anchor xml:id="_classclang_1_1cxcursor_1_1_cursor_visitor_1aea7885c140d3c98feb0086019ca23a54"/>    <section>
    <title>VisitObjCImplementationDecl()</title>
<indexterm><primary>VisitObjCImplementationDecl</primary><secondary>clang::cxcursor::CursorVisitor</secondary></indexterm>
<indexterm><primary>clang::cxcursor::CursorVisitor</primary><secondary>VisitObjCImplementationDecl</secondary></indexterm>
<para><computeroutput>bool CursorVisitor::VisitObjCImplementationDecl (ObjCImplementationDecl * D)</computeroutput></para><para>
Definition at line <link linkend="__c_index_8cpp_source_1l01205">1205</link> of file <link linkend="__c_index_8cpp_source">CIndex.cpp</link>.</para>
<programlisting>01205 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
01206 <emphasis role="preprocessor">#if&#32;0</emphasis>
01207 &#32;&#32;<emphasis role="comment">//&#32;Issue&#32;callbacks&#32;for&#32;super&#32;class.</emphasis>
01208 &#32;&#32;<emphasis role="comment">//&#32;FIXME:&#32;No&#32;source&#32;location&#32;information!</emphasis>
01209 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(D-&gt;getSuperClass()&#32;&amp;&amp;
01210 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classclang_1_1cxcursor_1_1_cursor_visitor_1a01659df2ce565980ce5b581ba7a970e3">Visit</link>(<link linkend="_namespaceclang_1_1cxcursor_1a81d6b09cb8995b57d394a8372437902a">MakeCursorObjCSuperClassRef</link>(D-&gt;getSuperClass(),
01211 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;D-&gt;getSuperClassLoc(),
01212 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;TU)))
01213 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
01214 <emphasis role="preprocessor">#endif</emphasis>
01215 
01216 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classclang_1_1cxcursor_1_1_cursor_visitor_1a2e740eceec896420d789bfecb55d7401">VisitObjCImplDecl</link>(D);
01217 }
</programlisting><para>
References <link linkend="__c_x_cursor_8cpp_source_1l00831">clang::cxcursor::MakeCursorObjCSuperClassRef()</link>.</para>
    </section><anchor xml:id="_classclang_1_1cxcursor_1_1_cursor_visitor_1acb338f84620f6368cf377bb111d77b25"/>    <section>
    <title>VisitObjCInterfaceDecl()</title>
<indexterm><primary>VisitObjCInterfaceDecl</primary><secondary>clang::cxcursor::CursorVisitor</secondary></indexterm>
<indexterm><primary>clang::cxcursor::CursorVisitor</primary><secondary>VisitObjCInterfaceDecl</secondary></indexterm>
<para><computeroutput>bool CursorVisitor::VisitObjCInterfaceDecl (ObjCInterfaceDecl * D)</computeroutput></para><para>
Definition at line <link linkend="__c_index_8cpp_source_1l01163">1163</link> of file <link linkend="__c_index_8cpp_source">CIndex.cpp</link>.</para>
<programlisting>01163 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
01164 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!D-&gt;isThisDeclarationADefinition())&#32;{
01165 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Forward&#32;declaration&#32;is&#32;treated&#32;like&#32;a&#32;reference.</emphasis>
01166 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classclang_1_1cxcursor_1_1_cursor_visitor_1a01659df2ce565980ce5b581ba7a970e3">Visit</link>(<link linkend="_namespaceclang_1_1cxcursor_1aa0bea074dd325615cb85819eac47264e">MakeCursorObjCClassRef</link>(D,&#32;D-&gt;getLocation(),&#32;TU));
01167 &#32;&#32;}
01168 
01169 &#32;&#32;<emphasis role="comment">//&#32;Objective-C&#32;type&#32;parameters.</emphasis>
01170 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_classclang_1_1cxcursor_1_1_cursor_visitor_1aaa6cff14e5a41f01f821b18c37b89df3">VisitObjCTypeParamList</link>(D-&gt;getTypeParamListAsWritten()))
01171 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
01172 
01173 &#32;&#32;<emphasis role="comment">//&#32;Issue&#32;callbacks&#32;for&#32;super&#32;class.</emphasis>
01174 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(D-&gt;getSuperClass()&#32;&amp;&amp;&#32;<link linkend="_classclang_1_1cxcursor_1_1_cursor_visitor_1a01659df2ce565980ce5b581ba7a970e3">Visit</link>(<link linkend="_namespaceclang_1_1cxcursor_1a81d6b09cb8995b57d394a8372437902a">MakeCursorObjCSuperClassRef</link>(
01175 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;D-&gt;getSuperClass(),&#32;D-&gt;getSuperClassLoc(),&#32;TU)))
01176 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
01177 
01178 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(TypeSourceInfo&#32;*SuperClassTInfo&#32;=&#32;D-&gt;getSuperClassTInfo())
01179 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_classclang_1_1cxcursor_1_1_cursor_visitor_1a01659df2ce565980ce5b581ba7a970e3">Visit</link>(SuperClassTInfo-&gt;getTypeLoc()))
01180 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
01181 
01182 &#32;&#32;ObjCInterfaceDecl::protocol_loc_iterator&#32;PL&#32;=&#32;D-&gt;protocol_loc_begin();
01183 &#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(ObjCInterfaceDecl::protocol_iterator&#32;I&#32;=&#32;D-&gt;protocol_begin(),
01184 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;E&#32;=&#32;D-&gt;protocol_end();
01185 &#32;&#32;&#32;&#32;&#32;&#32;&#32;I&#32;!=&#32;E;&#32;++I,&#32;++PL)
01186 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_classclang_1_1cxcursor_1_1_cursor_visitor_1a01659df2ce565980ce5b581ba7a970e3">Visit</link>(<link linkend="_namespaceclang_1_1cxcursor_1ac238ecc9f974783b9d0c2129f5aa675f">MakeCursorObjCProtocolRef</link>(*I,&#32;*PL,&#32;TU)))
01187 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
01188 
01189 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classclang_1_1cxcursor_1_1_cursor_visitor_1a6cd04bb7010823f467388f85ee88178a">VisitObjCContainerDecl</link>(D);
01190 }
</programlisting><para>
References <link linkend="__c_x_cursor_8cpp_source_1l00863">clang::cxcursor::MakeCursorObjCClassRef()</link>, <link linkend="__c_x_cursor_8cpp_source_1l00847">clang::cxcursor::MakeCursorObjCProtocolRef()</link>, and <link linkend="__c_x_cursor_8cpp_source_1l00831">clang::cxcursor::MakeCursorObjCSuperClassRef()</link>.</para>
    </section><anchor xml:id="_classclang_1_1cxcursor_1_1_cursor_visitor_1ae232b4aa473d4eae202b791b6780cd9e"/>    <section>
    <title>VisitObjCMethodDecl()</title>
<indexterm><primary>VisitObjCMethodDecl</primary><secondary>clang::cxcursor::CursorVisitor</secondary></indexterm>
<indexterm><primary>clang::cxcursor::CursorVisitor</primary><secondary>VisitObjCMethodDecl</secondary></indexterm>
<para><computeroutput>bool CursorVisitor::VisitObjCMethodDecl (ObjCMethodDecl * ND)</computeroutput></para><para>
Definition at line <link linkend="__c_index_8cpp_source_1l00983">983</link> of file <link linkend="__c_index_8cpp_source">CIndex.cpp</link>.</para>
<programlisting>00983 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00984 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(TypeSourceInfo&#32;*TSInfo&#32;=&#32;ND-&gt;getReturnTypeSourceInfo())
00985 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_classclang_1_1cxcursor_1_1_cursor_visitor_1a01659df2ce565980ce5b581ba7a970e3">Visit</link>(TSInfo-&gt;getTypeLoc()))
00986 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
00987 
00988 &#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;*P&#32;:&#32;ND-&gt;parameters())&#32;{
00989 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_classclang_1_1cxcursor_1_1_cursor_visitor_1a01659df2ce565980ce5b581ba7a970e3">Visit</link>(<link linkend="_namespaceclang_1_1cxcursor_1ab61ec2059175833672e8e78a376bb218">MakeCXCursor</link>(P,&#32;TU,&#32;RegionOfInterest)))
00990 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
00991 &#32;&#32;}
00992 
00993 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;ND-&gt;isThisDeclarationADefinition()&#32;&amp;&amp;
00994 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classclang_1_1cxcursor_1_1_cursor_visitor_1a01659df2ce565980ce5b581ba7a970e3">Visit</link>(<link linkend="_namespaceclang_1_1cxcursor_1ab61ec2059175833672e8e78a376bb218">MakeCXCursor</link>(ND-&gt;getBody(),&#32;StmtParent,&#32;TU,&#32;RegionOfInterest));
00995 }
</programlisting><para>
References <link linkend="_namespaceclang_1_1cxcursor_1ab61ec2059175833672e8e78a376bb218">clang::cxcursor::MakeCXCursor()</link>.</para>
    </section><anchor xml:id="_classclang_1_1cxcursor_1_1_cursor_visitor_1a605826428470d3401161655fe5ff5900"/>    <section>
    <title>VisitObjCPropertyDecl()</title>
<indexterm><primary>VisitObjCPropertyDecl</primary><secondary>clang::cxcursor::CursorVisitor</secondary></indexterm>
<indexterm><primary>clang::cxcursor::CursorVisitor</primary><secondary>VisitObjCPropertyDecl</secondary></indexterm>
<para><computeroutput>bool CursorVisitor::VisitObjCPropertyDecl (ObjCPropertyDecl * PD)</computeroutput></para><para>
Definition at line <link linkend="__c_index_8cpp_source_1l01113">1113</link> of file <link linkend="__c_index_8cpp_source">CIndex.cpp</link>.</para>
<programlisting>01113 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
01114 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(PD-&gt;getTypeSourceInfo()&#32;&amp;&amp;&#32;<link linkend="_classclang_1_1cxcursor_1_1_cursor_visitor_1a01659df2ce565980ce5b581ba7a970e3">Visit</link>(PD-&gt;getTypeSourceInfo()-&gt;getTypeLoc()))
01115 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
01116 
01117 &#32;&#32;<emphasis role="comment">//&#32;FIXME:&#32;This&#32;implements&#32;a&#32;workaround&#32;with&#32;@property&#32;declarations&#32;also&#32;being</emphasis>
01118 &#32;&#32;<emphasis role="comment">//&#32;installed&#32;in&#32;the&#32;DeclContext&#32;for&#32;the&#32;@interface.&#32;&#32;Eventually&#32;this&#32;code</emphasis>
01119 &#32;&#32;<emphasis role="comment">//&#32;should&#32;be&#32;removed.</emphasis>
01120 &#32;&#32;ObjCCategoryDecl&#32;*CDecl&#32;=&#32;dyn_cast&lt;ObjCCategoryDecl&gt;(PD-&gt;getDeclContext());
01121 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!CDecl&#32;||&#32;!CDecl-&gt;IsClassExtension())
01122 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
01123 
01124 &#32;&#32;ObjCInterfaceDecl&#32;*ID&#32;=&#32;CDecl-&gt;getClassInterface();
01125 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!ID)
01126 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
01127 
01128 &#32;&#32;IdentifierInfo&#32;*PropertyId&#32;=&#32;PD-&gt;getIdentifier();
01129 &#32;&#32;ObjCPropertyDecl&#32;*prevDecl&#32;=&#32;ObjCPropertyDecl::findPropertyDecl(
01130 &#32;&#32;&#32;&#32;&#32;&#32;cast&lt;DeclContext&gt;(ID),&#32;PropertyId,&#32;PD-&gt;getQueryKind());
01131 
01132 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!prevDecl)
01133 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
01134 
01135 &#32;&#32;<emphasis role="comment">//&#32;Visit&#32;synthesized&#32;methods&#32;since&#32;they&#32;will&#32;be&#32;skipped&#32;when&#32;visiting</emphasis>
01136 &#32;&#32;<emphasis role="comment">//&#32;the&#32;@interface.</emphasis>
01137 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(ObjCMethodDecl&#32;*MD&#32;=&#32;prevDecl-&gt;getGetterMethodDecl())
01138 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(MD-&gt;isPropertyAccessor()&#32;&amp;&amp;&#32;MD-&gt;getLexicalDeclContext()&#32;==&#32;CDecl)
01139 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_classclang_1_1cxcursor_1_1_cursor_visitor_1a01659df2ce565980ce5b581ba7a970e3">Visit</link>(<link linkend="_namespaceclang_1_1cxcursor_1ab61ec2059175833672e8e78a376bb218">MakeCXCursor</link>(MD,&#32;TU,&#32;RegionOfInterest)))
01140 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
01141 
01142 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(ObjCMethodDecl&#32;*MD&#32;=&#32;prevDecl-&gt;getSetterMethodDecl())
01143 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(MD-&gt;isPropertyAccessor()&#32;&amp;&amp;&#32;MD-&gt;getLexicalDeclContext()&#32;==&#32;CDecl)
01144 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_classclang_1_1cxcursor_1_1_cursor_visitor_1a01659df2ce565980ce5b581ba7a970e3">Visit</link>(<link linkend="_namespaceclang_1_1cxcursor_1ab61ec2059175833672e8e78a376bb218">MakeCXCursor</link>(MD,&#32;TU,&#32;RegionOfInterest)))
01145 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
01146 
01147 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
01148 }
</programlisting><para>
References <link linkend="_namespaceclang_1_1cxcursor_1ab61ec2059175833672e8e78a376bb218">clang::cxcursor::MakeCXCursor()</link>.</para>
    </section><anchor xml:id="_classclang_1_1cxcursor_1_1_cursor_visitor_1a6bdf80e7aa619732316432b8b393c9bb"/>    <section>
    <title>VisitObjCPropertyImplDecl()</title>
<indexterm><primary>VisitObjCPropertyImplDecl</primary><secondary>clang::cxcursor::CursorVisitor</secondary></indexterm>
<indexterm><primary>clang::cxcursor::CursorVisitor</primary><secondary>VisitObjCPropertyImplDecl</secondary></indexterm>
<para><computeroutput>bool CursorVisitor::VisitObjCPropertyImplDecl (ObjCPropertyImplDecl * PD)</computeroutput></para><para>
Definition at line <link linkend="__c_index_8cpp_source_1l01219">1219</link> of file <link linkend="__c_index_8cpp_source">CIndex.cpp</link>.</para>
<programlisting>01219 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
01220 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(ObjCIvarDecl&#32;*Ivar&#32;=&#32;PD-&gt;getPropertyIvarDecl())
01221 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(PD-&gt;isIvarNameSpecified())
01222 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classclang_1_1cxcursor_1_1_cursor_visitor_1a01659df2ce565980ce5b581ba7a970e3">Visit</link>(<link linkend="_namespaceclang_1_1cxcursor_1ad70c49c226f87377bc26fba7a4dbe973">MakeCursorMemberRef</link>(Ivar,&#32;PD-&gt;getPropertyIvarDeclLoc(),&#32;TU));
01223 
01224 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
01225 }
</programlisting><para>
References <link linkend="__c_x_cursor_8cpp_source_1l00947">clang::cxcursor::MakeCursorMemberRef()</link>.</para>
    </section><anchor xml:id="_classclang_1_1cxcursor_1_1_cursor_visitor_1a2c0feae123024ef1c7aeb8b10194d39a"/>    <section>
    <title>VisitObjCProtocolDecl()</title>
<indexterm><primary>VisitObjCProtocolDecl</primary><secondary>clang::cxcursor::CursorVisitor</secondary></indexterm>
<indexterm><primary>clang::cxcursor::CursorVisitor</primary><secondary>VisitObjCProtocolDecl</secondary></indexterm>
<para><computeroutput>bool CursorVisitor::VisitObjCProtocolDecl (ObjCProtocolDecl * PID)</computeroutput></para><para>
Definition at line <link linkend="__c_index_8cpp_source_1l01099">1099</link> of file <link linkend="__c_index_8cpp_source">CIndex.cpp</link>.</para>
<programlisting>01099 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
01100 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!PID-&gt;isThisDeclarationADefinition())
01101 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classclang_1_1cxcursor_1_1_cursor_visitor_1a01659df2ce565980ce5b581ba7a970e3">Visit</link>(<link linkend="_namespaceclang_1_1cxcursor_1ac238ecc9f974783b9d0c2129f5aa675f">MakeCursorObjCProtocolRef</link>(PID,&#32;PID-&gt;getLocation(),&#32;TU));
01102 
01103 &#32;&#32;ObjCProtocolDecl::protocol_loc_iterator&#32;PL&#32;=&#32;PID-&gt;protocol_loc_begin();
01104 &#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(ObjCProtocolDecl::protocol_iterator&#32;I&#32;=&#32;PID-&gt;protocol_begin(),
01105 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;E&#32;=&#32;PID-&gt;protocol_end();
01106 &#32;&#32;&#32;&#32;&#32;&#32;&#32;I&#32;!=&#32;E;&#32;++I,&#32;++PL)
01107 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_classclang_1_1cxcursor_1_1_cursor_visitor_1a01659df2ce565980ce5b581ba7a970e3">Visit</link>(<link linkend="_namespaceclang_1_1cxcursor_1ac238ecc9f974783b9d0c2129f5aa675f">MakeCursorObjCProtocolRef</link>(*I,&#32;*PL,&#32;TU)))
01108 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
01109 
01110 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classclang_1_1cxcursor_1_1_cursor_visitor_1a6cd04bb7010823f467388f85ee88178a">VisitObjCContainerDecl</link>(PID);
01111 }
</programlisting><para>
References <link linkend="__c_x_cursor_8cpp_source_1l00847">clang::cxcursor::MakeCursorObjCProtocolRef()</link>.</para>
    </section><anchor xml:id="_classclang_1_1cxcursor_1_1_cursor_visitor_1ae4ae51a63ce481b6c3c296d6ff58e4d6"/>    <section>
    <title>VisitObjCTypeParamDecl()</title>
<indexterm><primary>VisitObjCTypeParamDecl</primary><secondary>clang::cxcursor::CursorVisitor</secondary></indexterm>
<indexterm><primary>clang::cxcursor::CursorVisitor</primary><secondary>VisitObjCTypeParamDecl</secondary></indexterm>
<para><computeroutput>bool CursorVisitor::VisitObjCTypeParamDecl (ObjCTypeParamDecl * D)</computeroutput></para><para>
Definition at line <link linkend="__c_index_8cpp_source_1l00971">971</link> of file <link linkend="__c_index_8cpp_source">CIndex.cpp</link>.</para>
<programlisting>00971 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00972 &#32;&#32;<emphasis role="comment">//&#32;Visit&#32;the&#32;bound,&#32;if&#32;it&apos;s&#32;explicit.</emphasis>
00973 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(D-&gt;hasExplicitBound())&#32;{
00974 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="keyword">auto</emphasis>&#32;TInfo&#32;=&#32;D-&gt;getTypeSourceInfo())&#32;{
00975 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_classclang_1_1cxcursor_1_1_cursor_visitor_1a01659df2ce565980ce5b581ba7a970e3">Visit</link>(TInfo-&gt;getTypeLoc()))
00976 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
00977 &#32;&#32;&#32;&#32;}
00978 &#32;&#32;}
00979 
00980 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
00981 }
</programlisting>    </section><anchor xml:id="_classclang_1_1cxcursor_1_1_cursor_visitor_1aaa6cff14e5a41f01f821b18c37b89df3"/>    <section>
    <title>VisitObjCTypeParamList()</title>
<indexterm><primary>VisitObjCTypeParamList</primary><secondary>clang::cxcursor::CursorVisitor</secondary></indexterm>
<indexterm><primary>clang::cxcursor::CursorVisitor</primary><secondary>VisitObjCTypeParamList</secondary></indexterm>
<para><computeroutput>bool CursorVisitor::VisitObjCTypeParamList (ObjCTypeParamList * typeParamList)</computeroutput></para><para>
Definition at line <link linkend="__c_index_8cpp_source_1l01150">1150</link> of file <link linkend="__c_index_8cpp_source">CIndex.cpp</link>.</para>
<programlisting>01150 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
01151 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!typeParamList)
01152 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
01153 
01154 &#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">auto</emphasis>&#32;*typeParam&#32;:&#32;*typeParamList)&#32;{
01155 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Visit&#32;the&#32;type&#32;parameter.</emphasis>
01156 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_classclang_1_1cxcursor_1_1_cursor_visitor_1a01659df2ce565980ce5b581ba7a970e3">Visit</link>(<link linkend="_namespaceclang_1_1cxcursor_1ab61ec2059175833672e8e78a376bb218">MakeCXCursor</link>(typeParam,&#32;TU,&#32;RegionOfInterest)))
01157 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
01158 &#32;&#32;}
01159 
01160 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
01161 }
</programlisting><para>
References <link linkend="_namespaceclang_1_1cxcursor_1ab61ec2059175833672e8e78a376bb218">clang::cxcursor::MakeCXCursor()</link>.</para>
    </section><anchor xml:id="_classclang_1_1cxcursor_1_1_cursor_visitor_1a70914a4f8ef86d9c92d0b65da5177111"/>    <section>
    <title>visitPreprocessedEntities()</title>
<indexterm><primary>visitPreprocessedEntities</primary><secondary>clang::cxcursor::CursorVisitor</secondary></indexterm>
<indexterm><primary>clang::cxcursor::CursorVisitor</primary><secondary>visitPreprocessedEntities</secondary></indexterm>
<computeroutput>template&lt;typename InputIterator &gt; </computeroutput><para><computeroutput>bool CursorVisitor::visitPreprocessedEntities (InputIterator First, InputIterator Last, PreprocessingRecord &amp; PPRec, FileID FID = <computeroutput>FileID()</computeroutput>
)</computeroutput></para><para>
Definition at line <link linkend="__c_index_8cpp_source_1l00451">451</link> of file <link linkend="__c_index_8cpp_source">CIndex.cpp</link>.</para>
<programlisting>00454 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00455 &#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(;&#32;First&#32;!=&#32;Last;&#32;++First)&#32;{
00456 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!FID.isInvalid()&#32;&amp;&amp;&#32;!PPRec.isEntityInFileID(First,&#32;FID))
00457 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">continue</emphasis>;
00458 
00459 &#32;&#32;&#32;&#32;PreprocessedEntity&#32;*PPE&#32;=&#32;*First;
00460 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!PPE)
00461 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">continue</emphasis>;
00462 
00463 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(MacroExpansion&#32;*ME&#32;=&#32;dyn_cast&lt;MacroExpansion&gt;(PPE))&#32;{
00464 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_classclang_1_1cxcursor_1_1_cursor_visitor_1a01659df2ce565980ce5b581ba7a970e3">Visit</link>(<link linkend="_namespaceclang_1_1cxcursor_1a64450be5a9ef97c872d47219caaccfce">MakeMacroExpansionCursor</link>(ME,&#32;TU)))
00465 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
00466 
00467 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">continue</emphasis>;
00468 &#32;&#32;&#32;&#32;}
00469 
00470 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(MacroDefinitionRecord&#32;*MD&#32;=&#32;dyn_cast&lt;MacroDefinitionRecord&gt;(PPE))&#32;{
00471 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_classclang_1_1cxcursor_1_1_cursor_visitor_1a01659df2ce565980ce5b581ba7a970e3">Visit</link>(<link linkend="_namespaceclang_1_1cxcursor_1a62e05b7f28b894bf90226918a8f3386a">MakeMacroDefinitionCursor</link>(MD,&#32;TU)))
00472 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
00473 
00474 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">continue</emphasis>;
00475 &#32;&#32;&#32;&#32;}
00476 
00477 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(InclusionDirective&#32;*ID&#32;=&#32;dyn_cast&lt;InclusionDirective&gt;(PPE))&#32;{
00478 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_classclang_1_1cxcursor_1_1_cursor_visitor_1a01659df2ce565980ce5b581ba7a970e3">Visit</link>(<link linkend="_namespaceclang_1_1cxcursor_1acc1961183c2fb603b894a7f8621b16bb">MakeInclusionDirectiveCursor</link>(ID,&#32;TU)))
00479 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
00480 
00481 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">continue</emphasis>;
00482 &#32;&#32;&#32;&#32;}
00483 &#32;&#32;}
00484 
00485 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
00486 }
</programlisting><para>
References <link linkend="__c_x_cursor_8cpp_source_1l01034">clang::cxcursor::MakeInclusionDirectiveCursor()</link>, <link linkend="__c_x_cursor_8cpp_source_1l00992">clang::cxcursor::MakeMacroDefinitionCursor()</link>, and <link linkend="__c_x_cursor_8cpp_source_1l01003">clang::cxcursor::MakeMacroExpansionCursor()</link>.</para>
    </section><anchor xml:id="_classclang_1_1cxcursor_1_1_cursor_visitor_1a4f29bab7210fb14b41a847ab87705f46"/>    <section>
    <title>visitPreprocessedEntitiesInRegion()</title>
<indexterm><primary>visitPreprocessedEntitiesInRegion</primary><secondary>clang::cxcursor::CursorVisitor</secondary></indexterm>
<indexterm><primary>clang::cxcursor::CursorVisitor</primary><secondary>visitPreprocessedEntitiesInRegion</secondary></indexterm>
<para><computeroutput>bool CursorVisitor::visitPreprocessedEntitiesInRegion ( )</computeroutput></para><para>
Definition at line <link linkend="__c_index_8cpp_source_1l00407">407</link> of file <link linkend="__c_index_8cpp_source">CIndex.cpp</link>.</para>
<programlisting>00407 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00408 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!AU-&gt;getPreprocessor().getPreprocessingRecord())
00409 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
00410 
00411 &#32;&#32;PreprocessingRecord&#32;&amp;PPRec&#32;=&#32;*AU-&gt;getPreprocessor().getPreprocessingRecord();
00412 &#32;&#32;SourceManager&#32;&amp;SM&#32;=&#32;AU-&gt;getSourceManager();
00413 
00414 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(RegionOfInterest.isValid())&#32;{
00415 &#32;&#32;&#32;&#32;SourceRange&#32;MappedRange&#32;=&#32;AU-&gt;mapRangeToPreamble(RegionOfInterest);
00416 &#32;&#32;&#32;&#32;SourceLocation&#32;B&#32;=&#32;MappedRange.getBegin();
00417 &#32;&#32;&#32;&#32;SourceLocation&#32;E&#32;=&#32;MappedRange.getEnd();
00418 
00419 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(AU-&gt;isInPreambleFileID(B))&#32;{
00420 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(SM.isLoadedSourceLocation(E))
00421 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;visitPreprocessedEntitiesInRange(SourceRange(B,&#32;E),&#32;PPRec,
00422 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*<emphasis role="keyword">this</emphasis>);
00423 
00424 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Beginning&#32;of&#32;range&#32;lies&#32;in&#32;the&#32;preamble&#32;but&#32;it&#32;also&#32;extends&#32;beyond</emphasis>
00425 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;it&#32;into&#32;the&#32;main&#32;file.&#32;Split&#32;the&#32;range&#32;into&#32;2&#32;parts,&#32;one&#32;covering</emphasis>
00426 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;the&#32;preamble&#32;and&#32;another&#32;covering&#32;the&#32;main&#32;file.&#32;This&#32;allows&#32;subsequent</emphasis>
00427 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;calls&#32;to&#32;visitPreprocessedEntitiesInRange&#32;to&#32;accept&#32;a&#32;source&#32;range&#32;that</emphasis>
00428 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;lies&#32;in&#32;the&#32;same&#32;FileID,&#32;allowing&#32;it&#32;to&#32;skip&#32;preprocessed&#32;entities&#32;that</emphasis>
00429 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;do&#32;not&#32;come&#32;from&#32;the&#32;same&#32;FileID.</emphasis>
00430 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;breaked&#32;=&#32;visitPreprocessedEntitiesInRange(
00431 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;SourceRange(B,&#32;AU-&gt;getEndOfPreambleFileID()),&#32;PPRec,&#32;*<emphasis role="keyword">this</emphasis>);
00432 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(breaked)
00433 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
00434 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;visitPreprocessedEntitiesInRange(
00435 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;SourceRange(AU-&gt;getStartOfMainFileID(),&#32;E),&#32;PPRec,&#32;*<emphasis role="keyword">this</emphasis>);
00436 &#32;&#32;&#32;&#32;}
00437 
00438 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;visitPreprocessedEntitiesInRange(SourceRange(B,&#32;E),&#32;PPRec,&#32;*<emphasis role="keyword">this</emphasis>);
00439 &#32;&#32;}
00440 
00441 &#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;OnlyLocalDecls&#32;=&#32;!AU-&gt;isMainFileAST()&#32;&amp;&amp;&#32;AU-&gt;getOnlyLocalDecls();
00442 
00443 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(OnlyLocalDecls)
00444 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classclang_1_1cxcursor_1_1_cursor_visitor_1a70914a4f8ef86d9c92d0b65da5177111">visitPreprocessedEntities</link>(PPRec.local_begin(),&#32;PPRec.local_end(),
00445 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;PPRec);
00446 
00447 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classclang_1_1cxcursor_1_1_cursor_visitor_1a70914a4f8ef86d9c92d0b65da5177111">visitPreprocessedEntities</link>(PPRec.begin(),&#32;PPRec.end(),&#32;PPRec);
00448 }
</programlisting>    </section><anchor xml:id="_classclang_1_1cxcursor_1_1_cursor_visitor_1a993e67b4ec4c7c83711635a211dd78bf"/>    <section>
    <title>VisitStaticAssertDecl()</title>
<indexterm><primary>VisitStaticAssertDecl</primary><secondary>clang::cxcursor::CursorVisitor</secondary></indexterm>
<indexterm><primary>clang::cxcursor::CursorVisitor</primary><secondary>VisitStaticAssertDecl</secondary></indexterm>
<para><computeroutput>bool CursorVisitor::VisitStaticAssertDecl (StaticAssertDecl * D)</computeroutput></para><para>
Definition at line <link linkend="__c_index_8cpp_source_1l01284">1284</link> of file <link linkend="__c_index_8cpp_source">CIndex.cpp</link>.</para>
<programlisting>01284 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
01285 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_classclang_1_1cxcursor_1_1_cursor_visitor_1a01659df2ce565980ce5b581ba7a970e3">Visit</link>(<link linkend="_namespaceclang_1_1cxcursor_1ab61ec2059175833672e8e78a376bb218">MakeCXCursor</link>(D-&gt;getAssertExpr(),&#32;StmtParent,&#32;TU,&#32;RegionOfInterest)))
01286 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
01287 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(StringLiteral&#32;*Message&#32;=&#32;D-&gt;getMessage())
01288 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_classclang_1_1cxcursor_1_1_cursor_visitor_1a01659df2ce565980ce5b581ba7a970e3">Visit</link>(<link linkend="_namespaceclang_1_1cxcursor_1ab61ec2059175833672e8e78a376bb218">MakeCXCursor</link>(Message,&#32;StmtParent,&#32;TU,&#32;RegionOfInterest)))
01289 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
01290 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
01291 }
</programlisting><para>
References <link linkend="_namespaceclang_1_1cxcursor_1ab61ec2059175833672e8e78a376bb218">clang::cxcursor::MakeCXCursor()</link>.</para>
    </section><anchor xml:id="_classclang_1_1cxcursor_1_1_cursor_visitor_1a223f8711bd4960db81ca391e57bcd6e0"/>    <section>
    <title>VisitTagDecl()</title>
<indexterm><primary>VisitTagDecl</primary><secondary>clang::cxcursor::CursorVisitor</secondary></indexterm>
<indexterm><primary>clang::cxcursor::CursorVisitor</primary><secondary>VisitTagDecl</secondary></indexterm>
<para><computeroutput>bool CursorVisitor::VisitTagDecl (TagDecl * D)</computeroutput></para><para>
Definition at line <link linkend="__c_index_8cpp_source_1l00711">711</link> of file <link linkend="__c_index_8cpp_source">CIndex.cpp</link>.</para>
<programlisting>00711 {&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classclang_1_1cxcursor_1_1_cursor_visitor_1a3bca6000335f6c6e012b01a042d10d32">VisitDeclContext</link>(D);&#32;}
</programlisting>    </section><anchor xml:id="_classclang_1_1cxcursor_1_1_cursor_visitor_1ab7a464e6d58c07492c20d402c4048612"/>    <section>
    <title>VisitTagTypeLoc()</title>
<indexterm><primary>VisitTagTypeLoc</primary><secondary>clang::cxcursor::CursorVisitor</secondary></indexterm>
<indexterm><primary>clang::cxcursor::CursorVisitor</primary><secondary>VisitTagTypeLoc</secondary></indexterm>
<para><computeroutput>bool CursorVisitor::VisitTagTypeLoc (TagTypeLoc TL)</computeroutput></para><para>
Definition at line <link linkend="__c_index_8cpp_source_1l01591">1591</link> of file <link linkend="__c_index_8cpp_source">CIndex.cpp</link>.</para>
<programlisting>01591 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
01592 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(TL.isDefinition())
01593 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classclang_1_1cxcursor_1_1_cursor_visitor_1a01659df2ce565980ce5b581ba7a970e3">Visit</link>(<link linkend="_namespaceclang_1_1cxcursor_1ab61ec2059175833672e8e78a376bb218">MakeCXCursor</link>(TL.getDecl(),&#32;TU,&#32;RegionOfInterest));
01594 
01595 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classclang_1_1cxcursor_1_1_cursor_visitor_1a01659df2ce565980ce5b581ba7a970e3">Visit</link>(<link linkend="_namespaceclang_1_1cxcursor_1a3534c264c1431ec3d09c975fcafa263d">MakeCursorTypeRef</link>(TL.getDecl(),&#32;TL.getNameLoc(),&#32;TU));
01596 }
</programlisting><para>
References <link linkend="__c_x_cursor_8cpp_source_1l00882">clang::cxcursor::MakeCursorTypeRef()</link>, and <link linkend="_namespaceclang_1_1cxcursor_1ab61ec2059175833672e8e78a376bb218">clang::cxcursor::MakeCXCursor()</link>.</para>
    </section><anchor xml:id="_classclang_1_1cxcursor_1_1_cursor_visitor_1a4a8570d91cfdf0c794c0457c447d49e3"/>    <section>
    <title>VisitTemplateArgumentLoc()</title>
<indexterm><primary>VisitTemplateArgumentLoc</primary><secondary>clang::cxcursor::CursorVisitor</secondary></indexterm>
<indexterm><primary>clang::cxcursor::CursorVisitor</primary><secondary>VisitTemplateArgumentLoc</secondary></indexterm>
<para><computeroutput>bool CursorVisitor::VisitTemplateArgumentLoc (const TemplateArgumentLoc &amp; TAL)</computeroutput></para><para>
Definition at line <link linkend="__c_index_8cpp_source_1l01479">1479</link> of file <link linkend="__c_index_8cpp_source">CIndex.cpp</link>.</para>
<programlisting>01479 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
01480 &#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(TAL.getArgument().getKind())&#32;{
01481 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;TemplateArgument::Null:
01482 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;TemplateArgument::Integral:
01483 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;TemplateArgument::Pack:
01484 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
01485 
01486 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;TemplateArgument::Type:
01487 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(TypeSourceInfo&#32;*TSInfo&#32;=&#32;TAL.getTypeSourceInfo())
01488 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classclang_1_1cxcursor_1_1_cursor_visitor_1a01659df2ce565980ce5b581ba7a970e3">Visit</link>(TSInfo-&gt;getTypeLoc());
01489 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
01490 
01491 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;TemplateArgument::Declaration:
01492 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(Expr&#32;*E&#32;=&#32;TAL.getSourceDeclExpression())
01493 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classclang_1_1cxcursor_1_1_cursor_visitor_1a01659df2ce565980ce5b581ba7a970e3">Visit</link>(<link linkend="_namespaceclang_1_1cxcursor_1ab61ec2059175833672e8e78a376bb218">MakeCXCursor</link>(E,&#32;StmtParent,&#32;TU,&#32;RegionOfInterest));
01494 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
01495 
01496 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;TemplateArgument::NullPtr:
01497 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(Expr&#32;*E&#32;=&#32;TAL.getSourceNullPtrExpression())
01498 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classclang_1_1cxcursor_1_1_cursor_visitor_1a01659df2ce565980ce5b581ba7a970e3">Visit</link>(<link linkend="_namespaceclang_1_1cxcursor_1ab61ec2059175833672e8e78a376bb218">MakeCXCursor</link>(E,&#32;StmtParent,&#32;TU,&#32;RegionOfInterest));
01499 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
01500 
01501 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;TemplateArgument::Expression:
01502 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(Expr&#32;*E&#32;=&#32;TAL.getSourceExpression())
01503 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classclang_1_1cxcursor_1_1_cursor_visitor_1a01659df2ce565980ce5b581ba7a970e3">Visit</link>(<link linkend="_namespaceclang_1_1cxcursor_1ab61ec2059175833672e8e78a376bb218">MakeCXCursor</link>(E,&#32;StmtParent,&#32;TU,&#32;RegionOfInterest));
01504 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
01505 
01506 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;TemplateArgument::Template:
01507 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;TemplateArgument::TemplateExpansion:
01508 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_classclang_1_1cxcursor_1_1_cursor_visitor_1a7b754c2b2db487a1286e47d1134365bf">VisitNestedNameSpecifierLoc</link>(TAL.getTemplateQualifierLoc()))
01509 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
01510 
01511 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classclang_1_1cxcursor_1_1_cursor_visitor_1aa6960261f98ac5f02749ece1e771464a">VisitTemplateName</link>(TAL.getArgument().getAsTemplateOrTemplatePattern(),
01512 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;TAL.getTemplateNameLoc());
01513 &#32;&#32;}
01514 
01515 &#32;&#32;llvm_unreachable(<emphasis role="stringliteral">&quot;Invalid&#32;TemplateArgument::Kind!&quot;</emphasis>);
01516 }
</programlisting><para>
References <link linkend="_namespaceclang_1_1cxcursor_1ab61ec2059175833672e8e78a376bb218">clang::cxcursor::MakeCXCursor()</link>.</para>
    </section><anchor xml:id="_classclang_1_1cxcursor_1_1_cursor_visitor_1aa6960261f98ac5f02749ece1e771464a"/>    <section>
    <title>VisitTemplateName()</title>
<indexterm><primary>VisitTemplateName</primary><secondary>clang::cxcursor::CursorVisitor</secondary></indexterm>
<indexterm><primary>clang::cxcursor::CursorVisitor</primary><secondary>VisitTemplateName</secondary></indexterm>
<para><computeroutput>bool CursorVisitor::VisitTemplateName (TemplateName Name, SourceLocation Loc)</computeroutput></para><para>
Definition at line <link linkend="__c_index_8cpp_source_1l01441">1441</link> of file <link linkend="__c_index_8cpp_source">CIndex.cpp</link>.</para>
<programlisting>01441 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
01442 &#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(Name.getKind())&#32;{
01443 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;TemplateName::Template:
01444 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classclang_1_1cxcursor_1_1_cursor_visitor_1a01659df2ce565980ce5b581ba7a970e3">Visit</link>(<link linkend="_namespaceclang_1_1cxcursor_1ac63e4fd5fdbaf88d0632a7682afbf744">MakeCursorTemplateRef</link>(Name.getAsTemplateDecl(),&#32;Loc,&#32;TU));
01445 
01446 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;TemplateName::OverloadedTemplate:
01447 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Visit&#32;the&#32;overloaded&#32;template&#32;set.</emphasis>
01448 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_classclang_1_1cxcursor_1_1_cursor_visitor_1a01659df2ce565980ce5b581ba7a970e3">Visit</link>(<link linkend="_namespaceclang_1_1cxcursor_1a631225e024301b99cc72be73f0ee9271">MakeCursorOverloadedDeclRef</link>(Name,&#32;Loc,&#32;TU)))
01449 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
01450 
01451 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
01452 
01453 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;TemplateName::AssumedTemplate:
01454 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;FIXME:&#32;Visit&#32;DeclarationName?</emphasis>
01455 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
01456 
01457 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;TemplateName::DependentTemplate:
01458 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;FIXME:&#32;Visit&#32;nested-name-specifier.</emphasis>
01459 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
01460 
01461 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;TemplateName::QualifiedTemplate:
01462 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;FIXME:&#32;Visit&#32;nested-name-specifier.</emphasis>
01463 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classclang_1_1cxcursor_1_1_cursor_visitor_1a01659df2ce565980ce5b581ba7a970e3">Visit</link>(<link linkend="_namespaceclang_1_1cxcursor_1ac63e4fd5fdbaf88d0632a7682afbf744">MakeCursorTemplateRef</link>(
01464 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Name.getAsQualifiedTemplateName()-&gt;getDecl(),&#32;Loc,&#32;TU));
01465 
01466 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;TemplateName::SubstTemplateTemplateParm:
01467 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classclang_1_1cxcursor_1_1_cursor_visitor_1a01659df2ce565980ce5b581ba7a970e3">Visit</link>(<link linkend="_namespaceclang_1_1cxcursor_1ac63e4fd5fdbaf88d0632a7682afbf744">MakeCursorTemplateRef</link>(
01468 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Name.getAsSubstTemplateTemplateParm()-&gt;getParameter(),&#32;Loc,&#32;TU));
01469 
01470 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;TemplateName::SubstTemplateTemplateParmPack:
01471 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classclang_1_1cxcursor_1_1_cursor_visitor_1a01659df2ce565980ce5b581ba7a970e3">Visit</link>(<link linkend="_namespaceclang_1_1cxcursor_1ac63e4fd5fdbaf88d0632a7682afbf744">MakeCursorTemplateRef</link>(
01472 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Name.getAsSubstTemplateTemplateParmPack()-&gt;getParameterPack(),&#32;Loc,
01473 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;TU));
01474 &#32;&#32;}
01475 
01476 &#32;&#32;llvm_unreachable(<emphasis role="stringliteral">&quot;Invalid&#32;TemplateName::Kind!&quot;</emphasis>);
01477 }
</programlisting><para>
References <link linkend="__c_x_cursor_8cpp_source_1l01061">clang::cxcursor::MakeCursorOverloadedDeclRef()</link>, and <link linkend="__c_x_cursor_8cpp_source_1l00897">clang::cxcursor::MakeCursorTemplateRef()</link>.</para>
    </section><anchor xml:id="_classclang_1_1cxcursor_1_1_cursor_visitor_1aeba17d0f7d6f7154cc856bb0d3ac55de"/>    <section>
    <title>VisitTemplateParameters()</title>
<indexterm><primary>VisitTemplateParameters</primary><secondary>clang::cxcursor::CursorVisitor</secondary></indexterm>
<indexterm><primary>clang::cxcursor::CursorVisitor</primary><secondary>VisitTemplateParameters</secondary></indexterm>
<para><computeroutput>bool CursorVisitor::VisitTemplateParameters (const TemplateParameterList * Params)</computeroutput></para><para>
Definition at line <link linkend="__c_index_8cpp_source_1l01426">1426</link> of file <link linkend="__c_index_8cpp_source">CIndex.cpp</link>.</para>
<programlisting>01427 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
01428 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!Params)
01429 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
01430 
01431 &#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(TemplateParameterList::const_iterator&#32;P&#32;=&#32;Params-&gt;begin(),
01432 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;PEnd&#32;=&#32;Params-&gt;end();
01433 &#32;&#32;&#32;&#32;&#32;&#32;&#32;P&#32;!=&#32;PEnd;&#32;++P)&#32;{
01434 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_classclang_1_1cxcursor_1_1_cursor_visitor_1a01659df2ce565980ce5b581ba7a970e3">Visit</link>(<link linkend="_namespaceclang_1_1cxcursor_1ab61ec2059175833672e8e78a376bb218">MakeCXCursor</link>(*P,&#32;TU,&#32;RegionOfInterest)))
01435 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
01436 &#32;&#32;}
01437 
01438 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
01439 }
</programlisting><para>
References <link linkend="_namespaceclang_1_1cxcursor_1ab61ec2059175833672e8e78a376bb218">clang::cxcursor::MakeCXCursor()</link>.</para>
    </section><anchor xml:id="_classclang_1_1cxcursor_1_1_cursor_visitor_1a1e38e6c0119deb8d59484bc5ccc0946c"/>    <section>
    <title>VisitTemplateTemplateParmDecl()</title>
<indexterm><primary>VisitTemplateTemplateParmDecl</primary><secondary>clang::cxcursor::CursorVisitor</secondary></indexterm>
<indexterm><primary>clang::cxcursor::CursorVisitor</primary><secondary>VisitTemplateTemplateParmDecl</secondary></indexterm>
<para><computeroutput>bool CursorVisitor::VisitTemplateTemplateParmDecl (TemplateTemplateParmDecl * D)</computeroutput></para><para>
Definition at line <link linkend="__c_index_8cpp_source_1l00960">960</link> of file <link linkend="__c_index_8cpp_source">CIndex.cpp</link>.</para>
<programlisting>00960 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00961 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_classclang_1_1cxcursor_1_1_cursor_visitor_1aeba17d0f7d6f7154cc856bb0d3ac55de">VisitTemplateParameters</link>(D-&gt;getTemplateParameters()))
00962 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
00963 
00964 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(D-&gt;hasDefaultArgument()&#32;&amp;&amp;&#32;!D-&gt;defaultArgumentWasInherited()&#32;&amp;&amp;
00965 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classclang_1_1cxcursor_1_1_cursor_visitor_1a4a8570d91cfdf0c794c0457c447d49e3">VisitTemplateArgumentLoc</link>(D-&gt;getDefaultArgument()))
00966 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
00967 
00968 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
00969 }
</programlisting>    </section><anchor xml:id="_classclang_1_1cxcursor_1_1_cursor_visitor_1a7eacc3f49e7683c24b020e63de315750"/>    <section>
    <title>VisitTemplateTypeParmDecl()</title>
<indexterm><primary>VisitTemplateTypeParmDecl</primary><secondary>clang::cxcursor::CursorVisitor</secondary></indexterm>
<indexterm><primary>clang::cxcursor::CursorVisitor</primary><secondary>VisitTemplateTypeParmDecl</secondary></indexterm>
<para><computeroutput>bool CursorVisitor::VisitTemplateTypeParmDecl (TemplateTypeParmDecl * D)</computeroutput></para><para>
Definition at line <link linkend="__c_index_8cpp_source_1l00762">762</link> of file <link linkend="__c_index_8cpp_source">CIndex.cpp</link>.</para>
<programlisting>00762 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00763 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;*TC&#32;=&#32;D-&gt;getTypeConstraint())
00764 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_classclang_1_1cxcursor_1_1_cursor_visitor_1a01659df2ce565980ce5b581ba7a970e3">Visit</link>(<link linkend="_namespaceclang_1_1cxcursor_1ab61ec2059175833672e8e78a376bb218">MakeCXCursor</link>(TC-&gt;getImmediatelyDeclaredConstraint(),&#32;StmtParent,
00765 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;TU,&#32;RegionOfInterest)))
00766 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
00767 
00768 &#32;&#32;<emphasis role="comment">//&#32;Visit&#32;the&#32;default&#32;argument.</emphasis>
00769 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(D-&gt;hasDefaultArgument()&#32;&amp;&amp;&#32;!D-&gt;defaultArgumentWasInherited())
00770 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(TypeSourceInfo&#32;*DefArg&#32;=&#32;D-&gt;getDefaultArgumentInfo())
00771 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_classclang_1_1cxcursor_1_1_cursor_visitor_1a01659df2ce565980ce5b581ba7a970e3">Visit</link>(DefArg-&gt;getTypeLoc()))
00772 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
00773 
00774 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
00775 }
</programlisting><para>
References <link linkend="_namespaceclang_1_1cxcursor_1ab61ec2059175833672e8e78a376bb218">clang::cxcursor::MakeCXCursor()</link>.</para>
    </section><anchor xml:id="_classclang_1_1cxcursor_1_1_cursor_visitor_1a255429be0e71e52043ad0b58872878d6"/>    <section>
    <title>VisitTranslationUnitDecl()</title>
<indexterm><primary>VisitTranslationUnitDecl</primary><secondary>clang::cxcursor::CursorVisitor</secondary></indexterm>
<indexterm><primary>clang::cxcursor::CursorVisitor</primary><secondary>VisitTranslationUnitDecl</secondary></indexterm>
<para><computeroutput>bool CursorVisitor::VisitTranslationUnitDecl (TranslationUnitDecl * D)</computeroutput></para><para>
Definition at line <link linkend="__c_index_8cpp_source_1l00686">686</link> of file <link linkend="__c_index_8cpp_source">CIndex.cpp</link>.</para>
<programlisting>00686 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00687 &#32;&#32;llvm_unreachable(<emphasis role="stringliteral">&quot;Translation&#32;units&#32;are&#32;visited&#32;directly&#32;by&#32;Visit()&quot;</emphasis>);
00688 }
</programlisting>    </section><anchor xml:id="_classclang_1_1cxcursor_1_1_cursor_visitor_1ab780a653c5903d22b4963df9731255db"/>    <section>
    <title>VisitTypeAliasDecl()</title>
<indexterm><primary>VisitTypeAliasDecl</primary><secondary>clang::cxcursor::CursorVisitor</secondary></indexterm>
<indexterm><primary>clang::cxcursor::CursorVisitor</primary><secondary>VisitTypeAliasDecl</secondary></indexterm>
<para><computeroutput>bool CursorVisitor::VisitTypeAliasDecl (TypeAliasDecl * D)</computeroutput></para><para>
Definition at line <link linkend="__c_index_8cpp_source_1l00697">697</link> of file <link linkend="__c_index_8cpp_source">CIndex.cpp</link>.</para>
<programlisting>00697 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00698 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(TypeSourceInfo&#32;*TSInfo&#32;=&#32;D-&gt;getTypeSourceInfo())
00699 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classclang_1_1cxcursor_1_1_cursor_visitor_1a01659df2ce565980ce5b581ba7a970e3">Visit</link>(TSInfo-&gt;getTypeLoc());
00700 
00701 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
00702 }
</programlisting>    </section><anchor xml:id="_classclang_1_1cxcursor_1_1_cursor_visitor_1a8cf4e9055a473162dfae94e08dbad6b0"/>    <section>
    <title>VisitTypeAliasTemplateDecl()</title>
<indexterm><primary>VisitTypeAliasTemplateDecl</primary><secondary>clang::cxcursor::CursorVisitor</secondary></indexterm>
<indexterm><primary>clang::cxcursor::CursorVisitor</primary><secondary>VisitTypeAliasTemplateDecl</secondary></indexterm>
<para><computeroutput>bool CursorVisitor::VisitTypeAliasTemplateDecl (TypeAliasTemplateDecl * D)</computeroutput></para><para>
Definition at line <link linkend="__c_index_8cpp_source_1l00690">690</link> of file <link linkend="__c_index_8cpp_source">CIndex.cpp</link>.</para>
<programlisting>00690 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00691 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_classclang_1_1cxcursor_1_1_cursor_visitor_1aeba17d0f7d6f7154cc856bb0d3ac55de">VisitTemplateParameters</link>(D-&gt;getTemplateParameters()))
00692 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
00693 
00694 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classclang_1_1cxcursor_1_1_cursor_visitor_1a01659df2ce565980ce5b581ba7a970e3">Visit</link>(<link linkend="_namespaceclang_1_1cxcursor_1ab61ec2059175833672e8e78a376bb218">MakeCXCursor</link>(D-&gt;getTemplatedDecl(),&#32;TU,&#32;RegionOfInterest));
00695 }
</programlisting><para>
References <link linkend="_namespaceclang_1_1cxcursor_1ab61ec2059175833672e8e78a376bb218">clang::cxcursor::MakeCXCursor()</link>.</para>
    </section><anchor xml:id="_classclang_1_1cxcursor_1_1_cursor_visitor_1a5079af293c5b548214614dbb8f33dc70"/>    <section>
    <title>VisitTypedefDecl()</title>
<indexterm><primary>VisitTypedefDecl</primary><secondary>clang::cxcursor::CursorVisitor</secondary></indexterm>
<indexterm><primary>clang::cxcursor::CursorVisitor</primary><secondary>VisitTypedefDecl</secondary></indexterm>
<para><computeroutput>bool CursorVisitor::VisitTypedefDecl (TypedefDecl * D)</computeroutput></para><para>
Definition at line <link linkend="__c_index_8cpp_source_1l00704">704</link> of file <link linkend="__c_index_8cpp_source">CIndex.cpp</link>.</para>
<programlisting>00704 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00705 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(TypeSourceInfo&#32;*TSInfo&#32;=&#32;D-&gt;getTypeSourceInfo())
00706 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classclang_1_1cxcursor_1_1_cursor_visitor_1a01659df2ce565980ce5b581ba7a970e3">Visit</link>(TSInfo-&gt;getTypeLoc());
00707 
00708 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
00709 }
</programlisting>    </section><anchor xml:id="_classclang_1_1cxcursor_1_1_cursor_visitor_1ae5983704e0c3c63718f4adaeab38bb8a"/>    <section>
    <title>VisitUnresolvedUsingTypenameDecl()</title>
<indexterm><primary>VisitUnresolvedUsingTypenameDecl</primary><secondary>clang::cxcursor::CursorVisitor</secondary></indexterm>
<indexterm><primary>clang::cxcursor::CursorVisitor</primary><secondary>VisitUnresolvedUsingTypenameDecl</secondary></indexterm>
<para><computeroutput>bool CursorVisitor::VisitUnresolvedUsingTypenameDecl (UnresolvedUsingTypenameDecl * D)</computeroutput></para><para>
Definition at line <link linkend="__c_index_8cpp_source_1l01274">1274</link> of file <link linkend="__c_index_8cpp_source">CIndex.cpp</link>.</para>
<programlisting>01275 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
01276 &#32;&#32;<emphasis role="comment">//&#32;Visit&#32;nested-name-specifier.</emphasis>
01277 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(NestedNameSpecifierLoc&#32;QualifierLoc&#32;=&#32;D-&gt;getQualifierLoc())
01278 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_classclang_1_1cxcursor_1_1_cursor_visitor_1a7b754c2b2db487a1286e47d1134365bf">VisitNestedNameSpecifierLoc</link>(QualifierLoc))
01279 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
01280 
01281 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
01282 }
</programlisting>    </section><anchor xml:id="_classclang_1_1cxcursor_1_1_cursor_visitor_1ab125dfb3d37b39ab6869040fceacfed1"/>    <section>
    <title>VisitUnresolvedUsingValueDecl()</title>
<indexterm><primary>VisitUnresolvedUsingValueDecl</primary><secondary>clang::cxcursor::CursorVisitor</secondary></indexterm>
<indexterm><primary>clang::cxcursor::CursorVisitor</primary><secondary>VisitUnresolvedUsingValueDecl</secondary></indexterm>
<para><computeroutput>bool CursorVisitor::VisitUnresolvedUsingValueDecl (UnresolvedUsingValueDecl * D)</computeroutput></para><para>
Definition at line <link linkend="__c_index_8cpp_source_1l01264">1264</link> of file <link linkend="__c_index_8cpp_source">CIndex.cpp</link>.</para>
<programlisting>01264 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
01265 &#32;&#32;<emphasis role="comment">//&#32;Visit&#32;nested-name-specifier.</emphasis>
01266 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(NestedNameSpecifierLoc&#32;QualifierLoc&#32;=&#32;D-&gt;getQualifierLoc())&#32;{
01267 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_classclang_1_1cxcursor_1_1_cursor_visitor_1a7b754c2b2db487a1286e47d1134365bf">VisitNestedNameSpecifierLoc</link>(QualifierLoc))
01268 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
01269 &#32;&#32;}
01270 
01271 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classclang_1_1cxcursor_1_1_cursor_visitor_1adc36610328af99cbbd2f06d7f0292ec9">VisitDeclarationNameInfo</link>(D-&gt;getNameInfo());
01272 }
</programlisting>    </section><anchor xml:id="_classclang_1_1cxcursor_1_1_cursor_visitor_1a0f329ea11a8c32720cde84f12d06ba08"/>    <section>
    <title>VisitUsingDecl()</title>
<indexterm><primary>VisitUsingDecl</primary><secondary>clang::cxcursor::CursorVisitor</secondary></indexterm>
<indexterm><primary>clang::cxcursor::CursorVisitor</primary><secondary>VisitUsingDecl</secondary></indexterm>
<para><computeroutput>bool CursorVisitor::VisitUsingDecl (UsingDecl * D)</computeroutput></para><para>
Definition at line <link linkend="__c_index_8cpp_source_1l01241">1241</link> of file <link linkend="__c_index_8cpp_source">CIndex.cpp</link>.</para>
<programlisting>01241 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
01242 &#32;&#32;<emphasis role="comment">//&#32;Visit&#32;nested-name-specifier.</emphasis>
01243 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(NestedNameSpecifierLoc&#32;QualifierLoc&#32;=&#32;D-&gt;getQualifierLoc())&#32;{
01244 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_classclang_1_1cxcursor_1_1_cursor_visitor_1a7b754c2b2db487a1286e47d1134365bf">VisitNestedNameSpecifierLoc</link>(QualifierLoc))
01245 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
01246 &#32;&#32;}
01247 
01248 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_classclang_1_1cxcursor_1_1_cursor_visitor_1a01659df2ce565980ce5b581ba7a970e3">Visit</link>(<link linkend="_namespaceclang_1_1cxcursor_1a631225e024301b99cc72be73f0ee9271">MakeCursorOverloadedDeclRef</link>(D,&#32;D-&gt;getLocation(),&#32;TU)))
01249 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
01250 
01251 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classclang_1_1cxcursor_1_1_cursor_visitor_1adc36610328af99cbbd2f06d7f0292ec9">VisitDeclarationNameInfo</link>(D-&gt;getNameInfo());
01252 }
</programlisting><para>
References <link linkend="__c_x_cursor_8cpp_source_1l01061">clang::cxcursor::MakeCursorOverloadedDeclRef()</link>.</para>
    </section><anchor xml:id="_classclang_1_1cxcursor_1_1_cursor_visitor_1a96fd01a9605ed4dbbdf75b760e9756b1"/>    <section>
    <title>VisitUsingDirectiveDecl()</title>
<indexterm><primary>VisitUsingDirectiveDecl</primary><secondary>clang::cxcursor::CursorVisitor</secondary></indexterm>
<indexterm><primary>clang::cxcursor::CursorVisitor</primary><secondary>VisitUsingDirectiveDecl</secondary></indexterm>
<para><computeroutput>bool CursorVisitor::VisitUsingDirectiveDecl (UsingDirectiveDecl * D)</computeroutput></para><para>
Definition at line <link linkend="__c_index_8cpp_source_1l01254">1254</link> of file <link linkend="__c_index_8cpp_source">CIndex.cpp</link>.</para>
<programlisting>01254 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
01255 &#32;&#32;<emphasis role="comment">//&#32;Visit&#32;nested-name-specifier.</emphasis>
01256 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(NestedNameSpecifierLoc&#32;QualifierLoc&#32;=&#32;D-&gt;getQualifierLoc())
01257 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_classclang_1_1cxcursor_1_1_cursor_visitor_1a7b754c2b2db487a1286e47d1134365bf">VisitNestedNameSpecifierLoc</link>(QualifierLoc))
01258 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
01259 
01260 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classclang_1_1cxcursor_1_1_cursor_visitor_1a01659df2ce565980ce5b581ba7a970e3">Visit</link>(<link linkend="_namespaceclang_1_1cxcursor_1a6eadc019bbae1f61434528c197111b0e">MakeCursorNamespaceRef</link>(D-&gt;getNominatedNamespaceAsWritten(),
01261 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;D-&gt;getIdentLocation(),&#32;TU));
01262 }
</programlisting><para>
References <link linkend="__c_x_cursor_8cpp_source_1l00913">clang::cxcursor::MakeCursorNamespaceRef()</link>.</para>
    </section><anchor xml:id="_classclang_1_1cxcursor_1_1_cursor_visitor_1aa58af31bada238412e23dbba3a928162"/>    <section>
    <title>VisitVarDecl()</title>
<indexterm><primary>VisitVarDecl</primary><secondary>clang::cxcursor::CursorVisitor</secondary></indexterm>
<indexterm><primary>clang::cxcursor::CursorVisitor</primary><secondary>VisitVarDecl</secondary></indexterm>
<para><computeroutput>bool CursorVisitor::VisitVarDecl (VarDecl * D)</computeroutput></para><para>
Definition at line <link linkend="__c_index_8cpp_source_1l00919">919</link> of file <link linkend="__c_index_8cpp_source">CIndex.cpp</link>.</para>
<programlisting>00919 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00920 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_classclang_1_1cxcursor_1_1_cursor_visitor_1ab44c6ae2ac80500f37d37e2893c37552">VisitDeclaratorDecl</link>(D))
00921 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
00922 
00923 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(Expr&#32;*Init&#32;=&#32;D-&gt;getInit())
00924 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classclang_1_1cxcursor_1_1_cursor_visitor_1a01659df2ce565980ce5b581ba7a970e3">Visit</link>(<link linkend="_namespaceclang_1_1cxcursor_1ab61ec2059175833672e8e78a376bb218">MakeCXCursor</link>(Init,&#32;StmtParent,&#32;TU,&#32;RegionOfInterest));
00925 
00926 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
00927 }
</programlisting><para>
References <link linkend="_namespaceclang_1_1cxcursor_1ab61ec2059175833672e8e78a376bb218">clang::cxcursor::MakeCXCursor()</link>.</para>
</section>
<para>
The documentation for this class was generated from the following files:</para>
/Users/maximilian/clang-llvm/clang/tools/libclang/<link linkend="__cursor_visitor_8h">CursorVisitor.h</link>/Users/maximilian/clang-llvm/clang/tools/libclang/<link linkend="__c_index_8cpp">CIndex.cpp</link></section>
</section>
