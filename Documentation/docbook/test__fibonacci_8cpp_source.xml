<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_test__fibonacci_8cpp_source" xml:lang="en-US">
<title>test_fibonacci.cpp</title>
<indexterm><primary>Tests/test_fibonacci.cpp</primary></indexterm>
<programlisting>00001 <emphasis role="preprocessor">#include&#32;&lt;iostream&gt;</emphasis>
<anchor xml:id="_test__fibonacci_8cpp_source_1l00002"/><link linkend="_test__fibonacci_8cpp_1a2f2fa66f25afb8fe68abadc72b18ad8e">00002</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_test__fibonacci_8cpp_1a2f2fa66f25afb8fe68abadc72b18ad8e">fibonacci</link>()&#32;{
00003 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;n,&#32;t1&#32;=&#32;0,&#32;t2&#32;=&#32;1,&#32;nextTerm&#32;=&#32;0;
00004 &#32;&#32;&#32;&#32;n&#32;=&#32;100;
00005 
00006 &#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;Fibonacci&#32;Series:&#32;&quot;</emphasis>;
00007 
00008 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;i&#32;=&#32;1;&#32;i&#32;&lt;=&#32;n;&#32;++i)&#32;{
00009 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(i&#32;==&#32;1)&#32;{
00010 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;t1&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;,&#32;&quot;</emphasis>;
00011 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">continue</emphasis>;
00012 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00013 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(i&#32;==&#32;2)&#32;{
00014 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;t2&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;,&#32;&quot;</emphasis>;
00015 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">continue</emphasis>;
00016 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00017 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;nextTerm&#32;=&#32;t1&#32;+&#32;t2;
00018 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;t1&#32;=&#32;t2;
00019 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;t2&#32;=&#32;nextTerm;
00020 
00021 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;nextTerm&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;,&#32;&quot;</emphasis>;
00022 &#32;&#32;&#32;&#32;}
00023 }
00024 
<anchor xml:id="_test__fibonacci_8cpp_source_1l00025"/><link linkend="_test__fibonacci_8cpp_1a840291bc02cba5474a4cb46a9b9566fe">00025</link> <emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_test__fibonacci_8cpp_1a840291bc02cba5474a4cb46a9b9566fe">main</link>(<emphasis role="keywordtype">void</emphasis>)&#32;{
00026 
00027 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;i&#32;=&#32;10;
00028 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;e&#32;=&#32;54783498;
00029 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;d&#32;=&#32;54783498;
00030 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;c&#32;=&#32;54783498;
00031 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;x&#32;=&#32;e+d+c;
00032 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;z&#32;=&#32;x*2;
00033 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;zy&#32;=&#32;x*2;
00034 &#32;&#32;&#32;&#32;zy++;
00035 &#32;&#32;&#32;&#32;zy++;
00036 &#32;&#32;&#32;&#32;zy++;
00037 &#32;&#32;&#32;&#32;zy++;
00038 &#32;&#32;&#32;&#32;zy++;
00039 &#32;&#32;&#32;&#32;zy++;
00040 &#32;&#32;&#32;&#32;zy++;
00041 &#32;&#32;&#32;&#32;zy++;
00042 &#32;&#32;&#32;&#32;zy++;
00043 &#32;&#32;&#32;&#32;zy++;
00044 &#32;&#32;&#32;&#32;zy++;
00045 &#32;&#32;&#32;&#32;zy++;
00046 &#32;&#32;&#32;&#32;zy++;
00047 &#32;&#32;&#32;&#32;zy++;
00048 &#32;&#32;&#32;&#32;zy++;
00049 &#32;&#32;&#32;&#32;zy++;
00050 &#32;&#32;&#32;&#32;zy++;
00051 &#32;&#32;&#32;&#32;zy++;
00052 &#32;&#32;&#32;&#32;zy++;
00053 &#32;&#32;&#32;&#32;zy++;
00054 &#32;&#32;&#32;&#32;zy++;
00055 &#32;&#32;&#32;&#32;e&#32;=&#32;z;
00056 &#32;&#32;&#32;&#32;i++;
00057 
00058 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(&#32;<emphasis role="keywordtype">int</emphasis>&#32;j&#32;=&#32;0;&#32;j&#32;&lt;&#32;1000000;&#32;++j&#32;)&#32;{
00059 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;i++;
00060 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;i++;
00061 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;i++;
00062 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;i++;
00063 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;i++;
00064 &#32;&#32;&#32;&#32;}
00065 
00066 &#32;&#32;&#32;&#32;<link linkend="_test__fibonacci_8cpp_1a2f2fa66f25afb8fe68abadc72b18ad8e">fibonacci</link>();
00067 
00068 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;cc&#32;=&#32;54783498;
00069 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;xx&#32;=&#32;e+d+c;
00070 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;zz&#32;=&#32;x*2;
00071 &#32;&#32;&#32;&#32;cc++;
00072 &#32;&#32;&#32;&#32;xx++;
00073 &#32;&#32;&#32;&#32;zz++;
00074 &#32;&#32;&#32;&#32;zy++;
00075 
00076 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
00077 }
</programlisting></section>
