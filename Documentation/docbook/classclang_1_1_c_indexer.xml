<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_classclang_1_1_c_indexer" xml:lang="en-US">
<title>clang::CIndexer Class Reference</title>
<indexterm><primary>clang::CIndexer</primary></indexterm>
<para>
<computeroutput>#include &lt;CIndexer.h&gt;</computeroutput>
</para>
<simplesect>
    <title>Public Member Functions    </title>
        <itemizedlist>
            <listitem><para><link linkend="_classclang_1_1_c_indexer_1aa4aea5ffd63f3a891381e37dd5bf3b66">CIndexer</link> (std::shared_ptr&lt; PCHContainerOperations &gt; PCHContainerOps=std::make_shared&lt; PCHContainerOperations &gt;())</para>
</listitem>
            <listitem><para>bool <link linkend="_classclang_1_1_c_indexer_1ab98bc58a97c08a74688c5201ee108e99">getOnlyLocalDecls</link> () const</para>
</listitem>
            <listitem><para>void <link linkend="_classclang_1_1_c_indexer_1a591845d07c3aae50c8801150e077b826">setOnlyLocalDecls</link> (bool Local=true)</para>
</listitem>
            <listitem><para>bool <link linkend="_classclang_1_1_c_indexer_1ae579d1e9618455a663f4e882eaa86234">getDisplayDiagnostics</link> () const</para>
</listitem>
            <listitem><para>void <link linkend="_classclang_1_1_c_indexer_1ab2bceec4f09f9b42169a17e6de7a49ce">setDisplayDiagnostics</link> (bool Display=true)</para>
</listitem>
            <listitem><para>std::shared_ptr&lt; PCHContainerOperations &gt; <link linkend="_classclang_1_1_c_indexer_1aca55b1e223fa5e22564d21c796f83b53">getPCHContainerOperations</link> () const</para>
</listitem>
            <listitem><para>unsigned <link linkend="_classclang_1_1_c_indexer_1a4c543585b07f085ac744c5d16ead7b2c">getCXGlobalOptFlags</link> () const</para>
</listitem>
            <listitem><para>void <link linkend="_classclang_1_1_c_indexer_1a082ac8e1740ef35ea17cba6ca71e9063">setCXGlobalOptFlags</link> (unsigned options)</para>
</listitem>
            <listitem><para>bool <link linkend="_classclang_1_1_c_indexer_1a226e7b660fe75abfc7e93f72021a8db3">isOptEnabled</link> (CXGlobalOptFlags opt) const</para>
</listitem>
            <listitem><para>const std::string &amp; <link linkend="_classclang_1_1_c_indexer_1a4b292906114303ecabb75bec7ff17a92">getClangResourcesPath</link> ()</para>

<para>Get the path of the clang resource files. </para>
</listitem>
            <listitem><para>StringRef <link linkend="_classclang_1_1_c_indexer_1a542a2e3cb09f282f8d456b32770fd4b2">getClangToolchainPath</link> ()</para>
</listitem>
            <listitem><para>void <link linkend="_classclang_1_1_c_indexer_1a5f4654eaf78e262e4a98fe95276f75d5">setInvocationEmissionPath</link> (StringRef Str)</para>
</listitem>
            <listitem><para>StringRef <link linkend="_classclang_1_1_c_indexer_1a4d18c0143db01294d2152486ba7ca3c4">getInvocationEmissionPath</link> () const</para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Detailed Description</title>
<para>
Definition at line <link linkend="__c_indexer_8h_source_1l00034">34</link> of file <link linkend="__c_indexer_8h_source">CIndexer.h</link>.</para>
</section>
<section>
<title>Constructor &amp; Destructor Documentation</title>
<anchor xml:id="_classclang_1_1_c_indexer_1aa4aea5ffd63f3a891381e37dd5bf3b66"/>    <section>
    <title>CIndexer()</title>
<indexterm><primary>CIndexer</primary><secondary>clang::CIndexer</secondary></indexterm>
<indexterm><primary>clang::CIndexer</primary><secondary>CIndexer</secondary></indexterm>
<para><computeroutput>clang::CIndexer::CIndexer (std::shared_ptr&lt; PCHContainerOperations &gt; PCHContainerOps = <computeroutput>std::make_shared&lt;PCHContainerOperations&gt;()</computeroutput>
)<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line <link linkend="__c_indexer_8h_source_1l00047">47</link> of file <link linkend="__c_indexer_8h_source">CIndexer.h</link>.</para>
<programlisting>00049 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;OnlyLocalDecls(<emphasis role="keyword">false</emphasis>),&#32;DisplayDiagnostics(<emphasis role="keyword">false</emphasis>),
00050 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Options(CXGlobalOpt_None),&#32;PCHContainerOps(std::move(PCHContainerOps))&#32;{
00051 &#32;&#32;}
</programlisting></section>
</section>
<section>
<title>Member Function Documentation</title>
<anchor xml:id="_classclang_1_1_c_indexer_1a4b292906114303ecabb75bec7ff17a92"/>    <section>
    <title>getClangResourcesPath()</title>
<indexterm><primary>getClangResourcesPath</primary><secondary>clang::CIndexer</secondary></indexterm>
<indexterm><primary>clang::CIndexer</primary><secondary>getClangResourcesPath</secondary></indexterm>
<para><computeroutput>const std::string &amp; CIndexer::getClangResourcesPath ( )</computeroutput></para><para>

<para>Get the path of the clang resource files. </para>
</para>
<para>
Definition at line <link linkend="__c_indexer_8cpp_source_1l00099">99</link> of file <link linkend="__c_indexer_8cpp_source">CIndexer.cpp</link>.</para>
<programlisting>00099 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00100 &#32;&#32;<emphasis role="comment">//&#32;Did&#32;we&#32;already&#32;compute&#32;the&#32;path?</emphasis>
00101 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!ResourcesPath.empty())
00102 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;ResourcesPath;
00103 
00104 &#32;&#32;SmallString&lt;128&gt;&#32;LibClangPath;
00105 
00106 &#32;&#32;<emphasis role="comment">//&#32;Find&#32;the&#32;location&#32;where&#32;this&#32;library&#32;lives&#32;(libclang.dylib).</emphasis>
00107 <emphasis role="preprocessor">#ifdef&#32;_WIN32</emphasis>
00108 &#32;&#32;MEMORY_BASIC_INFORMATION&#32;mbi;
00109 &#32;&#32;<emphasis role="keywordtype">char</emphasis>&#32;path[MAX_PATH];
00110 &#32;&#32;VirtualQuery((<emphasis role="keywordtype">void</emphasis>&#32;*)(uintptr_t)<link linkend="__c_index_8cpp_1a42e314c492d0d545b1e0e3278894b75d">clang_createTranslationUnit</link>,&#32;&amp;mbi,
00111 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">sizeof</emphasis>(mbi));
00112 &#32;&#32;GetModuleFileNameA((HINSTANCE)mbi.AllocationBase,&#32;path,&#32;MAX_PATH);
00113 
00114 <emphasis role="preprocessor">#ifdef&#32;__CYGWIN__</emphasis>
00115 &#32;&#32;<emphasis role="keywordtype">char</emphasis>&#32;w32path[MAX_PATH];
00116 &#32;&#32;strcpy(w32path,&#32;path);
00117 <emphasis role="preprocessor">#if&#32;CYGWIN_VERSION_API_MAJOR&#32;&gt;&#32;0&#32;||&#32;CYGWIN_VERSION_API_MINOR&#32;&gt;=&#32;181</emphasis>
00118 &#32;&#32;cygwin_conv_path(CCP_WIN_A_TO_POSIX,&#32;w32path,&#32;path,&#32;MAX_PATH);
00119 <emphasis role="preprocessor">#else</emphasis>
00120 &#32;&#32;cygwin_conv_to_full_posix_path(w32path,&#32;path);
00121 <emphasis role="preprocessor">#endif</emphasis>
00122 <emphasis role="preprocessor">#endif</emphasis>
00123 
00124 &#32;&#32;LibClangPath&#32;+=&#32;path;
00125 <emphasis role="preprocessor">#elif&#32;defined(_AIX)</emphasis>
00126 &#32;&#32;getClangResourcesPathImplAIX(LibClangPath);
00127 <emphasis role="preprocessor">#else</emphasis>
00128 &#32;&#32;<emphasis role="comment">//&#32;This&#32;silly&#32;cast&#32;below&#32;avoids&#32;a&#32;C++&#32;warning.</emphasis>
00129 &#32;&#32;Dl_info&#32;info;
00130 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(dladdr((<emphasis role="keywordtype">void</emphasis>&#32;*)(uintptr_t)<link linkend="__c_index_8cpp_1a42e314c492d0d545b1e0e3278894b75d">clang_createTranslationUnit</link>,&#32;&amp;info)&#32;==&#32;0)
00131 &#32;&#32;&#32;&#32;llvm_unreachable(<emphasis role="stringliteral">&quot;Call&#32;to&#32;dladdr()&#32;failed&quot;</emphasis>);
00132 
00133 &#32;&#32;<emphasis role="comment">//&#32;We&#32;now&#32;have&#32;the&#32;CIndex&#32;directory,&#32;locate&#32;clang&#32;relative&#32;to&#32;it.</emphasis>
00134 &#32;&#32;LibClangPath&#32;+=&#32;info.dli_fname;
00135 <emphasis role="preprocessor">#endif</emphasis>
00136 
00137 &#32;&#32;<emphasis role="comment">//&#32;Cache&#32;our&#32;result.</emphasis>
00138 &#32;&#32;ResourcesPath&#32;=&#32;driver::Driver::GetResourcesPath(LibClangPath);
00139 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;ResourcesPath;
00140 }
</programlisting><para>
References <link linkend="__c_index_8cpp_source_1l03500">clang_createTranslationUnit()</link>.</para>
<para>
Referenced by <link linkend="__c_indexer_8cpp_source_1l00142">getClangToolchainPath()</link>.</para>
    </section><anchor xml:id="_classclang_1_1_c_indexer_1a542a2e3cb09f282f8d456b32770fd4b2"/>    <section>
    <title>getClangToolchainPath()</title>
<indexterm><primary>getClangToolchainPath</primary><secondary>clang::CIndexer</secondary></indexterm>
<indexterm><primary>clang::CIndexer</primary><secondary>getClangToolchainPath</secondary></indexterm>
<para><computeroutput>StringRef CIndexer::getClangToolchainPath ( )</computeroutput></para><para>
Definition at line <link linkend="__c_indexer_8cpp_source_1l00142">142</link> of file <link linkend="__c_indexer_8cpp_source">CIndexer.cpp</link>.</para>
<programlisting>00142 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00143 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!ToolchainPath.empty())
00144 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;ToolchainPath;
00145 &#32;&#32;StringRef&#32;ResourcePath&#32;=&#32;<link linkend="_classclang_1_1_c_indexer_1a4b292906114303ecabb75bec7ff17a92">getClangResourcesPath</link>();
00146 &#32;&#32;ToolchainPath&#32;=
00147 &#32;&#32;&#32;&#32;&#32;&#32;std::string(llvm::sys::path::parent_path(llvm::sys::path::parent_path(
00148 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;llvm::sys::path::parent_path(ResourcePath))));
00149 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;ToolchainPath;
00150 }
</programlisting><para>
References <link linkend="__c_indexer_8cpp_source_1l00099">getClangResourcesPath()</link>.</para>
<para>
Referenced by <link linkend="__c_indexer_8cpp_source_1l00152">clang::LibclangInvocationReporter::LibclangInvocationReporter()</link>.</para>
    </section><anchor xml:id="_classclang_1_1_c_indexer_1a4c543585b07f085ac744c5d16ead7b2c"/>    <section>
    <title>getCXGlobalOptFlags()</title>
<indexterm><primary>getCXGlobalOptFlags</primary><secondary>clang::CIndexer</secondary></indexterm>
<indexterm><primary>clang::CIndexer</primary><secondary>getCXGlobalOptFlags</secondary></indexterm>
<para><computeroutput>unsigned clang::CIndexer::getCXGlobalOptFlags ( ) const<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line <link linkend="__c_indexer_8h_source_1l00068">68</link> of file <link linkend="__c_indexer_8h_source">CIndexer.h</link>.</para>
<programlisting>00068 {&#32;<emphasis role="keywordflow">return</emphasis>&#32;Options;&#32;}
</programlisting>    </section><anchor xml:id="_classclang_1_1_c_indexer_1ae579d1e9618455a663f4e882eaa86234"/>    <section>
    <title>getDisplayDiagnostics()</title>
<indexterm><primary>getDisplayDiagnostics</primary><secondary>clang::CIndexer</secondary></indexterm>
<indexterm><primary>clang::CIndexer</primary><secondary>getDisplayDiagnostics</secondary></indexterm>
<para><computeroutput>bool clang::CIndexer::getDisplayDiagnostics ( ) const<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line <link linkend="__c_indexer_8h_source_1l00059">59</link> of file <link linkend="__c_indexer_8h_source">CIndexer.h</link>.</para>
<programlisting>00059 {&#32;<emphasis role="keywordflow">return</emphasis>&#32;DisplayDiagnostics;&#32;}
</programlisting>    </section><anchor xml:id="_classclang_1_1_c_indexer_1a4d18c0143db01294d2152486ba7ca3c4"/>    <section>
    <title>getInvocationEmissionPath()</title>
<indexterm><primary>getInvocationEmissionPath</primary><secondary>clang::CIndexer</secondary></indexterm>
<indexterm><primary>clang::CIndexer</primary><secondary>getInvocationEmissionPath</secondary></indexterm>
<para><computeroutput>StringRef clang::CIndexer::getInvocationEmissionPath ( ) const<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line <link linkend="__c_indexer_8h_source_1l00084">84</link> of file <link linkend="__c_indexer_8h_source">CIndexer.h</link>.</para>
<programlisting>00084 {&#32;<emphasis role="keywordflow">return</emphasis>&#32;InvocationEmissionPath;&#32;}
</programlisting><para>
Referenced by <link linkend="__c_indexer_8cpp_source_1l00152">clang::LibclangInvocationReporter::LibclangInvocationReporter()</link>.</para>
    </section><anchor xml:id="_classclang_1_1_c_indexer_1ab98bc58a97c08a74688c5201ee108e99"/>    <section>
    <title>getOnlyLocalDecls()</title>
<indexterm><primary>getOnlyLocalDecls</primary><secondary>clang::CIndexer</secondary></indexterm>
<indexterm><primary>clang::CIndexer</primary><secondary>getOnlyLocalDecls</secondary></indexterm>
<para><computeroutput>bool clang::CIndexer::getOnlyLocalDecls ( ) const<computeroutput>[inline]</computeroutput></computeroutput></para>
<para>Whether we only want to see &quot;local&quot; declarations (that did not come from a previous precompiled header). If false, we want to see all declarations. </para>
<para>
Definition at line <link linkend="__c_indexer_8h_source_1l00056">56</link> of file <link linkend="__c_indexer_8h_source">CIndexer.h</link>.</para>
<programlisting>00056 {&#32;<emphasis role="keywordflow">return</emphasis>&#32;OnlyLocalDecls;&#32;}
</programlisting>    </section><anchor xml:id="_classclang_1_1_c_indexer_1aca55b1e223fa5e22564d21c796f83b53"/>    <section>
    <title>getPCHContainerOperations()</title>
<indexterm><primary>getPCHContainerOperations</primary><secondary>clang::CIndexer</secondary></indexterm>
<indexterm><primary>clang::CIndexer</primary><secondary>getPCHContainerOperations</secondary></indexterm>
<para><computeroutput>std::shared_ptr&lt;PCHContainerOperations&gt; clang::CIndexer::getPCHContainerOperations ( ) const<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line <link linkend="__c_indexer_8h_source_1l00064">64</link> of file <link linkend="__c_indexer_8h_source">CIndexer.h</link>.</para>
<programlisting>00064 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00065 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;PCHContainerOps;
00066 &#32;&#32;}
</programlisting>    </section><anchor xml:id="_classclang_1_1_c_indexer_1a226e7b660fe75abfc7e93f72021a8db3"/>    <section>
    <title>isOptEnabled()</title>
<indexterm><primary>isOptEnabled</primary><secondary>clang::CIndexer</secondary></indexterm>
<indexterm><primary>clang::CIndexer</primary><secondary>isOptEnabled</secondary></indexterm>
<para><computeroutput>bool clang::CIndexer::isOptEnabled (CXGlobalOptFlags opt) const<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line <link linkend="__c_indexer_8h_source_1l00071">71</link> of file <link linkend="__c_indexer_8h_source">CIndexer.h</link>.</para>
<programlisting>00071 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00072 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;Options&#32;&amp;&#32;opt;
00073 &#32;&#32;}
</programlisting>    </section><anchor xml:id="_classclang_1_1_c_indexer_1a082ac8e1740ef35ea17cba6ca71e9063"/>    <section>
    <title>setCXGlobalOptFlags()</title>
<indexterm><primary>setCXGlobalOptFlags</primary><secondary>clang::CIndexer</secondary></indexterm>
<indexterm><primary>clang::CIndexer</primary><secondary>setCXGlobalOptFlags</secondary></indexterm>
<para><computeroutput>void clang::CIndexer::setCXGlobalOptFlags (unsigned options)<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line <link linkend="__c_indexer_8h_source_1l00069">69</link> of file <link linkend="__c_indexer_8h_source">CIndexer.h</link>.</para>
<programlisting>00069 {&#32;Options&#32;=&#32;<link linkend="_namespaceoptions">options</link>;&#32;}
</programlisting>    </section><anchor xml:id="_classclang_1_1_c_indexer_1ab2bceec4f09f9b42169a17e6de7a49ce"/>    <section>
    <title>setDisplayDiagnostics()</title>
<indexterm><primary>setDisplayDiagnostics</primary><secondary>clang::CIndexer</secondary></indexterm>
<indexterm><primary>clang::CIndexer</primary><secondary>setDisplayDiagnostics</secondary></indexterm>
<para><computeroutput>void clang::CIndexer::setDisplayDiagnostics (bool Display = <computeroutput>true</computeroutput>
)<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line <link linkend="__c_indexer_8h_source_1l00060">60</link> of file <link linkend="__c_indexer_8h_source">CIndexer.h</link>.</para>
<programlisting>00060 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00061 &#32;&#32;&#32;&#32;DisplayDiagnostics&#32;=&#32;Display;
00062 &#32;&#32;}
</programlisting>    </section><anchor xml:id="_classclang_1_1_c_indexer_1a5f4654eaf78e262e4a98fe95276f75d5"/>    <section>
    <title>setInvocationEmissionPath()</title>
<indexterm><primary>setInvocationEmissionPath</primary><secondary>clang::CIndexer</secondary></indexterm>
<indexterm><primary>clang::CIndexer</primary><secondary>setInvocationEmissionPath</secondary></indexterm>
<para><computeroutput>void clang::CIndexer::setInvocationEmissionPath (StringRef Str)<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line <link linkend="__c_indexer_8h_source_1l00080">80</link> of file <link linkend="__c_indexer_8h_source">CIndexer.h</link>.</para>
<programlisting>00080 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00081 &#32;&#32;&#32;&#32;InvocationEmissionPath&#32;=&#32;std::string(Str);
00082 &#32;&#32;}
</programlisting>    </section><anchor xml:id="_classclang_1_1_c_indexer_1a591845d07c3aae50c8801150e077b826"/>    <section>
    <title>setOnlyLocalDecls()</title>
<indexterm><primary>setOnlyLocalDecls</primary><secondary>clang::CIndexer</secondary></indexterm>
<indexterm><primary>clang::CIndexer</primary><secondary>setOnlyLocalDecls</secondary></indexterm>
<para><computeroutput>void clang::CIndexer::setOnlyLocalDecls (bool Local = <computeroutput>true</computeroutput>
)<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line <link linkend="__c_indexer_8h_source_1l00057">57</link> of file <link linkend="__c_indexer_8h_source">CIndexer.h</link>.</para>
<programlisting>00057 {&#32;OnlyLocalDecls&#32;=&#32;Local;&#32;}
</programlisting></section>
<para>
The documentation for this class was generated from the following files:</para>
/Users/maximilian/clang-llvm/clang/tools/libclang/<link linkend="__c_indexer_8h">CIndexer.h</link>/Users/maximilian/clang-llvm/clang/tools/libclang/<link linkend="__c_indexer_8cpp">CIndexer.cpp</link></section>
</section>
