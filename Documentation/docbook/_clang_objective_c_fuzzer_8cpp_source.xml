<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="__clang_objective_c_fuzzer_8cpp_source" xml:lang="en-US">
<title>ClangObjectiveCFuzzer.cpp</title>
<indexterm><primary>/Users/maximilian/clang-llvm/clang/tools/clang-fuzzer/ClangObjectiveCFuzzer.cpp</primary></indexterm>
<programlisting>00001 <emphasis role="comment">//===--&#32;ClangObjectiveCFuzzer.cpp&#32;-&#32;Fuzz&#32;Clang&#32;----------------------------===//</emphasis>
00002 <emphasis role="comment">//</emphasis>
00003 <emphasis role="comment">//&#32;Part&#32;of&#32;the&#32;LLVM&#32;Project,&#32;under&#32;the&#32;Apache&#32;License&#32;v2.0&#32;with&#32;LLVM&#32;Exceptions.</emphasis>
00004 <emphasis role="comment">//&#32;See&#32;https://llvm.org/LICENSE.txt&#32;for&#32;license&#32;information.</emphasis>
00005 <emphasis role="comment">//&#32;SPDX-License-Identifier:&#32;Apache-2.0&#32;WITH&#32;LLVM-exception</emphasis>
00006 <emphasis role="comment">//</emphasis>
00007 <emphasis role="comment">//===----------------------------------------------------------------------===//</emphasis>
00013 <emphasis role="comment"></emphasis><emphasis role="comment">//===----------------------------------------------------------------------===//</emphasis>
00014 
00015 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="_handle__cxx_8h">handle-cxx/handle_cxx.h</link>&quot;</emphasis>
00016 
00017 <emphasis role="keyword">using&#32;namespace&#32;</emphasis><link linkend="_namespaceclang__fuzzer">clang_fuzzer</link>;
00018 
<anchor xml:id="__clang_objective_c_fuzzer_8cpp_source_1l00019"/><link linkend="__clang_objective_c_fuzzer_8cpp_1aa30889313cc057073351a87b2590b886">00019</link> <emphasis role="keyword">extern</emphasis>&#32;<emphasis role="stringliteral">&quot;C&quot;</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="__clang_objective_c_fuzzer_8cpp_1aa30889313cc057073351a87b2590b886">LLVMFuzzerInitialize</link>(<emphasis role="keywordtype">int</emphasis>&#32;*argc,&#32;<emphasis role="keywordtype">char</emphasis>&#32;***argv)&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;&#32;}
00020 
<anchor xml:id="__clang_objective_c_fuzzer_8cpp_source_1l00021"/><link linkend="__clang_objective_c_fuzzer_8cpp_1aecb7ba40a567c045e6eb69209014e460">00021</link> <emphasis role="keyword">extern</emphasis>&#32;<emphasis role="stringliteral">&quot;C&quot;</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="__clang_objective_c_fuzzer_8cpp_1aecb7ba40a567c045e6eb69209014e460">LLVMFuzzerTestOneInput</link>(uint8_t&#32;*data,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;size)&#32;{
00022 &#32;&#32;std::string&#32;s(<emphasis role="keyword">reinterpret_cast&lt;</emphasis><emphasis role="keyword">const&#32;</emphasis><emphasis role="keywordtype">char</emphasis>&#32;*<emphasis role="keyword">&gt;</emphasis>(data),&#32;size);
00023 &#32;&#32;<link linkend="_namespaceclang__fuzzer_1a27dbd4f50876f9f3532cb6145a78da33">HandleCXX</link>(s,&#32;<emphasis role="stringliteral">&quot;./test.m&quot;</emphasis>,&#32;{<emphasis role="stringliteral">&quot;-O2&quot;</emphasis>});
00024 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
00025 }
00026 
</programlisting></section>
