<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_namespaceinit__convenience" xml:lang="en-US">
<title>init_convenience Namespace Reference</title>
<indexterm><primary>init_convenience</primary></indexterm>
<simplesect>
    <title>Classes    </title>
        <itemizedlist>
            <listitem><para>class <link linkend="_classinit__convenience_1_1_test_diagnostic_consumer">TestDiagnosticConsumer</link></para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Functions    </title>
        <itemizedlist>
            <listitem><para>std::unique_ptr&lt; CompilerInstance &gt; <link linkend="_namespaceinit__convenience_1a3a792e4d52dcac7d452c453d92cefedb">BuildCompilerInstance</link> ()</para>
</listitem>
            <listitem><para>std::unique_ptr&lt; ASTContext &gt; <link linkend="_namespaceinit__convenience_1ad79d228a70afd330881778896518e14f">BuildASTContext</link> (CompilerInstance &amp;CI, SelectorTable &amp;ST, Builtin::Context &amp;BC)</para>
</listitem>
            <listitem><para>std::unique_ptr&lt; CodeGenerator &gt; <link linkend="_namespaceinit__convenience_1a68375e72bc1be6e612bf4afc9a1d2afd">BuildCodeGen</link> (CompilerInstance &amp;CI, llvm::LLVMContext &amp;LLVMCtx)</para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Function Documentation</title>
<anchor xml:id="_namespaceinit__convenience_1ad79d228a70afd330881778896518e14f"/>    <section>
    <title>BuildASTContext()</title>
<indexterm><primary>BuildASTContext</primary><secondary>init_convenience</secondary></indexterm>
<indexterm><primary>init_convenience</primary><secondary>BuildASTContext</secondary></indexterm>
<para><computeroutput>std::unique_ptr&lt;ASTContext&gt; init_convenience::BuildASTContext (CompilerInstance &amp; CI, SelectorTable &amp; ST, Builtin::Context &amp; BC)</computeroutput></para><para>
Definition at line <link linkend="_clang-import-test_8cpp_source_1l00220">220</link> of file <link linkend="_clang-import-test_8cpp_source">clang-import-test.cpp</link>.</para>
<programlisting>00220 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00221 &#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;AST&#32;=&#32;std::make_unique&lt;ASTContext&gt;(
00222 &#32;&#32;&#32;&#32;&#32;&#32;CI.getLangOpts(),&#32;CI.getSourceManager(),
00223 &#32;&#32;&#32;&#32;&#32;&#32;CI.getPreprocessor().getIdentifierTable(),&#32;ST,&#32;BC);
00224 &#32;&#32;AST-&gt;InitBuiltinTypes(CI.getTarget());
00225 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;AST;
00226 }
</programlisting>    </section><anchor xml:id="_namespaceinit__convenience_1a68375e72bc1be6e612bf4afc9a1d2afd"/>    <section>
    <title>BuildCodeGen()</title>
<indexterm><primary>BuildCodeGen</primary><secondary>init_convenience</secondary></indexterm>
<indexterm><primary>init_convenience</primary><secondary>BuildCodeGen</secondary></indexterm>
<para><computeroutput>std::unique_ptr&lt;CodeGenerator&gt; init_convenience::BuildCodeGen (CompilerInstance &amp; CI, llvm::LLVMContext &amp; LLVMCtx)</computeroutput></para><para>
Definition at line <link linkend="_clang-import-test_8cpp_source_1l00228">228</link> of file <link linkend="_clang-import-test_8cpp_source">clang-import-test.cpp</link>.</para>
<programlisting>00229 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00230 &#32;&#32;StringRef&#32;ModuleName(<emphasis role="stringliteral">&quot;$__module&quot;</emphasis>);
00231 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::unique_ptr&lt;CodeGenerator&gt;(CreateLLVMCodeGen(
00232 &#32;&#32;&#32;&#32;&#32;&#32;CI.getDiagnostics(),&#32;ModuleName,&#32;CI.getHeaderSearchOpts(),
00233 &#32;&#32;&#32;&#32;&#32;&#32;CI.getPreprocessorOpts(),&#32;CI.getCodeGenOpts(),&#32;LLVMCtx));
00234 }
</programlisting>    </section><anchor xml:id="_namespaceinit__convenience_1a3a792e4d52dcac7d452c453d92cefedb"/>    <section>
    <title>BuildCompilerInstance()</title>
<indexterm><primary>BuildCompilerInstance</primary><secondary>init_convenience</secondary></indexterm>
<indexterm><primary>init_convenience</primary><secondary>BuildCompilerInstance</secondary></indexterm>
<para><computeroutput>std::unique_ptr&lt;CompilerInstance&gt; init_convenience::BuildCompilerInstance ( )</computeroutput></para><para>
Definition at line <link linkend="_clang-import-test_8cpp_source_1l00163">163</link> of file <link linkend="_clang-import-test_8cpp_source">clang-import-test.cpp</link>.</para>
<programlisting>00163 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00164 &#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;Ins&#32;=&#32;std::make_unique&lt;CompilerInstance&gt;();
00165 &#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;DC&#32;=&#32;std::make_unique&lt;TestDiagnosticConsumer&gt;();
00166 &#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;ShouldOwnClient&#32;=&#32;<emphasis role="keyword">true</emphasis>;
00167 &#32;&#32;Ins-&gt;createDiagnostics(DC.release(),&#32;ShouldOwnClient);
00168 
00169 &#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;Inv&#32;=&#32;std::make_unique&lt;CompilerInvocation&gt;();
00170 
00171 &#32;&#32;std::vector&lt;const&#32;char&#32;*&gt;&#32;ClangArgv(ClangArgs.size());
00172 &#32;&#32;std::transform(ClangArgs.begin(),&#32;ClangArgs.end(),&#32;ClangArgv.begin(),
00173 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[](<emphasis role="keyword">const</emphasis>&#32;std::string&#32;&amp;s)&#32;-&gt;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*&#32;{&#32;return&#32;s.data();&#32;});
00174 &#32;&#32;CompilerInvocation::CreateFromArgs(*Inv,&#32;ClangArgv,&#32;Ins-&gt;getDiagnostics());
00175 
00176 &#32;&#32;{
00177 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;namespace&#32;</emphasis>driver::types;
00178 &#32;&#32;&#32;&#32;ID&#32;Id&#32;=&#32;lookupTypeForTypeSpecifier(Input.c_str());
00179 &#32;&#32;&#32;&#32;assert(Id&#32;!=&#32;TY_INVALID);
00180 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(isCXX(Id))&#32;{
00181 &#32;&#32;&#32;&#32;&#32;&#32;Inv-&gt;getLangOpts()-&gt;CPlusPlus&#32;=&#32;<emphasis role="keyword">true</emphasis>;
00182 &#32;&#32;&#32;&#32;&#32;&#32;Inv-&gt;getLangOpts()-&gt;CPlusPlus11&#32;=&#32;<emphasis role="keyword">true</emphasis>;
00183 &#32;&#32;&#32;&#32;&#32;&#32;Inv-&gt;getHeaderSearchOpts().UseLibcxx&#32;=&#32;<emphasis role="keyword">true</emphasis>;
00184 &#32;&#32;&#32;&#32;}
00185 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(isObjC(Id))&#32;{
00186 &#32;&#32;&#32;&#32;&#32;&#32;Inv-&gt;getLangOpts()-&gt;ObjC&#32;=&#32;1;
00187 &#32;&#32;&#32;&#32;}
00188 &#32;&#32;}
00189 &#32;&#32;Inv-&gt;getLangOpts()-&gt;ObjCAutoRefCount&#32;=&#32;ObjCARC;
00190 
00191 &#32;&#32;Inv-&gt;getLangOpts()-&gt;Bool&#32;=&#32;<emphasis role="keyword">true</emphasis>;
00192 &#32;&#32;Inv-&gt;getLangOpts()-&gt;WChar&#32;=&#32;<emphasis role="keyword">true</emphasis>;
00193 &#32;&#32;Inv-&gt;getLangOpts()-&gt;Blocks&#32;=&#32;<emphasis role="keyword">true</emphasis>;
00194 &#32;&#32;Inv-&gt;getLangOpts()-&gt;DebuggerSupport&#32;=&#32;<emphasis role="keyword">true</emphasis>;
00195 &#32;&#32;Inv-&gt;getLangOpts()-&gt;SpellChecking&#32;=&#32;<emphasis role="keyword">false</emphasis>;
00196 &#32;&#32;Inv-&gt;getLangOpts()-&gt;ThreadsafeStatics&#32;=&#32;<emphasis role="keyword">false</emphasis>;
00197 &#32;&#32;Inv-&gt;getLangOpts()-&gt;AccessControl&#32;=&#32;<emphasis role="keyword">false</emphasis>;
00198 &#32;&#32;Inv-&gt;getLangOpts()-&gt;DollarIdents&#32;=&#32;<emphasis role="keyword">true</emphasis>;
00199 &#32;&#32;Inv-&gt;getLangOpts()-&gt;Exceptions&#32;=&#32;<emphasis role="keyword">true</emphasis>;
00200 &#32;&#32;Inv-&gt;getLangOpts()-&gt;CXXExceptions&#32;=&#32;<emphasis role="keyword">true</emphasis>;
00201 &#32;&#32;<emphasis role="comment">//&#32;Needed&#32;for&#32;testing&#32;dynamic_cast.</emphasis>
00202 &#32;&#32;Inv-&gt;getLangOpts()-&gt;RTTI&#32;=&#32;<emphasis role="keyword">true</emphasis>;
00203 &#32;&#32;Inv-&gt;getCodeGenOpts().setDebugInfo(codegenoptions::FullDebugInfo);
00204 &#32;&#32;Inv-&gt;getTargetOpts().Triple&#32;=&#32;llvm::sys::getDefaultTargetTriple();
00205 
00206 &#32;&#32;Ins-&gt;setInvocation(std::move(Inv));
00207 
00208 &#32;&#32;TargetInfo&#32;*TI&#32;=&#32;TargetInfo::CreateTargetInfo(
00209 &#32;&#32;&#32;&#32;&#32;&#32;Ins-&gt;getDiagnostics(),&#32;Ins-&gt;getInvocation().TargetOpts);
00210 &#32;&#32;Ins-&gt;setTarget(TI);
00211 &#32;&#32;Ins-&gt;getTarget().adjust(Ins-&gt;getDiagnostics(),&#32;Ins-&gt;getLangOpts());
00212 &#32;&#32;Ins-&gt;createFileManager();
00213 &#32;&#32;Ins-&gt;createSourceManager(Ins-&gt;getFileManager());
00214 &#32;&#32;Ins-&gt;createPreprocessor(TU_Complete);
00215 
00216 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;Ins;
00217 }
</programlisting></section>
</section>
</section>
