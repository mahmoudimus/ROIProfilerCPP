<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_test__exec__anatomy_8py_source" xml:lang="en-US">
<title>test_exec_anatomy.py</title>
<indexterm><primary>/Users/maximilian/clang-llvm/clang/tools/scan-build-py/tests/functional/cases/test_exec_anatomy.py</primary></indexterm>
<programlisting><anchor xml:id="_test__exec__anatomy_8py_source_1l00001"/><link linkend="_namespacetests_1_1functional_1_1cases_1_1test__exec__anatomy">00001</link> <emphasis role="comment">#&#32;-*-&#32;coding:&#32;utf-8&#32;-*-</emphasis>
00002 <emphasis role="comment">#&#32;Part&#32;of&#32;the&#32;LLVM&#32;Project,&#32;under&#32;the&#32;Apache&#32;License&#32;v2.0&#32;with&#32;LLVM&#32;Exceptions.</emphasis>
00003 <emphasis role="comment">#&#32;See&#32;https://llvm.org/LICENSE.txt&#32;for&#32;license&#32;information.</emphasis>
00004 <emphasis role="comment">#&#32;SPDX-License-Identifier:&#32;Apache-2.0&#32;WITH&#32;LLVM-exception</emphasis>
00005 
00006 <emphasis role="keyword">import</emphasis>&#32;libear
00007 <emphasis role="keyword">import</emphasis>&#32;unittest
00008 
00009 <emphasis role="keyword">import</emphasis>&#32;os.path
00010 <emphasis role="keyword">import</emphasis>&#32;subprocess
00011 <emphasis role="keyword">import</emphasis>&#32;json
00012 
00013 
<anchor xml:id="_test__exec__anatomy_8py_source_1l00014"/><link linkend="_namespacetests_1_1functional_1_1cases_1_1test__exec__anatomy_1a21ef20300ca6267ff4767ef7b159e752">00014</link> <emphasis role="keyword">def&#32;</emphasis><link linkend="_namespacetests_1_1functional_1_1cases_1_1test__exec__anatomy_1a21ef20300ca6267ff4767ef7b159e752">run</link>(source_dir,&#32;target_dir):
00015 &#32;&#32;&#32;&#32;<emphasis role="keyword">def&#32;</emphasis><link linkend="_namespacelibear_1a011d707003ffa7443b73f8761c2a121b">execute</link>(cmd):
00016 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;subprocess.check_call(cmd,
00017 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cwd=target_dir,
00018 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;stdout=subprocess.PIPE,
00019 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;stderr=subprocess.STDOUT)
00020 
00021 &#32;&#32;&#32;&#32;<link linkend="_namespacelibear_1a011d707003ffa7443b73f8761c2a121b">execute</link>([<emphasis role="stringliteral">&apos;cmake&apos;</emphasis>,&#32;source_dir])
00022 &#32;&#32;&#32;&#32;<link linkend="_namespacelibear_1a011d707003ffa7443b73f8761c2a121b">execute</link>([<emphasis role="stringliteral">&apos;make&apos;</emphasis>])
00023 
00024 &#32;&#32;&#32;&#32;result_file&#32;=&#32;os.path.join(target_dir,&#32;<emphasis role="stringliteral">&apos;result.json&apos;</emphasis>)
00025 &#32;&#32;&#32;&#32;expected_file&#32;=&#32;os.path.join(target_dir,&#32;<emphasis role="stringliteral">&apos;expected.json&apos;</emphasis>)
00026 &#32;&#32;&#32;&#32;<link linkend="_namespacelibear_1a011d707003ffa7443b73f8761c2a121b">execute</link>([<emphasis role="stringliteral">&apos;intercept-build&apos;</emphasis>,&#32;<emphasis role="stringliteral">&apos;--cdb&apos;</emphasis>,&#32;result_file,&#32;<emphasis role="stringliteral">&apos;./exec&apos;</emphasis>,
00027 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;expected_file])
00028 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(expected_file,&#32;result_file)
00029 
00030 
<anchor xml:id="_test__exec__anatomy_8py_source_1l00031"/><link linkend="_classtests_1_1functional_1_1cases_1_1test__exec__anatomy_1_1_exec_anatomy_test">00031</link> <emphasis role="keyword">class&#32;</emphasis><link linkend="_classtests_1_1functional_1_1cases_1_1test__exec__anatomy_1_1_exec_anatomy_test">ExecAnatomyTest</link>(unittest.TestCase):
<anchor xml:id="_test__exec__anatomy_8py_source_1l00032"/><link linkend="_classtests_1_1functional_1_1cases_1_1test__exec__anatomy_1_1_exec_anatomy_test_1a006e7edef6ddf1942368fe3e1c4fd40f">00032</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">def&#32;</emphasis><link linkend="_classtests_1_1functional_1_1cases_1_1test__exec__anatomy_1_1_exec_anatomy_test_1a006e7edef6ddf1942368fe3e1c4fd40f">assertEqualJson</link>(self,&#32;expected,&#32;result):
00033 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">def&#32;</emphasis>read_json(filename):
00034 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">with</emphasis>&#32;<link linkend="_namespacestartfile_1aa582f75134b683dc321c07d01ff8e501">open</link>(filename)&#32;<emphasis role="keyword">as</emphasis>&#32;handler:
00035 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;json.load(handler)
00036 
00037 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;lhs&#32;=&#32;read_json(expected)
00038 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;rhs&#32;=&#32;read_json(result)
00039 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;item&#32;<emphasis role="keywordflow">in</emphasis>&#32;lhs:
00040 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;self.assertTrue(rhs.count(item))
00041 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;item&#32;<emphasis role="keywordflow">in</emphasis>&#32;rhs:
00042 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;self.assertTrue(lhs.count(item))
00043 
<anchor xml:id="_test__exec__anatomy_8py_source_1l00044"/><link linkend="_classtests_1_1functional_1_1cases_1_1test__exec__anatomy_1_1_exec_anatomy_test_1a18117e11fdb8e33755abd78a2eab5903">00044</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">def&#32;</emphasis><link linkend="_classtests_1_1functional_1_1cases_1_1test__exec__anatomy_1_1_exec_anatomy_test_1a18117e11fdb8e33755abd78a2eab5903">test_all_exec_calls</link>(self):
00045 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this_dir,&#32;_&#32;=&#32;os.path.split(__file__)
00046 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;source_dir&#32;=&#32;os.path.abspath(os.path.join(this_dir,&#32;<emphasis role="stringliteral">&apos;..&apos;</emphasis>,&#32;<emphasis role="stringliteral">&apos;exec&apos;</emphasis>))
00047 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">with</emphasis>&#32;<link linkend="_namespacelibear_1a44657565063241a3d383ec724243c023">libear.TemporaryDirectory</link>()&#32;<emphasis role="keyword">as</emphasis>&#32;tmp_dir:
00048 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;expected,&#32;result&#32;=&#32;<link linkend="_namespacetests_1_1functional_1_1cases_1_1test__exec__anatomy_1a21ef20300ca6267ff4767ef7b159e752">run</link>(source_dir,&#32;tmp_dir)
00049 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;self.<link linkend="_classtests_1_1functional_1_1cases_1_1test__exec__anatomy_1_1_exec_anatomy_test_1a006e7edef6ddf1942368fe3e1c4fd40f">assertEqualJson</link>assertEqualJson(expected,&#32;result)
</programlisting></section>
