<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="__clean_time_01_test_01_cases_2_performance___fibonacci___with___counter__2_8cpp" xml:lang="en-US">
<title>Tests/CleanTime Test Cases/Performance_Fibonacci_With_Counter_2.cpp File Reference</title>
<indexterm><primary>Tests/CleanTime Test Cases/Performance_Fibonacci_With_Counter_2.cpp</primary></indexterm>
<programlisting>#include &lt;iostream&gt;
#include &quot;../lib/DataStorage.cpp&quot;
</programlisting><simplesect>
    <title>Functions    </title>
        <itemizedlist>
            <listitem><para><link linkend="_class_data_storage">DataStorage</link> <link linkend="__clean_time_01_test_01_cases_2_performance___fibonacci___with___counter__2_8cpp_1a2167e7819cc006f7f2e813f111263c13">dataStorage</link> (&quot;Runtime,Scope,IfStmt 2085332,CustomCompoundStmt i000004&quot;)</para>
</listitem>
            <listitem><para>int <link linkend="__clean_time_01_test_01_cases_2_performance___fibonacci___with___counter__2_8cpp_1a840291bc02cba5474a4cb46a9b9566fe">main</link> (void)</para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Function Documentation</title>
<anchor xml:id="__clean_time_01_test_01_cases_2_performance___fibonacci___with___counter__2_8cpp_1a2167e7819cc006f7f2e813f111263c13"/>    <section>
    <title>dataStorage()</title>
<indexterm><primary>dataStorage</primary><secondary>Performance_Fibonacci_With_Counter_2.cpp</secondary></indexterm>
<indexterm><primary>Performance_Fibonacci_With_Counter_2.cpp</primary><secondary>dataStorage</secondary></indexterm>
<para><computeroutput><link linkend="_class_data_storage">DataStorage</link> dataStorage (&quot; Runtime, Scope , IfStmt 2085332, CustomCompoundStmt i000004&quot; )</computeroutput></para><para>
Referenced by <link linkend="__clean_time_01_test_01_cases_2_performance___fibonacci___with___counter__2_8cpp_source_1l00004">main()</link>.</para>
    </section><anchor xml:id="__clean_time_01_test_01_cases_2_performance___fibonacci___with___counter__2_8cpp_1a840291bc02cba5474a4cb46a9b9566fe"/>    <section>
    <title>main()</title>
<indexterm><primary>main</primary><secondary>Performance_Fibonacci_With_Counter_2.cpp</secondary></indexterm>
<indexterm><primary>Performance_Fibonacci_With_Counter_2.cpp</primary><secondary>main</secondary></indexterm>
<para><computeroutput>int main (void )</computeroutput></para><para>
Definition at line <link linkend="__clean_time_01_test_01_cases_2_performance___fibonacci___with___counter__2_8cpp_source_1l00004">4</link> of file <link linkend="__clean_time_01_test_01_cases_2_performance___fibonacci___with___counter__2_8cpp_source">Performance_Fibonacci_With_Counter_2.cpp</link>.</para>
<programlisting>00004 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00005 <link linkend="__clean_time_01_test_01_cases_2_performance___fibonacci___with___counter__2_8cpp_1a2167e7819cc006f7f2e813f111263c13">dataStorage</link>.<link linkend="_class_data_storage_1a927960040591eba171b0dbbfa4b9b5bd">startEvent</link>(0);
00006 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;n,&#32;t1&#32;=&#32;0,&#32;t2&#32;=&#32;1,&#32;nextTerm&#32;=&#32;0;
00007 &#32;&#32;&#32;&#32;n&#32;=&#32;1000;
00008 
00009 &#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;Fibonacci&#32;Series:&#32;&quot;</emphasis>;
00010 
00011 &#32;&#32;&#32;&#32;<link linkend="__clean_time_01_test_01_cases_2_performance___fibonacci___with___counter__2_8cpp_1a2167e7819cc006f7f2e813f111263c13">dataStorage</link>.<link linkend="_class_data_storage_1a927960040591eba171b0dbbfa4b9b5bd">startEvent</link>(1);
00012 <emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;i&#32;=&#32;1;&#32;i&#32;&lt;=&#32;n;&#32;++i)&#32;{
00013 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__clean_time_01_test_01_cases_2_performance___fibonacci___with___counter__2_8cpp_1a2167e7819cc006f7f2e813f111263c13">dataStorage</link>.<link linkend="_class_data_storage_1a927960040591eba171b0dbbfa4b9b5bd">startEvent</link>(2);
00014 <emphasis role="keywordflow">if</emphasis>(i&#32;==&#32;1)&#32;{
00015 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;t1;
00016 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;,&#32;&quot;</emphasis>;
00017 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00018 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>(i&#32;==&#32;2)&#32;{
00019 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;t2;
00020 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;,&#32;&quot;</emphasis>;
00021 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00022 <link linkend="__clean_time_01_test_01_cases_2_performance___fibonacci___with___counter__2_8cpp_1a2167e7819cc006f7f2e813f111263c13">dataStorage</link>.<link linkend="_class_data_storage_1ade8287e335af60ba18c8455d4485094c">endEvent</link>(2);
00023 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__clean_time_01_test_01_cases_2_performance___fibonacci___with___counter__2_8cpp_1a2167e7819cc006f7f2e813f111263c13">dataStorage</link>.<link linkend="_class_data_storage_1a927960040591eba171b0dbbfa4b9b5bd">startEvent</link>(3);
00024 nextTerm&#32;=&#32;t1&#32;+&#32;t2;
00025 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;t1&#32;=&#32;t2;
00026 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;t2&#32;=&#32;nextTerm;
00027 
00028 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;nextTerm&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;,&#32;&quot;</emphasis>;
00029 <link linkend="__clean_time_01_test_01_cases_2_performance___fibonacci___with___counter__2_8cpp_1a2167e7819cc006f7f2e813f111263c13">dataStorage</link>.<link linkend="_class_data_storage_1ade8287e335af60ba18c8455d4485094c">endEvent</link>(3);
00030 &#32;&#32;&#32;&#32;}
00031 <link linkend="__clean_time_01_test_01_cases_2_performance___fibonacci___with___counter__2_8cpp_1a2167e7819cc006f7f2e813f111263c13">dataStorage</link>.<link linkend="_class_data_storage_1ade8287e335af60ba18c8455d4485094c">endEvent</link>(1);
00032 
00033 &#32;&#32;&#32;&#32;<link linkend="__clean_time_01_test_01_cases_2_performance___fibonacci___with___counter__2_8cpp_1a2167e7819cc006f7f2e813f111263c13">dataStorage</link>.<link linkend="_class_data_storage_1ade8287e335af60ba18c8455d4485094c">endEvent</link>(0);
00034 <link linkend="__clean_time_01_test_01_cases_2_performance___fibonacci___with___counter__2_8cpp_1a2167e7819cc006f7f2e813f111263c13">dataStorage</link>.<link linkend="_class_data_storage_1a94ef68ba0c97efa1c78b6f6909eb133c">print</link>();<emphasis role="keywordflow">return</emphasis>&#32;0;
00035 }
</programlisting><para>
References <link linkend="__clean_time_01_test_01_cases_2_performance___fibonacci___with___counter__2_8cpp_1a2167e7819cc006f7f2e813f111263c13">dataStorage()</link>, <link linkend="__data_storage_8cpp_source_1l00046">DataStorage::endEvent()</link>, <link linkend="__data_storage_8cpp_source_1l00052">DataStorage::print()</link>, and <link linkend="__data_storage_8cpp_source_1l00028">DataStorage::startEvent()</link>.</para>
</section>
</section>
</section>
