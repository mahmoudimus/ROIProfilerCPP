<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_structclang_1_1_c_x_stored_diagnostic" xml:lang="en-US">
<title>clang::CXStoredDiagnostic Struct Reference</title>
<indexterm><primary>clang::CXStoredDiagnostic</primary></indexterm>
<para>

<para>The storage behind a CXDiagnostic. </para>
 
</para>
<para>
<computeroutput>#include &lt;CIndexDiagnostic.h&gt;</computeroutput>
</para>
<para>Inheritance diagram for clang::CXStoredDiagnostic:    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="structclang_1_1_c_x_stored_diagnostic.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
<simplesect>
    <title>Public Types    </title>
        <itemizedlist>
            <listitem><para>enum <link linkend="_classclang_1_1_c_x_diagnostic_impl_1a7f5f268f2ce5caa8ba3d99ad9df52cda">Kind</link> { <link linkend="_classclang_1_1_c_x_diagnostic_impl_1a7f5f268f2ce5caa8ba3d99ad9df52cdaa0bd35601037c6b3bc0264392e5d77bd6">StoredDiagnosticKind</link>
, <link linkend="_classclang_1_1_c_x_diagnostic_impl_1a7f5f268f2ce5caa8ba3d99ad9df52cdaa7cfd2d3ec9530885fe43a0d48de7e58f">LoadedDiagnosticKind</link>
, <link linkend="_classclang_1_1_c_x_diagnostic_impl_1a7f5f268f2ce5caa8ba3d99ad9df52cdaaf20568046c187883803beed039cbc572">CustomNoteDiagnosticKind</link>
 }</para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Public Member Functions    </title>
        <itemizedlist>
            <listitem><para><link linkend="_structclang_1_1_c_x_stored_diagnostic_1af922f3d2866e639c17263c1d705992dc">CXStoredDiagnostic</link> (const StoredDiagnostic &amp;<link linkend="_structclang_1_1_c_x_stored_diagnostic_1aa2f969ce3f505353964fe57e3313bbe5">Diag</link>, const LangOptions &amp;<link linkend="_structclang_1_1_c_x_stored_diagnostic_1a00aba069136bdd2eb37ff3cb61f9534a">LangOpts</link>)</para>
</listitem>
            <listitem><para><link linkend="_structclang_1_1_c_x_stored_diagnostic_1a6d04da348b4ca92e8485e064af58a495">~CXStoredDiagnostic</link> () override</para>
</listitem>
            <listitem><para>CXDiagnosticSeverity <link linkend="_structclang_1_1_c_x_stored_diagnostic_1a33528d6590cb98adba56982ca34fa512">getSeverity</link> () const override</para>

<para>Return the severity of the diagnostic. </para>
</listitem>
            <listitem><para>CXSourceLocation <link linkend="_structclang_1_1_c_x_stored_diagnostic_1a3b30ea3018850186f5e2966c561b1a76">getLocation</link> () const override</para>

<para>Return the location of the diagnostic. </para>
</listitem>
            <listitem><para>CXString <link linkend="_structclang_1_1_c_x_stored_diagnostic_1a7155edd88cffff30ab817a538edd02d8">getSpelling</link> () const override</para>

<para>Return the spelling of the diagnostic. </para>
</listitem>
            <listitem><para>CXString <link linkend="_structclang_1_1_c_x_stored_diagnostic_1a4703a42f55f87e110462ceaa96841051">getDiagnosticOption</link> (CXString *Disable) const override</para>

<para>Return the text for the diagnostic option. </para>
</listitem>
            <listitem><para>unsigned <link linkend="_structclang_1_1_c_x_stored_diagnostic_1a49ec3ad33b878055764273963ed663f7">getCategory</link> () const override</para>

<para>Return the category of the diagnostic. </para>
</listitem>
            <listitem><para>CXString <link linkend="_structclang_1_1_c_x_stored_diagnostic_1a21f5f3bde553c4e7d30af47283a670d7">getCategoryText</link> () const override</para>

<para>Return the category string of the diagnostic. </para>
</listitem>
            <listitem><para>unsigned <link linkend="_structclang_1_1_c_x_stored_diagnostic_1aa6beb55a1e88d3176c79fe0133a36811">getNumRanges</link> () const override</para>

<para>Return the number of source ranges for the diagnostic. </para>
</listitem>
            <listitem><para>CXSourceRange <link linkend="_structclang_1_1_c_x_stored_diagnostic_1a16d1af26c211acd8531d20334b56f72e">getRange</link> (unsigned Range) const override</para>

<para>Return the source ranges for the diagnostic. </para>
</listitem>
            <listitem><para>unsigned <link linkend="_structclang_1_1_c_x_stored_diagnostic_1abbc2d1e5efc46b3e6e2ec38121fc9d76">getNumFixIts</link> () const override</para>

<para>Return the number of FixIts. </para>
</listitem>
            <listitem><para>CXString <link linkend="_structclang_1_1_c_x_stored_diagnostic_1a22c0db95587b752de69ef1054b9dc92e">getFixIt</link> (unsigned FixIt, CXSourceRange *ReplacementRange) const override</para>

<para>Return the FixIt information (source range and inserted text). </para>
</listitem>
            <listitem><para><link linkend="_classclang_1_1_c_x_diagnostic_impl_1a7f5f268f2ce5caa8ba3d99ad9df52cda">Kind</link> <link linkend="_classclang_1_1_c_x_diagnostic_impl_1a291e683397c75960d2a722387bc4dca7">getKind</link> () const</para>
</listitem>
            <listitem><para><link linkend="_classclang_1_1_c_x_diagnostic_set_impl">CXDiagnosticSetImpl</link> &amp; <link linkend="_classclang_1_1_c_x_diagnostic_impl_1af56711ab018bcca7e31c5c0589743425">getChildDiagnostics</link> ()</para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Static Public Member Functions    </title>
        <itemizedlist>
            <listitem><para>static bool <link linkend="_structclang_1_1_c_x_stored_diagnostic_1a76e782c1c697df50492b9aff6af5c896">classof</link> (const <link linkend="_classclang_1_1_c_x_diagnostic_impl">CXDiagnosticImpl</link> *D)</para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Public Attributes    </title>
        <itemizedlist>
            <listitem><para>const StoredDiagnostic &amp; <link linkend="_structclang_1_1_c_x_stored_diagnostic_1aa2f969ce3f505353964fe57e3313bbe5">Diag</link></para>
</listitem>
            <listitem><para>const LangOptions &amp; <link linkend="_structclang_1_1_c_x_stored_diagnostic_1a00aba069136bdd2eb37ff3cb61f9534a">LangOpts</link></para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Protected Member Functions    </title>
        <itemizedlist>
            <listitem><para>void <link linkend="_classclang_1_1_c_x_diagnostic_impl_1ac1da33a15a858de42c4015a7264caa90">append</link> (std::unique_ptr&lt; <link linkend="_classclang_1_1_c_x_diagnostic_impl">CXDiagnosticImpl</link> &gt; D)</para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Protected Attributes    </title>
        <itemizedlist>
            <listitem><para><link linkend="_classclang_1_1_c_x_diagnostic_set_impl">CXDiagnosticSetImpl</link> <link linkend="_classclang_1_1_c_x_diagnostic_impl_1a8b46051cf84323f5590bd7ac5550e103">ChildDiags</link></para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Detailed Description</title>

<para>The storage behind a CXDiagnostic. </para>
<para>
Definition at line <link linkend="__c_index_diagnostic_8h_source_1l00111">111</link> of file <link linkend="__c_index_diagnostic_8h_source">CIndexDiagnostic.h</link>.</para>
</section>
<section>
<title>Member Enumeration Documentation</title>
<anchor xml:id="_classclang_1_1_c_x_diagnostic_impl_1a7f5f268f2ce5caa8ba3d99ad9df52cda"/>    <section>
    <title>Kind</title>
<indexterm><primary>Kind</primary><secondary>clang::CXStoredDiagnostic</secondary></indexterm>
<indexterm><primary>clang::CXStoredDiagnostic</primary><secondary>Kind</secondary></indexterm>
<para><computeroutput>enum <link linkend="_classclang_1_1_c_x_diagnostic_impl_1a7f5f268f2ce5caa8ba3d99ad9df52cda">clang::CXDiagnosticImpl::Kind</link><computeroutput>[inherited]</computeroutput></computeroutput></para><informaltable frame="all">
<title>Enumerator</title>
    <tgroup cols="2" align="left" colsep="1" rowsep="1">
      <colspec colname='c1'/>
      <colspec colname='c2'/>
<tbody>
<row><entry><indexterm><primary>StoredDiagnosticKind</primary><secondary>clang::CXStoredDiagnostic</secondary></indexterm>
<indexterm><primary>clang::CXStoredDiagnostic</primary><secondary>StoredDiagnosticKind</secondary></indexterm>
<anchor xml:id="_classclang_1_1_c_x_diagnostic_impl_1a7f5f268f2ce5caa8ba3d99ad9df52cdaa0bd35601037c6b3bc0264392e5d77bd6"/>StoredDiagnosticKind</entry><entry></entry></row><row><entry><indexterm><primary>LoadedDiagnosticKind</primary><secondary>clang::CXStoredDiagnostic</secondary></indexterm>
<indexterm><primary>clang::CXStoredDiagnostic</primary><secondary>LoadedDiagnosticKind</secondary></indexterm>
<anchor xml:id="_classclang_1_1_c_x_diagnostic_impl_1a7f5f268f2ce5caa8ba3d99ad9df52cdaa7cfd2d3ec9530885fe43a0d48de7e58f"/>LoadedDiagnosticKind</entry><entry></entry></row><row><entry><indexterm><primary>CustomNoteDiagnosticKind</primary><secondary>clang::CXStoredDiagnostic</secondary></indexterm>
<indexterm><primary>clang::CXStoredDiagnostic</primary><secondary>CustomNoteDiagnosticKind</secondary></indexterm>
<anchor xml:id="_classclang_1_1_c_x_diagnostic_impl_1a7f5f268f2ce5caa8ba3d99ad9df52cdaaf20568046c187883803beed039cbc572"/>CustomNoteDiagnosticKind</entry><entry></entry></row>    </tbody>
    </tgroup>
</informaltable>
<para>
Definition at line <link linkend="__c_index_diagnostic_8h_source_1l00056">56</link> of file <link linkend="__c_index_diagnostic_8h_source">CIndexDiagnostic.h</link>.</para>
<programlisting>00056 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;<link linkend="_classclang_1_1_c_x_diagnostic_impl_1a7f5f268f2ce5caa8ba3d99ad9df52cdaa0bd35601037c6b3bc0264392e5d77bd6">StoredDiagnosticKind</link>,&#32;<link linkend="_classclang_1_1_c_x_diagnostic_impl_1a7f5f268f2ce5caa8ba3d99ad9df52cdaa7cfd2d3ec9530885fe43a0d48de7e58f">LoadedDiagnosticKind</link>,
00057 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classclang_1_1_c_x_diagnostic_impl_1a7f5f268f2ce5caa8ba3d99ad9df52cdaaf20568046c187883803beed039cbc572">CustomNoteDiagnosticKind</link>&#32;};
</programlisting></section>
</section>
<section>
<title>Constructor &amp; Destructor Documentation</title>
<anchor xml:id="_structclang_1_1_c_x_stored_diagnostic_1af922f3d2866e639c17263c1d705992dc"/>    <section>
    <title>CXStoredDiagnostic()</title>
<indexterm><primary>CXStoredDiagnostic</primary><secondary>clang::CXStoredDiagnostic</secondary></indexterm>
<indexterm><primary>clang::CXStoredDiagnostic</primary><secondary>CXStoredDiagnostic</secondary></indexterm>
<para><computeroutput>clang::CXStoredDiagnostic::CXStoredDiagnostic (const StoredDiagnostic &amp; Diag, const LangOptions &amp; LangOpts)<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line <link linkend="__c_index_diagnostic_8h_source_1l00115">115</link> of file <link linkend="__c_index_diagnostic_8h_source">CIndexDiagnostic.h</link>.</para>
<programlisting>00117 &#32;&#32;&#32;&#32;:&#32;<link linkend="_classclang_1_1_c_x_diagnostic_impl_1a4b828845f3ca99d9ba01c5083279850c">CXDiagnosticImpl</link>(<link linkend="_classclang_1_1_c_x_diagnostic_impl_1a7f5f268f2ce5caa8ba3d99ad9df52cdaa0bd35601037c6b3bc0264392e5d77bd6">StoredDiagnosticKind</link>),
00118 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_structclang_1_1_c_x_stored_diagnostic_1aa2f969ce3f505353964fe57e3313bbe5">Diag</link>(<link linkend="_structclang_1_1_c_x_stored_diagnostic_1aa2f969ce3f505353964fe57e3313bbe5">Diag</link>),&#32;<link linkend="_structclang_1_1_c_x_stored_diagnostic_1a00aba069136bdd2eb37ff3cb61f9534a">LangOpts</link>(<link linkend="_structclang_1_1_c_x_stored_diagnostic_1a00aba069136bdd2eb37ff3cb61f9534a">LangOpts</link>)&#32;{&#32;}
</programlisting>    </section><anchor xml:id="_structclang_1_1_c_x_stored_diagnostic_1a6d04da348b4ca92e8485e064af58a495"/>    <section>
    <title>~CXStoredDiagnostic()</title>
<indexterm><primary>~CXStoredDiagnostic</primary><secondary>clang::CXStoredDiagnostic</secondary></indexterm>
<indexterm><primary>clang::CXStoredDiagnostic</primary><secondary>~CXStoredDiagnostic</secondary></indexterm>
<para><computeroutput>clang::CXStoredDiagnostic::~CXStoredDiagnostic ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[override]</computeroutput></computeroutput></para><para>
Definition at line <link linkend="__c_index_diagnostic_8h_source_1l00120">120</link> of file <link linkend="__c_index_diagnostic_8h_source">CIndexDiagnostic.h</link>.</para>
<programlisting>00120 {}
</programlisting></section>
</section>
<section>
<title>Member Function Documentation</title>
<anchor xml:id="_classclang_1_1_c_x_diagnostic_impl_1ac1da33a15a858de42c4015a7264caa90"/>    <section>
    <title>append()</title>
<indexterm><primary>append</primary><secondary>clang::CXStoredDiagnostic</secondary></indexterm>
<indexterm><primary>clang::CXStoredDiagnostic</primary><secondary>append</secondary></indexterm>
<para><computeroutput>void clang::CXDiagnosticImpl::append (std::unique_ptr&lt; <link linkend="_classclang_1_1_c_x_diagnostic_impl">CXDiagnosticImpl</link> &gt; D)<computeroutput>[inline]</computeroutput>, <computeroutput>[protected]</computeroutput>, <computeroutput>[inherited]</computeroutput></computeroutput></para><para>
Definition at line <link linkend="__c_index_diagnostic_8h_source_1l00102">102</link> of file <link linkend="__c_index_diagnostic_8h_source">CIndexDiagnostic.h</link>.</para>
<programlisting>00102 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00103 &#32;&#32;&#32;&#32;<link linkend="_classclang_1_1_c_x_diagnostic_impl_1a8b46051cf84323f5590bd7ac5550e103">ChildDiags</link>.<link linkend="_classclang_1_1_c_x_diagnostic_set_impl_1a48fbd8d5f59446e568395bc0690db789">appendDiagnostic</link>(std::move(D));
00104 &#32;&#32;}
</programlisting><para>
References <link linkend="__c_index_diagnostic_8cpp_source_1l00033">clang::CXDiagnosticSetImpl::appendDiagnostic()</link>, and <link linkend="__c_index_diagnostic_8h_source_1l00100">clang::CXDiagnosticImpl::ChildDiags</link>.</para>
    </section><anchor xml:id="_structclang_1_1_c_x_stored_diagnostic_1a76e782c1c697df50492b9aff6af5c896"/>    <section>
    <title>classof()</title>
<indexterm><primary>classof</primary><secondary>clang::CXStoredDiagnostic</secondary></indexterm>
<indexterm><primary>clang::CXStoredDiagnostic</primary><secondary>classof</secondary></indexterm>
<para><computeroutput>static bool clang::CXStoredDiagnostic::classof (const <link linkend="_classclang_1_1_c_x_diagnostic_impl">CXDiagnosticImpl</link> * D)<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput></computeroutput></para><para>
Definition at line <link linkend="__c_index_diagnostic_8h_source_1l00153">153</link> of file <link linkend="__c_index_diagnostic_8h_source">CIndexDiagnostic.h</link>.</para>
<programlisting>00153 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00154 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;D-&gt;getKind()&#32;==&#32;<link linkend="_classclang_1_1_c_x_diagnostic_impl_1a7f5f268f2ce5caa8ba3d99ad9df52cdaa0bd35601037c6b3bc0264392e5d77bd6">StoredDiagnosticKind</link>;
00155 &#32;&#32;}
</programlisting><para>
References <link linkend="__c_index_diagnostic_8h_source_1l00092">clang::CXDiagnosticImpl::getKind()</link>, and <link linkend="__c_index_diagnostic_8h_source_1l00056">clang::CXDiagnosticImpl::StoredDiagnosticKind</link>.</para>
    </section><anchor xml:id="_structclang_1_1_c_x_stored_diagnostic_1a49ec3ad33b878055764273963ed663f7"/>    <section>
    <title>getCategory()</title>
<indexterm><primary>getCategory</primary><secondary>clang::CXStoredDiagnostic</secondary></indexterm>
<indexterm><primary>clang::CXStoredDiagnostic</primary><secondary>getCategory</secondary></indexterm>
<para><computeroutput>unsigned CXStoredDiagnostic::getCategory ( ) const<computeroutput>[override]</computeroutput>, <computeroutput>[virtual]</computeroutput></computeroutput></para><para>

<para>Return the category of the diagnostic. </para>
</para>
<para>
Implements <link linkend="_classclang_1_1_c_x_diagnostic_impl_1a1fd1ee880f76ddd047a763fdad1e9dc3">clang::CXDiagnosticImpl</link>.</para>
<para>
Definition at line <link linkend="__c_x_stored_diagnostic_8cpp_source_1l00070">70</link> of file <link linkend="__c_x_stored_diagnostic_8cpp_source">CXStoredDiagnostic.cpp</link>.</para>
<programlisting>00070 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00071 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;DiagnosticIDs::getCategoryNumberForDiag(<link linkend="_structclang_1_1_c_x_stored_diagnostic_1aa2f969ce3f505353964fe57e3313bbe5">Diag</link>.getID());
00072 }
</programlisting>    </section><anchor xml:id="_structclang_1_1_c_x_stored_diagnostic_1a21f5f3bde553c4e7d30af47283a670d7"/>    <section>
    <title>getCategoryText()</title>
<indexterm><primary>getCategoryText</primary><secondary>clang::CXStoredDiagnostic</secondary></indexterm>
<indexterm><primary>clang::CXStoredDiagnostic</primary><secondary>getCategoryText</secondary></indexterm>
<para><computeroutput>CXString CXStoredDiagnostic::getCategoryText ( ) const<computeroutput>[override]</computeroutput>, <computeroutput>[virtual]</computeroutput></computeroutput></para><para>

<para>Return the category string of the diagnostic. </para>
</para>
<para>
Implements <link linkend="_classclang_1_1_c_x_diagnostic_impl_1af5fc17b07ee253ee5ebaaffd8481c11c">clang::CXDiagnosticImpl</link>.</para>
<para>
Definition at line <link linkend="__c_x_stored_diagnostic_8cpp_source_1l00074">74</link> of file <link linkend="__c_x_stored_diagnostic_8cpp_source">CXStoredDiagnostic.cpp</link>.</para>
<programlisting>00074 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00075 &#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;catID&#32;=&#32;DiagnosticIDs::getCategoryNumberForDiag(<link linkend="_structclang_1_1_c_x_stored_diagnostic_1aa2f969ce3f505353964fe57e3313bbe5">Diag</link>.getID());
00076 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(DiagnosticIDs::getCategoryNameFromID(catID));
00077 }
</programlisting><para>
References <link linkend="__c_x_string_8cpp_source_1l00057">clang::cxstring::createRef()</link>.</para>
    </section><anchor xml:id="_classclang_1_1_c_x_diagnostic_impl_1af56711ab018bcca7e31c5c0589743425"/>    <section>
    <title>getChildDiagnostics()</title>
<indexterm><primary>getChildDiagnostics</primary><secondary>clang::CXStoredDiagnostic</secondary></indexterm>
<indexterm><primary>clang::CXStoredDiagnostic</primary><secondary>getChildDiagnostics</secondary></indexterm>
<para><computeroutput><link linkend="_classclang_1_1_c_x_diagnostic_set_impl">CXDiagnosticSetImpl</link>&amp; clang::CXDiagnosticImpl::getChildDiagnostics ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[inherited]</computeroutput></computeroutput></para><para>
Definition at line <link linkend="__c_index_diagnostic_8h_source_1l00094">94</link> of file <link linkend="__c_index_diagnostic_8h_source">CIndexDiagnostic.h</link>.</para>
<programlisting>00094 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00095 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classclang_1_1_c_x_diagnostic_impl_1a8b46051cf84323f5590bd7ac5550e103">ChildDiags</link>;
00096 &#32;&#32;}
</programlisting><para>
References <link linkend="__c_index_diagnostic_8h_source_1l00100">clang::CXDiagnosticImpl::ChildDiags</link>.</para>
    </section><anchor xml:id="_structclang_1_1_c_x_stored_diagnostic_1a4703a42f55f87e110462ceaa96841051"/>    <section>
    <title>getDiagnosticOption()</title>
<indexterm><primary>getDiagnosticOption</primary><secondary>clang::CXStoredDiagnostic</secondary></indexterm>
<indexterm><primary>clang::CXStoredDiagnostic</primary><secondary>getDiagnosticOption</secondary></indexterm>
<para><computeroutput>CXString CXStoredDiagnostic::getDiagnosticOption (CXString * Disable) const<computeroutput>[override]</computeroutput>, <computeroutput>[virtual]</computeroutput></computeroutput></para><para>

<para>Return the text for the diagnostic option. </para>
</para>
<para>
Implements <link linkend="_classclang_1_1_c_x_diagnostic_impl_1a104a0f5935756ca714dee6f0948573f9">clang::CXDiagnosticImpl</link>.</para>
<para>
Definition at line <link linkend="__c_x_stored_diagnostic_8cpp_source_1l00052">52</link> of file <link linkend="__c_x_stored_diagnostic_8cpp_source">CXStoredDiagnostic.cpp</link>.</para>
<programlisting>00052 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00053 &#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;ID&#32;=&#32;<link linkend="_structclang_1_1_c_x_stored_diagnostic_1aa2f969ce3f505353964fe57e3313bbe5">Diag</link>.getID();
00054 &#32;&#32;StringRef&#32;Option&#32;=&#32;DiagnosticIDs::getWarningOptionForDiag(ID);
00055 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!Option.empty())&#32;{
00056 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(Disable)
00057 &#32;&#32;&#32;&#32;&#32;&#32;*Disable&#32;=&#32;<link linkend="_namespaceclang_1_1cxstring_1a19a4962be87f75a8c1fa5a0b75f76298">cxstring::createDup</link>((Twine(<emphasis role="stringliteral">&quot;-Wno-&quot;</emphasis>)&#32;+&#32;Option).str());
00058 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1a19a4962be87f75a8c1fa5a0b75f76298">cxstring::createDup</link>((Twine(<emphasis role="stringliteral">&quot;-W&quot;</emphasis>)&#32;+&#32;Option).str());
00059 &#32;&#32;}
00060 &#32;&#32;
00061 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(ID&#32;==&#32;diag::fatal_too_many_errors)&#32;{
00062 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(Disable)
00063 &#32;&#32;&#32;&#32;&#32;&#32;*Disable&#32;=&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;-ferror-limit=0&quot;</emphasis>);
00064 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;-ferror-limit=&quot;</emphasis>);
00065 &#32;&#32;}
00066 
00067 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1a8a49aa6ea196abdde85886689f2630f9">cxstring::createEmpty</link>();
00068 }
</programlisting><para>
References <link linkend="__c_x_string_8cpp_source_1l00067">clang::cxstring::createDup()</link>, <link linkend="__c_x_string_8cpp_source_1l00043">clang::cxstring::createEmpty()</link>, and <link linkend="__c_x_string_8cpp_source_1l00057">clang::cxstring::createRef()</link>.</para>
    </section><anchor xml:id="_structclang_1_1_c_x_stored_diagnostic_1a22c0db95587b752de69ef1054b9dc92e"/>    <section>
    <title>getFixIt()</title>
<indexterm><primary>getFixIt</primary><secondary>clang::CXStoredDiagnostic</secondary></indexterm>
<indexterm><primary>clang::CXStoredDiagnostic</primary><secondary>getFixIt</secondary></indexterm>
<para><computeroutput>CXString CXStoredDiagnostic::getFixIt (unsigned FixIt, CXSourceRange * ReplacementRange) const<computeroutput>[override]</computeroutput>, <computeroutput>[virtual]</computeroutput></computeroutput></para><para>

<para>Return the FixIt information (source range and inserted text). </para>
</para>
<para>
Implements <link linkend="_classclang_1_1_c_x_diagnostic_impl_1aa1e009fc05ec6c332234dbf3ec1b03a6">clang::CXDiagnosticImpl</link>.</para>
<para>
Definition at line <link linkend="__c_x_stored_diagnostic_8cpp_source_1l00099">99</link> of file <link linkend="__c_x_stored_diagnostic_8cpp_source">CXStoredDiagnostic.cpp</link>.</para>
<programlisting>00100 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;&#32;
00101 &#32;&#32;<emphasis role="keyword">const</emphasis>&#32;FixItHint&#32;&amp;Hint&#32;=&#32;<link linkend="_structclang_1_1_c_x_stored_diagnostic_1aa2f969ce3f505353964fe57e3313bbe5">Diag</link>.fixit_begin()[FixIt];
00102 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(ReplacementRange)&#32;{
00103 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Create&#32;a&#32;range&#32;that&#32;covers&#32;the&#32;entire&#32;replacement&#32;(or</emphasis>
00104 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;removal)&#32;range,&#32;adjusting&#32;the&#32;end&#32;of&#32;the&#32;range&#32;to&#32;point&#32;to</emphasis>
00105 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;the&#32;end&#32;of&#32;the&#32;token.</emphasis>
00106 &#32;&#32;&#32;&#32;*ReplacementRange&#32;=&#32;<link linkend="_namespaceclang_1_1cxloc_1a39d02b462b1f3233518f01951d83d035">translateSourceRange</link>(<link linkend="_structclang_1_1_c_x_stored_diagnostic_1aa2f969ce3f505353964fe57e3313bbe5">Diag</link>.getLocation().getManager(),
00107 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_structclang_1_1_c_x_stored_diagnostic_1a00aba069136bdd2eb37ff3cb61f9534a">LangOpts</link>,&#32;Hint.RemoveRange);
00108 &#32;&#32;}
00109 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1a19a4962be87f75a8c1fa5a0b75f76298">cxstring::createDup</link>(Hint.CodeToInsert);
00110 }
</programlisting><para>
References <link linkend="__c_x_string_8cpp_source_1l00067">clang::cxstring::createDup()</link>, and <link linkend="__c_index_8cpp_source_1l00143">clang::cxloc::translateSourceRange()</link>.</para>
    </section><anchor xml:id="_classclang_1_1_c_x_diagnostic_impl_1a291e683397c75960d2a722387bc4dca7"/>    <section>
    <title>getKind()</title>
<indexterm><primary>getKind</primary><secondary>clang::CXStoredDiagnostic</secondary></indexterm>
<indexterm><primary>clang::CXStoredDiagnostic</primary><secondary>getKind</secondary></indexterm>
<para><computeroutput><link linkend="_classclang_1_1_c_x_diagnostic_impl_1a7f5f268f2ce5caa8ba3d99ad9df52cda">Kind</link> clang::CXDiagnosticImpl::getKind ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[inherited]</computeroutput></computeroutput></para><para>
Definition at line <link linkend="__c_index_diagnostic_8h_source_1l00092">92</link> of file <link linkend="__c_index_diagnostic_8h_source">CIndexDiagnostic.h</link>.</para>
<programlisting>00092 {&#32;<emphasis role="keywordflow">return</emphasis>&#32;K;&#32;}
</programlisting><para>
Referenced by <link linkend="__c_index_diagnostic_8h_source_1l00153">classof()</link>, and <link linkend="__c_x_loaded_diagnostic_8h_source_1l00061">clang::CXLoadedDiagnostic::classof()</link>.</para>
    </section><anchor xml:id="_structclang_1_1_c_x_stored_diagnostic_1a3b30ea3018850186f5e2966c561b1a76"/>    <section>
    <title>getLocation()</title>
<indexterm><primary>getLocation</primary><secondary>clang::CXStoredDiagnostic</secondary></indexterm>
<indexterm><primary>clang::CXStoredDiagnostic</primary><secondary>getLocation</secondary></indexterm>
<para><computeroutput>CXSourceLocation CXStoredDiagnostic::getLocation ( ) const<computeroutput>[override]</computeroutput>, <computeroutput>[virtual]</computeroutput></computeroutput></para><para>

<para>Return the location of the diagnostic. </para>
</para>
<para>
Implements <link linkend="_classclang_1_1_c_x_diagnostic_impl_1ae82ba92d144e38fcaaec5d472da066e9">clang::CXDiagnosticImpl</link>.</para>
<para>
Definition at line <link linkend="__c_x_stored_diagnostic_8cpp_source_1l00040">40</link> of file <link linkend="__c_x_stored_diagnostic_8cpp_source">CXStoredDiagnostic.cpp</link>.</para>
<programlisting>00040 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00041 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_structclang_1_1_c_x_stored_diagnostic_1aa2f969ce3f505353964fe57e3313bbe5">Diag</link>.getLocation().isInvalid())
00042 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__c_x_source_location_8cpp_1a20bb1e9a72e2c16fbcb21958f0648947">clang_getNullLocation</link>();
00043 &#32;&#32;
00044 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;translateSourceLocation(<link linkend="_structclang_1_1_c_x_stored_diagnostic_1aa2f969ce3f505353964fe57e3313bbe5">Diag</link>.getLocation().getManager(),
00045 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_structclang_1_1_c_x_stored_diagnostic_1a00aba069136bdd2eb37ff3cb61f9534a">LangOpts</link>,&#32;<link linkend="_structclang_1_1_c_x_stored_diagnostic_1aa2f969ce3f505353964fe57e3313bbe5">Diag</link>.getLocation());
00046 }
</programlisting><para>
References <link linkend="__c_x_source_location_8cpp_source_1l00041">clang_getNullLocation()</link>.</para>
    </section><anchor xml:id="_structclang_1_1_c_x_stored_diagnostic_1abbc2d1e5efc46b3e6e2ec38121fc9d76"/>    <section>
    <title>getNumFixIts()</title>
<indexterm><primary>getNumFixIts</primary><secondary>clang::CXStoredDiagnostic</secondary></indexterm>
<indexterm><primary>clang::CXStoredDiagnostic</primary><secondary>getNumFixIts</secondary></indexterm>
<para><computeroutput>unsigned CXStoredDiagnostic::getNumFixIts ( ) const<computeroutput>[override]</computeroutput>, <computeroutput>[virtual]</computeroutput></computeroutput></para><para>

<para>Return the number of FixIts. </para>
</para>
<para>
Implements <link linkend="_classclang_1_1_c_x_diagnostic_impl_1ab80ce934006ca4fb0f9d531586b9162e">clang::CXDiagnosticImpl</link>.</para>
<para>
Definition at line <link linkend="__c_x_stored_diagnostic_8cpp_source_1l00093">93</link> of file <link linkend="__c_x_stored_diagnostic_8cpp_source">CXStoredDiagnostic.cpp</link>.</para>
<programlisting>00093 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00094 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_structclang_1_1_c_x_stored_diagnostic_1aa2f969ce3f505353964fe57e3313bbe5">Diag</link>.getLocation().isInvalid())
00095 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;&#32;&#32;&#32;&#32;
00096 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_structclang_1_1_c_x_stored_diagnostic_1aa2f969ce3f505353964fe57e3313bbe5">Diag</link>.fixit_size();
00097 }
</programlisting>    </section><anchor xml:id="_structclang_1_1_c_x_stored_diagnostic_1aa6beb55a1e88d3176c79fe0133a36811"/>    <section>
    <title>getNumRanges()</title>
<indexterm><primary>getNumRanges</primary><secondary>clang::CXStoredDiagnostic</secondary></indexterm>
<indexterm><primary>clang::CXStoredDiagnostic</primary><secondary>getNumRanges</secondary></indexterm>
<para><computeroutput>unsigned CXStoredDiagnostic::getNumRanges ( ) const<computeroutput>[override]</computeroutput>, <computeroutput>[virtual]</computeroutput></computeroutput></para><para>

<para>Return the number of source ranges for the diagnostic. </para>
</para>
<para>
Implements <link linkend="_classclang_1_1_c_x_diagnostic_impl_1add19591d7940fda585a6a69f87b927d8">clang::CXDiagnosticImpl</link>.</para>
<para>
Definition at line <link linkend="__c_x_stored_diagnostic_8cpp_source_1l00079">79</link> of file <link linkend="__c_x_stored_diagnostic_8cpp_source">CXStoredDiagnostic.cpp</link>.</para>
<programlisting>00079 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00080 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_structclang_1_1_c_x_stored_diagnostic_1aa2f969ce3f505353964fe57e3313bbe5">Diag</link>.getLocation().isInvalid())
00081 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
00082 &#32;&#32;
00083 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_structclang_1_1_c_x_stored_diagnostic_1aa2f969ce3f505353964fe57e3313bbe5">Diag</link>.range_size();
00084 }
</programlisting>    </section><anchor xml:id="_structclang_1_1_c_x_stored_diagnostic_1a16d1af26c211acd8531d20334b56f72e"/>    <section>
    <title>getRange()</title>
<indexterm><primary>getRange</primary><secondary>clang::CXStoredDiagnostic</secondary></indexterm>
<indexterm><primary>clang::CXStoredDiagnostic</primary><secondary>getRange</secondary></indexterm>
<para><computeroutput>CXSourceRange CXStoredDiagnostic::getRange (unsigned Range) const<computeroutput>[override]</computeroutput>, <computeroutput>[virtual]</computeroutput></computeroutput></para><para>

<para>Return the source ranges for the diagnostic. </para>
</para>
<para>
Implements <link linkend="_classclang_1_1_c_x_diagnostic_impl_1a49fc85b074cacc4e1c44dd7c6b540e53">clang::CXDiagnosticImpl</link>.</para>
<para>
Definition at line <link linkend="__c_x_stored_diagnostic_8cpp_source_1l00086">86</link> of file <link linkend="__c_x_stored_diagnostic_8cpp_source">CXStoredDiagnostic.cpp</link>.</para>
<programlisting>00086 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00087 &#32;&#32;assert(<link linkend="_structclang_1_1_c_x_stored_diagnostic_1aa2f969ce3f505353964fe57e3313bbe5">Diag</link>.getLocation().isValid());
00088 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxloc_1a39d02b462b1f3233518f01951d83d035">translateSourceRange</link>(<link linkend="_structclang_1_1_c_x_stored_diagnostic_1aa2f969ce3f505353964fe57e3313bbe5">Diag</link>.getLocation().getManager(),
00089 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_structclang_1_1_c_x_stored_diagnostic_1a00aba069136bdd2eb37ff3cb61f9534a">LangOpts</link>,
00090 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_structclang_1_1_c_x_stored_diagnostic_1aa2f969ce3f505353964fe57e3313bbe5">Diag</link>.range_begin()[Range]);
00091 }
</programlisting><para>
References <link linkend="__c_index_8cpp_source_1l00143">clang::cxloc::translateSourceRange()</link>.</para>
    </section><anchor xml:id="_structclang_1_1_c_x_stored_diagnostic_1a33528d6590cb98adba56982ca34fa512"/>    <section>
    <title>getSeverity()</title>
<indexterm><primary>getSeverity</primary><secondary>clang::CXStoredDiagnostic</secondary></indexterm>
<indexterm><primary>clang::CXStoredDiagnostic</primary><secondary>getSeverity</secondary></indexterm>
<para><computeroutput>CXDiagnosticSeverity CXStoredDiagnostic::getSeverity ( ) const<computeroutput>[override]</computeroutput>, <computeroutput>[virtual]</computeroutput></computeroutput></para><para>

<para>Return the severity of the diagnostic. </para>
</para>
<para>
Implements <link linkend="_classclang_1_1_c_x_diagnostic_impl_1a87553d5e20319e0a3e480cb214cfb6d7">clang::CXDiagnosticImpl</link>.</para>
<para>
Definition at line <link linkend="__c_x_stored_diagnostic_8cpp_source_1l00026">26</link> of file <link linkend="__c_x_stored_diagnostic_8cpp_source">CXStoredDiagnostic.cpp</link>.</para>
<programlisting>00026 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00027 &#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(<link linkend="_structclang_1_1_c_x_stored_diagnostic_1aa2f969ce3f505353964fe57e3313bbe5">Diag</link>.getLevel())&#32;{
00028 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;DiagnosticsEngine::Ignored:&#32;<emphasis role="keywordflow">return</emphasis>&#32;CXDiagnostic_Ignored;
00029 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;DiagnosticsEngine::Note:&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;CXDiagnostic_Note;
00030 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;DiagnosticsEngine::Remark:
00031 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;The&#32;&apos;Remark&apos;&#32;level&#32;isn&apos;t&#32;represented&#32;in&#32;the&#32;stable&#32;API.</emphasis>
00032 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;DiagnosticsEngine::Warning:&#32;<emphasis role="keywordflow">return</emphasis>&#32;CXDiagnostic_Warning;
00033 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;DiagnosticsEngine::Error:&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;CXDiagnostic_Error;
00034 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;DiagnosticsEngine::Fatal:&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;CXDiagnostic_Fatal;
00035 &#32;&#32;}
00036 &#32;&#32;
00037 &#32;&#32;llvm_unreachable(<emphasis role="stringliteral">&quot;Invalid&#32;diagnostic&#32;level&quot;</emphasis>);
00038 }
</programlisting>    </section><anchor xml:id="_structclang_1_1_c_x_stored_diagnostic_1a7155edd88cffff30ab817a538edd02d8"/>    <section>
    <title>getSpelling()</title>
<indexterm><primary>getSpelling</primary><secondary>clang::CXStoredDiagnostic</secondary></indexterm>
<indexterm><primary>clang::CXStoredDiagnostic</primary><secondary>getSpelling</secondary></indexterm>
<para><computeroutput>CXString CXStoredDiagnostic::getSpelling ( ) const<computeroutput>[override]</computeroutput>, <computeroutput>[virtual]</computeroutput></computeroutput></para><para>

<para>Return the spelling of the diagnostic. </para>
</para>
<para>
Implements <link linkend="_classclang_1_1_c_x_diagnostic_impl_1a477f39524bfa199ed9180ed85ac4d3d8">clang::CXDiagnosticImpl</link>.</para>
<para>
Definition at line <link linkend="__c_x_stored_diagnostic_8cpp_source_1l00048">48</link> of file <link linkend="__c_x_stored_diagnostic_8cpp_source">CXStoredDiagnostic.cpp</link>.</para>
<programlisting>00048 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00049 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<link linkend="_structclang_1_1_c_x_stored_diagnostic_1aa2f969ce3f505353964fe57e3313bbe5">Diag</link>.getMessage());
00050 }
</programlisting><para>
References <link linkend="__c_x_string_8cpp_source_1l00057">clang::cxstring::createRef()</link>.</para>
</section>
</section>
<section>
<title>Member Data Documentation</title>
<anchor xml:id="_classclang_1_1_c_x_diagnostic_impl_1a8b46051cf84323f5590bd7ac5550e103"/>    <section>
    <title>ChildDiags</title>
<indexterm><primary>ChildDiags</primary><secondary>clang::CXStoredDiagnostic</secondary></indexterm>
<indexterm><primary>clang::CXStoredDiagnostic</primary><secondary>ChildDiags</secondary></indexterm>
<para><computeroutput><link linkend="_classclang_1_1_c_x_diagnostic_set_impl">CXDiagnosticSetImpl</link> clang::CXDiagnosticImpl::ChildDiags<computeroutput>[protected]</computeroutput>, <computeroutput>[inherited]</computeroutput></computeroutput></para><para>
Definition at line <link linkend="__c_index_diagnostic_8h_source_1l00100">100</link> of file <link linkend="__c_index_diagnostic_8h_source">CIndexDiagnostic.h</link>.</para>
<para>
Referenced by <link linkend="__c_index_diagnostic_8h_source_1l00102">clang::CXDiagnosticImpl::append()</link>, and <link linkend="__c_index_diagnostic_8h_source_1l00094">clang::CXDiagnosticImpl::getChildDiagnostics()</link>.</para>
    </section><anchor xml:id="_structclang_1_1_c_x_stored_diagnostic_1aa2f969ce3f505353964fe57e3313bbe5"/>    <section>
    <title>Diag</title>
<indexterm><primary>Diag</primary><secondary>clang::CXStoredDiagnostic</secondary></indexterm>
<indexterm><primary>clang::CXStoredDiagnostic</primary><secondary>Diag</secondary></indexterm>
<para><computeroutput>const StoredDiagnostic&amp; clang::CXStoredDiagnostic::Diag</computeroutput></para><para>
Definition at line <link linkend="__c_index_diagnostic_8h_source_1l00112">112</link> of file <link linkend="__c_index_diagnostic_8h_source">CIndexDiagnostic.h</link>.</para>
    </section><anchor xml:id="_structclang_1_1_c_x_stored_diagnostic_1a00aba069136bdd2eb37ff3cb61f9534a"/>    <section>
    <title>LangOpts</title>
<indexterm><primary>LangOpts</primary><secondary>clang::CXStoredDiagnostic</secondary></indexterm>
<indexterm><primary>clang::CXStoredDiagnostic</primary><secondary>LangOpts</secondary></indexterm>
<para><computeroutput>const LangOptions&amp; clang::CXStoredDiagnostic::LangOpts</computeroutput></para><para>
Definition at line <link linkend="__c_index_diagnostic_8h_source_1l00113">113</link> of file <link linkend="__c_index_diagnostic_8h_source">CIndexDiagnostic.h</link>.</para>
</section>
<para>
The documentation for this struct was generated from the following files:</para>
/Users/maximilian/clang-llvm/clang/tools/libclang/<link linkend="__c_index_diagnostic_8h">CIndexDiagnostic.h</link>/Users/maximilian/clang-llvm/clang/tools/libclang/<link linkend="__c_x_stored_diagnostic_8cpp">CXStoredDiagnostic.cpp</link></section>
</section>
