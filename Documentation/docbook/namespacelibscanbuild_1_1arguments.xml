<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_namespacelibscanbuild_1_1arguments" xml:lang="en-US">
<title>libscanbuild.arguments Namespace Reference</title>
<indexterm><primary>libscanbuild.arguments</primary></indexterm>
<simplesect>
    <title>Classes    </title>
        <itemizedlist>
            <listitem><para>class <link linkend="_classlibscanbuild_1_1arguments_1_1_append_comma_separated">AppendCommaSeparated</link></para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Functions    </title>
        <itemizedlist>
            <listitem><para>def <link linkend="_namespacelibscanbuild_1_1arguments_1aab7ce55617922a43040742e5e517f0e3">parse_args_for_intercept_build</link> ()</para>
</listitem>
            <listitem><para>def <link linkend="_namespacelibscanbuild_1_1arguments_1aa689de807ebb9310d2094c50a2d4f781">parse_args_for_analyze_build</link> ()</para>
</listitem>
            <listitem><para>def <link linkend="_namespacelibscanbuild_1_1arguments_1af1e8772037b973224007e13c89c00631">parse_args_for_scan_build</link> ()</para>
</listitem>
            <listitem><para>def <link linkend="_namespacelibscanbuild_1_1arguments_1adb8de41e20ef05d2ab0e92e538644af3">normalize_args_for_analyze</link> (args, from_build_command)</para>
</listitem>
            <listitem><para>def <link linkend="_namespacelibscanbuild_1_1arguments_1a0d1ce44189511ff1be1a7b915e105fd5">validate_args_for_analyze</link> (parser, args, from_build_command)</para>
</listitem>
            <listitem><para>def <link linkend="_namespacelibscanbuild_1_1arguments_1a40cf31e515d16f88af0c37161509fd8f">create_intercept_parser</link> ()</para>
</listitem>
            <listitem><para>def <link linkend="_namespacelibscanbuild_1_1arguments_1ae72d2aba163898a6fd0bb9f353e92ef8">create_analyze_parser</link> (from_build_command)</para>
</listitem>
            <listitem><para>def <link linkend="_namespacelibscanbuild_1_1arguments_1a1b058fa061b46587b7e6d1ef9187302c">create_default_parser</link> ()</para>
</listitem>
            <listitem><para>def <link linkend="_namespacelibscanbuild_1_1arguments_1ad1ecaacea1347b24d24240d5994a3ee4">parser_add_cdb</link> (parser)</para>
</listitem>
            <listitem><para>def <link linkend="_namespacelibscanbuild_1_1arguments_1ad83ca665cce99074210a7cb16d6f7a43">parser_add_prefer_wrapper</link> (parser)</para>
</listitem>
            <listitem><para>def <link linkend="_namespacelibscanbuild_1_1arguments_1adde0db9e5c554bf1e4824aa7ce1677b1">parser_add_compilers</link> (parser)</para>
</listitem>
            <listitem><para>def <link linkend="_namespacelibscanbuild_1_1arguments_1ac674484b0e963d26707306cd5a34b2e0">print_active_checkers</link> (checkers)</para>
</listitem>
            <listitem><para>def <link linkend="_namespacelibscanbuild_1_1arguments_1a6d8630c92cd7c364d4570ba22299f8d1">print_checkers</link> (checkers)</para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Function Documentation</title>
<anchor xml:id="_namespacelibscanbuild_1_1arguments_1ae72d2aba163898a6fd0bb9f353e92ef8"/>    <section>
    <title>create_analyze_parser()</title>
<indexterm><primary>create_analyze_parser</primary><secondary>libscanbuild.arguments</secondary></indexterm>
<indexterm><primary>libscanbuild.arguments</primary><secondary>create_analyze_parser</secondary></indexterm>
<para><computeroutput>def libscanbuild.arguments.create_analyze_parser ( from_build_command)</computeroutput></para>
<para><literallayout><computeroutput> Creates a parser for command-line arguments to &apos;analyze&apos;. </computeroutput></literallayout> </para>
<para>
Definition at line <link linkend="_arguments_8py_source_1l00167">167</link> of file <link linkend="_arguments_8py_source">arguments.py</link>.</para>
<programlisting>00167 <emphasis role="keyword">def&#32;</emphasis><link linkend="_namespacelibscanbuild_1_1arguments_1ae72d2aba163898a6fd0bb9f353e92ef8">create_analyze_parser</link>(from_build_command):
00168 &#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;&quot;&quot;&#32;Creates&#32;a&#32;parser&#32;for&#32;command-line&#32;arguments&#32;to&#32;&apos;analyze&apos;.&#32;&quot;&quot;&quot;</emphasis>
00169 
00170 &#32;&#32;&#32;&#32;parser&#32;=&#32;<link linkend="_namespacelibscanbuild_1_1arguments_1a1b058fa061b46587b7e6d1ef9187302c">create_default_parser</link>()
00171 
00172 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;from_build_command:
00173 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacelibscanbuild_1_1arguments_1ad83ca665cce99074210a7cb16d6f7a43">parser_add_prefer_wrapper</link>(parser)
00174 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacelibscanbuild_1_1arguments_1adde0db9e5c554bf1e4824aa7ce1677b1">parser_add_compilers</link>(parser)
00175 
00176 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;parser.add_argument(
00177 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&apos;--intercept-first&apos;</emphasis>,
00178 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;action=<emphasis role="stringliteral">&apos;store_true&apos;</emphasis>,
00179 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;help=<emphasis role="stringliteral">&quot;&quot;&quot;Run&#32;the&#32;build&#32;commands&#32;first,&#32;intercept&#32;compiler</emphasis>
00180 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;calls&#32;and&#32;then&#32;run&#32;the&#32;static&#32;analyzer&#32;afterwards.</emphasis>
00181 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Generally&#32;speaking&#32;it&#32;has&#32;better&#32;coverage&#32;on&#32;build&#32;commands.</emphasis>
00182 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;With&#32;&apos;--override-compiler&apos;&#32;it&#32;use&#32;compiler&#32;wrapper,&#32;but&#32;does</emphasis>
00183 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;not&#32;run&#32;the&#32;analyzer&#32;till&#32;the&#32;build&#32;is&#32;finished.&quot;&quot;&quot;</emphasis>)
00184 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>:
00185 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacelibscanbuild_1_1arguments_1ad1ecaacea1347b24d24240d5994a3ee4">parser_add_cdb</link>(parser)
00186 
00187 &#32;&#32;&#32;&#32;parser.add_argument(
00188 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&apos;--status-bugs&apos;</emphasis>,
00189 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;action=<emphasis role="stringliteral">&apos;store_true&apos;</emphasis>,
00190 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;help=<emphasis role="stringliteral">&quot;&quot;&quot;The&#32;exit&#32;status&#32;of&#32;&apos;%(prog)s&apos;&#32;is&#32;the&#32;same&#32;as&#32;the&#32;executed</emphasis>
00191 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;build&#32;command.&#32;This&#32;option&#32;ignores&#32;the&#32;build&#32;exit&#32;status&#32;and&#32;sets&#32;to</emphasis>
00192 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;be&#32;non&#32;zero&#32;if&#32;it&#32;found&#32;potential&#32;bugs&#32;or&#32;zero&#32;otherwise.&quot;&quot;&quot;</emphasis>)
00193 &#32;&#32;&#32;&#32;parser.add_argument(
00194 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&apos;--exclude&apos;</emphasis>,
00195 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;metavar=<emphasis role="stringliteral">&apos;&lt;directory&gt;&apos;</emphasis>,
00196 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;dest=<emphasis role="stringliteral">&apos;excludes&apos;</emphasis>,
00197 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;action=<emphasis role="stringliteral">&apos;append&apos;</emphasis>,
00198 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;default=[],
00199 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;help=<emphasis role="stringliteral">&quot;&quot;&quot;Do&#32;not&#32;run&#32;static&#32;analyzer&#32;against&#32;files&#32;found&#32;in&#32;this</emphasis>
00200 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;directory.&#32;(You&#32;can&#32;specify&#32;this&#32;option&#32;multiple&#32;times.)</emphasis>
00201 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Could&#32;be&#32;useful&#32;when&#32;project&#32;contains&#32;3rd&#32;party&#32;libraries.&quot;&quot;&quot;</emphasis>)
00202 
00203 &#32;&#32;&#32;&#32;output&#32;=&#32;parser.add_argument_group(<emphasis role="stringliteral">&apos;output&#32;control&#32;options&apos;</emphasis>)
00204 &#32;&#32;&#32;&#32;output.add_argument(
00205 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&apos;--output&apos;</emphasis>,
00206 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&apos;-o&apos;</emphasis>,
00207 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;metavar=<emphasis role="stringliteral">&apos;&lt;path&gt;&apos;</emphasis>,
00208 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;default=tempfile.gettempdir(),
00209 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;help=<emphasis role="stringliteral">&quot;&quot;&quot;Specifies&#32;the&#32;output&#32;directory&#32;for&#32;analyzer&#32;reports.</emphasis>
00210 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Subdirectory&#32;will&#32;be&#32;created&#32;if&#32;default&#32;directory&#32;is&#32;targeted.&quot;&quot;&quot;</emphasis>)
00211 &#32;&#32;&#32;&#32;output.add_argument(
00212 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&apos;--keep-empty&apos;</emphasis>,
00213 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;action=<emphasis role="stringliteral">&apos;store_true&apos;</emphasis>,
00214 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;help=<emphasis role="stringliteral">&quot;&quot;&quot;Don&apos;t&#32;remove&#32;the&#32;build&#32;results&#32;directory&#32;even&#32;if&#32;no&#32;issues</emphasis>
00215 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;were&#32;reported.&quot;&quot;&quot;</emphasis>)
00216 &#32;&#32;&#32;&#32;output.add_argument(
00217 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&apos;--html-title&apos;</emphasis>,
00218 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;metavar=<emphasis role="stringliteral">&apos;&lt;title&gt;&apos;</emphasis>,
00219 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;help=<emphasis role="stringliteral">&quot;&quot;&quot;Specify&#32;the&#32;title&#32;used&#32;on&#32;generated&#32;HTML&#32;pages.</emphasis>
00220 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;If&#32;not&#32;specified,&#32;a&#32;default&#32;title&#32;will&#32;be&#32;used.&quot;&quot;&quot;</emphasis>)
00221 &#32;&#32;&#32;&#32;format_group&#32;=&#32;output.add_mutually_exclusive_group()
00222 &#32;&#32;&#32;&#32;format_group.add_argument(
00223 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&apos;--plist&apos;</emphasis>,
00224 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&apos;-plist&apos;</emphasis>,
00225 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;dest=<emphasis role="stringliteral">&apos;output_format&apos;</emphasis>,
00226 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;const=<emphasis role="stringliteral">&apos;plist&apos;</emphasis>,
00227 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;default=<emphasis role="stringliteral">&apos;html&apos;</emphasis>,
00228 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;action=<emphasis role="stringliteral">&apos;store_const&apos;</emphasis>,
00229 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;help=<emphasis role="stringliteral">&quot;&quot;&quot;Cause&#32;the&#32;results&#32;as&#32;a&#32;set&#32;of&#32;.plist&#32;files.&quot;&quot;&quot;</emphasis>)
00230 &#32;&#32;&#32;&#32;format_group.add_argument(
00231 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&apos;--plist-html&apos;</emphasis>,
00232 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&apos;-plist-html&apos;</emphasis>,
00233 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;dest=<emphasis role="stringliteral">&apos;output_format&apos;</emphasis>,
00234 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;const=<emphasis role="stringliteral">&apos;plist-html&apos;</emphasis>,
00235 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;default=<emphasis role="stringliteral">&apos;html&apos;</emphasis>,
00236 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;action=<emphasis role="stringliteral">&apos;store_const&apos;</emphasis>,
00237 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;help=<emphasis role="stringliteral">&quot;&quot;&quot;Cause&#32;the&#32;results&#32;as&#32;a&#32;set&#32;of&#32;.html&#32;and&#32;.plist&#32;files.&quot;&quot;&quot;</emphasis>)
00238 &#32;&#32;&#32;&#32;format_group.add_argument(
00239 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&apos;--plist-multi-file&apos;</emphasis>,
00240 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&apos;-plist-multi-file&apos;</emphasis>,
00241 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;dest=<emphasis role="stringliteral">&apos;output_format&apos;</emphasis>,
00242 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;const=<emphasis role="stringliteral">&apos;plist-multi-file&apos;</emphasis>,
00243 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;default=<emphasis role="stringliteral">&apos;html&apos;</emphasis>,
00244 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;action=<emphasis role="stringliteral">&apos;store_const&apos;</emphasis>,
00245 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;help=<emphasis role="stringliteral">&quot;&quot;&quot;Cause&#32;the&#32;results&#32;as&#32;a&#32;set&#32;of&#32;.plist&#32;files&#32;with&#32;extra</emphasis>
00246 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;information&#32;on&#32;related&#32;files.&quot;&quot;&quot;</emphasis>)
00247 &#32;&#32;&#32;&#32;format_group.add_argument(
00248 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&apos;--sarif&apos;</emphasis>,
00249 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&apos;-sarif&apos;</emphasis>,
00250 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;dest=<emphasis role="stringliteral">&apos;output_format&apos;</emphasis>,
00251 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;const=<emphasis role="stringliteral">&apos;sarif&apos;</emphasis>,
00252 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;default=<emphasis role="stringliteral">&apos;html&apos;</emphasis>,
00253 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;action=<emphasis role="stringliteral">&apos;store_const&apos;</emphasis>,
00254 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;help=<emphasis role="stringliteral">&quot;&quot;&quot;Cause&#32;the&#32;results&#32;as&#32;a&#32;result.sarif&#32;file.&quot;&quot;&quot;</emphasis>)
00255 &#32;&#32;&#32;&#32;format_group.add_argument(
00256 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&apos;--sarif-html&apos;</emphasis>,
00257 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&apos;-sarif-html&apos;</emphasis>,
00258 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;dest=<emphasis role="stringliteral">&apos;output_format&apos;</emphasis>,
00259 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;const=<emphasis role="stringliteral">&apos;sarif-html&apos;</emphasis>,
00260 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;default=<emphasis role="stringliteral">&apos;html&apos;</emphasis>,
00261 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;action=<emphasis role="stringliteral">&apos;store_const&apos;</emphasis>,
00262 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;help=<emphasis role="stringliteral">&quot;&quot;&quot;Cause&#32;the&#32;results&#32;as&#32;a&#32;result.sarif&#32;file&#32;and&#32;.html&#32;files.&quot;&quot;&quot;</emphasis>)
00263 
00264 &#32;&#32;&#32;&#32;advanced&#32;=&#32;parser.add_argument_group(<emphasis role="stringliteral">&apos;advanced&#32;options&apos;</emphasis>)
00265 &#32;&#32;&#32;&#32;advanced.add_argument(
00266 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&apos;--use-analyzer&apos;</emphasis>,
00267 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;metavar=<emphasis role="stringliteral">&apos;&lt;path&gt;&apos;</emphasis>,
00268 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;dest=<emphasis role="stringliteral">&apos;clang&apos;</emphasis>,
00269 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;default=<emphasis role="stringliteral">&apos;clang&apos;</emphasis>,
00270 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;help=<emphasis role="stringliteral">&quot;&quot;&quot;&apos;%(prog)s&apos;&#32;uses&#32;the&#32;&apos;clang&apos;&#32;executable&#32;relative&#32;to&#32;itself&#32;for</emphasis>
00271 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;static&#32;analysis.&#32;One&#32;can&#32;override&#32;this&#32;behavior&#32;with&#32;this&#32;option&#32;by</emphasis>
00272 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;using&#32;the&#32;&apos;clang&apos;&#32;packaged&#32;with&#32;Xcode&#32;(on&#32;OS&#32;X)&#32;or&#32;from&#32;the&#32;PATH.&quot;&quot;&quot;</emphasis>)
00273 &#32;&#32;&#32;&#32;advanced.add_argument(
00274 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&apos;--no-failure-reports&apos;</emphasis>,
00275 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&apos;-no-failure-reports&apos;</emphasis>,
00276 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;dest=<emphasis role="stringliteral">&apos;output_failures&apos;</emphasis>,
00277 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;action=<emphasis role="stringliteral">&apos;store_false&apos;</emphasis>,
00278 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;help=<emphasis role="stringliteral">&quot;&quot;&quot;Do&#32;not&#32;create&#32;a&#32;&apos;failures&apos;&#32;subdirectory&#32;that&#32;includes&#32;analyzer</emphasis>
00279 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;crash&#32;reports&#32;and&#32;preprocessed&#32;source&#32;files.&quot;&quot;&quot;</emphasis>)
00280 &#32;&#32;&#32;&#32;parser.add_argument(
00281 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&apos;--analyze-headers&apos;</emphasis>,
00282 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;action=<emphasis role="stringliteral">&apos;store_true&apos;</emphasis>,
00283 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;help=<emphasis role="stringliteral">&quot;&quot;&quot;Also&#32;analyze&#32;functions&#32;in&#32;#included&#32;files.&#32;By&#32;default,&#32;such</emphasis>
00284 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;functions&#32;are&#32;skipped&#32;unless&#32;they&#32;are&#32;called&#32;by&#32;functions&#32;within&#32;the</emphasis>
00285 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;main&#32;source&#32;file.&quot;&quot;&quot;</emphasis>)
00286 &#32;&#32;&#32;&#32;advanced.add_argument(
00287 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&apos;--stats&apos;</emphasis>,
00288 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&apos;-stats&apos;</emphasis>,
00289 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;action=<emphasis role="stringliteral">&apos;store_true&apos;</emphasis>,
00290 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;help=<emphasis role="stringliteral">&quot;&quot;&quot;Generates&#32;visitation&#32;statistics&#32;for&#32;the&#32;project.&quot;&quot;&quot;</emphasis>)
00291 &#32;&#32;&#32;&#32;advanced.add_argument(
00292 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&apos;--internal-stats&apos;</emphasis>,
00293 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;action=<emphasis role="stringliteral">&apos;store_true&apos;</emphasis>,
00294 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;help=<emphasis role="stringliteral">&quot;&quot;&quot;Generate&#32;internal&#32;analyzer&#32;statistics.&quot;&quot;&quot;</emphasis>)
00295 &#32;&#32;&#32;&#32;advanced.add_argument(
00296 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&apos;--maxloop&apos;</emphasis>,
00297 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&apos;-maxloop&apos;</emphasis>,
00298 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;metavar=<emphasis role="stringliteral">&apos;&lt;loop&#32;count&gt;&apos;</emphasis>,
00299 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;type=int,
00300 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;help=<emphasis role="stringliteral">&quot;&quot;&quot;Specify&#32;the&#32;number&#32;of&#32;times&#32;a&#32;block&#32;can&#32;be&#32;visited&#32;before</emphasis>
00301 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;giving&#32;up.&#32;Increase&#32;for&#32;more&#32;comprehensive&#32;coverage&#32;at&#32;a&#32;cost&#32;of</emphasis>
00302 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;speed.&quot;&quot;&quot;</emphasis>)
00303 &#32;&#32;&#32;&#32;advanced.add_argument(
00304 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&apos;--store&apos;</emphasis>,
00305 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&apos;-store&apos;</emphasis>,
00306 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;metavar=<emphasis role="stringliteral">&apos;&lt;model&gt;&apos;</emphasis>,
00307 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;dest=<emphasis role="stringliteral">&apos;store_model&apos;</emphasis>,
00308 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;choices=[<emphasis role="stringliteral">&apos;region&apos;</emphasis>,&#32;<emphasis role="stringliteral">&apos;basic&apos;</emphasis>],
00309 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;help=<emphasis role="stringliteral">&quot;&quot;&quot;Specify&#32;the&#32;store&#32;model&#32;used&#32;by&#32;the&#32;analyzer.&#32;&apos;region&apos;</emphasis>
00310 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;specifies&#32;a&#32;field-&#32;sensitive&#32;store&#32;model.&#32;&apos;basic&apos;&#32;which&#32;is&#32;far&#32;less</emphasis>
00311 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;precise&#32;but&#32;can&#32;more&#32;quickly&#32;analyze&#32;code.&#32;&apos;basic&apos;&#32;was&#32;the&#32;default</emphasis>
00312 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;store&#32;model&#32;for&#32;checker-0.221&#32;and&#32;earlier.&quot;&quot;&quot;</emphasis>)
00313 &#32;&#32;&#32;&#32;advanced.add_argument(
00314 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&apos;--constraints&apos;</emphasis>,
00315 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&apos;-constraints&apos;</emphasis>,
00316 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;metavar=<emphasis role="stringliteral">&apos;&lt;model&gt;&apos;</emphasis>,
00317 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;dest=<emphasis role="stringliteral">&apos;constraints_model&apos;</emphasis>,
00318 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;choices=[<emphasis role="stringliteral">&apos;range&apos;</emphasis>,&#32;<emphasis role="stringliteral">&apos;basic&apos;</emphasis>],
00319 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;help=<emphasis role="stringliteral">&quot;&quot;&quot;Specify&#32;the&#32;constraint&#32;engine&#32;used&#32;by&#32;the&#32;analyzer.&#32;Specifying</emphasis>
00320 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&apos;basic&apos;&#32;uses&#32;a&#32;simpler,&#32;less&#32;powerful&#32;constraint&#32;model&#32;used&#32;by</emphasis>
00321 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;checker-0.160&#32;and&#32;earlier.&quot;&quot;&quot;</emphasis>)
00322 &#32;&#32;&#32;&#32;advanced.add_argument(
00323 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&apos;--analyzer-config&apos;</emphasis>,
00324 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&apos;-analyzer-config&apos;</emphasis>,
00325 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;metavar=<emphasis role="stringliteral">&apos;&lt;options&gt;&apos;</emphasis>,
00326 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;help=<emphasis role="stringliteral">&quot;&quot;&quot;Provide&#32;options&#32;to&#32;pass&#32;through&#32;to&#32;the&#32;analyzer&apos;s</emphasis>
00327 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;-analyzer-config&#32;flag.&#32;Several&#32;options&#32;are&#32;separated&#32;with&#32;comma:</emphasis>
00328 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&apos;key1=val1,key2=val2&apos;</emphasis>
00329 <emphasis role="stringliteral"></emphasis>
00330 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Available&#32;options:</emphasis>
00331 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;stable-report-filename=true&#32;or&#32;false&#32;(default)</emphasis>
00332 <emphasis role="stringliteral"></emphasis>
00333 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Switch&#32;the&#32;page&#32;naming&#32;to:</emphasis>
00334 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;report-&lt;filename&gt;-&lt;function/method&#32;name&gt;-&lt;id&gt;.html</emphasis>
00335 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;instead&#32;of&#32;report-XXXXXX.html&quot;&quot;&quot;</emphasis>)
00336 &#32;&#32;&#32;&#32;advanced.add_argument(
00337 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&apos;--force-analyze-debug-code&apos;</emphasis>,
00338 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;dest=<emphasis role="stringliteral">&apos;force_debug&apos;</emphasis>,
00339 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;action=<emphasis role="stringliteral">&apos;store_true&apos;</emphasis>,
00340 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;help=<emphasis role="stringliteral">&quot;&quot;&quot;Tells&#32;analyzer&#32;to&#32;enable&#32;assertions&#32;in&#32;code&#32;even&#32;if&#32;they&#32;were</emphasis>
00341 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;disabled&#32;during&#32;compilation,&#32;enabling&#32;more&#32;precise&#32;results.&quot;&quot;&quot;</emphasis>)
00342 
00343 &#32;&#32;&#32;&#32;plugins&#32;=&#32;parser.add_argument_group(<emphasis role="stringliteral">&apos;checker&#32;options&apos;</emphasis>)
00344 &#32;&#32;&#32;&#32;plugins.add_argument(
00345 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&apos;--load-plugin&apos;</emphasis>,
00346 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&apos;-load-plugin&apos;</emphasis>,
00347 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;metavar=<emphasis role="stringliteral">&apos;&lt;plugin&#32;library&gt;&apos;</emphasis>,
00348 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;dest=<emphasis role="stringliteral">&apos;plugins&apos;</emphasis>,
00349 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;action=<emphasis role="stringliteral">&apos;append&apos;</emphasis>,
00350 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;help=<emphasis role="stringliteral">&quot;&quot;&quot;Loading&#32;external&#32;checkers&#32;using&#32;the&#32;clang&#32;plugin&#32;interface.&quot;&quot;&quot;</emphasis>)
00351 &#32;&#32;&#32;&#32;plugins.add_argument(
00352 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&apos;--enable-checker&apos;</emphasis>,
00353 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&apos;-enable-checker&apos;</emphasis>,
00354 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;metavar=<emphasis role="stringliteral">&apos;&lt;checker&#32;name&gt;&apos;</emphasis>,
00355 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;action=AppendCommaSeparated,
00356 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;help=<emphasis role="stringliteral">&quot;&quot;&quot;Enable&#32;specific&#32;checker.&quot;&quot;&quot;</emphasis>)
00357 &#32;&#32;&#32;&#32;plugins.add_argument(
00358 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&apos;--disable-checker&apos;</emphasis>,
00359 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&apos;-disable-checker&apos;</emphasis>,
00360 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;metavar=<emphasis role="stringliteral">&apos;&lt;checker&#32;name&gt;&apos;</emphasis>,
00361 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;action=AppendCommaSeparated,
00362 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;help=<emphasis role="stringliteral">&quot;&quot;&quot;Disable&#32;specific&#32;checker.&quot;&quot;&quot;</emphasis>)
00363 &#32;&#32;&#32;&#32;plugins.add_argument(
00364 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&apos;--help-checkers&apos;</emphasis>,
00365 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;action=<emphasis role="stringliteral">&apos;store_true&apos;</emphasis>,
00366 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;help=<emphasis role="stringliteral">&quot;&quot;&quot;A&#32;default&#32;group&#32;of&#32;checkers&#32;is&#32;run&#32;unless&#32;explicitly&#32;disabled.</emphasis>
00367 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Exactly&#32;which&#32;checkers&#32;constitute&#32;the&#32;default&#32;group&#32;is&#32;a&#32;function&#32;of</emphasis>
00368 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;the&#32;operating&#32;system&#32;in&#32;use.&#32;These&#32;can&#32;be&#32;printed&#32;with&#32;this&#32;flag.&quot;&quot;&quot;</emphasis>)
00369 &#32;&#32;&#32;&#32;plugins.add_argument(
00370 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&apos;--help-checkers-verbose&apos;</emphasis>,
00371 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;action=<emphasis role="stringliteral">&apos;store_true&apos;</emphasis>,
00372 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;help=<emphasis role="stringliteral">&quot;&quot;&quot;Print&#32;all&#32;available&#32;checkers&#32;and&#32;mark&#32;the&#32;enabled&#32;ones.&quot;&quot;&quot;</emphasis>)
00373 
00374 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;from_build_command:
00375 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;parser.add_argument(
00376 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;dest=<emphasis role="stringliteral">&apos;build&apos;</emphasis>,&#32;nargs=argparse.REMAINDER,&#32;help=<emphasis role="stringliteral">&quot;&quot;&quot;Command&#32;to&#32;run.&quot;&quot;&quot;</emphasis>)
00377 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>:
00378 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ctu&#32;=&#32;parser.add_argument_group(<emphasis role="stringliteral">&apos;cross&#32;translation&#32;unit&#32;analysis&apos;</emphasis>)
00379 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ctu_mutex_group&#32;=&#32;ctu.add_mutually_exclusive_group()
00380 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ctu_mutex_group.add_argument(
00381 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&apos;--ctu&apos;</emphasis>,
00382 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;action=<emphasis role="stringliteral">&apos;store_const&apos;</emphasis>,
00383 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;const=<link linkend="_namespacelibscanbuild_1ad6862a74d972673d22f1478908e7544e">CtuConfig</link>(collect=<emphasis role="keyword">True</emphasis>,&#32;analyze=<emphasis role="keyword">True</emphasis>,
00384 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;dir=<emphasis role="stringliteral">&apos;&apos;</emphasis>,&#32;extdef_map_cmd=<emphasis role="stringliteral">&apos;&apos;</emphasis>),
00385 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;dest=<emphasis role="stringliteral">&apos;ctu_phases&apos;</emphasis>,
00386 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;help=<emphasis role="stringliteral">&quot;&quot;&quot;Perform&#32;cross&#32;translation&#32;unit&#32;(ctu)&#32;analysis&#32;(both&#32;collect</emphasis>
00387 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;and&#32;analyze&#32;phases)&#32;using&#32;default&#32;&lt;ctu-dir&gt;&#32;for&#32;temporary&#32;output.</emphasis>
00388 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;At&#32;the&#32;end&#32;of&#32;the&#32;analysis,&#32;the&#32;temporary&#32;directory&#32;is&#32;removed.&quot;&quot;&quot;</emphasis>)
00389 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ctu.add_argument(
00390 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&apos;--ctu-dir&apos;</emphasis>,
00391 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;metavar=<emphasis role="stringliteral">&apos;&lt;ctu-dir&gt;&apos;</emphasis>,
00392 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;dest=<emphasis role="stringliteral">&apos;ctu_dir&apos;</emphasis>,
00393 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;default=<emphasis role="stringliteral">&apos;ctu-dir&apos;</emphasis>,
00394 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;help=<emphasis role="stringliteral">&quot;&quot;&quot;Defines&#32;the&#32;temporary&#32;directory&#32;used&#32;between&#32;ctu</emphasis>
00395 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;phases.&quot;&quot;&quot;</emphasis>)
00396 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ctu_mutex_group.add_argument(
00397 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&apos;--ctu-collect-only&apos;</emphasis>,
00398 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;action=<emphasis role="stringliteral">&apos;store_const&apos;</emphasis>,
00399 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;const=<link linkend="_namespacelibscanbuild_1ad6862a74d972673d22f1478908e7544e">CtuConfig</link>(collect=<emphasis role="keyword">True</emphasis>,&#32;analyze=<emphasis role="keyword">False</emphasis>,
00400 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;dir=<emphasis role="stringliteral">&apos;&apos;</emphasis>,&#32;extdef_map_cmd=<emphasis role="stringliteral">&apos;&apos;</emphasis>),
00401 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;dest=<emphasis role="stringliteral">&apos;ctu_phases&apos;</emphasis>,
00402 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;help=<emphasis role="stringliteral">&quot;&quot;&quot;Perform&#32;only&#32;the&#32;collect&#32;phase&#32;of&#32;ctu.</emphasis>
00403 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Keep&#32;&lt;ctu-dir&gt;&#32;for&#32;further&#32;use.&quot;&quot;&quot;</emphasis>)
00404 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ctu_mutex_group.add_argument(
00405 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&apos;--ctu-analyze-only&apos;</emphasis>,
00406 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;action=<emphasis role="stringliteral">&apos;store_const&apos;</emphasis>,
00407 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;const=<link linkend="_namespacelibscanbuild_1ad6862a74d972673d22f1478908e7544e">CtuConfig</link>(collect=<emphasis role="keyword">False</emphasis>,&#32;analyze=<emphasis role="keyword">True</emphasis>,
00408 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;dir=<emphasis role="stringliteral">&apos;&apos;</emphasis>,&#32;extdef_map_cmd=<emphasis role="stringliteral">&apos;&apos;</emphasis>),
00409 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;dest=<emphasis role="stringliteral">&apos;ctu_phases&apos;</emphasis>,
00410 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;help=<emphasis role="stringliteral">&quot;&quot;&quot;Perform&#32;only&#32;the&#32;analyze&#32;phase&#32;of&#32;ctu.&#32;&lt;ctu-dir&gt;&#32;should&#32;be</emphasis>
00411 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;present&#32;and&#32;will&#32;not&#32;be&#32;removed&#32;after&#32;analysis.&quot;&quot;&quot;</emphasis>)
00412 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ctu.add_argument(
00413 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&apos;--use-extdef-map-cmd&apos;</emphasis>,
00414 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;metavar=<emphasis role="stringliteral">&apos;&lt;path&gt;&apos;</emphasis>,
00415 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;dest=<emphasis role="stringliteral">&apos;extdef_map_cmd&apos;</emphasis>,
00416 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;default=<emphasis role="stringliteral">&apos;clang-extdef-mapping&apos;</emphasis>,
00417 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;help=<emphasis role="stringliteral">&quot;&quot;&quot;&apos;%(prog)s&apos;&#32;uses&#32;the&#32;&apos;clang-extdef-mapping&apos;&#32;executable</emphasis>
00418 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;relative&#32;to&#32;itself&#32;for&#32;generating&#32;external&#32;definition&#32;maps&#32;for</emphasis>
00419 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;static&#32;analysis.&#32;One&#32;can&#32;override&#32;this&#32;behavior&#32;with&#32;this&#32;option</emphasis>
00420 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;by&#32;using&#32;the&#32;&apos;clang-extdef-mapping&apos;&#32;packaged&#32;with&#32;Xcode&#32;(on&#32;OS&#32;X)</emphasis>
00421 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;or&#32;from&#32;the&#32;PATH.&quot;&quot;&quot;</emphasis>)
00422 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;parser
00423 
00424 
</programlisting><para>
References <link linkend="_arguments_8py_source_1l00425">libscanbuild.arguments.create_default_parser()</link>, <link linkend="_lib_2libscanbuild_2____init_____8py_source_1l00021">libscanbuild.CtuConfig</link>, <link linkend="_arguments_8py_source_1l00441">libscanbuild.arguments.parser_add_cdb()</link>, <link linkend="_arguments_8py_source_1l00457">libscanbuild.arguments.parser_add_compilers()</link>, and <link linkend="_arguments_8py_source_1l00449">libscanbuild.arguments.parser_add_prefer_wrapper()</link>.</para>
<para>
Referenced by <link linkend="_arguments_8py_source_1l00045">libscanbuild.arguments.parse_args_for_analyze_build()</link>, and <link linkend="_arguments_8py_source_1l00061">libscanbuild.arguments.parse_args_for_scan_build()</link>.</para>
    </section><anchor xml:id="_namespacelibscanbuild_1_1arguments_1a1b058fa061b46587b7e6d1ef9187302c"/>    <section>
    <title>create_default_parser()</title>
<indexterm><primary>create_default_parser</primary><secondary>libscanbuild.arguments</secondary></indexterm>
<indexterm><primary>libscanbuild.arguments</primary><secondary>create_default_parser</secondary></indexterm>
<para><computeroutput>def libscanbuild.arguments.create_default_parser ( )</computeroutput></para>
<para><literallayout><computeroutput> Creates command line parser for all build wrapper commands. </computeroutput></literallayout> </para>
<para>
Definition at line <link linkend="_arguments_8py_source_1l00425">425</link> of file <link linkend="_arguments_8py_source">arguments.py</link>.</para>
<programlisting>00425 <emphasis role="keyword">def&#32;</emphasis><link linkend="_namespacelibscanbuild_1_1arguments_1a1b058fa061b46587b7e6d1ef9187302c">create_default_parser</link>():
00426 &#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;&quot;&quot;&#32;Creates&#32;command&#32;line&#32;parser&#32;for&#32;all&#32;build&#32;wrapper&#32;commands.&#32;&quot;&quot;&quot;</emphasis>
00427 
00428 &#32;&#32;&#32;&#32;parser&#32;=&#32;argparse.ArgumentParser(
00429 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;formatter_class=argparse.ArgumentDefaultsHelpFormatter)
00430 
00431 &#32;&#32;&#32;&#32;parser.add_argument(
00432 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&apos;--verbose&apos;</emphasis>,
00433 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&apos;-v&apos;</emphasis>,
00434 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;action=<emphasis role="stringliteral">&apos;count&apos;</emphasis>,
00435 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;default=0,
00436 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;help=<emphasis role="stringliteral">&quot;&quot;&quot;Enable&#32;verbose&#32;output&#32;from&#32;&apos;%(prog)s&apos;.&#32;A&#32;second,&#32;third&#32;and</emphasis>
00437 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;fourth&#32;flags&#32;increases&#32;verbosity.&quot;&quot;&quot;</emphasis>)
00438 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;parser
00439 
00440 
</programlisting><para>
Referenced by <link linkend="_arguments_8py_source_1l00167">libscanbuild.arguments.create_analyze_parser()</link>, and <link linkend="_arguments_8py_source_1l00143">libscanbuild.arguments.create_intercept_parser()</link>.</para>
    </section><anchor xml:id="_namespacelibscanbuild_1_1arguments_1a40cf31e515d16f88af0c37161509fd8f"/>    <section>
    <title>create_intercept_parser()</title>
<indexterm><primary>create_intercept_parser</primary><secondary>libscanbuild.arguments</secondary></indexterm>
<indexterm><primary>libscanbuild.arguments</primary><secondary>create_intercept_parser</secondary></indexterm>
<para><computeroutput>def libscanbuild.arguments.create_intercept_parser ( )</computeroutput></para>
<para><literallayout><computeroutput> Creates a parser for command-line arguments to &apos;intercept&apos;. </computeroutput></literallayout> </para>
<para>
Definition at line <link linkend="_arguments_8py_source_1l00143">143</link> of file <link linkend="_arguments_8py_source">arguments.py</link>.</para>
<programlisting>00143 <emphasis role="keyword">def&#32;</emphasis><link linkend="_namespacelibscanbuild_1_1arguments_1a40cf31e515d16f88af0c37161509fd8f">create_intercept_parser</link>():
00144 &#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;&quot;&quot;&#32;Creates&#32;a&#32;parser&#32;for&#32;command-line&#32;arguments&#32;to&#32;&apos;intercept&apos;.&#32;&quot;&quot;&quot;</emphasis>
00145 
00146 &#32;&#32;&#32;&#32;parser&#32;=&#32;<link linkend="_namespacelibscanbuild_1_1arguments_1a1b058fa061b46587b7e6d1ef9187302c">create_default_parser</link>()
00147 &#32;&#32;&#32;&#32;<link linkend="_namespacelibscanbuild_1_1arguments_1ad1ecaacea1347b24d24240d5994a3ee4">parser_add_cdb</link>(parser)
00148 
00149 &#32;&#32;&#32;&#32;<link linkend="_namespacelibscanbuild_1_1arguments_1ad83ca665cce99074210a7cb16d6f7a43">parser_add_prefer_wrapper</link>(parser)
00150 &#32;&#32;&#32;&#32;<link linkend="_namespacelibscanbuild_1_1arguments_1adde0db9e5c554bf1e4824aa7ce1677b1">parser_add_compilers</link>(parser)
00151 
00152 &#32;&#32;&#32;&#32;advanced&#32;=&#32;parser.add_argument_group(<emphasis role="stringliteral">&apos;advanced&#32;options&apos;</emphasis>)
00153 &#32;&#32;&#32;&#32;group&#32;=&#32;advanced.add_mutually_exclusive_group()
00154 &#32;&#32;&#32;&#32;group.add_argument(
00155 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&apos;--append&apos;</emphasis>,
00156 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;action=<emphasis role="stringliteral">&apos;store_true&apos;</emphasis>,
00157 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;help=<emphasis role="stringliteral">&quot;&quot;&quot;Extend&#32;existing&#32;compilation&#32;database&#32;with&#32;new&#32;entries.</emphasis>
00158 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Duplicate&#32;entries&#32;are&#32;detected&#32;and&#32;not&#32;present&#32;in&#32;the&#32;final&#32;output.</emphasis>
00159 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;The&#32;output&#32;is&#32;not&#32;continuously&#32;updated,&#32;it&apos;s&#32;done&#32;when&#32;the&#32;build</emphasis>
00160 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;command&#32;finished.&#32;&quot;&quot;&quot;</emphasis>)
00161 
00162 &#32;&#32;&#32;&#32;parser.add_argument(
00163 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;dest=<emphasis role="stringliteral">&apos;build&apos;</emphasis>,&#32;nargs=argparse.REMAINDER,&#32;help=<emphasis role="stringliteral">&quot;&quot;&quot;Command&#32;to&#32;run.&quot;&quot;&quot;</emphasis>)
00164 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;parser
00165 
00166 
</programlisting><para>
References <link linkend="_arguments_8py_source_1l00425">libscanbuild.arguments.create_default_parser()</link>, <link linkend="_arguments_8py_source_1l00441">libscanbuild.arguments.parser_add_cdb()</link>, <link linkend="_arguments_8py_source_1l00457">libscanbuild.arguments.parser_add_compilers()</link>, and <link linkend="_arguments_8py_source_1l00449">libscanbuild.arguments.parser_add_prefer_wrapper()</link>.</para>
<para>
Referenced by <link linkend="_arguments_8py_source_1l00028">libscanbuild.arguments.parse_args_for_intercept_build()</link>.</para>
    </section><anchor xml:id="_namespacelibscanbuild_1_1arguments_1adb8de41e20ef05d2ab0e92e538644af3"/>    <section>
    <title>normalize_args_for_analyze()</title>
<indexterm><primary>normalize_args_for_analyze</primary><secondary>libscanbuild.arguments</secondary></indexterm>
<indexterm><primary>libscanbuild.arguments</primary><secondary>normalize_args_for_analyze</secondary></indexterm>
<para><computeroutput>def libscanbuild.arguments.normalize_args_for_analyze ( args,  from_build_command)</computeroutput></para>
<para><literallayout><computeroutput> Normalize parsed arguments for analyze-build and scan-build.

:param args: Parsed argument object. (Will be mutated.)
:param from_build_command: Boolean value tells is the command suppose
to run the analyzer against a build command or a compilation db. </computeroutput></literallayout> </para>
<para>
Definition at line <link linkend="_arguments_8py_source_1l00077">77</link> of file <link linkend="_arguments_8py_source">arguments.py</link>.</para>
<programlisting>00077 <emphasis role="keyword">def&#32;</emphasis><link linkend="_namespacelibscanbuild_1_1arguments_1adb8de41e20ef05d2ab0e92e538644af3">normalize_args_for_analyze</link>(args,&#32;from_build_command):
00078 &#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;&quot;&quot;&#32;Normalize&#32;parsed&#32;arguments&#32;for&#32;analyze-build&#32;and&#32;scan-build.</emphasis>
00079 <emphasis role="stringliteral"></emphasis>
00080 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;:param&#32;args:&#32;Parsed&#32;argument&#32;object.&#32;(Will&#32;be&#32;mutated.)</emphasis>
00081 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;:param&#32;from_build_command:&#32;Boolean&#32;value&#32;tells&#32;is&#32;the&#32;command&#32;suppose</emphasis>
00082 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;to&#32;run&#32;the&#32;analyzer&#32;against&#32;a&#32;build&#32;command&#32;or&#32;a&#32;compilation&#32;db.&#32;&quot;&quot;&quot;</emphasis>
00083 
00084 &#32;&#32;&#32;&#32;<emphasis role="comment">#&#32;make&#32;plugins&#32;always&#32;a&#32;list.&#32;(it&#32;might&#32;be&#32;None&#32;when&#32;not&#32;specified.)</emphasis>
00085 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;args.plugins&#32;<emphasis role="keywordflow">is</emphasis>&#32;<emphasis role="keywordtype">None</emphasis>:
00086 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;args.plugins&#32;=&#32;[]
00087 
00088 &#32;&#32;&#32;&#32;<emphasis role="comment">#&#32;make&#32;exclude&#32;directory&#32;list&#32;unique&#32;and&#32;absolute.</emphasis>
00089 &#32;&#32;&#32;&#32;uniq_excludes&#32;=&#32;set(os.path.abspath(entry)&#32;<emphasis role="keywordflow">for</emphasis>&#32;entry&#32;<emphasis role="keywordflow">in</emphasis>&#32;args.excludes)
00090 &#32;&#32;&#32;&#32;args.excludes&#32;=&#32;list(uniq_excludes)
00091 
00092 &#32;&#32;&#32;&#32;<emphasis role="comment">#&#32;because&#32;shared&#32;codes&#32;for&#32;all&#32;tools,&#32;some&#32;common&#32;used&#32;methods&#32;are</emphasis>
00093 &#32;&#32;&#32;&#32;<emphasis role="comment">#&#32;expecting&#32;some&#32;argument&#32;to&#32;be&#32;present.&#32;so,&#32;instead&#32;of&#32;query&#32;the&#32;args</emphasis>
00094 &#32;&#32;&#32;&#32;<emphasis role="comment">#&#32;object&#32;about&#32;the&#32;presence&#32;of&#32;the&#32;flag,&#32;we&#32;fake&#32;it&#32;here.&#32;to&#32;make&#32;those</emphasis>
00095 &#32;&#32;&#32;&#32;<emphasis role="comment">#&#32;methods&#32;more&#32;readable.&#32;(it&apos;s&#32;an&#32;arguable&#32;choice,&#32;took&#32;it&#32;only&#32;for&#32;those</emphasis>
00096 &#32;&#32;&#32;&#32;<emphasis role="comment">#&#32;which&#32;have&#32;good&#32;default&#32;value.)</emphasis>
00097 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;from_build_command:
00098 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">#&#32;add&#32;cdb&#32;parameter&#32;invisibly&#32;to&#32;make&#32;report&#32;module&#32;working.</emphasis>
00099 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;args.cdb&#32;=&#32;<emphasis role="stringliteral">&apos;compile_commands.json&apos;</emphasis>
00100 
00101 &#32;&#32;&#32;&#32;<emphasis role="comment">#&#32;Make&#32;ctu_dir&#32;an&#32;abspath&#32;as&#32;it&#32;is&#32;needed&#32;inside&#32;clang</emphasis>
00102 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keywordflow">not</emphasis>&#32;from_build_command&#32;<emphasis role="keywordflow">and</emphasis>&#32;hasattr(args,&#32;<emphasis role="stringliteral">&apos;ctu_phases&apos;</emphasis>)&#32;\
00103 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">and</emphasis>&#32;hasattr(args.ctu_phases,&#32;<emphasis role="stringliteral">&apos;dir&apos;</emphasis>):
00104 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;args.ctu_dir&#32;=&#32;os.path.abspath(args.ctu_dir)
00105 
00106 
</programlisting><para>
Referenced by <link linkend="_arguments_8py_source_1l00045">libscanbuild.arguments.parse_args_for_analyze_build()</link>, and <link linkend="_arguments_8py_source_1l00061">libscanbuild.arguments.parse_args_for_scan_build()</link>.</para>
    </section><anchor xml:id="_namespacelibscanbuild_1_1arguments_1aa689de807ebb9310d2094c50a2d4f781"/>    <section>
    <title>parse_args_for_analyze_build()</title>
<indexterm><primary>parse_args_for_analyze_build</primary><secondary>libscanbuild.arguments</secondary></indexterm>
<indexterm><primary>libscanbuild.arguments</primary><secondary>parse_args_for_analyze_build</secondary></indexterm>
<para><computeroutput>def libscanbuild.arguments.parse_args_for_analyze_build ( )</computeroutput></para>
<para><literallayout><computeroutput> Parse and validate command-line arguments for analyze-build. </computeroutput></literallayout> </para>
<para>
Definition at line <link linkend="_arguments_8py_source_1l00045">45</link> of file <link linkend="_arguments_8py_source">arguments.py</link>.</para>
<programlisting>00045 <emphasis role="keyword">def&#32;</emphasis><link linkend="_namespacelibscanbuild_1_1arguments_1aa689de807ebb9310d2094c50a2d4f781">parse_args_for_analyze_build</link>():
00046 &#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;&quot;&quot;&#32;Parse&#32;and&#32;validate&#32;command-line&#32;arguments&#32;for&#32;analyze-build.&#32;&quot;&quot;&quot;</emphasis>
00047 
00048 &#32;&#32;&#32;&#32;from_build_command&#32;=&#32;<emphasis role="keyword">False</emphasis>
00049 &#32;&#32;&#32;&#32;parser&#32;=&#32;<link linkend="_namespacelibscanbuild_1_1arguments_1ae72d2aba163898a6fd0bb9f353e92ef8">create_analyze_parser</link>(from_build_command)
00050 &#32;&#32;&#32;&#32;args&#32;=&#32;parser.parse_args()
00051 
00052 &#32;&#32;&#32;&#32;<link linkend="_namespacelibscanbuild_1aa87b6604e799f0262445ea47cf0648c4">reconfigure_logging</link>(args.verbose)
00053 &#32;&#32;&#32;&#32;logging.debug(<emphasis role="stringliteral">&apos;Raw&#32;arguments&#32;%s&apos;</emphasis>,&#32;sys.argv)
00054 
00055 &#32;&#32;&#32;&#32;<link linkend="_namespacelibscanbuild_1_1arguments_1adb8de41e20ef05d2ab0e92e538644af3">normalize_args_for_analyze</link>(args,&#32;from_build_command)
00056 &#32;&#32;&#32;&#32;<link linkend="_namespacelibscanbuild_1_1arguments_1a0d1ce44189511ff1be1a7b915e105fd5">validate_args_for_analyze</link>(parser,&#32;args,&#32;from_build_command)
00057 &#32;&#32;&#32;&#32;logging.debug(<emphasis role="stringliteral">&apos;Parsed&#32;arguments:&#32;%s&apos;</emphasis>,&#32;args)
00058 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;args
00059 
00060 
</programlisting><para>
References <link linkend="_arguments_8py_source_1l00167">libscanbuild.arguments.create_analyze_parser()</link>, <link linkend="_arguments_8py_source_1l00077">libscanbuild.arguments.normalize_args_for_analyze()</link>, <link linkend="_lib_2libscanbuild_2____init_____8py_source_1l00082">libscanbuild.reconfigure_logging()</link>, and <link linkend="_arguments_8py_source_1l00107">libscanbuild.arguments.validate_args_for_analyze()</link>.</para>
<para>
Referenced by <link linkend="_analyze_8py_source_1l00078">libscanbuild.analyze.analyze_build()</link>.</para>
    </section><anchor xml:id="_namespacelibscanbuild_1_1arguments_1aab7ce55617922a43040742e5e517f0e3"/>    <section>
    <title>parse_args_for_intercept_build()</title>
<indexterm><primary>parse_args_for_intercept_build</primary><secondary>libscanbuild.arguments</secondary></indexterm>
<indexterm><primary>libscanbuild.arguments</primary><secondary>parse_args_for_intercept_build</secondary></indexterm>
<para><computeroutput>def libscanbuild.arguments.parse_args_for_intercept_build ( )</computeroutput></para>
<para><literallayout><computeroutput> Parse and validate command-line arguments for intercept-build. </computeroutput></literallayout> </para>
<para>
Definition at line <link linkend="_arguments_8py_source_1l00028">28</link> of file <link linkend="_arguments_8py_source">arguments.py</link>.</para>
<programlisting>00028 <emphasis role="keyword">def&#32;</emphasis><link linkend="_namespacelibscanbuild_1_1arguments_1aab7ce55617922a43040742e5e517f0e3">parse_args_for_intercept_build</link>():
00029 &#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;&quot;&quot;&#32;Parse&#32;and&#32;validate&#32;command-line&#32;arguments&#32;for&#32;intercept-build.&#32;&quot;&quot;&quot;</emphasis>
00030 
00031 &#32;&#32;&#32;&#32;parser&#32;=&#32;<link linkend="_namespacelibscanbuild_1_1arguments_1a40cf31e515d16f88af0c37161509fd8f">create_intercept_parser</link>()
00032 &#32;&#32;&#32;&#32;args&#32;=&#32;parser.parse_args()
00033 
00034 &#32;&#32;&#32;&#32;<link linkend="_namespacelibscanbuild_1aa87b6604e799f0262445ea47cf0648c4">reconfigure_logging</link>(args.verbose)
00035 &#32;&#32;&#32;&#32;logging.debug(<emphasis role="stringliteral">&apos;Raw&#32;arguments&#32;%s&apos;</emphasis>,&#32;sys.argv)
00036 
00037 &#32;&#32;&#32;&#32;<emphasis role="comment">#&#32;short&#32;validation&#32;logic</emphasis>
00038 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keywordflow">not</emphasis>&#32;args.build:
00039 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;parser.error(message=<emphasis role="stringliteral">&apos;missing&#32;build&#32;command&apos;</emphasis>)
00040 
00041 &#32;&#32;&#32;&#32;logging.debug(<emphasis role="stringliteral">&apos;Parsed&#32;arguments:&#32;%s&apos;</emphasis>,&#32;args)
00042 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;args
00043 
00044 
</programlisting><para>
References <link linkend="_arguments_8py_source_1l00143">libscanbuild.arguments.create_intercept_parser()</link>, and <link linkend="_lib_2libscanbuild_2____init_____8py_source_1l00082">libscanbuild.reconfigure_logging()</link>.</para>
<para>
Referenced by <link linkend="_intercept_8py_source_1l00051">libscanbuild.intercept.intercept_build()</link>.</para>
    </section><anchor xml:id="_namespacelibscanbuild_1_1arguments_1af1e8772037b973224007e13c89c00631"/>    <section>
    <title>parse_args_for_scan_build()</title>
<indexterm><primary>parse_args_for_scan_build</primary><secondary>libscanbuild.arguments</secondary></indexterm>
<indexterm><primary>libscanbuild.arguments</primary><secondary>parse_args_for_scan_build</secondary></indexterm>
<para><computeroutput>def libscanbuild.arguments.parse_args_for_scan_build ( )</computeroutput></para>
<para><literallayout><computeroutput> Parse and validate command-line arguments for scan-build. </computeroutput></literallayout> </para>
<para>
Definition at line <link linkend="_arguments_8py_source_1l00061">61</link> of file <link linkend="_arguments_8py_source">arguments.py</link>.</para>
<programlisting>00061 <emphasis role="keyword">def&#32;</emphasis><link linkend="_namespacelibscanbuild_1_1arguments_1af1e8772037b973224007e13c89c00631">parse_args_for_scan_build</link>():
00062 &#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;&quot;&quot;&#32;Parse&#32;and&#32;validate&#32;command-line&#32;arguments&#32;for&#32;scan-build.&#32;&quot;&quot;&quot;</emphasis>
00063 
00064 &#32;&#32;&#32;&#32;from_build_command&#32;=&#32;<emphasis role="keyword">True</emphasis>
00065 &#32;&#32;&#32;&#32;parser&#32;=&#32;<link linkend="_namespacelibscanbuild_1_1arguments_1ae72d2aba163898a6fd0bb9f353e92ef8">create_analyze_parser</link>(from_build_command)
00066 &#32;&#32;&#32;&#32;args&#32;=&#32;parser.parse_args()
00067 
00068 &#32;&#32;&#32;&#32;<link linkend="_namespacelibscanbuild_1aa87b6604e799f0262445ea47cf0648c4">reconfigure_logging</link>(args.verbose)
00069 &#32;&#32;&#32;&#32;logging.debug(<emphasis role="stringliteral">&apos;Raw&#32;arguments&#32;%s&apos;</emphasis>,&#32;sys.argv)
00070 
00071 &#32;&#32;&#32;&#32;<link linkend="_namespacelibscanbuild_1_1arguments_1adb8de41e20ef05d2ab0e92e538644af3">normalize_args_for_analyze</link>(args,&#32;from_build_command)
00072 &#32;&#32;&#32;&#32;<link linkend="_namespacelibscanbuild_1_1arguments_1a0d1ce44189511ff1be1a7b915e105fd5">validate_args_for_analyze</link>(parser,&#32;args,&#32;from_build_command)
00073 &#32;&#32;&#32;&#32;logging.debug(<emphasis role="stringliteral">&apos;Parsed&#32;arguments:&#32;%s&apos;</emphasis>,&#32;args)
00074 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;args
00075 
00076 
</programlisting><para>
References <link linkend="_arguments_8py_source_1l00167">libscanbuild.arguments.create_analyze_parser()</link>, <link linkend="_arguments_8py_source_1l00077">libscanbuild.arguments.normalize_args_for_analyze()</link>, <link linkend="_lib_2libscanbuild_2____init_____8py_source_1l00082">libscanbuild.reconfigure_logging()</link>, and <link linkend="_arguments_8py_source_1l00107">libscanbuild.arguments.validate_args_for_analyze()</link>.</para>
<para>
Referenced by <link linkend="_analyze_8py_source_1l00050">libscanbuild.analyze.scan_build()</link>.</para>
    </section><anchor xml:id="_namespacelibscanbuild_1_1arguments_1ad1ecaacea1347b24d24240d5994a3ee4"/>    <section>
    <title>parser_add_cdb()</title>
<indexterm><primary>parser_add_cdb</primary><secondary>libscanbuild.arguments</secondary></indexterm>
<indexterm><primary>libscanbuild.arguments</primary><secondary>parser_add_cdb</secondary></indexterm>
<para><computeroutput>def libscanbuild.arguments.parser_add_cdb ( parser)</computeroutput></para><para>
Definition at line <link linkend="_arguments_8py_source_1l00441">441</link> of file <link linkend="_arguments_8py_source">arguments.py</link>.</para>
<programlisting>00441 <emphasis role="keyword">def&#32;</emphasis><link linkend="_namespacelibscanbuild_1_1arguments_1ad1ecaacea1347b24d24240d5994a3ee4">parser_add_cdb</link>(parser):
00442 &#32;&#32;&#32;&#32;parser.add_argument(
00443 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&apos;--cdb&apos;</emphasis>,
00444 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;metavar=<emphasis role="stringliteral">&apos;&lt;file&gt;&apos;</emphasis>,
00445 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;default=<emphasis role="stringliteral">&quot;compile_commands.json&quot;</emphasis>,
00446 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;help=<emphasis role="stringliteral">&quot;&quot;&quot;The&#32;JSON&#32;compilation&#32;database.&quot;&quot;&quot;</emphasis>)
00447 
00448 
</programlisting><para>
Referenced by <link linkend="_arguments_8py_source_1l00167">libscanbuild.arguments.create_analyze_parser()</link>, and <link linkend="_arguments_8py_source_1l00143">libscanbuild.arguments.create_intercept_parser()</link>.</para>
    </section><anchor xml:id="_namespacelibscanbuild_1_1arguments_1adde0db9e5c554bf1e4824aa7ce1677b1"/>    <section>
    <title>parser_add_compilers()</title>
<indexterm><primary>parser_add_compilers</primary><secondary>libscanbuild.arguments</secondary></indexterm>
<indexterm><primary>libscanbuild.arguments</primary><secondary>parser_add_compilers</secondary></indexterm>
<para><computeroutput>def libscanbuild.arguments.parser_add_compilers ( parser)</computeroutput></para><para>
Definition at line <link linkend="_arguments_8py_source_1l00457">457</link> of file <link linkend="_arguments_8py_source">arguments.py</link>.</para>
<programlisting>00457 <emphasis role="keyword">def&#32;</emphasis><link linkend="_namespacelibscanbuild_1_1arguments_1adde0db9e5c554bf1e4824aa7ce1677b1">parser_add_compilers</link>(parser):
00458 &#32;&#32;&#32;&#32;parser.add_argument(
00459 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&apos;--use-cc&apos;</emphasis>,
00460 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;metavar=<emphasis role="stringliteral">&apos;&lt;path&gt;&apos;</emphasis>,
00461 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;dest=<emphasis role="stringliteral">&apos;cc&apos;</emphasis>,
00462 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;default=os.getenv(<emphasis role="stringliteral">&apos;CC&apos;</emphasis>,&#32;<emphasis role="stringliteral">&apos;cc&apos;</emphasis>),
00463 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;help=<emphasis role="stringliteral">&quot;&quot;&quot;When&#32;&apos;%(prog)s&apos;&#32;analyzes&#32;a&#32;project&#32;by&#32;interposing&#32;a&#32;compiler</emphasis>
00464 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;wrapper,&#32;which&#32;executes&#32;a&#32;real&#32;compiler&#32;for&#32;compilation&#32;and&#32;do&#32;other</emphasis>
00465 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;tasks&#32;(record&#32;the&#32;compiler&#32;invocation).&#32;Because&#32;of&#32;this&#32;interposing,</emphasis>
00466 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&apos;%(prog)s&apos;&#32;does&#32;not&#32;know&#32;what&#32;compiler&#32;your&#32;project&#32;normally&#32;uses.</emphasis>
00467 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Instead,&#32;it&#32;simply&#32;overrides&#32;the&#32;CC&#32;environment&#32;variable,&#32;and&#32;guesses</emphasis>
00468 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;your&#32;default&#32;compiler.</emphasis>
00469 <emphasis role="stringliteral"></emphasis>
00470 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;If&#32;you&#32;need&#32;&apos;%(prog)s&apos;&#32;to&#32;use&#32;a&#32;specific&#32;compiler&#32;for&#32;*compilation*</emphasis>
00471 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;then&#32;you&#32;can&#32;use&#32;this&#32;option&#32;to&#32;specify&#32;a&#32;path&#32;to&#32;that&#32;compiler.&quot;&quot;&quot;</emphasis>)
00472 &#32;&#32;&#32;&#32;parser.add_argument(
00473 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&apos;--use-c++&apos;</emphasis>,
00474 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;metavar=<emphasis role="stringliteral">&apos;&lt;path&gt;&apos;</emphasis>,
00475 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;dest=<emphasis role="stringliteral">&apos;cxx&apos;</emphasis>,
00476 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;default=os.getenv(<emphasis role="stringliteral">&apos;CXX&apos;</emphasis>,&#32;<emphasis role="stringliteral">&apos;c++&apos;</emphasis>),
00477 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;help=<emphasis role="stringliteral">&quot;&quot;&quot;This&#32;is&#32;the&#32;same&#32;as&#32;&quot;--use-cc&quot;&#32;but&#32;for&#32;C++&#32;code.&quot;&quot;&quot;</emphasis>)
00478 
00479 
</programlisting><para>
Referenced by <link linkend="_arguments_8py_source_1l00167">libscanbuild.arguments.create_analyze_parser()</link>, and <link linkend="_arguments_8py_source_1l00143">libscanbuild.arguments.create_intercept_parser()</link>.</para>
    </section><anchor xml:id="_namespacelibscanbuild_1_1arguments_1ad83ca665cce99074210a7cb16d6f7a43"/>    <section>
    <title>parser_add_prefer_wrapper()</title>
<indexterm><primary>parser_add_prefer_wrapper</primary><secondary>libscanbuild.arguments</secondary></indexterm>
<indexterm><primary>libscanbuild.arguments</primary><secondary>parser_add_prefer_wrapper</secondary></indexterm>
<para><computeroutput>def libscanbuild.arguments.parser_add_prefer_wrapper ( parser)</computeroutput></para><para>
Definition at line <link linkend="_arguments_8py_source_1l00449">449</link> of file <link linkend="_arguments_8py_source">arguments.py</link>.</para>
<programlisting>00449 <emphasis role="keyword">def&#32;</emphasis><link linkend="_namespacelibscanbuild_1_1arguments_1ad83ca665cce99074210a7cb16d6f7a43">parser_add_prefer_wrapper</link>(parser):
00450 &#32;&#32;&#32;&#32;parser.add_argument(
00451 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&apos;--override-compiler&apos;</emphasis>,
00452 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;action=<emphasis role="stringliteral">&apos;store_true&apos;</emphasis>,
00453 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;help=<emphasis role="stringliteral">&quot;&quot;&quot;Always&#32;resort&#32;to&#32;the&#32;compiler&#32;wrapper&#32;even&#32;when&#32;better</emphasis>
00454 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;intercept&#32;methods&#32;are&#32;available.&quot;&quot;&quot;</emphasis>)
00455 
00456 
</programlisting><para>
Referenced by <link linkend="_arguments_8py_source_1l00167">libscanbuild.arguments.create_analyze_parser()</link>, and <link linkend="_arguments_8py_source_1l00143">libscanbuild.arguments.create_intercept_parser()</link>.</para>
    </section><anchor xml:id="_namespacelibscanbuild_1_1arguments_1ac674484b0e963d26707306cd5a34b2e0"/>    <section>
    <title>print_active_checkers()</title>
<indexterm><primary>print_active_checkers</primary><secondary>libscanbuild.arguments</secondary></indexterm>
<indexterm><primary>libscanbuild.arguments</primary><secondary>print_active_checkers</secondary></indexterm>
<para><computeroutput>def libscanbuild.arguments.print_active_checkers ( checkers)</computeroutput></para>
<para><literallayout><computeroutput> Print active checkers to stdout. </computeroutput></literallayout> </para>
<para>
Definition at line <link linkend="_arguments_8py_source_1l00493">493</link> of file <link linkend="_arguments_8py_source">arguments.py</link>.</para>
<programlisting>00493 <emphasis role="keyword">def&#32;</emphasis><link linkend="_namespacelibscanbuild_1_1arguments_1ac674484b0e963d26707306cd5a34b2e0">print_active_checkers</link>(checkers):
00494 &#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;&quot;&quot;&#32;Print&#32;active&#32;checkers&#32;to&#32;stdout.&#32;&quot;&quot;&quot;</emphasis>
00495 
00496 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;name&#32;<emphasis role="keywordflow">in</emphasis>&#32;sorted(name&#32;<emphasis role="keywordflow">for</emphasis>&#32;name,&#32;(_,&#32;active)&#32;<emphasis role="keywordflow">in</emphasis>&#32;checkers.items()
00497 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;active):
00498 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__function_call_decl_8cpp_1a388f572c62279f839ee138a9afbdeeb5">print</link>(name)
00499 
00500 
</programlisting><para>
References <link linkend="__function_call_decl_8cpp_source_1l00003">print()</link>.</para>
<para>
Referenced by <link linkend="_arguments_8py_source_1l00107">libscanbuild.arguments.validate_args_for_analyze()</link>.</para>
    </section><anchor xml:id="_namespacelibscanbuild_1_1arguments_1a6d8630c92cd7c364d4570ba22299f8d1"/>    <section>
    <title>print_checkers()</title>
<indexterm><primary>print_checkers</primary><secondary>libscanbuild.arguments</secondary></indexterm>
<indexterm><primary>libscanbuild.arguments</primary><secondary>print_checkers</secondary></indexterm>
<para><computeroutput>def libscanbuild.arguments.print_checkers ( checkers)</computeroutput></para>
<para><literallayout><computeroutput> Print verbose checker help to stdout. </computeroutput></literallayout> </para>
<para>
Definition at line <link linkend="_arguments_8py_source_1l00501">501</link> of file <link linkend="_arguments_8py_source">arguments.py</link>.</para>
<programlisting>00501 <emphasis role="keyword">def&#32;</emphasis><link linkend="_namespacelibscanbuild_1_1arguments_1a6d8630c92cd7c364d4570ba22299f8d1">print_checkers</link>(checkers):
00502 &#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;&quot;&quot;&#32;Print&#32;verbose&#32;checker&#32;help&#32;to&#32;stdout.&#32;&quot;&quot;&quot;</emphasis>
00503 
00504 &#32;&#32;&#32;&#32;<link linkend="__function_call_decl_8cpp_1a388f572c62279f839ee138a9afbdeeb5">print</link>(<emphasis role="stringliteral">&apos;&apos;</emphasis>)
00505 &#32;&#32;&#32;&#32;<link linkend="__function_call_decl_8cpp_1a388f572c62279f839ee138a9afbdeeb5">print</link>(<emphasis role="stringliteral">&apos;available&#32;checkers:&apos;</emphasis>)
00506 &#32;&#32;&#32;&#32;<link linkend="__function_call_decl_8cpp_1a388f572c62279f839ee138a9afbdeeb5">print</link>(<emphasis role="stringliteral">&apos;&apos;</emphasis>)
00507 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;name&#32;<emphasis role="keywordflow">in</emphasis>&#32;sorted(checkers.keys()):
00508 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;description,&#32;active&#32;=&#32;checkers[name]
00509 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;prefix&#32;=&#32;<emphasis role="stringliteral">&apos;+&apos;</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;active&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="stringliteral">&apos;&#32;&apos;</emphasis>
00510 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;len(name)&#32;&gt;&#32;30:
00511 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__function_call_decl_8cpp_1a388f572c62279f839ee138a9afbdeeb5">print</link>(<emphasis role="stringliteral">&apos;&#32;{0}&#32;{1}&apos;</emphasis>.format(prefix,&#32;name))
00512 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__function_call_decl_8cpp_1a388f572c62279f839ee138a9afbdeeb5">print</link>(<emphasis role="stringliteral">&apos;&#32;&apos;</emphasis>&#32;*&#32;35&#32;+&#32;description)
00513 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>:
00514 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__function_call_decl_8cpp_1a388f572c62279f839ee138a9afbdeeb5">print</link>(<emphasis role="stringliteral">&apos;&#32;{0}&#32;{1:&#32;&lt;30}&#32;&#32;{2}&apos;</emphasis>.format(prefix,&#32;name,&#32;description))
00515 &#32;&#32;&#32;&#32;<link linkend="__function_call_decl_8cpp_1a388f572c62279f839ee138a9afbdeeb5">print</link>(<emphasis role="stringliteral">&apos;&apos;</emphasis>)
00516 &#32;&#32;&#32;&#32;<link linkend="__function_call_decl_8cpp_1a388f572c62279f839ee138a9afbdeeb5">print</link>(<emphasis role="stringliteral">&apos;NOTE:&#32;&quot;+&quot;&#32;indicates&#32;that&#32;an&#32;analysis&#32;is&#32;enabled&#32;by&#32;default.&apos;</emphasis>)
00517 &#32;&#32;&#32;&#32;<link linkend="__function_call_decl_8cpp_1a388f572c62279f839ee138a9afbdeeb5">print</link>(<emphasis role="stringliteral">&apos;&apos;</emphasis>)
</programlisting><para>
References <link linkend="__function_call_decl_8cpp_source_1l00003">print()</link>.</para>
<para>
Referenced by <link linkend="_arguments_8py_source_1l00107">libscanbuild.arguments.validate_args_for_analyze()</link>.</para>
    </section><anchor xml:id="_namespacelibscanbuild_1_1arguments_1a0d1ce44189511ff1be1a7b915e105fd5"/>    <section>
    <title>validate_args_for_analyze()</title>
<indexterm><primary>validate_args_for_analyze</primary><secondary>libscanbuild.arguments</secondary></indexterm>
<indexterm><primary>libscanbuild.arguments</primary><secondary>validate_args_for_analyze</secondary></indexterm>
<para><computeroutput>def libscanbuild.arguments.validate_args_for_analyze ( parser,  args,  from_build_command)</computeroutput></para>
<para><literallayout><computeroutput> Command line parsing is done by the argparse module, but semantic
validation still needs to be done. This method is doing it for
analyze-build and scan-build commands.

:param parser: The command line parser object.
:param args: Parsed argument object.
:param from_build_command: Boolean value tells is the command suppose
to run the analyzer against a build command or a compilation db.
:return: No return value, but this call might throw when validation
fails. </computeroutput></literallayout> </para>
<para>
Definition at line <link linkend="_arguments_8py_source_1l00107">107</link> of file <link linkend="_arguments_8py_source">arguments.py</link>.</para>
<programlisting>00107 <emphasis role="keyword">def&#32;</emphasis><link linkend="_namespacelibscanbuild_1_1arguments_1a0d1ce44189511ff1be1a7b915e105fd5">validate_args_for_analyze</link>(parser,&#32;args,&#32;from_build_command):
00108 &#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;&quot;&quot;&#32;Command&#32;line&#32;parsing&#32;is&#32;done&#32;by&#32;the&#32;argparse&#32;module,&#32;but&#32;semantic</emphasis>
00109 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;validation&#32;still&#32;needs&#32;to&#32;be&#32;done.&#32;This&#32;method&#32;is&#32;doing&#32;it&#32;for</emphasis>
00110 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;analyze-build&#32;and&#32;scan-build&#32;commands.</emphasis>
00111 <emphasis role="stringliteral"></emphasis>
00112 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;:param&#32;parser:&#32;The&#32;command&#32;line&#32;parser&#32;object.</emphasis>
00113 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;:param&#32;args:&#32;Parsed&#32;argument&#32;object.</emphasis>
00114 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;:param&#32;from_build_command:&#32;Boolean&#32;value&#32;tells&#32;is&#32;the&#32;command&#32;suppose</emphasis>
00115 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;to&#32;run&#32;the&#32;analyzer&#32;against&#32;a&#32;build&#32;command&#32;or&#32;a&#32;compilation&#32;db.</emphasis>
00116 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;:return:&#32;No&#32;return&#32;value,&#32;but&#32;this&#32;call&#32;might&#32;throw&#32;when&#32;validation</emphasis>
00117 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;fails.&#32;&quot;&quot;&quot;</emphasis>
00118 
00119 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;args.help_checkers_verbose:
00120 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacelibscanbuild_1_1arguments_1a6d8630c92cd7c364d4570ba22299f8d1">print_checkers</link>(<link linkend="_namespacelibscanbuild_1_1clang_1a70514d7e50269346912151e9c2b0e0d7">get_checkers</link>(args.clang,&#32;args.plugins))
00121 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;parser.exit(status=0)
00122 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">elif</emphasis>&#32;args.help_checkers:
00123 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacelibscanbuild_1_1arguments_1ac674484b0e963d26707306cd5a34b2e0">print_active_checkers</link>(<link linkend="_namespacelibscanbuild_1_1clang_1a70514d7e50269346912151e9c2b0e0d7">get_checkers</link>(args.clang,&#32;args.plugins))
00124 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;parser.exit(status=0)
00125 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">elif</emphasis>&#32;from_build_command&#32;<emphasis role="keywordflow">and</emphasis>&#32;<emphasis role="keywordflow">not</emphasis>&#32;args.build:
00126 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;parser.error(message=<emphasis role="stringliteral">&apos;missing&#32;build&#32;command&apos;</emphasis>)
00127 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">elif</emphasis>&#32;<emphasis role="keywordflow">not</emphasis>&#32;from_build_command&#32;<emphasis role="keywordflow">and</emphasis>&#32;<emphasis role="keywordflow">not</emphasis>&#32;os.path.exists(args.cdb):
00128 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;parser.error(message=<emphasis role="stringliteral">&apos;compilation&#32;database&#32;is&#32;missing&apos;</emphasis>)
00129 
00130 &#32;&#32;&#32;&#32;<emphasis role="comment">#&#32;If&#32;the&#32;user&#32;wants&#32;CTU&#32;mode</emphasis>
00131 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keywordflow">not</emphasis>&#32;from_build_command&#32;<emphasis role="keywordflow">and</emphasis>&#32;hasattr(args,&#32;<emphasis role="stringliteral">&apos;ctu_phases&apos;</emphasis>)&#32;\
00132 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">and</emphasis>&#32;hasattr(args.ctu_phases,&#32;<emphasis role="stringliteral">&apos;dir&apos;</emphasis>):
00133 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">#&#32;If&#32;CTU&#32;analyze_only,&#32;the&#32;input&#32;directory&#32;should&#32;exist</emphasis>
00134 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;args.ctu_phases.analyze&#32;<emphasis role="keywordflow">and</emphasis>&#32;<emphasis role="keywordflow">not</emphasis>&#32;args.ctu_phases.collect&#32;\
00135 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">and</emphasis>&#32;<emphasis role="keywordflow">not</emphasis>&#32;os.path.exists(args.ctu_dir):
00136 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;parser.error(message=<emphasis role="stringliteral">&apos;missing&#32;CTU&#32;directory&apos;</emphasis>)
00137 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">#&#32;Check&#32;CTU&#32;capability&#32;via&#32;checking&#32;clang-extdef-mapping</emphasis>
00138 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keywordflow">not</emphasis>&#32;<link linkend="_namespacelibscanbuild_1_1clang_1aea5b01c822382e97fd622bbfadd82c62">is_ctu_capable</link>(args.extdef_map_cmd):
00139 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;parser.error(message=<emphasis role="stringliteral">&quot;&quot;&quot;This&#32;version&#32;of&#32;clang&#32;does&#32;not&#32;support&#32;CTU</emphasis>
00140 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;functionality&#32;or&#32;clang-extdef-mapping&#32;command&#32;not&#32;found.&quot;&quot;&quot;</emphasis>)
00141 
00142 
</programlisting><para>
References <link linkend="_clang_8py_source_1l00138">libscanbuild.clang.get_checkers()</link>, <link linkend="_clang_8py_source_1l00164">libscanbuild.clang.is_ctu_capable()</link>, <link linkend="_arguments_8py_source_1l00493">libscanbuild.arguments.print_active_checkers()</link>, and <link linkend="_arguments_8py_source_1l00501">libscanbuild.arguments.print_checkers()</link>.</para>
<para>
Referenced by <link linkend="_arguments_8py_source_1l00045">libscanbuild.arguments.parse_args_for_analyze_build()</link>, and <link linkend="_arguments_8py_source_1l00061">libscanbuild.arguments.parse_args_for_scan_build()</link>.</para>
</section>
</section>
</section>
