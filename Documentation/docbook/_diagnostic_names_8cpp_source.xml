<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="__diagnostic_names_8cpp_source" xml:lang="en-US">
<title>DiagnosticNames.cpp</title>
<indexterm><primary>/Users/maximilian/clang-llvm/clang/tools/diagtool/DiagnosticNames.cpp</primary></indexterm>
<programlisting>00001 <emphasis role="comment">//===-&#32;DiagnosticNames.cpp&#32;-&#32;Defines&#32;a&#32;table&#32;of&#32;all&#32;builtin&#32;diagnostics&#32;----==//</emphasis>
00002 <emphasis role="comment">//</emphasis>
00003 <emphasis role="comment">//&#32;Part&#32;of&#32;the&#32;LLVM&#32;Project,&#32;under&#32;the&#32;Apache&#32;License&#32;v2.0&#32;with&#32;LLVM&#32;Exceptions.</emphasis>
00004 <emphasis role="comment">//&#32;See&#32;https://llvm.org/LICENSE.txt&#32;for&#32;license&#32;information.</emphasis>
00005 <emphasis role="comment">//&#32;SPDX-License-Identifier:&#32;Apache-2.0&#32;WITH&#32;LLVM-exception</emphasis>
00006 <emphasis role="comment">//</emphasis>
00007 <emphasis role="comment">//===----------------------------------------------------------------------===//</emphasis>
00008 
00009 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="__diagnostic_names_8h">DiagnosticNames.h</link>&quot;</emphasis>
00010 <emphasis role="preprocessor">#include&#32;&quot;clang/Basic/AllDiagnostics.h&quot;</emphasis>
00011 <emphasis role="preprocessor">#include&#32;&quot;llvm/ADT/STLExtras.h&quot;</emphasis>
00012 
00013 <emphasis role="keyword">using&#32;namespace&#32;</emphasis><link linkend="_namespaceclang">clang</link>;
00014 <emphasis role="keyword">using&#32;namespace&#32;</emphasis><link linkend="_namespacediagtool">diagtool</link>;
00015 
00016 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_structdiagtool_1_1_diagnostic_record">DiagnosticRecord</link>&#32;BuiltinDiagnosticsByName[]&#32;=&#32;{
00017 <emphasis role="preprocessor">#define&#32;DIAG_NAME_INDEX(ENUM)&#32;{&#32;#ENUM,&#32;diag::ENUM,&#32;STR_SIZE(#ENUM,&#32;uint8_t)&#32;},</emphasis>
00018 <emphasis role="preprocessor">#include&#32;&quot;clang/Basic/DiagnosticIndexName.inc&quot;</emphasis>
00019 <emphasis role="preprocessor">#undef&#32;DIAG_NAME_INDEX</emphasis>
00020 };
00021 
<anchor xml:id="__diagnostic_names_8cpp_source_1l00022"/><link linkend="_namespacediagtool_1a84e4f971383375d578c37ad94811fd7a">00022</link> llvm::ArrayRef&lt;DiagnosticRecord&gt;&#32;<link linkend="_namespacediagtool_1a84e4f971383375d578c37ad94811fd7a">diagtool::getBuiltinDiagnosticsByName</link>()&#32;{
00023 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;llvm::makeArrayRef(BuiltinDiagnosticsByName);
00024 }
00025 
00026 
00027 <emphasis role="comment">//&#32;FIXME:&#32;Is&#32;it&#32;worth&#32;having&#32;two&#32;tables,&#32;especially&#32;when&#32;this&#32;one&#32;can&#32;get</emphasis>
00028 <emphasis role="comment">//&#32;out&#32;of&#32;sync&#32;easily?</emphasis>
00029 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_structdiagtool_1_1_diagnostic_record">DiagnosticRecord</link>&#32;BuiltinDiagnosticsByID[]&#32;=&#32;{
00030 <emphasis role="preprocessor">#define&#32;DIAG(ENUM,CLASS,DEFAULT_MAPPING,DESC,GROUP,&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
00031 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;SFINAE,NOWERROR,SHOWINSYSHEADER,DEFER,CATEGORY)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
00032 <emphasis role="preprocessor">&#32;&#32;{&#32;#ENUM,&#32;diag::ENUM,&#32;STR_SIZE(#ENUM,&#32;uint8_t)&#32;},</emphasis>
00033 <emphasis role="preprocessor">#include&#32;&quot;clang/Basic/DiagnosticCommonKinds.inc&quot;</emphasis>
00034 <emphasis role="preprocessor">#include&#32;&quot;clang/Basic/DiagnosticCrossTUKinds.inc&quot;</emphasis>
00035 <emphasis role="preprocessor">#include&#32;&quot;clang/Basic/DiagnosticDriverKinds.inc&quot;</emphasis>
00036 <emphasis role="preprocessor">#include&#32;&quot;clang/Basic/DiagnosticFrontendKinds.inc&quot;</emphasis>
00037 <emphasis role="preprocessor">#include&#32;&quot;clang/Basic/DiagnosticSerializationKinds.inc&quot;</emphasis>
00038 <emphasis role="preprocessor">#include&#32;&quot;clang/Basic/DiagnosticLexKinds.inc&quot;</emphasis>
00039 <emphasis role="preprocessor">#include&#32;&quot;clang/Basic/DiagnosticParseKinds.inc&quot;</emphasis>
00040 <emphasis role="preprocessor">#include&#32;&quot;clang/Basic/DiagnosticASTKinds.inc&quot;</emphasis>
00041 <emphasis role="preprocessor">#include&#32;&quot;clang/Basic/DiagnosticCommentKinds.inc&quot;</emphasis>
00042 <emphasis role="preprocessor">#include&#32;&quot;clang/Basic/DiagnosticSemaKinds.inc&quot;</emphasis>
00043 <emphasis role="preprocessor">#include&#32;&quot;clang/Basic/DiagnosticAnalysisKinds.inc&quot;</emphasis>
00044 <emphasis role="preprocessor">#include&#32;&quot;clang/Basic/DiagnosticRefactoringKinds.inc&quot;</emphasis>
00045 <emphasis role="preprocessor">#undef&#32;DIAG</emphasis>
00046 };
00047 
00048 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;orderByID(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_structdiagtool_1_1_diagnostic_record">DiagnosticRecord</link>&#32;&amp;Left,
00049 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_structdiagtool_1_1_diagnostic_record">DiagnosticRecord</link>&#32;&amp;Right)&#32;{
00050 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;Left.<link linkend="_structdiagtool_1_1_diagnostic_record_1a460b5b7156a016fd34b39180febc9020">DiagID</link>&#32;&lt;&#32;Right.<link linkend="_structdiagtool_1_1_diagnostic_record_1a460b5b7156a016fd34b39180febc9020">DiagID</link>;
00051 }
00052 
<anchor xml:id="__diagnostic_names_8cpp_source_1l00053"/><link linkend="_namespacediagtool_1a88f1c1b7bd8ad9e2ce31fa3d799ca0d2">00053</link> <emphasis role="keyword">const</emphasis>&#32;<link linkend="_structdiagtool_1_1_diagnostic_record">DiagnosticRecord</link>&#32;&amp;<link linkend="_namespacediagtool_1a88f1c1b7bd8ad9e2ce31fa3d799ca0d2">diagtool::getDiagnosticForID</link>(<emphasis role="keywordtype">short</emphasis>&#32;DiagID)&#32;{
00054 &#32;&#32;<link linkend="_structdiagtool_1_1_diagnostic_record">DiagnosticRecord</link>&#32;Key&#32;=&#32;{<emphasis role="keyword">nullptr</emphasis>,&#32;DiagID,&#32;0};
00055 
00056 &#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_structdiagtool_1_1_diagnostic_record">DiagnosticRecord</link>&#32;*Result&#32;=
00057 &#32;&#32;&#32;&#32;&#32;&#32;llvm::lower_bound(BuiltinDiagnosticsByID,&#32;Key,&#32;orderByID);
00058 &#32;&#32;assert(Result&#32;&amp;&amp;&#32;<emphasis role="stringliteral">&quot;diagnostic&#32;not&#32;found;&#32;table&#32;may&#32;be&#32;out&#32;of&#32;date&quot;</emphasis>);
00059 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*Result;
00060 }
00061 
00062 
<anchor xml:id="__diagnostic_names_8cpp_source_1l00063"/><link linkend="__diagnostic_names_8cpp_1a25bd14015cb17c157ad5846569f9918a">00063</link> <emphasis role="preprocessor">#define&#32;GET_DIAG_ARRAYS</emphasis>
00064 <emphasis role="preprocessor">#include&#32;&quot;clang/Basic/DiagnosticGroups.inc&quot;</emphasis>
00065 <emphasis role="preprocessor">#undef&#32;GET_DIAG_ARRAYS</emphasis>
00066 
00067 <emphasis role="comment">//&#32;Second&#32;the&#32;table&#32;of&#32;options,&#32;sorted&#32;by&#32;name&#32;for&#32;fast&#32;binary&#32;lookup.</emphasis>
00068 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_structdiagtool_1_1_group_record">GroupRecord</link>&#32;OptionTable[]&#32;=&#32;{
00069 <emphasis role="preprocessor">#define&#32;GET_DIAG_TABLE</emphasis>
00070 <emphasis role="preprocessor">#include&#32;&quot;clang/Basic/DiagnosticGroups.inc&quot;</emphasis>
00071 <emphasis role="preprocessor">#undef&#32;GET_DIAG_TABLE</emphasis>
00072 };
00073 
<anchor xml:id="__diagnostic_names_8cpp_source_1l00074"/><link linkend="_structdiagtool_1_1_group_record_1a3d098c5bb21e8c5bc40af4fbec5f91c4">00074</link> llvm::StringRef&#32;GroupRecord::getName()<emphasis role="keyword">&#32;const&#32;</emphasis>{
00075 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;StringRef(DiagGroupNames&#32;+&#32;NameOffset&#32;+&#32;1,&#32;DiagGroupNames[NameOffset]);
00076 }
00077 
<anchor xml:id="__diagnostic_names_8cpp_source_1l00078"/><link linkend="_structdiagtool_1_1_group_record_1a383d99cbdcdb4243e6a54ac1da97e667">00078</link> <link linkend="_classdiagtool_1_1_group_record_1_1group__iterator">GroupRecord::subgroup_iterator</link>&#32;GroupRecord::subgroup_begin()<emphasis role="keyword">&#32;const&#32;</emphasis>{
00079 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;DiagSubGroups&#32;+&#32;SubGroups;
00080 }
00081 
<anchor xml:id="__diagnostic_names_8cpp_source_1l00082"/><link linkend="_structdiagtool_1_1_group_record_1acb664c4da3b9b611d62d03cbf90fbdcf">00082</link> <link linkend="_classdiagtool_1_1_group_record_1_1group__iterator">GroupRecord::subgroup_iterator</link>&#32;GroupRecord::subgroup_end()<emphasis role="keyword">&#32;const&#32;</emphasis>{
00083 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">nullptr</emphasis>;
00084 }
00085 
00086 llvm::iterator_range&lt;diagtool::GroupRecord::subgroup_iterator&gt;
<anchor xml:id="__diagnostic_names_8cpp_source_1l00087"/><link linkend="_structdiagtool_1_1_group_record_1aca2c41faf08459a6898395c857a094f9">00087</link> GroupRecord::subgroups()<emphasis role="keyword">&#32;const&#32;</emphasis>{
00088 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;llvm::make_range(subgroup_begin(),&#32;subgroup_end());
00089 }
00090 
<anchor xml:id="__diagnostic_names_8cpp_source_1l00091"/><link linkend="_structdiagtool_1_1_group_record_1a6c1b9e1991f479d49ae106fbd0bf0cc3">00091</link> <link linkend="_classdiagtool_1_1_group_record_1_1group__iterator">GroupRecord::diagnostics_iterator</link>&#32;GroupRecord::diagnostics_begin()<emphasis role="keyword">&#32;const&#32;</emphasis>{
00092 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;DiagArrays&#32;+&#32;Members;
00093 }
00094 
<anchor xml:id="__diagnostic_names_8cpp_source_1l00095"/><link linkend="_structdiagtool_1_1_group_record_1af481455faa0a04c52fd996dc0d2efcfe">00095</link> <link linkend="_classdiagtool_1_1_group_record_1_1group__iterator">GroupRecord::diagnostics_iterator</link>&#32;GroupRecord::diagnostics_end()<emphasis role="keyword">&#32;const&#32;</emphasis>{
00096 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">nullptr</emphasis>;
00097 }
00098 
00099 llvm::iterator_range&lt;diagtool::GroupRecord::diagnostics_iterator&gt;
<anchor xml:id="__diagnostic_names_8cpp_source_1l00100"/><link linkend="_structdiagtool_1_1_group_record_1ae16845dd99e785119694ef3b4994e1ef">00100</link> GroupRecord::diagnostics()<emphasis role="keyword">&#32;const&#32;</emphasis>{
00101 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;llvm::make_range(diagnostics_begin(),&#32;diagnostics_end());
00102 }
00103 
<anchor xml:id="__diagnostic_names_8cpp_source_1l00104"/><link linkend="_namespacediagtool_1a42a9c9e276387e0d198c95ff2f6064d7">00104</link> llvm::ArrayRef&lt;GroupRecord&gt;&#32;<link linkend="_namespacediagtool_1a42a9c9e276387e0d198c95ff2f6064d7">diagtool::getDiagnosticGroups</link>()&#32;{
00105 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;llvm::makeArrayRef(OptionTable);
00106 }
</programlisting></section>
