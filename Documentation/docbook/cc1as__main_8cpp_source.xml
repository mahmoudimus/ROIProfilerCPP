<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_cc1as__main_8cpp_source" xml:lang="en-US">
<title>cc1as_main.cpp</title>
<indexterm><primary>/Users/maximilian/clang-llvm/clang/tools/driver/cc1as_main.cpp</primary></indexterm>
<programlisting>00001 <emphasis role="comment">//===--&#32;cc1as_main.cpp&#32;-&#32;Clang&#32;Assembler&#32;&#32;---------------------------------===//</emphasis>
00002 <emphasis role="comment">//</emphasis>
00003 <emphasis role="comment">//&#32;Part&#32;of&#32;the&#32;LLVM&#32;Project,&#32;under&#32;the&#32;Apache&#32;License&#32;v2.0&#32;with&#32;LLVM&#32;Exceptions.</emphasis>
00004 <emphasis role="comment">//&#32;See&#32;https://llvm.org/LICENSE.txt&#32;for&#32;license&#32;information.</emphasis>
00005 <emphasis role="comment">//&#32;SPDX-License-Identifier:&#32;Apache-2.0&#32;WITH&#32;LLVM-exception</emphasis>
00006 <emphasis role="comment">//</emphasis>
00007 <emphasis role="comment">//===----------------------------------------------------------------------===//</emphasis>
00008 <emphasis role="comment">//</emphasis>
00009 <emphasis role="comment">//&#32;This&#32;is&#32;the&#32;entry&#32;point&#32;to&#32;the&#32;clang&#32;-cc1as&#32;functionality,&#32;which&#32;implements</emphasis>
00010 <emphasis role="comment">//&#32;the&#32;direct&#32;interface&#32;to&#32;the&#32;LLVM&#32;MC&#32;based&#32;assembler.</emphasis>
00011 <emphasis role="comment">//</emphasis>
00012 <emphasis role="comment">//===----------------------------------------------------------------------===//</emphasis>
00013 
00014 <emphasis role="preprocessor">#include&#32;&quot;clang/Basic/Diagnostic.h&quot;</emphasis>
00015 <emphasis role="preprocessor">#include&#32;&quot;clang/Basic/DiagnosticOptions.h&quot;</emphasis>
00016 <emphasis role="preprocessor">#include&#32;&quot;clang/Driver/DriverDiagnostic.h&quot;</emphasis>
00017 <emphasis role="preprocessor">#include&#32;&quot;clang/Driver/Options.h&quot;</emphasis>
00018 <emphasis role="preprocessor">#include&#32;&quot;clang/Frontend/FrontendDiagnostic.h&quot;</emphasis>
00019 <emphasis role="preprocessor">#include&#32;&quot;clang/Frontend/TextDiagnosticPrinter.h&quot;</emphasis>
00020 <emphasis role="preprocessor">#include&#32;&quot;clang/Frontend/Utils.h&quot;</emphasis>
00021 <emphasis role="preprocessor">#include&#32;&quot;llvm/ADT/STLExtras.h&quot;</emphasis>
00022 <emphasis role="preprocessor">#include&#32;&quot;llvm/ADT/StringSwitch.h&quot;</emphasis>
00023 <emphasis role="preprocessor">#include&#32;&quot;llvm/ADT/Triple.h&quot;</emphasis>
00024 <emphasis role="preprocessor">#include&#32;&quot;llvm/IR/DataLayout.h&quot;</emphasis>
00025 <emphasis role="preprocessor">#include&#32;&quot;llvm/MC/MCAsmBackend.h&quot;</emphasis>
00026 <emphasis role="preprocessor">#include&#32;&quot;llvm/MC/MCAsmInfo.h&quot;</emphasis>
00027 <emphasis role="preprocessor">#include&#32;&quot;llvm/MC/MCCodeEmitter.h&quot;</emphasis>
00028 <emphasis role="preprocessor">#include&#32;&quot;llvm/MC/MCContext.h&quot;</emphasis>
00029 <emphasis role="preprocessor">#include&#32;&quot;llvm/MC/MCInstrInfo.h&quot;</emphasis>
00030 <emphasis role="preprocessor">#include&#32;&quot;llvm/MC/MCObjectFileInfo.h&quot;</emphasis>
00031 <emphasis role="preprocessor">#include&#32;&quot;llvm/MC/MCObjectWriter.h&quot;</emphasis>
00032 <emphasis role="preprocessor">#include&#32;&quot;llvm/MC/MCParser/MCAsmParser.h&quot;</emphasis>
00033 <emphasis role="preprocessor">#include&#32;&quot;llvm/MC/MCParser/MCTargetAsmParser.h&quot;</emphasis>
00034 <emphasis role="preprocessor">#include&#32;&quot;llvm/MC/MCRegisterInfo.h&quot;</emphasis>
00035 <emphasis role="preprocessor">#include&#32;&quot;llvm/MC/MCSectionMachO.h&quot;</emphasis>
00036 <emphasis role="preprocessor">#include&#32;&quot;llvm/MC/MCStreamer.h&quot;</emphasis>
00037 <emphasis role="preprocessor">#include&#32;&quot;llvm/MC/MCSubtargetInfo.h&quot;</emphasis>
00038 <emphasis role="preprocessor">#include&#32;&quot;llvm/MC/MCTargetOptions.h&quot;</emphasis>
00039 <emphasis role="preprocessor">#include&#32;&quot;llvm/Option/Arg.h&quot;</emphasis>
00040 <emphasis role="preprocessor">#include&#32;&quot;llvm/Option/ArgList.h&quot;</emphasis>
00041 <emphasis role="preprocessor">#include&#32;&quot;llvm/Option/OptTable.h&quot;</emphasis>
00042 <emphasis role="preprocessor">#include&#32;&quot;llvm/Support/CommandLine.h&quot;</emphasis>
00043 <emphasis role="preprocessor">#include&#32;&quot;llvm/Support/ErrorHandling.h&quot;</emphasis>
00044 <emphasis role="preprocessor">#include&#32;&quot;llvm/Support/FileSystem.h&quot;</emphasis>
00045 <emphasis role="preprocessor">#include&#32;&quot;llvm/Support/FormattedStream.h&quot;</emphasis>
00046 <emphasis role="preprocessor">#include&#32;&quot;llvm/Support/Host.h&quot;</emphasis>
00047 <emphasis role="preprocessor">#include&#32;&quot;llvm/Support/MemoryBuffer.h&quot;</emphasis>
00048 <emphasis role="preprocessor">#include&#32;&quot;llvm/Support/Path.h&quot;</emphasis>
00049 <emphasis role="preprocessor">#include&#32;&quot;llvm/Support/Process.h&quot;</emphasis>
00050 <emphasis role="preprocessor">#include&#32;&quot;llvm/Support/Signals.h&quot;</emphasis>
00051 <emphasis role="preprocessor">#include&#32;&quot;llvm/Support/SourceMgr.h&quot;</emphasis>
00052 <emphasis role="preprocessor">#include&#32;&quot;llvm/Support/TargetRegistry.h&quot;</emphasis>
00053 <emphasis role="preprocessor">#include&#32;&quot;llvm/Support/TargetSelect.h&quot;</emphasis>
00054 <emphasis role="preprocessor">#include&#32;&quot;llvm/Support/Timer.h&quot;</emphasis>
00055 <emphasis role="preprocessor">#include&#32;&quot;llvm/Support/raw_ostream.h&quot;</emphasis>
00056 <emphasis role="preprocessor">#include&#32;&lt;memory&gt;</emphasis>
00057 <emphasis role="preprocessor">#include&#32;&lt;system_error&gt;</emphasis>
00058 <emphasis role="keyword">using&#32;namespace&#32;</emphasis><link linkend="_namespaceclang">clang</link>;
00059 <emphasis role="keyword">using&#32;namespace&#32;</emphasis>clang::driver;
00060 <emphasis role="keyword">using&#32;namespace&#32;</emphasis>clang::driver::options;
00061 <emphasis role="keyword">using&#32;namespace&#32;</emphasis><link linkend="_namespacellvm">llvm</link>;
00062 <emphasis role="keyword">using&#32;namespace&#32;</emphasis>llvm::opt;
00063 
00064 <emphasis role="keyword">namespace&#32;</emphasis>{
00065 
00067 <emphasis role="keyword">struct&#32;</emphasis>AssemblerInvocation&#32;{
00070 
00072 &#32;&#32;std::string&#32;Triple;
00073 
00076 &#32;&#32;std::string&#32;CPU;
00077 
00080 &#32;&#32;std::vector&lt;std::string&gt;&#32;Features;
00081 
00083 &#32;&#32;std::vector&lt;std::string&gt;&#32;SymbolDefs;
00084 
00088 
00089 &#32;&#32;std::vector&lt;std::string&gt;&#32;IncludePaths;
00090 &#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;NoInitialTextSection&#32;:&#32;1;
00091 &#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;SaveTemporaryLabels&#32;:&#32;1;
00092 &#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;GenDwarfForAssembly&#32;:&#32;1;
00093 &#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;RelaxELFRelocations&#32;:&#32;1;
00094 &#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;Dwarf64&#32;:&#32;1;
00095 &#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;DwarfVersion;
00096 &#32;&#32;std::string&#32;DwarfDebugFlags;
00097 &#32;&#32;std::string&#32;DwarfDebugProducer;
00098 &#32;&#32;std::string&#32;DebugCompilationDir;
00099 &#32;&#32;std::map&lt;const&#32;std::string,&#32;const&#32;std::string&gt;&#32;DebugPrefixMap;
00100 &#32;&#32;llvm::DebugCompressionType&#32;CompressDebugSections&#32;=
00101 &#32;&#32;&#32;&#32;&#32;&#32;llvm::DebugCompressionType::None;
00102 &#32;&#32;std::string&#32;MainFileName;
00103 &#32;&#32;std::string&#32;SplitDwarfOutput;
00104 
00108 
00109 &#32;&#32;std::string&#32;InputFile;
00110 &#32;&#32;std::vector&lt;std::string&gt;&#32;LLVMArgs;
00111 &#32;&#32;std::string&#32;OutputPath;
00112 &#32;&#32;<emphasis role="keyword">enum</emphasis>&#32;FileType&#32;{
00113 &#32;&#32;&#32;&#32;FT_Asm,&#32;&#32;
00114 &#32;&#32;&#32;&#32;FT_Null,&#32;
00115 &#32;&#32;&#32;&#32;FT_Obj&#32;&#32;&#32;
00116 &#32;&#32;};
00117 &#32;&#32;FileType&#32;OutputType;
00118 &#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;ShowHelp&#32;:&#32;1;
00119 &#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;ShowVersion&#32;:&#32;1;
00120 
00124 
00125 &#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;OutputAsmVariant;
00126 &#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;ShowEncoding&#32;:&#32;1;
00127 &#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;ShowInst&#32;:&#32;1;
00128 
00132 
00133 &#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;RelaxAll&#32;:&#32;1;
00134 &#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;NoExecStack&#32;:&#32;1;
00135 &#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;FatalWarnings&#32;:&#32;1;
00136 &#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;NoWarn&#32;:&#32;1;
00137 &#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;IncrementalLinkerCompatible&#32;:&#32;1;
00138 &#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;EmbedBitcode&#32;:&#32;1;
00139 
00141 &#32;&#32;std::string&#32;RelocationModel;
00142 
00145 &#32;&#32;std::string&#32;TargetABI;
00146 
00148 
00149 <emphasis role="keyword">public</emphasis>:
00150 &#32;&#32;AssemblerInvocation()&#32;{
00151 &#32;&#32;&#32;&#32;Triple&#32;=&#32;<emphasis role="stringliteral">&quot;&quot;</emphasis>;
00152 &#32;&#32;&#32;&#32;NoInitialTextSection&#32;=&#32;0;
00153 &#32;&#32;&#32;&#32;InputFile&#32;=&#32;<emphasis role="stringliteral">&quot;-&quot;</emphasis>;
00154 &#32;&#32;&#32;&#32;OutputPath&#32;=&#32;<emphasis role="stringliteral">&quot;-&quot;</emphasis>;
00155 &#32;&#32;&#32;&#32;OutputType&#32;=&#32;FT_Asm;
00156 &#32;&#32;&#32;&#32;OutputAsmVariant&#32;=&#32;0;
00157 &#32;&#32;&#32;&#32;ShowInst&#32;=&#32;0;
00158 &#32;&#32;&#32;&#32;ShowEncoding&#32;=&#32;0;
00159 &#32;&#32;&#32;&#32;RelaxAll&#32;=&#32;0;
00160 &#32;&#32;&#32;&#32;NoExecStack&#32;=&#32;0;
00161 &#32;&#32;&#32;&#32;FatalWarnings&#32;=&#32;0;
00162 &#32;&#32;&#32;&#32;NoWarn&#32;=&#32;0;
00163 &#32;&#32;&#32;&#32;IncrementalLinkerCompatible&#32;=&#32;0;
00164 &#32;&#32;&#32;&#32;Dwarf64&#32;=&#32;0;
00165 &#32;&#32;&#32;&#32;DwarfVersion&#32;=&#32;0;
00166 &#32;&#32;&#32;&#32;EmbedBitcode&#32;=&#32;0;
00167 &#32;&#32;}
00168 
00169 &#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;CreateFromArgs(AssemblerInvocation&#32;&amp;Res,
00170 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ArrayRef&lt;const&#32;char&#32;*&gt;&#32;Argv,
00171 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;DiagnosticsEngine&#32;&amp;Diags);
00172 };
00173 
00174 }
00175 
00176 <emphasis role="keywordtype">bool</emphasis>&#32;AssemblerInvocation::CreateFromArgs(AssemblerInvocation&#32;&amp;Opts,
00177 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ArrayRef&lt;const&#32;char&#32;*&gt;&#32;Argv,
00178 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;DiagnosticsEngine&#32;&amp;Diags)&#32;{
00179 &#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;Success&#32;=&#32;<emphasis role="keyword">true</emphasis>;
00180 
00181 &#32;&#32;<emphasis role="comment">//&#32;Parse&#32;the&#32;arguments.</emphasis>
00182 &#32;&#32;<emphasis role="keyword">const</emphasis>&#32;OptTable&#32;&amp;OptTbl&#32;=&#32;getDriverOptTable();
00183 
00184 &#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;IncludedFlagsBitmask&#32;=&#32;options::CC1AsOption;
00185 &#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;MissingArgIndex,&#32;MissingArgCount;
00186 &#32;&#32;InputArgList&#32;Args&#32;=&#32;OptTbl.ParseArgs(Argv,&#32;MissingArgIndex,&#32;MissingArgCount,
00187 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;IncludedFlagsBitmask);
00188 
00189 &#32;&#32;<emphasis role="comment">//&#32;Check&#32;for&#32;missing&#32;argument&#32;error.</emphasis>
00190 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(MissingArgCount)&#32;{
00191 &#32;&#32;&#32;&#32;Diags.Report(diag::err_drv_missing_argument)
00192 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;Args.getArgString(MissingArgIndex)&#32;&lt;&lt;&#32;MissingArgCount;
00193 &#32;&#32;&#32;&#32;Success&#32;=&#32;<emphasis role="keyword">false</emphasis>;
00194 &#32;&#32;}
00195 
00196 &#32;&#32;<emphasis role="comment">//&#32;Issue&#32;errors&#32;on&#32;unknown&#32;arguments.</emphasis>
00197 &#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;Arg&#32;*A&#32;:&#32;Args.filtered(OPT_UNKNOWN))&#32;{
00198 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;ArgString&#32;=&#32;A-&gt;getAsString(Args);
00199 &#32;&#32;&#32;&#32;std::string&#32;Nearest;
00200 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(OptTbl.findNearest(ArgString,&#32;Nearest,&#32;IncludedFlagsBitmask)&#32;&gt;&#32;1)
00201 &#32;&#32;&#32;&#32;&#32;&#32;Diags.Report(diag::err_drv_unknown_argument)&#32;&lt;&lt;&#32;ArgString;
00202 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
00203 &#32;&#32;&#32;&#32;&#32;&#32;Diags.Report(diag::err_drv_unknown_argument_with_suggestion)
00204 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;ArgString&#32;&lt;&lt;&#32;Nearest;
00205 &#32;&#32;&#32;&#32;Success&#32;=&#32;<emphasis role="keyword">false</emphasis>;
00206 &#32;&#32;}
00207 
00208 &#32;&#32;<emphasis role="comment">//&#32;Construct&#32;the&#32;invocation.</emphasis>
00209 
00210 &#32;&#32;<emphasis role="comment">//&#32;Target&#32;Options</emphasis>
00211 &#32;&#32;Opts.Triple&#32;=&#32;llvm::Triple::normalize(Args.getLastArgValue(OPT_triple));
00212 &#32;&#32;Opts.CPU&#32;=&#32;std::string(Args.getLastArgValue(OPT_target_cpu));
00213 &#32;&#32;Opts.Features&#32;=&#32;Args.getAllArgValues(OPT_target_feature);
00214 
00215 &#32;&#32;<emphasis role="comment">//&#32;Use&#32;the&#32;default&#32;target&#32;triple&#32;if&#32;unspecified.</emphasis>
00216 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(Opts.Triple.empty())
00217 &#32;&#32;&#32;&#32;Opts.Triple&#32;=&#32;llvm::sys::getDefaultTargetTriple();
00218 
00219 &#32;&#32;<emphasis role="comment">//&#32;Language&#32;Options</emphasis>
00220 &#32;&#32;Opts.IncludePaths&#32;=&#32;Args.getAllArgValues(OPT_I);
00221 &#32;&#32;Opts.NoInitialTextSection&#32;=&#32;Args.hasArg(OPT_n);
00222 &#32;&#32;Opts.SaveTemporaryLabels&#32;=&#32;Args.hasArg(OPT_msave_temp_labels);
00223 &#32;&#32;<emphasis role="comment">//&#32;Any&#32;DebugInfoKind&#32;implies&#32;GenDwarfForAssembly.</emphasis>
00224 &#32;&#32;Opts.GenDwarfForAssembly&#32;=&#32;Args.hasArg(OPT_debug_info_kind_EQ);
00225 
00226 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;Arg&#32;*A&#32;=&#32;Args.getLastArg(OPT_compress_debug_sections_EQ))&#32;{
00227 &#32;&#32;&#32;&#32;Opts.CompressDebugSections&#32;=
00228 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;llvm::StringSwitch&lt;llvm::DebugCompressionType&gt;(A-&gt;getValue())
00229 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;.Case(<emphasis role="stringliteral">&quot;none&quot;</emphasis>,&#32;llvm::DebugCompressionType::None)
00230 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;.Case(<emphasis role="stringliteral">&quot;zlib&quot;</emphasis>,&#32;llvm::DebugCompressionType::Z)
00231 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;.Case(<emphasis role="stringliteral">&quot;zlib-gnu&quot;</emphasis>,&#32;llvm::DebugCompressionType::GNU)
00232 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;.Default(llvm::DebugCompressionType::None);
00233 &#32;&#32;}
00234 
00235 &#32;&#32;Opts.RelaxELFRelocations&#32;=&#32;Args.hasArg(OPT_mrelax_relocations);
00236 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="keyword">auto</emphasis>&#32;*DwarfFormatArg&#32;=&#32;Args.getLastArg(OPT_gdwarf64,&#32;OPT_gdwarf32))
00237 &#32;&#32;&#32;&#32;Opts.Dwarf64&#32;=&#32;DwarfFormatArg-&gt;getOption().matches(OPT_gdwarf64);
00238 &#32;&#32;Opts.DwarfVersion&#32;=&#32;getLastArgIntValue(Args,&#32;OPT_dwarf_version_EQ,&#32;2,&#32;Diags);
00239 &#32;&#32;Opts.DwarfDebugFlags&#32;=
00240 &#32;&#32;&#32;&#32;&#32;&#32;std::string(Args.getLastArgValue(OPT_dwarf_debug_flags));
00241 &#32;&#32;Opts.DwarfDebugProducer&#32;=
00242 &#32;&#32;&#32;&#32;&#32;&#32;std::string(Args.getLastArgValue(OPT_dwarf_debug_producer));
00243 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;Arg&#32;*A&#32;=&#32;Args.getLastArg(options::OPT_ffile_compilation_dir_EQ,
00244 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;options::OPT_fdebug_compilation_dir_EQ))
00245 &#32;&#32;&#32;&#32;Opts.DebugCompilationDir&#32;=&#32;A-&gt;getValue();
00246 &#32;&#32;Opts.MainFileName&#32;=&#32;std::string(Args.getLastArgValue(OPT_main_file_name));
00247 
00248 &#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;&amp;Arg&#32;:&#32;Args.getAllArgValues(OPT_fdebug_prefix_map_EQ))&#32;{
00249 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;Split&#32;=&#32;StringRef(Arg).split(<emphasis role="charliteral">&apos;=&apos;</emphasis>);
00250 &#32;&#32;&#32;&#32;Opts.DebugPrefixMap.insert(
00251 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{std::string(Split.first),&#32;std::string(Split.second)});
00252 &#32;&#32;}
00253 
00254 &#32;&#32;<emphasis role="comment">//&#32;Frontend&#32;Options</emphasis>
00255 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(Args.hasArg(OPT_INPUT))&#32;{
00256 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;First&#32;=&#32;<emphasis role="keyword">true</emphasis>;
00257 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;Arg&#32;*A&#32;:&#32;Args.filtered(OPT_INPUT))&#32;{
00258 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(First)&#32;{
00259 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Opts.InputFile&#32;=&#32;A-&gt;getValue();
00260 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;First&#32;=&#32;<emphasis role="keyword">false</emphasis>;
00261 &#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
00262 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Diags.Report(diag::err_drv_unknown_argument)&#32;&lt;&lt;&#32;A-&gt;getAsString(Args);
00263 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Success&#32;=&#32;<emphasis role="keyword">false</emphasis>;
00264 &#32;&#32;&#32;&#32;&#32;&#32;}
00265 &#32;&#32;&#32;&#32;}
00266 &#32;&#32;}
00267 &#32;&#32;Opts.LLVMArgs&#32;=&#32;Args.getAllArgValues(OPT_mllvm);
00268 &#32;&#32;Opts.OutputPath&#32;=&#32;std::string(Args.getLastArgValue(OPT_o));
00269 &#32;&#32;Opts.SplitDwarfOutput&#32;=
00270 &#32;&#32;&#32;&#32;&#32;&#32;std::string(Args.getLastArgValue(OPT_split_dwarf_output));
00271 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(Arg&#32;*A&#32;=&#32;Args.getLastArg(OPT_filetype))&#32;{
00272 &#32;&#32;&#32;&#32;StringRef&#32;Name&#32;=&#32;A-&gt;getValue();
00273 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;OutputType&#32;=&#32;StringSwitch&lt;unsigned&gt;(Name)
00274 &#32;&#32;&#32;&#32;&#32;&#32;.Case(<emphasis role="stringliteral">&quot;asm&quot;</emphasis>,&#32;FT_Asm)
00275 &#32;&#32;&#32;&#32;&#32;&#32;.Case(<emphasis role="stringliteral">&quot;null&quot;</emphasis>,&#32;FT_Null)
00276 &#32;&#32;&#32;&#32;&#32;&#32;.Case(<emphasis role="stringliteral">&quot;obj&quot;</emphasis>,&#32;FT_Obj)
00277 &#32;&#32;&#32;&#32;&#32;&#32;.Default(~0U);
00278 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(OutputType&#32;==&#32;~0U)&#32;{
00279 &#32;&#32;&#32;&#32;&#32;&#32;Diags.Report(diag::err_drv_invalid_value)&#32;&lt;&lt;&#32;A-&gt;getAsString(Args)&#32;&lt;&lt;&#32;Name;
00280 &#32;&#32;&#32;&#32;&#32;&#32;Success&#32;=&#32;<emphasis role="keyword">false</emphasis>;
00281 &#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>
00282 &#32;&#32;&#32;&#32;&#32;&#32;Opts.OutputType&#32;=&#32;FileType(OutputType);
00283 &#32;&#32;}
00284 &#32;&#32;Opts.ShowHelp&#32;=&#32;Args.hasArg(OPT_help);
00285 &#32;&#32;Opts.ShowVersion&#32;=&#32;Args.hasArg(OPT_version);
00286 
00287 &#32;&#32;<emphasis role="comment">//&#32;Transliterate&#32;Options</emphasis>
00288 &#32;&#32;Opts.OutputAsmVariant&#32;=
00289 &#32;&#32;&#32;&#32;&#32;&#32;getLastArgIntValue(Args,&#32;OPT_output_asm_variant,&#32;0,&#32;Diags);
00290 &#32;&#32;Opts.ShowEncoding&#32;=&#32;Args.hasArg(OPT_show_encoding);
00291 &#32;&#32;Opts.ShowInst&#32;=&#32;Args.hasArg(OPT_show_inst);
00292 
00293 &#32;&#32;<emphasis role="comment">//&#32;Assemble&#32;Options</emphasis>
00294 &#32;&#32;Opts.RelaxAll&#32;=&#32;Args.hasArg(OPT_mrelax_all);
00295 &#32;&#32;Opts.NoExecStack&#32;=&#32;Args.hasArg(OPT_mno_exec_stack);
00296 &#32;&#32;Opts.FatalWarnings&#32;=&#32;Args.hasArg(OPT_massembler_fatal_warnings);
00297 &#32;&#32;Opts.NoWarn&#32;=&#32;Args.hasArg(OPT_massembler_no_warn);
00298 &#32;&#32;Opts.RelocationModel&#32;=
00299 &#32;&#32;&#32;&#32;&#32;&#32;std::string(Args.getLastArgValue(OPT_mrelocation_model,&#32;<emphasis role="stringliteral">&quot;pic&quot;</emphasis>));
00300 &#32;&#32;Opts.TargetABI&#32;=&#32;std::string(Args.getLastArgValue(OPT_target_abi));
00301 &#32;&#32;Opts.IncrementalLinkerCompatible&#32;=
00302 &#32;&#32;&#32;&#32;&#32;&#32;Args.hasArg(OPT_mincremental_linker_compatible);
00303 &#32;&#32;Opts.SymbolDefs&#32;=&#32;Args.getAllArgValues(OPT_defsym);
00304 
00305 &#32;&#32;<emphasis role="comment">//&#32;EmbedBitcode&#32;Option.&#32;If&#32;-fembed-bitcode&#32;is&#32;enabled,&#32;set&#32;the&#32;flag.</emphasis>
00306 &#32;&#32;<emphasis role="comment">//&#32;EmbedBitcode&#32;behaves&#32;the&#32;same&#32;for&#32;all&#32;embed&#32;options&#32;for&#32;assembly&#32;files.</emphasis>
00307 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="keyword">auto</emphasis>&#32;*A&#32;=&#32;Args.getLastArg(OPT_fembed_bitcode_EQ))&#32;{
00308 &#32;&#32;&#32;&#32;Opts.EmbedBitcode&#32;=&#32;llvm::StringSwitch&lt;unsigned&gt;(A-&gt;getValue())
00309 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;.Case(<emphasis role="stringliteral">&quot;all&quot;</emphasis>,&#32;1)
00310 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;.Case(<emphasis role="stringliteral">&quot;bitcode&quot;</emphasis>,&#32;1)
00311 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;.Case(<emphasis role="stringliteral">&quot;marker&quot;</emphasis>,&#32;1)
00312 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;.Default(0);
00313 &#32;&#32;}
00314 
00315 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;Success;
00316 }
00317 
00318 <emphasis role="keyword">static</emphasis>&#32;std::unique_ptr&lt;raw_fd_ostream&gt;
00319 getOutputStream(StringRef&#32;Path,&#32;DiagnosticsEngine&#32;&amp;Diags,&#32;<emphasis role="keywordtype">bool</emphasis>&#32;Binary)&#32;{
00320 &#32;&#32;<emphasis role="comment">//&#32;Make&#32;sure&#32;that&#32;the&#32;Out&#32;file&#32;gets&#32;unlinked&#32;from&#32;the&#32;disk&#32;if&#32;we&#32;get&#32;a</emphasis>
00321 &#32;&#32;<emphasis role="comment">//&#32;SIGINT.</emphasis>
00322 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(Path&#32;!=&#32;<emphasis role="stringliteral">&quot;-&quot;</emphasis>)
00323 &#32;&#32;&#32;&#32;sys::RemoveFileOnSignal(Path);
00324 
00325 &#32;&#32;std::error_code&#32;EC;
00326 &#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;Out&#32;=&#32;std::make_unique&lt;raw_fd_ostream&gt;(
00327 &#32;&#32;&#32;&#32;&#32;&#32;Path,&#32;EC,&#32;(Binary&#32;?&#32;sys::fs::OF_None&#32;:&#32;sys::fs::OF_TextWithCRLF));
00328 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(EC)&#32;{
00329 &#32;&#32;&#32;&#32;Diags.Report(diag::err_fe_unable_to_open_output)&#32;&lt;&lt;&#32;Path&#32;&lt;&lt;&#32;EC.message();
00330 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">nullptr</emphasis>;
00331 &#32;&#32;}
00332 
00333 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;Out;
00334 }
00335 
00336 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;ExecuteAssemblerImpl(AssemblerInvocation&#32;&amp;Opts,
00337 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;DiagnosticsEngine&#32;&amp;Diags)&#32;{
00338 &#32;&#32;<emphasis role="comment">//&#32;Get&#32;the&#32;target&#32;specific&#32;parser.</emphasis>
00339 &#32;&#32;std::string&#32;Error;
00340 &#32;&#32;<emphasis role="keyword">const</emphasis>&#32;Target&#32;*TheTarget&#32;=&#32;TargetRegistry::lookupTarget(Opts.Triple,&#32;Error);
00341 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!TheTarget)
00342 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;Diags.Report(diag::err_target_unknown_triple)&#32;&lt;&lt;&#32;Opts.Triple;
00343 
00344 &#32;&#32;ErrorOr&lt;std::unique_ptr&lt;MemoryBuffer&gt;&gt;&#32;Buffer&#32;=
00345 &#32;&#32;&#32;&#32;&#32;&#32;MemoryBuffer::getFileOrSTDIN(Opts.InputFile,&#32;<emphasis role="comment">/*IsText=*/</emphasis><emphasis role="keyword">true</emphasis>);
00346 
00347 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(std::error_code&#32;EC&#32;=&#32;Buffer.getError())&#32;{
00348 &#32;&#32;&#32;&#32;Error&#32;=&#32;EC.message();
00349 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;Diags.Report(diag::err_fe_error_reading)&#32;&lt;&lt;&#32;Opts.InputFile;
00350 &#32;&#32;}
00351 
00352 &#32;&#32;SourceMgr&#32;SrcMgr;
00353 
00354 &#32;&#32;<emphasis role="comment">//&#32;Tell&#32;SrcMgr&#32;about&#32;this&#32;buffer,&#32;which&#32;is&#32;what&#32;the&#32;parser&#32;will&#32;pick&#32;up.</emphasis>
00355 &#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;BufferIndex&#32;=&#32;SrcMgr.AddNewSourceBuffer(std::move(*Buffer),&#32;SMLoc());
00356 
00357 &#32;&#32;<emphasis role="comment">//&#32;Record&#32;the&#32;location&#32;of&#32;the&#32;include&#32;directories&#32;so&#32;that&#32;the&#32;lexer&#32;can&#32;find</emphasis>
00358 &#32;&#32;<emphasis role="comment">//&#32;it&#32;later.</emphasis>
00359 &#32;&#32;SrcMgr.setIncludeDirs(Opts.IncludePaths);
00360 
00361 &#32;&#32;std::unique_ptr&lt;MCRegisterInfo&gt;&#32;MRI(TheTarget-&gt;createMCRegInfo(Opts.Triple));
00362 &#32;&#32;assert(MRI&#32;&amp;&amp;&#32;<emphasis role="stringliteral">&quot;Unable&#32;to&#32;create&#32;target&#32;register&#32;info!&quot;</emphasis>);
00363 
00364 &#32;&#32;MCTargetOptions&#32;MCOptions;
00365 &#32;&#32;std::unique_ptr&lt;MCAsmInfo&gt;&#32;MAI(
00366 &#32;&#32;&#32;&#32;&#32;&#32;TheTarget-&gt;createMCAsmInfo(*MRI,&#32;Opts.Triple,&#32;MCOptions));
00367 &#32;&#32;assert(MAI&#32;&amp;&amp;&#32;<emphasis role="stringliteral">&quot;Unable&#32;to&#32;create&#32;target&#32;asm&#32;info!&quot;</emphasis>);
00368 
00369 &#32;&#32;<emphasis role="comment">//&#32;Ensure&#32;MCAsmInfo&#32;initialization&#32;occurs&#32;before&#32;any&#32;use,&#32;otherwise&#32;sections</emphasis>
00370 &#32;&#32;<emphasis role="comment">//&#32;may&#32;be&#32;created&#32;with&#32;a&#32;combination&#32;of&#32;default&#32;and&#32;explicit&#32;settings.</emphasis>
00371 &#32;&#32;MAI-&gt;setCompressDebugSections(Opts.CompressDebugSections);
00372 
00373 &#32;&#32;MAI-&gt;setRelaxELFRelocations(Opts.RelaxELFRelocations);
00374 
00375 &#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;IsBinary&#32;=&#32;Opts.OutputType&#32;==&#32;AssemblerInvocation::FT_Obj;
00376 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(Opts.OutputPath.empty())
00377 &#32;&#32;&#32;&#32;Opts.OutputPath&#32;=&#32;<emphasis role="stringliteral">&quot;-&quot;</emphasis>;
00378 &#32;&#32;std::unique_ptr&lt;raw_fd_ostream&gt;&#32;FDOS&#32;=
00379 &#32;&#32;&#32;&#32;&#32;&#32;getOutputStream(Opts.OutputPath,&#32;Diags,&#32;IsBinary);
00380 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!FDOS)
00381 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
00382 &#32;&#32;std::unique_ptr&lt;raw_fd_ostream&gt;&#32;DwoOS;
00383 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!Opts.SplitDwarfOutput.empty())
00384 &#32;&#32;&#32;&#32;DwoOS&#32;=&#32;getOutputStream(Opts.SplitDwarfOutput,&#32;Diags,&#32;IsBinary);
00385 
00386 &#32;&#32;<emphasis role="comment">//&#32;Build&#32;up&#32;the&#32;feature&#32;string&#32;from&#32;the&#32;target&#32;feature&#32;list.</emphasis>
00387 &#32;&#32;std::string&#32;FS&#32;=&#32;llvm::join(Opts.Features,&#32;<emphasis role="stringliteral">&quot;,&quot;</emphasis>);
00388 
00389 &#32;&#32;std::unique_ptr&lt;MCSubtargetInfo&gt;&#32;STI(
00390 &#32;&#32;&#32;&#32;&#32;&#32;TheTarget-&gt;createMCSubtargetInfo(Opts.Triple,&#32;Opts.CPU,&#32;FS));
00391 &#32;&#32;assert(STI&#32;&amp;&amp;&#32;<emphasis role="stringliteral">&quot;Unable&#32;to&#32;create&#32;subtarget&#32;info!&quot;</emphasis>);
00392 
00393 &#32;&#32;MCContext&#32;Ctx(Triple(Opts.Triple),&#32;MAI.get(),&#32;MRI.get(),&#32;STI.get(),&#32;&amp;SrcMgr,
00394 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;MCOptions);
00395 
00396 &#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;PIC&#32;=&#32;<emphasis role="keyword">false</emphasis>;
00397 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(Opts.RelocationModel&#32;==&#32;<emphasis role="stringliteral">&quot;static&quot;</emphasis>)&#32;{
00398 &#32;&#32;&#32;&#32;PIC&#32;=&#32;<emphasis role="keyword">false</emphasis>;
00399 &#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(Opts.RelocationModel&#32;==&#32;<emphasis role="stringliteral">&quot;pic&quot;</emphasis>)&#32;{
00400 &#32;&#32;&#32;&#32;PIC&#32;=&#32;<emphasis role="keyword">true</emphasis>;
00401 &#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
00402 &#32;&#32;&#32;&#32;assert(Opts.RelocationModel&#32;==&#32;<emphasis role="stringliteral">&quot;dynamic-no-pic&quot;</emphasis>&#32;&amp;&amp;
00403 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;Invalid&#32;PIC&#32;model!&quot;</emphasis>);
00404 &#32;&#32;&#32;&#32;PIC&#32;=&#32;<emphasis role="keyword">false</emphasis>;
00405 &#32;&#32;}
00406 
00407 &#32;&#32;<emphasis role="comment">//&#32;FIXME:&#32;This&#32;is&#32;not&#32;pretty.&#32;MCContext&#32;has&#32;a&#32;ptr&#32;to&#32;MCObjectFileInfo&#32;and</emphasis>
00408 &#32;&#32;<emphasis role="comment">//&#32;MCObjectFileInfo&#32;needs&#32;a&#32;MCContext&#32;reference&#32;in&#32;order&#32;to&#32;initialize&#32;itself.</emphasis>
00409 &#32;&#32;std::unique_ptr&lt;MCObjectFileInfo&gt;&#32;MOFI(
00410 &#32;&#32;&#32;&#32;&#32;&#32;TheTarget-&gt;createMCObjectFileInfo(Ctx,&#32;PIC));
00411 &#32;&#32;Ctx.setObjectFileInfo(MOFI.get());
00412 
00413 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(Opts.SaveTemporaryLabels)
00414 &#32;&#32;&#32;&#32;Ctx.setAllowTemporaryLabels(<emphasis role="keyword">false</emphasis>);
00415 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(Opts.GenDwarfForAssembly)
00416 &#32;&#32;&#32;&#32;Ctx.setGenDwarfForAssembly(<emphasis role="keyword">true</emphasis>);
00417 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!Opts.DwarfDebugFlags.empty())
00418 &#32;&#32;&#32;&#32;Ctx.setDwarfDebugFlags(StringRef(Opts.DwarfDebugFlags));
00419 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!Opts.DwarfDebugProducer.empty())
00420 &#32;&#32;&#32;&#32;Ctx.setDwarfDebugProducer(StringRef(Opts.DwarfDebugProducer));
00421 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!Opts.DebugCompilationDir.empty())
00422 &#32;&#32;&#32;&#32;Ctx.setCompilationDir(Opts.DebugCompilationDir);
00423 &#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
00424 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;If&#32;no&#32;compilation&#32;dir&#32;is&#32;set,&#32;try&#32;to&#32;use&#32;the&#32;current&#32;directory.</emphasis>
00425 &#32;&#32;&#32;&#32;SmallString&lt;128&gt;&#32;CWD;
00426 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!sys::fs::current_path(CWD))
00427 &#32;&#32;&#32;&#32;&#32;&#32;Ctx.setCompilationDir(CWD);
00428 &#32;&#32;}
00429 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!Opts.DebugPrefixMap.empty())
00430 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;&amp;KV&#32;:&#32;Opts.DebugPrefixMap)
00431 &#32;&#32;&#32;&#32;&#32;&#32;Ctx.addDebugPrefixMapEntry(KV.first,&#32;KV.second);
00432 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!Opts.MainFileName.empty())
00433 &#32;&#32;&#32;&#32;Ctx.setMainFileName(StringRef(Opts.MainFileName));
00434 &#32;&#32;Ctx.setDwarfFormat(Opts.Dwarf64&#32;?&#32;dwarf::DWARF64&#32;:&#32;dwarf::DWARF32);
00435 &#32;&#32;Ctx.setDwarfVersion(Opts.DwarfVersion);
00436 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(Opts.GenDwarfForAssembly)
00437 &#32;&#32;&#32;&#32;Ctx.setGenDwarfRootFile(Opts.InputFile,
00438 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;SrcMgr.getMemoryBuffer(BufferIndex)-&gt;getBuffer());
00439 
00440 &#32;&#32;std::unique_ptr&lt;MCStreamer&gt;&#32;Str;
00441 
00442 &#32;&#32;std::unique_ptr&lt;MCInstrInfo&gt;&#32;MCII(TheTarget-&gt;createMCInstrInfo());
00443 &#32;&#32;assert(MCII&#32;&amp;&amp;&#32;<emphasis role="stringliteral">&quot;Unable&#32;to&#32;create&#32;instruction&#32;info!&quot;</emphasis>);
00444 
00445 &#32;&#32;raw_pwrite_stream&#32;*Out&#32;=&#32;FDOS.get();
00446 &#32;&#32;std::unique_ptr&lt;buffer_ostream&gt;&#32;BOS;
00447 
00448 &#32;&#32;MCOptions.MCNoWarn&#32;=&#32;Opts.NoWarn;
00449 &#32;&#32;MCOptions.MCFatalWarnings&#32;=&#32;Opts.FatalWarnings;
00450 &#32;&#32;MCOptions.ABIName&#32;=&#32;Opts.TargetABI;
00451 
00452 &#32;&#32;<emphasis role="comment">//&#32;FIXME:&#32;There&#32;is&#32;a&#32;bit&#32;of&#32;code&#32;duplication&#32;with&#32;addPassesToEmitFile.</emphasis>
00453 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(Opts.OutputType&#32;==&#32;AssemblerInvocation::FT_Asm)&#32;{
00454 &#32;&#32;&#32;&#32;MCInstPrinter&#32;*IP&#32;=&#32;TheTarget-&gt;createMCInstPrinter(
00455 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;llvm::Triple(Opts.Triple),&#32;Opts.OutputAsmVariant,&#32;*MAI,&#32;*MCII,&#32;*MRI);
00456 
00457 &#32;&#32;&#32;&#32;std::unique_ptr&lt;MCCodeEmitter&gt;&#32;CE;
00458 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(Opts.ShowEncoding)
00459 &#32;&#32;&#32;&#32;&#32;&#32;CE.reset(TheTarget-&gt;createMCCodeEmitter(*MCII,&#32;*MRI,&#32;Ctx));
00460 &#32;&#32;&#32;&#32;std::unique_ptr&lt;MCAsmBackend&gt;&#32;MAB(
00461 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;TheTarget-&gt;createMCAsmBackend(*STI,&#32;*MRI,&#32;MCOptions));
00462 
00463 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;FOut&#32;=&#32;std::make_unique&lt;formatted_raw_ostream&gt;(*Out);
00464 &#32;&#32;&#32;&#32;Str.reset(TheTarget-&gt;createAsmStreamer(
00465 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Ctx,&#32;std::move(FOut),&#32;<emphasis role="comment">/*asmverbose*/</emphasis>&#32;<emphasis role="keyword">true</emphasis>,
00466 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*useDwarfDirectory*/</emphasis>&#32;<emphasis role="keyword">true</emphasis>,&#32;IP,&#32;std::move(CE),&#32;std::move(MAB),
00467 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Opts.ShowInst));
00468 &#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(Opts.OutputType&#32;==&#32;AssemblerInvocation::FT_Null)&#32;{
00469 &#32;&#32;&#32;&#32;Str.reset(createNullStreamer(Ctx));
00470 &#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
00471 &#32;&#32;&#32;&#32;assert(Opts.OutputType&#32;==&#32;AssemblerInvocation::FT_Obj&#32;&amp;&amp;
00472 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;Invalid&#32;file&#32;type!&quot;</emphasis>);
00473 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!FDOS-&gt;supportsSeeking())&#32;{
00474 &#32;&#32;&#32;&#32;&#32;&#32;BOS&#32;=&#32;std::make_unique&lt;buffer_ostream&gt;(*FDOS);
00475 &#32;&#32;&#32;&#32;&#32;&#32;Out&#32;=&#32;BOS.get();
00476 &#32;&#32;&#32;&#32;}
00477 
00478 &#32;&#32;&#32;&#32;std::unique_ptr&lt;MCCodeEmitter&gt;&#32;CE(
00479 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;TheTarget-&gt;createMCCodeEmitter(*MCII,&#32;*MRI,&#32;Ctx));
00480 &#32;&#32;&#32;&#32;std::unique_ptr&lt;MCAsmBackend&gt;&#32;MAB(
00481 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;TheTarget-&gt;createMCAsmBackend(*STI,&#32;*MRI,&#32;MCOptions));
00482 &#32;&#32;&#32;&#32;assert(MAB&#32;&amp;&amp;&#32;<emphasis role="stringliteral">&quot;Unable&#32;to&#32;create&#32;asm&#32;backend!&quot;</emphasis>);
00483 
00484 &#32;&#32;&#32;&#32;std::unique_ptr&lt;MCObjectWriter&gt;&#32;OW&#32;=
00485 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;DwoOS&#32;?&#32;MAB-&gt;createDwoObjectWriter(*Out,&#32;*DwoOS)
00486 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;MAB-&gt;createObjectWriter(*Out);
00487 
00488 &#32;&#32;&#32;&#32;Triple&#32;T(Opts.Triple);
00489 &#32;&#32;&#32;&#32;Str.reset(TheTarget-&gt;createMCObjectStreamer(
00490 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;T,&#32;Ctx,&#32;std::move(MAB),&#32;std::move(OW),&#32;std::move(CE),&#32;*STI,
00491 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Opts.RelaxAll,&#32;Opts.IncrementalLinkerCompatible,
00492 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*DWARFMustBeAtTheEnd*/</emphasis>&#32;<emphasis role="keyword">true</emphasis>));
00493 &#32;&#32;&#32;&#32;Str.get()-&gt;InitSections(Opts.NoExecStack);
00494 &#32;&#32;}
00495 
00496 &#32;&#32;<emphasis role="comment">//&#32;When&#32;-fembed-bitcode&#32;is&#32;passed&#32;to&#32;clang_as,&#32;a&#32;1-byte&#32;marker</emphasis>
00497 &#32;&#32;<emphasis role="comment">//&#32;is&#32;emitted&#32;in&#32;__LLVM,__asm&#32;section&#32;if&#32;the&#32;object&#32;file&#32;is&#32;MachO&#32;format.</emphasis>
00498 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(Opts.EmbedBitcode&#32;&amp;&amp;&#32;Ctx.getObjectFileType()&#32;==&#32;MCContext::IsMachO)&#32;{
00499 &#32;&#32;&#32;&#32;MCSection&#32;*AsmLabel&#32;=&#32;Ctx.getMachOSection(
00500 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;__LLVM&quot;</emphasis>,&#32;<emphasis role="stringliteral">&quot;__asm&quot;</emphasis>,&#32;MachO::S_REGULAR,&#32;4,&#32;SectionKind::getReadOnly());
00501 &#32;&#32;&#32;&#32;Str.get()-&gt;SwitchSection(AsmLabel);
00502 &#32;&#32;&#32;&#32;Str.get()-&gt;emitZeros(1);
00503 &#32;&#32;}
00504 
00505 &#32;&#32;<emphasis role="comment">//&#32;Assembly&#32;to&#32;object&#32;compilation&#32;should&#32;leverage&#32;assembly&#32;info.</emphasis>
00506 &#32;&#32;Str-&gt;setUseAssemblerInfoForParsing(<emphasis role="keyword">true</emphasis>);
00507 
00508 &#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;Failed&#32;=&#32;<emphasis role="keyword">false</emphasis>;
00509 
00510 &#32;&#32;std::unique_ptr&lt;MCAsmParser&gt;&#32;Parser(
00511 &#32;&#32;&#32;&#32;&#32;&#32;createMCAsmParser(SrcMgr,&#32;Ctx,&#32;*Str.get(),&#32;*MAI));
00512 
00513 &#32;&#32;<emphasis role="comment">//&#32;FIXME:&#32;init&#32;MCTargetOptions&#32;from&#32;sanitizer&#32;flags&#32;here.</emphasis>
00514 &#32;&#32;std::unique_ptr&lt;MCTargetAsmParser&gt;&#32;TAP(
00515 &#32;&#32;&#32;&#32;&#32;&#32;TheTarget-&gt;createMCAsmParser(*STI,&#32;*Parser,&#32;*MCII,&#32;MCOptions));
00516 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!TAP)
00517 &#32;&#32;&#32;&#32;Failed&#32;=&#32;Diags.Report(diag::err_target_unknown_triple)&#32;&lt;&lt;&#32;Opts.Triple;
00518 
00519 &#32;&#32;<emphasis role="comment">//&#32;Set&#32;values&#32;for&#32;symbols,&#32;if&#32;any.</emphasis>
00520 &#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">auto</emphasis>&#32;&amp;S&#32;:&#32;Opts.SymbolDefs)&#32;{
00521 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;Pair&#32;=&#32;StringRef(S).split(<emphasis role="charliteral">&apos;=&apos;</emphasis>);
00522 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;Sym&#32;=&#32;Pair.first;
00523 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;Val&#32;=&#32;Pair.second;
00524 &#32;&#32;&#32;&#32;int64_t&#32;Value;
00525 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;We&#32;have&#32;already&#32;error&#32;checked&#32;this&#32;in&#32;the&#32;driver.</emphasis>
00526 &#32;&#32;&#32;&#32;Val.getAsInteger(0,&#32;Value);
00527 &#32;&#32;&#32;&#32;Ctx.setSymbolValue(Parser-&gt;getStreamer(),&#32;Sym,&#32;Value);
00528 &#32;&#32;}
00529 
00530 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!Failed)&#32;{
00531 &#32;&#32;&#32;&#32;Parser-&gt;setTargetParser(*TAP.get());
00532 &#32;&#32;&#32;&#32;Failed&#32;=&#32;Parser-&gt;Run(Opts.NoInitialTextSection);
00533 &#32;&#32;}
00534 
00535 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;Failed;
00536 }
00537 
00538 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;ExecuteAssembler(AssemblerInvocation&#32;&amp;Opts,
00539 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;DiagnosticsEngine&#32;&amp;Diags)&#32;{
00540 &#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;Failed&#32;=&#32;ExecuteAssemblerImpl(Opts,&#32;Diags);
00541 
00542 &#32;&#32;<emphasis role="comment">//&#32;Delete&#32;output&#32;file&#32;if&#32;there&#32;were&#32;errors.</emphasis>
00543 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(Failed)&#32;{
00544 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(Opts.OutputPath&#32;!=&#32;<emphasis role="stringliteral">&quot;-&quot;</emphasis>)
00545 &#32;&#32;&#32;&#32;&#32;&#32;sys::fs::remove(Opts.OutputPath);
00546 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!Opts.SplitDwarfOutput.empty()&#32;&amp;&amp;&#32;Opts.SplitDwarfOutput&#32;!=&#32;<emphasis role="stringliteral">&quot;-&quot;</emphasis>)
00547 &#32;&#32;&#32;&#32;&#32;&#32;sys::fs::remove(Opts.SplitDwarfOutput);
00548 &#32;&#32;}
00549 
00550 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;Failed;
00551 }
00552 
00553 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;LLVMErrorHandler(<emphasis role="keywordtype">void</emphasis>&#32;*UserData,&#32;<emphasis role="keyword">const</emphasis>&#32;std::string&#32;&amp;Message,
00554 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;GenCrashDiag)&#32;{
00555 &#32;&#32;DiagnosticsEngine&#32;&amp;Diags&#32;=&#32;*<emphasis role="keyword">static_cast&lt;</emphasis>DiagnosticsEngine*<emphasis role="keyword">&gt;</emphasis>(UserData);
00556 
00557 &#32;&#32;Diags.Report(diag::err_fe_error_backend)&#32;&lt;&lt;&#32;Message;
00558 
00559 &#32;&#32;<emphasis role="comment">//&#32;We&#32;cannot&#32;recover&#32;from&#32;llvm&#32;errors.</emphasis>
00560 &#32;&#32;sys::Process::Exit(1);
00561 }
00562 
<anchor xml:id="_cc1as__main_8cpp_source_1l00563"/><link linkend="_cc1as__main_8cpp_1ac7d9c4a59e9773f938ddff75f14b90a6">00563</link> <emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_cc1as__main_8cpp_1ac7d9c4a59e9773f938ddff75f14b90a6">cc1as_main</link>(ArrayRef&lt;const&#32;char&#32;*&gt;&#32;Argv,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*Argv0,&#32;<emphasis role="keywordtype">void</emphasis>&#32;*MainAddr)&#32;{
00564 &#32;&#32;<emphasis role="comment">//&#32;Initialize&#32;targets&#32;and&#32;assembly&#32;printers/parsers.</emphasis>
00565 &#32;&#32;InitializeAllTargetInfos();
00566 &#32;&#32;InitializeAllTargetMCs();
00567 &#32;&#32;InitializeAllAsmParsers();
00568 
00569 &#32;&#32;<emphasis role="comment">//&#32;Construct&#32;our&#32;diagnostic&#32;client.</emphasis>
00570 &#32;&#32;IntrusiveRefCntPtr&lt;DiagnosticOptions&gt;&#32;DiagOpts&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;DiagnosticOptions();
00571 &#32;&#32;TextDiagnosticPrinter&#32;*DiagClient
00572 &#32;&#32;&#32;&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;TextDiagnosticPrinter(errs(),&#32;&amp;*DiagOpts);
00573 &#32;&#32;DiagClient-&gt;setPrefix(<emphasis role="stringliteral">&quot;clang&#32;-cc1as&quot;</emphasis>);
00574 &#32;&#32;IntrusiveRefCntPtr&lt;DiagnosticIDs&gt;&#32;DiagID(<emphasis role="keyword">new</emphasis>&#32;DiagnosticIDs());
00575 &#32;&#32;DiagnosticsEngine&#32;Diags(DiagID,&#32;&amp;*DiagOpts,&#32;DiagClient);
00576 
00577 &#32;&#32;<emphasis role="comment">//&#32;Set&#32;an&#32;error&#32;handler,&#32;so&#32;that&#32;any&#32;LLVM&#32;backend&#32;diagnostics&#32;go&#32;through&#32;our</emphasis>
00578 &#32;&#32;<emphasis role="comment">//&#32;error&#32;handler.</emphasis>
00579 &#32;&#32;ScopedFatalErrorHandler&#32;FatalErrorHandler
00580 &#32;&#32;&#32;&#32;(LLVMErrorHandler,&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">void</emphasis>*<emphasis role="keyword">&gt;</emphasis>(&amp;Diags));
00581 
00582 &#32;&#32;<emphasis role="comment">//&#32;Parse&#32;the&#32;arguments.</emphasis>
00583 &#32;&#32;AssemblerInvocation&#32;Asm;
00584 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!AssemblerInvocation::CreateFromArgs(Asm,&#32;Argv,&#32;Diags))
00585 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;1;
00586 
00587 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(Asm.ShowHelp)&#32;{
00588 &#32;&#32;&#32;&#32;getDriverOptTable().printHelp(
00589 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;llvm::outs(),&#32;<emphasis role="stringliteral">&quot;clang&#32;-cc1as&#32;[options]&#32;file...&quot;</emphasis>,
00590 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;Clang&#32;Integrated&#32;Assembler&quot;</emphasis>,
00591 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*Include=*/</emphasis>driver::options::CC1AsOption,&#32;<emphasis role="comment">/*Exclude=*/</emphasis>0,
00592 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*ShowAllAliases=*/</emphasis><emphasis role="keyword">false</emphasis>);
00593 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
00594 &#32;&#32;}
00595 
00596 &#32;&#32;<emphasis role="comment">//&#32;Honor&#32;-version.</emphasis>
00597 &#32;&#32;<emphasis role="comment">//</emphasis>
00598 &#32;&#32;<emphasis role="comment">//&#32;FIXME:&#32;Use&#32;a&#32;better&#32;-version&#32;message?</emphasis>
00599 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(Asm.ShowVersion)&#32;{
00600 &#32;&#32;&#32;&#32;llvm::cl::PrintVersionMessage();
00601 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
00602 &#32;&#32;}
00603 
00604 &#32;&#32;<emphasis role="comment">//&#32;Honor&#32;-mllvm.</emphasis>
00605 &#32;&#32;<emphasis role="comment">//</emphasis>
00606 &#32;&#32;<emphasis role="comment">//&#32;FIXME:&#32;Remove&#32;this,&#32;one&#32;day.</emphasis>
00607 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!Asm.LLVMArgs.empty())&#32;{
00608 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;NumArgs&#32;=&#32;Asm.LLVMArgs.size();
00609 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;Args&#32;=&#32;std::make_unique&lt;const&#32;char*[]&gt;(NumArgs&#32;+&#32;2);
00610 &#32;&#32;&#32;&#32;Args[0]&#32;=&#32;<emphasis role="stringliteral">&quot;clang&#32;(LLVM&#32;option&#32;parsing)&quot;</emphasis>;
00611 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">unsigned</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;!=&#32;NumArgs;&#32;++i)
00612 &#32;&#32;&#32;&#32;&#32;&#32;Args[i&#32;+&#32;1]&#32;=&#32;Asm.LLVMArgs[i].c_str();
00613 &#32;&#32;&#32;&#32;Args[NumArgs&#32;+&#32;1]&#32;=&#32;<emphasis role="keyword">nullptr</emphasis>;
00614 &#32;&#32;&#32;&#32;llvm::cl::ParseCommandLineOptions(NumArgs&#32;+&#32;1,&#32;Args.get());
00615 &#32;&#32;}
00616 
00617 &#32;&#32;<emphasis role="comment">//&#32;Execute&#32;the&#32;invocation,&#32;unless&#32;there&#32;were&#32;parsing&#32;errors.</emphasis>
00618 &#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;Failed&#32;=&#32;Diags.hasErrorOccurred()&#32;||&#32;ExecuteAssembler(Asm,&#32;Diags);
00619 
00620 &#32;&#32;<emphasis role="comment">//&#32;If&#32;any&#32;timers&#32;were&#32;active&#32;but&#32;haven&apos;t&#32;been&#32;destroyed&#32;yet,&#32;print&#32;their</emphasis>
00621 &#32;&#32;<emphasis role="comment">//&#32;results&#32;now.</emphasis>
00622 &#32;&#32;TimerGroup::printAll(errs());
00623 &#32;&#32;TimerGroup::clearAll();
00624 
00625 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;!!Failed;
00626 }
</programlisting></section>
