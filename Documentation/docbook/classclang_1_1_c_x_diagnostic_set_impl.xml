<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_classclang_1_1_c_x_diagnostic_set_impl" xml:lang="en-US">
<title>clang::CXDiagnosticSetImpl Class Reference</title>
<indexterm><primary>clang::CXDiagnosticSetImpl</primary></indexterm>
<para>
<computeroutput>#include &lt;CIndexDiagnostic.h&gt;</computeroutput>
</para>
<simplesect>
    <title>Public Member Functions    </title>
        <itemizedlist>
            <listitem><para><link linkend="_classclang_1_1_c_x_diagnostic_set_impl_1a19af2a7fc872b2ec990bfb01d5170c0f">CXDiagnosticSetImpl</link> (bool isManaged=false)</para>
</listitem>
            <listitem><para>virtual <link linkend="_classclang_1_1_c_x_diagnostic_set_impl_1a751e674632b4a7a4139656a4b0a942b1">~CXDiagnosticSetImpl</link> ()</para>
</listitem>
            <listitem><para>size_t <link linkend="_classclang_1_1_c_x_diagnostic_set_impl_1a4f8dbf6c6514ec1fdf340268f50409cb">getNumDiagnostics</link> () const</para>
</listitem>
            <listitem><para><link linkend="_classclang_1_1_c_x_diagnostic_impl">CXDiagnosticImpl</link> * <link linkend="_classclang_1_1_c_x_diagnostic_set_impl_1a9394b1033650346808f1adb6ee947819">getDiagnostic</link> (unsigned i) const</para>
</listitem>
            <listitem><para>void <link linkend="_classclang_1_1_c_x_diagnostic_set_impl_1a48fbd8d5f59446e568395bc0690db789">appendDiagnostic</link> (std::unique_ptr&lt; <link linkend="_classclang_1_1_c_x_diagnostic_impl">CXDiagnosticImpl</link> &gt; D)</para>
</listitem>
            <listitem><para>bool <link linkend="_classclang_1_1_c_x_diagnostic_set_impl_1a3d0cc12fe17cca790dc0d16a9cf9b9b7">empty</link> () const</para>
</listitem>
            <listitem><para>bool <link linkend="_classclang_1_1_c_x_diagnostic_set_impl_1adbda323a4302505eff931c7ad0271339">isExternallyManaged</link> () const</para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Detailed Description</title>
<para>
Definition at line <link linkend="__c_index_diagnostic_8h_source_1l00027">27</link> of file <link linkend="__c_index_diagnostic_8h_source">CIndexDiagnostic.h</link>.</para>
</section>
<section>
<title>Constructor &amp; Destructor Documentation</title>
<anchor xml:id="_classclang_1_1_c_x_diagnostic_set_impl_1a19af2a7fc872b2ec990bfb01d5170c0f"/>    <section>
    <title>CXDiagnosticSetImpl()</title>
<indexterm><primary>CXDiagnosticSetImpl</primary><secondary>clang::CXDiagnosticSetImpl</secondary></indexterm>
<indexterm><primary>clang::CXDiagnosticSetImpl</primary><secondary>CXDiagnosticSetImpl</secondary></indexterm>
<para><computeroutput>clang::CXDiagnosticSetImpl::CXDiagnosticSetImpl (bool isManaged = <computeroutput>false</computeroutput>
)<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line <link linkend="__c_index_diagnostic_8h_source_1l00031">31</link> of file <link linkend="__c_index_diagnostic_8h_source">CIndexDiagnostic.h</link>.</para>
<programlisting>00032 &#32;&#32;&#32;&#32;:&#32;IsExternallyManaged(isManaged)&#32;{}
</programlisting>    </section><anchor xml:id="_classclang_1_1_c_x_diagnostic_set_impl_1a751e674632b4a7a4139656a4b0a942b1"/>    <section>
    <title>~CXDiagnosticSetImpl()</title>
<indexterm><primary>~CXDiagnosticSetImpl</primary><secondary>clang::CXDiagnosticSetImpl</secondary></indexterm>
<indexterm><primary>clang::CXDiagnosticSetImpl</primary><secondary>~CXDiagnosticSetImpl</secondary></indexterm>
<para><computeroutput>CXDiagnosticSetImpl::~CXDiagnosticSetImpl ( )<computeroutput>[virtual]</computeroutput></computeroutput></para><para>
Definition at line <link linkend="__c_index_diagnostic_8cpp_source_1l00030">30</link> of file <link linkend="__c_index_diagnostic_8cpp_source">CIndexDiagnostic.cpp</link>.</para>
<programlisting>00030 {}
</programlisting></section>
</section>
<section>
<title>Member Function Documentation</title>
<anchor xml:id="_classclang_1_1_c_x_diagnostic_set_impl_1a48fbd8d5f59446e568395bc0690db789"/>    <section>
    <title>appendDiagnostic()</title>
<indexterm><primary>appendDiagnostic</primary><secondary>clang::CXDiagnosticSetImpl</secondary></indexterm>
<indexterm><primary>clang::CXDiagnosticSetImpl</primary><secondary>appendDiagnostic</secondary></indexterm>
<para><computeroutput>void CXDiagnosticSetImpl::appendDiagnostic (std::unique_ptr&lt; <link linkend="_classclang_1_1_c_x_diagnostic_impl">CXDiagnosticImpl</link> &gt; D)</computeroutput></para><para>
Definition at line <link linkend="__c_index_diagnostic_8cpp_source_1l00033">33</link> of file <link linkend="__c_index_diagnostic_8cpp_source">CIndexDiagnostic.cpp</link>.</para>
<programlisting>00033 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00034 &#32;&#32;Diagnostics.push_back(std::move(D));
00035 }
</programlisting><para>
Referenced by <link linkend="__c_index_diagnostic_8h_source_1l00102">clang::CXDiagnosticImpl::append()</link>.</para>
    </section><anchor xml:id="_classclang_1_1_c_x_diagnostic_set_impl_1a3d0cc12fe17cca790dc0d16a9cf9b9b7"/>    <section>
    <title>empty()</title>
<indexterm><primary>empty</primary><secondary>clang::CXDiagnosticSetImpl</secondary></indexterm>
<indexterm><primary>clang::CXDiagnosticSetImpl</primary><secondary>empty</secondary></indexterm>
<para><computeroutput>bool clang::CXDiagnosticSetImpl::empty ( ) const<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line <link linkend="__c_index_diagnostic_8h_source_1l00047">47</link> of file <link linkend="__c_index_diagnostic_8h_source">CIndexDiagnostic.h</link>.</para>
<programlisting>00047 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00048 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;Diagnostics.empty();
00049 &#32;&#32;}
</programlisting><para>
Referenced by <link linkend="__c_index_diagnostic_8cpp_source_1l00456">clang_getChildDiagnostics()</link>.</para>
    </section><anchor xml:id="_classclang_1_1_c_x_diagnostic_set_impl_1a9394b1033650346808f1adb6ee947819"/>    <section>
    <title>getDiagnostic()</title>
<indexterm><primary>getDiagnostic</primary><secondary>clang::CXDiagnosticSetImpl</secondary></indexterm>
<indexterm><primary>clang::CXDiagnosticSetImpl</primary><secondary>getDiagnostic</secondary></indexterm>
<para><computeroutput><link linkend="_classclang_1_1_c_x_diagnostic_impl">CXDiagnosticImpl</link>* clang::CXDiagnosticSetImpl::getDiagnostic (unsigned i) const<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line <link linkend="__c_index_diagnostic_8h_source_1l00040">40</link> of file <link linkend="__c_index_diagnostic_8h_source">CIndexDiagnostic.h</link>.</para>
<programlisting>00040 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00041 &#32;&#32;&#32;&#32;assert(i&#32;&lt;&#32;<link linkend="_classclang_1_1_c_x_diagnostic_set_impl_1a4f8dbf6c6514ec1fdf340268f50409cb">getNumDiagnostics</link>());
00042 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;Diagnostics[i].get();
00043 &#32;&#32;}
</programlisting><para>
References <link linkend="__c_index_diagnostic_8h_source_1l00036">getNumDiagnostics()</link>.</para>
<para>
Referenced by <link linkend="__c_index_diagnostic_8cpp_source_1l00209">clang_getDiagnostic()</link>.</para>
    </section><anchor xml:id="_classclang_1_1_c_x_diagnostic_set_impl_1a4f8dbf6c6514ec1fdf340268f50409cb"/>    <section>
    <title>getNumDiagnostics()</title>
<indexterm><primary>getNumDiagnostics</primary><secondary>clang::CXDiagnosticSetImpl</secondary></indexterm>
<indexterm><primary>clang::CXDiagnosticSetImpl</primary><secondary>getNumDiagnostics</secondary></indexterm>
<para><computeroutput>size_t clang::CXDiagnosticSetImpl::getNumDiagnostics ( ) const<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line <link linkend="__c_index_diagnostic_8h_source_1l00036">36</link> of file <link linkend="__c_index_diagnostic_8h_source">CIndexDiagnostic.h</link>.</para>
<programlisting>00036 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00037 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;Diagnostics.size();
00038 &#32;&#32;}
</programlisting><para>
Referenced by <link linkend="__c_index_diagnostic_8cpp_source_1l00209">clang_getDiagnostic()</link>, <link linkend="__c_index_diagnostic_8cpp_source_1l00199">clang_getNumDiagnostics()</link>, <link linkend="__c_index_diagnostic_8h_source_1l00040">getDiagnostic()</link>, and <link linkend="__c_index_diagnostic_8cpp_source_1l00149">clang::cxdiag::lazyCreateDiags()</link>.</para>
    </section><anchor xml:id="_classclang_1_1_c_x_diagnostic_set_impl_1adbda323a4302505eff931c7ad0271339"/>    <section>
    <title>isExternallyManaged()</title>
<indexterm><primary>isExternallyManaged</primary><secondary>clang::CXDiagnosticSetImpl</secondary></indexterm>
<indexterm><primary>clang::CXDiagnosticSetImpl</primary><secondary>isExternallyManaged</secondary></indexterm>
<para><computeroutput>bool clang::CXDiagnosticSetImpl::isExternallyManaged ( ) const<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line <link linkend="__c_index_diagnostic_8h_source_1l00051">51</link> of file <link linkend="__c_index_diagnostic_8h_source">CIndexDiagnostic.h</link>.</para>
<programlisting>00051 {&#32;<emphasis role="keywordflow">return</emphasis>&#32;IsExternallyManaged;&#32;}
</programlisting></section>
<para>
The documentation for this class was generated from the following files:</para>
/Users/maximilian/clang-llvm/clang/tools/libclang/<link linkend="__c_index_diagnostic_8h">CIndexDiagnostic.h</link>/Users/maximilian/clang-llvm/clang/tools/libclang/<link linkend="__c_index_diagnostic_8cpp">CIndexDiagnostic.cpp</link></section>
</section>
