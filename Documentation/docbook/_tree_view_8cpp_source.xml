<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="__tree_view_8cpp_source" xml:lang="en-US">
<title>TreeView.cpp</title>
<indexterm><primary>/Users/maximilian/clang-llvm/clang/tools/diagtool/TreeView.cpp</primary></indexterm>
<programlisting>00001 <emphasis role="comment">//===-&#32;TreeView.cpp&#32;-&#32;diagtool&#32;tool&#32;for&#32;printing&#32;warning&#32;flags&#32;------------===//</emphasis>
00002 <emphasis role="comment">//</emphasis>
00003 <emphasis role="comment">//&#32;Part&#32;of&#32;the&#32;LLVM&#32;Project,&#32;under&#32;the&#32;Apache&#32;License&#32;v2.0&#32;with&#32;LLVM&#32;Exceptions.</emphasis>
00004 <emphasis role="comment">//&#32;See&#32;https://llvm.org/LICENSE.txt&#32;for&#32;license&#32;information.</emphasis>
00005 <emphasis role="comment">//&#32;SPDX-License-Identifier:&#32;Apache-2.0&#32;WITH&#32;LLVM-exception</emphasis>
00006 <emphasis role="comment">//</emphasis>
00007 <emphasis role="comment">//===----------------------------------------------------------------------===//</emphasis>
00008 
00009 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="__diag_tool_8h">DiagTool.h</link>&quot;</emphasis>
00010 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="__diagnostic_names_8h">DiagnosticNames.h</link>&quot;</emphasis>
00011 <emphasis role="preprocessor">#include&#32;&quot;clang/Basic/AllDiagnostics.h&quot;</emphasis>
00012 <emphasis role="preprocessor">#include&#32;&quot;clang/Basic/Diagnostic.h&quot;</emphasis>
00013 <emphasis role="preprocessor">#include&#32;&quot;clang/Basic/DiagnosticOptions.h&quot;</emphasis>
00014 <emphasis role="preprocessor">#include&#32;&quot;llvm/ADT/DenseSet.h&quot;</emphasis>
00015 <emphasis role="preprocessor">#include&#32;&quot;llvm/Support/Format.h&quot;</emphasis>
00016 <emphasis role="preprocessor">#include&#32;&quot;llvm/Support/Process.h&quot;</emphasis>
00017 
00018 <link linkend="__diag_tool_8h_1a688f0ab91a98779498cd51c4a4395a06">DEF_DIAGTOOL</link>(<emphasis role="stringliteral">&quot;tree&quot;</emphasis>,&#32;<emphasis role="stringliteral">&quot;Show&#32;warning&#32;flags&#32;in&#32;a&#32;tree&#32;view&quot;</emphasis>,&#32;TreeView)
00019 
00020 <emphasis role="keyword">using&#32;namespace&#32;</emphasis><link linkend="_namespaceclang">clang</link>;
00021 <emphasis role="keyword">using&#32;namespace&#32;</emphasis><link linkend="_namespacediagtool">diagtool</link>;
00022 
<anchor xml:id="__tree_view_8cpp_source_1l00023"/><link linkend="_class_tree_printer">00023</link> <emphasis role="keyword">class&#32;</emphasis><link linkend="_class_tree_printer">TreePrinter</link>&#32;{
00024 &#32;&#32;<emphasis role="keyword">using</emphasis>&#32;Colors&#32;=&#32;llvm::raw_ostream::Colors;
00025 
00026 <emphasis role="keyword">public</emphasis>:
<anchor xml:id="__tree_view_8cpp_source_1l00027"/><link linkend="_class_tree_printer_1a4c8d6e044b52a16be537a226ff81570a">00027</link> &#32;&#32;llvm::raw_ostream&#32;&amp;<link linkend="_class_tree_printer_1a4c8d6e044b52a16be537a226ff81570a">out</link>;
<anchor xml:id="__tree_view_8cpp_source_1l00028"/><link linkend="_class_tree_printer_1a25d829514bd1f0a168f7aa5168702c74">00028</link> &#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_class_tree_printer_1a25d829514bd1f0a168f7aa5168702c74">Internal</link>;
00029 
<anchor xml:id="__tree_view_8cpp_source_1l00030"/><link linkend="_class_tree_printer_1ac139af4636e46a5df488e3423caa35bd">00030</link> &#32;&#32;<link linkend="_class_tree_printer_1ac139af4636e46a5df488e3423caa35bd">TreePrinter</link>(llvm::raw_ostream&#32;&amp;out)&#32;:&#32;out(out),&#32;Internal(false)&#32;{}
00031 
<anchor xml:id="__tree_view_8cpp_source_1l00032"/><link linkend="_class_tree_printer_1a13dcbf910022e738495dc1dc1b410632">00032</link> &#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_class_tree_printer_1a13dcbf910022e738495dc1dc1b410632">isIgnored</link>(<emphasis role="keywordtype">unsigned</emphasis>&#32;DiagID)&#32;{
00033 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;FIXME:&#32;This&#32;feels&#32;like&#32;a&#32;hack.</emphasis>
00034 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;clang::DiagnosticsEngine&#32;Diags(<emphasis role="keyword">new</emphasis>&#32;DiagnosticIDs,
00035 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">new</emphasis>&#32;DiagnosticOptions);
00036 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;Diags.isIgnored(DiagID,&#32;SourceLocation());
00037 &#32;&#32;}
00038 
<anchor xml:id="__tree_view_8cpp_source_1l00039"/><link linkend="_class_tree_printer_1ab753f8ab2973623f1bba4d23f4cb91bd">00039</link> &#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_class_tree_printer_1ab753f8ab2973623f1bba4d23f4cb91bd">unimplemented</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_structdiagtool_1_1_group_record">GroupRecord</link>&#32;&amp;Group)&#32;{
00040 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!Group.<link linkend="_structdiagtool_1_1_group_record_1ae16845dd99e785119694ef3b4994e1ef">diagnostics</link>().empty())
00041 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
00042 
00043 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_structdiagtool_1_1_group_record">GroupRecord</link>&#32;&amp;GR&#32;:&#32;Group.<link linkend="_structdiagtool_1_1_group_record_1aca2c41faf08459a6898395c857a094f9">subgroups</link>())
00044 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!unimplemented(GR))
00045 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
00046 
00047 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
00048 &#32;&#32;}
00049 
<anchor xml:id="__tree_view_8cpp_source_1l00050"/><link linkend="_class_tree_printer_1a54f93bc382e51b207b8f820c801ecc62">00050</link> &#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_class_tree_printer_1a54f93bc382e51b207b8f820c801ecc62">enabledByDefault</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_structdiagtool_1_1_group_record">GroupRecord</link>&#32;&amp;Group)&#32;{
00051 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_structdiagtool_1_1_diagnostic_record">DiagnosticRecord</link>&#32;&amp;DR&#32;:&#32;Group.<link linkend="_structdiagtool_1_1_group_record_1ae16845dd99e785119694ef3b4994e1ef">diagnostics</link>())&#32;{
00052 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(isIgnored(DR.DiagID))
00053 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
00054 &#32;&#32;&#32;&#32;}
00055 
00056 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_structdiagtool_1_1_group_record">GroupRecord</link>&#32;&amp;GR&#32;:&#32;Group.<link linkend="_structdiagtool_1_1_group_record_1aca2c41faf08459a6898395c857a094f9">subgroups</link>())&#32;{
00057 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!enabledByDefault(GR))
00058 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
00059 &#32;&#32;&#32;&#32;}
00060 
00061 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
00062 &#32;&#32;}
00063 
<anchor xml:id="__tree_view_8cpp_source_1l00064"/><link linkend="_class_tree_printer_1a775e6148cc2f31604fe7fe2c14f95860">00064</link> &#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_tree_printer_1a775e6148cc2f31604fe7fe2c14f95860">printGroup</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_structdiagtool_1_1_group_record">GroupRecord</link>&#32;&amp;Group,&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;Indent&#32;=&#32;0)&#32;{
00065 &#32;&#32;&#32;&#32;out.indent(Indent&#32;*&#32;2);
00066 
00067 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(unimplemented(Group))
00068 &#32;&#32;&#32;&#32;&#32;&#32;out&#32;&lt;&lt;&#32;Colors::RED;
00069 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(enabledByDefault(Group))
00070 &#32;&#32;&#32;&#32;&#32;&#32;out&#32;&lt;&lt;&#32;Colors::GREEN;
00071 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
00072 &#32;&#32;&#32;&#32;&#32;&#32;out&#32;&lt;&lt;&#32;Colors::YELLOW;
00073 
00074 &#32;&#32;&#32;&#32;out&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;-W&quot;</emphasis>&#32;&lt;&lt;&#32;Group.<link linkend="_structdiagtool_1_1_group_record_1a3d098c5bb21e8c5bc40af4fbec5f91c4">getName</link>()&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;\n&quot;</emphasis>&#32;&lt;&lt;&#32;Colors::RESET;
00075 
00076 &#32;&#32;&#32;&#32;++Indent;
00077 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_structdiagtool_1_1_group_record">GroupRecord</link>&#32;&amp;GR&#32;:&#32;Group.<link linkend="_structdiagtool_1_1_group_record_1aca2c41faf08459a6898395c857a094f9">subgroups</link>())&#32;{
00078 &#32;&#32;&#32;&#32;&#32;&#32;printGroup(GR,&#32;Indent);
00079 &#32;&#32;&#32;&#32;}
00080 
00081 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(Internal)&#32;{
00082 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_structdiagtool_1_1_diagnostic_record">DiagnosticRecord</link>&#32;&amp;DR&#32;:&#32;Group.<link linkend="_structdiagtool_1_1_group_record_1ae16845dd99e785119694ef3b4994e1ef">diagnostics</link>())&#32;{
00083 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!isIgnored(DR.DiagID))
00084 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;out&#32;&lt;&lt;&#32;Colors::GREEN;
00085 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;out.indent(Indent&#32;*&#32;2);
00086 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;out&#32;&lt;&lt;&#32;DR.getName()&#32;&lt;&lt;&#32;Colors::RESET&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;\n&quot;</emphasis>;
00087 &#32;&#32;&#32;&#32;&#32;&#32;}
00088 &#32;&#32;&#32;&#32;}
00089 &#32;&#32;}
00090 
<anchor xml:id="__tree_view_8cpp_source_1l00091"/><link linkend="_class_tree_printer_1a713865ef397947ed51d5c37c19a4bd25">00091</link> &#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_class_tree_printer_1a713865ef397947ed51d5c37c19a4bd25">showGroup</link>(StringRef&#32;RootGroup)&#32;{
00092 &#32;&#32;&#32;&#32;ArrayRef&lt;GroupRecord&gt;&#32;AllGroups&#32;=&#32;<link linkend="_namespacediagtool_1a42a9c9e276387e0d198c95ff2f6064d7">getDiagnosticGroups</link>();
00093 
00094 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(RootGroup.size()&#32;&gt;&#32;UINT16_MAX)&#32;{
00095 &#32;&#32;&#32;&#32;&#32;&#32;llvm::errs()&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;No&#32;such&#32;diagnostic&#32;group&#32;exists\n&quot;</emphasis>;
00096 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;1;
00097 &#32;&#32;&#32;&#32;}
00098 
00099 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_structdiagtool_1_1_group_record">GroupRecord</link>&#32;*Found&#32;=&#32;llvm::lower_bound(AllGroups,&#32;RootGroup);
00100 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(Found&#32;==&#32;AllGroups.end()&#32;||&#32;Found-&gt;<link linkend="_structdiagtool_1_1_group_record_1a3d098c5bb21e8c5bc40af4fbec5f91c4">getName</link>()&#32;!=&#32;RootGroup)&#32;{
00101 &#32;&#32;&#32;&#32;&#32;&#32;llvm::errs()&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;No&#32;such&#32;diagnostic&#32;group&#32;exists\n&quot;</emphasis>;
00102 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;1;
00103 &#32;&#32;&#32;&#32;}
00104 
00105 &#32;&#32;&#32;&#32;printGroup(*Found);
00106 
00107 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
00108 &#32;&#32;}
00109 
<anchor xml:id="__tree_view_8cpp_source_1l00110"/><link linkend="_class_tree_printer_1af8a8325a5a6cf93003ac597ace0973d2">00110</link> &#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_class_tree_printer_1af8a8325a5a6cf93003ac597ace0973d2">showAll</link>()&#32;{
00111 &#32;&#32;&#32;&#32;ArrayRef&lt;GroupRecord&gt;&#32;AllGroups&#32;=&#32;<link linkend="_namespacediagtool_1a42a9c9e276387e0d198c95ff2f6064d7">getDiagnosticGroups</link>();
00112 &#32;&#32;&#32;&#32;llvm::DenseSet&lt;unsigned&gt;&#32;NonRootGroupIDs;
00113 
00114 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_structdiagtool_1_1_group_record">GroupRecord</link>&#32;&amp;GR&#32;:&#32;AllGroups)&#32;{
00115 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">auto</emphasis>&#32;SI&#32;=&#32;GR.subgroup_begin(),&#32;SE&#32;=&#32;GR.subgroup_end();&#32;SI&#32;!=&#32;SE;
00116 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;++SI)&#32;{
00117 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;NonRootGroupIDs.insert((<emphasis role="keywordtype">unsigned</emphasis>)SI.getID());
00118 &#32;&#32;&#32;&#32;&#32;&#32;}
00119 &#32;&#32;&#32;&#32;}
00120 
00121 &#32;&#32;&#32;&#32;assert(NonRootGroupIDs.size()&#32;&lt;&#32;AllGroups.size());
00122 
00123 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">unsigned</emphasis>&#32;i&#32;=&#32;0,&#32;e&#32;=&#32;AllGroups.size();&#32;i&#32;!=&#32;e;&#32;++i)&#32;{
00124 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!NonRootGroupIDs.count(i))
00125 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;printGroup(AllGroups[i]);
00126 &#32;&#32;&#32;&#32;}
00127 
00128 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
00129 &#32;&#32;}
00130 
<anchor xml:id="__tree_view_8cpp_source_1l00131"/><link linkend="_class_tree_printer_1a888d79f0b9b4f7eb3d095f45c2e899f8">00131</link> &#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_tree_printer_1a888d79f0b9b4f7eb3d095f45c2e899f8">showKey</link>()&#32;{
00132 &#32;&#32;&#32;&#32;out&#32;&lt;&lt;&#32;<emphasis role="charliteral">&apos;\n&apos;</emphasis>&#32;&lt;&lt;&#32;Colors::GREEN&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;GREEN&quot;</emphasis>&#32;&lt;&lt;&#32;Colors::RESET
00133 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;=&#32;enabled&#32;by&#32;default&quot;</emphasis>;
00134 &#32;&#32;&#32;&#32;out&#32;&lt;&lt;&#32;<emphasis role="charliteral">&apos;\n&apos;</emphasis>&#32;&lt;&lt;&#32;Colors::RED&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;RED&quot;</emphasis>&#32;&lt;&lt;&#32;Colors::RESET
00135 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;=&#32;unimplemented&#32;(accepted&#32;for&#32;GCC&#32;compatibility)\n\n&quot;</emphasis>;
00136 &#32;&#32;}
00137 };
00138 
00139 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;printUsage()&#32;{
00140 &#32;&#32;llvm::errs()&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;Usage:&#32;diagtool&#32;tree&#32;[--internal]&#32;[&lt;diagnostic-group&gt;]\n&quot;</emphasis>;
00141 }
00142 
00143 <emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_namespacelibscanbuild_1_1analyze_1a505fccfeb836b113101687366a231f5f">TreeView::run</link>(<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;argc,&#32;<emphasis role="keywordtype">char</emphasis>&#32;**argv,&#32;llvm::raw_ostream&#32;&amp;out)&#32;{
00144 &#32;&#32;<emphasis role="comment">//&#32;First&#32;check&#32;our&#32;one&#32;flag&#32;(--flags-only).</emphasis>
00145 &#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;Internal&#32;=&#32;<emphasis role="keyword">false</emphasis>;
00146 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(argc&#32;&gt;&#32;0)&#32;{
00147 &#32;&#32;&#32;&#32;StringRef&#32;FirstArg(*argv);
00148 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(FirstArg.equals(<emphasis role="stringliteral">&quot;--internal&quot;</emphasis>))&#32;{
00149 &#32;&#32;&#32;&#32;&#32;&#32;Internal&#32;=&#32;<emphasis role="keyword">true</emphasis>;
00150 &#32;&#32;&#32;&#32;&#32;&#32;--argc;
00151 &#32;&#32;&#32;&#32;&#32;&#32;++argv;
00152 &#32;&#32;&#32;&#32;}
00153 &#32;&#32;}
00154 
00155 &#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;ShowAll&#32;=&#32;<emphasis role="keyword">false</emphasis>;
00156 &#32;&#32;StringRef&#32;RootGroup;
00157 
00158 &#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(argc)&#32;{
00159 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0:
00160 &#32;&#32;&#32;&#32;ShowAll&#32;=&#32;<emphasis role="keyword">true</emphasis>;
00161 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
00162 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;1:
00163 &#32;&#32;&#32;&#32;RootGroup&#32;=&#32;argv[0];
00164 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(RootGroup.startswith(<emphasis role="stringliteral">&quot;-W&quot;</emphasis>))
00165 &#32;&#32;&#32;&#32;&#32;&#32;RootGroup&#32;=&#32;RootGroup.substr(2);
00166 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(RootGroup&#32;==&#32;<emphasis role="stringliteral">&quot;everything&quot;</emphasis>)
00167 &#32;&#32;&#32;&#32;&#32;&#32;ShowAll&#32;=&#32;<emphasis role="keyword">true</emphasis>;
00168 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;FIXME:&#32;Handle&#32;other&#32;special&#32;warning&#32;flags,&#32;like&#32;-pedantic.</emphasis>
00169 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
00170 &#32;&#32;<emphasis role="keywordflow">default</emphasis>:
00171 &#32;&#32;&#32;&#32;printUsage();
00172 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;-1;
00173 &#32;&#32;}
00174 
00175 &#32;&#32;out.enable_colors(out.has_colors());
00176 
00177 &#32;&#32;<link linkend="_class_tree_printer">TreePrinter</link>&#32;TP(out);
00178 &#32;&#32;TP.Internal&#32;=&#32;Internal;
00179 &#32;&#32;TP.showKey();
00180 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;ShowAll&#32;?&#32;TP.showAll()&#32;:&#32;TP.showGroup(RootGroup);
00181 }
</programlisting></section>
