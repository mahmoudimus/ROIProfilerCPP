<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_classtests_1_1unit_1_1test__report_1_1_parse_file_test" xml:lang="en-US">
<title>tests.unit.test_report.ParseFileTest Class Reference</title>
<indexterm><primary>tests.unit.test_report.ParseFileTest</primary></indexterm>
<para>Inheritance diagram for tests.unit.test_report.ParseFileTest:    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="classtests_1_1unit_1_1test__report_1_1_parse_file_test.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
<simplesect>
    <title>Public Member Functions    </title>
        <itemizedlist>
            <listitem><para>def <link linkend="_classtests_1_1unit_1_1test__report_1_1_parse_file_test_1a74fa9a6a15bd46a7875fed844a119254">test_parse_bug</link> (self)</para>
</listitem>
            <listitem><para>def <link linkend="_classtests_1_1unit_1_1test__report_1_1_parse_file_test_1aa187e7448e43bd3c4292e493488af957">test_parse_bug_empty</link> (self)</para>
</listitem>
            <listitem><para>def <link linkend="_classtests_1_1unit_1_1test__report_1_1_parse_file_test_1aa1476e079542b996cd491d8955eb6ccc">test_parse_crash</link> (self)</para>
</listitem>
            <listitem><para>def <link linkend="_classtests_1_1unit_1_1test__report_1_1_parse_file_test_1aefdde266de9b1a393939834591d96ade">test_parse_real_crash</link> (self)</para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Detailed Description</title>
<para>
Definition at line <link linkend="_test__report_8py_source_1l00031">31</link> of file <link linkend="_test__report_8py_source">test_report.py</link>.</para>
</section>
<section>
<title>Member Function Documentation</title>
<anchor xml:id="_classtests_1_1unit_1_1test__report_1_1_parse_file_test_1a74fa9a6a15bd46a7875fed844a119254"/>    <section>
    <title>test_parse_bug()</title>
<indexterm><primary>test_parse_bug</primary><secondary>tests.unit.test_report.ParseFileTest</secondary></indexterm>
<indexterm><primary>tests.unit.test_report.ParseFileTest</primary><secondary>test_parse_bug</secondary></indexterm>
<para><computeroutput>def tests.unit.test_report.ParseFileTest.test_parse_bug ( self)</computeroutput></para><para>
Definition at line <link linkend="_test__report_8py_source_1l00033">33</link> of file <link linkend="_test__report_8py_source">test_report.py</link>.</para>
<programlisting>00033 &#32;&#32;&#32;&#32;<emphasis role="keyword">def&#32;</emphasis>test_parse_bug(self):
00034 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;content&#32;=&#32;[
00035 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;some&#32;header\n&quot;</emphasis>,
00036 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;&lt;!--&#32;BUGDESC&#32;Division&#32;by&#32;zero&#32;--&gt;\n&quot;</emphasis>,
00037 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;&lt;!--&#32;BUGTYPE&#32;Division&#32;by&#32;zero&#32;--&gt;\n&quot;</emphasis>,
00038 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;&lt;!--&#32;BUGCATEGORY&#32;Logic&#32;error&#32;--&gt;\n&quot;</emphasis>,
00039 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;&lt;!--&#32;BUGFILE&#32;xx&#32;--&gt;\n&quot;</emphasis>,
00040 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;&lt;!--&#32;BUGLINE&#32;5&#32;--&gt;\n&quot;</emphasis>,
00041 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;&lt;!--&#32;BUGCOLUMN&#32;22&#32;--&gt;\n&quot;</emphasis>,
00042 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;&lt;!--&#32;BUGPATHLENGTH&#32;4&#32;--&gt;\n&quot;</emphasis>,
00043 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;&lt;!--&#32;BUGMETAEND&#32;--&gt;\n&quot;</emphasis>,
00044 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;&lt;!--&#32;REPORTHEADER&#32;--&gt;\n&quot;</emphasis>,
00045 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;some&#32;tails\n&quot;</emphasis>]
00046 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;result&#32;=&#32;<link linkend="_namespacetests_1_1unit_1_1test__report_1a9ab6f02ba4c906569ecabb49c78c8892">run_bug_parse</link>(content)
00047 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;self.assertEqual(result[<emphasis role="stringliteral">&apos;bug_category&apos;</emphasis>],&#32;<emphasis role="stringliteral">&apos;Logic&#32;error&apos;</emphasis>)
00048 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;self.assertEqual(result[<emphasis role="stringliteral">&apos;bug_path_length&apos;</emphasis>],&#32;4)
00049 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;self.assertEqual(result[<emphasis role="stringliteral">&apos;bug_line&apos;</emphasis>],&#32;5)
00050 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;self.assertEqual(result[<emphasis role="stringliteral">&apos;bug_description&apos;</emphasis>],&#32;<emphasis role="stringliteral">&apos;Division&#32;by&#32;zero&apos;</emphasis>)
00051 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;self.assertEqual(result[<emphasis role="stringliteral">&apos;bug_type&apos;</emphasis>],&#32;<emphasis role="stringliteral">&apos;Division&#32;by&#32;zero&apos;</emphasis>)
00052 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;self.assertEqual(result[<emphasis role="stringliteral">&apos;bug_file&apos;</emphasis>],&#32;<emphasis role="stringliteral">&apos;xx&apos;</emphasis>)
00053 
</programlisting><para>
References <link linkend="_test__report_8py_source_1l00014">tests.unit.test_report.run_bug_parse()</link>.</para>
    </section><anchor xml:id="_classtests_1_1unit_1_1test__report_1_1_parse_file_test_1aa187e7448e43bd3c4292e493488af957"/>    <section>
    <title>test_parse_bug_empty()</title>
<indexterm><primary>test_parse_bug_empty</primary><secondary>tests.unit.test_report.ParseFileTest</secondary></indexterm>
<indexterm><primary>tests.unit.test_report.ParseFileTest</primary><secondary>test_parse_bug_empty</secondary></indexterm>
<para><computeroutput>def tests.unit.test_report.ParseFileTest.test_parse_bug_empty ( self)</computeroutput></para><para>
Definition at line <link linkend="_test__report_8py_source_1l00054">54</link> of file <link linkend="_test__report_8py_source">test_report.py</link>.</para>
<programlisting>00054 &#32;&#32;&#32;&#32;<emphasis role="keyword">def&#32;</emphasis>test_parse_bug_empty(self):
00055 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;content&#32;=&#32;[]
00056 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;result&#32;=&#32;<link linkend="_namespacetests_1_1unit_1_1test__report_1a9ab6f02ba4c906569ecabb49c78c8892">run_bug_parse</link>(content)
00057 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;self.assertEqual(result[<emphasis role="stringliteral">&apos;bug_category&apos;</emphasis>],&#32;<emphasis role="stringliteral">&apos;Other&apos;</emphasis>)
00058 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;self.assertEqual(result[<emphasis role="stringliteral">&apos;bug_path_length&apos;</emphasis>],&#32;1)
00059 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;self.assertEqual(result[<emphasis role="stringliteral">&apos;bug_line&apos;</emphasis>],&#32;0)
00060 
</programlisting><para>
References <link linkend="_test__report_8py_source_1l00014">tests.unit.test_report.run_bug_parse()</link>.</para>
    </section><anchor xml:id="_classtests_1_1unit_1_1test__report_1_1_parse_file_test_1aa1476e079542b996cd491d8955eb6ccc"/>    <section>
    <title>test_parse_crash()</title>
<indexterm><primary>test_parse_crash</primary><secondary>tests.unit.test_report.ParseFileTest</secondary></indexterm>
<indexterm><primary>tests.unit.test_report.ParseFileTest</primary><secondary>test_parse_crash</secondary></indexterm>
<para><computeroutput>def tests.unit.test_report.ParseFileTest.test_parse_crash ( self)</computeroutput></para><para>
Definition at line <link linkend="_test__report_8py_source_1l00061">61</link> of file <link linkend="_test__report_8py_source">test_report.py</link>.</para>
<programlisting>00061 &#32;&#32;&#32;&#32;<emphasis role="keyword">def&#32;</emphasis>test_parse_crash(self):
00062 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;content&#32;=&#32;[
00063 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;/some/path/file.c\n&quot;</emphasis>,
00064 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;Some&#32;very&#32;serious&#32;Error\n&quot;</emphasis>,
00065 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;bla\n&quot;</emphasis>,
00066 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;bla-bla\n&quot;</emphasis>]
00067 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;result&#32;=&#32;<link linkend="_namespacetests_1_1unit_1_1test__report_1af324b6cd4124f464bf262d94e6633f2d">run_crash_parse</link>(content,&#32;<emphasis role="stringliteral">&apos;file.i&apos;</emphasis>)
00068 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;self.assertEqual(result[<emphasis role="stringliteral">&apos;source&apos;</emphasis>],&#32;content[0].rstrip())
00069 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;self.assertEqual(result[<emphasis role="stringliteral">&apos;problem&apos;</emphasis>],&#32;content[1].rstrip())
00070 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;self.assertEqual(os.path.basename(result[<emphasis role="stringliteral">&apos;file&apos;</emphasis>]),
00071 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&apos;file.i&apos;</emphasis>)
00072 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;self.assertEqual(os.path.basename(result[<emphasis role="stringliteral">&apos;info&apos;</emphasis>]),
00073 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&apos;file.i.info.txt&apos;</emphasis>)
00074 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;self.assertEqual(os.path.basename(result[<emphasis role="stringliteral">&apos;stderr&apos;</emphasis>]),
00075 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&apos;file.i.stderr.txt&apos;</emphasis>)
00076 
</programlisting><para>
References <link linkend="_test__report_8py_source_1l00023">tests.unit.test_report.run_crash_parse()</link>.</para>
    </section><anchor xml:id="_classtests_1_1unit_1_1test__report_1_1_parse_file_test_1aefdde266de9b1a393939834591d96ade"/>    <section>
    <title>test_parse_real_crash()</title>
<indexterm><primary>test_parse_real_crash</primary><secondary>tests.unit.test_report.ParseFileTest</secondary></indexterm>
<indexterm><primary>tests.unit.test_report.ParseFileTest</primary><secondary>test_parse_real_crash</secondary></indexterm>
<para><computeroutput>def tests.unit.test_report.ParseFileTest.test_parse_real_crash ( self)</computeroutput></para><para>
Definition at line <link linkend="_test__report_8py_source_1l00077">77</link> of file <link linkend="_test__report_8py_source">test_report.py</link>.</para>
<programlisting>00077 &#32;&#32;&#32;&#32;<emphasis role="keyword">def&#32;</emphasis>test_parse_real_crash(self):
00078 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">import</emphasis>&#32;<link linkend="_namespacelibscanbuild_1_1analyze">libscanbuild.analyze</link>&#32;<emphasis role="keyword">as</emphasis>&#32;sut2
00079 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">import</emphasis>&#32;re
00080 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">with</emphasis>&#32;<link linkend="_namespacelibear_1a44657565063241a3d383ec724243c023">libear.TemporaryDirectory</link>()&#32;<emphasis role="keyword">as</emphasis>&#32;tmpdir:
00081 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;filename&#32;=&#32;os.path.join(tmpdir,&#32;<emphasis role="stringliteral">&apos;test.c&apos;</emphasis>)
00082 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">with</emphasis>&#32;<link linkend="_namespacestartfile_1aa582f75134b683dc321c07d01ff8e501">open</link>(filename,&#32;<emphasis role="stringliteral">&apos;w&apos;</emphasis>)&#32;<emphasis role="keyword">as</emphasis>&#32;handle:
00083 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;handle.write(<emphasis role="stringliteral">&apos;int&#32;main()&#32;{&#32;return&#32;0&apos;</emphasis>)
00084 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">#&#32;produce&#32;failure&#32;report</emphasis>
00085 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;opts&#32;=&#32;{
00086 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&apos;clang&apos;</emphasis>:&#32;<emphasis role="stringliteral">&apos;clang&apos;</emphasis>,
00087 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&apos;directory&apos;</emphasis>:&#32;os.getcwd(),
00088 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&apos;flags&apos;</emphasis>:&#32;[],
00089 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&apos;file&apos;</emphasis>:&#32;filename,
00090 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&apos;output_dir&apos;</emphasis>:&#32;tmpdir,
00091 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&apos;language&apos;</emphasis>:&#32;<emphasis role="stringliteral">&apos;c&apos;</emphasis>,
00092 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&apos;error_type&apos;</emphasis>:&#32;<emphasis role="stringliteral">&apos;other_error&apos;</emphasis>,
00093 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&apos;error_output&apos;</emphasis>:&#32;<emphasis role="stringliteral">&apos;some&#32;output&apos;</emphasis>,
00094 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&apos;exit_code&apos;</emphasis>:&#32;13
00095 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00096 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sut2.report_failure(opts)
00097 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">#&#32;find&#32;the&#32;info&#32;file</emphasis>
00098 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;pp_file&#32;=&#32;<emphasis role="keywordtype">None</emphasis>
00099 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;root,&#32;_,&#32;files&#32;<emphasis role="keywordflow">in</emphasis>&#32;os.walk(tmpdir):
00100 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;keys&#32;=&#32;[os.path.join(root,&#32;name)&#32;<emphasis role="keywordflow">for</emphasis>&#32;name&#32;<emphasis role="keywordflow">in</emphasis>&#32;files]
00101 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;key&#32;<emphasis role="keywordflow">in</emphasis>&#32;keys:
00102 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;re.match(<emphasis role="stringliteral">r&apos;^(.*/)+clang(.*)\.i$&apos;</emphasis>,&#32;key):
00103 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;pp_file&#32;=&#32;key
00104 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;self.assertIsNot(pp_file,&#32;<emphasis role="keywordtype">None</emphasis>)
00105 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">#&#32;read&#32;the&#32;failure&#32;report&#32;back</emphasis>
00106 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;result&#32;=&#32;sut.parse_crash(pp_file&#32;+&#32;<emphasis role="stringliteral">&apos;.info.txt&apos;</emphasis>)
00107 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;self.assertEqual(result[<emphasis role="stringliteral">&apos;source&apos;</emphasis>],&#32;filename)
00108 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;self.assertEqual(result[<emphasis role="stringliteral">&apos;problem&apos;</emphasis>],&#32;<emphasis role="stringliteral">&apos;Other&#32;Error&apos;</emphasis>)
00109 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;self.assertEqual(result[<emphasis role="stringliteral">&apos;file&apos;</emphasis>],&#32;pp_file)
00110 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;self.assertEqual(result[<emphasis role="stringliteral">&apos;info&apos;</emphasis>],&#32;pp_file&#32;+&#32;<emphasis role="stringliteral">&apos;.info.txt&apos;</emphasis>)
00111 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;self.assertEqual(result[<emphasis role="stringliteral">&apos;stderr&apos;</emphasis>],&#32;pp_file&#32;+&#32;<emphasis role="stringliteral">&apos;.stderr.txt&apos;</emphasis>)
00112 
00113 
</programlisting><para>
References <link linkend="_startfile_8py_source_1l00206">startfile.open()</link>, and <link linkend="_lib_2libear_2____init_____8py_source_1l00070">libear.TemporaryDirectory()</link>.</para>
</section>
<para>
The documentation for this class was generated from the following file:</para>
/Users/maximilian/clang-llvm/clang/tools/scan-build-py/tests/unit/<link linkend="_test__report_8py">test_report.py</link></section>
</section>
