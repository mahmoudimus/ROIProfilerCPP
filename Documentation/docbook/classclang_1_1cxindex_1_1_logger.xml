<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_classclang_1_1cxindex_1_1_logger" xml:lang="en-US">
<title>clang::cxindex::Logger Class Reference</title>
<indexterm><primary>clang::cxindex::Logger</primary></indexterm>
<para>
<computeroutput>#include &lt;CLog.h&gt;</computeroutput>
</para>
<para>Inheritance diagram for clang::cxindex::Logger:    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="classclang_1_1cxindex_1_1_logger.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
<simplesect>
    <title>Public Member Functions    </title>
        <itemizedlist>
            <listitem><para><link linkend="_classclang_1_1cxindex_1_1_logger_1a15d1595c84d887c18f1e95e56b3a4544">Logger</link> (llvm::StringRef name, bool trace)</para>
</listitem>
            <listitem><para><link linkend="_classclang_1_1cxindex_1_1_logger_1a516d6c56208926869892fe963609188b">~Logger</link> ()</para>
</listitem>
            <listitem><para><link linkend="_classclang_1_1cxindex_1_1_logger">Logger</link> &amp; <link linkend="_classclang_1_1cxindex_1_1_logger_1a051287c9aa1d57fb4f8db77f51934cd8">operator&lt;&lt;</link> (CXTranslationUnit)</para>
</listitem>
            <listitem><para><link linkend="_classclang_1_1cxindex_1_1_logger">Logger</link> &amp; <link linkend="_classclang_1_1cxindex_1_1_logger_1a6b478a60bef57d44b756191aeed76977">operator&lt;&lt;</link> (const FileEntry *FE)</para>
</listitem>
            <listitem><para><link linkend="_classclang_1_1cxindex_1_1_logger">Logger</link> &amp; <link linkend="_classclang_1_1cxindex_1_1_logger_1aa009cca679e69886e67d4f273a3b2040">operator&lt;&lt;</link> (CXCursor cursor)</para>
</listitem>
            <listitem><para><link linkend="_classclang_1_1cxindex_1_1_logger">Logger</link> &amp; <link linkend="_classclang_1_1cxindex_1_1_logger_1a73a78023cdddd5fba6304a7503721c05">operator&lt;&lt;</link> (CXSourceLocation)</para>
</listitem>
            <listitem><para><link linkend="_classclang_1_1cxindex_1_1_logger">Logger</link> &amp; <link linkend="_classclang_1_1cxindex_1_1_logger_1aee27c999d935aa98123a7d84d9ba00f5">operator&lt;&lt;</link> (CXSourceRange)</para>
</listitem>
            <listitem><para><link linkend="_classclang_1_1cxindex_1_1_logger">Logger</link> &amp; <link linkend="_classclang_1_1cxindex_1_1_logger_1a72afd6570e5f5b75d3efbdf852c23c54">operator&lt;&lt;</link> (CXString)</para>
</listitem>
            <listitem><para><link linkend="_classclang_1_1cxindex_1_1_logger">Logger</link> &amp; <link linkend="_classclang_1_1cxindex_1_1_logger_1aef640ad0edd2bf80ccec7551f2b1660c">operator&lt;&lt;</link> (llvm::StringRef Str)</para>
</listitem>
            <listitem><para><link linkend="_classclang_1_1cxindex_1_1_logger">Logger</link> &amp; <link linkend="_classclang_1_1cxindex_1_1_logger_1a56ca8321d71d4b95e57e5125363109bb">operator&lt;&lt;</link> (const char *Str)</para>
</listitem>
            <listitem><para><link linkend="_classclang_1_1cxindex_1_1_logger">Logger</link> &amp; <link linkend="_classclang_1_1cxindex_1_1_logger_1aeb714f5bac1ea79f9a7d4a7576a35e4a">operator&lt;&lt;</link> (unsigned long N)</para>
</listitem>
            <listitem><para><link linkend="_classclang_1_1cxindex_1_1_logger">Logger</link> &amp; <link linkend="_classclang_1_1cxindex_1_1_logger_1a2e8731c4f4ed781d6556deaf9623d4f4">operator&lt;&lt;</link> (long N)</para>
</listitem>
            <listitem><para><link linkend="_classclang_1_1cxindex_1_1_logger">Logger</link> &amp; <link linkend="_classclang_1_1cxindex_1_1_logger_1a822a268e0a363b1f035450f66ce82b7d">operator&lt;&lt;</link> (unsigned int N)</para>
</listitem>
            <listitem><para><link linkend="_classclang_1_1cxindex_1_1_logger">Logger</link> &amp; <link linkend="_classclang_1_1cxindex_1_1_logger_1a1e7c9b69f72574aac0ef7291aae27361">operator&lt;&lt;</link> (int N)</para>
</listitem>
            <listitem><para><link linkend="_classclang_1_1cxindex_1_1_logger">Logger</link> &amp; <link linkend="_classclang_1_1cxindex_1_1_logger_1aa68ba21772241b4dd3e673f4594e1b62">operator&lt;&lt;</link> (char C)</para>
</listitem>
            <listitem><para><link linkend="_classclang_1_1cxindex_1_1_logger">Logger</link> &amp; <link linkend="_classclang_1_1cxindex_1_1_logger_1a7eb6d48af5cd2c755d2cd1628dd6e29a">operator&lt;&lt;</link> (unsigned char C)</para>
</listitem>
            <listitem><para><link linkend="_classclang_1_1cxindex_1_1_logger">Logger</link> &amp; <link linkend="_classclang_1_1cxindex_1_1_logger_1a824b1b2f5fd27af757af2882d897e5d1">operator&lt;&lt;</link> (signed char C)</para>
</listitem>
            <listitem><para><link linkend="_classclang_1_1cxindex_1_1_logger">Logger</link> &amp; <link linkend="_classclang_1_1cxindex_1_1_logger_1ada43f7ac002c06ed910f6f130fa09e9a">operator&lt;&lt;</link> (const llvm::format_object_base &amp;Fmt)</para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Static Public Member Functions    </title>
        <itemizedlist>
            <listitem><para>static const char * <link linkend="_classclang_1_1cxindex_1_1_logger_1a2a80ef2474eacc5200a8e43b66c5ba74">getEnvVar</link> ()</para>
</listitem>
            <listitem><para>static bool <link linkend="_classclang_1_1cxindex_1_1_logger_1a33f38d28f1208995a7a279c47dc26dee">isLoggingEnabled</link> ()</para>
</listitem>
            <listitem><para>static bool <link linkend="_classclang_1_1cxindex_1_1_logger_1af9f295bd79ae0f87d8c729cc1e9f8839">isStackTracingEnabled</link> ()</para>
</listitem>
            <listitem><para>static <link linkend="_namespaceclang_1_1cxindex_1a404a46a001568431816a6c375e7cd810">LogRef</link> <link linkend="_classclang_1_1cxindex_1_1_logger_1a3baec221eac793eb7f974cc709b55bb3">make</link> (llvm::StringRef name, bool trace=<link linkend="_classclang_1_1cxindex_1_1_logger_1af9f295bd79ae0f87d8c729cc1e9f8839">isStackTracingEnabled</link>())</para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Detailed Description</title>

<para>Collects logging output and writes it to stderr when it&apos;s destructed. Common use case: <literallayout><computeroutput>if&#32;(LogRef&#32;Log&#32;=&#32;Logger::make(__func__))&#32;{
&#32;&#32;*Log&#32;&lt;&lt;&#32;&quot;stuff&quot;;
}
</computeroutput></literallayout> </para>
<para>
Definition at line <link linkend="__c_log_8h_source_1l00040">40</link> of file <link linkend="__c_log_8h_source">CLog.h</link>.</para>
</section>
<section>
<title>Constructor &amp; Destructor Documentation</title>
<anchor xml:id="_classclang_1_1cxindex_1_1_logger_1a15d1595c84d887c18f1e95e56b3a4544"/>    <section>
    <title>Logger()</title>
<indexterm><primary>Logger</primary><secondary>clang::cxindex::Logger</secondary></indexterm>
<indexterm><primary>clang::cxindex::Logger</primary><secondary>Logger</secondary></indexterm>
<para><computeroutput>clang::cxindex::Logger::Logger (llvm::StringRef name, bool trace)<computeroutput>[inline]</computeroutput>, <computeroutput>[explicit]</computeroutput></computeroutput></para><para>
Definition at line <link linkend="__c_log_8h_source_1l00063">63</link> of file <link linkend="__c_log_8h_source">CLog.h</link>.</para>
<programlisting>00064 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;Name(std::string(name)),&#32;Trace(trace),&#32;LogOS(Msg)&#32;{}
</programlisting><para>
Referenced by <link linkend="__c_log_8h_source_1l00056">make()</link>.</para>
    </section><anchor xml:id="_classclang_1_1cxindex_1_1_logger_1a516d6c56208926869892fe963609188b"/>    <section>
    <title>~Logger()</title>
<indexterm><primary>~Logger</primary><secondary>clang::cxindex::Logger</secondary></indexterm>
<indexterm><primary>clang::cxindex::Logger</primary><secondary>~Logger</secondary></indexterm>
<para><computeroutput>cxindex::Logger::~Logger ( )</computeroutput></para><para>
Definition at line <link linkend="__c_index_8cpp_source_1l09189">9189</link> of file <link linkend="__c_index_8cpp_source">CIndex.cpp</link>.</para>
<programlisting>09189 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
09190 &#32;&#32;std::lock_guard&lt;std::mutex&gt;&#32;L(*LoggingMutex);
09191 
09192 &#32;&#32;<emphasis role="keyword">static</emphasis>&#32;llvm::TimeRecord&#32;sBeginTR&#32;=&#32;llvm::TimeRecord::getCurrentTime();
09193 
09194 &#32;&#32;raw_ostream&#32;&amp;OS&#32;=&#32;llvm::errs();
09195 &#32;&#32;OS&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;[libclang:&quot;</emphasis>&#32;&lt;&lt;&#32;Name&#32;&lt;&lt;&#32;<emphasis role="charliteral">&apos;:&apos;</emphasis>;
09196 
09197 <emphasis role="preprocessor">#ifdef&#32;USE_DARWIN_THREADS</emphasis>
09198 &#32;&#32;<emphasis role="comment">//&#32;TODO:&#32;Portability.</emphasis>
09199 &#32;&#32;mach_port_t&#32;tid&#32;=&#32;pthread_mach_thread_np(pthread_self());
09200 &#32;&#32;OS&#32;&lt;&lt;&#32;tid&#32;&lt;&lt;&#32;<emphasis role="charliteral">&apos;:&apos;</emphasis>;
09201 <emphasis role="preprocessor">#endif</emphasis>
09202 
09203 &#32;&#32;llvm::TimeRecord&#32;TR&#32;=&#32;llvm::TimeRecord::getCurrentTime();
09204 &#32;&#32;OS&#32;&lt;&lt;&#32;llvm::format(<emphasis role="stringliteral">&quot;%7.4f]&#32;&quot;</emphasis>,&#32;TR.getWallTime()&#32;-&#32;sBeginTR.getWallTime());
09205 &#32;&#32;OS&#32;&lt;&lt;&#32;Msg&#32;&lt;&lt;&#32;<emphasis role="charliteral">&apos;\n&apos;</emphasis>;
09206 
09207 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(Trace)&#32;{
09208 &#32;&#32;&#32;&#32;llvm::sys::PrintStackTrace(OS);
09209 &#32;&#32;&#32;&#32;OS&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;--------------------------------------------------\n&quot;</emphasis>;
09210 &#32;&#32;}
09211 }
</programlisting></section>
</section>
<section>
<title>Member Function Documentation</title>
<anchor xml:id="_classclang_1_1cxindex_1_1_logger_1a2a80ef2474eacc5200a8e43b66c5ba74"/>    <section>
    <title>getEnvVar()</title>
<indexterm><primary>getEnvVar</primary><secondary>clang::cxindex::Logger</secondary></indexterm>
<indexterm><primary>clang::cxindex::Logger</primary><secondary>getEnvVar</secondary></indexterm>
<para><computeroutput>static const char* clang::cxindex::Logger::getEnvVar ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput></computeroutput></para><para>
Definition at line <link linkend="__c_log_8h_source_1l00046">46</link> of file <link linkend="__c_log_8h_source">CLog.h</link>.</para>
<programlisting>00046 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00047 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*sCachedVar&#32;=&#32;::getenv(<emphasis role="stringliteral">&quot;LIBCLANG_LOGGING&quot;</emphasis>);
00048 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;sCachedVar;
00049 &#32;&#32;}
</programlisting><para>
Referenced by <link linkend="__c_log_8h_source_1l00050">isLoggingEnabled()</link>, and <link linkend="__c_log_8h_source_1l00051">isStackTracingEnabled()</link>.</para>
    </section><anchor xml:id="_classclang_1_1cxindex_1_1_logger_1a33f38d28f1208995a7a279c47dc26dee"/>    <section>
    <title>isLoggingEnabled()</title>
<indexterm><primary>isLoggingEnabled</primary><secondary>clang::cxindex::Logger</secondary></indexterm>
<indexterm><primary>clang::cxindex::Logger</primary><secondary>isLoggingEnabled</secondary></indexterm>
<para><computeroutput>static bool clang::cxindex::Logger::isLoggingEnabled ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput></computeroutput></para><para>
Definition at line <link linkend="__c_log_8h_source_1l00050">50</link> of file <link linkend="__c_log_8h_source">CLog.h</link>.</para>
<programlisting>00050 {&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classclang_1_1cxindex_1_1_logger_1a2a80ef2474eacc5200a8e43b66c5ba74">getEnvVar</link>()&#32;!=&#32;<emphasis role="keyword">nullptr</emphasis>;&#32;}
</programlisting><para>
References <link linkend="__c_log_8h_source_1l00046">getEnvVar()</link>.</para>
<para>
Referenced by <link linkend="__c_log_8h_source_1l00056">make()</link>.</para>
    </section><anchor xml:id="_classclang_1_1cxindex_1_1_logger_1af9f295bd79ae0f87d8c729cc1e9f8839"/>    <section>
    <title>isStackTracingEnabled()</title>
<indexterm><primary>isStackTracingEnabled</primary><secondary>clang::cxindex::Logger</secondary></indexterm>
<indexterm><primary>clang::cxindex::Logger</primary><secondary>isStackTracingEnabled</secondary></indexterm>
<para><computeroutput>static bool clang::cxindex::Logger::isStackTracingEnabled ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput></computeroutput></para><para>
Definition at line <link linkend="__c_log_8h_source_1l00051">51</link> of file <link linkend="__c_log_8h_source">CLog.h</link>.</para>
<programlisting>00051 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00052 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*EnvOpt&#32;=&#32;<link linkend="_classclang_1_1cxindex_1_1_logger_1a2a80ef2474eacc5200a8e43b66c5ba74">Logger::getEnvVar</link>())
00053 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;llvm::StringRef(EnvOpt)&#32;==&#32;<emphasis role="stringliteral">&quot;2&quot;</emphasis>;
00054 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
00055 &#32;&#32;}
</programlisting><para>
References <link linkend="__c_log_8h_source_1l00046">getEnvVar()</link>.</para>
    </section><anchor xml:id="_classclang_1_1cxindex_1_1_logger_1a3baec221eac793eb7f974cc709b55bb3"/>    <section>
    <title>make()</title>
<indexterm><primary>make</primary><secondary>clang::cxindex::Logger</secondary></indexterm>
<indexterm><primary>clang::cxindex::Logger</primary><secondary>make</secondary></indexterm>
<para><computeroutput>static <link linkend="_namespaceclang_1_1cxindex_1a404a46a001568431816a6c375e7cd810">LogRef</link> clang::cxindex::Logger::make (llvm::StringRef name, bool trace = <computeroutput><link linkend="_classclang_1_1cxindex_1_1_logger_1af9f295bd79ae0f87d8c729cc1e9f8839">isStackTracingEnabled</link>()</computeroutput>
)<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput></computeroutput></para><para>
Definition at line <link linkend="__c_log_8h_source_1l00056">56</link> of file <link linkend="__c_log_8h_source">CLog.h</link>.</para>
<programlisting>00057 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00058 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_classclang_1_1cxindex_1_1_logger_1a33f38d28f1208995a7a279c47dc26dee">isLoggingEnabled</link>())
00059 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_classclang_1_1cxindex_1_1_logger_1a15d1595c84d887c18f1e95e56b3a4544">Logger</link>(name,&#32;trace);
00060 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">nullptr</emphasis>;
00061 &#32;&#32;}
</programlisting><para>
References <link linkend="__c_log_8h_source_1l00050">isLoggingEnabled()</link>, and <link linkend="__c_log_8h_source_1l00063">Logger()</link>.</para>
<para>
Referenced by <link linkend="__c_x_source_location_8cpp_source_1l00115">clang_getLocation()</link>.</para>
    </section><anchor xml:id="_classclang_1_1cxindex_1_1_logger_1aa68ba21772241b4dd3e673f4594e1b62"/>    <section>
    <title>operator&lt;&lt;()<computeroutput>[1/16]</computeroutput></title>
<indexterm><primary>operator&lt;&lt;</primary><secondary>clang::cxindex::Logger</secondary></indexterm>
<indexterm><primary>clang::cxindex::Logger</primary><secondary>operator&lt;&lt;</secondary></indexterm>
<para><computeroutput><link linkend="_classclang_1_1cxindex_1_1_logger">Logger</link>&amp; clang::cxindex::Logger::operator&lt;&lt; (char C)<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line <link linkend="__c_log_8h_source_1l00083">83</link> of file <link linkend="__c_log_8h_source">CLog.h</link>.</para>
<programlisting>00083 {&#32;LogOS&#32;&lt;&lt;&#32;C;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;&#32;}
</programlisting>    </section><anchor xml:id="_classclang_1_1cxindex_1_1_logger_1a56ca8321d71d4b95e57e5125363109bb"/>    <section>
    <title>operator&lt;&lt;()<computeroutput>[2/16]</computeroutput></title>
<indexterm><primary>operator&lt;&lt;</primary><secondary>clang::cxindex::Logger</secondary></indexterm>
<indexterm><primary>clang::cxindex::Logger</primary><secondary>operator&lt;&lt;</secondary></indexterm>
<para><computeroutput><link linkend="_classclang_1_1cxindex_1_1_logger">Logger</link>&amp; clang::cxindex::Logger::operator&lt;&lt; (const char * Str)<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line <link linkend="__c_log_8h_source_1l00074">74</link> of file <link linkend="__c_log_8h_source">CLog.h</link>.</para>
<programlisting>00074 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00075 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(Str)
00076 &#32;&#32;&#32;&#32;&#32;&#32;LogOS&#32;&lt;&lt;&#32;Str;
00077 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
00078 &#32;&#32;}
</programlisting>    </section><anchor xml:id="_classclang_1_1cxindex_1_1_logger_1a6b478a60bef57d44b756191aeed76977"/>    <section>
    <title>operator&lt;&lt;()<computeroutput>[3/16]</computeroutput></title>
<indexterm><primary>operator&lt;&lt;</primary><secondary>clang::cxindex::Logger</secondary></indexterm>
<indexterm><primary>clang::cxindex::Logger</primary><secondary>operator&lt;&lt;</secondary></indexterm>
<para><computeroutput><link linkend="_classclang_1_1cxindex_1_1_logger">Logger</link> &amp; cxindex::Logger::operator&lt;&lt; (const FileEntry * FE)</computeroutput></para><para>
Definition at line <link linkend="__c_index_8cpp_source_1l09127">9127</link> of file <link linkend="__c_index_8cpp_source">CIndex.cpp</link>.</para>
<programlisting>09127 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
09128 &#32;&#32;*<emphasis role="keyword">this</emphasis>&#32;&lt;&lt;&#32;FE-&gt;getName();
09129 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
09130 }
</programlisting>    </section><anchor xml:id="_classclang_1_1cxindex_1_1_logger_1ada43f7ac002c06ed910f6f130fa09e9a"/>    <section>
    <title>operator&lt;&lt;()<computeroutput>[4/16]</computeroutput></title>
<indexterm><primary>operator&lt;&lt;</primary><secondary>clang::cxindex::Logger</secondary></indexterm>
<indexterm><primary>clang::cxindex::Logger</primary><secondary>operator&lt;&lt;</secondary></indexterm>
<para><computeroutput><link linkend="_classclang_1_1cxindex_1_1_logger">Logger</link> &amp; cxindex::Logger::operator&lt;&lt; (const llvm::format_object_base &amp; Fmt)</computeroutput></para><para>
Definition at line <link linkend="__c_index_8cpp_source_1l09182">9182</link> of file <link linkend="__c_index_8cpp_source">CIndex.cpp</link>.</para>
<programlisting>09182 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
09183 &#32;&#32;LogOS&#32;&lt;&lt;&#32;Fmt;
09184 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
09185 }
</programlisting>    </section><anchor xml:id="_classclang_1_1cxindex_1_1_logger_1aa009cca679e69886e67d4f273a3b2040"/>    <section>
    <title>operator&lt;&lt;()<computeroutput>[5/16]</computeroutput></title>
<indexterm><primary>operator&lt;&lt;</primary><secondary>clang::cxindex::Logger</secondary></indexterm>
<indexterm><primary>clang::cxindex::Logger</primary><secondary>operator&lt;&lt;</secondary></indexterm>
<para><computeroutput><link linkend="_classclang_1_1cxindex_1_1_logger">Logger</link> &amp; cxindex::Logger::operator&lt;&lt; (CXCursor cursor)</computeroutput></para><para>
Definition at line <link linkend="__c_index_8cpp_source_1l09132">9132</link> of file <link linkend="__c_index_8cpp_source">CIndex.cpp</link>.</para>
<programlisting>09132 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
09133 &#32;&#32;CXString&#32;cursorName&#32;=&#32;<link linkend="__c_index_8cpp_1adacc338d2829e50ff0395a8384d507b3">clang_getCursorDisplayName</link>(cursor);
09134 &#32;&#32;*<emphasis role="keyword">this</emphasis>&#32;&lt;&lt;&#32;cursorName&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;@&quot;</emphasis>&#32;&lt;&lt;&#32;<link linkend="__c_index_8cpp_1a98001a3f8eb3a76d9c12821c45ef3708">clang_getCursorLocation</link>(cursor);
09135 &#32;&#32;<link linkend="__c_x_string_8cpp_1a46c85f1255580ed186aa6f7380a06883">clang_disposeString</link>(cursorName);
09136 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
09137 }
</programlisting><para>
References <link linkend="__c_x_string_8cpp_source_1l00170">clang_disposeString()</link>, <link linkend="__c_index_8cpp_source_1l05120">clang_getCursorDisplayName()</link>, and <link linkend="__c_index_8cpp_source_1l05986">clang_getCursorLocation()</link>.</para>
    </section><anchor xml:id="_classclang_1_1cxindex_1_1_logger_1a73a78023cdddd5fba6304a7503721c05"/>    <section>
    <title>operator&lt;&lt;()<computeroutput>[6/16]</computeroutput></title>
<indexterm><primary>operator&lt;&lt;</primary><secondary>clang::cxindex::Logger</secondary></indexterm>
<indexterm><primary>clang::cxindex::Logger</primary><secondary>operator&lt;&lt;</secondary></indexterm>
<para><computeroutput><link linkend="_classclang_1_1cxindex_1_1_logger">Logger</link> &amp; cxindex::Logger::operator&lt;&lt; (CXSourceLocation Loc)</computeroutput></para><para>
Definition at line <link linkend="__c_index_8cpp_source_1l09139">9139</link> of file <link linkend="__c_index_8cpp_source">CIndex.cpp</link>.</para>
<programlisting>09139 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
09140 &#32;&#32;CXFile&#32;File;
09141 &#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;Line,&#32;Column;
09142 &#32;&#32;<link linkend="__c_x_source_location_8cpp_1a35b4c0e781e65d746666e3d263b000e8">clang_getFileLocation</link>(Loc,&#32;&amp;File,&#32;&amp;Line,&#32;&amp;Column,&#32;<emphasis role="keyword">nullptr</emphasis>);
09143 &#32;&#32;CXString&#32;FileName&#32;=&#32;<link linkend="__c_index_8cpp_1a263c34f5782353186990b2c990d648fc">clang_getFileName</link>(File);
09144 &#32;&#32;*<emphasis role="keyword">this</emphasis>&#32;&lt;&lt;&#32;llvm::format(<emphasis role="stringliteral">&quot;(%s:%d:%d)&quot;</emphasis>,&#32;<link linkend="__c_x_string_8cpp_1acd478c1b1785e17c0fe377bd70a2195f">clang_getCString</link>(FileName),&#32;Line,&#32;Column);
09145 &#32;&#32;<link linkend="__c_x_string_8cpp_1a46c85f1255580ed186aa6f7380a06883">clang_disposeString</link>(FileName);
09146 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
09147 }
</programlisting><para>
References <link linkend="__c_x_source_location_8cpp_source_1l00340">clang_getFileLocation()</link>, and <link linkend="__c_index_8cpp_source_1l04379">clang_getFileName()</link>.</para>
    </section><anchor xml:id="_classclang_1_1cxindex_1_1_logger_1aee27c999d935aa98123a7d84d9ba00f5"/>    <section>
    <title>operator&lt;&lt;()<computeroutput>[7/16]</computeroutput></title>
<indexterm><primary>operator&lt;&lt;</primary><secondary>clang::cxindex::Logger</secondary></indexterm>
<indexterm><primary>clang::cxindex::Logger</primary><secondary>operator&lt;&lt;</secondary></indexterm>
<para><computeroutput><link linkend="_classclang_1_1cxindex_1_1_logger">Logger</link> &amp; cxindex::Logger::operator&lt;&lt; (CXSourceRange range)</computeroutput></para><para>
Definition at line <link linkend="__c_index_8cpp_source_1l09149">9149</link> of file <link linkend="__c_index_8cpp_source">CIndex.cpp</link>.</para>
<programlisting>09149 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
09150 &#32;&#32;CXSourceLocation&#32;BLoc&#32;=&#32;<link linkend="__c_x_source_location_8cpp_1a14a10dd8d9a4069c4fc1a7be62f58874">clang_getRangeStart</link>(range);
09151 &#32;&#32;CXSourceLocation&#32;ELoc&#32;=&#32;<link linkend="__c_x_source_location_8cpp_1a146c4bda0251ee320dc6e4b1b3fbb919">clang_getRangeEnd</link>(range);
09152 
09153 &#32;&#32;CXFile&#32;BFile;
09154 &#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;BLine,&#32;BColumn;
09155 &#32;&#32;<link linkend="__c_x_source_location_8cpp_1a35b4c0e781e65d746666e3d263b000e8">clang_getFileLocation</link>(BLoc,&#32;&amp;BFile,&#32;&amp;BLine,&#32;&amp;BColumn,&#32;<emphasis role="keyword">nullptr</emphasis>);
09156 
09157 &#32;&#32;CXFile&#32;EFile;
09158 &#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;ELine,&#32;EColumn;
09159 &#32;&#32;<link linkend="__c_x_source_location_8cpp_1a35b4c0e781e65d746666e3d263b000e8">clang_getFileLocation</link>(ELoc,&#32;&amp;EFile,&#32;&amp;ELine,&#32;&amp;EColumn,&#32;<emphasis role="keyword">nullptr</emphasis>);
09160 
09161 &#32;&#32;CXString&#32;BFileName&#32;=&#32;<link linkend="__c_index_8cpp_1a263c34f5782353186990b2c990d648fc">clang_getFileName</link>(BFile);
09162 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(BFile&#32;==&#32;EFile)&#32;{
09163 &#32;&#32;&#32;&#32;*<emphasis role="keyword">this</emphasis>&#32;&lt;&lt;&#32;llvm::format(<emphasis role="stringliteral">&quot;[%s&#32;%d:%d-%d:%d]&quot;</emphasis>,&#32;<link linkend="__c_x_string_8cpp_1acd478c1b1785e17c0fe377bd70a2195f">clang_getCString</link>(BFileName),
09164 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;BLine,&#32;BColumn,&#32;ELine,&#32;EColumn);
09165 &#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
09166 &#32;&#32;&#32;&#32;CXString&#32;EFileName&#32;=&#32;<link linkend="__c_index_8cpp_1a263c34f5782353186990b2c990d648fc">clang_getFileName</link>(EFile);
09167 &#32;&#32;&#32;&#32;*<emphasis role="keyword">this</emphasis>&#32;&lt;&lt;&#32;llvm::format(<emphasis role="stringliteral">&quot;[%s:%d:%d&#32;-&#32;&quot;</emphasis>,&#32;<link linkend="__c_x_string_8cpp_1acd478c1b1785e17c0fe377bd70a2195f">clang_getCString</link>(BFileName),&#32;BLine,
09168 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;BColumn)
09169 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;llvm::format(<emphasis role="stringliteral">&quot;%s:%d:%d]&quot;</emphasis>,&#32;<link linkend="__c_x_string_8cpp_1acd478c1b1785e17c0fe377bd70a2195f">clang_getCString</link>(EFileName),&#32;ELine,
09170 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;EColumn);
09171 &#32;&#32;&#32;&#32;<link linkend="__c_x_string_8cpp_1a46c85f1255580ed186aa6f7380a06883">clang_disposeString</link>(EFileName);
09172 &#32;&#32;}
09173 &#32;&#32;<link linkend="__c_x_string_8cpp_1a46c85f1255580ed186aa6f7380a06883">clang_disposeString</link>(BFileName);
09174 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
09175 }
</programlisting><para>
References <link linkend="__c_x_source_location_8cpp_source_1l00340">clang_getFileLocation()</link>, <link linkend="__c_index_8cpp_source_1l04379">clang_getFileName()</link>, <link linkend="__c_x_source_location_8cpp_source_1l00099">clang_getRangeEnd()</link>, and <link linkend="__c_x_source_location_8cpp_source_1l00087">clang_getRangeStart()</link>.</para>
    </section><anchor xml:id="_classclang_1_1cxindex_1_1_logger_1a72afd6570e5f5b75d3efbdf852c23c54"/>    <section>
    <title>operator&lt;&lt;()<computeroutput>[8/16]</computeroutput></title>
<indexterm><primary>operator&lt;&lt;</primary><secondary>clang::cxindex::Logger</secondary></indexterm>
<indexterm><primary>clang::cxindex::Logger</primary><secondary>operator&lt;&lt;</secondary></indexterm>
<para><computeroutput><link linkend="_classclang_1_1cxindex_1_1_logger">Logger</link> &amp; cxindex::Logger::operator&lt;&lt; (CXString Str)</computeroutput></para><para>
Definition at line <link linkend="__c_index_8cpp_source_1l09177">9177</link> of file <link linkend="__c_index_8cpp_source">CIndex.cpp</link>.</para>
<programlisting>09177 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
09178 &#32;&#32;*<emphasis role="keyword">this</emphasis>&#32;&lt;&lt;&#32;<link linkend="__c_x_string_8cpp_1acd478c1b1785e17c0fe377bd70a2195f">clang_getCString</link>(Str);
09179 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
09180 }
</programlisting><para>
References <link linkend="__c_x_string_8cpp_source_1l00163">clang_getCString()</link>.</para>
    </section><anchor xml:id="_classclang_1_1cxindex_1_1_logger_1a051287c9aa1d57fb4f8db77f51934cd8"/>    <section>
    <title>operator&lt;&lt;()<computeroutput>[9/16]</computeroutput></title>
<indexterm><primary>operator&lt;&lt;</primary><secondary>clang::cxindex::Logger</secondary></indexterm>
<indexterm><primary>clang::cxindex::Logger</primary><secondary>operator&lt;&lt;</secondary></indexterm>
<para><computeroutput><link linkend="_classclang_1_1cxindex_1_1_logger">Logger</link> &amp; cxindex::Logger::operator&lt;&lt; (CXTranslationUnit TU)</computeroutput></para><para>
Definition at line <link linkend="__c_index_8cpp_source_1l09113">9113</link> of file <link linkend="__c_index_8cpp_source">CIndex.cpp</link>.</para>
<programlisting>09113 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
09114 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(TU)&#32;{
09115 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(ASTUnit&#32;*Unit&#32;=&#32;cxtu::getASTUnit(TU))&#32;{
09116 &#32;&#32;&#32;&#32;&#32;&#32;LogOS&#32;&lt;&lt;&#32;<emphasis role="charliteral">&apos;&lt;&apos;</emphasis>&#32;&lt;&lt;&#32;Unit-&gt;getMainFileName()&#32;&lt;&lt;&#32;<emphasis role="charliteral">&apos;&gt;&apos;</emphasis>;
09117 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(Unit-&gt;isMainFileAST())
09118 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;LogOS&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;(&quot;</emphasis>&#32;&lt;&lt;&#32;Unit-&gt;getASTFileName()&#32;&lt;&lt;&#32;<emphasis role="charliteral">&apos;)&apos;</emphasis>;
09119 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
09120 &#32;&#32;&#32;&#32;}
09121 &#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
09122 &#32;&#32;&#32;&#32;LogOS&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&lt;NULL&#32;TU&gt;&quot;</emphasis>;
09123 &#32;&#32;}
09124 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
09125 }
</programlisting>    </section><anchor xml:id="_classclang_1_1cxindex_1_1_logger_1a1e7c9b69f72574aac0ef7291aae27361"/>    <section>
    <title>operator&lt;&lt;()<computeroutput>[10/16]</computeroutput></title>
<indexterm><primary>operator&lt;&lt;</primary><secondary>clang::cxindex::Logger</secondary></indexterm>
<indexterm><primary>clang::cxindex::Logger</primary><secondary>operator&lt;&lt;</secondary></indexterm>
<para><computeroutput><link linkend="_classclang_1_1cxindex_1_1_logger">Logger</link>&amp; clang::cxindex::Logger::operator&lt;&lt; (int N)<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line <link linkend="__c_log_8h_source_1l00082">82</link> of file <link linkend="__c_log_8h_source">CLog.h</link>.</para>
<programlisting>00082 {&#32;LogOS&#32;&lt;&lt;&#32;N;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;&#32;}
</programlisting>    </section><anchor xml:id="_classclang_1_1cxindex_1_1_logger_1aef640ad0edd2bf80ccec7551f2b1660c"/>    <section>
    <title>operator&lt;&lt;()<computeroutput>[11/16]</computeroutput></title>
<indexterm><primary>operator&lt;&lt;</primary><secondary>clang::cxindex::Logger</secondary></indexterm>
<indexterm><primary>clang::cxindex::Logger</primary><secondary>operator&lt;&lt;</secondary></indexterm>
<para><computeroutput><link linkend="_classclang_1_1cxindex_1_1_logger">Logger</link>&amp; clang::cxindex::Logger::operator&lt;&lt; (llvm::StringRef Str)<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line <link linkend="__c_log_8h_source_1l00073">73</link> of file <link linkend="__c_log_8h_source">CLog.h</link>.</para>
<programlisting>00073 {&#32;LogOS&#32;&lt;&lt;&#32;Str;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;&#32;}
</programlisting>    </section><anchor xml:id="_classclang_1_1cxindex_1_1_logger_1a2e8731c4f4ed781d6556deaf9623d4f4"/>    <section>
    <title>operator&lt;&lt;()<computeroutput>[12/16]</computeroutput></title>
<indexterm><primary>operator&lt;&lt;</primary><secondary>clang::cxindex::Logger</secondary></indexterm>
<indexterm><primary>clang::cxindex::Logger</primary><secondary>operator&lt;&lt;</secondary></indexterm>
<para><computeroutput><link linkend="_classclang_1_1cxindex_1_1_logger">Logger</link>&amp; clang::cxindex::Logger::operator&lt;&lt; (long N)<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line <link linkend="__c_log_8h_source_1l00080">80</link> of file <link linkend="__c_log_8h_source">CLog.h</link>.</para>
<programlisting>00080 {&#32;LogOS&#32;&lt;&lt;&#32;N&#32;;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;&#32;}
</programlisting>    </section><anchor xml:id="_classclang_1_1cxindex_1_1_logger_1a824b1b2f5fd27af757af2882d897e5d1"/>    <section>
    <title>operator&lt;&lt;()<computeroutput>[13/16]</computeroutput></title>
<indexterm><primary>operator&lt;&lt;</primary><secondary>clang::cxindex::Logger</secondary></indexterm>
<indexterm><primary>clang::cxindex::Logger</primary><secondary>operator&lt;&lt;</secondary></indexterm>
<para><computeroutput><link linkend="_classclang_1_1cxindex_1_1_logger">Logger</link>&amp; clang::cxindex::Logger::operator&lt;&lt; (signed char C)<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line <link linkend="__c_log_8h_source_1l00085">85</link> of file <link linkend="__c_log_8h_source">CLog.h</link>.</para>
<programlisting>00085 {&#32;LogOS&#32;&lt;&lt;&#32;C;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;&#32;}
</programlisting>    </section><anchor xml:id="_classclang_1_1cxindex_1_1_logger_1a7eb6d48af5cd2c755d2cd1628dd6e29a"/>    <section>
    <title>operator&lt;&lt;()<computeroutput>[14/16]</computeroutput></title>
<indexterm><primary>operator&lt;&lt;</primary><secondary>clang::cxindex::Logger</secondary></indexterm>
<indexterm><primary>clang::cxindex::Logger</primary><secondary>operator&lt;&lt;</secondary></indexterm>
<para><computeroutput><link linkend="_classclang_1_1cxindex_1_1_logger">Logger</link>&amp; clang::cxindex::Logger::operator&lt;&lt; (unsigned char C)<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line <link linkend="__c_log_8h_source_1l00084">84</link> of file <link linkend="__c_log_8h_source">CLog.h</link>.</para>
<programlisting>00084 {&#32;LogOS&#32;&lt;&lt;&#32;C;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;&#32;}
</programlisting>    </section><anchor xml:id="_classclang_1_1cxindex_1_1_logger_1a822a268e0a363b1f035450f66ce82b7d"/>    <section>
    <title>operator&lt;&lt;()<computeroutput>[15/16]</computeroutput></title>
<indexterm><primary>operator&lt;&lt;</primary><secondary>clang::cxindex::Logger</secondary></indexterm>
<indexterm><primary>clang::cxindex::Logger</primary><secondary>operator&lt;&lt;</secondary></indexterm>
<para><computeroutput><link linkend="_classclang_1_1cxindex_1_1_logger">Logger</link>&amp; clang::cxindex::Logger::operator&lt;&lt; (unsigned int N)<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line <link linkend="__c_log_8h_source_1l00081">81</link> of file <link linkend="__c_log_8h_source">CLog.h</link>.</para>
<programlisting>00081 {&#32;LogOS&#32;&lt;&lt;&#32;N;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;&#32;}
</programlisting>    </section><anchor xml:id="_classclang_1_1cxindex_1_1_logger_1aeb714f5bac1ea79f9a7d4a7576a35e4a"/>    <section>
    <title>operator&lt;&lt;()<computeroutput>[16/16]</computeroutput></title>
<indexterm><primary>operator&lt;&lt;</primary><secondary>clang::cxindex::Logger</secondary></indexterm>
<indexterm><primary>clang::cxindex::Logger</primary><secondary>operator&lt;&lt;</secondary></indexterm>
<para><computeroutput><link linkend="_classclang_1_1cxindex_1_1_logger">Logger</link>&amp; clang::cxindex::Logger::operator&lt;&lt; (unsigned long N)<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line <link linkend="__c_log_8h_source_1l00079">79</link> of file <link linkend="__c_log_8h_source">CLog.h</link>.</para>
<programlisting>00079 {&#32;LogOS&#32;&lt;&lt;&#32;N;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;&#32;}
</programlisting></section>
<para>
The documentation for this class was generated from the following files:</para>
/Users/maximilian/clang-llvm/clang/tools/libclang/<link linkend="__c_log_8h">CLog.h</link>/Users/maximilian/clang-llvm/clang/tools/libclang/<link linkend="__c_index_8cpp">CIndex.cpp</link></section>
</section>
