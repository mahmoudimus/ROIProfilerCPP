<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_loop__proto__to__cxx_8cpp_source" xml:lang="en-US">
<title>loop_proto_to_cxx.cpp</title>
<indexterm><primary>/Users/maximilian/clang-llvm/clang/tools/clang-fuzzer/proto-to-cxx/loop_proto_to_cxx.cpp</primary></indexterm>
<programlisting>00001 <emphasis role="comment">//==--&#32;loop_proto_to_cxx.cpp&#32;-&#32;Protobuf-C++&#32;conversion&#32;---------------------==//</emphasis>
00002 <emphasis role="comment">//</emphasis>
00003 <emphasis role="comment">//&#32;Part&#32;of&#32;the&#32;LLVM&#32;Project,&#32;under&#32;the&#32;Apache&#32;License&#32;v2.0&#32;with&#32;LLVM&#32;Exceptions.</emphasis>
00004 <emphasis role="comment">//&#32;See&#32;https://llvm.org/LICENSE.txt&#32;for&#32;license&#32;information.</emphasis>
00005 <emphasis role="comment">//&#32;SPDX-License-Identifier:&#32;Apache-2.0&#32;WITH&#32;LLVM-exception</emphasis>
00006 <emphasis role="comment">//</emphasis>
00007 <emphasis role="comment">//===----------------------------------------------------------------------===//</emphasis>
00008 <emphasis role="comment">//</emphasis>
00009 <emphasis role="comment">//&#32;Implements&#32;functions&#32;for&#32;converting&#32;between&#32;protobufs&#32;and&#32;C++.&#32;Differs&#32;from</emphasis>
00010 <emphasis role="comment">//&#32;proto_to_cxx.cpp&#32;by&#32;wrapping&#32;all&#32;the&#32;generated&#32;C++&#32;code&#32;in&#32;either&#32;a&#32;single</emphasis>
00011 <emphasis role="comment">//&#32;for&#32;loop&#32;or&#32;two&#32;nested&#32;loops.&#32;Also&#32;outputs&#32;a&#32;different&#32;function&#32;signature</emphasis>
00012 <emphasis role="comment">//&#32;that&#32;includes&#32;a&#32;size_t&#32;parameter&#32;for&#32;the&#32;loop&#32;to&#32;use.&#32;The&#32;C++&#32;code&#32;generated</emphasis>
00013 <emphasis role="comment">//&#32;is&#32;meant&#32;to&#32;stress&#32;the&#32;LLVM&#32;loop&#32;vectorizer.</emphasis>
00014 <emphasis role="comment">//</emphasis>
00015 <emphasis role="comment">//&#32;Still&#32;a&#32;work&#32;in&#32;progress.</emphasis>
00016 <emphasis role="comment">//</emphasis>
00017 <emphasis role="comment">//===----------------------------------------------------------------------===//</emphasis>
00018 
00019 <emphasis role="preprocessor">#include&#32;&quot;cxx_loop_proto.pb.h&quot;</emphasis>
00020 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="_proto__to__cxx_8h">proto_to_cxx.h</link>&quot;</emphasis>
00021 
00022 <emphasis role="comment">//&#32;The&#32;following&#32;is&#32;needed&#32;to&#32;convert&#32;protos&#32;in&#32;human-readable&#32;form</emphasis>
00023 <emphasis role="preprocessor">#include&#32;&lt;google/protobuf/text_format.h&gt;</emphasis>
00024 
00025 <emphasis role="preprocessor">#include&#32;&lt;ostream&gt;</emphasis>
00026 <emphasis role="preprocessor">#include&#32;&lt;sstream&gt;</emphasis>
00027 
00028 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespaceclang__fuzzer">clang_fuzzer</link>&#32;{
00029 
00030 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;inner_loop&#32;=&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="_loop__proto__to__cxx_8cpp_source_1l00031"/><link linkend="_classclang__fuzzer_1_1_inner_loop">00031</link> <emphasis role="keyword">class&#32;</emphasis><link linkend="_classclang__fuzzer_1_1_inner_loop">InnerLoop</link>&#32;{
00032 &#32;&#32;<emphasis role="keyword">public</emphasis>:
<anchor xml:id="_loop__proto__to__cxx_8cpp_source_1l00033"/><link linkend="_classclang__fuzzer_1_1_inner_loop_1a3dd86f82bc4add7f2a25d1c974034d28">00033</link> &#32;&#32;<link linkend="_classclang__fuzzer_1_1_inner_loop_1a3dd86f82bc4add7f2a25d1c974034d28">InnerLoop</link>()&#32;{
00034 &#32;&#32;&#32;&#32;inner_loop&#32;=&#32;<emphasis role="keyword">true</emphasis>;
00035 &#32;&#32;}
<anchor xml:id="_loop__proto__to__cxx_8cpp_source_1l00036"/><link linkend="_classclang__fuzzer_1_1_inner_loop_1a2cae2f5516dfa033e33cc78c653bc199">00036</link> &#32;&#32;<link linkend="_classclang__fuzzer_1_1_inner_loop_1a2cae2f5516dfa033e33cc78c653bc199">~InnerLoop</link>()&#32;{
00037 &#32;&#32;&#32;&#32;inner_loop&#32;=&#32;<emphasis role="keyword">false</emphasis>;
00038 &#32;&#32;}
00039 };
00040 
00041 <emphasis role="comment">//&#32;Forward&#32;decls.</emphasis>
00042 std::ostream&#32;&amp;<link linkend="_namespaceclang__fuzzer_1a999bc51b48e947b0f7feb714749b0a21">operator&lt;&lt;</link>(std::ostream&#32;&amp;os,&#32;<emphasis role="keyword">const</emphasis>&#32;BinaryOp&#32;&amp;x);
00043 std::ostream&#32;&amp;<link linkend="_namespaceclang__fuzzer_1a999bc51b48e947b0f7feb714749b0a21">operator&lt;&lt;</link>(std::ostream&#32;&amp;os,&#32;<emphasis role="keyword">const</emphasis>&#32;StatementSeq&#32;&amp;x);
00044 
00045 <emphasis role="comment">//&#32;Proto&#32;to&#32;C++.</emphasis>
<anchor xml:id="_loop__proto__to__cxx_8cpp_source_1l00046"/><link linkend="_namespaceclang__fuzzer_1ac8954993cdf896f3a8247559fcd1c198">00046</link> std::ostream&#32;&amp;<link linkend="_namespaceclang__fuzzer_1a999bc51b48e947b0f7feb714749b0a21">operator&lt;&lt;</link>(std::ostream&#32;&amp;os,&#32;<emphasis role="keyword">const</emphasis>&#32;Const&#32;&amp;x)&#32;{
00047 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;os&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;(&quot;</emphasis>&#32;&lt;&lt;&#32;x.val()&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;)&quot;</emphasis>;
00048 }
<anchor xml:id="_loop__proto__to__cxx_8cpp_source_1l00049"/><link linkend="_namespaceclang__fuzzer_1a495bf005e5556e5d7428afadce257135">00049</link> std::ostream&#32;&amp;<link linkend="_namespaceclang__fuzzer_1a999bc51b48e947b0f7feb714749b0a21">operator&lt;&lt;</link>(std::ostream&#32;&amp;os,&#32;<emphasis role="keyword">const</emphasis>&#32;VarRef&#32;&amp;x)&#32;{
00050 &#32;&#32;std::string&#32;which_loop&#32;=&#32;inner_loop&#32;?&#32;<emphasis role="stringliteral">&quot;j&quot;</emphasis>&#32;:&#32;<emphasis role="stringliteral">&quot;i&quot;</emphasis>;
00051 &#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(x.arr())&#32;{
00052 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;VarRef::ARR_A:
00053 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;os&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;a[&quot;</emphasis>&#32;&lt;&lt;&#32;which_loop&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;]&quot;</emphasis>;
00054 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;VarRef::ARR_B:
00055 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;os&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;b[&quot;</emphasis>&#32;&lt;&lt;&#32;which_loop&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;]&quot;</emphasis>;
00056 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;VarRef::ARR_C:
00057 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;os&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;c[&quot;</emphasis>&#32;&lt;&lt;&#32;which_loop&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;]&quot;</emphasis>;
00058 &#32;&#32;}
00059 }
<anchor xml:id="_loop__proto__to__cxx_8cpp_source_1l00060"/><link linkend="_namespaceclang__fuzzer_1a2375d76e387c15285dda8d15dad36f0e">00060</link> std::ostream&#32;&amp;<link linkend="_namespaceclang__fuzzer_1a999bc51b48e947b0f7feb714749b0a21">operator&lt;&lt;</link>(std::ostream&#32;&amp;os,&#32;<emphasis role="keyword">const</emphasis>&#32;Rvalue&#32;&amp;x)&#32;{
00061 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(x.has_cons())
00062 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;os&#32;&lt;&lt;&#32;x.cons();
00063 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(x.has_binop())
00064 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;os&#32;&lt;&lt;&#32;x.binop();
00065 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(x.has_varref())
00066 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;os&#32;&lt;&lt;&#32;x.varref();
00067 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;os&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;1&quot;</emphasis>;
00068 }
<anchor xml:id="_loop__proto__to__cxx_8cpp_source_1l00069"/><link linkend="_namespaceclang__fuzzer_1a999bc51b48e947b0f7feb714749b0a21">00069</link> std::ostream&#32;&amp;<link linkend="_namespaceclang__fuzzer_1a999bc51b48e947b0f7feb714749b0a21">operator&lt;&lt;</link>(std::ostream&#32;&amp;os,&#32;<emphasis role="keyword">const</emphasis>&#32;BinaryOp&#32;&amp;x)&#32;{
00070 &#32;&#32;os&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;(&quot;</emphasis>&#32;&lt;&lt;&#32;x.left();
00071 &#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(x.op())&#32;{
00072 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;BinaryOp::PLUS:
00073 &#32;&#32;&#32;&#32;os&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;+&quot;</emphasis>;
00074 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
00075 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;BinaryOp::MINUS:
00076 &#32;&#32;&#32;&#32;os&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;-&quot;</emphasis>;
00077 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
00078 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;BinaryOp::MUL:
00079 &#32;&#32;&#32;&#32;os&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;*&quot;</emphasis>;
00080 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
00081 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;BinaryOp::XOR:
00082 &#32;&#32;&#32;&#32;os&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;^&quot;</emphasis>;
00083 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
00084 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;BinaryOp::AND:
00085 &#32;&#32;&#32;&#32;os&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&amp;&quot;</emphasis>;
00086 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
00087 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;BinaryOp::OR:
00088 &#32;&#32;&#32;&#32;os&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;|&quot;</emphasis>;
00089 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
00090 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;BinaryOp::EQ:
00091 &#32;&#32;&#32;&#32;os&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;==&quot;</emphasis>;
00092 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
00093 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;BinaryOp::NE:
00094 &#32;&#32;&#32;&#32;os&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;!=&quot;</emphasis>;
00095 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
00096 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;BinaryOp::LE:
00097 &#32;&#32;&#32;&#32;os&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&lt;=&quot;</emphasis>;
00098 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
00099 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;BinaryOp::GE:
00100 &#32;&#32;&#32;&#32;os&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&gt;=&quot;</emphasis>;
00101 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
00102 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;BinaryOp::LT:
00103 &#32;&#32;&#32;&#32;os&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&lt;&quot;</emphasis>;
00104 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
00105 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;BinaryOp::GT:
00106 &#32;&#32;&#32;&#32;os&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&gt;&quot;</emphasis>;
00107 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
00108 &#32;&#32;}
00109 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;os&#32;&lt;&lt;&#32;x.right()&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;)&quot;</emphasis>;
00110 }
<anchor xml:id="_loop__proto__to__cxx_8cpp_source_1l00111"/><link linkend="_namespaceclang__fuzzer_1adefdaecdbb1de92f0eeba7640b89685b">00111</link> std::ostream&#32;&amp;<link linkend="_namespaceclang__fuzzer_1a999bc51b48e947b0f7feb714749b0a21">operator&lt;&lt;</link>(std::ostream&#32;&amp;os,&#32;<emphasis role="keyword">const</emphasis>&#32;AssignmentStatement&#32;&amp;x)&#32;{
00112 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;os&#32;&lt;&lt;&#32;x.varref()&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;=&quot;</emphasis>&#32;&lt;&lt;&#32;x.rvalue()&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;;\n&quot;</emphasis>;
00113 }
<anchor xml:id="_loop__proto__to__cxx_8cpp_source_1l00114"/><link linkend="_namespaceclang__fuzzer_1ac90ec7b7ecf1e1ead9595d1a983f022d">00114</link> std::ostream&#32;&amp;<link linkend="_namespaceclang__fuzzer_1a999bc51b48e947b0f7feb714749b0a21">operator&lt;&lt;</link>(std::ostream&#32;&amp;os,&#32;<emphasis role="keyword">const</emphasis>&#32;Statement&#32;&amp;x)&#32;{
00115 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;os&#32;&lt;&lt;&#32;x.assignment();
00116 }
<anchor xml:id="_loop__proto__to__cxx_8cpp_source_1l00117"/><link linkend="_namespaceclang__fuzzer_1aed1d352356cde87e890c29c8c4d67395">00117</link> std::ostream&#32;&amp;<link linkend="_namespaceclang__fuzzer_1a999bc51b48e947b0f7feb714749b0a21">operator&lt;&lt;</link>(std::ostream&#32;&amp;os,&#32;<emphasis role="keyword">const</emphasis>&#32;StatementSeq&#32;&amp;x)&#32;{
00118 &#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">auto</emphasis>&#32;&amp;st&#32;:&#32;x.statements())
00119 &#32;&#32;&#32;&#32;os&#32;&lt;&lt;&#32;st;
00120 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;os;
00121 }
<anchor xml:id="_loop__proto__to__cxx_8cpp_source_1l00122"/><link linkend="_namespaceclang__fuzzer_1a1de27ebdd8a199c6bdbb5a195631f553">00122</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_namespaceclang__fuzzer_1a1de27ebdd8a199c6bdbb5a195631f553">NestedLoopToString</link>(std::ostream&#32;&amp;os,&#32;<emphasis role="keyword">const</emphasis>&#32;LoopFunction&#32;&amp;x)&#32;{
00123 &#32;&#32;os&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;void&#32;foo(int&#32;*a,&#32;int&#32;*b,&#32;int&#32;*__restrict__&#32;c,&#32;size_t&#32;s)&#32;{\n&quot;</emphasis>
00124 &#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;for&#32;(int&#32;i=0;&#32;i&lt;s;&#32;i++){\n&quot;</emphasis>
00125 &#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;for&#32;(int&#32;j=0;&#32;j&lt;s;&#32;j++){\n&quot;</emphasis>;
00126 &#32;&#32;{
00127 &#32;&#32;&#32;&#32;<link linkend="_classclang__fuzzer_1_1_inner_loop">InnerLoop</link>&#32;IL;
00128 &#32;&#32;&#32;&#32;os&#32;&lt;&lt;&#32;x.inner_statements()&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;}\n&quot;</emphasis>;
00129 &#32;&#32;}
00130 &#32;&#32;os&#32;&lt;&lt;&#32;x.outer_statements()&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;}\n}\n&quot;</emphasis>;
00131 }
<anchor xml:id="_loop__proto__to__cxx_8cpp_source_1l00132"/><link linkend="_namespaceclang__fuzzer_1acecea2c5371f615b84065480211f1374">00132</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_namespaceclang__fuzzer_1acecea2c5371f615b84065480211f1374">SingleLoopToString</link>(std::ostream&#32;&amp;os,&#32;<emphasis role="keyword">const</emphasis>&#32;LoopFunction&#32;&amp;x)&#32;{
00133 &#32;&#32;os&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;void&#32;foo(int&#32;*a,&#32;int&#32;*b,&#32;int&#32;*__restrict__&#32;c,&#32;size_t&#32;s)&#32;{\n&quot;</emphasis>
00134 &#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;for&#32;(int&#32;i=0;&#32;i&lt;s;&#32;i++){\n&quot;</emphasis>
00135 &#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;x.outer_statements()&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;}\n}\n&quot;</emphasis>;
00136 }
<anchor xml:id="_loop__proto__to__cxx_8cpp_source_1l00137"/><link linkend="_namespaceclang__fuzzer_1a52282fc06ac9b7761f21d2588974776a">00137</link> std::ostream&#32;&amp;<link linkend="_namespaceclang__fuzzer_1a999bc51b48e947b0f7feb714749b0a21">operator&lt;&lt;</link>(std::ostream&#32;&amp;os,&#32;<emphasis role="keyword">const</emphasis>&#32;LoopFunction&#32;&amp;x)&#32;{
00138 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(x.has_inner_statements())
00139 &#32;&#32;&#32;&#32;<link linkend="_namespaceclang__fuzzer_1a1de27ebdd8a199c6bdbb5a195631f553">NestedLoopToString</link>(os,&#32;x);
00140 &#32;&#32;<emphasis role="keywordflow">else</emphasis>
00141 &#32;&#32;&#32;&#32;<link linkend="_namespaceclang__fuzzer_1acecea2c5371f615b84065480211f1374">SingleLoopToString</link>(os,&#32;x);
00142 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;os;
00143 }
00144 
00145 <emphasis role="comment">//&#32;---------------------------------</emphasis>
00146 
<anchor xml:id="_loop__proto__to__cxx_8cpp_source_1l00147"/><link linkend="_namespaceclang__fuzzer_1a944a037574154e7dedf0c719e2a4baf7">00147</link> std::string&#32;<link linkend="_namespaceclang__fuzzer_1a944a037574154e7dedf0c719e2a4baf7">LoopFunctionToString</link>(<emphasis role="keyword">const</emphasis>&#32;LoopFunction&#32;&amp;input)&#32;{
00148 &#32;&#32;std::ostringstream&#32;os;
00149 &#32;&#32;os&#32;&lt;&lt;&#32;input;
00150 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;os.str();
00151 }
<anchor xml:id="_loop__proto__to__cxx_8cpp_source_1l00152"/><link linkend="_namespaceclang__fuzzer_1acab6e28bea376a65f6d4ab66def83cac">00152</link> std::string&#32;<link linkend="_namespaceclang__fuzzer_1acab6e28bea376a65f6d4ab66def83cac">LoopProtoToCxx</link>(<emphasis role="keyword">const</emphasis>&#32;uint8_t&#32;*data,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;size)&#32;{
00153 &#32;&#32;LoopFunction&#32;message;
00154 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!message.ParsePartialFromArray(data,&#32;size))
00155 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="stringliteral">&quot;#error&#32;invalid&#32;proto\n&quot;</emphasis>;
00156 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang__fuzzer_1a944a037574154e7dedf0c719e2a4baf7">LoopFunctionToString</link>(message);
00157 }
00158 
00159 }&#32;<emphasis role="comment">//&#32;namespace&#32;clang_fuzzer</emphasis>
</programlisting></section>
