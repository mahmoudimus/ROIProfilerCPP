<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_classclang_1_1cxindex_1_1_c_x_index_data_consumer" xml:lang="en-US">
<title>clang::cxindex::CXIndexDataConsumer Class Reference</title>
<indexterm><primary>clang::cxindex::CXIndexDataConsumer</primary></indexterm>
<para>
<computeroutput>#include &lt;CXIndexDataConsumer.h&gt;</computeroutput>
</para>
<para>Inheritance diagram for clang::cxindex::CXIndexDataConsumer:    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="classclang_1_1cxindex_1_1_c_x_index_data_consumer.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
<simplesect>
    <title>Public Member Functions    </title>
        <itemizedlist>
            <listitem><para><link linkend="_classclang_1_1cxindex_1_1_c_x_index_data_consumer_1ab89887a4b3518ba4e801bc0bdca8f280">CXIndexDataConsumer</link> (CXClientData clientData, IndexerCallbacks &amp;indexCallbacks, unsigned indexOptions, CXTranslationUnit cxTU)</para>
</listitem>
            <listitem><para>ASTContext &amp; <link linkend="_classclang_1_1cxindex_1_1_c_x_index_data_consumer_1a7e411bdd51411afd713185c3e5d19f90">getASTContext</link> () const</para>
</listitem>
            <listitem><para>CXTranslationUnit <link linkend="_classclang_1_1cxindex_1_1_c_x_index_data_consumer_1a1e920a3dc7386fbef4b9e600cccd67bc">getCXTU</link> () const</para>
</listitem>
            <listitem><para>void <link linkend="_classclang_1_1cxindex_1_1_c_x_index_data_consumer_1a4f34d3862aaca2e111d2d6fc283c16dd">setASTContext</link> (ASTContext &amp;ctx)</para>
</listitem>
            <listitem><para>void <link linkend="_classclang_1_1cxindex_1_1_c_x_index_data_consumer_1a26c09f765fc8cb328b567d0df24e3de0">setPreprocessor</link> (std::shared_ptr&lt; Preprocessor &gt; PP) override</para>
</listitem>
            <listitem><para>bool <link linkend="_classclang_1_1cxindex_1_1_c_x_index_data_consumer_1a532578623b1df6f45e25230f11242472">shouldSuppressRefs</link> () const</para>
</listitem>
            <listitem><para>bool <link linkend="_classclang_1_1cxindex_1_1_c_x_index_data_consumer_1ab96bf30db26572795d6e705d74711d8e">shouldIndexFunctionLocalSymbols</link> () const</para>
</listitem>
            <listitem><para>bool <link linkend="_classclang_1_1cxindex_1_1_c_x_index_data_consumer_1aa1504de2c9de43d30f40776398b13904">shouldIndexImplicitTemplateInsts</link> () const</para>
</listitem>
            <listitem><para>bool <link linkend="_classclang_1_1cxindex_1_1_c_x_index_data_consumer_1a7448058a9a24e004514ecaacc168ea1a">shouldAbort</link> ()</para>
</listitem>
            <listitem><para>bool <link linkend="_classclang_1_1cxindex_1_1_c_x_index_data_consumer_1a1c5524b549de49a156156a134ac86970">hasDiagnosticCallback</link> () const</para>
</listitem>
            <listitem><para>void <link linkend="_classclang_1_1cxindex_1_1_c_x_index_data_consumer_1a5c669f287c160f0a54004247471fa65e">enteredMainFile</link> (const FileEntry *File)</para>
</listitem>
            <listitem><para>void <link linkend="_classclang_1_1cxindex_1_1_c_x_index_data_consumer_1a3b4e93bdd5828aee90dfbb5d09596c55">ppIncludedFile</link> (SourceLocation hashLoc, StringRef filename, const FileEntry *File, bool isImport, bool isAngled, bool isModuleImport)</para>
</listitem>
            <listitem><para>void <link linkend="_classclang_1_1cxindex_1_1_c_x_index_data_consumer_1a3b3231674a4065575b31c62792f59f17">importedModule</link> (const ImportDecl *ImportD)</para>
</listitem>
            <listitem><para>void <link linkend="_classclang_1_1cxindex_1_1_c_x_index_data_consumer_1ab8f6df5dd61289c7cc6189a5e6cff6b7">importedPCH</link> (const FileEntry *File)</para>
</listitem>
            <listitem><para>void <link linkend="_classclang_1_1cxindex_1_1_c_x_index_data_consumer_1a6b2dd8a844240181f6b09b91bfb25e7a">startedTranslationUnit</link> ()</para>
</listitem>
            <listitem><para>void <link linkend="_classclang_1_1cxindex_1_1_c_x_index_data_consumer_1aeaf562b1dfa9686d4076b4de7e06cbbb">indexDiagnostics</link> ()</para>
</listitem>
            <listitem><para>void <link linkend="_classclang_1_1cxindex_1_1_c_x_index_data_consumer_1a6d45d26c0132be1ec21d6abcf3dc96cf">handleDiagnosticSet</link> (CXDiagnosticSet CXDiagSet)</para>
</listitem>
            <listitem><para>bool <link linkend="_classclang_1_1cxindex_1_1_c_x_index_data_consumer_1aea220dde32945d87ccb22ec24e237765">handleFunction</link> (const FunctionDecl *FD)</para>
</listitem>
            <listitem><para>bool <link linkend="_classclang_1_1cxindex_1_1_c_x_index_data_consumer_1ad0117660a1e29cae3cfd1c2d6050b189">handleVar</link> (const VarDecl *D)</para>
</listitem>
            <listitem><para>bool <link linkend="_classclang_1_1cxindex_1_1_c_x_index_data_consumer_1adb81ff6898a8c7d84f1e00e28bc51d0f">handleField</link> (const FieldDecl *D)</para>
</listitem>
            <listitem><para>bool <link linkend="_classclang_1_1cxindex_1_1_c_x_index_data_consumer_1aa1a4eeb2b5c25fb04e2e13cb52916f35">handleEnumerator</link> (const EnumConstantDecl *D)</para>
</listitem>
            <listitem><para>bool <link linkend="_classclang_1_1cxindex_1_1_c_x_index_data_consumer_1a8c8934e7ebac3bffc5fe3c8d90bb4853">handleTagDecl</link> (const TagDecl *D)</para>
</listitem>
            <listitem><para>bool <link linkend="_classclang_1_1cxindex_1_1_c_x_index_data_consumer_1a0e826e01744c0b02fa8be496457105be">handleTypedefName</link> (const TypedefNameDecl *D)</para>
</listitem>
            <listitem><para>bool <link linkend="_classclang_1_1cxindex_1_1_c_x_index_data_consumer_1a5fe0ba54fa05604e9a5148384940779c">handleObjCInterface</link> (const ObjCInterfaceDecl *D)</para>
</listitem>
            <listitem><para>bool <link linkend="_classclang_1_1cxindex_1_1_c_x_index_data_consumer_1ac2e1baec864df9b4f431c88d005b1964">handleObjCImplementation</link> (const ObjCImplementationDecl *D)</para>
</listitem>
            <listitem><para>bool <link linkend="_classclang_1_1cxindex_1_1_c_x_index_data_consumer_1abda4f96d641a3bffe1dfd23402154681">handleObjCProtocol</link> (const ObjCProtocolDecl *D)</para>
</listitem>
            <listitem><para>bool <link linkend="_classclang_1_1cxindex_1_1_c_x_index_data_consumer_1af6f8ba6a1c6db0fbf5b3b7c36ce42935">handleObjCCategory</link> (const ObjCCategoryDecl *D)</para>
</listitem>
            <listitem><para>bool <link linkend="_classclang_1_1cxindex_1_1_c_x_index_data_consumer_1a384418d47049c76926499092ea8c6184">handleObjCCategoryImpl</link> (const ObjCCategoryImplDecl *D)</para>
</listitem>
            <listitem><para>bool <link linkend="_classclang_1_1cxindex_1_1_c_x_index_data_consumer_1ae332e3b4ea50f3d47053f858f37e4217">handleObjCMethod</link> (const ObjCMethodDecl *D, SourceLocation Loc)</para>
</listitem>
            <listitem><para>bool <link linkend="_classclang_1_1cxindex_1_1_c_x_index_data_consumer_1ab19b2040c03666b12d9d756b822e5237">handleSynthesizedObjCProperty</link> (const ObjCPropertyImplDecl *D)</para>
</listitem>
            <listitem><para>bool <link linkend="_classclang_1_1cxindex_1_1_c_x_index_data_consumer_1ac7f28ce4d8aa569c11fcb9aba670ba2f">handleSynthesizedObjCMethod</link> (const ObjCMethodDecl *D, SourceLocation Loc, const DeclContext *LexicalDC)</para>
</listitem>
            <listitem><para>bool <link linkend="_classclang_1_1cxindex_1_1_c_x_index_data_consumer_1ac2c613e39c59a85bf307057d61b5877b">handleObjCProperty</link> (const ObjCPropertyDecl *D)</para>
</listitem>
            <listitem><para>bool <link linkend="_classclang_1_1cxindex_1_1_c_x_index_data_consumer_1a7d653def424f7886d3d9240e6c8b02af">handleNamespace</link> (const NamespaceDecl *D)</para>
</listitem>
            <listitem><para>bool <link linkend="_classclang_1_1cxindex_1_1_c_x_index_data_consumer_1a5a41d4d26d98678a051873f0bd45607e">handleClassTemplate</link> (const ClassTemplateDecl *D)</para>
</listitem>
            <listitem><para>bool <link linkend="_classclang_1_1cxindex_1_1_c_x_index_data_consumer_1a3532519c64698588555b48efd372812f">handleFunctionTemplate</link> (const FunctionTemplateDecl *D)</para>
</listitem>
            <listitem><para>bool <link linkend="_classclang_1_1cxindex_1_1_c_x_index_data_consumer_1a51308071d5e3e1eb995b0e3447024810">handleTypeAliasTemplate</link> (const TypeAliasTemplateDecl *D)</para>
</listitem>
            <listitem><para>bool <link linkend="_classclang_1_1cxindex_1_1_c_x_index_data_consumer_1a6067a968d3482447348823dd7f913ced">handleReference</link> (const NamedDecl *D, SourceLocation Loc, CXCursor Cursor, const NamedDecl *Parent, const DeclContext *DC, const Expr *E=nullptr, CXIdxEntityRefKind Kind=CXIdxEntityRef_Direct, CXSymbolRole Role=CXSymbolRole_None)</para>
</listitem>
            <listitem><para>bool <link linkend="_classclang_1_1cxindex_1_1_c_x_index_data_consumer_1a05b282788c19ebbbe352b78f1d1229f6">isNotFromSourceFile</link> (SourceLocation Loc) const</para>
</listitem>
            <listitem><para>void <link linkend="_classclang_1_1cxindex_1_1_c_x_index_data_consumer_1a5332371a52c1329c815af24c5dab3ed1">translateLoc</link> (SourceLocation Loc, CXIdxClientFile *indexFile, CXFile *file, unsigned *line, unsigned *column, unsigned *offset)</para>
</listitem>
            <listitem><para>CXIdxClientContainer <link linkend="_classclang_1_1cxindex_1_1_c_x_index_data_consumer_1aab567cd0d93550e824a2e8f8e037d1f0">getClientContainerForDC</link> (const DeclContext *DC) const</para>
</listitem>
            <listitem><para>void <link linkend="_classclang_1_1cxindex_1_1_c_x_index_data_consumer_1aa606355afc24ae5ef78a5e1ae8e612c0">addContainerInMap</link> (const DeclContext *DC, CXIdxClientContainer container)</para>
</listitem>
            <listitem><para>CXIdxClientEntity <link linkend="_classclang_1_1cxindex_1_1_c_x_index_data_consumer_1a758cad6aecad503d6dbda574e8f11f1b">getClientEntity</link> (const Decl *D) const</para>
</listitem>
            <listitem><para>void <link linkend="_classclang_1_1cxindex_1_1_c_x_index_data_consumer_1a8410b188890a57a9e2034f3c5275be7e">setClientEntity</link> (const Decl *D, CXIdxClientEntity client)</para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Static Public Member Functions    </title>
        <itemizedlist>
            <listitem><para>static bool <link linkend="_classclang_1_1cxindex_1_1_c_x_index_data_consumer_1abbffca61e5023fb01eb8ab8dcace8d48">isFunctionLocalDecl</link> (const Decl *D)</para>
</listitem>
            <listitem><para>static bool <link linkend="_classclang_1_1cxindex_1_1_c_x_index_data_consumer_1a6b05f1224c212db76edacb87a7982e66">isTemplateImplicitInstantiation</link> (const Decl *D)</para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Friends    </title>
        <itemizedlist>
            <listitem><para>class <link linkend="_classclang_1_1cxindex_1_1_c_x_index_data_consumer_1a9256c2f0308f57ea9ed42e761acab1d4">ScratchAlloc</link></para>
</listitem>
            <listitem><para>class <link linkend="_classclang_1_1cxindex_1_1_c_x_index_data_consumer_1a8da7f07242735deb22345063fd847778">AttrListInfo</link></para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Detailed Description</title>
<para>
Definition at line <link linkend="__c_x_index_data_consumer_8h_source_1l00275">275</link> of file <link linkend="__c_x_index_data_consumer_8h_source">CXIndexDataConsumer.h</link>.</para>
</section>
<section>
<title>Constructor &amp; Destructor Documentation</title>
<anchor xml:id="_classclang_1_1cxindex_1_1_c_x_index_data_consumer_1ab89887a4b3518ba4e801bc0bdca8f280"/>    <section>
    <title>CXIndexDataConsumer()</title>
<indexterm><primary>CXIndexDataConsumer</primary><secondary>clang::cxindex::CXIndexDataConsumer</secondary></indexterm>
<indexterm><primary>clang::cxindex::CXIndexDataConsumer</primary><secondary>CXIndexDataConsumer</secondary></indexterm>
<para><computeroutput>clang::cxindex::CXIndexDataConsumer::CXIndexDataConsumer (CXClientData clientData, IndexerCallbacks &amp; indexCallbacks, unsigned indexOptions, CXTranslationUnit cxTU)<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line <link linkend="__c_x_index_data_consumer_8h_source_1l00334">334</link> of file <link linkend="__c_x_index_data_consumer_8h_source">CXIndexDataConsumer.h</link>.</para>
<programlisting>00336 &#32;&#32;&#32;&#32;:&#32;Ctx(<emphasis role="keyword">nullptr</emphasis>),&#32;ClientData(clientData),&#32;CB(indexCallbacks),
00337 &#32;&#32;&#32;&#32;&#32;&#32;IndexOptions(indexOptions),&#32;CXTU(cxTU),
00338 &#32;&#32;&#32;&#32;&#32;&#32;StrScratch(),&#32;StrAdapterCount(0)&#32;{&#32;}
</programlisting></section>
</section>
<section>
<title>Member Function Documentation</title>
<anchor xml:id="_classclang_1_1cxindex_1_1_c_x_index_data_consumer_1aa606355afc24ae5ef78a5e1ae8e612c0"/>    <section>
    <title>addContainerInMap()</title>
<indexterm><primary>addContainerInMap</primary><secondary>clang::cxindex::CXIndexDataConsumer</secondary></indexterm>
<indexterm><primary>clang::cxindex::CXIndexDataConsumer</primary><secondary>addContainerInMap</secondary></indexterm>
<para><computeroutput>void CXIndexDataConsumer::addContainerInMap (const DeclContext * DC, CXIdxClientContainer container)</computeroutput></para><para>
Definition at line <link linkend="__c_x_index_data_consumer_8cpp_source_1l00941">941</link> of file <link linkend="__c_x_index_data_consumer_8cpp_source">CXIndexDataConsumer.cpp</link>.</para>
<programlisting>00942 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00943 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!DC)
00944 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
00945 
00946 &#32;&#32;ContainerMapTy::iterator&#32;I&#32;=&#32;ContainerMap.find(DC);
00947 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(I&#32;==&#32;ContainerMap.end())&#32;{
00948 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(container)
00949 &#32;&#32;&#32;&#32;&#32;&#32;ContainerMap[DC]&#32;=&#32;container;
00950 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
00951 &#32;&#32;}
00952 &#32;&#32;<emphasis role="comment">//&#32;Allow&#32;changing&#32;the&#32;container&#32;of&#32;a&#32;previously&#32;seen&#32;DeclContext&#32;so&#32;we</emphasis>
00953 &#32;&#32;<emphasis role="comment">//&#32;can&#32;handle&#32;invalid&#32;user&#32;code,&#32;like&#32;a&#32;function&#32;re-definition.</emphasis>
00954 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(container)
00955 &#32;&#32;&#32;&#32;I-&gt;second&#32;=&#32;container;
00956 &#32;&#32;<emphasis role="keywordflow">else</emphasis>
00957 &#32;&#32;&#32;&#32;ContainerMap.erase(I);
00958 }
</programlisting><para>
Referenced by <link linkend="__indexing_8cpp_source_1l00829">clang_index_setClientContainer()</link>, and <link linkend="__c_x_index_data_consumer_8cpp_source_1l00519">startedTranslationUnit()</link>.</para>
    </section><anchor xml:id="_classclang_1_1cxindex_1_1_c_x_index_data_consumer_1a5c669f287c160f0a54004247471fa65e"/>    <section>
    <title>enteredMainFile()</title>
<indexterm><primary>enteredMainFile</primary><secondary>clang::cxindex::CXIndexDataConsumer</secondary></indexterm>
<indexterm><primary>clang::cxindex::CXIndexDataConsumer</primary><secondary>enteredMainFile</secondary></indexterm>
<para><computeroutput>void CXIndexDataConsumer::enteredMainFile (const FileEntry * File)</computeroutput></para><para>
Definition at line <link linkend="__c_x_index_data_consumer_8cpp_source_1l00450">450</link> of file <link linkend="__c_x_index_data_consumer_8cpp_source">CXIndexDataConsumer.cpp</link>.</para>
<programlisting>00450 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00451 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(File&#32;&amp;&amp;&#32;CB.enteredMainFile)&#32;{
00452 &#32;&#32;&#32;&#32;CXIdxClientFile&#32;idxFile&#32;=
00453 &#32;&#32;&#32;&#32;&#32;&#32;CB.enteredMainFile(ClientData,
00454 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_cast&lt;</emphasis>CXFile<emphasis role="keyword">&gt;</emphasis>(<emphasis role="keyword">const_cast&lt;</emphasis>FileEntry&#32;*<emphasis role="keyword">&gt;</emphasis>(File)),
00455 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">nullptr</emphasis>);
00456 &#32;&#32;&#32;&#32;FileMap[File]&#32;=&#32;idxFile;
00457 &#32;&#32;}
00458 }
</programlisting>    </section><anchor xml:id="_classclang_1_1cxindex_1_1_c_x_index_data_consumer_1a7e411bdd51411afd713185c3e5d19f90"/>    <section>
    <title>getASTContext()</title>
<indexterm><primary>getASTContext</primary><secondary>clang::cxindex::CXIndexDataConsumer</secondary></indexterm>
<indexterm><primary>clang::cxindex::CXIndexDataConsumer</primary><secondary>getASTContext</secondary></indexterm>
<para><computeroutput>ASTContext&amp; clang::cxindex::CXIndexDataConsumer::getASTContext ( ) const<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line <link linkend="__c_x_index_data_consumer_8h_source_1l00340">340</link> of file <link linkend="__c_x_index_data_consumer_8h_source">CXIndexDataConsumer.h</link>.</para>
<programlisting>00340 {&#32;<emphasis role="keywordflow">return</emphasis>&#32;*Ctx;&#32;}
</programlisting><para>
Referenced by <link linkend="__indexing_8cpp_source_1l00989">clang_indexLoc_getCXSourceLocation()</link>.</para>
    </section><anchor xml:id="_classclang_1_1cxindex_1_1_c_x_index_data_consumer_1aab567cd0d93550e824a2e8f8e037d1f0"/>    <section>
    <title>getClientContainerForDC()</title>
<indexterm><primary>getClientContainerForDC</primary><secondary>clang::cxindex::CXIndexDataConsumer</secondary></indexterm>
<indexterm><primary>clang::cxindex::CXIndexDataConsumer</primary><secondary>getClientContainerForDC</secondary></indexterm>
<para><computeroutput>CXIdxClientContainer CXIndexDataConsumer::getClientContainerForDC (const DeclContext * DC) const</computeroutput></para><para>
Definition at line <link linkend="__c_x_index_data_consumer_8cpp_source_1l01069">1069</link> of file <link linkend="__c_x_index_data_consumer_8cpp_source">CXIndexDataConsumer.cpp</link>.</para>
<programlisting>01069 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
01070 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!DC)
01071 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">nullptr</emphasis>;
01072 
01073 &#32;&#32;ContainerMapTy::const_iterator&#32;I&#32;=&#32;ContainerMap.find(DC);
01074 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(I&#32;==&#32;ContainerMap.end())
01075 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">nullptr</emphasis>;
01076 
01077 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;I-&gt;second;
01078 }
</programlisting><para>
Referenced by <link linkend="__indexing_8cpp_source_1l00822">clang_index_getClientContainer()</link>.</para>
    </section><anchor xml:id="_classclang_1_1cxindex_1_1_c_x_index_data_consumer_1a758cad6aecad503d6dbda574e8f11f1b"/>    <section>
    <title>getClientEntity()</title>
<indexterm><primary>getClientEntity</primary><secondary>clang::cxindex::CXIndexDataConsumer</secondary></indexterm>
<indexterm><primary>clang::cxindex::CXIndexDataConsumer</primary><secondary>getClientEntity</secondary></indexterm>
<para><computeroutput>CXIdxClientEntity CXIndexDataConsumer::getClientEntity (const Decl * D) const</computeroutput></para><para>
Definition at line <link linkend="__c_x_index_data_consumer_8cpp_source_1l00960">960</link> of file <link linkend="__c_x_index_data_consumer_8cpp_source">CXIndexDataConsumer.cpp</link>.</para>
<programlisting>00960 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00961 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!D)
00962 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">nullptr</emphasis>;
00963 &#32;&#32;EntityMapTy::const_iterator&#32;I&#32;=&#32;EntityMap.find(D);
00964 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(I&#32;==&#32;EntityMap.end())
00965 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">nullptr</emphasis>;
00966 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;I-&gt;second;
00967 }
</programlisting><para>
Referenced by <link linkend="__indexing_8cpp_source_1l00837">clang_index_getClientEntity()</link>.</para>
    </section><anchor xml:id="_classclang_1_1cxindex_1_1_c_x_index_data_consumer_1a1e920a3dc7386fbef4b9e600cccd67bc"/>    <section>
    <title>getCXTU()</title>
<indexterm><primary>getCXTU</primary><secondary>clang::cxindex::CXIndexDataConsumer</secondary></indexterm>
<indexterm><primary>clang::cxindex::CXIndexDataConsumer</primary><secondary>getCXTU</secondary></indexterm>
<para><computeroutput>CXTranslationUnit clang::cxindex::CXIndexDataConsumer::getCXTU ( ) const<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line <link linkend="__c_x_index_data_consumer_8h_source_1l00341">341</link> of file <link linkend="__c_x_index_data_consumer_8h_source">CXIndexDataConsumer.h</link>.</para>
<programlisting>00341 {&#32;<emphasis role="keywordflow">return</emphasis>&#32;CXTU;&#32;}
</programlisting><para>
Referenced by <link linkend="__c_x_index_data_consumer_8cpp_source_1l00526">indexDiagnostics()</link>.</para>
    </section><anchor xml:id="_classclang_1_1cxindex_1_1_c_x_index_data_consumer_1a5a41d4d26d98678a051873f0bd45607e"/>    <section>
    <title>handleClassTemplate()</title>
<indexterm><primary>handleClassTemplate</primary><secondary>clang::cxindex::CXIndexDataConsumer</secondary></indexterm>
<indexterm><primary>clang::cxindex::CXIndexDataConsumer</primary><secondary>handleClassTemplate</secondary></indexterm>
<para><computeroutput>bool CXIndexDataConsumer::handleClassTemplate (const ClassTemplateDecl * D)</computeroutput></para><para>
Definition at line <link linkend="__c_x_index_data_consumer_8cpp_source_1l00867">867</link> of file <link linkend="__c_x_index_data_consumer_8cpp_source">CXIndexDataConsumer.cpp</link>.</para>
<programlisting>00867 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00868 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;handleCXXRecordDecl(D-&gt;getTemplatedDecl(),&#32;D);
00869 }
</programlisting>    </section><anchor xml:id="_classclang_1_1cxindex_1_1_c_x_index_data_consumer_1a6d45d26c0132be1ec21d6abcf3dc96cf"/>    <section>
    <title>handleDiagnosticSet()</title>
<indexterm><primary>handleDiagnosticSet</primary><secondary>clang::cxindex::CXIndexDataConsumer</secondary></indexterm>
<indexterm><primary>clang::cxindex::CXIndexDataConsumer</primary><secondary>handleDiagnosticSet</secondary></indexterm>
<para><computeroutput>void CXIndexDataConsumer::handleDiagnosticSet (CXDiagnosticSet CXDiagSet)</computeroutput></para><para>
Definition at line <link linkend="__c_x_index_data_consumer_8cpp_source_1l00534">534</link> of file <link linkend="__c_x_index_data_consumer_8cpp_source">CXIndexDataConsumer.cpp</link>.</para>
<programlisting>00534 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00535 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!CB.diagnostic)
00536 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
00537 
00538 &#32;&#32;CB.diagnostic(ClientData,&#32;CXDiagSet,&#32;<emphasis role="keyword">nullptr</emphasis>);
00539 }
</programlisting><para>
Referenced by <link linkend="__c_x_index_data_consumer_8cpp_source_1l00526">indexDiagnostics()</link>.</para>
    </section><anchor xml:id="_classclang_1_1cxindex_1_1_c_x_index_data_consumer_1aa1a4eeb2b5c25fb04e2e13cb52916f35"/>    <section>
    <title>handleEnumerator()</title>
<indexterm><primary>handleEnumerator</primary><secondary>clang::cxindex::CXIndexDataConsumer</secondary></indexterm>
<indexterm><primary>clang::cxindex::CXIndexDataConsumer</primary><secondary>handleEnumerator</secondary></indexterm>
<para><computeroutput>bool CXIndexDataConsumer::handleEnumerator (const EnumConstantDecl * D)</computeroutput></para><para>
Definition at line <link linkend="__c_x_index_data_consumer_8cpp_source_1l00635">635</link> of file <link linkend="__c_x_index_data_consumer_8cpp_source">CXIndexDataConsumer.cpp</link>.</para>
<programlisting>00635 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00636 &#32;&#32;<link linkend="_structclang_1_1cxindex_1_1_decl_info">DeclInfo</link>&#32;DInfo(<emphasis role="comment">/*isRedeclaration=*/</emphasis><emphasis role="keyword">false</emphasis>,&#32;<emphasis role="comment">/*isDefinition=*/</emphasis><emphasis role="keyword">true</emphasis>,
00637 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*isContainer=*/</emphasis><emphasis role="keyword">false</emphasis>);
00638 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;handleDecl(D,&#32;D-&gt;getLocation(),&#32;getCursor(D),&#32;DInfo);
00639 }
</programlisting>    </section><anchor xml:id="_classclang_1_1cxindex_1_1_c_x_index_data_consumer_1adb81ff6898a8c7d84f1e00e28bc51d0f"/>    <section>
    <title>handleField()</title>
<indexterm><primary>handleField</primary><secondary>clang::cxindex::CXIndexDataConsumer</secondary></indexterm>
<indexterm><primary>clang::cxindex::CXIndexDataConsumer</primary><secondary>handleField</secondary></indexterm>
<para><computeroutput>bool CXIndexDataConsumer::handleField (const FieldDecl * D)</computeroutput></para><para>
Definition at line <link linkend="__c_x_index_data_consumer_8cpp_source_1l00629">629</link> of file <link linkend="__c_x_index_data_consumer_8cpp_source">CXIndexDataConsumer.cpp</link>.</para>
<programlisting>00629 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00630 &#32;&#32;<link linkend="_structclang_1_1cxindex_1_1_decl_info">DeclInfo</link>&#32;DInfo(<emphasis role="comment">/*isRedeclaration=*/</emphasis><emphasis role="keyword">false</emphasis>,&#32;<emphasis role="comment">/*isDefinition=*/</emphasis><emphasis role="keyword">true</emphasis>,
00631 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*isContainer=*/</emphasis><emphasis role="keyword">false</emphasis>);
00632 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;handleDecl(D,&#32;D-&gt;getLocation(),&#32;getCursor(D),&#32;DInfo);
00633 }
</programlisting>    </section><anchor xml:id="_classclang_1_1cxindex_1_1_c_x_index_data_consumer_1aea220dde32945d87ccb22ec24e237765"/>    <section>
    <title>handleFunction()</title>
<indexterm><primary>handleFunction</primary><secondary>clang::cxindex::CXIndexDataConsumer</secondary></indexterm>
<indexterm><primary>clang::cxindex::CXIndexDataConsumer</primary><secondary>handleFunction</secondary></indexterm>
<para><computeroutput>bool CXIndexDataConsumer::handleFunction (const FunctionDecl * FD)</computeroutput></para><para>
Definition at line <link linkend="__c_x_index_data_consumer_8cpp_source_1l00607">607</link> of file <link linkend="__c_x_index_data_consumer_8cpp_source">CXIndexDataConsumer.cpp</link>.</para>
<programlisting>00607 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00608 &#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;isDef&#32;=&#32;D-&gt;isThisDeclarationADefinition();
00609 &#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;isContainer&#32;=&#32;isDef;
00610 &#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;isSkipped&#32;=&#32;<emphasis role="keyword">false</emphasis>;
00611 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(D-&gt;hasSkippedBody())&#32;{
00612 &#32;&#32;&#32;&#32;isSkipped&#32;=&#32;<emphasis role="keyword">true</emphasis>;
00613 &#32;&#32;&#32;&#32;isDef&#32;=&#32;<emphasis role="keyword">true</emphasis>;
00614 &#32;&#32;&#32;&#32;isContainer&#32;=&#32;<emphasis role="keyword">false</emphasis>;
00615 &#32;&#32;}
00616 
00617 &#32;&#32;<link linkend="_structclang_1_1cxindex_1_1_decl_info">DeclInfo</link>&#32;DInfo(!D-&gt;isFirstDecl(),&#32;isDef,&#32;isContainer);
00618 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(isSkipped)
00619 &#32;&#32;&#32;&#32;DInfo.flags&#32;|=&#32;CXIdxDeclFlag_Skipped;
00620 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;handleDecl(D,&#32;D-&gt;getLocation(),&#32;getCursor(D),&#32;DInfo);
00621 }
</programlisting>    </section><anchor xml:id="_classclang_1_1cxindex_1_1_c_x_index_data_consumer_1a3532519c64698588555b48efd372812f"/>    <section>
    <title>handleFunctionTemplate()</title>
<indexterm><primary>handleFunctionTemplate</primary><secondary>clang::cxindex::CXIndexDataConsumer</secondary></indexterm>
<indexterm><primary>clang::cxindex::CXIndexDataConsumer</primary><secondary>handleFunctionTemplate</secondary></indexterm>
<para><computeroutput>bool CXIndexDataConsumer::handleFunctionTemplate (const FunctionTemplateDecl * D)</computeroutput></para><para>
Definition at line <link linkend="__c_x_index_data_consumer_8cpp_source_1l00871">871</link> of file <link linkend="__c_x_index_data_consumer_8cpp_source">CXIndexDataConsumer.cpp</link>.</para>
<programlisting>00871 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00872 &#32;&#32;<link linkend="_structclang_1_1cxindex_1_1_decl_info">DeclInfo</link>&#32;DInfo(<emphasis role="comment">/*isRedeclaration=*/</emphasis>!D-&gt;isCanonicalDecl(),
00873 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*isDefinition=*/</emphasis>D-&gt;isThisDeclarationADefinition(),
00874 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*isContainer=*/</emphasis>D-&gt;isThisDeclarationADefinition());
00875 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;handleDecl(D,&#32;D-&gt;getLocation(),&#32;getCursor(D),&#32;DInfo);
00876 }
</programlisting>    </section><anchor xml:id="_classclang_1_1cxindex_1_1_c_x_index_data_consumer_1a7d653def424f7886d3d9240e6c8b02af"/>    <section>
    <title>handleNamespace()</title>
<indexterm><primary>handleNamespace</primary><secondary>clang::cxindex::CXIndexDataConsumer</secondary></indexterm>
<indexterm><primary>clang::cxindex::CXIndexDataConsumer</primary><secondary>handleNamespace</secondary></indexterm>
<para><computeroutput>bool CXIndexDataConsumer::handleNamespace (const NamespaceDecl * D)</computeroutput></para><para>
Definition at line <link linkend="__c_x_index_data_consumer_8cpp_source_1l00860">860</link> of file <link linkend="__c_x_index_data_consumer_8cpp_source">CXIndexDataConsumer.cpp</link>.</para>
<programlisting>00860 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00861 &#32;&#32;<link linkend="_structclang_1_1cxindex_1_1_decl_info">DeclInfo</link>&#32;DInfo(<emphasis role="comment">/*isRedeclaration=*/</emphasis>!D-&gt;isOriginalNamespace(),
00862 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*isDefinition=*/</emphasis><emphasis role="keyword">true</emphasis>,
00863 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*isContainer=*/</emphasis><emphasis role="keyword">true</emphasis>);
00864 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;handleDecl(D,&#32;D-&gt;getLocation(),&#32;getCursor(D),&#32;DInfo);
00865 }
</programlisting>    </section><anchor xml:id="_classclang_1_1cxindex_1_1_c_x_index_data_consumer_1af6f8ba6a1c6db0fbf5b3b7c36ce42935"/>    <section>
    <title>handleObjCCategory()</title>
<indexterm><primary>handleObjCCategory</primary><secondary>clang::cxindex::CXIndexDataConsumer</secondary></indexterm>
<indexterm><primary>clang::cxindex::CXIndexDataConsumer</primary><secondary>handleObjCCategory</secondary></indexterm>
<para><computeroutput>bool CXIndexDataConsumer::handleObjCCategory (const ObjCCategoryDecl * D)</computeroutput></para><para>
Definition at line <link linkend="__c_x_index_data_consumer_8cpp_source_1l00741">741</link> of file <link linkend="__c_x_index_data_consumer_8cpp_source">CXIndexDataConsumer.cpp</link>.</para>
<programlisting>00741 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00742 &#32;&#32;<link linkend="_classclang_1_1cxindex_1_1_scratch_alloc">ScratchAlloc</link>&#32;SA(*<emphasis role="keyword">this</emphasis>);
00743 
00744 &#32;&#32;<link linkend="_structclang_1_1cxindex_1_1_obj_c_category_decl_info">ObjCCategoryDeclInfo</link>&#32;CatDInfo(<emphasis role="comment">/*isImplementation=*/</emphasis><emphasis role="keyword">false</emphasis>);
00745 &#32;&#32;<link linkend="_structclang_1_1cxindex_1_1_entity_info">EntityInfo</link>&#32;ClassEntity;
00746 &#32;&#32;<emphasis role="keyword">const</emphasis>&#32;ObjCInterfaceDecl&#32;*IFaceD&#32;=&#32;D-&gt;getClassInterface();
00747 &#32;&#32;SourceLocation&#32;ClassLoc&#32;=&#32;D-&gt;getLocation();
00748 &#32;&#32;SourceLocation&#32;CategoryLoc&#32;=&#32;D-&gt;IsClassExtension()&#32;?&#32;ClassLoc
00749 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;D-&gt;getCategoryNameLoc();
00750 &#32;&#32;getEntityInfo(IFaceD,&#32;ClassEntity,&#32;SA);
00751 
00752 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_classclang_1_1cxindex_1_1_c_x_index_data_consumer_1a532578623b1df6f45e25230f11242472">shouldSuppressRefs</link>())
00753 &#32;&#32;&#32;&#32;markEntityOccurrenceInFile(IFaceD,&#32;ClassLoc);
00754 
00755 &#32;&#32;ObjCProtocolListInfo&#32;ProtInfo(D-&gt;getReferencedProtocols(),&#32;*<emphasis role="keyword">this</emphasis>,&#32;SA);
00756 &#32;&#32;
00757 &#32;&#32;CatDInfo.ObjCCatDeclInfo.containerInfo&#32;=&#32;&amp;CatDInfo.ObjCContDeclInfo;
00758 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(IFaceD)&#32;{
00759 &#32;&#32;&#32;&#32;CatDInfo.ObjCCatDeclInfo.objcClass&#32;=&#32;&amp;ClassEntity;
00760 &#32;&#32;&#32;&#32;CatDInfo.ObjCCatDeclInfo.classCursor&#32;=
00761 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespaceclang_1_1cxcursor_1aa0bea074dd325615cb85819eac47264e">MakeCursorObjCClassRef</link>(IFaceD,&#32;ClassLoc,&#32;CXTU);
00762 &#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
00763 &#32;&#32;&#32;&#32;CatDInfo.ObjCCatDeclInfo.objcClass&#32;=&#32;<emphasis role="keyword">nullptr</emphasis>;
00764 &#32;&#32;&#32;&#32;CatDInfo.ObjCCatDeclInfo.classCursor&#32;=&#32;<link linkend="__c_index_8cpp_1aa22233466eaf91f6f3cf6b84255c3b68">clang_getNullCursor</link>();
00765 &#32;&#32;}
00766 &#32;&#32;CatDInfo.ObjCCatDeclInfo.classLoc&#32;=&#32;getIndexLoc(ClassLoc);
00767 &#32;&#32;CatDInfo.ObjCProtoListInfo&#32;=&#32;ProtInfo.getListInfo();
00768 &#32;&#32;CatDInfo.ObjCCatDeclInfo.protocols&#32;=&#32;&amp;CatDInfo.ObjCProtoListInfo;
00769 
00770 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;handleObjCContainer(D,&#32;CategoryLoc,&#32;getCursor(D),&#32;CatDInfo);
00771 }
</programlisting><para>
References <link linkend="__c_index_8cpp_source_1l05901">clang_getNullCursor()</link>, <link linkend="__c_x_cursor_8cpp_source_1l00863">clang::cxcursor::MakeCursorObjCClassRef()</link>, <link linkend="__c_x_index_data_consumer_8h_source_1l00173">clang::cxindex::ObjCCategoryDeclInfo::ObjCCatDeclInfo</link>, <link linkend="__c_x_index_data_consumer_8h_source_1l00110">clang::cxindex::ObjCContainerDeclInfo::ObjCContDeclInfo</link>, <link linkend="__c_x_index_data_consumer_8h_source_1l00174">clang::cxindex::ObjCCategoryDeclInfo::ObjCProtoListInfo</link>, and <link linkend="__c_x_index_data_consumer_8h_source_1l00346">shouldSuppressRefs()</link>.</para>
    </section><anchor xml:id="_classclang_1_1cxindex_1_1_c_x_index_data_consumer_1a384418d47049c76926499092ea8c6184"/>    <section>
    <title>handleObjCCategoryImpl()</title>
<indexterm><primary>handleObjCCategoryImpl</primary><secondary>clang::cxindex::CXIndexDataConsumer</secondary></indexterm>
<indexterm><primary>clang::cxindex::CXIndexDataConsumer</primary><secondary>handleObjCCategoryImpl</secondary></indexterm>
<para><computeroutput>bool CXIndexDataConsumer::handleObjCCategoryImpl (const ObjCCategoryImplDecl * D)</computeroutput></para><para>
Definition at line <link linkend="__c_x_index_data_consumer_8cpp_source_1l00773">773</link> of file <link linkend="__c_x_index_data_consumer_8cpp_source">CXIndexDataConsumer.cpp</link>.</para>
<programlisting>00773 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00774 &#32;&#32;<link linkend="_classclang_1_1cxindex_1_1_scratch_alloc">ScratchAlloc</link>&#32;SA(*<emphasis role="keyword">this</emphasis>);
00775 
00776 &#32;&#32;<emphasis role="keyword">const</emphasis>&#32;ObjCCategoryDecl&#32;*CatD&#32;=&#32;D-&gt;getCategoryDecl();
00777 &#32;&#32;<link linkend="_structclang_1_1cxindex_1_1_obj_c_category_decl_info">ObjCCategoryDeclInfo</link>&#32;CatDInfo(<emphasis role="comment">/*isImplementation=*/</emphasis><emphasis role="keyword">true</emphasis>);
00778 &#32;&#32;<link linkend="_structclang_1_1cxindex_1_1_entity_info">EntityInfo</link>&#32;ClassEntity;
00779 &#32;&#32;<emphasis role="keyword">const</emphasis>&#32;ObjCInterfaceDecl&#32;*IFaceD&#32;=&#32;CatD-&gt;getClassInterface();
00780 &#32;&#32;SourceLocation&#32;ClassLoc&#32;=&#32;D-&gt;getLocation();
00781 &#32;&#32;SourceLocation&#32;CategoryLoc&#32;=&#32;D-&gt;getCategoryNameLoc();
00782 &#32;&#32;getEntityInfo(IFaceD,&#32;ClassEntity,&#32;SA);
00783 
00784 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_classclang_1_1cxindex_1_1_c_x_index_data_consumer_1a532578623b1df6f45e25230f11242472">shouldSuppressRefs</link>())
00785 &#32;&#32;&#32;&#32;markEntityOccurrenceInFile(IFaceD,&#32;ClassLoc);
00786 
00787 &#32;&#32;CatDInfo.ObjCCatDeclInfo.containerInfo&#32;=&#32;&amp;CatDInfo.ObjCContDeclInfo;
00788 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(IFaceD)&#32;{
00789 &#32;&#32;&#32;&#32;CatDInfo.ObjCCatDeclInfo.objcClass&#32;=&#32;&amp;ClassEntity;
00790 &#32;&#32;&#32;&#32;CatDInfo.ObjCCatDeclInfo.classCursor&#32;=
00791 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespaceclang_1_1cxcursor_1aa0bea074dd325615cb85819eac47264e">MakeCursorObjCClassRef</link>(IFaceD,&#32;ClassLoc,&#32;CXTU);
00792 &#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
00793 &#32;&#32;&#32;&#32;CatDInfo.ObjCCatDeclInfo.objcClass&#32;=&#32;<emphasis role="keyword">nullptr</emphasis>;
00794 &#32;&#32;&#32;&#32;CatDInfo.ObjCCatDeclInfo.classCursor&#32;=&#32;<link linkend="__c_index_8cpp_1aa22233466eaf91f6f3cf6b84255c3b68">clang_getNullCursor</link>();
00795 &#32;&#32;}
00796 &#32;&#32;CatDInfo.ObjCCatDeclInfo.classLoc&#32;=&#32;getIndexLoc(ClassLoc);
00797 &#32;&#32;CatDInfo.ObjCCatDeclInfo.protocols&#32;=&#32;<emphasis role="keyword">nullptr</emphasis>;
00798 
00799 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;handleObjCContainer(D,&#32;CategoryLoc,&#32;getCursor(D),&#32;CatDInfo);
00800 }
</programlisting><para>
References <link linkend="__c_index_8cpp_source_1l05901">clang_getNullCursor()</link>, <link linkend="__c_x_cursor_8cpp_source_1l00863">clang::cxcursor::MakeCursorObjCClassRef()</link>, <link linkend="__c_x_index_data_consumer_8h_source_1l00173">clang::cxindex::ObjCCategoryDeclInfo::ObjCCatDeclInfo</link>, <link linkend="__c_x_index_data_consumer_8h_source_1l00110">clang::cxindex::ObjCContainerDeclInfo::ObjCContDeclInfo</link>, and <link linkend="__c_x_index_data_consumer_8h_source_1l00346">shouldSuppressRefs()</link>.</para>
    </section><anchor xml:id="_classclang_1_1cxindex_1_1_c_x_index_data_consumer_1ac2e1baec864df9b4f431c88d005b1964"/>    <section>
    <title>handleObjCImplementation()</title>
<indexterm><primary>handleObjCImplementation</primary><secondary>clang::cxindex::CXIndexDataConsumer</secondary></indexterm>
<indexterm><primary>clang::cxindex::CXIndexDataConsumer</primary><secondary>handleObjCImplementation</secondary></indexterm>
<para><computeroutput>bool CXIndexDataConsumer::handleObjCImplementation (const ObjCImplementationDecl * D)</computeroutput></para><para>
Definition at line <link linkend="__c_x_index_data_consumer_8cpp_source_1l00704">704</link> of file <link linkend="__c_x_index_data_consumer_8cpp_source">CXIndexDataConsumer.cpp</link>.</para>
<programlisting>00705 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00706 &#32;&#32;<link linkend="_structclang_1_1cxindex_1_1_obj_c_container_decl_info">ObjCContainerDeclInfo</link>&#32;ContDInfo(<emphasis role="comment">/*isForwardRef=*/</emphasis><emphasis role="keyword">false</emphasis>,
00707 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*isRedeclaration=*/</emphasis><emphasis role="keyword">true</emphasis>,
00708 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*isImplementation=*/</emphasis><emphasis role="keyword">true</emphasis>);
00709 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;handleObjCContainer(D,&#32;D-&gt;getLocation(),&#32;getCursor(D),&#32;ContDInfo);
00710 }
</programlisting>    </section><anchor xml:id="_classclang_1_1cxindex_1_1_c_x_index_data_consumer_1a5fe0ba54fa05604e9a5148384940779c"/>    <section>
    <title>handleObjCInterface()</title>
<indexterm><primary>handleObjCInterface</primary><secondary>clang::cxindex::CXIndexDataConsumer</secondary></indexterm>
<indexterm><primary>clang::cxindex::CXIndexDataConsumer</primary><secondary>handleObjCInterface</secondary></indexterm>
<para><computeroutput>bool CXIndexDataConsumer::handleObjCInterface (const ObjCInterfaceDecl * D)</computeroutput></para><para>
Definition at line <link linkend="__c_x_index_data_consumer_8cpp_source_1l00656">656</link> of file <link linkend="__c_x_index_data_consumer_8cpp_source">CXIndexDataConsumer.cpp</link>.</para>
<programlisting>00656 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00657 &#32;&#32;<emphasis role="comment">//&#32;For&#32;@class&#32;forward&#32;declarations,&#32;suppress&#32;them&#32;the&#32;same&#32;way&#32;as&#32;references.</emphasis>
00658 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!D-&gt;isThisDeclarationADefinition())&#32;{
00659 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_classclang_1_1cxindex_1_1_c_x_index_data_consumer_1a532578623b1df6f45e25230f11242472">shouldSuppressRefs</link>()&#32;&amp;&amp;&#32;markEntityOccurrenceInFile(D,&#32;D-&gt;getLocation()))
00660 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;&#32;<emphasis role="comment">//&#32;already&#32;occurred.</emphasis>
00661 
00662 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;FIXME:&#32;This&#32;seems&#32;like&#32;the&#32;wrong&#32;definition&#32;for&#32;redeclaration.</emphasis>
00663 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;isRedeclaration&#32;=&#32;D-&gt;hasDefinition()&#32;||&#32;D-&gt;getPreviousDecl();
00664 &#32;&#32;&#32;&#32;<link linkend="_structclang_1_1cxindex_1_1_obj_c_container_decl_info">ObjCContainerDeclInfo</link>&#32;ContDInfo(<emphasis role="comment">/*isForwardRef=*/</emphasis><emphasis role="keyword">true</emphasis>,&#32;isRedeclaration,
00665 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*isImplementation=*/</emphasis><emphasis role="keyword">false</emphasis>);
00666 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;handleObjCContainer(D,&#32;D-&gt;getLocation(),
00667 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespaceclang_1_1cxcursor_1aa0bea074dd325615cb85819eac47264e">MakeCursorObjCClassRef</link>(D,&#32;D-&gt;getLocation(),
00668 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;CXTU),&#32;
00669 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ContDInfo);
00670 &#32;&#32;}
00671 
00672 &#32;&#32;<link linkend="_classclang_1_1cxindex_1_1_scratch_alloc">ScratchAlloc</link>&#32;SA(*<emphasis role="keyword">this</emphasis>);
00673 
00674 &#32;&#32;CXIdxBaseClassInfo&#32;<link linkend="_interface_base_class">BaseClass</link>;
00675 &#32;&#32;<link linkend="_structclang_1_1cxindex_1_1_entity_info">EntityInfo</link>&#32;BaseEntity;
00676 &#32;&#32;<link linkend="_interface_base_class">BaseClass</link>.cursor&#32;=&#32;<link linkend="__c_index_8cpp_1aa22233466eaf91f6f3cf6b84255c3b68">clang_getNullCursor</link>();
00677 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(ObjCInterfaceDecl&#32;*SuperD&#32;=&#32;D-&gt;getSuperClass())&#32;{
00678 &#32;&#32;&#32;&#32;getEntityInfo(SuperD,&#32;BaseEntity,&#32;SA);
00679 &#32;&#32;&#32;&#32;SourceLocation&#32;SuperLoc&#32;=&#32;D-&gt;getSuperClassLoc();
00680 &#32;&#32;&#32;&#32;<link linkend="_interface_base_class">BaseClass</link>.base&#32;=&#32;&amp;BaseEntity;
00681 &#32;&#32;&#32;&#32;<link linkend="_interface_base_class">BaseClass</link>.cursor&#32;=&#32;<link linkend="_namespaceclang_1_1cxcursor_1a81d6b09cb8995b57d394a8372437902a">MakeCursorObjCSuperClassRef</link>(SuperD,&#32;SuperLoc,&#32;CXTU);
00682 &#32;&#32;&#32;&#32;<link linkend="_interface_base_class">BaseClass</link>.loc&#32;=&#32;getIndexLoc(SuperLoc);
00683 
00684 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_classclang_1_1cxindex_1_1_c_x_index_data_consumer_1a532578623b1df6f45e25230f11242472">shouldSuppressRefs</link>())
00685 &#32;&#32;&#32;&#32;&#32;&#32;markEntityOccurrenceInFile(SuperD,&#32;SuperLoc);
00686 &#32;&#32;}
00687 &#32;&#32;
00688 &#32;&#32;ObjCProtocolList&#32;EmptyProtoList;
00689 &#32;&#32;ObjCProtocolListInfo&#32;ProtInfo(D-&gt;isThisDeclarationADefinition()&#32;
00690 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;?&#32;D-&gt;getReferencedProtocols()
00691 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;EmptyProtoList,&#32;
00692 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*<emphasis role="keyword">this</emphasis>,&#32;SA);
00693 &#32;&#32;
00694 &#32;&#32;<link linkend="_structclang_1_1cxindex_1_1_obj_c_interface_decl_info">ObjCInterfaceDeclInfo</link>&#32;InterInfo(D);
00695 &#32;&#32;InterInfo.ObjCProtoListInfo&#32;=&#32;ProtInfo.getListInfo();
00696 &#32;&#32;InterInfo.ObjCInterDeclInfo.containerInfo&#32;=&#32;&amp;InterInfo.ObjCContDeclInfo;
00697 &#32;&#32;InterInfo.ObjCInterDeclInfo.superInfo&#32;=&#32;D-&gt;getSuperClass()&#32;?&#32;&amp;<link linkend="_interface_base_class">BaseClass</link>
00698 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;<emphasis role="keyword">nullptr</emphasis>;
00699 &#32;&#32;InterInfo.ObjCInterDeclInfo.protocols&#32;=&#32;&amp;InterInfo.ObjCProtoListInfo;
00700 
00701 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;handleObjCContainer(D,&#32;D-&gt;getLocation(),&#32;getCursor(D),&#32;InterInfo);
00702 }
</programlisting><para>
References <link linkend="__c_index_8cpp_source_1l05901">clang_getNullCursor()</link>, <link linkend="__c_x_cursor_8cpp_source_1l00863">clang::cxcursor::MakeCursorObjCClassRef()</link>, <link linkend="__c_x_cursor_8cpp_source_1l00831">clang::cxcursor::MakeCursorObjCSuperClassRef()</link>, <link linkend="__c_x_index_data_consumer_8h_source_1l00110">clang::cxindex::ObjCContainerDeclInfo::ObjCContDeclInfo</link>, <link linkend="__c_x_index_data_consumer_8h_source_1l00144">clang::cxindex::ObjCInterfaceDeclInfo::ObjCInterDeclInfo</link>, <link linkend="__c_x_index_data_consumer_8h_source_1l00145">clang::cxindex::ObjCInterfaceDeclInfo::ObjCProtoListInfo</link>, and <link linkend="__c_x_index_data_consumer_8h_source_1l00346">shouldSuppressRefs()</link>.</para>
    </section><anchor xml:id="_classclang_1_1cxindex_1_1_c_x_index_data_consumer_1ae332e3b4ea50f3d47053f858f37e4217"/>    <section>
    <title>handleObjCMethod()</title>
<indexterm><primary>handleObjCMethod</primary><secondary>clang::cxindex::CXIndexDataConsumer</secondary></indexterm>
<indexterm><primary>clang::cxindex::CXIndexDataConsumer</primary><secondary>handleObjCMethod</secondary></indexterm>
<para><computeroutput>bool CXIndexDataConsumer::handleObjCMethod (const ObjCMethodDecl * D, SourceLocation Loc)</computeroutput></para><para>
Definition at line <link linkend="__c_x_index_data_consumer_8cpp_source_1l00802">802</link> of file <link linkend="__c_x_index_data_consumer_8cpp_source">CXIndexDataConsumer.cpp</link>.</para>
<programlisting>00803 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00804 &#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;isDef&#32;=&#32;D-&gt;isThisDeclarationADefinition();
00805 &#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;isContainer&#32;=&#32;isDef;
00806 &#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;isSkipped&#32;=&#32;<emphasis role="keyword">false</emphasis>;
00807 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(D-&gt;hasSkippedBody())&#32;{
00808 &#32;&#32;&#32;&#32;isSkipped&#32;=&#32;<emphasis role="keyword">true</emphasis>;
00809 &#32;&#32;&#32;&#32;isDef&#32;=&#32;<emphasis role="keyword">true</emphasis>;
00810 &#32;&#32;&#32;&#32;isContainer&#32;=&#32;<emphasis role="keyword">false</emphasis>;
00811 &#32;&#32;}
00812 
00813 &#32;&#32;<link linkend="_structclang_1_1cxindex_1_1_decl_info">DeclInfo</link>&#32;DInfo(!D-&gt;isCanonicalDecl(),&#32;isDef,&#32;isContainer);
00814 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(isSkipped)
00815 &#32;&#32;&#32;&#32;DInfo.flags&#32;|=&#32;CXIdxDeclFlag_Skipped;
00816 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;handleDecl(D,&#32;Loc,&#32;getCursor(D),&#32;DInfo);
00817 }
</programlisting>    </section><anchor xml:id="_classclang_1_1cxindex_1_1_c_x_index_data_consumer_1ac2c613e39c59a85bf307057d61b5877b"/>    <section>
    <title>handleObjCProperty()</title>
<indexterm><primary>handleObjCProperty</primary><secondary>clang::cxindex::CXIndexDataConsumer</secondary></indexterm>
<indexterm><primary>clang::cxindex::CXIndexDataConsumer</primary><secondary>handleObjCProperty</secondary></indexterm>
<para><computeroutput>bool CXIndexDataConsumer::handleObjCProperty (const ObjCPropertyDecl * D)</computeroutput></para><para>
Definition at line <link linkend="__c_x_index_data_consumer_8cpp_source_1l00835">835</link> of file <link linkend="__c_x_index_data_consumer_8cpp_source">CXIndexDataConsumer.cpp</link>.</para>
<programlisting>00835 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00836 &#32;&#32;<link linkend="_classclang_1_1cxindex_1_1_scratch_alloc">ScratchAlloc</link>&#32;SA(*<emphasis role="keyword">this</emphasis>);
00837 
00838 &#32;&#32;<link linkend="_structclang_1_1cxindex_1_1_obj_c_property_decl_info">ObjCPropertyDeclInfo</link>&#32;DInfo;
00839 &#32;&#32;<link linkend="_structclang_1_1cxindex_1_1_entity_info">EntityInfo</link>&#32;GetterEntity;
00840 &#32;&#32;<link linkend="_structclang_1_1cxindex_1_1_entity_info">EntityInfo</link>&#32;SetterEntity;
00841 
00842 &#32;&#32;DInfo.<link linkend="_structclang_1_1cxindex_1_1_obj_c_property_decl_info_1a43c730cefe85bb21949f7c08fd08393e">ObjCPropDeclInfo</link>.declInfo&#32;=&#32;&amp;DInfo;
00843 
00844 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(ObjCMethodDecl&#32;*Getter&#32;=&#32;D-&gt;getGetterMethodDecl())&#32;{
00845 &#32;&#32;&#32;&#32;getEntityInfo(Getter,&#32;GetterEntity,&#32;SA);
00846 &#32;&#32;&#32;&#32;DInfo.<link linkend="_structclang_1_1cxindex_1_1_obj_c_property_decl_info_1a43c730cefe85bb21949f7c08fd08393e">ObjCPropDeclInfo</link>.getter&#32;=&#32;&amp;GetterEntity;
00847 &#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
00848 &#32;&#32;&#32;&#32;DInfo.<link linkend="_structclang_1_1cxindex_1_1_obj_c_property_decl_info_1a43c730cefe85bb21949f7c08fd08393e">ObjCPropDeclInfo</link>.getter&#32;=&#32;<emphasis role="keyword">nullptr</emphasis>;
00849 &#32;&#32;}
00850 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(ObjCMethodDecl&#32;*Setter&#32;=&#32;D-&gt;getSetterMethodDecl())&#32;{
00851 &#32;&#32;&#32;&#32;getEntityInfo(Setter,&#32;SetterEntity,&#32;SA);
00852 &#32;&#32;&#32;&#32;DInfo.<link linkend="_structclang_1_1cxindex_1_1_obj_c_property_decl_info_1a43c730cefe85bb21949f7c08fd08393e">ObjCPropDeclInfo</link>.setter&#32;=&#32;&amp;SetterEntity;
00853 &#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
00854 &#32;&#32;&#32;&#32;DInfo.<link linkend="_structclang_1_1cxindex_1_1_obj_c_property_decl_info_1a43c730cefe85bb21949f7c08fd08393e">ObjCPropDeclInfo</link>.setter&#32;=&#32;<emphasis role="keyword">nullptr</emphasis>;
00855 &#32;&#32;}
00856 
00857 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;handleDecl(D,&#32;D-&gt;getLocation(),&#32;getCursor(D),&#32;DInfo);
00858 }
</programlisting><para>
References <link linkend="__c_x_index_data_consumer_8h_source_1l00188">clang::cxindex::ObjCPropertyDeclInfo::ObjCPropDeclInfo</link>.</para>
    </section><anchor xml:id="_classclang_1_1cxindex_1_1_c_x_index_data_consumer_1abda4f96d641a3bffe1dfd23402154681"/>    <section>
    <title>handleObjCProtocol()</title>
<indexterm><primary>handleObjCProtocol</primary><secondary>clang::cxindex::CXIndexDataConsumer</secondary></indexterm>
<indexterm><primary>clang::cxindex::CXIndexDataConsumer</primary><secondary>handleObjCProtocol</secondary></indexterm>
<para><computeroutput>bool CXIndexDataConsumer::handleObjCProtocol (const ObjCProtocolDecl * D)</computeroutput></para><para>
Definition at line <link linkend="__c_x_index_data_consumer_8cpp_source_1l00712">712</link> of file <link linkend="__c_x_index_data_consumer_8cpp_source">CXIndexDataConsumer.cpp</link>.</para>
<programlisting>00712 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00713 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!D-&gt;isThisDeclarationADefinition())&#32;{
00714 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_classclang_1_1cxindex_1_1_c_x_index_data_consumer_1a532578623b1df6f45e25230f11242472">shouldSuppressRefs</link>()&#32;&amp;&amp;&#32;markEntityOccurrenceInFile(D,&#32;D-&gt;getLocation()))
00715 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;&#32;<emphasis role="comment">//&#32;already&#32;occurred.</emphasis>
00716 &#32;&#32;&#32;&#32;
00717 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;FIXME:&#32;This&#32;seems&#32;like&#32;the&#32;wrong&#32;definition&#32;for&#32;redeclaration.</emphasis>
00718 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;isRedeclaration&#32;=&#32;D-&gt;hasDefinition()&#32;||&#32;D-&gt;getPreviousDecl();
00719 &#32;&#32;&#32;&#32;<link linkend="_structclang_1_1cxindex_1_1_obj_c_container_decl_info">ObjCContainerDeclInfo</link>&#32;ContDInfo(<emphasis role="comment">/*isForwardRef=*/</emphasis><emphasis role="keyword">true</emphasis>,
00720 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;isRedeclaration,
00721 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*isImplementation=*/</emphasis><emphasis role="keyword">false</emphasis>);
00722 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;handleObjCContainer(D,&#32;D-&gt;getLocation(),&#32;
00723 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespaceclang_1_1cxcursor_1ac238ecc9f974783b9d0c2129f5aa675f">MakeCursorObjCProtocolRef</link>(D,&#32;D-&gt;getLocation(),
00724 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;CXTU),
00725 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ContDInfo);&#32;&#32;&#32;&#32;
00726 &#32;&#32;}
00727 &#32;&#32;
00728 &#32;&#32;<link linkend="_classclang_1_1cxindex_1_1_scratch_alloc">ScratchAlloc</link>&#32;SA(*<emphasis role="keyword">this</emphasis>);
00729 &#32;&#32;ObjCProtocolList&#32;EmptyProtoList;
00730 &#32;&#32;ObjCProtocolListInfo&#32;ProtListInfo(D-&gt;isThisDeclarationADefinition()
00731 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;?&#32;D-&gt;getReferencedProtocols()
00732 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;EmptyProtoList,
00733 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*<emphasis role="keyword">this</emphasis>,&#32;SA);
00734 &#32;&#32;
00735 &#32;&#32;<link linkend="_structclang_1_1cxindex_1_1_obj_c_protocol_decl_info">ObjCProtocolDeclInfo</link>&#32;ProtInfo(D);
00736 &#32;&#32;ProtInfo.ObjCProtoRefListInfo&#32;=&#32;ProtListInfo.getListInfo();
00737 
00738 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;handleObjCContainer(D,&#32;D-&gt;getLocation(),&#32;getCursor(D),&#32;ProtInfo);
00739 }
</programlisting><para>
References <link linkend="__c_x_cursor_8cpp_source_1l00847">clang::cxcursor::MakeCursorObjCProtocolRef()</link>, <link linkend="__c_x_index_data_consumer_8h_source_1l00159">clang::cxindex::ObjCProtocolDeclInfo::ObjCProtoRefListInfo</link>, and <link linkend="__c_x_index_data_consumer_8h_source_1l00346">shouldSuppressRefs()</link>.</para>
    </section><anchor xml:id="_classclang_1_1cxindex_1_1_c_x_index_data_consumer_1a6067a968d3482447348823dd7f913ced"/>    <section>
    <title>handleReference()</title>
<indexterm><primary>handleReference</primary><secondary>clang::cxindex::CXIndexDataConsumer</secondary></indexterm>
<indexterm><primary>clang::cxindex::CXIndexDataConsumer</primary><secondary>handleReference</secondary></indexterm>
<para><computeroutput>bool CXIndexDataConsumer::handleReference (const NamedDecl * D, SourceLocation Loc, CXCursor Cursor, const NamedDecl * Parent, const DeclContext * DC, const Expr * E = <computeroutput>nullptr</computeroutput>
, CXIdxEntityRefKind Kind = <computeroutput>CXIdxEntityRef_Direct</computeroutput>
, CXSymbolRole Role = <computeroutput>CXSymbolRole_None</computeroutput>
)</computeroutput></para><para>
Definition at line <link linkend="__c_x_index_data_consumer_8cpp_source_1l00884">884</link> of file <link linkend="__c_x_index_data_consumer_8cpp_source">CXIndexDataConsumer.cpp</link>.</para>
<programlisting>00890 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00891 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!CB.indexEntityReference)
00892 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
00893 
00894 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!D&#32;||&#32;!DC)
00895 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
00896 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(Loc.isInvalid())
00897 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
00898 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!<link linkend="_classclang_1_1cxindex_1_1_c_x_index_data_consumer_1ab96bf30db26572795d6e705d74711d8e">shouldIndexFunctionLocalSymbols</link>()&#32;&amp;&amp;&#32;<link linkend="_classclang_1_1cxindex_1_1_c_x_index_data_consumer_1abbffca61e5023fb01eb8ab8dcace8d48">isFunctionLocalDecl</link>(D))
00899 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
00900 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_classclang_1_1cxindex_1_1_c_x_index_data_consumer_1a05b282788c19ebbbe352b78f1d1229f6">isNotFromSourceFile</link>(D-&gt;getLocation()))
00901 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
00902 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(D-&gt;isImplicit()&#32;&amp;&amp;&#32;shouldIgnoreIfImplicit(D))
00903 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
00904 
00905 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_classclang_1_1cxindex_1_1_c_x_index_data_consumer_1a532578623b1df6f45e25230f11242472">shouldSuppressRefs</link>())&#32;{
00906 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(markEntityOccurrenceInFile(D,&#32;Loc))
00907 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;&#32;<emphasis role="comment">//&#32;already&#32;occurred.</emphasis>
00908 &#32;&#32;}
00909 
00910 &#32;&#32;<link linkend="_classclang_1_1cxindex_1_1_scratch_alloc">ScratchAlloc</link>&#32;SA(*<emphasis role="keyword">this</emphasis>);
00911 &#32;&#32;<link linkend="_structclang_1_1cxindex_1_1_entity_info">EntityInfo</link>&#32;RefEntity,&#32;ParentEntity;
00912 &#32;&#32;getEntityInfo(D,&#32;RefEntity,&#32;SA);
00913 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!RefEntity.USR)
00914 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
00915 
00916 &#32;&#32;getEntityInfo(Parent,&#32;ParentEntity,&#32;SA);
00917 
00918 &#32;&#32;<link linkend="_structclang_1_1cxindex_1_1_container_info">ContainerInfo</link>&#32;Container;
00919 &#32;&#32;getContainerInfo(DC,&#32;Container);
00920 
00921 &#32;&#32;CXIdxEntityRefInfo&#32;Info&#32;=&#32;{&#32;Kind,
00922 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Cursor,
00923 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;getIndexLoc(Loc),
00924 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;RefEntity,
00925 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Parent&#32;?&#32;&amp;ParentEntity&#32;:&#32;<emphasis role="keyword">nullptr</emphasis>,
00926 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;Container,
00927 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Role&#32;};
00928 &#32;&#32;CB.indexEntityReference(ClientData,&#32;&amp;Info);
00929 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
00930 }
</programlisting><para>
Referenced by <link linkend="__c_x_index_data_consumer_8cpp_source_1l00819">handleSynthesizedObjCProperty()</link>.</para>
    </section><anchor xml:id="_classclang_1_1cxindex_1_1_c_x_index_data_consumer_1ac7f28ce4d8aa569c11fcb9aba670ba2f"/>    <section>
    <title>handleSynthesizedObjCMethod()</title>
<indexterm><primary>handleSynthesizedObjCMethod</primary><secondary>clang::cxindex::CXIndexDataConsumer</secondary></indexterm>
<indexterm><primary>clang::cxindex::CXIndexDataConsumer</primary><secondary>handleSynthesizedObjCMethod</secondary></indexterm>
<para><computeroutput>bool CXIndexDataConsumer::handleSynthesizedObjCMethod (const ObjCMethodDecl * D, SourceLocation Loc, const DeclContext * LexicalDC)</computeroutput></para><para>
Definition at line <link linkend="__c_x_index_data_consumer_8cpp_source_1l00827">827</link> of file <link linkend="__c_x_index_data_consumer_8cpp_source">CXIndexDataConsumer.cpp</link>.</para>
<programlisting>00829 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00830 &#32;&#32;<link linkend="_structclang_1_1cxindex_1_1_decl_info">DeclInfo</link>&#32;DInfo(<emphasis role="comment">/*isRedeclaration=*/</emphasis><emphasis role="keyword">true</emphasis>,&#32;<emphasis role="comment">/*isDefinition=*/</emphasis><emphasis role="keyword">true</emphasis>,
00831 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*isContainer=*/</emphasis><emphasis role="keyword">false</emphasis>);
00832 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;handleDecl(D,&#32;Loc,&#32;getCursor(D),&#32;DInfo,&#32;LexicalDC,&#32;D-&gt;getDeclContext());
00833 }
</programlisting>    </section><anchor xml:id="_classclang_1_1cxindex_1_1_c_x_index_data_consumer_1ab19b2040c03666b12d9d756b822e5237"/>    <section>
    <title>handleSynthesizedObjCProperty()</title>
<indexterm><primary>handleSynthesizedObjCProperty</primary><secondary>clang::cxindex::CXIndexDataConsumer</secondary></indexterm>
<indexterm><primary>clang::cxindex::CXIndexDataConsumer</primary><secondary>handleSynthesizedObjCProperty</secondary></indexterm>
<para><computeroutput>bool CXIndexDataConsumer::handleSynthesizedObjCProperty (const ObjCPropertyImplDecl * D)</computeroutput></para><para>
Definition at line <link linkend="__c_x_index_data_consumer_8cpp_source_1l00819">819</link> of file <link linkend="__c_x_index_data_consumer_8cpp_source">CXIndexDataConsumer.cpp</link>.</para>
<programlisting>00820 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00821 &#32;&#32;ObjCPropertyDecl&#32;*PD&#32;=&#32;D-&gt;getPropertyDecl();
00822 &#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;*DC&#32;=&#32;D-&gt;getDeclContext();
00823 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classclang_1_1cxindex_1_1_c_x_index_data_consumer_1a6067a968d3482447348823dd7f913ced">handleReference</link>(PD,&#32;D-&gt;getLocation(),&#32;getCursor(D),
00824 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;dyn_cast&lt;NamedDecl&gt;(DC),&#32;DC);
00825 }
</programlisting><para>
References <link linkend="__c_x_index_data_consumer_8cpp_source_1l00884">handleReference()</link>.</para>
    </section><anchor xml:id="_classclang_1_1cxindex_1_1_c_x_index_data_consumer_1a8c8934e7ebac3bffc5fe3c8d90bb4853"/>    <section>
    <title>handleTagDecl()</title>
<indexterm><primary>handleTagDecl</primary><secondary>clang::cxindex::CXIndexDataConsumer</secondary></indexterm>
<indexterm><primary>clang::cxindex::CXIndexDataConsumer</primary><secondary>handleTagDecl</secondary></indexterm>
<para><computeroutput>bool CXIndexDataConsumer::handleTagDecl (const TagDecl * D)</computeroutput></para><para>
Definition at line <link linkend="__c_x_index_data_consumer_8cpp_source_1l00641">641</link> of file <link linkend="__c_x_index_data_consumer_8cpp_source">CXIndexDataConsumer.cpp</link>.</para>
<programlisting>00641 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00642 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;CXXRecordDecl&#32;*CXXRD&#32;=&#32;dyn_cast&lt;CXXRecordDecl&gt;(D))
00643 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;handleCXXRecordDecl(CXXRD,&#32;D);
00644 
00645 &#32;&#32;<link linkend="_structclang_1_1cxindex_1_1_decl_info">DeclInfo</link>&#32;DInfo(!D-&gt;isFirstDecl(),&#32;D-&gt;isThisDeclarationADefinition(),
00646 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;D-&gt;isThisDeclarationADefinition());
00647 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;handleDecl(D,&#32;D-&gt;getLocation(),&#32;getCursor(D),&#32;DInfo);
00648 }
</programlisting>    </section><anchor xml:id="_classclang_1_1cxindex_1_1_c_x_index_data_consumer_1a51308071d5e3e1eb995b0e3447024810"/>    <section>
    <title>handleTypeAliasTemplate()</title>
<indexterm><primary>handleTypeAliasTemplate</primary><secondary>clang::cxindex::CXIndexDataConsumer</secondary></indexterm>
<indexterm><primary>clang::cxindex::CXIndexDataConsumer</primary><secondary>handleTypeAliasTemplate</secondary></indexterm>
<para><computeroutput>bool CXIndexDataConsumer::handleTypeAliasTemplate (const TypeAliasTemplateDecl * D)</computeroutput></para><para>
Definition at line <link linkend="__c_x_index_data_consumer_8cpp_source_1l00878">878</link> of file <link linkend="__c_x_index_data_consumer_8cpp_source">CXIndexDataConsumer.cpp</link>.</para>
<programlisting>00878 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00879 &#32;&#32;<link linkend="_structclang_1_1cxindex_1_1_decl_info">DeclInfo</link>&#32;DInfo(<emphasis role="comment">/*isRedeclaration=*/</emphasis>!D-&gt;isCanonicalDecl(),
00880 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*isDefinition=*/</emphasis><emphasis role="keyword">true</emphasis>,&#32;<emphasis role="comment">/*isContainer=*/</emphasis><emphasis role="keyword">false</emphasis>);
00881 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;handleDecl(D,&#32;D-&gt;getLocation(),&#32;getCursor(D),&#32;DInfo);
00882 }
</programlisting>    </section><anchor xml:id="_classclang_1_1cxindex_1_1_c_x_index_data_consumer_1a0e826e01744c0b02fa8be496457105be"/>    <section>
    <title>handleTypedefName()</title>
<indexterm><primary>handleTypedefName</primary><secondary>clang::cxindex::CXIndexDataConsumer</secondary></indexterm>
<indexterm><primary>clang::cxindex::CXIndexDataConsumer</primary><secondary>handleTypedefName</secondary></indexterm>
<para><computeroutput>bool CXIndexDataConsumer::handleTypedefName (const TypedefNameDecl * D)</computeroutput></para><para>
Definition at line <link linkend="__c_x_index_data_consumer_8cpp_source_1l00650">650</link> of file <link linkend="__c_x_index_data_consumer_8cpp_source">CXIndexDataConsumer.cpp</link>.</para>
<programlisting>00650 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00651 &#32;&#32;<link linkend="_structclang_1_1cxindex_1_1_decl_info">DeclInfo</link>&#32;DInfo(!D-&gt;isFirstDecl(),&#32;<emphasis role="comment">/*isDefinition=*/</emphasis><emphasis role="keyword">true</emphasis>,
00652 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*isContainer=*/</emphasis><emphasis role="keyword">false</emphasis>);
00653 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;handleDecl(D,&#32;D-&gt;getLocation(),&#32;getCursor(D),&#32;DInfo);
00654 }
</programlisting>    </section><anchor xml:id="_classclang_1_1cxindex_1_1_c_x_index_data_consumer_1ad0117660a1e29cae3cfd1c2d6050b189"/>    <section>
    <title>handleVar()</title>
<indexterm><primary>handleVar</primary><secondary>clang::cxindex::CXIndexDataConsumer</secondary></indexterm>
<indexterm><primary>clang::cxindex::CXIndexDataConsumer</primary><secondary>handleVar</secondary></indexterm>
<para><computeroutput>bool CXIndexDataConsumer::handleVar (const VarDecl * D)</computeroutput></para><para>
Definition at line <link linkend="__c_x_index_data_consumer_8cpp_source_1l00623">623</link> of file <link linkend="__c_x_index_data_consumer_8cpp_source">CXIndexDataConsumer.cpp</link>.</para>
<programlisting>00623 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00624 &#32;&#32;<link linkend="_structclang_1_1cxindex_1_1_decl_info">DeclInfo</link>&#32;DInfo(!D-&gt;isFirstDecl(),&#32;D-&gt;isThisDeclarationADefinition(),
00625 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*isContainer=*/</emphasis><emphasis role="keyword">false</emphasis>);
00626 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;handleDecl(D,&#32;D-&gt;getLocation(),&#32;getCursor(D),&#32;DInfo);
00627 }
</programlisting>    </section><anchor xml:id="_classclang_1_1cxindex_1_1_c_x_index_data_consumer_1a1c5524b549de49a156156a134ac86970"/>    <section>
    <title>hasDiagnosticCallback()</title>
<indexterm><primary>hasDiagnosticCallback</primary><secondary>clang::cxindex::CXIndexDataConsumer</secondary></indexterm>
<indexterm><primary>clang::cxindex::CXIndexDataConsumer</primary><secondary>hasDiagnosticCallback</secondary></indexterm>
<para><computeroutput>bool clang::cxindex::CXIndexDataConsumer::hasDiagnosticCallback ( ) const<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line <link linkend="__c_x_index_data_consumer_8h_source_1l00362">362</link> of file <link linkend="__c_x_index_data_consumer_8h_source">CXIndexDataConsumer.h</link>.</para>
<programlisting>00362 {&#32;<emphasis role="keywordflow">return</emphasis>&#32;CB.diagnostic;&#32;}
</programlisting><para>
Referenced by <link linkend="__c_x_index_data_consumer_8cpp_source_1l00526">indexDiagnostics()</link>.</para>
    </section><anchor xml:id="_classclang_1_1cxindex_1_1_c_x_index_data_consumer_1a3b3231674a4065575b31c62792f59f17"/>    <section>
    <title>importedModule()</title>
<indexterm><primary>importedModule</primary><secondary>clang::cxindex::CXIndexDataConsumer</secondary></indexterm>
<indexterm><primary>clang::cxindex::CXIndexDataConsumer</primary><secondary>importedModule</secondary></indexterm>
<para><computeroutput>void CXIndexDataConsumer::importedModule (const ImportDecl * ImportD)</computeroutput></para><para>
Definition at line <link linkend="__c_x_index_data_consumer_8cpp_source_1l00478">478</link> of file <link linkend="__c_x_index_data_consumer_8cpp_source">CXIndexDataConsumer.cpp</link>.</para>
<programlisting>00478 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00479 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!CB.importedASTFile)
00480 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
00481 
00482 &#32;&#32;Module&#32;*Mod&#32;=&#32;ImportD-&gt;getImportedModule();
00483 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!Mod)
00484 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
00485 
00486 &#32;&#32;<emphasis role="comment">//&#32;If&#32;the&#32;imported&#32;module&#32;is&#32;part&#32;of&#32;the&#32;top-level&#32;module&#32;that&#32;we&apos;re</emphasis>
00487 &#32;&#32;<emphasis role="comment">//&#32;indexing,&#32;it&#32;doesn&apos;t&#32;correspond&#32;to&#32;an&#32;imported&#32;AST&#32;file.</emphasis>
00488 &#32;&#32;<emphasis role="comment">//&#32;FIXME:&#32;This&#32;assumes&#32;that&#32;AST&#32;files&#32;and&#32;top-level&#32;modules&#32;directly</emphasis>
00489 &#32;&#32;<emphasis role="comment">//&#32;correspond,&#32;which&#32;is&#32;unlikely&#32;to&#32;remain&#32;true&#32;forever.</emphasis>
00490 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(Module&#32;*SrcMod&#32;=&#32;ImportD-&gt;getImportedOwningModule())
00491 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(SrcMod-&gt;getTopLevelModule()&#32;==&#32;Mod-&gt;getTopLevelModule())
00492 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
00493 
00494 &#32;&#32;FileEntry&#32;*FE&#32;=&#32;<emphasis role="keyword">nullptr</emphasis>;
00495 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="keyword">auto</emphasis>&#32;File&#32;=&#32;Mod-&gt;getASTFile())
00496 &#32;&#32;&#32;&#32;FE&#32;=&#32;<emphasis role="keyword">const_cast&lt;</emphasis>FileEntry&#32;*<emphasis role="keyword">&gt;</emphasis>(&amp;File-&gt;getFileEntry());
00497 &#32;&#32;CXIdxImportedASTFileInfo&#32;Info&#32;=&#32;{<emphasis role="keyword">static_cast&lt;</emphasis>CXFile<emphasis role="keyword">&gt;</emphasis>(FE),&#32;Mod,
00498 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;getIndexLoc(ImportD-&gt;getLocation()),
00499 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ImportD-&gt;isImplicit()};
00500 &#32;&#32;CXIdxClientASTFile&#32;astFile&#32;=&#32;CB.importedASTFile(ClientData,&#32;&amp;Info);
00501 &#32;&#32;(void)astFile;
00502 }
</programlisting>    </section><anchor xml:id="_classclang_1_1cxindex_1_1_c_x_index_data_consumer_1ab8f6df5dd61289c7cc6189a5e6cff6b7"/>    <section>
    <title>importedPCH()</title>
<indexterm><primary>importedPCH</primary><secondary>clang::cxindex::CXIndexDataConsumer</secondary></indexterm>
<indexterm><primary>clang::cxindex::CXIndexDataConsumer</primary><secondary>importedPCH</secondary></indexterm>
<para><computeroutput>void CXIndexDataConsumer::importedPCH (const FileEntry * File)</computeroutput></para><para>
Definition at line <link linkend="__c_x_index_data_consumer_8cpp_source_1l00504">504</link> of file <link linkend="__c_x_index_data_consumer_8cpp_source">CXIndexDataConsumer.cpp</link>.</para>
<programlisting>00504 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00505 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!CB.importedASTFile)
00506 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
00507 
00508 &#32;&#32;CXIdxImportedASTFileInfo&#32;Info&#32;=&#32;{
00509 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_cast&lt;</emphasis>CXFile<emphasis role="keyword">&gt;</emphasis>(
00510 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const_cast&lt;</emphasis>FileEntry&#32;*<emphasis role="keyword">&gt;</emphasis>(File)),
00511 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*module=*/</emphasis><emphasis role="keyword">nullptr</emphasis>,
00512 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;getIndexLoc(SourceLocation()),
00513 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*isImplicit=*/</emphasis><emphasis role="keyword">false</emphasis>
00514 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;};
00515 &#32;&#32;CXIdxClientASTFile&#32;astFile&#32;=&#32;CB.importedASTFile(ClientData,&#32;&amp;Info);
00516 &#32;&#32;(void)astFile;
00517 }
</programlisting>    </section><anchor xml:id="_classclang_1_1cxindex_1_1_c_x_index_data_consumer_1aeaf562b1dfa9686d4076b4de7e06cbbb"/>    <section>
    <title>indexDiagnostics()</title>
<indexterm><primary>indexDiagnostics</primary><secondary>clang::cxindex::CXIndexDataConsumer</secondary></indexterm>
<indexterm><primary>clang::cxindex::CXIndexDataConsumer</primary><secondary>indexDiagnostics</secondary></indexterm>
<para><computeroutput>void CXIndexDataConsumer::indexDiagnostics ( )</computeroutput></para><para>
Definition at line <link linkend="__c_x_index_data_consumer_8cpp_source_1l00526">526</link> of file <link linkend="__c_x_index_data_consumer_8cpp_source">CXIndexDataConsumer.cpp</link>.</para>
<programlisting>00526 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00527 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!<link linkend="_classclang_1_1cxindex_1_1_c_x_index_data_consumer_1a1c5524b549de49a156156a134ac86970">hasDiagnosticCallback</link>())
00528 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
00529 
00530 &#32;&#32;<link linkend="_classclang_1_1_c_x_diagnostic_set_impl">CXDiagnosticSetImpl</link>&#32;*DiagSet&#32;=&#32;<link linkend="_namespaceclang_1_1cxdiag_1a02bce7e16b9a44d64657a2b5f1419351">cxdiag::lazyCreateDiags</link>(<link linkend="_classclang_1_1cxindex_1_1_c_x_index_data_consumer_1a1e920a3dc7386fbef4b9e600cccd67bc">getCXTU</link>());
00531 &#32;&#32;<link linkend="_classclang_1_1cxindex_1_1_c_x_index_data_consumer_1a6d45d26c0132be1ec21d6abcf3dc96cf">handleDiagnosticSet</link>(DiagSet);
00532 }
</programlisting><para>
References <link linkend="__c_x_index_data_consumer_8h_source_1l00341">getCXTU()</link>, <link linkend="__c_x_index_data_consumer_8cpp_source_1l00534">handleDiagnosticSet()</link>, <link linkend="__c_x_index_data_consumer_8h_source_1l00362">hasDiagnosticCallback()</link>, and <link linkend="__c_index_diagnostic_8cpp_source_1l00149">clang::cxdiag::lazyCreateDiags()</link>.</para>
    </section><anchor xml:id="_classclang_1_1cxindex_1_1_c_x_index_data_consumer_1abbffca61e5023fb01eb8ab8dcace8d48"/>    <section>
    <title>isFunctionLocalDecl()</title>
<indexterm><primary>isFunctionLocalDecl</primary><secondary>clang::cxindex::CXIndexDataConsumer</secondary></indexterm>
<indexterm><primary>clang::cxindex::CXIndexDataConsumer</primary><secondary>isFunctionLocalDecl</secondary></indexterm>
<para><computeroutput>bool CXIndexDataConsumer::isFunctionLocalDecl (const Decl * D)<computeroutput>[static]</computeroutput></computeroutput></para><para>
Definition at line <link linkend="__c_x_index_data_consumer_8cpp_source_1l00420">420</link> of file <link linkend="__c_x_index_data_consumer_8cpp_source">CXIndexDataConsumer.cpp</link>.</para>
<programlisting>00420 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00421 &#32;&#32;assert(D);
00422 
00423 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!D-&gt;getParentFunctionOrMethod())
00424 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
00425 
00426 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;NamedDecl&#32;*ND&#32;=&#32;dyn_cast&lt;NamedDecl&gt;(D))&#32;{
00427 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(ND-&gt;getFormalLinkage())&#32;{
00428 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;NoLinkage:
00429 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;InternalLinkage:
00430 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
00431 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;VisibleNoLinkage:
00432 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;ModuleInternalLinkage:
00433 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;UniqueExternalLinkage:
00434 &#32;&#32;&#32;&#32;&#32;&#32;llvm_unreachable(<emphasis role="stringliteral">&quot;Not&#32;a&#32;sema&#32;linkage&quot;</emphasis>);
00435 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;ModuleLinkage:
00436 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;ExternalLinkage:
00437 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
00438 &#32;&#32;&#32;&#32;}
00439 &#32;&#32;}
00440 
00441 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
00442 }
</programlisting>    </section><anchor xml:id="_classclang_1_1cxindex_1_1_c_x_index_data_consumer_1a05b282788c19ebbbe352b78f1d1229f6"/>    <section>
    <title>isNotFromSourceFile()</title>
<indexterm><primary>isNotFromSourceFile</primary><secondary>clang::cxindex::CXIndexDataConsumer</secondary></indexterm>
<indexterm><primary>clang::cxindex::CXIndexDataConsumer</primary><secondary>isNotFromSourceFile</secondary></indexterm>
<para><computeroutput>bool CXIndexDataConsumer::isNotFromSourceFile (SourceLocation Loc) const</computeroutput></para><para>
Definition at line <link linkend="__c_x_index_data_consumer_8cpp_source_1l00932">932</link> of file <link linkend="__c_x_index_data_consumer_8cpp_source">CXIndexDataConsumer.cpp</link>.</para>
<programlisting>00932 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00933 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(Loc.isInvalid())
00934 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
00935 &#32;&#32;SourceManager&#32;&amp;SM&#32;=&#32;Ctx-&gt;getSourceManager();
00936 &#32;&#32;SourceLocation&#32;FileLoc&#32;=&#32;SM.getFileLoc(Loc);
00937 &#32;&#32;FileID&#32;FID&#32;=&#32;SM.getFileID(FileLoc);
00938 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;SM.getFileEntryForID(FID)&#32;==&#32;<emphasis role="keyword">nullptr</emphasis>;
00939 }
</programlisting>    </section><anchor xml:id="_classclang_1_1cxindex_1_1_c_x_index_data_consumer_1a6b05f1224c212db76edacb87a7982e66"/>    <section>
    <title>isTemplateImplicitInstantiation()</title>
<indexterm><primary>isTemplateImplicitInstantiation</primary><secondary>clang::cxindex::CXIndexDataConsumer</secondary></indexterm>
<indexterm><primary>clang::cxindex::CXIndexDataConsumer</primary><secondary>isTemplateImplicitInstantiation</secondary></indexterm>
<para><computeroutput>bool CXIndexDataConsumer::isTemplateImplicitInstantiation (const Decl * D)<computeroutput>[static]</computeroutput></computeroutput></para><para>
Definition at line <link linkend="__c_x_index_data_consumer_8cpp_source_1l01229">1229</link> of file <link linkend="__c_x_index_data_consumer_8cpp_source">CXIndexDataConsumer.cpp</link>.</para>
<programlisting>01229 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
01230 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;ClassTemplateSpecializationDecl&#32;*
01231 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;SD&#32;=&#32;dyn_cast&lt;ClassTemplateSpecializationDecl&gt;(D))&#32;{
01232 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;SD-&gt;getSpecializationKind()&#32;==&#32;TSK_ImplicitInstantiation;
01233 &#32;&#32;}
01234 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;FunctionDecl&#32;*FD&#32;=&#32;dyn_cast&lt;FunctionDecl&gt;(D))&#32;{
01235 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;FD-&gt;getTemplateSpecializationKind()&#32;==&#32;TSK_ImplicitInstantiation;
01236 &#32;&#32;}
01237 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
01238 }
</programlisting>    </section><anchor xml:id="_classclang_1_1cxindex_1_1_c_x_index_data_consumer_1a3b4e93bdd5828aee90dfbb5d09596c55"/>    <section>
    <title>ppIncludedFile()</title>
<indexterm><primary>ppIncludedFile</primary><secondary>clang::cxindex::CXIndexDataConsumer</secondary></indexterm>
<indexterm><primary>clang::cxindex::CXIndexDataConsumer</primary><secondary>ppIncludedFile</secondary></indexterm>
<para><computeroutput>void CXIndexDataConsumer::ppIncludedFile (SourceLocation hashLoc, StringRef filename, const FileEntry * File, bool isImport, bool isAngled, bool isModuleImport)</computeroutput></para><para>
Definition at line <link linkend="__c_x_index_data_consumer_8cpp_source_1l00460">460</link> of file <link linkend="__c_x_index_data_consumer_8cpp_source">CXIndexDataConsumer.cpp</link>.</para>
<programlisting>00464 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00465 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!CB.ppIncludedFile)
00466 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
00467 
00468 &#32;&#32;<link linkend="_classclang_1_1cxindex_1_1_scratch_alloc">ScratchAlloc</link>&#32;SA(*<emphasis role="keyword">this</emphasis>);
00469 &#32;&#32;CXIdxIncludedFileInfo&#32;Info&#32;=&#32;{&#32;getIndexLoc(hashLoc),
00470 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;SA.toCStr(filename),
00471 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_cast&lt;</emphasis>CXFile<emphasis role="keyword">&gt;</emphasis>(
00472 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const_cast&lt;</emphasis>FileEntry&#32;*<emphasis role="keyword">&gt;</emphasis>(File)),
00473 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;isImport,&#32;isAngled,&#32;isModuleImport&#32;};
00474 &#32;&#32;CXIdxClientFile&#32;idxFile&#32;=&#32;CB.ppIncludedFile(ClientData,&#32;&amp;Info);
00475 &#32;&#32;FileMap[File]&#32;=&#32;idxFile;
00476 }
</programlisting><para>
References <link linkend="__c_x_index_data_consumer_8cpp_source_1l00396">clang::cxindex::ScratchAlloc::toCStr()</link>.</para>
    </section><anchor xml:id="_classclang_1_1cxindex_1_1_c_x_index_data_consumer_1a4f34d3862aaca2e111d2d6fc283c16dd"/>    <section>
    <title>setASTContext()</title>
<indexterm><primary>setASTContext</primary><secondary>clang::cxindex::CXIndexDataConsumer</secondary></indexterm>
<indexterm><primary>clang::cxindex::CXIndexDataConsumer</primary><secondary>setASTContext</secondary></indexterm>
<para><computeroutput>void CXIndexDataConsumer::setASTContext (ASTContext &amp; ctx)</computeroutput></para><para>
Definition at line <link linkend="__c_x_index_data_consumer_8cpp_source_1l00411">411</link> of file <link linkend="__c_x_index_data_consumer_8cpp_source">CXIndexDataConsumer.cpp</link>.</para>
<programlisting>00411 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00412 &#32;&#32;Ctx&#32;=&#32;&amp;ctx;
00413 &#32;&#32;cxtu::getASTUnit(CXTU)-&gt;setASTContext(&amp;ctx);
00414 }
</programlisting>    </section><anchor xml:id="_classclang_1_1cxindex_1_1_c_x_index_data_consumer_1a8410b188890a57a9e2034f3c5275be7e"/>    <section>
    <title>setClientEntity()</title>
<indexterm><primary>setClientEntity</primary><secondary>clang::cxindex::CXIndexDataConsumer</secondary></indexterm>
<indexterm><primary>clang::cxindex::CXIndexDataConsumer</primary><secondary>setClientEntity</secondary></indexterm>
<para><computeroutput>void CXIndexDataConsumer::setClientEntity (const Decl * D, CXIdxClientEntity client)</computeroutput></para><para>
Definition at line <link linkend="__c_x_index_data_consumer_8cpp_source_1l00969">969</link> of file <link linkend="__c_x_index_data_consumer_8cpp_source">CXIndexDataConsumer.cpp</link>.</para>
<programlisting>00969 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00970 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!D)
00971 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
00972 &#32;&#32;EntityMap[D]&#32;=&#32;client;
00973 }
</programlisting><para>
Referenced by <link linkend="__indexing_8cpp_source_1l00844">clang_index_setClientEntity()</link>.</para>
    </section><anchor xml:id="_classclang_1_1cxindex_1_1_c_x_index_data_consumer_1a26c09f765fc8cb328b567d0df24e3de0"/>    <section>
    <title>setPreprocessor()</title>
<indexterm><primary>setPreprocessor</primary><secondary>clang::cxindex::CXIndexDataConsumer</secondary></indexterm>
<indexterm><primary>clang::cxindex::CXIndexDataConsumer</primary><secondary>setPreprocessor</secondary></indexterm>
<para><computeroutput>void CXIndexDataConsumer::setPreprocessor (std::shared_ptr&lt; Preprocessor &gt; PP)<computeroutput>[override]</computeroutput></computeroutput></para><para>
Definition at line <link linkend="__c_x_index_data_consumer_8cpp_source_1l00416">416</link> of file <link linkend="__c_x_index_data_consumer_8cpp_source">CXIndexDataConsumer.cpp</link>.</para>
<programlisting>00416 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00417 &#32;&#32;cxtu::getASTUnit(CXTU)-&gt;setPreprocessor(std::move(PP));
00418 }
</programlisting>    </section><anchor xml:id="_classclang_1_1cxindex_1_1_c_x_index_data_consumer_1a7448058a9a24e004514ecaacc168ea1a"/>    <section>
    <title>shouldAbort()</title>
<indexterm><primary>shouldAbort</primary><secondary>clang::cxindex::CXIndexDataConsumer</secondary></indexterm>
<indexterm><primary>clang::cxindex::CXIndexDataConsumer</primary><secondary>shouldAbort</secondary></indexterm>
<para><computeroutput>bool CXIndexDataConsumer::shouldAbort ( )</computeroutput></para><para>
Definition at line <link linkend="__c_x_index_data_consumer_8cpp_source_1l00444">444</link> of file <link linkend="__c_x_index_data_consumer_8cpp_source">CXIndexDataConsumer.cpp</link>.</para>
<programlisting>00444 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00445 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!CB.abortQuery)
00446 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
00447 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;CB.abortQuery(ClientData,&#32;<emphasis role="keyword">nullptr</emphasis>);
00448 }
</programlisting>    </section><anchor xml:id="_classclang_1_1cxindex_1_1_c_x_index_data_consumer_1ab96bf30db26572795d6e705d74711d8e"/>    <section>
    <title>shouldIndexFunctionLocalSymbols()</title>
<indexterm><primary>shouldIndexFunctionLocalSymbols</primary><secondary>clang::cxindex::CXIndexDataConsumer</secondary></indexterm>
<indexterm><primary>clang::cxindex::CXIndexDataConsumer</primary><secondary>shouldIndexFunctionLocalSymbols</secondary></indexterm>
<para><computeroutput>bool clang::cxindex::CXIndexDataConsumer::shouldIndexFunctionLocalSymbols ( ) const<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line <link linkend="__c_x_index_data_consumer_8h_source_1l00350">350</link> of file <link linkend="__c_x_index_data_consumer_8h_source">CXIndexDataConsumer.h</link>.</para>
<programlisting>00350 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00351 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;IndexOptions&#32;&amp;&#32;CXIndexOpt_IndexFunctionLocalSymbols;
00352 &#32;&#32;}
</programlisting>    </section><anchor xml:id="_classclang_1_1cxindex_1_1_c_x_index_data_consumer_1aa1504de2c9de43d30f40776398b13904"/>    <section>
    <title>shouldIndexImplicitTemplateInsts()</title>
<indexterm><primary>shouldIndexImplicitTemplateInsts</primary><secondary>clang::cxindex::CXIndexDataConsumer</secondary></indexterm>
<indexterm><primary>clang::cxindex::CXIndexDataConsumer</primary><secondary>shouldIndexImplicitTemplateInsts</secondary></indexterm>
<para><computeroutput>bool clang::cxindex::CXIndexDataConsumer::shouldIndexImplicitTemplateInsts ( ) const<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line <link linkend="__c_x_index_data_consumer_8h_source_1l00354">354</link> of file <link linkend="__c_x_index_data_consumer_8h_source">CXIndexDataConsumer.h</link>.</para>
<programlisting>00354 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00355 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;IndexOptions&#32;&amp;&#32;CXIndexOpt_IndexImplicitTemplateInstantiations;
00356 &#32;&#32;}
</programlisting>    </section><anchor xml:id="_classclang_1_1cxindex_1_1_c_x_index_data_consumer_1a532578623b1df6f45e25230f11242472"/>    <section>
    <title>shouldSuppressRefs()</title>
<indexterm><primary>shouldSuppressRefs</primary><secondary>clang::cxindex::CXIndexDataConsumer</secondary></indexterm>
<indexterm><primary>clang::cxindex::CXIndexDataConsumer</primary><secondary>shouldSuppressRefs</secondary></indexterm>
<para><computeroutput>bool clang::cxindex::CXIndexDataConsumer::shouldSuppressRefs ( ) const<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line <link linkend="__c_x_index_data_consumer_8h_source_1l00346">346</link> of file <link linkend="__c_x_index_data_consumer_8h_source">CXIndexDataConsumer.h</link>.</para>
<programlisting>00346 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00347 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;IndexOptions&#32;&amp;&#32;CXIndexOpt_SuppressRedundantRefs;
00348 &#32;&#32;}
</programlisting><para>
Referenced by <link linkend="__c_x_index_data_consumer_8cpp_source_1l00741">handleObjCCategory()</link>, <link linkend="__c_x_index_data_consumer_8cpp_source_1l00773">handleObjCCategoryImpl()</link>, <link linkend="__c_x_index_data_consumer_8cpp_source_1l00656">handleObjCInterface()</link>, and <link linkend="__c_x_index_data_consumer_8cpp_source_1l00712">handleObjCProtocol()</link>.</para>
    </section><anchor xml:id="_classclang_1_1cxindex_1_1_c_x_index_data_consumer_1a6b2dd8a844240181f6b09b91bfb25e7a"/>    <section>
    <title>startedTranslationUnit()</title>
<indexterm><primary>startedTranslationUnit</primary><secondary>clang::cxindex::CXIndexDataConsumer</secondary></indexterm>
<indexterm><primary>clang::cxindex::CXIndexDataConsumer</primary><secondary>startedTranslationUnit</secondary></indexterm>
<para><computeroutput>void CXIndexDataConsumer::startedTranslationUnit ( )</computeroutput></para><para>
Definition at line <link linkend="__c_x_index_data_consumer_8cpp_source_1l00519">519</link> of file <link linkend="__c_x_index_data_consumer_8cpp_source">CXIndexDataConsumer.cpp</link>.</para>
<programlisting>00519 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00520 &#32;&#32;CXIdxClientContainer&#32;idxCont&#32;=&#32;<emphasis role="keyword">nullptr</emphasis>;
00521 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(CB.startedTranslationUnit)
00522 &#32;&#32;&#32;&#32;idxCont&#32;=&#32;CB.startedTranslationUnit(ClientData,&#32;<emphasis role="keyword">nullptr</emphasis>);
00523 &#32;&#32;<link linkend="_classclang_1_1cxindex_1_1_c_x_index_data_consumer_1aa606355afc24ae5ef78a5e1ae8e612c0">addContainerInMap</link>(Ctx-&gt;getTranslationUnitDecl(),&#32;idxCont);
00524 }
</programlisting><para>
References <link linkend="__c_x_index_data_consumer_8cpp_source_1l00941">addContainerInMap()</link>.</para>
    </section><anchor xml:id="_classclang_1_1cxindex_1_1_c_x_index_data_consumer_1a5332371a52c1329c815af24c5dab3ed1"/>    <section>
    <title>translateLoc()</title>
<indexterm><primary>translateLoc</primary><secondary>clang::cxindex::CXIndexDataConsumer</secondary></indexterm>
<indexterm><primary>clang::cxindex::CXIndexDataConsumer</primary><secondary>translateLoc</secondary></indexterm>
<para><computeroutput>void CXIndexDataConsumer::translateLoc (SourceLocation Loc, CXIdxClientFile * indexFile, CXFile * file, unsigned * line, unsigned * column, unsigned * offset)</computeroutput></para><para>
Definition at line <link linkend="__c_x_index_data_consumer_8cpp_source_1l01101">1101</link> of file <link linkend="__c_x_index_data_consumer_8cpp_source">CXIndexDataConsumer.cpp</link>.</para>
<programlisting>01104 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
01105 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(Loc.isInvalid())
01106 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
01107 
01108 &#32;&#32;SourceManager&#32;&amp;SM&#32;=&#32;Ctx-&gt;getSourceManager();
01109 &#32;&#32;Loc&#32;=&#32;SM.getFileLoc(Loc);
01110 
01111 &#32;&#32;std::pair&lt;FileID,&#32;unsigned&gt;&#32;LocInfo&#32;=&#32;SM.getDecomposedLoc(Loc);
01112 &#32;&#32;FileID&#32;FID&#32;=&#32;LocInfo.first;
01113 &#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;FileOffset&#32;=&#32;LocInfo.second;
01114 
01115 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(FID.isInvalid())
01116 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
01117 &#32;&#32;
01118 &#32;&#32;<emphasis role="keyword">const</emphasis>&#32;FileEntry&#32;*FE&#32;=&#32;SM.getFileEntryForID(FID);
01119 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(indexFile)
01120 &#32;&#32;&#32;&#32;*indexFile&#32;=&#32;getIndexFile(FE);
01121 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(file)
01122 &#32;&#32;&#32;&#32;*file&#32;=&#32;<emphasis role="keyword">const_cast&lt;</emphasis>FileEntry&#32;*<emphasis role="keyword">&gt;</emphasis>(FE);
01123 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(line)
01124 &#32;&#32;&#32;&#32;*line&#32;=&#32;SM.getLineNumber(FID,&#32;FileOffset);
01125 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(column)
01126 &#32;&#32;&#32;&#32;*column&#32;=&#32;SM.getColumnNumber(FID,&#32;FileOffset);
01127 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(offset)
01128 &#32;&#32;&#32;&#32;*offset&#32;=&#32;FileOffset;
01129 }
</programlisting><para>
Referenced by <link linkend="__indexing_8cpp_source_1l00968">clang_indexLoc_getFileLocation()</link>.</para>
</section>
</section>
<section>
<title>Friends And Related Function Documentation</title>
<anchor xml:id="_classclang_1_1cxindex_1_1_c_x_index_data_consumer_1a8da7f07242735deb22345063fd847778"/>    <section>
    <title>AttrListInfo</title>
<indexterm><primary>AttrListInfo</primary><secondary>clang::cxindex::CXIndexDataConsumer</secondary></indexterm>
<indexterm><primary>clang::cxindex::CXIndexDataConsumer</primary><secondary>AttrListInfo</secondary></indexterm>
<para><computeroutput>friend class <link linkend="_classclang_1_1cxindex_1_1_attr_list_info">AttrListInfo</link><computeroutput>[friend]</computeroutput></computeroutput></para><para>
Definition at line <link linkend="__c_x_index_data_consumer_8h_source_1l00331">331</link> of file <link linkend="__c_x_index_data_consumer_8h_source">CXIndexDataConsumer.h</link>.</para>
    </section><anchor xml:id="_classclang_1_1cxindex_1_1_c_x_index_data_consumer_1a9256c2f0308f57ea9ed42e761acab1d4"/>    <section>
    <title>ScratchAlloc</title>
<indexterm><primary>ScratchAlloc</primary><secondary>clang::cxindex::CXIndexDataConsumer</secondary></indexterm>
<indexterm><primary>clang::cxindex::CXIndexDataConsumer</primary><secondary>ScratchAlloc</secondary></indexterm>
<para><computeroutput>friend class <link linkend="_classclang_1_1cxindex_1_1_scratch_alloc">ScratchAlloc</link><computeroutput>[friend]</computeroutput></computeroutput></para><para>
Definition at line <link linkend="__c_x_index_data_consumer_8h_source_1l00296">296</link> of file <link linkend="__c_x_index_data_consumer_8h_source">CXIndexDataConsumer.h</link>.</para>
</section>
<para>
The documentation for this class was generated from the following files:</para>
/Users/maximilian/clang-llvm/clang/tools/libclang/<link linkend="__c_x_index_data_consumer_8h">CXIndexDataConsumer.h</link>/Users/maximilian/clang-llvm/clang/tools/libclang/<link linkend="__c_x_index_data_consumer_8cpp">CXIndexDataConsumer.cpp</link></section>
</section>
