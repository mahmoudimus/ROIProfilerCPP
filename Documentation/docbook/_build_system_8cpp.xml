<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="__build_system_8cpp" xml:lang="en-US">
<title>/Users/maximilian/clang-llvm/clang/tools/libclang/BuildSystem.cpp File Reference</title>
<indexterm><primary>/Users/maximilian/clang-llvm/clang/tools/libclang/BuildSystem.cpp</primary></indexterm>
<programlisting>#include &quot;clang-c/BuildSystem.h&quot;
#include &quot;CXString.h&quot;
#include &quot;llvm/ADT/SmallString.h&quot;
#include &quot;llvm/Support/CBindingWrapping.h&quot;
#include &quot;llvm/Support/Chrono.h&quot;
#include &quot;llvm/Support/ErrorHandling.h&quot;
#include &quot;llvm/Support/Path.h&quot;
#include &quot;llvm/Support/VirtualFileSystem.h&quot;
#include &quot;llvm/Support/raw_ostream.h&quot;
</programlisting><simplesect>
    <title>Classes    </title>
        <itemizedlist>
            <listitem><para>struct <link linkend="_struct_c_x_module_map_descriptor_impl">CXModuleMapDescriptorImpl</link></para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Functions    </title>
        <itemizedlist>
            <listitem><para>unsigned long long <link linkend="__build_system_8cpp_1a07391c5aa13ea56a8de2076ce2e292ff">clang_getBuildSessionTimestamp</link> (void)</para>
</listitem>
            <listitem><para><link linkend="__build_system_8cpp_1ae7cbdcc1b3ff11a85f2ec97abda4094b">DEFINE_SIMPLE_CONVERSION_FUNCTIONS</link> (llvm::vfs::YAMLVFSWriter, CXVirtualFileOverlay) CXVirtualFileOverlay clang_VirtualFileOverlay_create(unsigned)</para>
</listitem>
            <listitem><para>enum CXErrorCode <link linkend="__build_system_8cpp_1a49a0ea9492dfadb2118b6da00fa4a912">clang_VirtualFileOverlay_addFileMapping</link> (CXVirtualFileOverlay VFO, const char *virtualPath, const char *realPath)</para>
</listitem>
            <listitem><para>enum CXErrorCode <link linkend="__build_system_8cpp_1a4b36561bb4de24a902dd5c3d517320eb">clang_VirtualFileOverlay_setCaseSensitivity</link> (CXVirtualFileOverlay VFO, int caseSensitive)</para>
</listitem>
            <listitem><para>enum CXErrorCode <link linkend="__build_system_8cpp_1abbd01fb19d8a0374311f509af25da230">clang_VirtualFileOverlay_writeToBuffer</link> (CXVirtualFileOverlay VFO, unsigned, char **out_buffer_ptr, unsigned *out_buffer_size)</para>
</listitem>
            <listitem><para>void <link linkend="__build_system_8cpp_1aea57a4ed4b533460979c5bfc091d4fa5">clang_free</link> (void *buffer)</para>
</listitem>
            <listitem><para>void <link linkend="__build_system_8cpp_1af48a174ecb047f9efaad91f67436bff3">clang_VirtualFileOverlay_dispose</link> (CXVirtualFileOverlay VFO)</para>
</listitem>
            <listitem><para>CXModuleMapDescriptor <link linkend="__build_system_8cpp_1a3e1d0c1ce02a30c3cef11e2163c7ce3e">clang_ModuleMapDescriptor_create</link> (unsigned)</para>
</listitem>
            <listitem><para>enum CXErrorCode <link linkend="__build_system_8cpp_1adb3cd0e1310d5eefc030adc3cd9ef120">clang_ModuleMapDescriptor_setFrameworkModuleName</link> (CXModuleMapDescriptor MMD, const char *name)</para>
</listitem>
            <listitem><para>enum CXErrorCode <link linkend="__build_system_8cpp_1a945a4e4089d21e7a73444a1159fdfdfe">clang_ModuleMapDescriptor_setUmbrellaHeader</link> (CXModuleMapDescriptor MMD, const char *name)</para>
</listitem>
            <listitem><para>enum CXErrorCode <link linkend="__build_system_8cpp_1a395f0b51baf7f991e799bcafc8385704">clang_ModuleMapDescriptor_writeToBuffer</link> (CXModuleMapDescriptor MMD, unsigned, char **out_buffer_ptr, unsigned *out_buffer_size)</para>
</listitem>
            <listitem><para>void <link linkend="__build_system_8cpp_1ae16b87d92a1f2435b25724cbaf007ce5">clang_ModuleMapDescriptor_dispose</link> (CXModuleMapDescriptor MMD)</para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Function Documentation</title>
<anchor xml:id="__build_system_8cpp_1aea57a4ed4b533460979c5bfc091d4fa5"/>    <section>
    <title>clang_free()</title>
<indexterm><primary>clang_free</primary><secondary>BuildSystem.cpp</secondary></indexterm>
<indexterm><primary>BuildSystem.cpp</primary><secondary>clang_free</secondary></indexterm>
<para><computeroutput>void clang_free (void * buffer)</computeroutput></para><para>
Definition at line <link linkend="__build_system_8cpp_source_1l00087">87</link> of file <link linkend="__build_system_8cpp_source">BuildSystem.cpp</link>.</para>
<programlisting>00087 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00088 &#32;&#32;free(buffer);
00089 }
</programlisting>    </section><anchor xml:id="__build_system_8cpp_1a07391c5aa13ea56a8de2076ce2e292ff"/>    <section>
    <title>clang_getBuildSessionTimestamp()</title>
<indexterm><primary>clang_getBuildSessionTimestamp</primary><secondary>BuildSystem.cpp</secondary></indexterm>
<indexterm><primary>BuildSystem.cpp</primary><secondary>clang_getBuildSessionTimestamp</secondary></indexterm>
<para><computeroutput>unsigned long long clang_getBuildSessionTimestamp (void )</computeroutput></para><para>
Definition at line <link linkend="__build_system_8cpp_source_1l00026">26</link> of file <link linkend="__build_system_8cpp_source">BuildSystem.cpp</link>.</para>
<programlisting>00026 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00027 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;llvm::sys::toTimeT(std::chrono::system_clock::now());
00028 }
</programlisting>    </section><anchor xml:id="__build_system_8cpp_1a3e1d0c1ce02a30c3cef11e2163c7ce3e"/>    <section>
    <title>clang_ModuleMapDescriptor_create()</title>
<indexterm><primary>clang_ModuleMapDescriptor_create</primary><secondary>BuildSystem.cpp</secondary></indexterm>
<indexterm><primary>BuildSystem.cpp</primary><secondary>clang_ModuleMapDescriptor_create</secondary></indexterm>
<para><computeroutput>CXModuleMapDescriptor clang_ModuleMapDescriptor_create (unsigned )</computeroutput></para><para>
Definition at line <link linkend="__build_system_8cpp_source_1l00101">101</link> of file <link linkend="__build_system_8cpp_source">BuildSystem.cpp</link>.</para>
<programlisting>00101 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00102 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_struct_c_x_module_map_descriptor_impl">CXModuleMapDescriptorImpl</link>();
00103 }
</programlisting>    </section><anchor xml:id="__build_system_8cpp_1ae16b87d92a1f2435b25724cbaf007ce5"/>    <section>
    <title>clang_ModuleMapDescriptor_dispose()</title>
<indexterm><primary>clang_ModuleMapDescriptor_dispose</primary><secondary>BuildSystem.cpp</secondary></indexterm>
<indexterm><primary>BuildSystem.cpp</primary><secondary>clang_ModuleMapDescriptor_dispose</secondary></indexterm>
<para><computeroutput>void clang_ModuleMapDescriptor_dispose (CXModuleMapDescriptor MMD)</computeroutput></para><para>
Definition at line <link linkend="__build_system_8cpp_source_1l00149">149</link> of file <link linkend="__build_system_8cpp_source">BuildSystem.cpp</link>.</para>
<programlisting>00149 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00150 &#32;&#32;<emphasis role="keyword">delete</emphasis>&#32;MMD;
00151 }
</programlisting>    </section><anchor xml:id="__build_system_8cpp_1adb3cd0e1310d5eefc030adc3cd9ef120"/>    <section>
    <title>clang_ModuleMapDescriptor_setFrameworkModuleName()</title>
<indexterm><primary>clang_ModuleMapDescriptor_setFrameworkModuleName</primary><secondary>BuildSystem.cpp</secondary></indexterm>
<indexterm><primary>BuildSystem.cpp</primary><secondary>clang_ModuleMapDescriptor_setFrameworkModuleName</secondary></indexterm>
<para><computeroutput>enum CXErrorCode clang_ModuleMapDescriptor_setFrameworkModuleName (CXModuleMapDescriptor MMD, const char * name)</computeroutput></para><para>
Definition at line <link linkend="__build_system_8cpp_source_1l00101">101</link> of file <link linkend="__build_system_8cpp_source">BuildSystem.cpp</link>.</para>
<programlisting>00107 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00108 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!MMD&#32;||&#32;!name)
00109 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;CXError_InvalidArguments;
00110 
00111 &#32;&#32;MMD-&gt;ModuleName&#32;=&#32;name;
00112 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;CXError_Success;
00113 }
</programlisting>    </section><anchor xml:id="__build_system_8cpp_1a945a4e4089d21e7a73444a1159fdfdfe"/>    <section>
    <title>clang_ModuleMapDescriptor_setUmbrellaHeader()</title>
<indexterm><primary>clang_ModuleMapDescriptor_setUmbrellaHeader</primary><secondary>BuildSystem.cpp</secondary></indexterm>
<indexterm><primary>BuildSystem.cpp</primary><secondary>clang_ModuleMapDescriptor_setUmbrellaHeader</secondary></indexterm>
<para><computeroutput>enum CXErrorCode clang_ModuleMapDescriptor_setUmbrellaHeader (CXModuleMapDescriptor MMD, const char * name)</computeroutput></para><para>
Definition at line <link linkend="__build_system_8cpp_source_1l00101">101</link> of file <link linkend="__build_system_8cpp_source">BuildSystem.cpp</link>.</para>
<programlisting>00117 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00118 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!MMD&#32;||&#32;!name)
00119 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;CXError_InvalidArguments;
00120 
00121 &#32;&#32;MMD-&gt;UmbrellaHeader&#32;=&#32;name;
00122 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;CXError_Success;
00123 }
</programlisting>    </section><anchor xml:id="__build_system_8cpp_1a395f0b51baf7f991e799bcafc8385704"/>    <section>
    <title>clang_ModuleMapDescriptor_writeToBuffer()</title>
<indexterm><primary>clang_ModuleMapDescriptor_writeToBuffer</primary><secondary>BuildSystem.cpp</secondary></indexterm>
<indexterm><primary>BuildSystem.cpp</primary><secondary>clang_ModuleMapDescriptor_writeToBuffer</secondary></indexterm>
<para><computeroutput>enum CXErrorCode clang_ModuleMapDescriptor_writeToBuffer (CXModuleMapDescriptor MMD, unsigned , char ** out_buffer_ptr, unsigned * out_buffer_size)</computeroutput></para><para>
Definition at line <link linkend="__build_system_8cpp_source_1l00101">101</link> of file <link linkend="__build_system_8cpp_source">BuildSystem.cpp</link>.</para>
<programlisting>00128 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00129 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!MMD&#32;||&#32;!out_buffer_ptr&#32;||&#32;!out_buffer_size)
00130 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;CXError_InvalidArguments;
00131 
00132 &#32;&#32;llvm::SmallString&lt;256&gt;&#32;Buf;
00133 &#32;&#32;llvm::raw_svector_ostream&#32;OS(Buf);
00134 &#32;&#32;OS&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;framework&#32;module&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;MMD-&gt;ModuleName&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;{\n&quot;</emphasis>;
00135 &#32;&#32;OS&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;&#32;umbrella&#32;header&#32;\&quot;&quot;</emphasis>;
00136 &#32;&#32;OS.write_escaped(MMD-&gt;UmbrellaHeader)&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;\&quot;\n&quot;</emphasis>;
00137 &#32;&#32;OS&#32;&lt;&lt;&#32;<emphasis role="charliteral">&apos;\n&apos;</emphasis>;
00138 &#32;&#32;OS&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;&#32;export&#32;*\n&quot;</emphasis>;
00139 &#32;&#32;OS&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;&#32;module&#32;*&#32;{&#32;export&#32;*&#32;}\n&quot;</emphasis>;
00140 &#32;&#32;OS&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;}\n&quot;</emphasis>;
00141 
00142 &#32;&#32;StringRef&#32;Data&#32;=&#32;OS.str();
00143 &#32;&#32;*out_buffer_ptr&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">char</emphasis>*<emphasis role="keyword">&gt;</emphasis>(llvm::safe_malloc(Data.size()));
00144 &#32;&#32;*out_buffer_size&#32;=&#32;Data.size();
00145 &#32;&#32;memcpy(*out_buffer_ptr,&#32;Data.data(),&#32;Data.size());
00146 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;CXError_Success;
00147 }
</programlisting>    </section><anchor xml:id="__build_system_8cpp_1a49a0ea9492dfadb2118b6da00fa4a912"/>    <section>
    <title>clang_VirtualFileOverlay_addFileMapping()</title>
<indexterm><primary>clang_VirtualFileOverlay_addFileMapping</primary><secondary>BuildSystem.cpp</secondary></indexterm>
<indexterm><primary>BuildSystem.cpp</primary><secondary>clang_VirtualFileOverlay_addFileMapping</secondary></indexterm>
<para><computeroutput>enum CXErrorCode clang_VirtualFileOverlay_addFileMapping (CXVirtualFileOverlay VFO, const char * virtualPath, const char * realPath)</computeroutput></para><para>
Definition at line <link linkend="__build_system_8cpp_source_1l00030">30</link> of file <link linkend="__build_system_8cpp_source">BuildSystem.cpp</link>.</para>
<programlisting>00040 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00041 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!VFO&#32;||&#32;!virtualPath&#32;||&#32;!realPath)
00042 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;CXError_InvalidArguments;
00043 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!path::is_absolute(virtualPath))
00044 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;CXError_InvalidArguments;
00045 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!path::is_absolute(realPath))
00046 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;CXError_InvalidArguments;
00047 
00048 &#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(path::const_iterator
00049 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;PI&#32;=&#32;path::begin(virtualPath),
00050 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;PE&#32;=&#32;path::end(virtualPath);&#32;PI&#32;!=&#32;PE;&#32;++PI)&#32;{
00051 &#32;&#32;&#32;&#32;StringRef&#32;Comp&#32;=&#32;*PI;
00052 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(Comp&#32;==&#32;<emphasis role="stringliteral">&quot;.&quot;</emphasis>&#32;||&#32;Comp&#32;==&#32;<emphasis role="stringliteral">&quot;..&quot;</emphasis>)
00053 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;CXError_InvalidArguments;
00054 &#32;&#32;}
00055 
00056 &#32;&#32;unwrap(VFO)-&gt;addFileMapping(virtualPath,&#32;realPath);
00057 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;CXError_Success;
00058 }
</programlisting>    </section><anchor xml:id="__build_system_8cpp_1af48a174ecb047f9efaad91f67436bff3"/>    <section>
    <title>clang_VirtualFileOverlay_dispose()</title>
<indexterm><primary>clang_VirtualFileOverlay_dispose</primary><secondary>BuildSystem.cpp</secondary></indexterm>
<indexterm><primary>BuildSystem.cpp</primary><secondary>clang_VirtualFileOverlay_dispose</secondary></indexterm>
<para><computeroutput>void clang_VirtualFileOverlay_dispose (CXVirtualFileOverlay VFO)</computeroutput></para><para>
Definition at line <link linkend="__build_system_8cpp_source_1l00091">91</link> of file <link linkend="__build_system_8cpp_source">BuildSystem.cpp</link>.</para>
<programlisting>00091 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00092 &#32;&#32;<emphasis role="keyword">delete</emphasis>&#32;unwrap(VFO);
00093 }
</programlisting>    </section><anchor xml:id="__build_system_8cpp_1a4b36561bb4de24a902dd5c3d517320eb"/>    <section>
    <title>clang_VirtualFileOverlay_setCaseSensitivity()</title>
<indexterm><primary>clang_VirtualFileOverlay_setCaseSensitivity</primary><secondary>BuildSystem.cpp</secondary></indexterm>
<indexterm><primary>BuildSystem.cpp</primary><secondary>clang_VirtualFileOverlay_setCaseSensitivity</secondary></indexterm>
<para><computeroutput>enum CXErrorCode clang_VirtualFileOverlay_setCaseSensitivity (CXVirtualFileOverlay VFO, int caseSensitive)</computeroutput></para><para>
Definition at line <link linkend="__build_system_8cpp_source_1l00030">30</link> of file <link linkend="__build_system_8cpp_source">BuildSystem.cpp</link>.</para>
<programlisting>00062 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00063 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!VFO)
00064 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;CXError_InvalidArguments;
00065 &#32;&#32;unwrap(VFO)-&gt;setCaseSensitivity(caseSensitive);
00066 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;CXError_Success;
00067 }
</programlisting>    </section><anchor xml:id="__build_system_8cpp_1abbd01fb19d8a0374311f509af25da230"/>    <section>
    <title>clang_VirtualFileOverlay_writeToBuffer()</title>
<indexterm><primary>clang_VirtualFileOverlay_writeToBuffer</primary><secondary>BuildSystem.cpp</secondary></indexterm>
<indexterm><primary>BuildSystem.cpp</primary><secondary>clang_VirtualFileOverlay_writeToBuffer</secondary></indexterm>
<para><computeroutput>enum CXErrorCode clang_VirtualFileOverlay_writeToBuffer (CXVirtualFileOverlay VFO, unsigned , char ** out_buffer_ptr, unsigned * out_buffer_size)</computeroutput></para><para>
Definition at line <link linkend="__build_system_8cpp_source_1l00030">30</link> of file <link linkend="__build_system_8cpp_source">BuildSystem.cpp</link>.</para>
<programlisting>00072 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00073 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!VFO&#32;||&#32;!out_buffer_ptr&#32;||&#32;!out_buffer_size)
00074 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;CXError_InvalidArguments;
00075 
00076 &#32;&#32;llvm::SmallString&lt;256&gt;&#32;Buf;
00077 &#32;&#32;llvm::raw_svector_ostream&#32;OS(Buf);
00078 &#32;&#32;unwrap(VFO)-&gt;write(OS);
00079 
00080 &#32;&#32;StringRef&#32;Data&#32;=&#32;OS.str();
00081 &#32;&#32;*out_buffer_ptr&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">char</emphasis>*<emphasis role="keyword">&gt;</emphasis>(llvm::safe_malloc(Data.size()));
00082 &#32;&#32;*out_buffer_size&#32;=&#32;Data.size();
00083 &#32;&#32;memcpy(*out_buffer_ptr,&#32;Data.data(),&#32;Data.size());
00084 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;CXError_Success;
00085 }
</programlisting>    </section><anchor xml:id="__build_system_8cpp_1ae7cbdcc1b3ff11a85f2ec97abda4094b"/>    <section>
    <title>DEFINE_SIMPLE_CONVERSION_FUNCTIONS()</title>
<indexterm><primary>DEFINE_SIMPLE_CONVERSION_FUNCTIONS</primary><secondary>BuildSystem.cpp</secondary></indexterm>
<indexterm><primary>BuildSystem.cpp</primary><secondary>DEFINE_SIMPLE_CONVERSION_FUNCTIONS</secondary></indexterm>
<para><computeroutput>DEFINE_SIMPLE_CONVERSION_FUNCTIONS (llvm::vfs::YAMLVFSWriter , CXVirtualFileOverlay )</computeroutput></para><para>
Definition at line <link linkend="__build_system_8cpp_source_1l00030">30</link> of file <link linkend="__build_system_8cpp_source">BuildSystem.cpp</link>.</para>
<programlisting>00033 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00034 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;wrap(<emphasis role="keyword">new</emphasis>&#32;llvm::vfs::YAMLVFSWriter());
00035 }
</programlisting></section>
</section>
</section>
