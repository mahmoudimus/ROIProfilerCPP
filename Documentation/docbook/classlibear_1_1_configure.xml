<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_classlibear_1_1_configure" xml:lang="en-US">
<title>libear.Configure Class Reference</title>
<indexterm><primary>libear.Configure</primary></indexterm>
<para>Inheritance diagram for libear.Configure:    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="classlibear_1_1_configure.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
<simplesect>
    <title>Public Member Functions    </title>
        <itemizedlist>
            <listitem><para>def <link linkend="_classlibear_1_1_configure_1a3f4601b0f8e9365aca3e7acbe7246ab5">__init__</link> (self, toolset)</para>
</listitem>
            <listitem><para>def <link linkend="_classlibear_1_1_configure_1aeca7da633ffbc41d6d6324fb80877204">check_function_exists</link> (self, function, name)</para>
</listitem>
            <listitem><para>def <link linkend="_classlibear_1_1_configure_1affd581061f9fb9bcbf0de013309816b6">check_symbol_exists</link> (self, symbol, include, name)</para>
</listitem>
            <listitem><para>def <link linkend="_classlibear_1_1_configure_1a6414da9ba96a9c31e748f098f9d7d268">write_by_template</link> (self, template, output)</para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Public Attributes    </title>
        <itemizedlist>
            <listitem><para><link linkend="_classlibear_1_1_configure_1a4a8516e9b110b44b5b364605b2aca81f">ctx</link></para>
</listitem>
            <listitem><para><link linkend="_classlibear_1_1_configure_1a178d4e7ef60c070bb059ff6a323c6346">results</link></para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Detailed Description</title>
<para>
Definition at line <link linkend="_lib_2libear_2____init_____8py_source_1l00162">162</link> of file <link linkend="_lib_2libear_2____init_____8py_source">__init__.py</link>.</para>
</section>
<section>
<title>Constructor &amp; Destructor Documentation</title>
<anchor xml:id="_classlibear_1_1_configure_1a3f4601b0f8e9365aca3e7acbe7246ab5"/>    <section>
    <title>__init__()</title>
<indexterm><primary>__init__</primary><secondary>libear.Configure</secondary></indexterm>
<indexterm><primary>libear.Configure</primary><secondary>__init__</secondary></indexterm>
<para><computeroutput>def libear.Configure.__init__ ( self,  toolset)</computeroutput></para><para>
Definition at line <link linkend="_lib_2libear_2____init_____8py_source_1l00163">163</link> of file <link linkend="_lib_2libear_2____init_____8py_source">__init__.py</link>.</para>
<programlisting>00163 &#32;&#32;&#32;&#32;<emphasis role="keyword">def&#32;</emphasis>__init__(self,&#32;toolset):
00164 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;self.ctx&#32;=&#32;toolset
00165 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;self.results&#32;=&#32;{<emphasis role="stringliteral">&apos;APPLE&apos;</emphasis>:&#32;sys.platform&#32;==&#32;<emphasis role="stringliteral">&apos;darwin&apos;</emphasis>}
00166 
</programlisting></section>
</section>
<section>
<title>Member Function Documentation</title>
<anchor xml:id="_classlibear_1_1_configure_1aeca7da633ffbc41d6d6324fb80877204"/>    <section>
    <title>check_function_exists()</title>
<indexterm><primary>check_function_exists</primary><secondary>libear.Configure</secondary></indexterm>
<indexterm><primary>libear.Configure</primary><secondary>check_function_exists</secondary></indexterm>
<para><computeroutput>def libear.Configure.check_function_exists ( self,  function,  name)</computeroutput></para><para>
Definition at line <link linkend="_lib_2libear_2____init_____8py_source_1l00180">180</link> of file <link linkend="_lib_2libear_2____init_____8py_source">__init__.py</link>.</para>
<programlisting>00180 &#32;&#32;&#32;&#32;<emphasis role="keyword">def&#32;</emphasis>check_function_exists(self,&#32;function,&#32;name):
00181 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;template&#32;=&#32;<emphasis role="stringliteral">&quot;int&#32;FUNCTION();&#32;int&#32;main()&#32;{&#32;return&#32;FUNCTION();&#32;}&quot;</emphasis>
00182 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;source&#32;=&#32;template.replace(<emphasis role="stringliteral">&quot;FUNCTION&quot;</emphasis>,&#32;function)
00183 
00184 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;logging.debug(<emphasis role="stringliteral">&apos;Checking&#32;function&#32;%s&apos;</emphasis>,&#32;function)
00185 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;found&#32;=&#32;self._try_to_compile_and_link(source)
00186 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;logging.debug(<emphasis role="stringliteral">&apos;Checking&#32;function&#32;%s&#32;--&#32;%s&apos;</emphasis>,&#32;function,
00187 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&apos;found&apos;</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;found&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="stringliteral">&apos;not&#32;found&apos;</emphasis>)
00188 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;self.results.update({name:&#32;found})
00189 
</programlisting><para>
References <link linkend="_lib_2libear_2____init_____8py_source_1l00167">libear.Configure._try_to_compile_and_link()</link>, and <link linkend="_lib_2libear_2____init_____8py_source_1l00165">libear.Configure.results</link>.</para>
    </section><anchor xml:id="_classlibear_1_1_configure_1affd581061f9fb9bcbf0de013309816b6"/>    <section>
    <title>check_symbol_exists()</title>
<indexterm><primary>check_symbol_exists</primary><secondary>libear.Configure</secondary></indexterm>
<indexterm><primary>libear.Configure</primary><secondary>check_symbol_exists</secondary></indexterm>
<para><computeroutput>def libear.Configure.check_symbol_exists ( self,  symbol,  include,  name)</computeroutput></para><para>
Definition at line <link linkend="_lib_2libear_2____init_____8py_source_1l00190">190</link> of file <link linkend="_lib_2libear_2____init_____8py_source">__init__.py</link>.</para>
<programlisting>00190 &#32;&#32;&#32;&#32;<emphasis role="keyword">def&#32;</emphasis>check_symbol_exists(self,&#32;symbol,&#32;include,&#32;name):
00191 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;template&#32;=&#32;<emphasis role="stringliteral">&quot;&quot;&quot;#include&#32;&lt;INCLUDE&gt;</emphasis>
00192 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;int&#32;main()&#32;{&#32;return&#32;((int*)(&amp;SYMBOL))[0];&#32;}&quot;&quot;&quot;</emphasis>
00193 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;source&#32;=&#32;template.replace(<emphasis role="stringliteral">&apos;INCLUDE&apos;</emphasis>,&#32;include).replace(<emphasis role="stringliteral">&quot;SYMBOL&quot;</emphasis>,&#32;symbol)
00194 
00195 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;logging.debug(<emphasis role="stringliteral">&apos;Checking&#32;symbol&#32;%s&apos;</emphasis>,&#32;symbol)
00196 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;found&#32;=&#32;self._try_to_compile_and_link(source)
00197 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;logging.debug(<emphasis role="stringliteral">&apos;Checking&#32;symbol&#32;%s&#32;--&#32;%s&apos;</emphasis>,&#32;symbol,
00198 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&apos;found&apos;</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;found&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="stringliteral">&apos;not&#32;found&apos;</emphasis>)
00199 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;self.results.update({name:&#32;found})
00200 
</programlisting><para>
References <link linkend="_lib_2libear_2____init_____8py_source_1l00167">libear.Configure._try_to_compile_and_link()</link>, and <link linkend="_lib_2libear_2____init_____8py_source_1l00165">libear.Configure.results</link>.</para>
    </section><anchor xml:id="_classlibear_1_1_configure_1a6414da9ba96a9c31e748f098f9d7d268"/>    <section>
    <title>write_by_template()</title>
<indexterm><primary>write_by_template</primary><secondary>libear.Configure</secondary></indexterm>
<indexterm><primary>libear.Configure</primary><secondary>write_by_template</secondary></indexterm>
<para><computeroutput>def libear.Configure.write_by_template ( self,  template,  output)</computeroutput></para><para>
Definition at line <link linkend="_lib_2libear_2____init_____8py_source_1l00201">201</link> of file <link linkend="_lib_2libear_2____init_____8py_source">__init__.py</link>.</para>
<programlisting>00201 &#32;&#32;&#32;&#32;<emphasis role="keyword">def&#32;</emphasis>write_by_template(self,&#32;template,&#32;output):
00202 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">def&#32;</emphasis>transform(line,&#32;definitions):
00203 
00204 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;pattern&#32;=&#32;re.compile(<emphasis role="stringliteral">r&apos;^#cmakedefine\s+(\S+)&apos;</emphasis>)
00205 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m&#32;=&#32;pattern.match(line)
00206 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;m:
00207 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;key&#32;=&#32;m.group(1)
00208 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;key&#32;<emphasis role="keywordflow">not</emphasis>&#32;<emphasis role="keywordflow">in</emphasis>&#32;definitions&#32;<emphasis role="keywordflow">or</emphasis>&#32;<emphasis role="keywordflow">not</emphasis>&#32;definitions[key]:
00209 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="stringliteral">&apos;/*&#32;#undef&#32;{0}&#32;*/{1}&apos;</emphasis>.format(key,&#32;os.linesep)
00210 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>:
00211 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="stringliteral">&apos;#define&#32;{0}{1}&apos;</emphasis>.format(key,&#32;os.linesep)
00212 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;line
00213 
00214 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">with</emphasis>&#32;<link linkend="_namespacestartfile_1aa582f75134b683dc321c07d01ff8e501">open</link>(template,&#32;<emphasis role="stringliteral">&apos;r&apos;</emphasis>)&#32;<emphasis role="keyword">as</emphasis>&#32;src_handle:
00215 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;logging.debug(<emphasis role="stringliteral">&apos;Writing&#32;config&#32;to&#32;%s&apos;</emphasis>,&#32;output)
00216 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">with</emphasis>&#32;<link linkend="_namespacestartfile_1aa582f75134b683dc321c07d01ff8e501">open</link>(output,&#32;<emphasis role="stringliteral">&apos;w&apos;</emphasis>)&#32;<emphasis role="keyword">as</emphasis>&#32;dst_handle:
00217 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;line&#32;<emphasis role="keywordflow">in</emphasis>&#32;src_handle:
00218 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;dst_handle.write(transform(line,&#32;self.results))
00219 
00220 
</programlisting><para>
References <link linkend="_startfile_8py_source_1l00206">startfile.open()</link>, and <link linkend="_lib_2libear_2____init_____8py_source_1l00165">libear.Configure.results</link>.</para>
</section>
</section>
<section>
<title>Member Data Documentation</title>
<anchor xml:id="_classlibear_1_1_configure_1a4a8516e9b110b44b5b364605b2aca81f"/>    <section>
    <title>ctx</title>
<indexterm><primary>ctx</primary><secondary>libear.Configure</secondary></indexterm>
<indexterm><primary>libear.Configure</primary><secondary>ctx</secondary></indexterm>
<para><computeroutput>libear.Configure.ctx</computeroutput></para><para>
Definition at line <link linkend="_lib_2libear_2____init_____8py_source_1l00164">164</link> of file <link linkend="_lib_2libear_2____init_____8py_source">__init__.py</link>.</para>
<para>
Referenced by <link linkend="_lib_2libear_2____init_____8py_source_1l00242">libear.SharedLibrary.build_release()</link>.</para>
    </section><anchor xml:id="_classlibear_1_1_configure_1a178d4e7ef60c070bb059ff6a323c6346"/>    <section>
    <title>results</title>
<indexterm><primary>results</primary><secondary>libear.Configure</secondary></indexterm>
<indexterm><primary>libear.Configure</primary><secondary>results</secondary></indexterm>
<para><computeroutput>libear.Configure.results</computeroutput></para><para>
Definition at line <link linkend="_lib_2libear_2____init_____8py_source_1l00165">165</link> of file <link linkend="_lib_2libear_2____init_____8py_source">__init__.py</link>.</para>
<para>
Referenced by <link linkend="_lib_2libear_2____init_____8py_source_1l00180">libear.Configure.check_function_exists()</link>, <link linkend="_lib_2libear_2____init_____8py_source_1l00190">libear.Configure.check_symbol_exists()</link>, and <link linkend="_lib_2libear_2____init_____8py_source_1l00201">libear.Configure.write_by_template()</link>.</para>
</section>
<para>
The documentation for this class was generated from the following file:</para>
/Users/maximilian/clang-llvm/clang/tools/scan-build-py/lib/libear/<link linkend="_lib_2libear_2____init_____8py">__init__.py</link></section>
</section>
