<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="__clang_offload_bundler_8cpp" xml:lang="en-US">
<title>/Users/maximilian/clang-llvm/clang/tools/clang-offload-bundler/ClangOffloadBundler.cpp File Reference</title>
<indexterm><primary>/Users/maximilian/clang-llvm/clang/tools/clang-offload-bundler/ClangOffloadBundler.cpp</primary></indexterm>
<programlisting>#include &quot;clang/Basic/Version.h&quot;
#include &quot;llvm/ADT/ArrayRef.h&quot;
#include &quot;llvm/ADT/SmallString.h&quot;
#include &quot;llvm/ADT/SmallVector.h&quot;
#include &quot;llvm/ADT/StringMap.h&quot;
#include &quot;llvm/ADT/StringRef.h&quot;
#include &quot;llvm/ADT/StringSwitch.h&quot;
#include &quot;llvm/ADT/Triple.h&quot;
#include &quot;llvm/Object/Archive.h&quot;
#include &quot;llvm/Object/ArchiveWriter.h&quot;
#include &quot;llvm/Object/Binary.h&quot;
#include &quot;llvm/Object/ObjectFile.h&quot;
#include &quot;llvm/Support/Casting.h&quot;
#include &quot;llvm/Support/CommandLine.h&quot;
#include &quot;llvm/Support/Debug.h&quot;
#include &quot;llvm/Support/Errc.h&quot;
#include &quot;llvm/Support/Error.h&quot;
#include &quot;llvm/Support/ErrorOr.h&quot;
#include &quot;llvm/Support/FileSystem.h&quot;
#include &quot;llvm/Support/Host.h&quot;
#include &quot;llvm/Support/MemoryBuffer.h&quot;
#include &quot;llvm/Support/Path.h&quot;
#include &quot;llvm/Support/Program.h&quot;
#include &quot;llvm/Support/Signals.h&quot;
#include &quot;llvm/Support/StringSaver.h&quot;
#include &quot;llvm/Support/WithColor.h&quot;
#include &quot;llvm/Support/raw_ostream.h&quot;
#include &lt;algorithm&gt;
#include &lt;cassert&gt;
#include &lt;cstddef&gt;
#include &lt;cstdint&gt;
#include &lt;forward_list&gt;
#include &lt;memory&gt;
#include &lt;set&gt;
#include &lt;string&gt;
#include &lt;system_error&gt;
#include &lt;utility&gt;
</programlisting><simplesect>
    <title>Classes    </title>
        <itemizedlist>
            <listitem><para>struct <link linkend="_struct_offload_target_info">OffloadTargetInfo</link></para>
</listitem>
            <listitem><para>class <link linkend="_class_file_handler">FileHandler</link></para>

<para>Generic file handler interface. </para>
</listitem>
            <listitem><para>struct <link linkend="_struct_file_handler_1_1_bundle_info">FileHandler::BundleInfo</link></para>
</listitem>
            <listitem><para>class <link linkend="_class_binary_file_handler">BinaryFileHandler</link></para>
</listitem>
            <listitem><para>class <link linkend="_class_object_file_handler">ObjectFileHandler</link></para>
</listitem>
            <listitem><para>class <link linkend="_class_text_file_handler">TextFileHandler</link></para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Macros    </title>
        <itemizedlist>
            <listitem><para>#define <link linkend="__clang_offload_bundler_8cpp_1a8261baf2ddbb8a17f287149d5415eebf">OFFLOAD_BUNDLER_MAGIC_STR</link>   &quot;__CLANG_OFFLOAD_BUNDLE__&quot;</para>

<para>Magic string that marks the existence of offloading data. </para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Functions    </title>
        <itemizedlist>
            <listitem><para>bool <link linkend="__clang_offload_bundler_8cpp_1a2e0e96a489012901de23db69a0d042d8">isCodeObjectCompatible</link> (<link linkend="_struct_offload_target_info">OffloadTargetInfo</link> &amp;CodeObjectInfo, <link linkend="_struct_offload_target_info">OffloadTargetInfo</link> &amp;TargetInfo)</para>

<para>Checks if a code object <computeroutput>CodeObjectInfo</computeroutput> is compatible with a given target <computeroutput>TargetInfo</computeroutput>. <link linkend="_">https://clang.llvm.org/docs/ClangOffloadBundler.html#bundle-entry-id.</link></para>
</listitem>
            <listitem><para>int <link linkend="__clang_offload_bundler_8cpp_1a217dbf8b442f20279ea00b898af96f52">main</link> (int argc, const char **argv)</para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Detailed Description</title>

<para>This file implements a clang-offload-bundler that bundles different files that relate with the same source code but different targets into a single one. Also the implements the opposite functionality, i.e. unbundle files previous created by this tool. </para>
<para>
Definition in file <link linkend="__clang_offload_bundler_8cpp_source">ClangOffloadBundler.cpp</link>.</para>
</section>
<section>
<title>Macro Definition Documentation</title>
<anchor xml:id="__clang_offload_bundler_8cpp_1a8261baf2ddbb8a17f287149d5415eebf"/>    <section>
    <title>OFFLOAD_BUNDLER_MAGIC_STR</title>
<indexterm><primary>OFFLOAD_BUNDLER_MAGIC_STR</primary><secondary>ClangOffloadBundler.cpp</secondary></indexterm>
<indexterm><primary>ClangOffloadBundler.cpp</primary><secondary>OFFLOAD_BUNDLER_MAGIC_STR</secondary></indexterm>
<para><computeroutput>#define OFFLOAD_BUNDLER_MAGIC_STR   &quot;__CLANG_OFFLOAD_BUNDLE__&quot;</computeroutput></para><para>

<para>Magic string that marks the existence of offloading data. </para>
</para>
<para>
Definition at line <link linkend="__clang_offload_bundler_8cpp_source_1l00120">120</link> of file <link linkend="__clang_offload_bundler_8cpp_source">ClangOffloadBundler.cpp</link>.</para>
</section>
</section>
<section>
<title>Function Documentation</title>
<anchor xml:id="__clang_offload_bundler_8cpp_1a2e0e96a489012901de23db69a0d042d8"/>    <section>
    <title>isCodeObjectCompatible()</title>
<indexterm><primary>isCodeObjectCompatible</primary><secondary>ClangOffloadBundler.cpp</secondary></indexterm>
<indexterm><primary>ClangOffloadBundler.cpp</primary><secondary>isCodeObjectCompatible</secondary></indexterm>
<para><computeroutput>bool isCodeObjectCompatible (<link linkend="_struct_offload_target_info">OffloadTargetInfo</link> &amp; CodeObjectInfo, <link linkend="_struct_offload_target_info">OffloadTargetInfo</link> &amp; TargetInfo)</computeroutput></para><para>

<para>Checks if a code object <computeroutput>CodeObjectInfo</computeroutput> is compatible with a given target <computeroutput>TargetInfo</computeroutput>. <link linkend="_">https://clang.llvm.org/docs/ClangOffloadBundler.html#bundle-entry-id.</link></para>
</para>
<para>
Definition at line <link linkend="__clang_offload_bundler_8cpp_source_1l01061">1061</link> of file <link linkend="__clang_offload_bundler_8cpp_source">ClangOffloadBundler.cpp</link>.</para>
<programlisting>01062 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
01063 
01064 &#32;&#32;<emphasis role="comment">//&#32;Compatible&#32;in&#32;case&#32;of&#32;exact&#32;match.</emphasis>
01065 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(CodeObjectInfo&#32;==&#32;TargetInfo)&#32;{
01066 &#32;&#32;&#32;&#32;DEBUG_WITH_TYPE(
01067 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;CodeObjectCompatibility&quot;</emphasis>,
01068 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;dbgs()&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;Compatible:&#32;Exact&#32;match:&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;CodeObjectInfo.<link linkend="_struct_offload_target_info_1a3fc2f34e4f9bdb04326326811f5f3ad4">str</link>()&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;\n&quot;</emphasis>);
01069 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
01070 &#32;&#32;}
01071 
01072 &#32;&#32;<emphasis role="comment">//&#32;Incompatible&#32;if&#32;Kinds&#32;or&#32;Triples&#32;mismatch.</emphasis>
01073 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(CodeObjectInfo.<link linkend="_struct_offload_target_info_1a3500cd32ca481f827bc251452563624b">OffloadKind</link>&#32;!=&#32;TargetInfo.<link linkend="_struct_offload_target_info_1a3500cd32ca481f827bc251452563624b">OffloadKind</link>&#32;||
01074 &#32;&#32;&#32;&#32;&#32;&#32;!CodeObjectInfo.<link linkend="_struct_offload_target_info_1abca120d4035beee4a3b0604008683fc4">Triple</link>.isCompatibleWith(TargetInfo.<link linkend="_struct_offload_target_info_1abca120d4035beee4a3b0604008683fc4">Triple</link>))&#32;{
01075 &#32;&#32;&#32;&#32;DEBUG_WITH_TYPE(
01076 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;CodeObjectCompatibility&quot;</emphasis>,
01077 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;dbgs()&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;Incompatible:&#32;Kind/Triple&#32;mismatch&#32;\t[CodeObject:&#32;&quot;</emphasis>
01078 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;CodeObjectInfo.<link linkend="_struct_offload_target_info_1a3fc2f34e4f9bdb04326326811f5f3ad4">str</link>()&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;]\t:\t[Target:&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;TargetInfo.<link linkend="_struct_offload_target_info_1a3fc2f34e4f9bdb04326326811f5f3ad4">str</link>()
01079 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;]\n&quot;</emphasis>);
01080 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
01081 &#32;&#32;}
01082 
01083 &#32;&#32;<emphasis role="comment">//&#32;Incompatible&#32;if&#32;GPUArch&#32;mismatch.</emphasis>
01084 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(CodeObjectInfo.<link linkend="_struct_offload_target_info_1a14d040744b4d59e6780bf54b26685739">GPUArch</link>&#32;!=&#32;TargetInfo.<link linkend="_struct_offload_target_info_1a14d040744b4d59e6780bf54b26685739">GPUArch</link>)&#32;{
01085 &#32;&#32;&#32;&#32;DEBUG_WITH_TYPE(<emphasis role="stringliteral">&quot;CodeObjectCompatibility&quot;</emphasis>,
01086 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;dbgs()&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;Incompatible:&#32;GPU&#32;Arch&#32;mismatch&#32;\t[CodeObject:&#32;&quot;</emphasis>
01087 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;CodeObjectInfo.<link linkend="_struct_offload_target_info_1a3fc2f34e4f9bdb04326326811f5f3ad4">str</link>()
01088 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;]\t:\t[Target:&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;TargetInfo.<link linkend="_struct_offload_target_info_1a3fc2f34e4f9bdb04326326811f5f3ad4">str</link>()&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;]\n&quot;</emphasis>);
01089 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
01090 &#32;&#32;}
01091 
01092 &#32;&#32;DEBUG_WITH_TYPE(
01093 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;CodeObjectCompatibility&quot;</emphasis>,
01094 &#32;&#32;&#32;&#32;&#32;&#32;dbgs()&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;Compatible:&#32;Code&#32;Objects&#32;are&#32;compatible&#32;\t[CodeObject:&#32;&quot;</emphasis>
01095 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;CodeObjectInfo.<link linkend="_struct_offload_target_info_1a3fc2f34e4f9bdb04326326811f5f3ad4">str</link>()&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;]\t:\t[Target:&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;TargetInfo.<link linkend="_struct_offload_target_info_1a3fc2f34e4f9bdb04326326811f5f3ad4">str</link>()
01096 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;]\n&quot;</emphasis>);
01097 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
01098 }
</programlisting><para>
References <link linkend="__clang_offload_bundler_8cpp_source_1l00142">OffloadTargetInfo::GPUArch</link>, <link linkend="__clang_offload_bundler_8cpp_source_1l00140">OffloadTargetInfo::OffloadKind</link>, <link linkend="__clang_offload_bundler_8cpp_source_1l00170">OffloadTargetInfo::str()</link>, and <link linkend="__clang_offload_bundler_8cpp_source_1l00141">OffloadTargetInfo::Triple</link>.</para>
    </section><anchor xml:id="__clang_offload_bundler_8cpp_1a217dbf8b442f20279ea00b898af96f52"/>    <section>
    <title>main()</title>
<indexterm><primary>main</primary><secondary>ClangOffloadBundler.cpp</secondary></indexterm>
<indexterm><primary>ClangOffloadBundler.cpp</primary><secondary>main</secondary></indexterm>
<para><computeroutput>int main (int argc, const char ** argv)</computeroutput></para><para>
Definition at line <link linkend="__clang_offload_bundler_8cpp_source_1l01292">1292</link> of file <link linkend="__clang_offload_bundler_8cpp_source">ClangOffloadBundler.cpp</link>.</para>
<programlisting>01292 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
01293 &#32;&#32;sys::PrintStackTraceOnErrorSignal(argv[0]);
01294 
01295 &#32;&#32;cl::HideUnrelatedOptions(ClangOffloadBundlerCategory);
01296 &#32;&#32;cl::SetVersionPrinter(PrintVersion);
01297 &#32;&#32;cl::ParseCommandLineOptions(
01298 &#32;&#32;&#32;&#32;&#32;&#32;argc,&#32;argv,
01299 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;A&#32;tool&#32;to&#32;bundle&#32;several&#32;input&#32;files&#32;of&#32;the&#32;specified&#32;type&#32;&lt;type&gt;&#32;\n&quot;</emphasis>
01300 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;referring&#32;to&#32;the&#32;same&#32;source&#32;file&#32;but&#32;different&#32;targets&#32;into&#32;a&#32;single&#32;\n&quot;</emphasis>
01301 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;one.&#32;The&#32;resulting&#32;file&#32;can&#32;also&#32;be&#32;unbundled&#32;into&#32;different&#32;files&#32;by&#32;\n&quot;</emphasis>
01302 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;this&#32;tool&#32;if&#32;-unbundle&#32;is&#32;provided.\n&quot;</emphasis>);
01303 
01304 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(Help)&#32;{
01305 &#32;&#32;&#32;&#32;cl::PrintHelpMessage();
01306 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
01307 &#32;&#32;}
01308 
01309 &#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;reportError&#32;=&#32;[argv](Error&#32;E)&#32;{
01310 &#32;&#32;&#32;&#32;logAllUnhandledErrors(std::move(E),&#32;WithColor::error(errs(),&#32;argv[0]));
01311 &#32;&#32;&#32;&#32;exit(1);
01312 &#32;&#32;};
01313 
01314 &#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;doWork&#32;=&#32;[&amp;](std::function&lt;llvm::Error()&gt;&#32;Work)&#32;{
01315 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Save&#32;the&#32;current&#32;executable&#32;directory&#32;as&#32;it&#32;will&#32;be&#32;useful&#32;to&#32;find&#32;other</emphasis>
01316 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;tools.</emphasis>
01317 &#32;&#32;&#32;&#32;BundlerExecutable&#32;=&#32;argv[0];
01318 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!llvm::sys::fs::exists(BundlerExecutable))
01319 &#32;&#32;&#32;&#32;&#32;&#32;BundlerExecutable&#32;=
01320 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sys::fs::getMainExecutable(argv[0],&#32;&amp;BundlerExecutable);
01321 
01322 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(llvm::Error&#32;Err&#32;=&#32;Work())&#32;{
01323 &#32;&#32;&#32;&#32;&#32;&#32;reportError(std::move(Err));
01324 &#32;&#32;&#32;&#32;}
01325 &#32;&#32;};
01326 
01327 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(ListBundleIDs)&#32;{
01328 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(Unbundle)&#32;{
01329 &#32;&#32;&#32;&#32;&#32;&#32;reportError(
01330 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;createStringError(errc::invalid_argument,
01331 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;-unbundle&#32;and&#32;-list&#32;cannot&#32;be&#32;used&#32;together&quot;</emphasis>));
01332 &#32;&#32;&#32;&#32;}
01333 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(InputFileNames.size()&#32;!=&#32;1)&#32;{
01334 &#32;&#32;&#32;&#32;&#32;&#32;reportError(createStringError(errc::invalid_argument,
01335 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;only&#32;one&#32;input&#32;file&#32;supported&#32;for&#32;-list&quot;</emphasis>));
01336 &#32;&#32;&#32;&#32;}
01337 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(OutputFileNames.size())&#32;{
01338 &#32;&#32;&#32;&#32;&#32;&#32;reportError(createStringError(errc::invalid_argument,
01339 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;-outputs&#32;option&#32;is&#32;invalid&#32;for&#32;-list&quot;</emphasis>));
01340 &#32;&#32;&#32;&#32;}
01341 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(TargetNames.size())&#32;{
01342 &#32;&#32;&#32;&#32;&#32;&#32;reportError(createStringError(errc::invalid_argument,
01343 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;-targets&#32;option&#32;is&#32;invalid&#32;for&#32;-list&quot;</emphasis>));
01344 &#32;&#32;&#32;&#32;}
01345 
01346 &#32;&#32;&#32;&#32;doWork([]()&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;ListBundleIDsInFile(InputFileNames.front());&#32;});
01347 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
01348 &#32;&#32;}
01349 
01350 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(OutputFileNames.getNumOccurrences()&#32;==&#32;0)&#32;{
01351 &#32;&#32;&#32;&#32;reportError(createStringError(
01352 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;errc::invalid_argument,
01353 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;for&#32;the&#32;--outputs&#32;option:&#32;must&#32;be&#32;specified&#32;at&#32;least&#32;once!&quot;</emphasis>));
01354 &#32;&#32;}
01355 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(TargetNames.getNumOccurrences()&#32;==&#32;0)&#32;{
01356 &#32;&#32;&#32;&#32;reportError(createStringError(
01357 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;errc::invalid_argument,
01358 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;for&#32;the&#32;--targets&#32;option:&#32;must&#32;be&#32;specified&#32;at&#32;least&#32;once!&quot;</emphasis>));
01359 &#32;&#32;}
01360 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(Unbundle)&#32;{
01361 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(InputFileNames.size()&#32;!=&#32;1)&#32;{
01362 &#32;&#32;&#32;&#32;&#32;&#32;reportError(createStringError(
01363 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;errc::invalid_argument,
01364 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;only&#32;one&#32;input&#32;file&#32;supported&#32;in&#32;unbundling&#32;mode&quot;</emphasis>));
01365 &#32;&#32;&#32;&#32;}
01366 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(OutputFileNames.size()&#32;!=&#32;TargetNames.size())&#32;{
01367 &#32;&#32;&#32;&#32;&#32;&#32;reportError(createStringError(errc::invalid_argument,
01368 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;number&#32;of&#32;output&#32;files&#32;and&#32;targets&#32;should&#32;&quot;</emphasis>
01369 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;match&#32;in&#32;unbundling&#32;mode&quot;</emphasis>));
01370 &#32;&#32;&#32;&#32;}
01371 &#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
01372 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(FilesType&#32;==&#32;<emphasis role="stringliteral">&quot;a&quot;</emphasis>)&#32;{
01373 &#32;&#32;&#32;&#32;&#32;&#32;reportError(createStringError(errc::invalid_argument,
01374 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;Archive&#32;files&#32;are&#32;only&#32;supported&#32;&quot;</emphasis>
01375 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;for&#32;unbundling&quot;</emphasis>));
01376 &#32;&#32;&#32;&#32;}
01377 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(OutputFileNames.size()&#32;!=&#32;1)&#32;{
01378 &#32;&#32;&#32;&#32;&#32;&#32;reportError(createStringError(
01379 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;errc::invalid_argument,
01380 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;only&#32;one&#32;output&#32;file&#32;supported&#32;in&#32;bundling&#32;mode&quot;</emphasis>));
01381 &#32;&#32;&#32;&#32;}
01382 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(InputFileNames.size()&#32;!=&#32;TargetNames.size())&#32;{
01383 &#32;&#32;&#32;&#32;&#32;&#32;reportError(createStringError(
01384 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;errc::invalid_argument,
01385 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;number&#32;of&#32;input&#32;files&#32;and&#32;targets&#32;should&#32;match&#32;in&#32;bundling&#32;mode&quot;</emphasis>));
01386 &#32;&#32;&#32;&#32;}
01387 &#32;&#32;}
01388 
01389 &#32;&#32;<emphasis role="comment">//&#32;Verify&#32;that&#32;the&#32;offload&#32;kinds&#32;and&#32;triples&#32;are&#32;known.&#32;We&#32;also&#32;check&#32;that&#32;we</emphasis>
01390 &#32;&#32;<emphasis role="comment">//&#32;have&#32;exactly&#32;one&#32;host&#32;target.</emphasis>
01391 &#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;Index&#32;=&#32;0u;
01392 &#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;HostTargetNum&#32;=&#32;0u;
01393 &#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;HIPOnly&#32;=&#32;<emphasis role="keyword">true</emphasis>;
01394 &#32;&#32;llvm::DenseSet&lt;StringRef&gt;&#32;ParsedTargets;
01395 &#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(StringRef&#32;Target&#32;:&#32;TargetNames)&#32;{
01396 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(ParsedTargets.contains(Target))&#32;{
01397 &#32;&#32;&#32;&#32;&#32;&#32;reportError(createStringError(errc::invalid_argument,
01398 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;Duplicate&#32;targets&#32;are&#32;not&#32;allowed&quot;</emphasis>));
01399 &#32;&#32;&#32;&#32;}
01400 &#32;&#32;&#32;&#32;ParsedTargets.insert(Target);
01401 
01402 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;OffloadInfo&#32;=&#32;<link linkend="_struct_offload_target_info">OffloadTargetInfo</link>(Target);
01403 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;KindIsValid&#32;=&#32;OffloadInfo.isOffloadKindValid();
01404 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;TripleIsValid&#32;=&#32;OffloadInfo.isTripleValid();
01405 
01406 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!KindIsValid&#32;||&#32;!TripleIsValid)&#32;{
01407 &#32;&#32;&#32;&#32;&#32;&#32;SmallVector&lt;char,&#32;128u&gt;&#32;Buf;
01408 &#32;&#32;&#32;&#32;&#32;&#32;raw_svector_ostream&#32;Msg(Buf);
01409 &#32;&#32;&#32;&#32;&#32;&#32;Msg&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;invalid&#32;target&#32;&apos;&quot;</emphasis>&#32;&lt;&lt;&#32;Target&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&apos;&quot;</emphasis>;
01410 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!KindIsValid)
01411 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Msg&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;,&#32;unknown&#32;offloading&#32;kind&#32;&apos;&quot;</emphasis>&#32;&lt;&lt;&#32;OffloadInfo.OffloadKind&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&apos;&quot;</emphasis>;
01412 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!TripleIsValid)
01413 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Msg&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;,&#32;unknown&#32;target&#32;triple&#32;&apos;&quot;</emphasis>&#32;&lt;&lt;&#32;OffloadInfo.Triple.str()&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&apos;&quot;</emphasis>;
01414 &#32;&#32;&#32;&#32;&#32;&#32;reportError(createStringError(errc::invalid_argument,&#32;Msg.str()));
01415 &#32;&#32;&#32;&#32;}
01416 
01417 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(KindIsValid&#32;&amp;&amp;&#32;OffloadInfo.hasHostKind())&#32;{
01418 &#32;&#32;&#32;&#32;&#32;&#32;++HostTargetNum;
01419 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Save&#32;the&#32;index&#32;of&#32;the&#32;input&#32;that&#32;refers&#32;to&#32;the&#32;host.</emphasis>
01420 &#32;&#32;&#32;&#32;&#32;&#32;HostInputIndex&#32;=&#32;Index;
01421 &#32;&#32;&#32;&#32;}
01422 
01423 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(OffloadInfo.OffloadKind&#32;!=&#32;<emphasis role="stringliteral">&quot;hip&quot;</emphasis>&#32;&amp;&amp;&#32;OffloadInfo.OffloadKind&#32;!=&#32;<emphasis role="stringliteral">&quot;hipv4&quot;</emphasis>)
01424 &#32;&#32;&#32;&#32;&#32;&#32;HIPOnly&#32;=&#32;<emphasis role="keyword">false</emphasis>;
01425 
01426 &#32;&#32;&#32;&#32;++Index;
01427 &#32;&#32;}
01428 
01429 &#32;&#32;<emphasis role="comment">//&#32;HIP&#32;uses&#32;clang-offload-bundler&#32;to&#32;bundle&#32;device-only&#32;compilation&#32;results</emphasis>
01430 &#32;&#32;<emphasis role="comment">//&#32;for&#32;multiple&#32;GPU&#32;archs,&#32;therefore&#32;allow&#32;no&#32;host&#32;target&#32;if&#32;all&#32;entries</emphasis>
01431 &#32;&#32;<emphasis role="comment">//&#32;are&#32;for&#32;HIP.</emphasis>
01432 &#32;&#32;AllowNoHost&#32;=&#32;HIPOnly;
01433 
01434 &#32;&#32;<emphasis role="comment">//&#32;Host&#32;triple&#32;is&#32;not&#32;really&#32;needed&#32;for&#32;unbundling&#32;operation,&#32;so&#32;do&#32;not</emphasis>
01435 &#32;&#32;<emphasis role="comment">//&#32;treat&#32;missing&#32;host&#32;triple&#32;as&#32;error&#32;if&#32;we&#32;do&#32;unbundling.</emphasis>
01436 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;((Unbundle&#32;&amp;&amp;&#32;HostTargetNum&#32;&gt;&#32;1)&#32;||
01437 &#32;&#32;&#32;&#32;&#32;&#32;(!Unbundle&#32;&amp;&amp;&#32;HostTargetNum&#32;!=&#32;1&#32;&amp;&amp;&#32;!AllowNoHost))&#32;{
01438 &#32;&#32;&#32;&#32;reportError(createStringError(errc::invalid_argument,
01439 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;expecting&#32;exactly&#32;one&#32;host&#32;target&#32;but&#32;got&#32;&quot;</emphasis>&#32;+
01440 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Twine(HostTargetNum)));
01441 &#32;&#32;}
01442 
01443 &#32;&#32;doWork([]()&#32;{
01444 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(Unbundle)&#32;{
01445 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(FilesType&#32;==&#32;<emphasis role="stringliteral">&quot;a&quot;</emphasis>)
01446 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;UnbundleArchive();
01447 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
01448 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;UnbundleFiles();
01449 &#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>
01450 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;BundleFiles();
01451 &#32;&#32;});
01452 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
01453 }
</programlisting></section>
</section>
</section>
