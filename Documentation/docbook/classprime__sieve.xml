<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_classprime__sieve" xml:lang="en-US">
<title>prime_sieve Class Reference</title>
<indexterm><primary>prime_sieve</primary></indexterm>
<simplesect>
    <title>Public Member Functions    </title>
        <itemizedlist>
            <listitem><para><link linkend="_classprime__sieve_1a47b9a2b81728204ba19142627c904dd8">prime_sieve</link> (long n)</para>
</listitem>
            <listitem><para><link linkend="_classprime__sieve_1a3018e6766362f92bace591eaa3b630f3">~prime_sieve</link> ()</para>
</listitem>
            <listitem><para>void <link linkend="_classprime__sieve_1a2b85505623489a789ed59910899c45bd">runSieve</link> ()</para>
</listitem>
            <listitem><para>void <link linkend="_classprime__sieve_1abe49383c754984e443258176cbc88d4a">printResults</link> (bool showResults, double duration, int passes)</para>
</listitem>
            <listitem><para>int <link linkend="_classprime__sieve_1a0e243144818a8c019dc96d13e95657ec">countPrimes</link> ()</para>
</listitem>
            <listitem><para><link linkend="_classprime__sieve_1a47b9a2b81728204ba19142627c904dd8">prime_sieve</link> (long n)</para>
</listitem>
            <listitem><para><link linkend="_classprime__sieve_1a3018e6766362f92bace591eaa3b630f3">~prime_sieve</link> ()</para>
</listitem>
            <listitem><para>void <link linkend="_classprime__sieve_1a2b85505623489a789ed59910899c45bd">runSieve</link> ()</para>
</listitem>
            <listitem><para>void <link linkend="_classprime__sieve_1abe49383c754984e443258176cbc88d4a">printResults</link> (bool showResults, double duration, int passes)</para>
</listitem>
            <listitem><para>int <link linkend="_classprime__sieve_1a0e243144818a8c019dc96d13e95657ec">countPrimes</link> ()</para>
</listitem>
            <listitem><para><link linkend="_classprime__sieve_1a47b9a2b81728204ba19142627c904dd8">prime_sieve</link> (long n)</para>
</listitem>
            <listitem><para><link linkend="_classprime__sieve_1a3018e6766362f92bace591eaa3b630f3">~prime_sieve</link> ()</para>
</listitem>
            <listitem><para>void <link linkend="_classprime__sieve_1a2b85505623489a789ed59910899c45bd">runSieve</link> ()</para>
</listitem>
            <listitem><para>void <link linkend="_classprime__sieve_1abe49383c754984e443258176cbc88d4a">printResults</link> (bool showResults, double duration, int passes)</para>
</listitem>
            <listitem><para>int <link linkend="_classprime__sieve_1a0e243144818a8c019dc96d13e95657ec">countPrimes</link> ()</para>
</listitem>
            <listitem><para><link linkend="_classprime__sieve_1a47b9a2b81728204ba19142627c904dd8">prime_sieve</link> (long n)</para>
</listitem>
            <listitem><para><link linkend="_classprime__sieve_1a3018e6766362f92bace591eaa3b630f3">~prime_sieve</link> ()</para>
</listitem>
            <listitem><para>void <link linkend="_classprime__sieve_1a2b85505623489a789ed59910899c45bd">runSieve</link> ()</para>
</listitem>
            <listitem><para>void <link linkend="_classprime__sieve_1abe49383c754984e443258176cbc88d4a">printResults</link> (bool showResults, double duration, int passes)</para>
</listitem>
            <listitem><para>int <link linkend="_classprime__sieve_1a0e243144818a8c019dc96d13e95657ec">countPrimes</link> ()</para>
</listitem>
            <listitem><para><link linkend="_classprime__sieve_1a47b9a2b81728204ba19142627c904dd8">prime_sieve</link> (long n)</para>
</listitem>
            <listitem><para><link linkend="_classprime__sieve_1a3018e6766362f92bace591eaa3b630f3">~prime_sieve</link> ()</para>
</listitem>
            <listitem><para>void <link linkend="_classprime__sieve_1a2b85505623489a789ed59910899c45bd">runSieve</link> ()</para>
</listitem>
            <listitem><para>void <link linkend="_classprime__sieve_1abe49383c754984e443258176cbc88d4a">printResults</link> (bool showResults, double duration, int passes)</para>
</listitem>
            <listitem><para>int <link linkend="_classprime__sieve_1a0e243144818a8c019dc96d13e95657ec">countPrimes</link> ()</para>
</listitem>
            <listitem><para><link linkend="_classprime__sieve_1a47b9a2b81728204ba19142627c904dd8">prime_sieve</link> (long n)</para>
</listitem>
            <listitem><para><link linkend="_classprime__sieve_1a3018e6766362f92bace591eaa3b630f3">~prime_sieve</link> ()</para>
</listitem>
            <listitem><para>void <link linkend="_classprime__sieve_1a2b85505623489a789ed59910899c45bd">runSieve</link> ()</para>
</listitem>
            <listitem><para>void <link linkend="_classprime__sieve_1abe49383c754984e443258176cbc88d4a">printResults</link> (bool showResults, double duration, int passes)</para>
</listitem>
            <listitem><para>int <link linkend="_classprime__sieve_1a0e243144818a8c019dc96d13e95657ec">countPrimes</link> ()</para>
</listitem>
            <listitem><para><link linkend="_classprime__sieve_1a47b9a2b81728204ba19142627c904dd8">prime_sieve</link> (long n)</para>
</listitem>
            <listitem><para><link linkend="_classprime__sieve_1a3018e6766362f92bace591eaa3b630f3">~prime_sieve</link> ()</para>
</listitem>
            <listitem><para>void <link linkend="_classprime__sieve_1a2b85505623489a789ed59910899c45bd">runSieve</link> ()</para>
</listitem>
            <listitem><para>void <link linkend="_classprime__sieve_1abe49383c754984e443258176cbc88d4a">printResults</link> (bool showResults, double duration, int passes)</para>
</listitem>
            <listitem><para>int <link linkend="_classprime__sieve_1a0e243144818a8c019dc96d13e95657ec">countPrimes</link> ()</para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Detailed Description</title>
<para>
Definition at line <link linkend="__performance___prime___with___counter__1_8cpp_source_1l00066">66</link> of file <link linkend="__performance___prime___with___counter__1_8cpp_source">Performance_Prime_With_Counter_1.cpp</link>.</para>
</section>
<section>
<title>Constructor &amp; Destructor Documentation</title>
<anchor xml:id="_classprime__sieve_1a47b9a2b81728204ba19142627c904dd8"/>    <section>
    <title>prime_sieve()<computeroutput>[1/7]</computeroutput></title>
<indexterm><primary>prime_sieve</primary><secondary>prime_sieve</secondary></indexterm>
<indexterm><primary>prime_sieve</primary><secondary>prime_sieve</secondary></indexterm>
<para><computeroutput>prime_sieve::prime_sieve (long n)<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line <link linkend="__performance___prime___with___counter__1_8cpp_source_1l00084">84</link> of file <link linkend="__performance___prime___with___counter__1_8cpp_source">Performance_Prime_With_Counter_1.cpp</link>.</para>
<programlisting>00085 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;Bits(n),&#32;sieveSize(n)
00086 &#32;&#32;&#32;&#32;&#32;&#32;{
00087 &#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting>    </section><anchor xml:id="_classprime__sieve_1a3018e6766362f92bace591eaa3b630f3"/>    <section>
    <title>~prime_sieve()<computeroutput>[1/7]</computeroutput></title>
<indexterm><primary>~prime_sieve</primary><secondary>prime_sieve</secondary></indexterm>
<indexterm><primary>prime_sieve</primary><secondary>~prime_sieve</secondary></indexterm>
<para><computeroutput>prime_sieve::~prime_sieve ( )<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line <link linkend="__performance___prime___with___counter__1_8cpp_source_1l00089">89</link> of file <link linkend="__performance___prime___with___counter__1_8cpp_source">Performance_Prime_With_Counter_1.cpp</link>.</para>
<programlisting>00090 &#32;&#32;&#32;&#32;&#32;&#32;{
00091 &#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting>    </section><anchor xml:id="_classprime__sieve_1a47b9a2b81728204ba19142627c904dd8"/>    <section>
    <title>prime_sieve()<computeroutput>[2/7]</computeroutput></title>
<indexterm><primary>prime_sieve</primary><secondary>prime_sieve</secondary></indexterm>
<indexterm><primary>prime_sieve</primary><secondary>prime_sieve</secondary></indexterm>
<para><computeroutput>prime_sieve::prime_sieve (long n)<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line <link linkend="__performance___prime___with___counter__2_8cpp_source_1l00084">84</link> of file <link linkend="__performance___prime___with___counter__2_8cpp_source">Performance_Prime_With_Counter_2.cpp</link>.</para>
<programlisting>00085 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;Bits(n),&#32;sieveSize(n)
00086 &#32;&#32;&#32;&#32;&#32;&#32;{
00087 &#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting>    </section><anchor xml:id="_classprime__sieve_1a3018e6766362f92bace591eaa3b630f3"/>    <section>
    <title>~prime_sieve()<computeroutput>[2/7]</computeroutput></title>
<indexterm><primary>~prime_sieve</primary><secondary>prime_sieve</secondary></indexterm>
<indexterm><primary>prime_sieve</primary><secondary>~prime_sieve</secondary></indexterm>
<para><computeroutput>prime_sieve::~prime_sieve ( )<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line <link linkend="__performance___prime___with___counter__2_8cpp_source_1l00089">89</link> of file <link linkend="__performance___prime___with___counter__2_8cpp_source">Performance_Prime_With_Counter_2.cpp</link>.</para>
<programlisting>00090 &#32;&#32;&#32;&#32;&#32;&#32;{
00091 &#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting>    </section><anchor xml:id="_classprime__sieve_1a47b9a2b81728204ba19142627c904dd8"/>    <section>
    <title>prime_sieve()<computeroutput>[3/7]</computeroutput></title>
<indexterm><primary>prime_sieve</primary><secondary>prime_sieve</secondary></indexterm>
<indexterm><primary>prime_sieve</primary><secondary>prime_sieve</secondary></indexterm>
<para><computeroutput>prime_sieve::prime_sieve (long n)<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line <link linkend="__performance___prime___with___counter__3_8cpp_source_1l00084">84</link> of file <link linkend="__performance___prime___with___counter__3_8cpp_source">Performance_Prime_With_Counter_3.cpp</link>.</para>
<programlisting>00085 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;Bits(n),&#32;sieveSize(n)
00086 &#32;&#32;&#32;&#32;&#32;&#32;{
00087 &#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting>    </section><anchor xml:id="_classprime__sieve_1a3018e6766362f92bace591eaa3b630f3"/>    <section>
    <title>~prime_sieve()<computeroutput>[3/7]</computeroutput></title>
<indexterm><primary>~prime_sieve</primary><secondary>prime_sieve</secondary></indexterm>
<indexterm><primary>prime_sieve</primary><secondary>~prime_sieve</secondary></indexterm>
<para><computeroutput>prime_sieve::~prime_sieve ( )<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line <link linkend="__performance___prime___with___counter__3_8cpp_source_1l00089">89</link> of file <link linkend="__performance___prime___with___counter__3_8cpp_source">Performance_Prime_With_Counter_3.cpp</link>.</para>
<programlisting>00090 &#32;&#32;&#32;&#32;&#32;&#32;{
00091 &#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting>    </section><anchor xml:id="_classprime__sieve_1a47b9a2b81728204ba19142627c904dd8"/>    <section>
    <title>prime_sieve()<computeroutput>[4/7]</computeroutput></title>
<indexterm><primary>prime_sieve</primary><secondary>prime_sieve</secondary></indexterm>
<indexterm><primary>prime_sieve</primary><secondary>prime_sieve</secondary></indexterm>
<para><computeroutput>prime_sieve::prime_sieve (long n)<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line <link linkend="__performance___prime___with___counter__4_8cpp_source_1l00084">84</link> of file <link linkend="__performance___prime___with___counter__4_8cpp_source">Performance_Prime_With_Counter_4.cpp</link>.</para>
<programlisting>00085 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;Bits(n),&#32;sieveSize(n)
00086 &#32;&#32;&#32;&#32;&#32;&#32;{
00087 &#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting>    </section><anchor xml:id="_classprime__sieve_1a3018e6766362f92bace591eaa3b630f3"/>    <section>
    <title>~prime_sieve()<computeroutput>[4/7]</computeroutput></title>
<indexterm><primary>~prime_sieve</primary><secondary>prime_sieve</secondary></indexterm>
<indexterm><primary>prime_sieve</primary><secondary>~prime_sieve</secondary></indexterm>
<para><computeroutput>prime_sieve::~prime_sieve ( )<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line <link linkend="__performance___prime___with___counter__4_8cpp_source_1l00089">89</link> of file <link linkend="__performance___prime___with___counter__4_8cpp_source">Performance_Prime_With_Counter_4.cpp</link>.</para>
<programlisting>00090 &#32;&#32;&#32;&#32;&#32;&#32;{
00091 &#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting>    </section><anchor xml:id="_classprime__sieve_1a47b9a2b81728204ba19142627c904dd8"/>    <section>
    <title>prime_sieve()<computeroutput>[5/7]</computeroutput></title>
<indexterm><primary>prime_sieve</primary><secondary>prime_sieve</secondary></indexterm>
<indexterm><primary>prime_sieve</primary><secondary>prime_sieve</secondary></indexterm>
<para><computeroutput>prime_sieve::prime_sieve (long n)<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line <link linkend="__performance___prime___with___counter__5_8cpp_source_1l00088">88</link> of file <link linkend="__performance___prime___with___counter__5_8cpp_source">Performance_Prime_With_Counter_5.cpp</link>.</para>
<programlisting>00089 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;Bits(n),&#32;sieveSize(n)
00090 &#32;&#32;&#32;&#32;&#32;&#32;{
00091 &#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting>    </section><anchor xml:id="_classprime__sieve_1a3018e6766362f92bace591eaa3b630f3"/>    <section>
    <title>~prime_sieve()<computeroutput>[5/7]</computeroutput></title>
<indexterm><primary>~prime_sieve</primary><secondary>prime_sieve</secondary></indexterm>
<indexterm><primary>prime_sieve</primary><secondary>~prime_sieve</secondary></indexterm>
<para><computeroutput>prime_sieve::~prime_sieve ( )<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line <link linkend="__performance___prime___with___counter__5_8cpp_source_1l00093">93</link> of file <link linkend="__performance___prime___with___counter__5_8cpp_source">Performance_Prime_With_Counter_5.cpp</link>.</para>
<programlisting>00094 &#32;&#32;&#32;&#32;&#32;&#32;{
00095 &#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting>    </section><anchor xml:id="_classprime__sieve_1a47b9a2b81728204ba19142627c904dd8"/>    <section>
    <title>prime_sieve()<computeroutput>[6/7]</computeroutput></title>
<indexterm><primary>prime_sieve</primary><secondary>prime_sieve</secondary></indexterm>
<indexterm><primary>prime_sieve</primary><secondary>prime_sieve</secondary></indexterm>
<para><computeroutput>prime_sieve::prime_sieve (long n)<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line <link linkend="__performance___prime___with___counter__6_8cpp_source_1l00088">88</link> of file <link linkend="__performance___prime___with___counter__6_8cpp_source">Performance_Prime_With_Counter_6.cpp</link>.</para>
<programlisting>00089 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;Bits(n),&#32;sieveSize(n)
00090 &#32;&#32;&#32;&#32;&#32;&#32;{
00091 &#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting>    </section><anchor xml:id="_classprime__sieve_1a3018e6766362f92bace591eaa3b630f3"/>    <section>
    <title>~prime_sieve()<computeroutput>[6/7]</computeroutput></title>
<indexterm><primary>~prime_sieve</primary><secondary>prime_sieve</secondary></indexterm>
<indexterm><primary>prime_sieve</primary><secondary>~prime_sieve</secondary></indexterm>
<para><computeroutput>prime_sieve::~prime_sieve ( )<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line <link linkend="__performance___prime___with___counter__6_8cpp_source_1l00093">93</link> of file <link linkend="__performance___prime___with___counter__6_8cpp_source">Performance_Prime_With_Counter_6.cpp</link>.</para>
<programlisting>00094 &#32;&#32;&#32;&#32;&#32;&#32;{
00095 &#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting>    </section><anchor xml:id="_classprime__sieve_1a47b9a2b81728204ba19142627c904dd8"/>    <section>
    <title>prime_sieve()<computeroutput>[7/7]</computeroutput></title>
<indexterm><primary>prime_sieve</primary><secondary>prime_sieve</secondary></indexterm>
<indexterm><primary>prime_sieve</primary><secondary>prime_sieve</secondary></indexterm>
<para><computeroutput>prime_sieve::prime_sieve (long n)<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line <link linkend="__performance___prime___without___counter_8cpp_source_1l00083">83</link> of file <link linkend="__performance___prime___without___counter_8cpp_source">Performance_Prime_Without_Counter.cpp</link>.</para>
<programlisting>00084 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;Bits(n),&#32;sieveSize(n)
00085 &#32;&#32;&#32;&#32;&#32;&#32;{
00086 &#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting>    </section><anchor xml:id="_classprime__sieve_1a3018e6766362f92bace591eaa3b630f3"/>    <section>
    <title>~prime_sieve()<computeroutput>[7/7]</computeroutput></title>
<indexterm><primary>~prime_sieve</primary><secondary>prime_sieve</secondary></indexterm>
<indexterm><primary>prime_sieve</primary><secondary>~prime_sieve</secondary></indexterm>
<para><computeroutput>prime_sieve::~prime_sieve ( )<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line <link linkend="__performance___prime___without___counter_8cpp_source_1l00088">88</link> of file <link linkend="__performance___prime___without___counter_8cpp_source">Performance_Prime_Without_Counter.cpp</link>.</para>
<programlisting>00089 &#32;&#32;&#32;&#32;&#32;&#32;{
00090 &#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting></section>
</section>
<section>
<title>Member Function Documentation</title>
<anchor xml:id="_classprime__sieve_1a0e243144818a8c019dc96d13e95657ec"/>    <section>
    <title>countPrimes()<computeroutput>[1/7]</computeroutput></title>
<indexterm><primary>countPrimes</primary><secondary>prime_sieve</secondary></indexterm>
<indexterm><primary>prime_sieve</primary><secondary>countPrimes</secondary></indexterm>
<para><computeroutput>int prime_sieve::countPrimes ( )<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line <link linkend="__performance___prime___with___counter__1_8cpp_source_1l00150">150</link> of file <link linkend="__performance___prime___with___counter__1_8cpp_source">Performance_Prime_With_Counter_1.cpp</link>.</para>
<programlisting>00151 &#32;&#32;&#32;&#32;&#32;&#32;{
00152 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;count&#32;=&#32;&#32;(sieveSize&#32;&gt;=&#32;2);;
00153 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;i&#32;=&#32;3;&#32;i&#32;&lt;&#32;sieveSize;&#32;i+=2)
00154 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(Bits.<link linkend="_class_bit_array_1a687c9d8bad72ee9873d24051d74dad45">get</link>(i))
00155 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;count++;
00156 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;count;
00157 &#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting><para>
References <link linkend="__performance___prime___with___counter__1_8cpp_source_1l00047">BitArray::get()</link>.</para>
    </section><anchor xml:id="_classprime__sieve_1a0e243144818a8c019dc96d13e95657ec"/>    <section>
    <title>countPrimes()<computeroutput>[2/7]</computeroutput></title>
<indexterm><primary>countPrimes</primary><secondary>prime_sieve</secondary></indexterm>
<indexterm><primary>prime_sieve</primary><secondary>countPrimes</secondary></indexterm>
<para><computeroutput>int prime_sieve::countPrimes ( )<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line <link linkend="__performance___prime___with___counter__2_8cpp_source_1l00150">150</link> of file <link linkend="__performance___prime___with___counter__2_8cpp_source">Performance_Prime_With_Counter_2.cpp</link>.</para>
<programlisting>00151 &#32;&#32;&#32;&#32;&#32;&#32;{
00152 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;count&#32;=&#32;&#32;(sieveSize&#32;&gt;=&#32;2);;
00153 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;i&#32;=&#32;3;&#32;i&#32;&lt;&#32;sieveSize;&#32;i+=2)
00154 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(Bits.<link linkend="_class_bit_array_1a687c9d8bad72ee9873d24051d74dad45">get</link>(i))
00155 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;count++;
00156 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;count;
00157 &#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting><para>
References <link linkend="__performance___prime___with___counter__1_8cpp_source_1l00047">BitArray::get()</link>.</para>
    </section><anchor xml:id="_classprime__sieve_1a0e243144818a8c019dc96d13e95657ec"/>    <section>
    <title>countPrimes()<computeroutput>[3/7]</computeroutput></title>
<indexterm><primary>countPrimes</primary><secondary>prime_sieve</secondary></indexterm>
<indexterm><primary>prime_sieve</primary><secondary>countPrimes</secondary></indexterm>
<para><computeroutput>int prime_sieve::countPrimes ( )<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line <link linkend="__performance___prime___with___counter__3_8cpp_source_1l00154">154</link> of file <link linkend="__performance___prime___with___counter__3_8cpp_source">Performance_Prime_With_Counter_3.cpp</link>.</para>
<programlisting>00155 &#32;&#32;&#32;&#32;&#32;&#32;{
00156 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;count&#32;=&#32;&#32;(sieveSize&#32;&gt;=&#32;2);;
00157 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;i&#32;=&#32;3;&#32;i&#32;&lt;&#32;sieveSize;&#32;i+=2)
00158 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(Bits.<link linkend="_class_bit_array_1a687c9d8bad72ee9873d24051d74dad45">get</link>(i))
00159 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;count++;
00160 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;count;
00161 &#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting><para>
References <link linkend="__performance___prime___with___counter__1_8cpp_source_1l00047">BitArray::get()</link>.</para>
    </section><anchor xml:id="_classprime__sieve_1a0e243144818a8c019dc96d13e95657ec"/>    <section>
    <title>countPrimes()<computeroutput>[4/7]</computeroutput></title>
<indexterm><primary>countPrimes</primary><secondary>prime_sieve</secondary></indexterm>
<indexterm><primary>prime_sieve</primary><secondary>countPrimes</secondary></indexterm>
<para><computeroutput>int prime_sieve::countPrimes ( )<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line <link linkend="__performance___prime___with___counter__4_8cpp_source_1l00158">158</link> of file <link linkend="__performance___prime___with___counter__4_8cpp_source">Performance_Prime_With_Counter_4.cpp</link>.</para>
<programlisting>00159 &#32;&#32;&#32;&#32;&#32;&#32;{
00160 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;count&#32;=&#32;&#32;(sieveSize&#32;&gt;=&#32;2);;
00161 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;i&#32;=&#32;3;&#32;i&#32;&lt;&#32;sieveSize;&#32;i+=2)
00162 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(Bits.<link linkend="_class_bit_array_1a687c9d8bad72ee9873d24051d74dad45">get</link>(i))
00163 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;count++;
00164 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;count;
00165 &#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting><para>
References <link linkend="__performance___prime___with___counter__1_8cpp_source_1l00047">BitArray::get()</link>.</para>
    </section><anchor xml:id="_classprime__sieve_1a0e243144818a8c019dc96d13e95657ec"/>    <section>
    <title>countPrimes()<computeroutput>[5/7]</computeroutput></title>
<indexterm><primary>countPrimes</primary><secondary>prime_sieve</secondary></indexterm>
<indexterm><primary>prime_sieve</primary><secondary>countPrimes</secondary></indexterm>
<para><computeroutput>int prime_sieve::countPrimes ( )<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line <link linkend="__performance___prime___with___counter__5_8cpp_source_1l00156">156</link> of file <link linkend="__performance___prime___with___counter__5_8cpp_source">Performance_Prime_With_Counter_5.cpp</link>.</para>
<programlisting>00157 &#32;&#32;&#32;&#32;&#32;&#32;{
00158 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;count&#32;=&#32;&#32;(sieveSize&#32;&gt;=&#32;2);;
00159 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;i&#32;=&#32;3;&#32;i&#32;&lt;&#32;sieveSize;&#32;i+=2)
00160 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(Bits.<link linkend="_class_bit_array_1a687c9d8bad72ee9873d24051d74dad45">get</link>(i))
00161 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;count++;
00162 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;count;
00163 &#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting><para>
References <link linkend="__performance___prime___with___counter__1_8cpp_source_1l00047">BitArray::get()</link>.</para>
    </section><anchor xml:id="_classprime__sieve_1a0e243144818a8c019dc96d13e95657ec"/>    <section>
    <title>countPrimes()<computeroutput>[6/7]</computeroutput></title>
<indexterm><primary>countPrimes</primary><secondary>prime_sieve</secondary></indexterm>
<indexterm><primary>prime_sieve</primary><secondary>countPrimes</secondary></indexterm>
<para><computeroutput>int prime_sieve::countPrimes ( )<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line <link linkend="__performance___prime___with___counter__6_8cpp_source_1l00154">154</link> of file <link linkend="__performance___prime___with___counter__6_8cpp_source">Performance_Prime_With_Counter_6.cpp</link>.</para>
<programlisting>00155 &#32;&#32;&#32;&#32;&#32;&#32;{
00156 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;count&#32;=&#32;&#32;(sieveSize&#32;&gt;=&#32;2);;
00157 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;i&#32;=&#32;3;&#32;i&#32;&lt;&#32;sieveSize;&#32;i+=2)
00158 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(Bits.<link linkend="_class_bit_array_1a687c9d8bad72ee9873d24051d74dad45">get</link>(i))
00159 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;count++;
00160 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;count;
00161 &#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting><para>
References <link linkend="__performance___prime___with___counter__1_8cpp_source_1l00047">BitArray::get()</link>.</para>
    </section><anchor xml:id="_classprime__sieve_1a0e243144818a8c019dc96d13e95657ec"/>    <section>
    <title>countPrimes()<computeroutput>[7/7]</computeroutput></title>
<indexterm><primary>countPrimes</primary><secondary>prime_sieve</secondary></indexterm>
<indexterm><primary>prime_sieve</primary><secondary>countPrimes</secondary></indexterm>
<para><computeroutput>int prime_sieve::countPrimes ( )<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line <link linkend="__performance___prime___without___counter_8cpp_source_1l00149">149</link> of file <link linkend="__performance___prime___without___counter_8cpp_source">Performance_Prime_Without_Counter.cpp</link>.</para>
<programlisting>00150 &#32;&#32;&#32;&#32;&#32;&#32;{
00151 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;count&#32;=&#32;&#32;(sieveSize&#32;&gt;=&#32;2);;
00152 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;i&#32;=&#32;3;&#32;i&#32;&lt;&#32;sieveSize;&#32;i+=2)
00153 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(Bits.<link linkend="_class_bit_array_1a687c9d8bad72ee9873d24051d74dad45">get</link>(i))
00154 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;count++;
00155 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;count;
00156 &#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting><para>
References <link linkend="__performance___prime___with___counter__1_8cpp_source_1l00047">BitArray::get()</link>.</para>
    </section><anchor xml:id="_classprime__sieve_1abe49383c754984e443258176cbc88d4a"/>    <section>
    <title>printResults()<computeroutput>[1/7]</computeroutput></title>
<indexterm><primary>printResults</primary><secondary>prime_sieve</secondary></indexterm>
<indexterm><primary>prime_sieve</primary><secondary>printResults</secondary></indexterm>
<para><computeroutput>void prime_sieve::printResults (bool showResults, double duration, int passes)<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line <link linkend="__performance___prime___with___counter__1_8cpp_source_1l00114">114</link> of file <link linkend="__performance___prime___with___counter__1_8cpp_source">Performance_Prime_With_Counter_1.cpp</link>.</para>
<programlisting>00115 &#32;&#32;&#32;&#32;&#32;&#32;{
00116 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(showResults)
00117 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;printf(<emphasis role="stringliteral">&quot;2,&#32;&quot;</emphasis>);
00118 
00119 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;count&#32;=&#32;(sieveSize&#32;&gt;=&#32;2);&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Starting&#32;count&#32;(2&#32;is&#32;prime)</emphasis>
00120 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;num&#32;=&#32;3;&#32;num&#32;&lt;=&#32;sieveSize;&#32;num+=2)
00121 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00122 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(Bits.<link linkend="_class_bit_array_1a687c9d8bad72ee9873d24051d74dad45">get</link>(num))
00123 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00124 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(showResults)
00125 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;printf(<emphasis role="stringliteral">&quot;%d,&#32;&quot;</emphasis>,&#32;num);
00126 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;count++;
00127 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00128 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00129 
00130 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(showResults)
00131 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;printf(<emphasis role="stringliteral">&quot;\n&quot;</emphasis>);
00132 
00133 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ofstream&#32;outfile;
00134 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;outfile.open(<emphasis role="stringliteral">&quot;Time_Performance_Prime.txt&quot;</emphasis>,&#32;ios_base::app);
00135 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;outfile&#32;&lt;&lt;&#32;passes&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;\n&quot;</emphasis>;
00136 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*printf(&quot;Passes:&#32;%d,&#32;Time:&#32;%lf,&#32;Avg:&#32;%lf,&#32;Limit:&#32;%ld,&#32;Count1:&#32;%d,&#32;Count2:&#32;%d,&#32;Valid:&#32;%d\n&quot;,</emphasis>
00137 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;passes,</emphasis>
00138 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;duration,</emphasis>
00139 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;duration&#32;/&#32;passes,</emphasis>
00140 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sieveSize,</emphasis>
00141 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;count,</emphasis>
00142 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;countPrimes(),</emphasis>
00143 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;validateResults());</emphasis>
00144 <emphasis role="comment"></emphasis>
00145 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;//&#32;Following&#32;2&#32;lines&#32;added&#32;by&#32;rbergen&#32;to&#32;conform&#32;to&#32;drag&#32;race&#32;output&#32;format</emphasis>
00146 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;printf(&quot;\n&quot;);</emphasis>
00147 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;printf(&quot;davepl_pol;%d;%f;1;algorithm=base,faithful=yes,bits=1\n&quot;,&#32;passes,&#32;duration);*/</emphasis>
00148 &#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting><para>
References <link linkend="__performance___prime___with___counter__1_8cpp_source_1l00047">BitArray::get()</link>.</para>
<para>
Referenced by <link linkend="__performance___prime___with___counter__1_8cpp_source_1l00174">main()</link>.</para>
    </section><anchor xml:id="_classprime__sieve_1abe49383c754984e443258176cbc88d4a"/>    <section>
    <title>printResults()<computeroutput>[2/7]</computeroutput></title>
<indexterm><primary>printResults</primary><secondary>prime_sieve</secondary></indexterm>
<indexterm><primary>prime_sieve</primary><secondary>printResults</secondary></indexterm>
<para><computeroutput>void prime_sieve::printResults (bool showResults, double duration, int passes)<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line <link linkend="__performance___prime___with___counter__2_8cpp_source_1l00114">114</link> of file <link linkend="__performance___prime___with___counter__2_8cpp_source">Performance_Prime_With_Counter_2.cpp</link>.</para>
<programlisting>00115 &#32;&#32;&#32;&#32;&#32;&#32;{
00116 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(showResults)
00117 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;printf(<emphasis role="stringliteral">&quot;2,&#32;&quot;</emphasis>);
00118 
00119 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;count&#32;=&#32;(sieveSize&#32;&gt;=&#32;2);&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Starting&#32;count&#32;(2&#32;is&#32;prime)</emphasis>
00120 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;num&#32;=&#32;3;&#32;num&#32;&lt;=&#32;sieveSize;&#32;num+=2)
00121 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00122 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(Bits.<link linkend="_class_bit_array_1a687c9d8bad72ee9873d24051d74dad45">get</link>(num))
00123 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00124 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(showResults)
00125 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;printf(<emphasis role="stringliteral">&quot;%d,&#32;&quot;</emphasis>,&#32;num);
00126 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;count++;
00127 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00128 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00129 
00130 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(showResults)
00131 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;printf(<emphasis role="stringliteral">&quot;\n&quot;</emphasis>);
00132 
00133 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ofstream&#32;outfile;
00134 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;outfile.open(<emphasis role="stringliteral">&quot;Time_Performance_Prime.txt&quot;</emphasis>,&#32;ios_base::app);
00135 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;outfile&#32;&lt;&lt;&#32;passes&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;\n&quot;</emphasis>;
00136 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*printf(&quot;Passes:&#32;%d,&#32;Time:&#32;%lf,&#32;Avg:&#32;%lf,&#32;Limit:&#32;%ld,&#32;Count1:&#32;%d,&#32;Count2:&#32;%d,&#32;Valid:&#32;%d\n&quot;,</emphasis>
00137 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;passes,</emphasis>
00138 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;duration,</emphasis>
00139 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;duration&#32;/&#32;passes,</emphasis>
00140 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sieveSize,</emphasis>
00141 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;count,</emphasis>
00142 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;countPrimes(),</emphasis>
00143 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;validateResults());</emphasis>
00144 <emphasis role="comment"></emphasis>
00145 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;//&#32;Following&#32;2&#32;lines&#32;added&#32;by&#32;rbergen&#32;to&#32;conform&#32;to&#32;drag&#32;race&#32;output&#32;format</emphasis>
00146 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;printf(&quot;\n&quot;);</emphasis>
00147 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;printf(&quot;davepl_pol;%d;%f;1;algorithm=base,faithful=yes,bits=1\n&quot;,&#32;passes,&#32;duration);*/</emphasis>
00148 &#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting><para>
References <link linkend="__performance___prime___with___counter__1_8cpp_source_1l00047">BitArray::get()</link>.</para>
    </section><anchor xml:id="_classprime__sieve_1abe49383c754984e443258176cbc88d4a"/>    <section>
    <title>printResults()<computeroutput>[3/7]</computeroutput></title>
<indexterm><primary>printResults</primary><secondary>prime_sieve</secondary></indexterm>
<indexterm><primary>prime_sieve</primary><secondary>printResults</secondary></indexterm>
<para><computeroutput>void prime_sieve::printResults (bool showResults, double duration, int passes)<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line <link linkend="__performance___prime___with___counter__3_8cpp_source_1l00118">118</link> of file <link linkend="__performance___prime___with___counter__3_8cpp_source">Performance_Prime_With_Counter_3.cpp</link>.</para>
<programlisting>00119 &#32;&#32;&#32;&#32;&#32;&#32;{
00120 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(showResults)
00121 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;printf(<emphasis role="stringliteral">&quot;2,&#32;&quot;</emphasis>);
00122 
00123 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;count&#32;=&#32;(sieveSize&#32;&gt;=&#32;2);&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Starting&#32;count&#32;(2&#32;is&#32;prime)</emphasis>
00124 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;num&#32;=&#32;3;&#32;num&#32;&lt;=&#32;sieveSize;&#32;num+=2)
00125 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00126 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(Bits.<link linkend="_class_bit_array_1a687c9d8bad72ee9873d24051d74dad45">get</link>(num))
00127 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00128 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(showResults)
00129 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;printf(<emphasis role="stringliteral">&quot;%d,&#32;&quot;</emphasis>,&#32;num);
00130 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;count++;
00131 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00132 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00133 
00134 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(showResults)
00135 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;printf(<emphasis role="stringliteral">&quot;\n&quot;</emphasis>);
00136 
00137 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ofstream&#32;outfile;
00138 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;outfile.open(<emphasis role="stringliteral">&quot;Time_Performance_Prime.txt&quot;</emphasis>,&#32;ios_base::app);
00139 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;outfile&#32;&lt;&lt;&#32;passes&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;\n&quot;</emphasis>;
00140 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*printf(&quot;Passes:&#32;%d,&#32;Time:&#32;%lf,&#32;Avg:&#32;%lf,&#32;Limit:&#32;%ld,&#32;Count1:&#32;%d,&#32;Count2:&#32;%d,&#32;Valid:&#32;%d\n&quot;,</emphasis>
00141 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;passes,</emphasis>
00142 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;duration,</emphasis>
00143 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;duration&#32;/&#32;passes,</emphasis>
00144 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sieveSize,</emphasis>
00145 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;count,</emphasis>
00146 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;countPrimes(),</emphasis>
00147 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;validateResults());</emphasis>
00148 <emphasis role="comment"></emphasis>
00149 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;//&#32;Following&#32;2&#32;lines&#32;added&#32;by&#32;rbergen&#32;to&#32;conform&#32;to&#32;drag&#32;race&#32;output&#32;format</emphasis>
00150 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;printf(&quot;\n&quot;);</emphasis>
00151 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;printf(&quot;davepl_pol;%d;%f;1;algorithm=base,faithful=yes,bits=1\n&quot;,&#32;passes,&#32;duration);*/</emphasis>
00152 &#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting><para>
References <link linkend="__performance___prime___with___counter__1_8cpp_source_1l00047">BitArray::get()</link>.</para>
    </section><anchor xml:id="_classprime__sieve_1abe49383c754984e443258176cbc88d4a"/>    <section>
    <title>printResults()<computeroutput>[4/7]</computeroutput></title>
<indexterm><primary>printResults</primary><secondary>prime_sieve</secondary></indexterm>
<indexterm><primary>prime_sieve</primary><secondary>printResults</secondary></indexterm>
<para><computeroutput>void prime_sieve::printResults (bool showResults, double duration, int passes)<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line <link linkend="__performance___prime___with___counter__4_8cpp_source_1l00122">122</link> of file <link linkend="__performance___prime___with___counter__4_8cpp_source">Performance_Prime_With_Counter_4.cpp</link>.</para>
<programlisting>00123 &#32;&#32;&#32;&#32;&#32;&#32;{
00124 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(showResults)
00125 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;printf(<emphasis role="stringliteral">&quot;2,&#32;&quot;</emphasis>);
00126 
00127 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;count&#32;=&#32;(sieveSize&#32;&gt;=&#32;2);&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Starting&#32;count&#32;(2&#32;is&#32;prime)</emphasis>
00128 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;num&#32;=&#32;3;&#32;num&#32;&lt;=&#32;sieveSize;&#32;num+=2)
00129 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00130 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(Bits.<link linkend="_class_bit_array_1a687c9d8bad72ee9873d24051d74dad45">get</link>(num))
00131 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00132 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(showResults)
00133 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;printf(<emphasis role="stringliteral">&quot;%d,&#32;&quot;</emphasis>,&#32;num);
00134 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;count++;
00135 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00136 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00137 
00138 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(showResults)
00139 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;printf(<emphasis role="stringliteral">&quot;\n&quot;</emphasis>);
00140 
00141 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ofstream&#32;outfile;
00142 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;outfile.open(<emphasis role="stringliteral">&quot;Time_Performance_Prime.txt&quot;</emphasis>,&#32;ios_base::app);
00143 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;outfile&#32;&lt;&lt;&#32;passes&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;\n&quot;</emphasis>;
00144 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*printf(&quot;Passes:&#32;%d,&#32;Time:&#32;%lf,&#32;Avg:&#32;%lf,&#32;Limit:&#32;%ld,&#32;Count1:&#32;%d,&#32;Count2:&#32;%d,&#32;Valid:&#32;%d\n&quot;,</emphasis>
00145 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;passes,</emphasis>
00146 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;duration,</emphasis>
00147 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;duration&#32;/&#32;passes,</emphasis>
00148 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sieveSize,</emphasis>
00149 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;count,</emphasis>
00150 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;countPrimes(),</emphasis>
00151 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;validateResults());</emphasis>
00152 <emphasis role="comment"></emphasis>
00153 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;//&#32;Following&#32;2&#32;lines&#32;added&#32;by&#32;rbergen&#32;to&#32;conform&#32;to&#32;drag&#32;race&#32;output&#32;format</emphasis>
00154 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;printf(&quot;\n&quot;);</emphasis>
00155 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;printf(&quot;davepl_pol;%d;%f;1;algorithm=base,faithful=yes,bits=1\n&quot;,&#32;passes,&#32;duration);*/</emphasis>
00156 &#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting><para>
References <link linkend="__performance___prime___with___counter__1_8cpp_source_1l00047">BitArray::get()</link>.</para>
    </section><anchor xml:id="_classprime__sieve_1abe49383c754984e443258176cbc88d4a"/>    <section>
    <title>printResults()<computeroutput>[5/7]</computeroutput></title>
<indexterm><primary>printResults</primary><secondary>prime_sieve</secondary></indexterm>
<indexterm><primary>prime_sieve</primary><secondary>printResults</secondary></indexterm>
<para><computeroutput>void prime_sieve::printResults (bool showResults, double duration, int passes)<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line <link linkend="__performance___prime___with___counter__5_8cpp_source_1l00120">120</link> of file <link linkend="__performance___prime___with___counter__5_8cpp_source">Performance_Prime_With_Counter_5.cpp</link>.</para>
<programlisting>00121 &#32;&#32;&#32;&#32;&#32;&#32;{
00122 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(showResults)
00123 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;printf(<emphasis role="stringliteral">&quot;2,&#32;&quot;</emphasis>);
00124 
00125 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;count&#32;=&#32;(sieveSize&#32;&gt;=&#32;2);&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Starting&#32;count&#32;(2&#32;is&#32;prime)</emphasis>
00126 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;num&#32;=&#32;3;&#32;num&#32;&lt;=&#32;sieveSize;&#32;num+=2)
00127 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00128 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(Bits.<link linkend="_class_bit_array_1a687c9d8bad72ee9873d24051d74dad45">get</link>(num))
00129 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00130 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(showResults)
00131 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;printf(<emphasis role="stringliteral">&quot;%d,&#32;&quot;</emphasis>,&#32;num);
00132 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;count++;
00133 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00134 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00135 
00136 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(showResults)
00137 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;printf(<emphasis role="stringliteral">&quot;\n&quot;</emphasis>);
00138 
00139 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ofstream&#32;outfile;
00140 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;outfile.open(<emphasis role="stringliteral">&quot;Time_Performance_Prime.txt&quot;</emphasis>,&#32;ios_base::app);
00141 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;outfile&#32;&lt;&lt;&#32;passes&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;\n&quot;</emphasis>;
00142 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*printf(&quot;Passes:&#32;%d,&#32;Time:&#32;%lf,&#32;Avg:&#32;%lf,&#32;Limit:&#32;%ld,&#32;Count1:&#32;%d,&#32;Count2:&#32;%d,&#32;Valid:&#32;%d\n&quot;,</emphasis>
00143 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;passes,</emphasis>
00144 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;duration,</emphasis>
00145 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;duration&#32;/&#32;passes,</emphasis>
00146 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sieveSize,</emphasis>
00147 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;count,</emphasis>
00148 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;countPrimes(),</emphasis>
00149 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;validateResults());</emphasis>
00150 <emphasis role="comment"></emphasis>
00151 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;//&#32;Following&#32;2&#32;lines&#32;added&#32;by&#32;rbergen&#32;to&#32;conform&#32;to&#32;drag&#32;race&#32;output&#32;format</emphasis>
00152 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;printf(&quot;\n&quot;);</emphasis>
00153 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;printf(&quot;davepl_pol;%d;%f;1;algorithm=base,faithful=yes,bits=1\n&quot;,&#32;passes,&#32;duration);*/</emphasis>
00154 &#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting><para>
References <link linkend="__performance___prime___with___counter__1_8cpp_source_1l00047">BitArray::get()</link>.</para>
    </section><anchor xml:id="_classprime__sieve_1abe49383c754984e443258176cbc88d4a"/>    <section>
    <title>printResults()<computeroutput>[6/7]</computeroutput></title>
<indexterm><primary>printResults</primary><secondary>prime_sieve</secondary></indexterm>
<indexterm><primary>prime_sieve</primary><secondary>printResults</secondary></indexterm>
<para><computeroutput>void prime_sieve::printResults (bool showResults, double duration, int passes)<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line <link linkend="__performance___prime___with___counter__6_8cpp_source_1l00118">118</link> of file <link linkend="__performance___prime___with___counter__6_8cpp_source">Performance_Prime_With_Counter_6.cpp</link>.</para>
<programlisting>00119 &#32;&#32;&#32;&#32;&#32;&#32;{
00120 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(showResults)
00121 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;printf(<emphasis role="stringliteral">&quot;2,&#32;&quot;</emphasis>);
00122 
00123 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;count&#32;=&#32;(sieveSize&#32;&gt;=&#32;2);&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Starting&#32;count&#32;(2&#32;is&#32;prime)</emphasis>
00124 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;num&#32;=&#32;3;&#32;num&#32;&lt;=&#32;sieveSize;&#32;num+=2)
00125 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00126 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(Bits.<link linkend="_class_bit_array_1a687c9d8bad72ee9873d24051d74dad45">get</link>(num))
00127 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00128 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(showResults)
00129 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;printf(<emphasis role="stringliteral">&quot;%d,&#32;&quot;</emphasis>,&#32;num);
00130 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;count++;
00131 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00132 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00133 
00134 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(showResults)
00135 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;printf(<emphasis role="stringliteral">&quot;\n&quot;</emphasis>);
00136 
00137 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ofstream&#32;outfile;
00138 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;outfile.open(<emphasis role="stringliteral">&quot;Time_Performance_Prime.txt&quot;</emphasis>,&#32;ios_base::app);
00139 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;outfile&#32;&lt;&lt;&#32;passes&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;\n&quot;</emphasis>;
00140 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*printf(&quot;Passes:&#32;%d,&#32;Time:&#32;%lf,&#32;Avg:&#32;%lf,&#32;Limit:&#32;%ld,&#32;Count1:&#32;%d,&#32;Count2:&#32;%d,&#32;Valid:&#32;%d\n&quot;,</emphasis>
00141 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;passes,</emphasis>
00142 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;duration,</emphasis>
00143 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;duration&#32;/&#32;passes,</emphasis>
00144 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sieveSize,</emphasis>
00145 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;count,</emphasis>
00146 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;countPrimes(),</emphasis>
00147 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;validateResults());</emphasis>
00148 <emphasis role="comment"></emphasis>
00149 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;//&#32;Following&#32;2&#32;lines&#32;added&#32;by&#32;rbergen&#32;to&#32;conform&#32;to&#32;drag&#32;race&#32;output&#32;format</emphasis>
00150 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;printf(&quot;\n&quot;);</emphasis>
00151 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;printf(&quot;davepl_pol;%d;%f;1;algorithm=base,faithful=yes,bits=1\n&quot;,&#32;passes,&#32;duration);*/</emphasis>
00152 &#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting><para>
References <link linkend="__performance___prime___with___counter__1_8cpp_source_1l00047">BitArray::get()</link>.</para>
    </section><anchor xml:id="_classprime__sieve_1abe49383c754984e443258176cbc88d4a"/>    <section>
    <title>printResults()<computeroutput>[7/7]</computeroutput></title>
<indexterm><primary>printResults</primary><secondary>prime_sieve</secondary></indexterm>
<indexterm><primary>prime_sieve</primary><secondary>printResults</secondary></indexterm>
<para><computeroutput>void prime_sieve::printResults (bool showResults, double duration, int passes)<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line <link linkend="__performance___prime___without___counter_8cpp_source_1l00113">113</link> of file <link linkend="__performance___prime___without___counter_8cpp_source">Performance_Prime_Without_Counter.cpp</link>.</para>
<programlisting>00114 &#32;&#32;&#32;&#32;&#32;&#32;{
00115 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(showResults)
00116 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;printf(<emphasis role="stringliteral">&quot;2,&#32;&quot;</emphasis>);
00117 
00118 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;count&#32;=&#32;(sieveSize&#32;&gt;=&#32;2);&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Starting&#32;count&#32;(2&#32;is&#32;prime)</emphasis>
00119 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;num&#32;=&#32;3;&#32;num&#32;&lt;=&#32;sieveSize;&#32;num+=2)
00120 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00121 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(Bits.<link linkend="_class_bit_array_1a687c9d8bad72ee9873d24051d74dad45">get</link>(num))
00122 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00123 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(showResults)
00124 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;printf(<emphasis role="stringliteral">&quot;%d,&#32;&quot;</emphasis>,&#32;num);
00125 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;count++;
00126 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00127 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00128 
00129 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(showResults)
00130 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;printf(<emphasis role="stringliteral">&quot;\n&quot;</emphasis>);
00131 
00132 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ofstream&#32;outfile;
00133 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;outfile.open(<emphasis role="stringliteral">&quot;Time_Performance_Prime.txt&quot;</emphasis>,&#32;ios_base::app);
00134 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;outfile&#32;&lt;&lt;&#32;passes&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;\n&quot;</emphasis>;
00135 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*printf(&quot;Passes:&#32;%d,&#32;Time:&#32;%lf,&#32;Avg:&#32;%lf,&#32;Limit:&#32;%ld,&#32;Count1:&#32;%d,&#32;Count2:&#32;%d,&#32;Valid:&#32;%d\n&quot;,</emphasis>
00136 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;passes,</emphasis>
00137 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;duration,</emphasis>
00138 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;duration&#32;/&#32;passes,</emphasis>
00139 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sieveSize,</emphasis>
00140 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;count,</emphasis>
00141 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;countPrimes(),</emphasis>
00142 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;validateResults());</emphasis>
00143 <emphasis role="comment"></emphasis>
00144 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;//&#32;Following&#32;2&#32;lines&#32;added&#32;by&#32;rbergen&#32;to&#32;conform&#32;to&#32;drag&#32;race&#32;output&#32;format</emphasis>
00145 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;printf(&quot;\n&quot;);</emphasis>
00146 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;printf(&quot;davepl_pol;%d;%f;1;algorithm=base,faithful=yes,bits=1\n&quot;,&#32;passes,&#32;duration);*/</emphasis>
00147 &#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting><para>
References <link linkend="__performance___prime___with___counter__1_8cpp_source_1l00047">BitArray::get()</link>.</para>
    </section><anchor xml:id="_classprime__sieve_1a2b85505623489a789ed59910899c45bd"/>    <section>
    <title>runSieve()<computeroutput>[1/7]</computeroutput></title>
<indexterm><primary>runSieve</primary><secondary>prime_sieve</secondary></indexterm>
<indexterm><primary>prime_sieve</primary><secondary>runSieve</secondary></indexterm>
<para><computeroutput>void prime_sieve::runSieve ( )<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line <link linkend="__performance___prime___with___counter__1_8cpp_source_1l00093">93</link> of file <link linkend="__performance___prime___with___counter__1_8cpp_source">Performance_Prime_With_Counter_1.cpp</link>.</para>
<programlisting>00094 &#32;&#32;&#32;&#32;&#32;&#32;{
00095 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;factor&#32;=&#32;3;
00096 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;q&#32;=&#32;(int)&#32;sqrt(sieveSize);
00097 
00098 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(factor&#32;&lt;=&#32;q)
00099 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00100 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;num&#32;=&#32;factor;&#32;num&#32;&lt;&#32;sieveSize;&#32;num&#32;+=&#32;2)
00101 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00102 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(Bits.<link linkend="_class_bit_array_1a687c9d8bad72ee9873d24051d74dad45">get</link>(num))
00103 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00104 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;factor&#32;=&#32;num;
00105 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
00106 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00107 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00108 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Bits.<link linkend="_class_bit_array_1a07e5ee143240de80ab2ab0ab64818f50">setFlagsFalse</link>(factor&#32;*&#32;factor,&#32;factor&#32;+&#32;factor);
00109 
00110 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;factor&#32;+=&#32;2;
00111 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00112 &#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting><para>
References <link linkend="__performance___prime___with___counter__1_8cpp_source_1l00047">BitArray::get()</link>, and <link linkend="__performance___prime___with___counter__1_8cpp_source_1l00055">BitArray::setFlagsFalse()</link>.</para>
<para>
Referenced by <link linkend="__performance___prime___with___counter__1_8cpp_source_1l00174">main()</link>.</para>
    </section><anchor xml:id="_classprime__sieve_1a2b85505623489a789ed59910899c45bd"/>    <section>
    <title>runSieve()<computeroutput>[2/7]</computeroutput></title>
<indexterm><primary>runSieve</primary><secondary>prime_sieve</secondary></indexterm>
<indexterm><primary>prime_sieve</primary><secondary>runSieve</secondary></indexterm>
<para><computeroutput>void prime_sieve::runSieve ( )<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line <link linkend="__performance___prime___with___counter__2_8cpp_source_1l00093">93</link> of file <link linkend="__performance___prime___with___counter__2_8cpp_source">Performance_Prime_With_Counter_2.cpp</link>.</para>
<programlisting>00094 &#32;&#32;&#32;&#32;&#32;&#32;{
00095 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;factor&#32;=&#32;3;
00096 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;q&#32;=&#32;(int)&#32;sqrt(sieveSize);
00097 
00098 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(factor&#32;&lt;=&#32;q)
00099 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00100 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;num&#32;=&#32;factor;&#32;num&#32;&lt;&#32;sieveSize;&#32;num&#32;+=&#32;2)
00101 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00102 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(Bits.<link linkend="_class_bit_array_1a687c9d8bad72ee9873d24051d74dad45">get</link>(num))
00103 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00104 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;factor&#32;=&#32;num;
00105 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
00106 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00107 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00108 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Bits.<link linkend="_class_bit_array_1a07e5ee143240de80ab2ab0ab64818f50">setFlagsFalse</link>(factor&#32;*&#32;factor,&#32;factor&#32;+&#32;factor);
00109 
00110 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;factor&#32;+=&#32;2;
00111 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00112 &#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting><para>
References <link linkend="__performance___prime___with___counter__1_8cpp_source_1l00047">BitArray::get()</link>, and <link linkend="__performance___prime___with___counter__1_8cpp_source_1l00055">BitArray::setFlagsFalse()</link>.</para>
    </section><anchor xml:id="_classprime__sieve_1a2b85505623489a789ed59910899c45bd"/>    <section>
    <title>runSieve()<computeroutput>[3/7]</computeroutput></title>
<indexterm><primary>runSieve</primary><secondary>prime_sieve</secondary></indexterm>
<indexterm><primary>prime_sieve</primary><secondary>runSieve</secondary></indexterm>
<para><computeroutput>void prime_sieve::runSieve ( )<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line <link linkend="__performance___prime___with___counter__3_8cpp_source_1l00093">93</link> of file <link linkend="__performance___prime___with___counter__3_8cpp_source">Performance_Prime_With_Counter_3.cpp</link>.</para>
<programlisting>00094 &#32;&#32;&#32;&#32;&#32;&#32;{
00095 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__performance___prime___with___counter__3_8cpp_1a06d6c9583bc3b7a5aee75dee84fa6122">dataStorage</link>.<link linkend="_class_data_storage_1a927960040591eba171b0dbbfa4b9b5bd">startEvent</link>(2);
00096 <emphasis role="keywordtype">int</emphasis>&#32;factor&#32;=&#32;3;
00097 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;q&#32;=&#32;(int)&#32;sqrt(sieveSize);
00098 
00099 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__performance___prime___with___counter__3_8cpp_1a06d6c9583bc3b7a5aee75dee84fa6122">dataStorage</link>.<link linkend="_class_data_storage_1ade8287e335af60ba18c8455d4485094c">endEvent</link>(2);
00100 <link linkend="__performance___prime___with___counter__3_8cpp_1a06d6c9583bc3b7a5aee75dee84fa6122">dataStorage</link>.<link linkend="_class_data_storage_1a927960040591eba171b0dbbfa4b9b5bd">startEvent</link>(3);
00101 <emphasis role="keywordflow">while</emphasis>&#32;(factor&#32;&lt;=&#32;q)
00102 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00103 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;num&#32;=&#32;factor;&#32;num&#32;&lt;&#32;sieveSize;&#32;num&#32;+=&#32;2)
00104 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00105 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(Bits.<link linkend="_class_bit_array_1a687c9d8bad72ee9873d24051d74dad45">get</link>(num))
00106 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00107 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;factor&#32;=&#32;num;
00108 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
00109 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00110 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00111 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Bits.<link linkend="_class_bit_array_1a07e5ee143240de80ab2ab0ab64818f50">setFlagsFalse</link>(factor&#32;*&#32;factor,&#32;factor&#32;+&#32;factor);
00112 
00113 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;factor&#32;+=&#32;2;
00114 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}<link linkend="__performance___prime___with___counter__3_8cpp_1a06d6c9583bc3b7a5aee75dee84fa6122">dataStorage</link>.<link linkend="_class_data_storage_1ade8287e335af60ba18c8455d4485094c">endEvent</link>(3);
00115 
00116 &#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting><para>
References <link linkend="__performance___prime___with___counter__3_8cpp_1a06d6c9583bc3b7a5aee75dee84fa6122">dataStorage()</link>, <link linkend="__data_storage_8cpp_source_1l00046">DataStorage::endEvent()</link>, <link linkend="__performance___prime___with___counter__1_8cpp_source_1l00047">BitArray::get()</link>, <link linkend="__performance___prime___with___counter__1_8cpp_source_1l00055">BitArray::setFlagsFalse()</link>, and <link linkend="__data_storage_8cpp_source_1l00028">DataStorage::startEvent()</link>.</para>
    </section><anchor xml:id="_classprime__sieve_1a2b85505623489a789ed59910899c45bd"/>    <section>
    <title>runSieve()<computeroutput>[4/7]</computeroutput></title>
<indexterm><primary>runSieve</primary><secondary>prime_sieve</secondary></indexterm>
<indexterm><primary>prime_sieve</primary><secondary>runSieve</secondary></indexterm>
<para><computeroutput>void prime_sieve::runSieve ( )<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line <link linkend="__performance___prime___with___counter__4_8cpp_source_1l00093">93</link> of file <link linkend="__performance___prime___with___counter__4_8cpp_source">Performance_Prime_With_Counter_4.cpp</link>.</para>
<programlisting>00094 &#32;&#32;&#32;&#32;&#32;&#32;{
00095 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;factor&#32;=&#32;3;
00096 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;q&#32;=&#32;(int)&#32;sqrt(sieveSize);
00097 
00098 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__performance___prime___with___counter__4_8cpp_1ac7ed277eaef7e9c1db6f3072875d6d47">dataStorage</link>.<link linkend="_class_data_storage_1a927960040591eba171b0dbbfa4b9b5bd">startEvent</link>(1);
00099 <emphasis role="keywordflow">while</emphasis>&#32;(factor&#32;&lt;=&#32;q)
00100 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00101 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__performance___prime___with___counter__4_8cpp_1ac7ed277eaef7e9c1db6f3072875d6d47">dataStorage</link>.<link linkend="_class_data_storage_1a927960040591eba171b0dbbfa4b9b5bd">startEvent</link>(2);
00102 <emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;num&#32;=&#32;factor;&#32;num&#32;&lt;&#32;sieveSize;&#32;num&#32;+=&#32;2)
00103 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00104 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(Bits.<link linkend="_class_bit_array_1a687c9d8bad72ee9873d24051d74dad45">get</link>(num))
00105 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00106 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;factor&#32;=&#32;num;
00107 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
00108 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00109 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00110 <link linkend="__performance___prime___with___counter__4_8cpp_1ac7ed277eaef7e9c1db6f3072875d6d47">dataStorage</link>.<link linkend="_class_data_storage_1ade8287e335af60ba18c8455d4485094c">endEvent</link>(2);
00111 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__performance___prime___with___counter__4_8cpp_1ac7ed277eaef7e9c1db6f3072875d6d47">dataStorage</link>.<link linkend="_class_data_storage_1a927960040591eba171b0dbbfa4b9b5bd">startEvent</link>(3);
00112 Bits.<link linkend="_class_bit_array_1a07e5ee143240de80ab2ab0ab64818f50">setFlagsFalse</link>(factor&#32;*&#32;factor,&#32;factor&#32;+&#32;factor);
00113 <link linkend="__performance___prime___with___counter__4_8cpp_1ac7ed277eaef7e9c1db6f3072875d6d47">dataStorage</link>.<link linkend="_class_data_storage_1ade8287e335af60ba18c8455d4485094c">endEvent</link>(3);
00114 
00115 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__performance___prime___with___counter__4_8cpp_1ac7ed277eaef7e9c1db6f3072875d6d47">dataStorage</link>.<link linkend="_class_data_storage_1a927960040591eba171b0dbbfa4b9b5bd">startEvent</link>(4);
00116 factor&#32;+=&#32;2;
00117 <link linkend="__performance___prime___with___counter__4_8cpp_1ac7ed277eaef7e9c1db6f3072875d6d47">dataStorage</link>.<link linkend="_class_data_storage_1ade8287e335af60ba18c8455d4485094c">endEvent</link>(4);
00118 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}<link linkend="__performance___prime___with___counter__4_8cpp_1ac7ed277eaef7e9c1db6f3072875d6d47">dataStorage</link>.<link linkend="_class_data_storage_1ade8287e335af60ba18c8455d4485094c">endEvent</link>(1);
00119 
00120 &#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting><para>
References <link linkend="__performance___prime___with___counter__4_8cpp_1ac7ed277eaef7e9c1db6f3072875d6d47">dataStorage()</link>, <link linkend="__data_storage_8cpp_source_1l00046">DataStorage::endEvent()</link>, <link linkend="__performance___prime___with___counter__1_8cpp_source_1l00047">BitArray::get()</link>, <link linkend="__performance___prime___with___counter__1_8cpp_source_1l00055">BitArray::setFlagsFalse()</link>, and <link linkend="__data_storage_8cpp_source_1l00028">DataStorage::startEvent()</link>.</para>
    </section><anchor xml:id="_classprime__sieve_1a2b85505623489a789ed59910899c45bd"/>    <section>
    <title>runSieve()<computeroutput>[5/7]</computeroutput></title>
<indexterm><primary>runSieve</primary><secondary>prime_sieve</secondary></indexterm>
<indexterm><primary>prime_sieve</primary><secondary>runSieve</secondary></indexterm>
<para><computeroutput>void prime_sieve::runSieve ( )<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line <link linkend="__performance___prime___with___counter__5_8cpp_source_1l00097">97</link> of file <link linkend="__performance___prime___with___counter__5_8cpp_source">Performance_Prime_With_Counter_5.cpp</link>.</para>
<programlisting>00098 &#32;&#32;&#32;&#32;&#32;&#32;{
00099 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;factor&#32;=&#32;3;
00100 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;q&#32;=&#32;(int)&#32;sqrt(sieveSize);
00101 
00102 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(factor&#32;&lt;=&#32;q)
00103 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00104 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;num&#32;=&#32;factor;&#32;num&#32;&lt;&#32;sieveSize;&#32;num&#32;+=&#32;2)
00105 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00106 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(Bits.<link linkend="_class_bit_array_1a687c9d8bad72ee9873d24051d74dad45">get</link>(num))
00107 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00108 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;factor&#32;=&#32;num;
00109 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
00110 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00111 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00112 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__performance___prime___with___counter__5_8cpp_1aa0fee0586f094bcb161928e37d36b3a1">dataStorage</link>.<link linkend="_class_data_storage_1a927960040591eba171b0dbbfa4b9b5bd">startEvent</link>(1);
00113 Bits.<link linkend="_class_bit_array_1a07e5ee143240de80ab2ab0ab64818f50">setFlagsFalse</link>(factor&#32;*&#32;factor,&#32;factor&#32;+&#32;factor);
00114 <link linkend="__performance___prime___with___counter__5_8cpp_1aa0fee0586f094bcb161928e37d36b3a1">dataStorage</link>.<link linkend="_class_data_storage_1ade8287e335af60ba18c8455d4485094c">endEvent</link>(1);
00115 
00116 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;factor&#32;+=&#32;2;
00117 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00118 &#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting><para>
References <link linkend="__performance___prime___with___counter__5_8cpp_1aa0fee0586f094bcb161928e37d36b3a1">dataStorage()</link>, <link linkend="__data_storage_8cpp_source_1l00046">DataStorage::endEvent()</link>, <link linkend="__performance___prime___with___counter__1_8cpp_source_1l00047">BitArray::get()</link>, <link linkend="__performance___prime___with___counter__1_8cpp_source_1l00055">BitArray::setFlagsFalse()</link>, and <link linkend="__data_storage_8cpp_source_1l00028">DataStorage::startEvent()</link>.</para>
    </section><anchor xml:id="_classprime__sieve_1a2b85505623489a789ed59910899c45bd"/>    <section>
    <title>runSieve()<computeroutput>[6/7]</computeroutput></title>
<indexterm><primary>runSieve</primary><secondary>prime_sieve</secondary></indexterm>
<indexterm><primary>prime_sieve</primary><secondary>runSieve</secondary></indexterm>
<para><computeroutput>void prime_sieve::runSieve ( )<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line <link linkend="__performance___prime___with___counter__6_8cpp_source_1l00097">97</link> of file <link linkend="__performance___prime___with___counter__6_8cpp_source">Performance_Prime_With_Counter_6.cpp</link>.</para>
<programlisting>00098 &#32;&#32;&#32;&#32;&#32;&#32;{
00099 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;factor&#32;=&#32;3;
00100 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;q&#32;=&#32;(int)&#32;sqrt(sieveSize);
00101 
00102 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(factor&#32;&lt;=&#32;q)
00103 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00104 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;num&#32;=&#32;factor;&#32;num&#32;&lt;&#32;sieveSize;&#32;num&#32;+=&#32;2)
00105 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00106 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(Bits.<link linkend="_class_bit_array_1a687c9d8bad72ee9873d24051d74dad45">get</link>(num))
00107 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00108 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;factor&#32;=&#32;num;
00109 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
00110 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00111 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00112 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Bits.<link linkend="_class_bit_array_1a07e5ee143240de80ab2ab0ab64818f50">setFlagsFalse</link>(factor&#32;*&#32;factor,&#32;factor&#32;+&#32;factor);
00113 
00114 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;factor&#32;+=&#32;2;
00115 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00116 &#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting><para>
References <link linkend="__performance___prime___with___counter__1_8cpp_source_1l00047">BitArray::get()</link>, and <link linkend="__performance___prime___with___counter__1_8cpp_source_1l00055">BitArray::setFlagsFalse()</link>.</para>
    </section><anchor xml:id="_classprime__sieve_1a2b85505623489a789ed59910899c45bd"/>    <section>
    <title>runSieve()<computeroutput>[7/7]</computeroutput></title>
<indexterm><primary>runSieve</primary><secondary>prime_sieve</secondary></indexterm>
<indexterm><primary>prime_sieve</primary><secondary>runSieve</secondary></indexterm>
<para><computeroutput>void prime_sieve::runSieve ( )<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line <link linkend="__performance___prime___without___counter_8cpp_source_1l00092">92</link> of file <link linkend="__performance___prime___without___counter_8cpp_source">Performance_Prime_Without_Counter.cpp</link>.</para>
<programlisting>00093 &#32;&#32;&#32;&#32;&#32;&#32;{
00094 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;factor&#32;=&#32;3;
00095 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;q&#32;=&#32;(int)&#32;sqrt(sieveSize);
00096 
00097 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(factor&#32;&lt;=&#32;q)
00098 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00099 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;num&#32;=&#32;factor;&#32;num&#32;&lt;&#32;sieveSize;&#32;num&#32;+=&#32;2)
00100 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00101 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(Bits.<link linkend="_class_bit_array_1a687c9d8bad72ee9873d24051d74dad45">get</link>(num))
00102 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00103 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;factor&#32;=&#32;num;
00104 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
00105 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00106 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00107 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Bits.<link linkend="_class_bit_array_1a07e5ee143240de80ab2ab0ab64818f50">setFlagsFalse</link>(factor&#32;*&#32;factor,&#32;factor&#32;+&#32;factor);
00108 
00109 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;factor&#32;+=&#32;2;
00110 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00111 &#32;&#32;&#32;&#32;&#32;&#32;}
</programlisting><para>
References <link linkend="__performance___prime___with___counter__1_8cpp_source_1l00047">BitArray::get()</link>, and <link linkend="__performance___prime___with___counter__1_8cpp_source_1l00055">BitArray::setFlagsFalse()</link>.</para>
</section>
<para>
The documentation for this class was generated from the following files:</para>
Tests/Prime Tests Cases/<link linkend="__performance___prime___with___counter__1_8cpp">Performance_Prime_With_Counter_1.cpp</link>Tests/Prime Tests Cases/<link linkend="__performance___prime___with___counter__2_8cpp">Performance_Prime_With_Counter_2.cpp</link>Tests/Prime Tests Cases/<link linkend="__performance___prime___with___counter__3_8cpp">Performance_Prime_With_Counter_3.cpp</link>Tests/Prime Tests Cases/<link linkend="__performance___prime___with___counter__4_8cpp">Performance_Prime_With_Counter_4.cpp</link>Tests/Prime Tests Cases/<link linkend="__performance___prime___with___counter__5_8cpp">Performance_Prime_With_Counter_5.cpp</link>Tests/Prime Tests Cases/<link linkend="__performance___prime___with___counter__6_8cpp">Performance_Prime_With_Counter_6.cpp</link>Tests/Prime Tests Cases/<link linkend="__performance___prime___without___counter_8cpp">Performance_Prime_Without_Counter.cpp</link></section>
</section>
