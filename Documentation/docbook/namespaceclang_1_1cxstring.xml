<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_namespaceclang_1_1cxstring" xml:lang="en-US">
<title>clang::cxstring Namespace Reference</title>
<indexterm><primary>clang::cxstring</primary></indexterm>
<simplesect>
    <title>Classes    </title>
        <itemizedlist>
            <listitem><para>class <link linkend="_classclang_1_1cxstring_1_1_c_x_string_pool">CXStringPool</link></para>

<para>A string pool used for fast allocation/deallocation of strings. </para>
</listitem>
            <listitem><para>struct <link linkend="_structclang_1_1cxstring_1_1_c_x_string_buf">CXStringBuf</link></para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Functions    </title>
        <itemizedlist>
            <listitem><para>CXString <link linkend="_namespaceclang_1_1cxstring_1a8a49aa6ea196abdde85886689f2630f9">createEmpty</link> ()</para>

<para>Create a CXString object for an empty &quot;&quot; string. </para>
</listitem>
            <listitem><para>CXString <link linkend="_namespaceclang_1_1cxstring_1a8684a35d52ccb8c623144db89a0205e1">createNull</link> ()</para>
</listitem>
            <listitem><para>CXString <link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">createRef</link> (const char *String)</para>
</listitem>
            <listitem><para>CXString <link linkend="_namespaceclang_1_1cxstring_1a19a4962be87f75a8c1fa5a0b75f76298">createDup</link> (const char *String)</para>
</listitem>
            <listitem><para>CXString <link linkend="_namespaceclang_1_1cxstring_1ae7319593ba701fd2e736767deae5ef5f">createRef</link> (StringRef String)</para>
</listitem>
            <listitem><para>CXString <link linkend="_namespaceclang_1_1cxstring_1a62e4008f6bfd5c212aada470275c24b1">createDup</link> (StringRef String)</para>
</listitem>
            <listitem><para>CXString <link linkend="_namespaceclang_1_1cxstring_1a4ea867311d5651a36d2dfa1f1258638c">createCXString</link> (<link linkend="_structclang_1_1cxstring_1_1_c_x_string_buf">CXStringBuf</link> *buf)</para>

<para>Create a CXString object that is backed by a string buffer. </para>
</listitem>
            <listitem><para>CXStringSet * <link linkend="_namespaceclang_1_1cxstring_1a0ebb0924de5a075db7ae5d7937df8056">createSet</link> (const std::vector&lt; std::string &gt; &amp;<link linkend="__c_x_loaded_diagnostic_8cpp_1a43f230387ba6f0bf2e696b6029b136bb">Strings</link>)</para>
</listitem>
            <listitem><para><link linkend="_structclang_1_1cxstring_1_1_c_x_string_buf">CXStringBuf</link> * <link linkend="_namespaceclang_1_1cxstring_1ad1ccb52527d7a42e4ad5c3e1f6af9907">getCXStringBuf</link> (CXTranslationUnit TU)</para>
</listitem>
            <listitem><para>bool <link linkend="_namespaceclang_1_1cxstring_1a23337a6942da94448da8b249362d626e">isManagedByPool</link> (CXString str)</para>

<para>Returns true if the CXString data is managed by a pool. </para>
</listitem>
            <listitem><para>CXString <link linkend="_namespaceclang_1_1cxstring_1abc51fd7a522d9e5b5ca2c0d364d60c61">createRef</link> (std::string String)=delete</para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Function Documentation</title>
<anchor xml:id="_namespaceclang_1_1cxstring_1a4ea867311d5651a36d2dfa1f1258638c"/>    <section>
    <title>createCXString()</title>
<indexterm><primary>createCXString</primary><secondary>clang::cxstring</secondary></indexterm>
<indexterm><primary>clang::cxstring</primary><secondary>createCXString</secondary></indexterm>
<para><computeroutput>CXString clang::cxstring::createCXString (<link linkend="_structclang_1_1cxstring_1_1_c_x_string_buf">CXStringBuf</link> * buf)</computeroutput></para><para>

<para>Create a CXString object that is backed by a string buffer. </para>
</para>
<para>
Definition at line <link linkend="__c_x_string_8cpp_source_1l00106">106</link> of file <link linkend="__c_x_string_8cpp_source">CXString.cpp</link>.</para>
<programlisting>00106 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00107 &#32;&#32;CXString&#32;Str;
00108 &#32;&#32;Str.data&#32;=&#32;buf;
00109 &#32;&#32;Str.private_flags&#32;=&#32;(unsigned)&#32;<link linkend="__c_x_string_8cpp_1ab8841ac79b6d3e2432ef36b111ccbdbeac341fab4481fed30e1d8bdb6f9ad7a64">CXS_StringBuf</link>;
00110 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;Str;
00111 }
</programlisting><para>
References <link linkend="__c_x_string_8cpp_source_1l00033">CXS_StringBuf</link>.</para>
    </section><anchor xml:id="_namespaceclang_1_1cxstring_1a19a4962be87f75a8c1fa5a0b75f76298"/>    <section>
    <title>createDup()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>createDup</primary><secondary>clang::cxstring</secondary></indexterm>
<indexterm><primary>clang::cxstring</primary><secondary>createDup</secondary></indexterm>
<para><computeroutput>CXString clang::cxstring::createDup (const char * String)</computeroutput></para>
<para>Create a CXString object from a nul-terminated C string. New CXString will contain a copy of <computeroutput>String</computeroutput>.</para>

<para><computeroutput>String</computeroutput> can be changed or freed by the caller. </para>
<para>
Definition at line <link linkend="__c_x_string_8cpp_source_1l00067">67</link> of file <link linkend="__c_x_string_8cpp_source">CXString.cpp</link>.</para>
<programlisting>00067 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00068 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!String)
00069 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1a8684a35d52ccb8c623144db89a0205e1">createNull</link>();
00070 
00071 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(String[0]&#32;==&#32;<emphasis role="charliteral">&apos;\0&apos;</emphasis>)
00072 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1a8a49aa6ea196abdde85886689f2630f9">createEmpty</link>();
00073 
00074 &#32;&#32;CXString&#32;Str;
00075 &#32;&#32;Str.data&#32;=&#32;strdup(String);
00076 &#32;&#32;Str.private_flags&#32;=&#32;<link linkend="__c_x_string_8cpp_1ab8841ac79b6d3e2432ef36b111ccbdbeae75b2f550ab333f9545a54e835053de1">CXS_Malloc</link>;
00077 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;Str;
00078 }
</programlisting><para>
References <link linkend="__c_x_string_8cpp_source_1l00043">createEmpty()</link>, <link linkend="__c_x_string_8cpp_source_1l00050">createNull()</link>, and <link linkend="__c_x_string_8cpp_source_1l00029">CXS_Malloc</link>.</para>
<para>
Referenced by <link linkend="__c_index_u_s_rs_8cpp_source_1l00124">clang_constructUSR_ObjCCategory()</link>, <link linkend="__c_index_u_s_rs_8cpp_source_1l00110">clang_constructUSR_ObjCClass()</link>, <link linkend="__c_index_u_s_rs_8cpp_source_1l00117">clang_constructUSR_ObjCProtocol()</link>, <link linkend="__c_index_8cpp_source_1l04889">clang_Cursor_getMangling()</link>, <link linkend="__c_index_8cpp_source_1l08293">clang_Cursor_getObjCPropertyGetterName()</link>, <link linkend="__c_index_8cpp_source_1l08305">clang_Cursor_getObjCPropertySetterName()</link>, <link linkend="__c_index_8cpp_source_1l08373">clang_Cursor_isExternalSymbol()</link>, <link linkend="__c_index_8cpp_source_1l09109">clang_getClangVersion()</link>, <link linkend="__c_index_8cpp_source_1l05120">clang_getCursorDisplayName()</link>, <link linkend="__c_index_8cpp_source_1l05099">clang_getCursorPrettyPrinted()</link>, <link linkend="__c_index_8cpp_source_1l04634">clang_getCursorSpelling()</link>, <link linkend="__c_x_type_8cpp_source_1l01100">clang_getDeclObjCTypeEncoding()</link>, <link linkend="__c_index_8cpp_source_1l06810">clang_getTokenSpelling()</link>, <link linkend="__c_index_8cpp_source_1l08489">clang_Module_getFullName()</link>, <link linkend="__c_index_8cpp_source_1l08482">clang_Module_getName()</link>, <link linkend="__a_r_c_migrate_8cpp_source_1l00126">clang_remap_getFilenames()</link>, <link linkend="__c_x_string_8cpp_source_1l00080">createRef()</link>, <link linkend="__c_x_string_8cpp_source_1l00113">createSet()</link>, <link linkend="__c_x_loaded_diagnostic_8cpp_source_1l00123">clang::CXLoadedDiagnostic::getCategoryText()</link>, <link linkend="__c_x_stored_diagnostic_8cpp_source_1l00052">clang::CXStoredDiagnostic::getDiagnosticOption()</link>, <link linkend="__c_x_loaded_diagnostic_8cpp_source_1l00109">clang::CXLoadedDiagnostic::getDiagnosticOption()</link>, and <link linkend="__c_x_stored_diagnostic_8cpp_source_1l00099">clang::CXStoredDiagnostic::getFixIt()</link>.</para>
    </section><anchor xml:id="_namespaceclang_1_1cxstring_1a62e4008f6bfd5c212aada470275c24b1"/>    <section>
    <title>createDup()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>createDup</primary><secondary>clang::cxstring</secondary></indexterm>
<indexterm><primary>clang::cxstring</primary><secondary>createDup</secondary></indexterm>
<para><computeroutput>CXString clang::cxstring::createDup (StringRef String)</computeroutput></para>
<para>Create a CXString object from a StringRef. New CXString will contain a copy of <computeroutput>String</computeroutput>.</para>

<para><computeroutput>String</computeroutput> can be changed or freed by the caller. </para>
<para>
Definition at line <link linkend="__c_x_string_8cpp_source_1l00096">96</link> of file <link linkend="__c_x_string_8cpp_source">CXString.cpp</link>.</para>
<programlisting>00096 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00097 &#32;&#32;CXString&#32;Result;
00098 &#32;&#32;<emphasis role="keywordtype">char</emphasis>&#32;*Spelling&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">char</emphasis>&#32;*<emphasis role="keyword">&gt;</emphasis>(llvm::safe_malloc(String.size()&#32;+&#32;1));
00099 &#32;&#32;memmove(Spelling,&#32;String.data(),&#32;String.size());
00100 &#32;&#32;Spelling[String.size()]&#32;=&#32;0;
00101 &#32;&#32;Result.data&#32;=&#32;Spelling;
00102 &#32;&#32;Result.private_flags&#32;=&#32;(unsigned)&#32;<link linkend="__c_x_string_8cpp_1ab8841ac79b6d3e2432ef36b111ccbdbeae75b2f550ab333f9545a54e835053de1">CXS_Malloc</link>;
00103 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;Result;
00104 }
</programlisting><para>
References <link linkend="__c_x_string_8cpp_source_1l00029">CXS_Malloc</link>.</para>
    </section><anchor xml:id="_namespaceclang_1_1cxstring_1a8a49aa6ea196abdde85886689f2630f9"/>    <section>
    <title>createEmpty()</title>
<indexterm><primary>createEmpty</primary><secondary>clang::cxstring</secondary></indexterm>
<indexterm><primary>clang::cxstring</primary><secondary>createEmpty</secondary></indexterm>
<para><computeroutput>CXString clang::cxstring::createEmpty ( )</computeroutput></para><para>

<para>Create a CXString object for an empty &quot;&quot; string. </para>
</para>
<para>
Definition at line <link linkend="__c_x_string_8cpp_source_1l00043">43</link> of file <link linkend="__c_x_string_8cpp_source">CXString.cpp</link>.</para>
<programlisting>00043 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00044 &#32;&#32;CXString&#32;Str;
00045 &#32;&#32;Str.data&#32;=&#32;<emphasis role="stringliteral">&quot;&quot;</emphasis>;
00046 &#32;&#32;Str.private_flags&#32;=&#32;<link linkend="__c_x_string_8cpp_1ab8841ac79b6d3e2432ef36b111ccbdbead25153f33f1e6cfab882b9feb6790073">CXS_Unmanaged</link>;
00047 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;Str;
00048 }
</programlisting><para>
References <link linkend="__c_x_string_8cpp_source_1l00026">CXS_Unmanaged</link>.</para>
<para>
Referenced by <link linkend="__c_index_8cpp_source_1l04889">clang_Cursor_getMangling()</link>, <link linkend="__c_index_code_completion_8cpp_source_1l00111">clang_getCompletionChunkText()</link>, <link linkend="__c_index_8cpp_source_1l05120">clang_getCursorDisplayName()</link>, <link linkend="__c_index_8cpp_source_1l08097">clang_getCursorPlatformAvailability()</link>, <link linkend="__c_index_8cpp_source_1l05099">clang_getCursorPrettyPrinted()</link>, <link linkend="__c_index_8cpp_source_1l04634">clang_getCursorSpelling()</link>, <link linkend="__c_index_u_s_rs_8cpp_source_1l00038">clang_getCursorUSR()</link>, <link linkend="__c_x_type_8cpp_source_1l01100">clang_getDeclObjCTypeEncoding()</link>, <link linkend="__c_index_diagnostic_8cpp_source_1l00405">clang_getDiagnosticCategoryText()</link>, <link linkend="__c_index_diagnostic_8cpp_source_1l00430">clang_getDiagnosticFixIt()</link>, <link linkend="__c_index_diagnostic_8cpp_source_1l00384">clang_getDiagnosticOption()</link>, <link linkend="__c_index_diagnostic_8cpp_source_1l00378">clang_getDiagnosticSpelling()</link>, <link linkend="__c_index_8cpp_source_1l08489">clang_Module_getFullName()</link>, <link linkend="__c_index_8cpp_source_1l08482">clang_Module_getName()</link>, <link linkend="__c_index_8cpp_source_1l04342">clang_TargetInfo_getTriple()</link>, <link linkend="__c_x_string_8cpp_source_1l00067">createDup()</link>, <link linkend="__c_x_string_8cpp_source_1l00057">createRef()</link>, <link linkend="__c_x_stored_diagnostic_8cpp_source_1l00052">clang::CXStoredDiagnostic::getDiagnosticOption()</link>, and <link linkend="__c_x_loaded_diagnostic_8cpp_source_1l00109">clang::CXLoadedDiagnostic::getDiagnosticOption()</link>.</para>
    </section><anchor xml:id="_namespaceclang_1_1cxstring_1a8684a35d52ccb8c623144db89a0205e1"/>    <section>
    <title>createNull()</title>
<indexterm><primary>createNull</primary><secondary>clang::cxstring</secondary></indexterm>
<indexterm><primary>clang::cxstring</primary><secondary>createNull</secondary></indexterm>
<para><computeroutput>CXString clang::cxstring::createNull ( )</computeroutput></para>
<para>Create a CXString object for an NULL string.</para>

<para>A NULL string should be used as an &quot;invalid&quot; value in case of errors. </para>
<para>
Definition at line <link linkend="__c_x_string_8cpp_source_1l00050">50</link> of file <link linkend="__c_x_string_8cpp_source">CXString.cpp</link>.</para>
<programlisting>00050 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00051 &#32;&#32;CXString&#32;Str;
00052 &#32;&#32;Str.data&#32;=&#32;<emphasis role="keyword">nullptr</emphasis>;
00053 &#32;&#32;Str.private_flags&#32;=&#32;<link linkend="__c_x_string_8cpp_1ab8841ac79b6d3e2432ef36b111ccbdbead25153f33f1e6cfab882b9feb6790073">CXS_Unmanaged</link>;
00054 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;Str;
00055 }
</programlisting><para>
References <link linkend="__c_x_string_8cpp_source_1l00026">CXS_Unmanaged</link>.</para>
<para>
Referenced by <link linkend="__c_x_comment_8cpp_source_1l00243">clang_BlockCommandComment_getArgText()</link>, <link linkend="__c_x_comment_8cpp_source_1l00226">clang_BlockCommandComment_getCommandName()</link>, <link linkend="__c_x_compilation_database_8cpp_source_1l00132">clang_CompileCommand_getArg()</link>, <link linkend="__c_x_compilation_database_8cpp_source_1l00103">clang_CompileCommand_getDirectory()</link>, <link linkend="__c_x_compilation_database_8cpp_source_1l00113">clang_CompileCommand_getFilename()</link>, <link linkend="__c_x_compilation_database_8cpp_source_1l00162">clang_CompileCommand_getMappedSourceContent()</link>, <link linkend="__c_x_compilation_database_8cpp_source_1l00154">clang_CompileCommand_getMappedSourcePath()</link>, <link linkend="__c_index_8cpp_source_1l08421">clang_Cursor_getBriefCommentText()</link>, <link linkend="__c_index_8cpp_source_1l08293">clang_Cursor_getObjCPropertyGetterName()</link>, <link linkend="__c_index_8cpp_source_1l08305">clang_Cursor_getObjCPropertySetterName()</link>, <link linkend="__c_index_8cpp_source_1l08406">clang_Cursor_getRawCommentText()</link>, <link linkend="__c_index_8cpp_source_1l04470">clang_File_tryGetRealPathName()</link>, <link linkend="__c_x_comment_8cpp_source_1l00379">clang_FullComment_getAsHTML()</link>, <link linkend="__c_x_comment_8cpp_source_1l00394">clang_FullComment_getAsXML()</link>, <link linkend="__c_index_code_completion_8cpp_source_1l00210">clang_getCompletionAnnotation()</link>, <link linkend="__c_index_code_completion_8cpp_source_1l00231">clang_getCompletionBriefComment()</link>, <link linkend="__c_index_code_completion_8cpp_source_1l00111">clang_getCompletionChunkText()</link>, <link linkend="__c_index_code_completion_8cpp_source_1l00322">clang_getCompletionFixIt()</link>, <link linkend="__c_index_code_completion_8cpp_source_1l00218">clang_getCompletionParent()</link>, <link linkend="__c_index_8cpp_source_1l04379">clang_getFileName()</link>, <link linkend="__c_x_comment_8cpp_source_1l00210">clang_HTMLStartTag_getAttrName()</link>, <link linkend="__c_x_comment_8cpp_source_1l00218">clang_HTMLStartTag_getAttrValue()</link>, <link linkend="__c_x_comment_8cpp_source_1l00364">clang_HTMLTagComment_getAsString()</link>, <link linkend="__c_x_comment_8cpp_source_1l00186">clang_HTMLTagComment_getTagName()</link>, <link linkend="__c_x_comment_8cpp_source_1l00177">clang_InlineCommandComment_getArgText()</link>, <link linkend="__c_x_comment_8cpp_source_1l00135">clang_InlineCommandComment_getCommandName()</link>, <link linkend="__c_x_comment_8cpp_source_1l00260">clang_ParamCommandComment_getParamName()</link>, <link linkend="__c_x_comment_8cpp_source_1l00127">clang_TextComment_getText()</link>, <link linkend="__c_x_comment_8cpp_source_1l00311">clang_TParamCommandComment_getParamName()</link>, <link linkend="__c_x_comment_8cpp_source_1l00343">clang_VerbatimBlockLineComment_getText()</link>, <link linkend="__c_x_comment_8cpp_source_1l00352">clang_VerbatimLineComment_getText()</link>, and <link linkend="__c_x_string_8cpp_source_1l00067">createDup()</link>.</para>
    </section><anchor xml:id="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4"/>    <section>
    <title>createRef()<computeroutput>[1/3]</computeroutput></title>
<indexterm><primary>createRef</primary><secondary>clang::cxstring</secondary></indexterm>
<indexterm><primary>clang::cxstring</primary><secondary>createRef</secondary></indexterm>
<para><computeroutput>CXString clang::cxstring::createRef (const char * String)</computeroutput></para>
<para>Create a CXString object from a nul-terminated C string. New CXString may contain a pointer to <computeroutput>String</computeroutput>.</para>

<para><computeroutput>String</computeroutput> should not be changed by the caller afterwards. </para>
<para>
Definition at line <link linkend="__c_x_string_8cpp_source_1l00057">57</link> of file <link linkend="__c_x_string_8cpp_source">CXString.cpp</link>.</para>
<programlisting>00057 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00058 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(String&#32;&amp;&amp;&#32;String[0]&#32;==&#32;<emphasis role="charliteral">&apos;\0&apos;</emphasis>)
00059 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1a8a49aa6ea196abdde85886689f2630f9">createEmpty</link>();
00060 
00061 &#32;&#32;CXString&#32;Str;
00062 &#32;&#32;Str.data&#32;=&#32;String;
00063 &#32;&#32;Str.private_flags&#32;=&#32;<link linkend="__c_x_string_8cpp_1ab8841ac79b6d3e2432ef36b111ccbdbead25153f33f1e6cfab882b9feb6790073">CXS_Unmanaged</link>;
00064 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;Str;
00065 }
</programlisting><para>
References <link linkend="__c_x_string_8cpp_source_1l00043">createEmpty()</link>, and <link linkend="__c_x_string_8cpp_source_1l00026">CXS_Unmanaged</link>.</para>
<para>
Referenced by <link linkend="__c_x_comment_8cpp_source_1l00243">clang_BlockCommandComment_getArgText()</link>, <link linkend="__c_x_compilation_database_8cpp_source_1l00132">clang_CompileCommand_getArg()</link>, <link linkend="__c_x_compilation_database_8cpp_source_1l00103">clang_CompileCommand_getDirectory()</link>, <link linkend="__c_x_compilation_database_8cpp_source_1l00113">clang_CompileCommand_getFilename()</link>, <link linkend="__c_index_8cpp_source_1l08421">clang_Cursor_getBriefCommentText()</link>, <link linkend="__c_index_8cpp_source_1l08406">clang_Cursor_getRawCommentText()</link>, <link linkend="__c_index_8cpp_source_1l04470">clang_File_tryGetRealPathName()</link>, <link linkend="__c_index_code_completion_8cpp_source_1l00210">clang_getCompletionAnnotation()</link>, <link linkend="__c_index_code_completion_8cpp_source_1l00231">clang_getCompletionBriefComment()</link>, <link linkend="__c_index_code_completion_8cpp_source_1l00111">clang_getCompletionChunkText()</link>, <link linkend="__c_index_code_completion_8cpp_source_1l00322">clang_getCompletionFixIt()</link>, <link linkend="__c_index_code_completion_8cpp_source_1l00218">clang_getCompletionParent()</link>, <link linkend="__c_index_8cpp_source_1l05208">clang_getCursorKindSpelling()</link>, <link linkend="__c_index_8cpp_source_1l04634">clang_getCursorSpelling()</link>, <link linkend="__c_x_type_8cpp_source_1l01100">clang_getDeclObjCTypeEncoding()</link>, <link linkend="__c_index_diagnostic_8cpp_source_1l00400">clang_getDiagnosticCategoryName()</link>, <link linkend="__c_index_8cpp_source_1l04379">clang_getFileName()</link>, <link linkend="__c_index_8cpp_source_1l06810">clang_getTokenSpelling()</link>, <link linkend="__c_x_type_8cpp_source_1l00543">clang_getTypeKindSpelling()</link>, <link linkend="__c_x_comment_8cpp_source_1l00210">clang_HTMLStartTag_getAttrName()</link>, <link linkend="__c_x_comment_8cpp_source_1l00218">clang_HTMLStartTag_getAttrValue()</link>, <link linkend="__c_x_comment_8cpp_source_1l00186">clang_HTMLTagComment_getTagName()</link>, <link linkend="__c_x_comment_8cpp_source_1l00177">clang_InlineCommandComment_getArgText()</link>, <link linkend="__c_x_comment_8cpp_source_1l00260">clang_ParamCommandComment_getParamName()</link>, <link linkend="__c_x_comment_8cpp_source_1l00127">clang_TextComment_getText()</link>, <link linkend="__c_x_comment_8cpp_source_1l00311">clang_TParamCommandComment_getParamName()</link>, <link linkend="__c_x_comment_8cpp_source_1l00343">clang_VerbatimBlockLineComment_getText()</link>, <link linkend="__c_x_comment_8cpp_source_1l00352">clang_VerbatimLineComment_getText()</link>, <link linkend="__c_x_stored_diagnostic_8cpp_source_1l00074">clang::CXStoredDiagnostic::getCategoryText()</link>, <link linkend="__c_x_stored_diagnostic_8cpp_source_1l00052">clang::CXStoredDiagnostic::getDiagnosticOption()</link>, <link linkend="__c_x_loaded_diagnostic_8cpp_source_1l00140">clang::CXLoadedDiagnostic::getFixIt()</link>, <link linkend="__c_x_stored_diagnostic_8cpp_source_1l00048">clang::CXStoredDiagnostic::getSpelling()</link>, and <link linkend="__c_x_loaded_diagnostic_8cpp_source_1l00105">clang::CXLoadedDiagnostic::getSpelling()</link>.</para>
    </section><anchor xml:id="_namespaceclang_1_1cxstring_1abc51fd7a522d9e5b5ca2c0d364d60c61"/>    <section>
    <title>createRef()<computeroutput>[2/3]</computeroutput></title>
<indexterm><primary>createRef</primary><secondary>clang::cxstring</secondary></indexterm>
<indexterm><primary>clang::cxstring</primary><secondary>createRef</secondary></indexterm>
<para><computeroutput>CXString clang::cxstring::createRef (std::string String)<computeroutput>[delete]</computeroutput></computeroutput></para>    </section><anchor xml:id="_namespaceclang_1_1cxstring_1ae7319593ba701fd2e736767deae5ef5f"/>    <section>
    <title>createRef()<computeroutput>[3/3]</computeroutput></title>
<indexterm><primary>createRef</primary><secondary>clang::cxstring</secondary></indexterm>
<indexterm><primary>clang::cxstring</primary><secondary>createRef</secondary></indexterm>
<para><computeroutput>CXString clang::cxstring::createRef (StringRef String)</computeroutput></para>
<para>Create a CXString object from a StringRef. New CXString may contain a pointer to the undrelying data of <computeroutput>String</computeroutput>.</para>

<para><computeroutput>String</computeroutput> should not be changed by the caller afterwards. </para>
<para>
Definition at line <link linkend="__c_x_string_8cpp_source_1l00080">80</link> of file <link linkend="__c_x_string_8cpp_source">CXString.cpp</link>.</para>
<programlisting>00080 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00081 &#32;&#32;<emphasis role="comment">//&#32;If&#32;the&#32;string&#32;is&#32;not&#32;nul-terminated,&#32;we&#32;have&#32;to&#32;make&#32;a&#32;copy.</emphasis>
00082 
00083 &#32;&#32;<emphasis role="comment">//&#32;FIXME:&#32;This&#32;is&#32;doing&#32;a&#32;one&#32;past&#32;end&#32;read,&#32;and&#32;should&#32;be&#32;removed!&#32;For&#32;memory</emphasis>
00084 &#32;&#32;<emphasis role="comment">//&#32;we&#32;don&apos;t&#32;manage,&#32;the&#32;API&#32;string&#32;can&#32;become&#32;unterminated&#32;at&#32;any&#32;time&#32;outside</emphasis>
00085 &#32;&#32;<emphasis role="comment">//&#32;our&#32;control.</emphasis>
00086 
00087 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!String.empty()&#32;&amp;&amp;&#32;String.data()[String.size()]&#32;!=&#32;0)
00088 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1a62e4008f6bfd5c212aada470275c24b1">createDup</link>(String);
00089 
00090 &#32;&#32;CXString&#32;Result;
00091 &#32;&#32;Result.data&#32;=&#32;String.data();
00092 &#32;&#32;Result.private_flags&#32;=&#32;(unsigned)&#32;<link linkend="__c_x_string_8cpp_1ab8841ac79b6d3e2432ef36b111ccbdbead25153f33f1e6cfab882b9feb6790073">CXS_Unmanaged</link>;
00093 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;Result;
00094 }
</programlisting><para>
References <link linkend="__c_x_string_8cpp_source_1l00067">createDup()</link>, and <link linkend="__c_x_string_8cpp_source_1l00026">CXS_Unmanaged</link>.</para>
    </section><anchor xml:id="_namespaceclang_1_1cxstring_1a0ebb0924de5a075db7ae5d7937df8056"/>    <section>
    <title>createSet()</title>
<indexterm><primary>createSet</primary><secondary>clang::cxstring</secondary></indexterm>
<indexterm><primary>clang::cxstring</primary><secondary>createSet</secondary></indexterm>
<para><computeroutput>CXStringSet * clang::cxstring::createSet (const std::vector&lt; std::string &gt; &amp; Strings)</computeroutput></para><para>
Definition at line <link linkend="__c_x_string_8cpp_source_1l00113">113</link> of file <link linkend="__c_x_string_8cpp_source">CXString.cpp</link>.</para>
<programlisting>00113 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00114 &#32;&#32;CXStringSet&#32;*Set&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;CXStringSet;
00115 &#32;&#32;Set-&gt;Count&#32;=&#32;<link linkend="__c_x_loaded_diagnostic_8cpp_1a43f230387ba6f0bf2e696b6029b136bb">Strings</link>.size();
00116 &#32;&#32;Set-&gt;Strings&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;CXString[Set-&gt;Count];
00117 &#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">unsigned</emphasis>&#32;SI&#32;=&#32;0,&#32;SE&#32;=&#32;Set-&gt;Count;&#32;SI&#32;&lt;&#32;SE;&#32;++SI)
00118 &#32;&#32;&#32;&#32;Set-&gt;Strings[SI]&#32;=&#32;<link linkend="_namespaceclang_1_1cxstring_1a62e4008f6bfd5c212aada470275c24b1">createDup</link>(<link linkend="__c_x_loaded_diagnostic_8cpp_1a43f230387ba6f0bf2e696b6029b136bb">Strings</link>[SI]);
00119 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;Set;
00120 }
</programlisting><para>
References <link linkend="__c_x_string_8cpp_source_1l00067">createDup()</link>.</para>
<para>
Referenced by <link linkend="__c_index_8cpp_source_1l04903">clang_Cursor_getCXXManglings()</link>, and <link linkend="__c_index_8cpp_source_1l04917">clang_Cursor_getObjCManglings()</link>.</para>
    </section><anchor xml:id="_namespaceclang_1_1cxstring_1ad1ccb52527d7a42e4ad5c3e1f6af9907"/>    <section>
    <title>getCXStringBuf()</title>
<indexterm><primary>getCXStringBuf</primary><secondary>clang::cxstring</secondary></indexterm>
<indexterm><primary>clang::cxstring</primary><secondary>getCXStringBuf</secondary></indexterm>
<para><computeroutput><link linkend="_structclang_1_1cxstring_1_1_c_x_string_buf">CXStringBuf</link> * clang::cxstring::getCXStringBuf (CXTranslationUnit TU)</computeroutput></para><para>
Definition at line <link linkend="__c_x_string_8cpp_source_1l00144">144</link> of file <link linkend="__c_x_string_8cpp_source">CXString.cpp</link>.</para>
<programlisting>00144 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00145 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;TU-&gt;StringPool-&gt;getCXStringBuf(TU);
00146 }
</programlisting><para>
Referenced by <link linkend="__c_index_u_s_rs_8cpp_source_1l00038">clang_getCursorUSR()</link>.</para>
    </section><anchor xml:id="_namespaceclang_1_1cxstring_1a23337a6942da94448da8b249362d626e"/>    <section>
    <title>isManagedByPool()</title>
<indexterm><primary>isManagedByPool</primary><secondary>clang::cxstring</secondary></indexterm>
<indexterm><primary>clang::cxstring</primary><secondary>isManagedByPool</secondary></indexterm>
<para><computeroutput>bool clang::cxstring::isManagedByPool (CXString str)</computeroutput></para><para>

<para>Returns true if the CXString data is managed by a pool. </para>
</para>
<para>
Definition at line <link linkend="__c_x_string_8cpp_source_1l00152">152</link> of file <link linkend="__c_x_string_8cpp_source">CXString.cpp</link>.</para>
<programlisting>00152 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00153 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;((<link linkend="__c_x_string_8cpp_1ab8841ac79b6d3e2432ef36b111ccbdbe">CXStringFlag</link>)&#32;str.private_flags)&#32;==&#32;<link linkend="__c_x_string_8cpp_1ab8841ac79b6d3e2432ef36b111ccbdbeac341fab4481fed30e1d8bdb6f9ad7a64">CXS_StringBuf</link>;
00154 }
</programlisting><para>
References <link linkend="__c_x_string_8cpp_source_1l00033">CXS_StringBuf</link>.</para>
</section>
</section>
</section>
