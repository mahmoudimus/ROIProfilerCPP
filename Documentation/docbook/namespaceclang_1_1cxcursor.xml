<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_namespaceclang_1_1cxcursor" xml:lang="en-US">
<title>clang::cxcursor Namespace Reference</title>
<indexterm><primary>clang::cxcursor</primary></indexterm>
<simplesect>
    <title>Classes    </title>
        <itemizedlist>
            <listitem><para>class <link linkend="_classclang_1_1cxcursor_1_1_visitor_job">VisitorJob</link></para>
</listitem>
            <listitem><para>class <link linkend="_classclang_1_1cxcursor_1_1_cursor_visitor">CursorVisitor</link></para>
</listitem>
            <listitem><para>class <link linkend="_classclang_1_1cxcursor_1_1_macro_expansion_cursor">MacroExpansionCursor</link></para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Typedefs    </title>
        <itemizedlist>
            <listitem><para>typedef SmallVector&lt; <link linkend="_classclang_1_1cxcursor_1_1_visitor_job">VisitorJob</link>, 10 &gt; <link linkend="_namespaceclang_1_1cxcursor_1aab4e24121016c9d383e539a5938cb528">VisitorWorkList</link></para>
</listitem>
            <listitem><para>typedef llvm::PointerUnion&lt; const OverloadExpr *, const Decl *, OverloadedTemplateStorage * &gt; <link linkend="_namespaceclang_1_1cxcursor_1a944e67de567f6905f10876d7585ac43b">OverloadedDeclRefStorage</link></para>

<para>Internal storage for an overloaded declaration reference cursor;. </para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Functions    </title>
        <itemizedlist>
            <listitem><para>CXCursor <link linkend="_namespaceclang_1_1cxcursor_1a17dbc7b3a465bf9e70491f77a9a4f63b">getCursor</link> (CXTranslationUnit, SourceLocation)</para>
</listitem>
            <listitem><para>CXCursor <link linkend="_namespaceclang_1_1cxcursor_1ab61ec2059175833672e8e78a376bb218">MakeCXCursor</link> (const clang::Attr *A, const clang::Decl *Parent, CXTranslationUnit TU)</para>
</listitem>
            <listitem><para>CXCursor <link linkend="_namespaceclang_1_1cxcursor_1afb6735904aa885f268ed7ac96cd7d62c">MakeCXCursor</link> (const clang::Decl *D, CXTranslationUnit TU, SourceRange RegionOfInterest=SourceRange(), bool FirstInDeclGroup=true)</para>
</listitem>
            <listitem><para>CXCursor <link linkend="_namespaceclang_1_1cxcursor_1a6821c2068a78ae14f1f106a8dc777101">MakeCXCursor</link> (const clang::Stmt *S, const clang::Decl *Parent, CXTranslationUnit TU, SourceRange RegionOfInterest=SourceRange())</para>
</listitem>
            <listitem><para>CXCursor <link linkend="_namespaceclang_1_1cxcursor_1aa8325b990acde766ecd9276d7d9df53a">MakeCXCursorInvalid</link> (CXCursorKind K, CXTranslationUnit TU=nullptr)</para>
</listitem>
            <listitem><para>CXCursor <link linkend="_namespaceclang_1_1cxcursor_1a81d6b09cb8995b57d394a8372437902a">MakeCursorObjCSuperClassRef</link> (ObjCInterfaceDecl *Super, SourceLocation Loc, CXTranslationUnit TU)</para>

<para>Create an Objective-C superclass reference at the given location. </para>
</listitem>
            <listitem><para>std::pair&lt; const ObjCInterfaceDecl *, SourceLocation &gt; <link linkend="_namespaceclang_1_1cxcursor_1a071683bc881399c3bcadba5a4da408b2">getCursorObjCSuperClassRef</link> (CXCursor C)</para>
</listitem>
            <listitem><para>CXCursor <link linkend="_namespaceclang_1_1cxcursor_1ac238ecc9f974783b9d0c2129f5aa675f">MakeCursorObjCProtocolRef</link> (const ObjCProtocolDecl *Proto, SourceLocation Loc, CXTranslationUnit TU)</para>

<para>Create an Objective-C protocol reference at the given location. </para>
</listitem>
            <listitem><para>std::pair&lt; const ObjCProtocolDecl *, SourceLocation &gt; <link linkend="_namespaceclang_1_1cxcursor_1a1675d17bfec653da314fa2beff772829">getCursorObjCProtocolRef</link> (CXCursor C)</para>
</listitem>
            <listitem><para>CXCursor <link linkend="_namespaceclang_1_1cxcursor_1aa0bea074dd325615cb85819eac47264e">MakeCursorObjCClassRef</link> (const ObjCInterfaceDecl *Class, SourceLocation Loc, CXTranslationUnit TU)</para>

<para>Create an Objective-C class reference at the given location. </para>
</listitem>
            <listitem><para>std::pair&lt; const ObjCInterfaceDecl *, SourceLocation &gt; <link linkend="_namespaceclang_1_1cxcursor_1ad21fba4a3d5f6bdc63a19303b1cb42a3">getCursorObjCClassRef</link> (CXCursor C)</para>
</listitem>
            <listitem><para>CXCursor <link linkend="_namespaceclang_1_1cxcursor_1a3534c264c1431ec3d09c975fcafa263d">MakeCursorTypeRef</link> (const TypeDecl *Type, SourceLocation Loc, CXTranslationUnit TU)</para>

<para>Create a type reference at the given location. </para>
</listitem>
            <listitem><para>std::pair&lt; const TypeDecl *, SourceLocation &gt; <link linkend="_namespaceclang_1_1cxcursor_1ab0284c10c2cfeb2ffe43b99ec3e9dd9f">getCursorTypeRef</link> (CXCursor C)</para>
</listitem>
            <listitem><para>CXCursor <link linkend="_namespaceclang_1_1cxcursor_1ac63e4fd5fdbaf88d0632a7682afbf744">MakeCursorTemplateRef</link> (const TemplateDecl *Template, SourceLocation Loc, CXTranslationUnit TU)</para>

<para>Create a reference to a template at the given location. </para>
</listitem>
            <listitem><para>std::pair&lt; const TemplateDecl *, SourceLocation &gt; <link linkend="_namespaceclang_1_1cxcursor_1aacf77fc4aabf02cfa865e6fe19e55d08">getCursorTemplateRef</link> (CXCursor C)</para>
</listitem>
            <listitem><para>CXCursor <link linkend="_namespaceclang_1_1cxcursor_1a6eadc019bbae1f61434528c197111b0e">MakeCursorNamespaceRef</link> (const NamedDecl *NS, SourceLocation Loc, CXTranslationUnit TU)</para>
</listitem>
            <listitem><para>std::pair&lt; const NamedDecl *, SourceLocation &gt; <link linkend="_namespaceclang_1_1cxcursor_1ac87835a4525ca9f54e4666e7b76ec6f6">getCursorNamespaceRef</link> (CXCursor C)</para>
</listitem>
            <listitem><para>CXCursor <link linkend="_namespaceclang_1_1cxcursor_1abb9724d664f29289d46fb5b34eaf94e9">MakeCursorVariableRef</link> (const VarDecl *Var, SourceLocation Loc, CXTranslationUnit TU)</para>

<para>Create a reference to a variable at the given location. </para>
</listitem>
            <listitem><para>std::pair&lt; const VarDecl *, SourceLocation &gt; <link linkend="_namespaceclang_1_1cxcursor_1a53fa4c4c92a2fbaded59ad51eeed6e47">getCursorVariableRef</link> (CXCursor C)</para>
</listitem>
            <listitem><para>CXCursor <link linkend="_namespaceclang_1_1cxcursor_1ad70c49c226f87377bc26fba7a4dbe973">MakeCursorMemberRef</link> (const FieldDecl *Field, SourceLocation Loc, CXTranslationUnit TU)</para>

<para>Create a reference to a field at the given location. </para>
</listitem>
            <listitem><para>std::pair&lt; const FieldDecl *, SourceLocation &gt; <link linkend="_namespaceclang_1_1cxcursor_1af3f3d2390bed39285f0b3313c1fab84b">getCursorMemberRef</link> (CXCursor C)</para>
</listitem>
            <listitem><para>CXCursor <link linkend="_namespaceclang_1_1cxcursor_1a13176d36398baf45f34e16a34ec04793">MakeCursorCXXBaseSpecifier</link> (const CXXBaseSpecifier *B, CXTranslationUnit TU)</para>

<para>Create a CXX base specifier cursor. </para>
</listitem>
            <listitem><para>const CXXBaseSpecifier * <link linkend="_namespaceclang_1_1cxcursor_1a05b387c1d9aeb75b3de539f8622e0964">getCursorCXXBaseSpecifier</link> (CXCursor C)</para>

<para>Unpack a CXXBaseSpecifier cursor into a CXXBaseSpecifier. </para>
</listitem>
            <listitem><para>CXCursor <link linkend="_namespaceclang_1_1cxcursor_1a1fb1c1775cb1f7e194f860c8e5903a71">MakePreprocessingDirectiveCursor</link> (SourceRange Range, CXTranslationUnit TU)</para>

<para>Create a preprocessing directive cursor. </para>
</listitem>
            <listitem><para>SourceRange <link linkend="_namespaceclang_1_1cxcursor_1ad23bd48471b18d4d196d9777f3943e25">getCursorPreprocessingDirective</link> (CXCursor C)</para>

<para>Unpack a given preprocessing directive to retrieve its source range. </para>
</listitem>
            <listitem><para>CXCursor <link linkend="_namespaceclang_1_1cxcursor_1a62e05b7f28b894bf90226918a8f3386a">MakeMacroDefinitionCursor</link> (const MacroDefinitionRecord *, CXTranslationUnit TU)</para>

<para>Create a macro definition cursor. </para>
</listitem>
            <listitem><para>const MacroDefinitionRecord * <link linkend="_namespaceclang_1_1cxcursor_1a62254c8ae8eca4c0ca0f2d2a659e7d80">getCursorMacroDefinition</link> (CXCursor C)</para>
</listitem>
            <listitem><para>CXCursor <link linkend="_namespaceclang_1_1cxcursor_1a64450be5a9ef97c872d47219caaccfce">MakeMacroExpansionCursor</link> (MacroExpansion *, CXTranslationUnit TU)</para>

<para>Create a macro expansion cursor. </para>
</listitem>
            <listitem><para>CXCursor <link linkend="_namespaceclang_1_1cxcursor_1a2f0963c1339f8f17a78824250aee3918">MakeMacroExpansionCursor</link> (MacroDefinitionRecord *, SourceLocation Loc, CXTranslationUnit TU)</para>
</listitem>
            <listitem><para>CXCursor <link linkend="_namespaceclang_1_1cxcursor_1acc1961183c2fb603b894a7f8621b16bb">MakeInclusionDirectiveCursor</link> (InclusionDirective *, CXTranslationUnit TU)</para>

<para>Create an inclusion directive cursor. </para>
</listitem>
            <listitem><para>const InclusionDirective * <link linkend="_namespaceclang_1_1cxcursor_1a3894d584fef6edb8ba4333fc240315ac">getCursorInclusionDirective</link> (CXCursor C)</para>
</listitem>
            <listitem><para>CXCursor <link linkend="_namespaceclang_1_1cxcursor_1a2e83069419ec783a32e4ee2b67d5144a">MakeCursorLabelRef</link> (LabelStmt *Label, SourceLocation Loc, CXTranslationUnit TU)</para>

<para>Create a label reference at the given location. </para>
</listitem>
            <listitem><para>std::pair&lt; const LabelStmt *, SourceLocation &gt; <link linkend="_namespaceclang_1_1cxcursor_1a642e34370b829d06752d76d13c6a58dd">getCursorLabelRef</link> (CXCursor C)</para>
</listitem>
            <listitem><para>CXCursor <link linkend="_namespaceclang_1_1cxcursor_1a631225e024301b99cc72be73f0ee9271">MakeCursorOverloadedDeclRef</link> (const OverloadExpr *E, CXTranslationUnit TU)</para>

<para>Create a overloaded declaration reference cursor for an expression. </para>
</listitem>
            <listitem><para>CXCursor <link linkend="_namespaceclang_1_1cxcursor_1ad20f1744eb56e19aad0226a6cd6a0814">MakeCursorOverloadedDeclRef</link> (const Decl *D, SourceLocation Location, CXTranslationUnit TU)</para>

<para>Create a overloaded declaration reference cursor for a declaration. </para>
</listitem>
            <listitem><para>CXCursor <link linkend="_namespaceclang_1_1cxcursor_1aa16bf67907c5d2ea8d38dbf9c25115f3">MakeCursorOverloadedDeclRef</link> (TemplateName Template, SourceLocation Location, CXTranslationUnit TU)</para>

<para>Create a overloaded declaration reference cursor for a template name. </para>
</listitem>
            <listitem><para>std::pair&lt; <link linkend="_namespaceclang_1_1cxcursor_1a944e67de567f6905f10876d7585ac43b">OverloadedDeclRefStorage</link>, SourceLocation &gt; <link linkend="_namespaceclang_1_1cxcursor_1a4b41e93d6de24aed1376ec7f789efa2a">getCursorOverloadedDeclRef</link> (CXCursor C)</para>
</listitem>
            <listitem><para>const Decl * <link linkend="_namespaceclang_1_1cxcursor_1a1f702246831c96afd990e457613dc642">getCursorDecl</link> (CXCursor Cursor)</para>
</listitem>
            <listitem><para>const Expr * <link linkend="_namespaceclang_1_1cxcursor_1a80837a3710c6df0dfc24b5ee1d94ff9b">getCursorExpr</link> (CXCursor Cursor)</para>
</listitem>
            <listitem><para>const Stmt * <link linkend="_namespaceclang_1_1cxcursor_1a2d5cb233204f81be58bd21deb628c7ad">getCursorStmt</link> (CXCursor Cursor)</para>
</listitem>
            <listitem><para>const Attr * <link linkend="_namespaceclang_1_1cxcursor_1afdc6aa952869e16b4981b07f05adff7f">getCursorAttr</link> (CXCursor Cursor)</para>
</listitem>
            <listitem><para>ASTContext &amp; <link linkend="_namespaceclang_1_1cxcursor_1a9f29c286f26b3cf616331c7e6554d373">getCursorContext</link> (CXCursor Cursor)</para>
</listitem>
            <listitem><para>ASTUnit * <link linkend="_namespaceclang_1_1cxcursor_1a68c106f7bebde4f72b0fe7f6f67e8f29">getCursorASTUnit</link> (CXCursor Cursor)</para>
</listitem>
            <listitem><para>CXTranslationUnit <link linkend="_namespaceclang_1_1cxcursor_1a23a495df22339e8289ae6d2421f493b6">getCursorTU</link> (CXCursor Cursor)</para>
</listitem>
            <listitem><para>void <link linkend="_namespaceclang_1_1cxcursor_1ada86f0e873b92af5429ba6da7c7cd56f">getOverriddenCursors</link> (CXCursor cursor, SmallVectorImpl&lt; CXCursor &gt; &amp;overridden)</para>
</listitem>
            <listitem><para>void * <link linkend="_namespaceclang_1_1cxcursor_1af71b6ad00df82de093f378557ee93240">createOverridenCXCursorsPool</link> ()</para>
</listitem>
            <listitem><para>void <link linkend="_namespaceclang_1_1cxcursor_1a3e9eef17e1ba69991801fcfcfc8a0d9e">disposeOverridenCXCursorsPool</link> (void *pool)</para>

<para>Dispose of the overridden CXCursors pool. </para>
</listitem>
            <listitem><para>std::pair&lt; int, SourceLocation &gt; <link linkend="_namespaceclang_1_1cxcursor_1ac0203107f2338d86b2c77680155c3bf5">getSelectorIdentifierIndexAndLoc</link> (CXCursor)</para>
</listitem>
            <listitem><para>CXCursor <link linkend="_namespaceclang_1_1cxcursor_1a3fd86e25b3fca940466669d13b0ea93e">getSelectorIdentifierCursor</link> (int SelIdx, CXCursor cursor)</para>
</listitem>
            <listitem><para>CXCursor <link linkend="_namespaceclang_1_1cxcursor_1aa5198a2a166b25337d2c20917d3d28ce">getTypeRefCursor</link> (CXCursor cursor)</para>
</listitem>
            <listitem><para>bool <link linkend="_namespaceclang_1_1cxcursor_1a70c40817415cbc686e998bde4fe2e16e">getDeclCursorUSR</link> (const Decl *D, SmallVectorImpl&lt; char &gt; &amp;Buf)</para>
</listitem>
            <listitem><para>bool <link linkend="_namespaceclang_1_1cxcursor_1a6eba9b639ae06e944e28d8a44767cf72">operator==</link> (CXCursor X, CXCursor Y)</para>
</listitem>
            <listitem><para>bool <link linkend="_namespaceclang_1_1cxcursor_1a787f5669055ba25e698a444d0106005f">operator!=</link> (CXCursor X, CXCursor Y)</para>
</listitem>
            <listitem><para>bool <link linkend="_namespaceclang_1_1cxcursor_1a1ae32d54126c07eca2ab10d9ce40af7c">isFirstInDeclGroup</link> (CXCursor C)</para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Typedef Documentation</title>
<anchor xml:id="_namespaceclang_1_1cxcursor_1a944e67de567f6905f10876d7585ac43b"/>    <section>
    <title>OverloadedDeclRefStorage</title>
<indexterm><primary>OverloadedDeclRefStorage</primary><secondary>clang::cxcursor</secondary></indexterm>
<indexterm><primary>clang::cxcursor</primary><secondary>OverloadedDeclRefStorage</secondary></indexterm>
<para><computeroutput>typedef llvm::PointerUnion&lt;const OverloadExpr *, const Decl *, OverloadedTemplateStorage *&gt; <link linkend="_namespaceclang_1_1cxcursor_1a944e67de567f6905f10876d7585ac43b">clang::cxcursor::OverloadedDeclRefStorage</link></computeroutput></para><para>

<para>Internal storage for an overloaded declaration reference cursor;. </para>
</para>
<para>
Definition at line <link linkend="__c_x_cursor_8h_source_1l00230">230</link> of file <link linkend="__c_x_cursor_8h_source">CXCursor.h</link>.</para>
    </section><anchor xml:id="_namespaceclang_1_1cxcursor_1aab4e24121016c9d383e539a5938cb528"/>    <section>
    <title>VisitorWorkList</title>
<indexterm><primary>VisitorWorkList</primary><secondary>clang::cxcursor</secondary></indexterm>
<indexterm><primary>clang::cxcursor</primary><secondary>VisitorWorkList</secondary></indexterm>
<para><computeroutput>typedef SmallVector&lt;<link linkend="_classclang_1_1cxcursor_1_1_visitor_job">VisitorJob</link>, 10&gt; <link linkend="_namespaceclang_1_1cxcursor_1aab4e24121016c9d383e539a5938cb528">clang::cxcursor::VisitorWorkList</link></computeroutput></para><para>
Definition at line <link linkend="__cursor_visitor_8h_source_1l00060">60</link> of file <link linkend="__cursor_visitor_8h_source">CursorVisitor.h</link>.</para>
</section>
</section>
<section>
<title>Function Documentation</title>
<anchor xml:id="_namespaceclang_1_1cxcursor_1af71b6ad00df82de093f378557ee93240"/>    <section>
    <title>createOverridenCXCursorsPool()</title>
<indexterm><primary>createOverridenCXCursorsPool</primary><secondary>clang::cxcursor</secondary></indexterm>
<indexterm><primary>clang::cxcursor</primary><secondary>createOverridenCXCursorsPool</secondary></indexterm>
<para><computeroutput>void * clang::cxcursor::createOverridenCXCursorsPool ( )</computeroutput></para>
<para>Create an opaque pool used for fast generation of overridden CXCursor arrays. </para>
<para>
Definition at line <link linkend="__c_x_cursor_8cpp_source_1l01565">1565</link> of file <link linkend="__c_x_cursor_8cpp_source">CXCursor.cpp</link>.</para>
<programlisting>01565 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
01566 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">new</emphasis>&#32;OverridenCursorsPool();
01567 }
</programlisting><para>
Referenced by <link linkend="__c_index_8cpp_source_1l00073">clang::cxtu::MakeCXTranslationUnit()</link>.</para>
    </section><anchor xml:id="_namespaceclang_1_1cxcursor_1a3e9eef17e1ba69991801fcfcfc8a0d9e"/>    <section>
    <title>disposeOverridenCXCursorsPool()</title>
<indexterm><primary>disposeOverridenCXCursorsPool</primary><secondary>clang::cxcursor</secondary></indexterm>
<indexterm><primary>clang::cxcursor</primary><secondary>disposeOverridenCXCursorsPool</secondary></indexterm>
<para><computeroutput>void clang::cxcursor::disposeOverridenCXCursorsPool (void * pool)</computeroutput></para><para>

<para>Dispose of the overridden CXCursors pool. </para>
</para>
<para>
Definition at line <link linkend="__c_x_cursor_8cpp_source_1l01569">1569</link> of file <link linkend="__c_x_cursor_8cpp_source">CXCursor.cpp</link>.</para>
<programlisting>01569 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
01570 &#32;&#32;<emphasis role="keyword">delete</emphasis>&#32;<emphasis role="keyword">static_cast&lt;</emphasis>OverridenCursorsPool&#32;*<emphasis role="keyword">&gt;</emphasis>(pool);
01571 }
</programlisting><para>
Referenced by <link linkend="__c_index_8cpp_source_1l04207">clang_disposeTranslationUnit()</link>.</para>
    </section><anchor xml:id="_namespaceclang_1_1cxcursor_1a17dbc7b3a465bf9e70491f77a9a4f63b"/>    <section>
    <title>getCursor()</title>
<indexterm><primary>getCursor</primary><secondary>clang::cxcursor</secondary></indexterm>
<indexterm><primary>clang::cxcursor</primary><secondary>getCursor</secondary></indexterm>
<para><computeroutput>CXCursor clang::cxcursor::getCursor (CXTranslationUnit TU, SourceLocation SLoc)</computeroutput></para><para>
Definition at line <link linkend="__c_index_8cpp_source_1l06123">6123</link> of file <link linkend="__c_index_8cpp_source">CIndex.cpp</link>.</para>
<programlisting>06123 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
06124 &#32;&#32;assert(TU);
06125 
06126 &#32;&#32;<emphasis role="comment">//&#32;Guard&#32;against&#32;an&#32;invalid&#32;SourceLocation,&#32;or&#32;we&#32;may&#32;assert&#32;in&#32;one</emphasis>
06127 &#32;&#32;<emphasis role="comment">//&#32;of&#32;the&#32;following&#32;calls.</emphasis>
06128 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(SLoc.isInvalid())
06129 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__c_index_8cpp_1aa22233466eaf91f6f3cf6b84255c3b68">clang_getNullCursor</link>();
06130 
06131 &#32;&#32;ASTUnit&#32;*CXXUnit&#32;=&#32;cxtu::getASTUnit(TU);
06132 
06133 &#32;&#32;<emphasis role="comment">//&#32;Translate&#32;the&#32;given&#32;source&#32;location&#32;to&#32;make&#32;it&#32;point&#32;at&#32;the&#32;beginning&#32;of</emphasis>
06134 &#32;&#32;<emphasis role="comment">//&#32;the&#32;token&#32;under&#32;the&#32;cursor.</emphasis>
06135 &#32;&#32;SLoc&#32;=&#32;Lexer::GetBeginningOfToken(SLoc,&#32;CXXUnit-&gt;getSourceManager(),
06136 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;CXXUnit-&gt;getASTContext().getLangOpts());
06137 
06138 &#32;&#32;CXCursor&#32;Result&#32;=&#32;<link linkend="_namespaceclang_1_1cxcursor_1aa8325b990acde766ecd9276d7d9df53a">MakeCXCursorInvalid</link>(CXCursor_NoDeclFound);
06139 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(SLoc.isValid())&#32;{
06140 &#32;&#32;&#32;&#32;<link linkend="_struct_get_cursor_data">GetCursorData</link>&#32;ResultData(CXXUnit-&gt;getSourceManager(),&#32;SLoc,&#32;Result);
06141 &#32;&#32;&#32;&#32;<link linkend="_classclang_1_1cxcursor_1_1_cursor_visitor">CursorVisitor</link>&#32;CursorVis(TU,&#32;GetCursorVisitor,&#32;&amp;ResultData,
06142 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*VisitPreprocessorLast=*/</emphasis><emphasis role="keyword">true</emphasis>,
06143 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*VisitIncludedEntities=*/</emphasis><emphasis role="keyword">false</emphasis>,
06144 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;SourceLocation(SLoc));
06145 &#32;&#32;&#32;&#32;CursorVis.visitFileRegion();
06146 &#32;&#32;}
06147 
06148 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;Result;
06149 }
</programlisting><para>
References <link linkend="__c_index_8cpp_source_1l05901">clang_getNullCursor()</link>, and <link linkend="__c_x_cursor_8cpp_source_1l00034">MakeCXCursorInvalid()</link>.</para>
    </section><anchor xml:id="_namespaceclang_1_1cxcursor_1a68c106f7bebde4f72b0fe7f6f67e8f29"/>    <section>
    <title>getCursorASTUnit()</title>
<indexterm><primary>getCursorASTUnit</primary><secondary>clang::cxcursor</secondary></indexterm>
<indexterm><primary>clang::cxcursor</primary><secondary>getCursorASTUnit</secondary></indexterm>
<para><computeroutput>ASTUnit * clang::cxcursor::getCursorASTUnit (CXCursor Cursor)</computeroutput></para><para>
Definition at line <link linkend="__c_x_cursor_8cpp_source_1l01126">1126</link> of file <link linkend="__c_x_cursor_8cpp_source">CXCursor.cpp</link>.</para>
<programlisting>01126 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
01127 &#32;&#32;CXTranslationUnit&#32;TU&#32;=&#32;<link linkend="_namespaceclang_1_1cxcursor_1a23a495df22339e8289ae6d2421f493b6">getCursorTU</link>(Cursor);
01128 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!TU)
01129 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">nullptr</emphasis>;
01130 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;cxtu::getASTUnit(TU);
01131 }
</programlisting><para>
Referenced by <link linkend="__c_index_high_8cpp_source_1l00409">clang_findReferencesInFile()</link>, <link linkend="__c_x_cursor_8cpp_source_1l01518">clang_getCursorCompletionString()</link>, and <link linkend="__c_x_cursor_8cpp_source_1l00984">getCursorPreprocessingDirective()</link>.</para>
    </section><anchor xml:id="_namespaceclang_1_1cxcursor_1afdc6aa952869e16b4981b07f05adff7f"/>    <section>
    <title>getCursorAttr()</title>
<indexterm><primary>getCursorAttr</primary><secondary>clang::cxcursor</secondary></indexterm>
<indexterm><primary>clang::cxcursor</primary><secondary>getCursorAttr</secondary></indexterm>
<para><computeroutput>const Attr * clang::cxcursor::getCursorAttr (CXCursor Cursor)</computeroutput></para><para>
Definition at line <link linkend="__c_x_cursor_8cpp_source_1l01118">1118</link> of file <link linkend="__c_x_cursor_8cpp_source">CXCursor.cpp</link>.</para>
<programlisting>01118 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
01119 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keyword">const&#32;</emphasis>Attr&#32;*<emphasis role="keyword">&gt;</emphasis>(Cursor.data[1]);
01120 }
</programlisting><para>
Referenced by <link linkend="__c_index_8cpp_source_1l08664">clang_getIBOutletCollectionType()</link>.</para>
    </section><anchor xml:id="_namespaceclang_1_1cxcursor_1a9f29c286f26b3cf616331c7e6554d373"/>    <section>
    <title>getCursorContext()</title>
<indexterm><primary>getCursorContext</primary><secondary>clang::cxcursor</secondary></indexterm>
<indexterm><primary>clang::cxcursor</primary><secondary>getCursorContext</secondary></indexterm>
<para><computeroutput>ASTContext &amp; clang::cxcursor::getCursorContext (CXCursor Cursor)</computeroutput></para><para>
Definition at line <link linkend="__c_x_cursor_8cpp_source_1l01122">1122</link> of file <link linkend="__c_x_cursor_8cpp_source">CXCursor.cpp</link>.</para>
<programlisting>01122 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
01123 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxcursor_1a68c106f7bebde4f72b0fe7f6f67e8f29">getCursorASTUnit</link>(Cursor)-&gt;getASTContext();
01124 }
</programlisting><para>
Referenced by <link linkend="__c_index_8cpp_source_1l08421">clang_Cursor_getBriefCommentText()</link>, <link linkend="__c_index_8cpp_source_1l08393">clang_Cursor_getCommentRange()</link>, <link linkend="__c_index_8cpp_source_1l08406">clang_Cursor_getRawCommentText()</link>, <link linkend="__c_x_cursor_8cpp_source_1l01687">clang_Cursor_getReceiverType()</link>, <link linkend="__c_index_8cpp_source_1l04795">clang_Cursor_getSpellingNameRange()</link>, <link linkend="__c_x_cursor_8cpp_source_1l01648">clang_Cursor_isDynamicCall()</link>, <link linkend="__c_index_8cpp_source_1l05120">clang_getCursorDisplayName()</link>, <link linkend="__c_index_8cpp_source_1l05986">clang_getCursorLocation()</link>, <link linkend="__c_index_8cpp_source_1l05099">clang_getCursorPrettyPrinted()</link>, <link linkend="__c_index_8cpp_source_1l04931">clang_getCursorPrintingPolicy()</link>, <link linkend="__c_index_8cpp_source_1l06732">clang_getCursorReferenceNameRange()</link>, <link linkend="__c_index_8cpp_source_1l04634">clang_getCursorSpelling()</link>, <link linkend="__c_x_type_8cpp_source_1l01100">clang_getDeclObjCTypeEncoding()</link>, and <link linkend="__c_x_type_8cpp_source_1l00374">clang_getFieldDeclBitWidth()</link>.</para>
    </section><anchor xml:id="_namespaceclang_1_1cxcursor_1a05b387c1d9aeb75b3de539f8622e0964"/>    <section>
    <title>getCursorCXXBaseSpecifier()</title>
<indexterm><primary>getCursorCXXBaseSpecifier</primary><secondary>clang::cxcursor</secondary></indexterm>
<indexterm><primary>clang::cxcursor</primary><secondary>getCursorCXXBaseSpecifier</secondary></indexterm>
<para><computeroutput>const CXXBaseSpecifier * clang::cxcursor::getCursorCXXBaseSpecifier (CXCursor C)</computeroutput></para><para>

<para>Unpack a CXXBaseSpecifier cursor into a CXXBaseSpecifier. </para>
</para>
<para>
Definition at line <link linkend="__c_x_cursor_8cpp_source_1l00970">970</link> of file <link linkend="__c_x_cursor_8cpp_source">CXCursor.cpp</link>.</para>
<programlisting>00970 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00971 &#32;&#32;assert(C.kind&#32;==&#32;CXCursor_CXXBaseSpecifier);
00972 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keyword">const&#32;</emphasis>CXXBaseSpecifier&#32;*<emphasis role="keyword">&gt;</emphasis>(C.data[0]);
00973 }
</programlisting><para>
Referenced by <link linkend="__c_index_8cpp_source_1l05986">clang_getCursorLocation()</link>, <link linkend="__c_index_8cpp_source_1l04634">clang_getCursorSpelling()</link>, <link linkend="__c_x_type_8cpp_source_1l00216">clang_getCursorType()</link>, and <link linkend="__c_index_c_x_x_8cpp_source_1l00030">clang_getCXXAccessSpecifier()</link>.</para>
    </section><anchor xml:id="_namespaceclang_1_1cxcursor_1a1f702246831c96afd990e457613dc642"/>    <section>
    <title>getCursorDecl()</title>
<indexterm><primary>getCursorDecl</primary><secondary>clang::cxcursor</secondary></indexterm>
<indexterm><primary>clang::cxcursor</primary><secondary>getCursorDecl</secondary></indexterm>
<para><computeroutput>const Decl * clang::cxcursor::getCursorDecl (CXCursor Cursor)</computeroutput></para><para>
Definition at line <link linkend="__c_x_cursor_8cpp_source_1l01101">1101</link> of file <link linkend="__c_x_cursor_8cpp_source">CXCursor.cpp</link>.</para>
<programlisting>01101 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
01102 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keyword">const&#32;</emphasis>Decl&#32;*<emphasis role="keyword">&gt;</emphasis>(Cursor.data[0]);
01103 }
</programlisting><para>
Referenced by <link linkend="__c_x_cursor_8cpp_source_1l01283">clang_Cursor_getArgument()</link>, <link linkend="__c_index_8cpp_source_1l08421">clang_Cursor_getBriefCommentText()</link>, <link linkend="__c_index_8cpp_source_1l08393">clang_Cursor_getCommentRange()</link>, <link linkend="__c_index_8cpp_source_1l04903">clang_Cursor_getCXXManglings()</link>, <link linkend="__c_index_8cpp_source_1l04889">clang_Cursor_getMangling()</link>, <link linkend="__c_index_8cpp_source_1l08440">clang_Cursor_getModule()</link>, <link linkend="__c_x_cursor_8cpp_source_1l01261">clang_Cursor_getNumArguments()</link>, <link linkend="__c_x_cursor_8cpp_source_1l01316">clang_Cursor_getNumTemplateArguments()</link>, <link linkend="__c_index_8cpp_source_1l08317">clang_Cursor_getObjCDeclQualifiers()</link>, <link linkend="__c_index_8cpp_source_1l04917">clang_Cursor_getObjCManglings()</link>, <link linkend="__c_index_8cpp_source_1l08264">clang_Cursor_getObjCPropertyAttributes()</link>, <link linkend="__c_index_8cpp_source_1l08293">clang_Cursor_getObjCPropertyGetterName()</link>, <link linkend="__c_index_8cpp_source_1l08305">clang_Cursor_getObjCPropertySetterName()</link>, <link linkend="__c_index_8cpp_source_1l08406">clang_Cursor_getRawCommentText()</link>, <link linkend="__c_index_8cpp_source_1l04795">clang_Cursor_getSpellingNameRange()</link>, <link linkend="__c_index_8cpp_source_1l08925">clang_Cursor_getVarDeclInitializer()</link>, <link linkend="__c_index_8cpp_source_1l04132">clang_Cursor_hasAttrs()</link>, <link linkend="__c_index_8cpp_source_1l08950">clang_Cursor_hasVarDeclExternalStorage()</link>, <link linkend="__c_index_8cpp_source_1l08939">clang_Cursor_hasVarDeclGlobalStorage()</link>, <link linkend="__c_x_type_8cpp_source_1l01256">clang_Cursor_isAnonymous()</link>, <link linkend="__c_x_type_8cpp_source_1l01270">clang_Cursor_isAnonymousRecordDecl()</link>, <link linkend="__c_x_type_8cpp_source_1l01091">clang_Cursor_isBitField()</link>, <link linkend="__c_index_8cpp_source_1l08373">clang_Cursor_isExternalSymbol()</link>, <link linkend="__c_index_8cpp_source_1l03844">clang_Cursor_isFunctionInlined()</link>, <link linkend="__c_x_type_8cpp_source_1l01279">clang_Cursor_isInlineNamespace()</link>, <link linkend="__c_index_8cpp_source_1l08347">clang_Cursor_isObjCOptional()</link>, <link linkend="__c_index_8cpp_source_1l08360">clang_Cursor_isVariadic()</link>, <link linkend="__c_index_8cpp_source_1l08569">clang_CXXConstructor_isConvertingConstructor()</link>, <link linkend="__c_index_8cpp_source_1l08549">clang_CXXConstructor_isCopyConstructor()</link>, <link linkend="__c_index_8cpp_source_1l08539">clang_CXXConstructor_isDefaultConstructor()</link>, <link linkend="__c_index_8cpp_source_1l08559">clang_CXXConstructor_isMoveConstructor()</link>, <link linkend="__c_index_8cpp_source_1l08580">clang_CXXField_isMutable()</link>, <link linkend="__c_index_8cpp_source_1l08600">clang_CXXMethod_isConst()</link>, <link linkend="__c_index_8cpp_source_1l08610">clang_CXXMethod_isDefaulted()</link>, <link linkend="__c_index_8cpp_source_1l08590">clang_CXXMethod_isPureVirtual()</link>, <link linkend="__c_index_8cpp_source_1l08620">clang_CXXMethod_isStatic()</link>, <link linkend="__c_index_8cpp_source_1l08630">clang_CXXMethod_isVirtual()</link>, <link linkend="__c_index_8cpp_source_1l08640">clang_CXXRecord_isAbstract()</link>, <link linkend="__c_index_8cpp_source_1l08651">clang_EnumDecl_isScoped()</link>, <link linkend="__c_index_8cpp_source_1l06646">clang_getCanonicalCursor()</link>, <link linkend="__c_x_cursor_8cpp_source_1l01518">clang_getCursorCompletionString()</link>, <link linkend="__c_index_8cpp_source_1l06411">clang_getCursorDefinition()</link>, <link linkend="__c_index_8cpp_source_1l05120">clang_getCursorDisplayName()</link>, <link linkend="__c_index_8cpp_source_1l08239">clang_getCursorLexicalParent()</link>, <link linkend="__c_index_8cpp_source_1l07857">clang_getCursorLinkage()</link>, <link linkend="__c_index_8cpp_source_1l08097">clang_getCursorPlatformAvailability()</link>, <link linkend="__c_index_8cpp_source_1l05099">clang_getCursorPrettyPrinted()</link>, <link linkend="__c_index_8cpp_source_1l06301">clang_getCursorReferenced()</link>, <link linkend="__c_x_type_8cpp_source_1l00722">clang_getCursorResultType()</link>, <link linkend="__c_index_8cpp_source_1l08219">clang_getCursorSemanticParent()</link>, <link linkend="__c_index_8cpp_source_1l08154">clang_getCursorTLSKind()</link>, <link linkend="__c_x_type_8cpp_source_1l00216">clang_getCursorType()</link>, <link linkend="__c_index_u_s_rs_8cpp_source_1l00038">clang_getCursorUSR()</link>, <link linkend="__c_index_8cpp_source_1l07884">clang_getCursorVisibility()</link>, <link linkend="__c_x_type_8cpp_source_1l01100">clang_getDeclObjCTypeEncoding()</link>, <link linkend="__c_index_8cpp_source_1l06716">clang_getDefinitionSpellingAndExtent()</link>, <link linkend="__c_x_type_8cpp_source_1l00358">clang_getEnumConstantDeclUnsignedValue()</link>, <link linkend="__c_x_type_8cpp_source_1l00342">clang_getEnumConstantDeclValue()</link>, <link linkend="__c_x_type_8cpp_source_1l00324">clang_getEnumDeclIntegerType()</link>, <link linkend="__c_x_type_8cpp_source_1l00374">clang_getFieldDeclBitWidth()</link>, <link linkend="__c_index_c_x_x_8cpp_source_1l00082">clang_getSpecializedCursorTemplate()</link>, <link linkend="__c_x_type_8cpp_source_1l00306">clang_getTypedefDeclUnderlyingType()</link>, <link linkend="__c_index_8cpp_source_1l05939">clang_isInvalidDeclaration()</link>, <link linkend="__c_x_type_8cpp_source_1l01228">clang_Type_visitFields()</link>, <link linkend="__c_x_cursor_8cpp_source_1l01137">getOverriddenCursors()</link>, <link linkend="__c_x_cursor_8cpp_source_1l01173">getSelectorIdentifierCursor()</link>, and <link linkend="__c_x_cursor_8cpp_source_1l01156">getSelectorIdentifierIndexAndLoc()</link>.</para>
    </section><anchor xml:id="_namespaceclang_1_1cxcursor_1a80837a3710c6df0dfc24b5ee1d94ff9b"/>    <section>
    <title>getCursorExpr()</title>
<indexterm><primary>getCursorExpr</primary><secondary>clang::cxcursor</secondary></indexterm>
<indexterm><primary>clang::cxcursor</primary><secondary>getCursorExpr</secondary></indexterm>
<para><computeroutput>const Expr * clang::cxcursor::getCursorExpr (CXCursor Cursor)</computeroutput></para><para>
Definition at line <link linkend="__c_x_cursor_8cpp_source_1l01105">1105</link> of file <link linkend="__c_x_cursor_8cpp_source">CXCursor.cpp</link>.</para>
<programlisting>01105 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
01106 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;dyn_cast_or_null&lt;Expr&gt;(<link linkend="_namespaceclang_1_1cxcursor_1a2d5cb233204f81be58bd21deb628c7ad">getCursorStmt</link>(Cursor));
01107 }
</programlisting><para>
Referenced by <link linkend="__c_x_cursor_8cpp_source_1l01283">clang_Cursor_getArgument()</link>, <link linkend="__c_x_cursor_8cpp_source_1l01261">clang_Cursor_getNumArguments()</link>, <link linkend="__c_x_cursor_8cpp_source_1l01687">clang_Cursor_getReceiverType()</link>, <link linkend="__c_index_8cpp_source_1l04795">clang_Cursor_getSpellingNameRange()</link>, <link linkend="__c_x_cursor_8cpp_source_1l01648">clang_Cursor_isDynamicCall()</link>, <link linkend="__c_index_8cpp_source_1l06301">clang_getCursorReferenced()</link>, <link linkend="__c_index_8cpp_source_1l06732">clang_getCursorReferenceNameRange()</link>, <link linkend="__c_index_8cpp_source_1l04634">clang_getCursorSpelling()</link>, <link linkend="__c_x_type_8cpp_source_1l00216">clang_getCursorType()</link>, <link linkend="__c_x_cursor_8cpp_source_1l01173">getSelectorIdentifierCursor()</link>, <link linkend="__c_x_cursor_8cpp_source_1l01156">getSelectorIdentifierIndexAndLoc()</link>, and <link linkend="__c_x_cursor_8cpp_source_1l01196">getTypeRefCursor()</link>.</para>
    </section><anchor xml:id="_namespaceclang_1_1cxcursor_1a3894d584fef6edb8ba4333fc240315ac"/>    <section>
    <title>getCursorInclusionDirective()</title>
<indexterm><primary>getCursorInclusionDirective</primary><secondary>clang::cxcursor</secondary></indexterm>
<indexterm><primary>clang::cxcursor</primary><secondary>getCursorInclusionDirective</secondary></indexterm>
<para><computeroutput>const InclusionDirective * clang::cxcursor::getCursorInclusionDirective (CXCursor C)</computeroutput></para>
<para>Unpack a given inclusion directive cursor to retrieve its source range. </para>
<para>
Definition at line <link linkend="__c_x_cursor_8cpp_source_1l01040">1040</link> of file <link linkend="__c_x_cursor_8cpp_source">CXCursor.cpp</link>.</para>
<programlisting>01040 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
01041 &#32;&#32;assert(C.kind&#32;==&#32;CXCursor_InclusionDirective);
01042 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keyword">const&#32;</emphasis>InclusionDirective&#32;*<emphasis role="keyword">&gt;</emphasis>(C.data[0]);
01043 }
</programlisting><para>
Referenced by <link linkend="__c_index_8cpp_source_1l08256">clang_getIncludedFile()</link>.</para>
    </section><anchor xml:id="_namespaceclang_1_1cxcursor_1a642e34370b829d06752d76d13c6a58dd"/>    <section>
    <title>getCursorLabelRef()</title>
<indexterm><primary>getCursorLabelRef</primary><secondary>clang::cxcursor</secondary></indexterm>
<indexterm><primary>clang::cxcursor</primary><secondary>getCursorLabelRef</secondary></indexterm>
<para><computeroutput>std::pair&lt; const LabelStmt *, SourceLocation &gt; clang::cxcursor::getCursorLabelRef (CXCursor C)</computeroutput></para>
<para>Unpack a label reference into the label statement it refers to and the location of the reference. </para>
<para>
Definition at line <link linkend="__c_x_cursor_8cpp_source_1l01055">1055</link> of file <link linkend="__c_x_cursor_8cpp_source">CXCursor.cpp</link>.</para>
<programlisting>01055 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
01056 &#32;&#32;assert(C.kind&#32;==&#32;CXCursor_LabelRef);
01057 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::make_pair(<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keyword">const&#32;</emphasis>LabelStmt&#32;*<emphasis role="keyword">&gt;</emphasis>(C.data[0]),
01058 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;SourceLocation::getFromPtrEncoding(C.data[1]));
01059 }
</programlisting><para>
Referenced by <link linkend="__c_index_8cpp_source_1l05986">clang_getCursorLocation()</link>, and <link linkend="__c_index_8cpp_source_1l04634">clang_getCursorSpelling()</link>.</para>
    </section><anchor xml:id="_namespaceclang_1_1cxcursor_1a62254c8ae8eca4c0ca0f2d2a659e7d80"/>    <section>
    <title>getCursorMacroDefinition()</title>
<indexterm><primary>getCursorMacroDefinition</primary><secondary>clang::cxcursor</secondary></indexterm>
<indexterm><primary>clang::cxcursor</primary><secondary>getCursorMacroDefinition</secondary></indexterm>
<para><computeroutput>const MacroDefinitionRecord * clang::cxcursor::getCursorMacroDefinition (CXCursor C)</computeroutput></para>
<para>Unpack a given macro definition cursor to retrieve its source range. </para>
<para>
Definition at line <link linkend="__c_x_cursor_8cpp_source_1l00998">998</link> of file <link linkend="__c_x_cursor_8cpp_source">CXCursor.cpp</link>.</para>
<programlisting>00998 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00999 &#32;&#32;assert(C.kind&#32;==&#32;CXCursor_MacroDefinition);
01000 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keyword">const&#32;</emphasis>MacroDefinitionRecord&#32;*<emphasis role="keyword">&gt;</emphasis>(C.data[0]);
01001 }
</programlisting><para>
Referenced by <link linkend="__c_x_cursor_8cpp_source_1l01518">clang_getCursorCompletionString()</link>.</para>
    </section><anchor xml:id="_namespaceclang_1_1cxcursor_1af3f3d2390bed39285f0b3313c1fab84b"/>    <section>
    <title>getCursorMemberRef()</title>
<indexterm><primary>getCursorMemberRef</primary><secondary>clang::cxcursor</secondary></indexterm>
<indexterm><primary>clang::cxcursor</primary><secondary>getCursorMemberRef</secondary></indexterm>
<para><computeroutput>std::pair&lt; const FieldDecl *, SourceLocation &gt; clang::cxcursor::getCursorMemberRef (CXCursor C)</computeroutput></para>
<para>Unpack a MemberRef cursor into the field it references and the location where the reference occurred. </para>
<para>
Definition at line <link linkend="__c_x_cursor_8cpp_source_1l00958">958</link> of file <link linkend="__c_x_cursor_8cpp_source">CXCursor.cpp</link>.</para>
<programlisting>00958 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00959 &#32;&#32;assert(C.kind&#32;==&#32;CXCursor_MemberRef);
00960 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::make_pair(<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keyword">const&#32;</emphasis>FieldDecl&#32;*<emphasis role="keyword">&gt;</emphasis>(C.data[0]),
00961 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;SourceLocation::getFromPtrEncoding(C.data[1]));
00962 }
</programlisting><para>
Referenced by <link linkend="__c_index_8cpp_source_1l05986">clang_getCursorLocation()</link>, <link linkend="__c_index_8cpp_source_1l04634">clang_getCursorSpelling()</link>, and <link linkend="__c_x_type_8cpp_source_1l00216">clang_getCursorType()</link>.</para>
    </section><anchor xml:id="_namespaceclang_1_1cxcursor_1ac87835a4525ca9f54e4666e7b76ec6f6"/>    <section>
    <title>getCursorNamespaceRef()</title>
<indexterm><primary>getCursorNamespaceRef</primary><secondary>clang::cxcursor</secondary></indexterm>
<indexterm><primary>clang::cxcursor</primary><secondary>getCursorNamespaceRef</secondary></indexterm>
<para><computeroutput>std::pair&lt; const NamedDecl *, SourceLocation &gt; clang::cxcursor::getCursorNamespaceRef (CXCursor C)</computeroutput></para>
<para>Unpack a NamespaceRef cursor into the namespace or namespace alias it references and the location where the reference occurred. </para>
<para>
Definition at line <link linkend="__c_x_cursor_8cpp_source_1l00925">925</link> of file <link linkend="__c_x_cursor_8cpp_source">CXCursor.cpp</link>.</para>
<programlisting>00925 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00926 &#32;&#32;assert(C.kind&#32;==&#32;CXCursor_NamespaceRef);
00927 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::make_pair(<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keyword">const&#32;</emphasis>NamedDecl&#32;*<emphasis role="keyword">&gt;</emphasis>(C.data[0]),
00928 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;SourceLocation::getFromPtrEncoding(C.data[1]));
00929 }
</programlisting><para>
Referenced by <link linkend="__c_index_8cpp_source_1l05986">clang_getCursorLocation()</link>, and <link linkend="__c_index_8cpp_source_1l04634">clang_getCursorSpelling()</link>.</para>
    </section><anchor xml:id="_namespaceclang_1_1cxcursor_1ad21fba4a3d5f6bdc63a19303b1cb42a3"/>    <section>
    <title>getCursorObjCClassRef()</title>
<indexterm><primary>getCursorObjCClassRef</primary><secondary>clang::cxcursor</secondary></indexterm>
<indexterm><primary>clang::cxcursor</primary><secondary>getCursorObjCClassRef</secondary></indexterm>
<para><computeroutput>std::pair&lt; const ObjCInterfaceDecl *, SourceLocation &gt; clang::cxcursor::getCursorObjCClassRef (CXCursor C)</computeroutput></para>
<para>Unpack an ObjCClassRef cursor into the class it references and optionally the location where the reference occurred. </para>
<para>
Definition at line <link linkend="__c_x_cursor_8cpp_source_1l00876">876</link> of file <link linkend="__c_x_cursor_8cpp_source">CXCursor.cpp</link>.</para>
<programlisting>00876 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00877 &#32;&#32;assert(C.kind&#32;==&#32;CXCursor_ObjCClassRef);
00878 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::make_pair(<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keyword">const&#32;</emphasis>ObjCInterfaceDecl&#32;*<emphasis role="keyword">&gt;</emphasis>(C.data[0]),
00879 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;SourceLocation::getFromPtrEncoding(C.data[1]));
00880 }
</programlisting><para>
Referenced by <link linkend="__c_index_8cpp_source_1l05986">clang_getCursorLocation()</link>, <link linkend="__c_index_8cpp_source_1l04634">clang_getCursorSpelling()</link>, and <link linkend="__c_x_type_8cpp_source_1l00216">clang_getCursorType()</link>.</para>
    </section><anchor xml:id="_namespaceclang_1_1cxcursor_1a1675d17bfec653da314fa2beff772829"/>    <section>
    <title>getCursorObjCProtocolRef()</title>
<indexterm><primary>getCursorObjCProtocolRef</primary><secondary>clang::cxcursor</secondary></indexterm>
<indexterm><primary>clang::cxcursor</primary><secondary>getCursorObjCProtocolRef</secondary></indexterm>
<para><computeroutput>std::pair&lt; const ObjCProtocolDecl *, SourceLocation &gt; clang::cxcursor::getCursorObjCProtocolRef (CXCursor C)</computeroutput></para>
<para>Unpack an ObjCProtocolRef cursor into the protocol it references and optionally the location where the reference occurred. </para>
<para>
Definition at line <link linkend="__c_x_cursor_8cpp_source_1l00857">857</link> of file <link linkend="__c_x_cursor_8cpp_source">CXCursor.cpp</link>.</para>
<programlisting>00857 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00858 &#32;&#32;assert(C.kind&#32;==&#32;CXCursor_ObjCProtocolRef);
00859 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::make_pair(<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keyword">const&#32;</emphasis>ObjCProtocolDecl&#32;*<emphasis role="keyword">&gt;</emphasis>(C.data[0]),
00860 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;SourceLocation::getFromPtrEncoding(C.data[1]));
00861 }
</programlisting><para>
Referenced by <link linkend="__c_index_8cpp_source_1l05986">clang_getCursorLocation()</link>, and <link linkend="__c_index_8cpp_source_1l04634">clang_getCursorSpelling()</link>.</para>
    </section><anchor xml:id="_namespaceclang_1_1cxcursor_1a071683bc881399c3bcadba5a4da408b2"/>    <section>
    <title>getCursorObjCSuperClassRef()</title>
<indexterm><primary>getCursorObjCSuperClassRef</primary><secondary>clang::cxcursor</secondary></indexterm>
<indexterm><primary>clang::cxcursor</primary><secondary>getCursorObjCSuperClassRef</secondary></indexterm>
<para><computeroutput>std::pair&lt; const ObjCInterfaceDecl *, SourceLocation &gt; clang::cxcursor::getCursorObjCSuperClassRef (CXCursor C)</computeroutput></para>
<para>Unpack an ObjCSuperClassRef cursor into the interface it references and optionally the location where the reference occurred. </para>
<para>
Definition at line <link linkend="__c_x_cursor_8cpp_source_1l00841">841</link> of file <link linkend="__c_x_cursor_8cpp_source">CXCursor.cpp</link>.</para>
<programlisting>00841 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00842 &#32;&#32;assert(C.kind&#32;==&#32;CXCursor_ObjCSuperClassRef);
00843 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::make_pair(<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keyword">const&#32;</emphasis>ObjCInterfaceDecl&#32;*<emphasis role="keyword">&gt;</emphasis>(C.data[0]),
00844 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;SourceLocation::getFromPtrEncoding(C.data[1]));
00845 }
</programlisting><para>
Referenced by <link linkend="__c_index_8cpp_source_1l05986">clang_getCursorLocation()</link>, <link linkend="__c_index_8cpp_source_1l04634">clang_getCursorSpelling()</link>, and <link linkend="__c_x_type_8cpp_source_1l00216">clang_getCursorType()</link>.</para>
    </section><anchor xml:id="_namespaceclang_1_1cxcursor_1a4b41e93d6de24aed1376ec7f789efa2a"/>    <section>
    <title>getCursorOverloadedDeclRef()</title>
<indexterm><primary>getCursorOverloadedDeclRef</primary><secondary>clang::cxcursor</secondary></indexterm>
<indexterm><primary>clang::cxcursor</primary><secondary>getCursorOverloadedDeclRef</secondary></indexterm>
<para><computeroutput>std::pair&lt; <link linkend="_namespaceclang_1_1cxcursor_1a944e67de567f6905f10876d7585ac43b">cxcursor::OverloadedDeclRefStorage</link>, SourceLocation &gt; clang::cxcursor::getCursorOverloadedDeclRef (CXCursor C)</computeroutput></para>
<para>Unpack an overloaded declaration reference into an expression, declaration, or template name along with the source location. </para>
<para>
Definition at line <link linkend="__c_x_cursor_8cpp_source_1l01094">1094</link> of file <link linkend="__c_x_cursor_8cpp_source">CXCursor.cpp</link>.</para>
<programlisting>01094 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
01095 &#32;&#32;assert(C.kind&#32;==&#32;CXCursor_OverloadedDeclRef);
01096 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::make_pair(OverloadedDeclRefStorage::getFromOpaqueValue(
01097 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const_cast&lt;</emphasis><emphasis role="keywordtype">void</emphasis>&#32;*<emphasis role="keyword">&gt;</emphasis>(C.data[0])),
01098 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;SourceLocation::getFromPtrEncoding(C.data[1]));
01099 }
</programlisting><para>
Referenced by <link linkend="__c_index_8cpp_source_1l05986">clang_getCursorLocation()</link>, <link linkend="__c_index_8cpp_source_1l04634">clang_getCursorSpelling()</link>, <link linkend="__c_index_8cpp_source_1l06670">clang_getNumOverloadedDecls()</link>, and <link linkend="__c_index_8cpp_source_1l06689">clang_getOverloadedDecl()</link>.</para>
    </section><anchor xml:id="_namespaceclang_1_1cxcursor_1ad23bd48471b18d4d196d9777f3943e25"/>    <section>
    <title>getCursorPreprocessingDirective()</title>
<indexterm><primary>getCursorPreprocessingDirective</primary><secondary>clang::cxcursor</secondary></indexterm>
<indexterm><primary>clang::cxcursor</primary><secondary>getCursorPreprocessingDirective</secondary></indexterm>
<para><computeroutput>SourceRange clang::cxcursor::getCursorPreprocessingDirective (CXCursor C)</computeroutput></para><para>

<para>Unpack a given preprocessing directive to retrieve its source range. </para>
</para>
<para>
Definition at line <link linkend="__c_x_cursor_8cpp_source_1l00984">984</link> of file <link linkend="__c_x_cursor_8cpp_source">CXCursor.cpp</link>.</para>
<programlisting>00984 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00985 &#32;&#32;assert(C.kind&#32;==&#32;CXCursor_PreprocessingDirective);
00986 &#32;&#32;SourceRange&#32;Range(SourceLocation::getFromPtrEncoding(C.data[0]),
00987 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;SourceLocation::getFromPtrEncoding(C.data[1]));
00988 &#32;&#32;ASTUnit&#32;*TU&#32;=&#32;<link linkend="_namespaceclang_1_1cxcursor_1a68c106f7bebde4f72b0fe7f6f67e8f29">getCursorASTUnit</link>(C);
00989 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;TU-&gt;mapRangeFromPreamble(Range);
00990 }
</programlisting><para>
References <link linkend="__c_x_cursor_8cpp_source_1l01126">getCursorASTUnit()</link>.</para>
    </section><anchor xml:id="_namespaceclang_1_1cxcursor_1a2d5cb233204f81be58bd21deb628c7ad"/>    <section>
    <title>getCursorStmt()</title>
<indexterm><primary>getCursorStmt</primary><secondary>clang::cxcursor</secondary></indexterm>
<indexterm><primary>clang::cxcursor</primary><secondary>getCursorStmt</secondary></indexterm>
<para><computeroutput>const Stmt * clang::cxcursor::getCursorStmt (CXCursor Cursor)</computeroutput></para><para>
Definition at line <link linkend="__c_x_cursor_8cpp_source_1l01109">1109</link> of file <link linkend="__c_x_cursor_8cpp_source">CXCursor.cpp</link>.</para>
<programlisting>01109 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
01110 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(Cursor.kind&#32;==&#32;CXCursor_ObjCSuperClassRef&#32;||
01111 &#32;&#32;&#32;&#32;&#32;&#32;Cursor.kind&#32;==&#32;CXCursor_ObjCProtocolRef&#32;||
01112 &#32;&#32;&#32;&#32;&#32;&#32;Cursor.kind&#32;==&#32;CXCursor_ObjCClassRef)
01113 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">nullptr</emphasis>;
01114 
01115 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keyword">const&#32;</emphasis>Stmt&#32;*<emphasis role="keyword">&gt;</emphasis>(Cursor.data[1]);
01116 }
</programlisting><para>
Referenced by <link linkend="__c_index_8cpp_source_1l04795">clang_Cursor_getSpellingNameRange()</link>.</para>
    </section><anchor xml:id="_namespaceclang_1_1cxcursor_1aacf77fc4aabf02cfa865e6fe19e55d08"/>    <section>
    <title>getCursorTemplateRef()</title>
<indexterm><primary>getCursorTemplateRef</primary><secondary>clang::cxcursor</secondary></indexterm>
<indexterm><primary>clang::cxcursor</primary><secondary>getCursorTemplateRef</secondary></indexterm>
<para><computeroutput>std::pair&lt; const TemplateDecl *, SourceLocation &gt; clang::cxcursor::getCursorTemplateRef (CXCursor C)</computeroutput></para>
<para>Unpack a TemplateRef cursor into the template it references and the location where the reference occurred. </para>
<para>
Definition at line <link linkend="__c_x_cursor_8cpp_source_1l00907">907</link> of file <link linkend="__c_x_cursor_8cpp_source">CXCursor.cpp</link>.</para>
<programlisting>00907 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00908 &#32;&#32;assert(C.kind&#32;==&#32;CXCursor_TemplateRef);
00909 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::make_pair(<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keyword">const&#32;</emphasis>TemplateDecl&#32;*<emphasis role="keyword">&gt;</emphasis>(C.data[0]),
00910 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;SourceLocation::getFromPtrEncoding(C.data[1]));
00911 }
</programlisting><para>
Referenced by <link linkend="__c_index_8cpp_source_1l05986">clang_getCursorLocation()</link>, and <link linkend="__c_index_8cpp_source_1l04634">clang_getCursorSpelling()</link>.</para>
    </section><anchor xml:id="_namespaceclang_1_1cxcursor_1a23a495df22339e8289ae6d2421f493b6"/>    <section>
    <title>getCursorTU()</title>
<indexterm><primary>getCursorTU</primary><secondary>clang::cxcursor</secondary></indexterm>
<indexterm><primary>clang::cxcursor</primary><secondary>getCursorTU</secondary></indexterm>
<para><computeroutput>CXTranslationUnit clang::cxcursor::getCursorTU (CXCursor Cursor)</computeroutput></para><para>
Definition at line <link linkend="__c_x_cursor_8cpp_source_1l01133">1133</link> of file <link linkend="__c_x_cursor_8cpp_source">CXCursor.cpp</link>.</para>
<programlisting>01133 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
01134 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">static_cast&lt;</emphasis>CXTranslationUnit<emphasis role="keyword">&gt;</emphasis>(<emphasis role="keyword">const_cast&lt;</emphasis><emphasis role="keywordtype">void</emphasis>&#32;*<emphasis role="keyword">&gt;</emphasis>(Cursor.data[2]));
01135 }
</programlisting><para>
Referenced by <link linkend="__c_x_cursor_8cpp_source_1l01283">clang_Cursor_getArgument()</link>, <link linkend="__c_x_cursor_8cpp_source_1l01687">clang_Cursor_getReceiverType()</link>, <link linkend="__c_x_cursor_8cpp_source_1l01257">clang_Cursor_getTranslationUnit()</link>, <link linkend="__c_index_8cpp_source_1l08925">clang_Cursor_getVarDeclInitializer()</link>, <link linkend="__c_x_cursor_8cpp_source_1l01628">clang_disposeOverriddenCursors()</link>, <link linkend="__c_index_8cpp_source_1l06646">clang_getCanonicalCursor()</link>, <link linkend="__c_index_8cpp_source_1l06411">clang_getCursorDefinition()</link>, <link linkend="__c_index_8cpp_source_1l06301">clang_getCursorReferenced()</link>, <link linkend="__c_x_type_8cpp_source_1l00722">clang_getCursorResultType()</link>, <link linkend="__c_index_8cpp_source_1l04634">clang_getCursorSpelling()</link>, <link linkend="__c_x_type_8cpp_source_1l00216">clang_getCursorType()</link>, <link linkend="__c_index_u_s_rs_8cpp_source_1l00038">clang_getCursorUSR()</link>, <link linkend="__c_x_type_8cpp_source_1l00324">clang_getEnumDeclIntegerType()</link>, <link linkend="__c_index_8cpp_source_1l08664">clang_getIBOutletCollectionType()</link>, <link linkend="__c_index_8cpp_source_1l06689">clang_getOverloadedDecl()</link>, <link linkend="__c_x_cursor_8cpp_source_1l01573">clang_getOverriddenCursors()</link>, <link linkend="__c_index_c_x_x_8cpp_source_1l00082">clang_getSpecializedCursorTemplate()</link>, <link linkend="__c_x_type_8cpp_source_1l00306">clang_getTypedefDeclUnderlyingType()</link>, <link linkend="__c_index_8cpp_source_1l04555">clang_visitChildren()</link>, <link linkend="__c_x_cursor_8cpp_source_1l01137">getOverriddenCursors()</link>, and <link linkend="__c_x_cursor_8cpp_source_1l01196">getTypeRefCursor()</link>.</para>
    </section><anchor xml:id="_namespaceclang_1_1cxcursor_1ab0284c10c2cfeb2ffe43b99ec3e9dd9f"/>    <section>
    <title>getCursorTypeRef()</title>
<indexterm><primary>getCursorTypeRef</primary><secondary>clang::cxcursor</secondary></indexterm>
<indexterm><primary>clang::cxcursor</primary><secondary>getCursorTypeRef</secondary></indexterm>
<para><computeroutput>std::pair&lt; const TypeDecl *, SourceLocation &gt; clang::cxcursor::getCursorTypeRef (CXCursor C)</computeroutput></para>
<para>Unpack a TypeRef cursor into the class it references and optionally the location where the reference occurred. </para>
<para>
Definition at line <link linkend="__c_x_cursor_8cpp_source_1l00891">891</link> of file <link linkend="__c_x_cursor_8cpp_source">CXCursor.cpp</link>.</para>
<programlisting>00891 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00892 &#32;&#32;assert(C.kind&#32;==&#32;CXCursor_TypeRef);
00893 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::make_pair(<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keyword">const&#32;</emphasis>TypeDecl&#32;*<emphasis role="keyword">&gt;</emphasis>(C.data[0]),
00894 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;SourceLocation::getFromPtrEncoding(C.data[1]));
00895 }
</programlisting><para>
Referenced by <link linkend="__c_index_8cpp_source_1l05986">clang_getCursorLocation()</link>, <link linkend="__c_index_8cpp_source_1l04634">clang_getCursorSpelling()</link>, and <link linkend="__c_x_type_8cpp_source_1l00216">clang_getCursorType()</link>.</para>
    </section><anchor xml:id="_namespaceclang_1_1cxcursor_1a53fa4c4c92a2fbaded59ad51eeed6e47"/>    <section>
    <title>getCursorVariableRef()</title>
<indexterm><primary>getCursorVariableRef</primary><secondary>clang::cxcursor</secondary></indexterm>
<indexterm><primary>clang::cxcursor</primary><secondary>getCursorVariableRef</secondary></indexterm>
<para><computeroutput>std::pair&lt; const VarDecl *, SourceLocation &gt; clang::cxcursor::getCursorVariableRef (CXCursor C)</computeroutput></para>
<para>Unpack a VariableRef cursor into the variable it references and the location where the where the reference occurred. </para>
<para>
Definition at line <link linkend="__c_x_cursor_8cpp_source_1l00941">941</link> of file <link linkend="__c_x_cursor_8cpp_source">CXCursor.cpp</link>.</para>
<programlisting>00941 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00942 &#32;&#32;assert(C.kind&#32;==&#32;CXCursor_VariableRef);
00943 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::make_pair(<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keyword">const&#32;</emphasis>VarDecl&#32;*<emphasis role="keyword">&gt;</emphasis>(C.data[0]),
00944 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;SourceLocation::getFromPtrEncoding(C.data[1]));
00945 }
</programlisting><para>
Referenced by <link linkend="__c_index_8cpp_source_1l05986">clang_getCursorLocation()</link>, <link linkend="__c_index_8cpp_source_1l04634">clang_getCursorSpelling()</link>, and <link linkend="__c_x_type_8cpp_source_1l00216">clang_getCursorType()</link>.</para>
    </section><anchor xml:id="_namespaceclang_1_1cxcursor_1a70c40817415cbc686e998bde4fe2e16e"/>    <section>
    <title>getDeclCursorUSR()</title>
<indexterm><primary>getDeclCursorUSR</primary><secondary>clang::cxcursor</secondary></indexterm>
<indexterm><primary>clang::cxcursor</primary><secondary>getDeclCursorUSR</secondary></indexterm>
<para><computeroutput>bool clang::cxcursor::getDeclCursorUSR (const Decl * D, SmallVectorImpl&lt; char &gt; &amp; Buf)</computeroutput></para>
<para>Generate a USR for <itemizedlist>
<listitem>
<para>D and put it in </para>
</listitem>
<listitem>
<para>Buf. <formalpara><title>Returns</title>

<para>true if no USR was computed or the result should be ignored, false otherwise. </para>
</formalpara>
</para>
</listitem>
</itemizedlist>
</para>
<para>
Definition at line <link linkend="__c_index_u_s_rs_8cpp_source_1l00034">34</link> of file <link linkend="__c_index_u_s_rs_8cpp_source">CIndexUSRs.cpp</link>.</para>
<programlisting>00034 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00035 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;generateUSRForDecl(D,&#32;Buf);
00036 }
</programlisting><para>
Referenced by <link linkend="__c_index_u_s_rs_8cpp_source_1l00038">clang_getCursorUSR()</link>.</para>
    </section><anchor xml:id="_namespaceclang_1_1cxcursor_1ada86f0e873b92af5429ba6da7c7cd56f"/>    <section>
    <title>getOverriddenCursors()</title>
<indexterm><primary>getOverriddenCursors</primary><secondary>clang::cxcursor</secondary></indexterm>
<indexterm><primary>clang::cxcursor</primary><secondary>getOverriddenCursors</secondary></indexterm>
<para><computeroutput>void clang::cxcursor::getOverriddenCursors (CXCursor cursor, SmallVectorImpl&lt; CXCursor &gt; &amp; overridden)</computeroutput></para><para>
Definition at line <link linkend="__c_x_cursor_8cpp_source_1l01137">1137</link> of file <link linkend="__c_x_cursor_8cpp_source">CXCursor.cpp</link>.</para>
<programlisting>01138 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
01139 &#32;&#32;assert(<link linkend="__c_index_8cpp_1a5d47db8f608ae0c266d6551875d46b80">clang_isDeclaration</link>(cursor.kind));
01140 &#32;&#32;<emphasis role="keyword">const</emphasis>&#32;NamedDecl&#32;*D&#32;=&#32;dyn_cast_or_null&lt;NamedDecl&gt;(<link linkend="_namespaceclang_1_1cxcursor_1a1f702246831c96afd990e457613dc642">getCursorDecl</link>(cursor));
01141 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!D)
01142 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
01143 
01144 &#32;&#32;CXTranslationUnit&#32;TU&#32;=&#32;<link linkend="_namespaceclang_1_1cxcursor_1a23a495df22339e8289ae6d2421f493b6">getCursorTU</link>(cursor);
01145 &#32;&#32;SmallVector&lt;const&#32;NamedDecl&#32;*,&#32;8&gt;&#32;OverDecls;
01146 &#32;&#32;D-&gt;getASTContext().getOverriddenMethods(D,&#32;OverDecls);
01147 
01148 &#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(SmallVectorImpl&lt;const&#32;NamedDecl&#32;*&gt;::iterator&#32;I&#32;=&#32;OverDecls.begin(),
01149 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;E&#32;=&#32;OverDecls.end();
01150 &#32;&#32;&#32;&#32;&#32;&#32;&#32;I&#32;!=&#32;E;&#32;++I)&#32;{
01151 &#32;&#32;&#32;&#32;overridden.push_back(<link linkend="_namespaceclang_1_1cxcursor_1ab61ec2059175833672e8e78a376bb218">MakeCXCursor</link>(*I,&#32;TU));
01152 &#32;&#32;}
01153 }
</programlisting><para>
References <link linkend="__c_index_8cpp_source_1l05934">clang_isDeclaration()</link>, <link linkend="__c_x_cursor_8cpp_source_1l01101">getCursorDecl()</link>, <link linkend="__c_x_cursor_8cpp_source_1l01133">getCursorTU()</link>, and <link linkend="_namespaceclang_1_1cxcursor_1ab61ec2059175833672e8e78a376bb218">MakeCXCursor()</link>.</para>
<para>
Referenced by <link linkend="__c_x_cursor_8cpp_source_1l01573">clang_getOverriddenCursors()</link>.</para>
    </section><anchor xml:id="_namespaceclang_1_1cxcursor_1a3fd86e25b3fca940466669d13b0ea93e"/>    <section>
    <title>getSelectorIdentifierCursor()</title>
<indexterm><primary>getSelectorIdentifierCursor</primary><secondary>clang::cxcursor</secondary></indexterm>
<indexterm><primary>clang::cxcursor</primary><secondary>getSelectorIdentifierCursor</secondary></indexterm>
<para><computeroutput>CXCursor clang::cxcursor::getSelectorIdentifierCursor (int SelIdx, CXCursor cursor)</computeroutput></para><para>
Definition at line <link linkend="__c_x_cursor_8cpp_source_1l01173">1173</link> of file <link linkend="__c_x_cursor_8cpp_source">CXCursor.cpp</link>.</para>
<programlisting>01173 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
01174 &#32;&#32;CXCursor&#32;newCursor&#32;=&#32;cursor;
01175 
01176 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(cursor.kind&#32;==&#32;CXCursor_ObjCMessageExpr)&#32;{
01177 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(SelIdx&#32;==&#32;-1&#32;||
01178 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>(SelIdx)&#32;&gt;=
01179 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cast&lt;ObjCMessageExpr&gt;(<link linkend="_namespaceclang_1_1cxcursor_1a80837a3710c6df0dfc24b5ee1d94ff9b">getCursorExpr</link>(cursor))-&gt;getNumSelectorLocs())
01180 &#32;&#32;&#32;&#32;&#32;&#32;newCursor.xdata&#32;=&#32;-1;
01181 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
01182 &#32;&#32;&#32;&#32;&#32;&#32;newCursor.xdata&#32;=&#32;SelIdx;
01183 &#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(cursor.kind&#32;==&#32;CXCursor_ObjCClassMethodDecl&#32;||
01184 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cursor.kind&#32;==&#32;CXCursor_ObjCInstanceMethodDecl)&#32;{
01185 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(SelIdx&#32;==&#32;-1&#32;||
01186 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>(SelIdx)&#32;&gt;=
01187 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cast&lt;ObjCMethodDecl&gt;(<link linkend="_namespaceclang_1_1cxcursor_1a1f702246831c96afd990e457613dc642">getCursorDecl</link>(cursor))-&gt;getNumSelectorLocs())
01188 &#32;&#32;&#32;&#32;&#32;&#32;newCursor.xdata&#32;=&#32;-1;
01189 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
01190 &#32;&#32;&#32;&#32;&#32;&#32;newCursor.xdata&#32;=&#32;SelIdx;
01191 &#32;&#32;}
01192 
01193 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;newCursor;
01194 }
</programlisting><para>
References <link linkend="__c_x_cursor_8cpp_source_1l01101">getCursorDecl()</link>, and <link linkend="__c_x_cursor_8cpp_source_1l01105">getCursorExpr()</link>.</para>
    </section><anchor xml:id="_namespaceclang_1_1cxcursor_1ac0203107f2338d86b2c77680155c3bf5"/>    <section>
    <title>getSelectorIdentifierIndexAndLoc()</title>
<indexterm><primary>getSelectorIdentifierIndexAndLoc</primary><secondary>clang::cxcursor</secondary></indexterm>
<indexterm><primary>clang::cxcursor</primary><secondary>getSelectorIdentifierIndexAndLoc</secondary></indexterm>
<para><computeroutput>std::pair&lt; int, SourceLocation &gt; clang::cxcursor::getSelectorIdentifierIndexAndLoc (CXCursor cursor)</computeroutput></para>
<para>Returns a index/location pair for a selector identifier if the cursor points to one. </para>
<para>
Definition at line <link linkend="__c_x_cursor_8cpp_source_1l01156">1156</link> of file <link linkend="__c_x_cursor_8cpp_source">CXCursor.cpp</link>.</para>
<programlisting>01156 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
01157 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(cursor.kind&#32;==&#32;CXCursor_ObjCMessageExpr)&#32;{
01158 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(cursor.xdata&#32;!=&#32;-1)
01159 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::make_pair(cursor.xdata,
01160 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cast&lt;ObjCMessageExpr&gt;(<link linkend="_namespaceclang_1_1cxcursor_1a80837a3710c6df0dfc24b5ee1d94ff9b">getCursorExpr</link>(cursor))
01161 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;-&gt;getSelectorLoc(cursor.xdata));
01162 &#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(cursor.kind&#32;==&#32;CXCursor_ObjCClassMethodDecl&#32;||
01163 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cursor.kind&#32;==&#32;CXCursor_ObjCInstanceMethodDecl)&#32;{
01164 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(cursor.xdata&#32;!=&#32;-1)
01165 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::make_pair(cursor.xdata,
01166 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cast&lt;ObjCMethodDecl&gt;(<link linkend="_namespaceclang_1_1cxcursor_1a1f702246831c96afd990e457613dc642">getCursorDecl</link>(cursor))
01167 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;-&gt;getSelectorLoc(cursor.xdata));
01168 &#32;&#32;}
01169 
01170 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::make_pair(-1,&#32;SourceLocation());
01171 }
</programlisting><para>
References <link linkend="__c_x_cursor_8cpp_source_1l01101">getCursorDecl()</link>, and <link linkend="__c_x_cursor_8cpp_source_1l01105">getCursorExpr()</link>.</para>
<para>
Referenced by <link linkend="__c_index_8cpp_source_1l06666">clang_Cursor_getObjCSelectorIndex()</link>.</para>
    </section><anchor xml:id="_namespaceclang_1_1cxcursor_1aa5198a2a166b25337d2c20917d3d28ce"/>    <section>
    <title>getTypeRefCursor()</title>
<indexterm><primary>getTypeRefCursor</primary><secondary>clang::cxcursor</secondary></indexterm>
<indexterm><primary>clang::cxcursor</primary><secondary>getTypeRefCursor</secondary></indexterm>
<para><computeroutput>CXCursor clang::cxcursor::getTypeRefCursor (CXCursor cursor)</computeroutput></para><para>
Definition at line <link linkend="__c_x_cursor_8cpp_source_1l01196">1196</link> of file <link linkend="__c_x_cursor_8cpp_source">CXCursor.cpp</link>.</para>
<programlisting>01196 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
01197 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(cursor.kind&#32;!=&#32;CXCursor_CallExpr)
01198 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;cursor;
01199 
01200 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(cursor.xdata&#32;==&#32;0)
01201 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;cursor;
01202 
01203 &#32;&#32;<emphasis role="keyword">const</emphasis>&#32;Expr&#32;*E&#32;=&#32;<link linkend="_namespaceclang_1_1cxcursor_1a80837a3710c6df0dfc24b5ee1d94ff9b">getCursorExpr</link>(cursor);
01204 &#32;&#32;TypeSourceInfo&#32;*Type&#32;=&#32;<emphasis role="keyword">nullptr</emphasis>;
01205 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;CXXUnresolvedConstructExpr&#32;*UnCtor&#32;=
01206 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;dyn_cast&lt;CXXUnresolvedConstructExpr&gt;(E))&#32;{
01207 &#32;&#32;&#32;&#32;Type&#32;=&#32;UnCtor-&gt;getTypeSourceInfo();
01208 &#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;CXXTemporaryObjectExpr&#32;*Tmp&#32;=
01209 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;dyn_cast&lt;CXXTemporaryObjectExpr&gt;(E))&#32;{
01210 &#32;&#32;&#32;&#32;Type&#32;=&#32;Tmp-&gt;getTypeSourceInfo();
01211 &#32;&#32;}
01212 
01213 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!Type)
01214 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;cursor;
01215 
01216 &#32;&#32;CXTranslationUnit&#32;TU&#32;=&#32;<link linkend="_namespaceclang_1_1cxcursor_1a23a495df22339e8289ae6d2421f493b6">getCursorTU</link>(cursor);
01217 &#32;&#32;QualType&#32;Ty&#32;=&#32;Type-&gt;getType();
01218 &#32;&#32;TypeLoc&#32;TL&#32;=&#32;Type-&gt;getTypeLoc();
01219 &#32;&#32;SourceLocation&#32;Loc&#32;=&#32;TL.getBeginLoc();
01220 
01221 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;ElaboratedType&#32;*ElabT&#32;=&#32;Ty-&gt;getAs&lt;ElaboratedType&gt;())&#32;{
01222 &#32;&#32;&#32;&#32;Ty&#32;=&#32;ElabT-&gt;getNamedType();
01223 &#32;&#32;&#32;&#32;ElaboratedTypeLoc&#32;ElabTL&#32;=&#32;TL.castAs&lt;ElaboratedTypeLoc&gt;();
01224 &#32;&#32;&#32;&#32;Loc&#32;=&#32;ElabTL.getNamedTypeLoc().getBeginLoc();
01225 &#32;&#32;}
01226 
01227 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;TypedefType&#32;*Typedef&#32;=&#32;Ty-&gt;getAs&lt;TypedefType&gt;())
01228 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxcursor_1a3534c264c1431ec3d09c975fcafa263d">MakeCursorTypeRef</link>(Typedef-&gt;getDecl(),&#32;Loc,&#32;TU);
01229 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;TagType&#32;*Tag&#32;=&#32;Ty-&gt;getAs&lt;TagType&gt;())
01230 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxcursor_1a3534c264c1431ec3d09c975fcafa263d">MakeCursorTypeRef</link>(Tag-&gt;getDecl(),&#32;Loc,&#32;TU);
01231 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;TemplateTypeParmType&#32;*TemplP&#32;=&#32;Ty-&gt;getAs&lt;TemplateTypeParmType&gt;())
01232 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxcursor_1a3534c264c1431ec3d09c975fcafa263d">MakeCursorTypeRef</link>(TemplP-&gt;getDecl(),&#32;Loc,&#32;TU);
01233 
01234 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;cursor;
01235 }
</programlisting><para>
References <link linkend="__c_x_cursor_8cpp_source_1l01105">getCursorExpr()</link>, <link linkend="__c_x_cursor_8cpp_source_1l01133">getCursorTU()</link>, and <link linkend="__c_x_cursor_8cpp_source_1l00882">MakeCursorTypeRef()</link>.</para>
    </section><anchor xml:id="_namespaceclang_1_1cxcursor_1a1ae32d54126c07eca2ab10d9ce40af7c"/>    <section>
    <title>isFirstInDeclGroup()</title>
<indexterm><primary>isFirstInDeclGroup</primary><secondary>clang::cxcursor</secondary></indexterm>
<indexterm><primary>clang::cxcursor</primary><secondary>isFirstInDeclGroup</secondary></indexterm>
<para><computeroutput>bool clang::cxcursor::isFirstInDeclGroup (CXCursor C)</computeroutput></para>
<para>Return true if the cursor represents a declaration that is the first in a declaration group. </para>
<para>
Definition at line <link linkend="__c_x_cursor_8cpp_source_1l01244">1244</link> of file <link linkend="__c_x_cursor_8cpp_source">CXCursor.cpp</link>.</para>
<programlisting>01244 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
01245 &#32;&#32;assert(<link linkend="__c_index_8cpp_1a5d47db8f608ae0c266d6551875d46b80">clang_isDeclaration</link>(C.kind));
01246 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;((uintptr_t)(C.data[1]))&#32;!=&#32;0;
01247 }
</programlisting><para>
References <link linkend="__c_index_8cpp_source_1l05934">clang_isDeclaration()</link>.</para>
    </section><anchor xml:id="_namespaceclang_1_1cxcursor_1a13176d36398baf45f34e16a34ec04793"/>    <section>
    <title>MakeCursorCXXBaseSpecifier()</title>
<indexterm><primary>MakeCursorCXXBaseSpecifier</primary><secondary>clang::cxcursor</secondary></indexterm>
<indexterm><primary>clang::cxcursor</primary><secondary>MakeCursorCXXBaseSpecifier</secondary></indexterm>
<para><computeroutput>CXCursor clang::cxcursor::MakeCursorCXXBaseSpecifier (const CXXBaseSpecifier * B, CXTranslationUnit TU)</computeroutput></para><para>

<para>Create a CXX base specifier cursor. </para>
</para>
<para>
Definition at line <link linkend="__c_x_cursor_8cpp_source_1l00964">964</link> of file <link linkend="__c_x_cursor_8cpp_source">CXCursor.cpp</link>.</para>
<programlisting>00965 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00966 &#32;&#32;CXCursor&#32;C&#32;=&#32;{CXCursor_CXXBaseSpecifier,&#32;0,&#32;{B,&#32;<emphasis role="keyword">nullptr</emphasis>,&#32;TU}};
00967 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;C;
00968 }
</programlisting><para>
Referenced by <link linkend="__c_index_8cpp_source_1l01820">clang::cxcursor::CursorVisitor::VisitCXXRecordDecl()</link>.</para>
    </section><anchor xml:id="_namespaceclang_1_1cxcursor_1a2e83069419ec783a32e4ee2b67d5144a"/>    <section>
    <title>MakeCursorLabelRef()</title>
<indexterm><primary>MakeCursorLabelRef</primary><secondary>clang::cxcursor</secondary></indexterm>
<indexterm><primary>clang::cxcursor</primary><secondary>MakeCursorLabelRef</secondary></indexterm>
<para><computeroutput>CXCursor clang::cxcursor::MakeCursorLabelRef (LabelStmt * Label, SourceLocation Loc, CXTranslationUnit TU)</computeroutput></para><para>

<para>Create a label reference at the given location. </para>
</para>
<para>
Definition at line <link linkend="__c_x_cursor_8cpp_source_1l01045">1045</link> of file <link linkend="__c_x_cursor_8cpp_source">CXCursor.cpp</link>.</para>
<programlisting>01046 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
01047 
01048 &#32;&#32;assert(Label&#32;&amp;&amp;&#32;TU&#32;&amp;&amp;&#32;<emphasis role="stringliteral">&quot;Invalid&#32;arguments!&quot;</emphasis>);
01049 &#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;*RawLoc&#32;=&#32;Loc.getPtrEncoding();
01050 &#32;&#32;CXCursor&#32;C&#32;=&#32;{CXCursor_LabelRef,&#32;0,&#32;{Label,&#32;RawLoc,&#32;TU}};
01051 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;C;
01052 }
</programlisting><para>
Referenced by <link linkend="__c_index_8cpp_source_1l03163">clang::cxcursor::CursorVisitor::RunVisitorWorkList()</link>.</para>
    </section><anchor xml:id="_namespaceclang_1_1cxcursor_1ad70c49c226f87377bc26fba7a4dbe973"/>    <section>
    <title>MakeCursorMemberRef()</title>
<indexterm><primary>MakeCursorMemberRef</primary><secondary>clang::cxcursor</secondary></indexterm>
<indexterm><primary>clang::cxcursor</primary><secondary>MakeCursorMemberRef</secondary></indexterm>
<para><computeroutput>CXCursor clang::cxcursor::MakeCursorMemberRef (const FieldDecl * Field, SourceLocation Loc, CXTranslationUnit TU)</computeroutput></para><para>

<para>Create a reference to a field at the given location. </para>
</para>
<para>
Definition at line <link linkend="__c_x_cursor_8cpp_source_1l00947">947</link> of file <link linkend="__c_x_cursor_8cpp_source">CXCursor.cpp</link>.</para>
<programlisting>00949 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00950 
00951 &#32;&#32;assert(Field&#32;&amp;&amp;&#32;TU&#32;&amp;&amp;&#32;<emphasis role="stringliteral">&quot;Invalid&#32;arguments!&quot;</emphasis>);
00952 &#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;*RawLoc&#32;=&#32;Loc.getPtrEncoding();
00953 &#32;&#32;CXCursor&#32;C&#32;=&#32;{CXCursor_MemberRef,&#32;0,&#32;{Field,&#32;RawLoc,&#32;TU}};
00954 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;C;
00955 }
</programlisting><para>
Referenced by <link linkend="__c_index_8cpp_source_1l03163">clang::cxcursor::CursorVisitor::RunVisitorWorkList()</link>, and <link linkend="__c_index_8cpp_source_1l01219">clang::cxcursor::CursorVisitor::VisitObjCPropertyImplDecl()</link>.</para>
    </section><anchor xml:id="_namespaceclang_1_1cxcursor_1a6eadc019bbae1f61434528c197111b0e"/>    <section>
    <title>MakeCursorNamespaceRef()</title>
<indexterm><primary>MakeCursorNamespaceRef</primary><secondary>clang::cxcursor</secondary></indexterm>
<indexterm><primary>clang::cxcursor</primary><secondary>MakeCursorNamespaceRef</secondary></indexterm>
<para><computeroutput>CXCursor clang::cxcursor::MakeCursorNamespaceRef (const NamedDecl * NS, SourceLocation Loc, CXTranslationUnit TU)</computeroutput></para>
<para>Create a reference to a namespace or namespace alias at the given location. </para>
<para>
Definition at line <link linkend="__c_x_cursor_8cpp_source_1l00913">913</link> of file <link linkend="__c_x_cursor_8cpp_source">CXCursor.cpp</link>.</para>
<programlisting>00915 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00916 
00917 &#32;&#32;assert(NS&#32;&amp;&amp;&#32;(isa&lt;NamespaceDecl&gt;(NS)&#32;||&#32;isa&lt;NamespaceAliasDecl&gt;(NS))&#32;&amp;&amp;&#32;TU&#32;&amp;&amp;
00918 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;Invalid&#32;arguments!&quot;</emphasis>);
00919 &#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;*RawLoc&#32;=&#32;Loc.getPtrEncoding();
00920 &#32;&#32;CXCursor&#32;C&#32;=&#32;{CXCursor_NamespaceRef,&#32;0,&#32;{NS,&#32;RawLoc,&#32;TU}};
00921 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;C;
00922 }
</programlisting><para>
Referenced by <link linkend="__c_index_8cpp_source_1l01231">clang::cxcursor::CursorVisitor::VisitNamespaceAliasDecl()</link>, <link linkend="__c_index_8cpp_source_1l01338">clang::cxcursor::CursorVisitor::VisitNestedNameSpecifier()</link>, <link linkend="__c_index_8cpp_source_1l01385">clang::cxcursor::CursorVisitor::VisitNestedNameSpecifierLoc()</link>, and <link linkend="__c_index_8cpp_source_1l01254">clang::cxcursor::CursorVisitor::VisitUsingDirectiveDecl()</link>.</para>
    </section><anchor xml:id="_namespaceclang_1_1cxcursor_1aa0bea074dd325615cb85819eac47264e"/>    <section>
    <title>MakeCursorObjCClassRef()</title>
<indexterm><primary>MakeCursorObjCClassRef</primary><secondary>clang::cxcursor</secondary></indexterm>
<indexterm><primary>clang::cxcursor</primary><secondary>MakeCursorObjCClassRef</secondary></indexterm>
<para><computeroutput>CXCursor clang::cxcursor::MakeCursorObjCClassRef (const ObjCInterfaceDecl * Class, SourceLocation Loc, CXTranslationUnit TU)</computeroutput></para><para>

<para>Create an Objective-C class reference at the given location. </para>
</para>
<para>
Definition at line <link linkend="__c_x_cursor_8cpp_source_1l00863">863</link> of file <link linkend="__c_x_cursor_8cpp_source">CXCursor.cpp</link>.</para>
<programlisting>00865 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00866 &#32;&#32;<emphasis role="comment">//&#32;&apos;Class&apos;&#32;can&#32;be&#32;null&#32;for&#32;invalid&#32;code.</emphasis>
00867 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!Class)
00868 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxcursor_1aa8325b990acde766ecd9276d7d9df53a">MakeCXCursorInvalid</link>(CXCursor_InvalidCode);
00869 &#32;&#32;assert(TU&#32;&amp;&amp;&#32;<emphasis role="stringliteral">&quot;Invalid&#32;arguments!&quot;</emphasis>);
00870 &#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;*RawLoc&#32;=&#32;Loc.getPtrEncoding();
00871 &#32;&#32;CXCursor&#32;C&#32;=&#32;{CXCursor_ObjCClassRef,&#32;0,&#32;{Class,&#32;RawLoc,&#32;TU}};
00872 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;C;
00873 }
</programlisting><para>
References <link linkend="__c_x_cursor_8cpp_source_1l00034">MakeCXCursorInvalid()</link>.</para>
<para>
Referenced by <link linkend="__c_x_index_data_consumer_8cpp_source_1l00279">clang::cxindex::AttrListInfo::AttrListInfo()</link>, <link linkend="__c_x_index_data_consumer_8cpp_source_1l00741">clang::cxindex::CXIndexDataConsumer::handleObjCCategory()</link>, <link linkend="__c_x_index_data_consumer_8cpp_source_1l00773">clang::cxindex::CXIndexDataConsumer::handleObjCCategoryImpl()</link>, <link linkend="__c_x_index_data_consumer_8cpp_source_1l00656">clang::cxindex::CXIndexDataConsumer::handleObjCInterface()</link>, <link linkend="__c_index_8cpp_source_1l01081">clang::cxcursor::CursorVisitor::VisitObjCCategoryDecl()</link>, <link linkend="__c_index_8cpp_source_1l01196">clang::cxcursor::CursorVisitor::VisitObjCCategoryImplDecl()</link>, and <link linkend="__c_index_8cpp_source_1l01163">clang::cxcursor::CursorVisitor::VisitObjCInterfaceDecl()</link>.</para>
    </section><anchor xml:id="_namespaceclang_1_1cxcursor_1ac238ecc9f974783b9d0c2129f5aa675f"/>    <section>
    <title>MakeCursorObjCProtocolRef()</title>
<indexterm><primary>MakeCursorObjCProtocolRef</primary><secondary>clang::cxcursor</secondary></indexterm>
<indexterm><primary>clang::cxcursor</primary><secondary>MakeCursorObjCProtocolRef</secondary></indexterm>
<para><computeroutput>CXCursor clang::cxcursor::MakeCursorObjCProtocolRef (const ObjCProtocolDecl * Proto, SourceLocation Loc, CXTranslationUnit TU)</computeroutput></para><para>

<para>Create an Objective-C protocol reference at the given location. </para>
</para>
<para>
Definition at line <link linkend="__c_x_cursor_8cpp_source_1l00847">847</link> of file <link linkend="__c_x_cursor_8cpp_source">CXCursor.cpp</link>.</para>
<programlisting>00849 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00850 &#32;&#32;assert(Proto&#32;&amp;&amp;&#32;TU&#32;&amp;&amp;&#32;<emphasis role="stringliteral">&quot;Invalid&#32;arguments!&quot;</emphasis>);
00851 &#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;*RawLoc&#32;=&#32;Loc.getPtrEncoding();
00852 &#32;&#32;CXCursor&#32;C&#32;=&#32;{CXCursor_ObjCProtocolRef,&#32;0,&#32;{Proto,&#32;RawLoc,&#32;TU}};
00853 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;C;
00854 }
</programlisting><para>
Referenced by <link linkend="__c_x_index_data_consumer_8cpp_source_1l00712">clang::cxindex::CXIndexDataConsumer::handleObjCProtocol()</link>, <link linkend="__c_index_8cpp_source_1l01081">clang::cxcursor::CursorVisitor::VisitObjCCategoryDecl()</link>, <link linkend="__c_index_8cpp_source_1l01163">clang::cxcursor::CursorVisitor::VisitObjCInterfaceDecl()</link>, and <link linkend="__c_index_8cpp_source_1l01099">clang::cxcursor::CursorVisitor::VisitObjCProtocolDecl()</link>.</para>
    </section><anchor xml:id="_namespaceclang_1_1cxcursor_1a81d6b09cb8995b57d394a8372437902a"/>    <section>
    <title>MakeCursorObjCSuperClassRef()</title>
<indexterm><primary>MakeCursorObjCSuperClassRef</primary><secondary>clang::cxcursor</secondary></indexterm>
<indexterm><primary>clang::cxcursor</primary><secondary>MakeCursorObjCSuperClassRef</secondary></indexterm>
<para><computeroutput>CXCursor clang::cxcursor::MakeCursorObjCSuperClassRef (ObjCInterfaceDecl * Super, SourceLocation Loc, CXTranslationUnit TU)</computeroutput></para><para>

<para>Create an Objective-C superclass reference at the given location. </para>
</para>
<para>
Definition at line <link linkend="__c_x_cursor_8cpp_source_1l00831">831</link> of file <link linkend="__c_x_cursor_8cpp_source">CXCursor.cpp</link>.</para>
<programlisting>00833 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00834 &#32;&#32;assert(Super&#32;&amp;&amp;&#32;TU&#32;&amp;&amp;&#32;<emphasis role="stringliteral">&quot;Invalid&#32;arguments!&quot;</emphasis>);
00835 &#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;*RawLoc&#32;=&#32;Loc.getPtrEncoding();
00836 &#32;&#32;CXCursor&#32;C&#32;=&#32;{CXCursor_ObjCSuperClassRef,&#32;0,&#32;{Super,&#32;RawLoc,&#32;TU}};
00837 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;C;
00838 }
</programlisting><para>
Referenced by <link linkend="__c_x_index_data_consumer_8cpp_source_1l00656">clang::cxindex::CXIndexDataConsumer::handleObjCInterface()</link>, <link linkend="__c_index_8cpp_source_1l01205">clang::cxcursor::CursorVisitor::VisitObjCImplementationDecl()</link>, and <link linkend="__c_index_8cpp_source_1l01163">clang::cxcursor::CursorVisitor::VisitObjCInterfaceDecl()</link>.</para>
    </section><anchor xml:id="_namespaceclang_1_1cxcursor_1ad20f1744eb56e19aad0226a6cd6a0814"/>    <section>
    <title>MakeCursorOverloadedDeclRef()<computeroutput>[1/3]</computeroutput></title>
<indexterm><primary>MakeCursorOverloadedDeclRef</primary><secondary>clang::cxcursor</secondary></indexterm>
<indexterm><primary>clang::cxcursor</primary><secondary>MakeCursorOverloadedDeclRef</secondary></indexterm>
<para><computeroutput>CXCursor clang::cxcursor::MakeCursorOverloadedDeclRef (const Decl * D, SourceLocation Location, CXTranslationUnit TU)</computeroutput></para><para>

<para>Create a overloaded declaration reference cursor for a declaration. </para>
</para>
<para>
Definition at line <link linkend="__c_x_cursor_8cpp_source_1l01071">1071</link> of file <link linkend="__c_x_cursor_8cpp_source">CXCursor.cpp</link>.</para>
<programlisting>01073 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
01074 &#32;&#32;assert(D&#32;&amp;&amp;&#32;TU&#32;&amp;&amp;&#32;<emphasis role="stringliteral">&quot;Invalid&#32;arguments!&quot;</emphasis>);
01075 &#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;*RawLoc&#32;=&#32;Loc.getPtrEncoding();
01076 &#32;&#32;<link linkend="_namespaceclang_1_1cxcursor_1a944e67de567f6905f10876d7585ac43b">OverloadedDeclRefStorage</link>&#32;Storage(D);
01077 &#32;&#32;CXCursor&#32;C&#32;=&#32;{
01078 &#32;&#32;&#32;&#32;&#32;&#32;CXCursor_OverloadedDeclRef,&#32;0,&#32;{Storage.getOpaqueValue(),&#32;RawLoc,&#32;TU}};
01079 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;C;
01080 }
</programlisting>    </section><anchor xml:id="_namespaceclang_1_1cxcursor_1a631225e024301b99cc72be73f0ee9271"/>    <section>
    <title>MakeCursorOverloadedDeclRef()<computeroutput>[2/3]</computeroutput></title>
<indexterm><primary>MakeCursorOverloadedDeclRef</primary><secondary>clang::cxcursor</secondary></indexterm>
<indexterm><primary>clang::cxcursor</primary><secondary>MakeCursorOverloadedDeclRef</secondary></indexterm>
<para><computeroutput>CXCursor clang::cxcursor::MakeCursorOverloadedDeclRef (const OverloadExpr * E, CXTranslationUnit TU)</computeroutput></para><para>

<para>Create a overloaded declaration reference cursor for an expression. </para>
</para>
<para>
Definition at line <link linkend="__c_x_cursor_8cpp_source_1l01061">1061</link> of file <link linkend="__c_x_cursor_8cpp_source">CXCursor.cpp</link>.</para>
<programlisting>01062 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
01063 &#32;&#32;assert(E&#32;&amp;&amp;&#32;TU&#32;&amp;&amp;&#32;<emphasis role="stringliteral">&quot;Invalid&#32;arguments!&quot;</emphasis>);
01064 &#32;&#32;<link linkend="_namespaceclang_1_1cxcursor_1a944e67de567f6905f10876d7585ac43b">OverloadedDeclRefStorage</link>&#32;Storage(E);
01065 &#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;*RawLoc&#32;=&#32;E-&gt;getNameLoc().getPtrEncoding();
01066 &#32;&#32;CXCursor&#32;C&#32;=&#32;{
01067 &#32;&#32;&#32;&#32;&#32;&#32;CXCursor_OverloadedDeclRef,&#32;0,&#32;{Storage.getOpaqueValue(),&#32;RawLoc,&#32;TU}};
01068 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;C;
01069 }
</programlisting><para>
Referenced by <link linkend="__c_index_8cpp_source_1l06411">clang_getCursorDefinition()</link>, <link linkend="__c_index_8cpp_source_1l06301">clang_getCursorReferenced()</link>, <link linkend="__c_index_8cpp_source_1l01441">clang::cxcursor::CursorVisitor::VisitTemplateName()</link>, and <link linkend="__c_index_8cpp_source_1l01241">clang::cxcursor::CursorVisitor::VisitUsingDecl()</link>.</para>
    </section><anchor xml:id="_namespaceclang_1_1cxcursor_1aa16bf67907c5d2ea8d38dbf9c25115f3"/>    <section>
    <title>MakeCursorOverloadedDeclRef()<computeroutput>[3/3]</computeroutput></title>
<indexterm><primary>MakeCursorOverloadedDeclRef</primary><secondary>clang::cxcursor</secondary></indexterm>
<indexterm><primary>clang::cxcursor</primary><secondary>MakeCursorOverloadedDeclRef</secondary></indexterm>
<para><computeroutput>CXCursor clang::cxcursor::MakeCursorOverloadedDeclRef (TemplateName Template, SourceLocation Location, CXTranslationUnit TU)</computeroutput></para><para>

<para>Create a overloaded declaration reference cursor for a template name. </para>
</para>
<para>
Definition at line <link linkend="__c_x_cursor_8cpp_source_1l01082">1082</link> of file <link linkend="__c_x_cursor_8cpp_source">CXCursor.cpp</link>.</para>
<programlisting>01084 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
01085 &#32;&#32;assert(Name.getAsOverloadedTemplate()&#32;&amp;&amp;&#32;TU&#32;&amp;&amp;&#32;<emphasis role="stringliteral">&quot;Invalid&#32;arguments!&quot;</emphasis>);
01086 &#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;*RawLoc&#32;=&#32;Loc.getPtrEncoding();
01087 &#32;&#32;<link linkend="_namespaceclang_1_1cxcursor_1a944e67de567f6905f10876d7585ac43b">OverloadedDeclRefStorage</link>&#32;Storage(Name.getAsOverloadedTemplate());
01088 &#32;&#32;CXCursor&#32;C&#32;=&#32;{
01089 &#32;&#32;&#32;&#32;&#32;&#32;CXCursor_OverloadedDeclRef,&#32;0,&#32;{Storage.getOpaqueValue(),&#32;RawLoc,&#32;TU}};
01090 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;C;
01091 }
</programlisting>    </section><anchor xml:id="_namespaceclang_1_1cxcursor_1ac63e4fd5fdbaf88d0632a7682afbf744"/>    <section>
    <title>MakeCursorTemplateRef()</title>
<indexterm><primary>MakeCursorTemplateRef</primary><secondary>clang::cxcursor</secondary></indexterm>
<indexterm><primary>clang::cxcursor</primary><secondary>MakeCursorTemplateRef</secondary></indexterm>
<para><computeroutput>CXCursor clang::cxcursor::MakeCursorTemplateRef (const TemplateDecl * Template, SourceLocation Loc, CXTranslationUnit TU)</computeroutput></para><para>

<para>Create a reference to a template at the given location. </para>
</para>
<para>
Definition at line <link linkend="__c_x_cursor_8cpp_source_1l00897">897</link> of file <link linkend="__c_x_cursor_8cpp_source">CXCursor.cpp</link>.</para>
<programlisting>00899 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00900 &#32;&#32;assert(Template&#32;&amp;&amp;&#32;TU&#32;&amp;&amp;&#32;<emphasis role="stringliteral">&quot;Invalid&#32;arguments!&quot;</emphasis>);
00901 &#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;*RawLoc&#32;=&#32;Loc.getPtrEncoding();
00902 &#32;&#32;CXCursor&#32;C&#32;=&#32;{CXCursor_TemplateRef,&#32;0,&#32;{Template,&#32;RawLoc,&#32;TU}};
00903 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;C;
00904 }
</programlisting><para>
Referenced by <link linkend="__c_index_8cpp_source_1l01441">clang::cxcursor::CursorVisitor::VisitTemplateName()</link>.</para>
    </section><anchor xml:id="_namespaceclang_1_1cxcursor_1a3534c264c1431ec3d09c975fcafa263d"/>    <section>
    <title>MakeCursorTypeRef()</title>
<indexterm><primary>MakeCursorTypeRef</primary><secondary>clang::cxcursor</secondary></indexterm>
<indexterm><primary>clang::cxcursor</primary><secondary>MakeCursorTypeRef</secondary></indexterm>
<para><computeroutput>CXCursor clang::cxcursor::MakeCursorTypeRef (const TypeDecl * Type, SourceLocation Loc, CXTranslationUnit TU)</computeroutput></para><para>

<para>Create a type reference at the given location. </para>
</para>
<para>
Definition at line <link linkend="__c_x_cursor_8cpp_source_1l00882">882</link> of file <link linkend="__c_x_cursor_8cpp_source">CXCursor.cpp</link>.</para>
<programlisting>00883 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00884 &#32;&#32;assert(Type&#32;&amp;&amp;&#32;TU&#32;&amp;&amp;&#32;<emphasis role="stringliteral">&quot;Invalid&#32;arguments!&quot;</emphasis>);
00885 &#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;*RawLoc&#32;=&#32;Loc.getPtrEncoding();
00886 &#32;&#32;CXCursor&#32;C&#32;=&#32;{CXCursor_TypeRef,&#32;0,&#32;{Type,&#32;RawLoc,&#32;TU}};
00887 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;C;
00888 }
</programlisting><para>
Referenced by <link linkend="__c_x_cursor_8cpp_source_1l01196">getTypeRefCursor()</link>, <link linkend="__c_index_8cpp_source_1l01338">clang::cxcursor::CursorVisitor::VisitNestedNameSpecifier()</link>, and <link linkend="__c_index_8cpp_source_1l01591">clang::cxcursor::CursorVisitor::VisitTagTypeLoc()</link>.</para>
    </section><anchor xml:id="_namespaceclang_1_1cxcursor_1abb9724d664f29289d46fb5b34eaf94e9"/>    <section>
    <title>MakeCursorVariableRef()</title>
<indexterm><primary>MakeCursorVariableRef</primary><secondary>clang::cxcursor</secondary></indexterm>
<indexterm><primary>clang::cxcursor</primary><secondary>MakeCursorVariableRef</secondary></indexterm>
<para><computeroutput>CXCursor clang::cxcursor::MakeCursorVariableRef (const VarDecl * Var, SourceLocation Loc, CXTranslationUnit TU)</computeroutput></para><para>

<para>Create a reference to a variable at the given location. </para>
</para>
<para>
Definition at line <link linkend="__c_x_cursor_8cpp_source_1l00931">931</link> of file <link linkend="__c_x_cursor_8cpp_source">CXCursor.cpp</link>.</para>
<programlisting>00932 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00933 
00934 &#32;&#32;assert(Var&#32;&amp;&amp;&#32;TU&#32;&amp;&amp;&#32;<emphasis role="stringliteral">&quot;Invalid&#32;arguments!&quot;</emphasis>);
00935 &#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;*RawLoc&#32;=&#32;Loc.getPtrEncoding();
00936 &#32;&#32;CXCursor&#32;C&#32;=&#32;{CXCursor_VariableRef,&#32;0,&#32;{Var,&#32;RawLoc,&#32;TU}};
00937 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;C;
00938 }
</programlisting>    </section><anchor xml:id="_namespaceclang_1_1cxcursor_1ab61ec2059175833672e8e78a376bb218"/>    <section>
    <title>MakeCXCursor()<computeroutput>[1/3]</computeroutput></title>
<indexterm><primary>MakeCXCursor</primary><secondary>clang::cxcursor</secondary></indexterm>
<indexterm><primary>clang::cxcursor</primary><secondary>MakeCXCursor</secondary></indexterm>
<para><computeroutput>CXCursor clang::cxcursor::MakeCXCursor (const clang::Attr * A, const clang::Decl * Parent, CXTranslationUnit TU)</computeroutput></para><para>
Referenced by <link linkend="__c_x_index_data_consumer_8cpp_source_1l00279">clang::cxindex::AttrListInfo::AttrListInfo()</link>, <link linkend="__c_x_cursor_8cpp_source_1l01283">clang_Cursor_getArgument()</link>, <link linkend="__c_index_8cpp_source_1l08925">clang_Cursor_getVarDeclInitializer()</link>, <link linkend="__c_index_8cpp_source_1l06646">clang_getCanonicalCursor()</link>, <link linkend="__c_index_8cpp_source_1l06411">clang_getCursorDefinition()</link>, <link linkend="__c_index_8cpp_source_1l08239">clang_getCursorLexicalParent()</link>, <link linkend="__c_index_8cpp_source_1l06301">clang_getCursorReferenced()</link>, <link linkend="__c_index_8cpp_source_1l08219">clang_getCursorSemanticParent()</link>, <link linkend="__c_index_8cpp_source_1l06689">clang_getOverloadedDecl()</link>, <link linkend="__c_index_c_x_x_8cpp_source_1l00082">clang_getSpecializedCursorTemplate()</link>, <link linkend="__c_x_type_8cpp_source_1l01228">clang_Type_visitFields()</link>, <link linkend="__c_index_8cpp_source_1l03149">clang::cxcursor::CursorVisitor::EnqueueWorkList()</link>, <link linkend="__c_x_cursor_8cpp_source_1l01137">getOverriddenCursors()</link>, <link linkend="__c_index_8cpp_source_1l03163">clang::cxcursor::CursorVisitor::RunVisitorWorkList()</link>, <link linkend="__c_index_8cpp_source_1l01685">clang::cxcursor::CursorVisitor::VisitArrayTypeLoc()</link>, <link linkend="__c_index_8cpp_source_1l01836">clang::cxcursor::CursorVisitor::VisitAttributes()</link>, <link linkend="__c_index_8cpp_source_1l00591">clang::cxcursor::CursorVisitor::VisitBlockDecl()</link>, <link linkend="__c_index_8cpp_source_1l01304">clang::cxcursor::CursorVisitor::VisitDecompositionDecl()</link>, <link linkend="__c_index_8cpp_source_1l00777">clang::cxcursor::CursorVisitor::VisitEnumConstantDecl()</link>, <link linkend="__c_index_8cpp_source_1l00906">clang::cxcursor::CursorVisitor::VisitFieldDecl()</link>, <link linkend="__c_index_8cpp_source_1l01293">clang::cxcursor::CursorVisitor::VisitFriendDecl()</link>, <link linkend="__c_index_8cpp_source_1l01672">clang::cxcursor::CursorVisitor::VisitFunctionTypeLoc()</link>, <link linkend="__c_index_8cpp_source_1l00929">clang::cxcursor::CursorVisitor::VisitNonTypeTemplateParmDecl()</link>, <link linkend="__c_index_8cpp_source_1l00983">clang::cxcursor::CursorVisitor::VisitObjCMethodDecl()</link>, <link linkend="__c_index_8cpp_source_1l01113">clang::cxcursor::CursorVisitor::VisitObjCPropertyDecl()</link>, <link linkend="__c_index_8cpp_source_1l01150">clang::cxcursor::CursorVisitor::VisitObjCTypeParamList()</link>, <link linkend="__c_index_8cpp_source_1l01284">clang::cxcursor::CursorVisitor::VisitStaticAssertDecl()</link>, <link linkend="__c_index_8cpp_source_1l01591">clang::cxcursor::CursorVisitor::VisitTagTypeLoc()</link>, <link linkend="__c_index_8cpp_source_1l01479">clang::cxcursor::CursorVisitor::VisitTemplateArgumentLoc()</link>, <link linkend="__c_index_8cpp_source_1l01426">clang::cxcursor::CursorVisitor::VisitTemplateParameters()</link>, <link linkend="__c_index_8cpp_source_1l00762">clang::cxcursor::CursorVisitor::VisitTemplateTypeParmDecl()</link>, <link linkend="__c_index_8cpp_source_1l00690">clang::cxcursor::CursorVisitor::VisitTypeAliasTemplateDecl()</link>, and <link linkend="__c_index_8cpp_source_1l00919">clang::cxcursor::CursorVisitor::VisitVarDecl()</link>.</para>
    </section><anchor xml:id="_namespaceclang_1_1cxcursor_1afb6735904aa885f268ed7ac96cd7d62c"/>    <section>
    <title>MakeCXCursor()<computeroutput>[2/3]</computeroutput></title>
<indexterm><primary>MakeCXCursor</primary><secondary>clang::cxcursor</secondary></indexterm>
<indexterm><primary>clang::cxcursor</primary><secondary>MakeCXCursor</secondary></indexterm>
<para><computeroutput>CXCursor clang::cxcursor::MakeCXCursor (const clang::Decl * D, CXTranslationUnit TU, SourceRange RegionOfInterest = <computeroutput>SourceRange()</computeroutput>
, bool FirstInDeclGroup = <computeroutput>true</computeroutput>
)</computeroutput></para>    </section><anchor xml:id="_namespaceclang_1_1cxcursor_1a6821c2068a78ae14f1f106a8dc777101"/>    <section>
    <title>MakeCXCursor()<computeroutput>[3/3]</computeroutput></title>
<indexterm><primary>MakeCXCursor</primary><secondary>clang::cxcursor</secondary></indexterm>
<indexterm><primary>clang::cxcursor</primary><secondary>MakeCXCursor</secondary></indexterm>
<para><computeroutput>CXCursor clang::cxcursor::MakeCXCursor (const clang::Stmt * S, const clang::Decl * Parent, CXTranslationUnit TU, SourceRange RegionOfInterest = <computeroutput>SourceRange()</computeroutput>
)</computeroutput></para>    </section><anchor xml:id="_namespaceclang_1_1cxcursor_1aa8325b990acde766ecd9276d7d9df53a"/>    <section>
    <title>MakeCXCursorInvalid()</title>
<indexterm><primary>MakeCXCursorInvalid</primary><secondary>clang::cxcursor</secondary></indexterm>
<indexterm><primary>clang::cxcursor</primary><secondary>MakeCXCursorInvalid</secondary></indexterm>
<para><computeroutput>CXCursor clang::cxcursor::MakeCXCursorInvalid (CXCursorKind K, CXTranslationUnit TU = <computeroutput>nullptr</computeroutput>
)</computeroutput></para><para>
Definition at line <link linkend="__c_x_cursor_8cpp_source_1l00034">34</link> of file <link linkend="__c_x_cursor_8cpp_source">CXCursor.cpp</link>.</para>
<programlisting>00034 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00035 &#32;&#32;assert(K&#32;&gt;=&#32;CXCursor_FirstInvalid&#32;&amp;&amp;&#32;K&#32;&lt;=&#32;CXCursor_LastInvalid);
00036 &#32;&#32;CXCursor&#32;C&#32;=&#32;{K,&#32;0,&#32;{<emphasis role="keyword">nullptr</emphasis>,&#32;<emphasis role="keyword">nullptr</emphasis>,&#32;TU}};
00037 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;C;
00038 }
</programlisting><para>
Referenced by <link linkend="__c_index_8cpp_source_1l05901">clang_getNullCursor()</link>, <link linkend="__c_x_cursor_8cpp_source_1l01573">clang_getOverriddenCursors()</link>, <link linkend="__c_x_type_8cpp_source_1l00481">clang_getTypeDeclaration()</link>, <link linkend="__c_index_8cpp_source_1l06123">getCursor()</link>, <link linkend="__c_x_cursor_8cpp_source_1l01472">llvm::DenseMapInfo&lt; CXCursor &gt;::getEmptyKey()</link>, <link linkend="__c_x_cursor_8cpp_source_1l01475">llvm::DenseMapInfo&lt; CXCursor &gt;::getTombstoneKey()</link>, and <link linkend="__c_x_cursor_8cpp_source_1l00863">MakeCursorObjCClassRef()</link>.</para>
    </section><anchor xml:id="_namespaceclang_1_1cxcursor_1acc1961183c2fb603b894a7f8621b16bb"/>    <section>
    <title>MakeInclusionDirectiveCursor()</title>
<indexterm><primary>MakeInclusionDirectiveCursor</primary><secondary>clang::cxcursor</secondary></indexterm>
<indexterm><primary>clang::cxcursor</primary><secondary>MakeInclusionDirectiveCursor</secondary></indexterm>
<para><computeroutput>CXCursor clang::cxcursor::MakeInclusionDirectiveCursor (InclusionDirective * ID, CXTranslationUnit TU)</computeroutput></para><para>

<para>Create an inclusion directive cursor. </para>
</para>
<para>
Definition at line <link linkend="__c_x_cursor_8cpp_source_1l01034">1034</link> of file <link linkend="__c_x_cursor_8cpp_source">CXCursor.cpp</link>.</para>
<programlisting>01035 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
01036 &#32;&#32;CXCursor&#32;C&#32;=&#32;{CXCursor_InclusionDirective,&#32;0,&#32;{ID,&#32;<emphasis role="keyword">nullptr</emphasis>,&#32;TU}};
01037 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;C;
01038 }
</programlisting><para>
Referenced by <link linkend="__c_index_8cpp_source_1l00451">clang::cxcursor::CursorVisitor::visitPreprocessedEntities()</link>.</para>
    </section><anchor xml:id="_namespaceclang_1_1cxcursor_1a62e05b7f28b894bf90226918a8f3386a"/>    <section>
    <title>MakeMacroDefinitionCursor()</title>
<indexterm><primary>MakeMacroDefinitionCursor</primary><secondary>clang::cxcursor</secondary></indexterm>
<indexterm><primary>clang::cxcursor</primary><secondary>MakeMacroDefinitionCursor</secondary></indexterm>
<para><computeroutput>CXCursor clang::cxcursor::MakeMacroDefinitionCursor (const MacroDefinitionRecord * MI, CXTranslationUnit TU)</computeroutput></para><para>

<para>Create a macro definition cursor. </para>
</para>
<para>
Definition at line <link linkend="__c_x_cursor_8cpp_source_1l00992">992</link> of file <link linkend="__c_x_cursor_8cpp_source">CXCursor.cpp</link>.</para>
<programlisting>00993 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00994 &#32;&#32;CXCursor&#32;C&#32;=&#32;{CXCursor_MacroDefinition,&#32;0,&#32;{MI,&#32;<emphasis role="keyword">nullptr</emphasis>,&#32;TU}};
00995 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;C;
00996 }
</programlisting><para>
Referenced by <link linkend="__c_index_8cpp_source_1l00451">clang::cxcursor::CursorVisitor::visitPreprocessedEntities()</link>.</para>
    </section><anchor xml:id="_namespaceclang_1_1cxcursor_1a2f0963c1339f8f17a78824250aee3918"/>    <section>
    <title>MakeMacroExpansionCursor()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>MakeMacroExpansionCursor</primary><secondary>clang::cxcursor</secondary></indexterm>
<indexterm><primary>clang::cxcursor</primary><secondary>MakeMacroExpansionCursor</secondary></indexterm>
<para><computeroutput>CXCursor clang::cxcursor::MakeMacroExpansionCursor (MacroDefinitionRecord * MI, SourceLocation Loc, CXTranslationUnit TU)</computeroutput></para>
<para>Create a &quot;pseudo&quot; macro expansion cursor, using a macro definition and a source location. </para>
<para>
Definition at line <link linkend="__c_x_cursor_8cpp_source_1l01009">1009</link> of file <link linkend="__c_x_cursor_8cpp_source">CXCursor.cpp</link>.</para>
<programlisting>01011 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
01012 &#32;&#32;assert(Loc.isValid());
01013 &#32;&#32;CXCursor&#32;C&#32;=&#32;{CXCursor_MacroExpansion,&#32;0,&#32;{MI,&#32;Loc.getPtrEncoding(),&#32;TU}};
01014 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;C;
01015 }
</programlisting>    </section><anchor xml:id="_namespaceclang_1_1cxcursor_1a64450be5a9ef97c872d47219caaccfce"/>    <section>
    <title>MakeMacroExpansionCursor()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>MakeMacroExpansionCursor</primary><secondary>clang::cxcursor</secondary></indexterm>
<indexterm><primary>clang::cxcursor</primary><secondary>MakeMacroExpansionCursor</secondary></indexterm>
<para><computeroutput>CXCursor clang::cxcursor::MakeMacroExpansionCursor (MacroExpansion * MI, CXTranslationUnit TU)</computeroutput></para><para>

<para>Create a macro expansion cursor. </para>
</para>
<para>
Definition at line <link linkend="__c_x_cursor_8cpp_source_1l01003">1003</link> of file <link linkend="__c_x_cursor_8cpp_source">CXCursor.cpp</link>.</para>
<programlisting>01004 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
01005 &#32;&#32;CXCursor&#32;C&#32;=&#32;{CXCursor_MacroExpansion,&#32;0,&#32;{MI,&#32;<emphasis role="keyword">nullptr</emphasis>,&#32;TU}};
01006 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;C;
01007 }
</programlisting><para>
Referenced by <link linkend="__c_index_8cpp_source_1l00451">clang::cxcursor::CursorVisitor::visitPreprocessedEntities()</link>.</para>
    </section><anchor xml:id="_namespaceclang_1_1cxcursor_1a1fb1c1775cb1f7e194f860c8e5903a71"/>    <section>
    <title>MakePreprocessingDirectiveCursor()</title>
<indexterm><primary>MakePreprocessingDirectiveCursor</primary><secondary>clang::cxcursor</secondary></indexterm>
<indexterm><primary>clang::cxcursor</primary><secondary>MakePreprocessingDirectiveCursor</secondary></indexterm>
<para><computeroutput>CXCursor clang::cxcursor::MakePreprocessingDirectiveCursor (SourceRange Range, CXTranslationUnit TU)</computeroutput></para><para>

<para>Create a preprocessing directive cursor. </para>
</para>
<para>
Definition at line <link linkend="__c_x_cursor_8cpp_source_1l00975">975</link> of file <link linkend="__c_x_cursor_8cpp_source">CXCursor.cpp</link>.</para>
<programlisting>00976 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00977 &#32;&#32;CXCursor&#32;C&#32;=&#32;{
00978 &#32;&#32;&#32;&#32;&#32;&#32;CXCursor_PreprocessingDirective,
00979 &#32;&#32;&#32;&#32;&#32;&#32;0,
00980 &#32;&#32;&#32;&#32;&#32;&#32;{Range.getBegin().getPtrEncoding(),&#32;Range.getEnd().getPtrEncoding(),&#32;TU}};
00981 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;C;
00982 }
</programlisting>    </section><anchor xml:id="_namespaceclang_1_1cxcursor_1a787f5669055ba25e698a444d0106005f"/>    <section>
    <title>operator!=()</title>
<indexterm><primary>operator!=</primary><secondary>clang::cxcursor</secondary></indexterm>
<indexterm><primary>clang::cxcursor</primary><secondary>operator!=</secondary></indexterm>
<para><computeroutput>bool clang::cxcursor::operator!= (CXCursor X, CXCursor Y)<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line <link linkend="__c_x_cursor_8h_source_1l00284">284</link> of file <link linkend="__c_x_cursor_8h_source">CXCursor.h</link>.</para>
<programlisting>00284 {&#32;<emphasis role="keywordflow">return</emphasis>&#32;!(X&#32;==&#32;Y);&#32;}
</programlisting>    </section><anchor xml:id="_namespaceclang_1_1cxcursor_1a6eba9b639ae06e944e28d8a44767cf72"/>    <section>
    <title>operator==()</title>
<indexterm><primary>operator==</primary><secondary>clang::cxcursor</secondary></indexterm>
<indexterm><primary>clang::cxcursor</primary><secondary>operator==</secondary></indexterm>
<para><computeroutput>bool clang::cxcursor::operator== (CXCursor X, CXCursor Y)</computeroutput></para><para>
Definition at line <link linkend="__c_x_cursor_8cpp_source_1l01237">1237</link> of file <link linkend="__c_x_cursor_8cpp_source">CXCursor.cpp</link>.</para>
<programlisting>01237 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
01238 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;X.kind&#32;==&#32;Y.kind&#32;&amp;&amp;&#32;X.data[0]&#32;==&#32;Y.data[0]&#32;&amp;&amp;&#32;X.data[1]&#32;==&#32;Y.data[1]&#32;&amp;&amp;
01239 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;X.data[2]&#32;==&#32;Y.data[2];
01240 }
</programlisting></section>
</section>
</section>
