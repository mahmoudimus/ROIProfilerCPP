<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="__c_x_string_8cpp" xml:lang="en-US">
<title>/Users/maximilian/clang-llvm/clang/tools/libclang/CXString.cpp File Reference</title>
<indexterm><primary>/Users/maximilian/clang-llvm/clang/tools/libclang/CXString.cpp</primary></indexterm>
<programlisting>#include &quot;CXString.h&quot;
#include &quot;CXTranslationUnit.h&quot;
#include &quot;clang-c/Index.h&quot;
#include &quot;clang/Frontend/ASTUnit.h&quot;
#include &quot;llvm/Support/ErrorHandling.h&quot;
</programlisting><simplesect>
    <title>Namespaces    </title>
        <itemizedlist>
            <listitem><para> <link linkend="_namespaceclang">clang</link></para>

<para>-rename </para>
</listitem>
            <listitem><para> <link linkend="_namespaceclang_1_1cxstring">clang::cxstring</link></para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Enumerations    </title>
        <itemizedlist>
            <listitem><para>enum <link linkend="__c_x_string_8cpp_1ab8841ac79b6d3e2432ef36b111ccbdbe">CXStringFlag</link> { <link linkend="__c_x_string_8cpp_1ab8841ac79b6d3e2432ef36b111ccbdbead25153f33f1e6cfab882b9feb6790073">CXS_Unmanaged</link>
, <link linkend="__c_x_string_8cpp_1ab8841ac79b6d3e2432ef36b111ccbdbeae75b2f550ab333f9545a54e835053de1">CXS_Malloc</link>
, <link linkend="__c_x_string_8cpp_1ab8841ac79b6d3e2432ef36b111ccbdbeac341fab4481fed30e1d8bdb6f9ad7a64">CXS_StringBuf</link>
 }</para>

<para>Describes the kind of underlying data in CXString. </para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Functions    </title>
        <itemizedlist>
            <listitem><para>CXString <link linkend="_namespaceclang_1_1cxstring_1a8a49aa6ea196abdde85886689f2630f9">clang::cxstring::createEmpty</link> ()</para>

<para>Create a CXString object for an empty &quot;&quot; string. </para>
</listitem>
            <listitem><para>CXString <link linkend="_namespaceclang_1_1cxstring_1a8684a35d52ccb8c623144db89a0205e1">clang::cxstring::createNull</link> ()</para>
</listitem>
            <listitem><para>CXString <link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">clang::cxstring::createRef</link> (const char *String)</para>
</listitem>
            <listitem><para>CXString <link linkend="_namespaceclang_1_1cxstring_1a19a4962be87f75a8c1fa5a0b75f76298">clang::cxstring::createDup</link> (const char *String)</para>
</listitem>
            <listitem><para>CXString <link linkend="_namespaceclang_1_1cxstring_1ae7319593ba701fd2e736767deae5ef5f">clang::cxstring::createRef</link> (StringRef String)</para>
</listitem>
            <listitem><para>CXString <link linkend="_namespaceclang_1_1cxstring_1a62e4008f6bfd5c212aada470275c24b1">clang::cxstring::createDup</link> (StringRef String)</para>
</listitem>
            <listitem><para>CXString <link linkend="_namespaceclang_1_1cxstring_1a4ea867311d5651a36d2dfa1f1258638c">clang::cxstring::createCXString</link> (CXStringBuf *buf)</para>

<para>Create a CXString object that is backed by a string buffer. </para>
</listitem>
            <listitem><para>CXStringSet * <link linkend="_namespaceclang_1_1cxstring_1a0ebb0924de5a075db7ae5d7937df8056">clang::cxstring::createSet</link> (const std::vector&lt; std::string &gt; &amp;<link linkend="__c_x_loaded_diagnostic_8cpp_1a43f230387ba6f0bf2e696b6029b136bb">Strings</link>)</para>
</listitem>
            <listitem><para>CXStringBuf * <link linkend="_namespaceclang_1_1cxstring_1ad1ccb52527d7a42e4ad5c3e1f6af9907">clang::cxstring::getCXStringBuf</link> (CXTranslationUnit TU)</para>
</listitem>
            <listitem><para>bool <link linkend="_namespaceclang_1_1cxstring_1a23337a6942da94448da8b249362d626e">clang::cxstring::isManagedByPool</link> (CXString str)</para>

<para>Returns true if the CXString data is managed by a pool. </para>
</listitem>
            <listitem><para>const char * <link linkend="__c_x_string_8cpp_1acd478c1b1785e17c0fe377bd70a2195f">clang_getCString</link> (CXString string)</para>
</listitem>
            <listitem><para>void <link linkend="__c_x_string_8cpp_1a46c85f1255580ed186aa6f7380a06883">clang_disposeString</link> (CXString string)</para>
</listitem>
            <listitem><para>void <link linkend="__c_x_string_8cpp_1aa942422cf97595a7f683a4ad4cf89782">clang_disposeStringSet</link> (CXStringSet *set)</para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Enumeration Type Documentation</title>
<anchor xml:id="__c_x_string_8cpp_1ab8841ac79b6d3e2432ef36b111ccbdbe"/>    <section>
    <title>CXStringFlag</title>
<indexterm><primary>CXStringFlag</primary><secondary>CXString.cpp</secondary></indexterm>
<indexterm><primary>CXString.cpp</primary><secondary>CXStringFlag</secondary></indexterm>
<para><computeroutput>enum <link linkend="__c_x_string_8cpp_1ab8841ac79b6d3e2432ef36b111ccbdbe">CXStringFlag</link></computeroutput></para><para>

<para>Describes the kind of underlying data in CXString. </para>
</para>
<informaltable frame="all">
<title>Enumerator</title>
    <tgroup cols="2" align="left" colsep="1" rowsep="1">
      <colspec colname='c1'/>
      <colspec colname='c2'/>
<tbody>
<row><entry><indexterm><primary>CXS_Unmanaged</primary><secondary>CXString.cpp</secondary></indexterm>
<indexterm><primary>CXString.cpp</primary><secondary>CXS_Unmanaged</secondary></indexterm>
<anchor xml:id="__c_x_string_8cpp_1ab8841ac79b6d3e2432ef36b111ccbdbead25153f33f1e6cfab882b9feb6790073"/>CXS_Unmanaged</entry><entry>
<para>CXString contains a &apos;const char *&apos; that it doesn&apos;t own. </para>
</entry></row><row><entry><indexterm><primary>CXS_Malloc</primary><secondary>CXString.cpp</secondary></indexterm>
<indexterm><primary>CXString.cpp</primary><secondary>CXS_Malloc</secondary></indexterm>
<anchor xml:id="__c_x_string_8cpp_1ab8841ac79b6d3e2432ef36b111ccbdbeae75b2f550ab333f9545a54e835053de1"/>CXS_Malloc</entry><entry>
<para>CXString contains a &apos;const char *&apos; that it allocated with malloc(). </para>
</entry></row><row><entry><indexterm><primary>CXS_StringBuf</primary><secondary>CXString.cpp</secondary></indexterm>
<indexterm><primary>CXString.cpp</primary><secondary>CXS_StringBuf</secondary></indexterm>
<anchor xml:id="__c_x_string_8cpp_1ab8841ac79b6d3e2432ef36b111ccbdbeac341fab4481fed30e1d8bdb6f9ad7a64"/>CXS_StringBuf</entry><entry>
<para>CXString contains a CXStringBuf that needs to be returned to the CXStringPool. </para>
</entry></row>    </tbody>
    </tgroup>
</informaltable>
<para>
Definition at line <link linkend="__c_x_string_8cpp_source_1l00024">24</link> of file <link linkend="__c_x_string_8cpp_source">CXString.cpp</link>.</para>
<programlisting>00024 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00026 &#32;&#32;<link linkend="__c_x_string_8cpp_1ab8841ac79b6d3e2432ef36b111ccbdbead25153f33f1e6cfab882b9feb6790073">CXS_Unmanaged</link>,
00027 
00029 &#32;&#32;<link linkend="__c_x_string_8cpp_1ab8841ac79b6d3e2432ef36b111ccbdbeae75b2f550ab333f9545a54e835053de1">CXS_Malloc</link>,
00030 
00033 &#32;&#32;<link linkend="__c_x_string_8cpp_1ab8841ac79b6d3e2432ef36b111ccbdbeac341fab4481fed30e1d8bdb6f9ad7a64">CXS_StringBuf</link>
00034 };
</programlisting></section>
</section>
<section>
<title>Function Documentation</title>
<anchor xml:id="__c_x_string_8cpp_1a46c85f1255580ed186aa6f7380a06883"/>    <section>
    <title>clang_disposeString()</title>
<indexterm><primary>clang_disposeString</primary><secondary>CXString.cpp</secondary></indexterm>
<indexterm><primary>CXString.cpp</primary><secondary>clang_disposeString</secondary></indexterm>
<para><computeroutput>void clang_disposeString (CXString string)</computeroutput></para><para>
Definition at line <link linkend="__c_x_string_8cpp_source_1l00170">170</link> of file <link linkend="__c_x_string_8cpp_source">CXString.cpp</link>.</para>
<programlisting>00170 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00171 &#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;((<link linkend="__c_x_string_8cpp_1ab8841ac79b6d3e2432ef36b111ccbdbe">CXStringFlag</link>)&#32;<emphasis role="keywordtype">string</emphasis>.private_flags)&#32;{
00172 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="__c_x_string_8cpp_1ab8841ac79b6d3e2432ef36b111ccbdbead25153f33f1e6cfab882b9feb6790073">CXS_Unmanaged</link>:
00173 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
00174 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="__c_x_string_8cpp_1ab8841ac79b6d3e2432ef36b111ccbdbeae75b2f550ab333f9545a54e835053de1">CXS_Malloc</link>:
00175 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="keywordtype">string</emphasis>.data)
00176 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;free(<emphasis role="keyword">const_cast&lt;</emphasis><emphasis role="keywordtype">void</emphasis>&#32;*<emphasis role="keyword">&gt;</emphasis>(<emphasis role="keywordtype">string</emphasis>.data));
00177 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
00178 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="__c_x_string_8cpp_1ab8841ac79b6d3e2432ef36b111ccbdbeac341fab4481fed30e1d8bdb6f9ad7a64">CXS_StringBuf</link>:
00179 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_cast&lt;</emphasis><link linkend="_structclang_1_1cxstring_1_1_c_x_string_buf">cxstring::CXStringBuf</link>&#32;*<emphasis role="keyword">&gt;</emphasis>(
00180 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const_cast&lt;</emphasis><emphasis role="keywordtype">void</emphasis>&#32;*<emphasis role="keyword">&gt;</emphasis>(<emphasis role="keywordtype">string</emphasis>.data))-&gt;<link linkend="_structclang_1_1cxstring_1_1_c_x_string_buf_1add7775f4003b4bfbb5c470976ef73485">dispose</link>();
00181 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
00182 &#32;&#32;}
00183 }
</programlisting><para>
References <link linkend="__c_x_string_8cpp_source_1l00029">CXS_Malloc</link>, <link linkend="__c_x_string_8cpp_source_1l00033">CXS_StringBuf</link>, <link linkend="__c_x_string_8cpp_source_1l00026">CXS_Unmanaged</link>, and <link linkend="__c_x_string_8cpp_source_1l00148">clang::cxstring::CXStringBuf::dispose()</link>.</para>
<para>
Referenced by <link linkend="__c_index_8cpp_source_1l08142">clang_disposeCXPlatformAvailability()</link>, <link linkend="__c_x_string_8cpp_source_1l00185">clang_disposeStringSet()</link>, <link linkend="_c-index-test_8c_source_1l01418">InclusionVisitor()</link>, <link linkend="__c_index_8cpp_source_1l09132">clang::cxindex::Logger::operator&lt;&lt;()</link>, <link linkend="_c-index-test_8c_source_1l01189">PrintDiagnostic()</link>, and <link linkend="__c_index_8cpp_source_1l08994">clang::cxindex::printDiagsToStderr()</link>.</para>
    </section><anchor xml:id="__c_x_string_8cpp_1aa942422cf97595a7f683a4ad4cf89782"/>    <section>
    <title>clang_disposeStringSet()</title>
<indexterm><primary>clang_disposeStringSet</primary><secondary>CXString.cpp</secondary></indexterm>
<indexterm><primary>CXString.cpp</primary><secondary>clang_disposeStringSet</secondary></indexterm>
<para><computeroutput>void clang_disposeStringSet (CXStringSet * set)</computeroutput></para><para>
Definition at line <link linkend="__c_x_string_8cpp_source_1l00185">185</link> of file <link linkend="__c_x_string_8cpp_source">CXString.cpp</link>.</para>
<programlisting>00185 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00186 &#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">unsigned</emphasis>&#32;SI&#32;=&#32;0,&#32;SE&#32;=&#32;set-&gt;Count;&#32;SI&#32;&lt;&#32;SE;&#32;++SI)
00187 &#32;&#32;&#32;&#32;<link linkend="__c_x_string_8cpp_1a46c85f1255580ed186aa6f7380a06883">clang_disposeString</link>(set-&gt;Strings[SI]);
00188 &#32;&#32;<emphasis role="keyword">delete</emphasis>[]&#32;set-&gt;Strings;
00189 &#32;&#32;<emphasis role="keyword">delete</emphasis>&#32;set;
00190 }
</programlisting><para>
References <link linkend="__c_x_string_8cpp_source_1l00170">clang_disposeString()</link>.</para>
    </section><anchor xml:id="__c_x_string_8cpp_1acd478c1b1785e17c0fe377bd70a2195f"/>    <section>
    <title>clang_getCString()</title>
<indexterm><primary>clang_getCString</primary><secondary>CXString.cpp</secondary></indexterm>
<indexterm><primary>CXString.cpp</primary><secondary>clang_getCString</secondary></indexterm>
<para><computeroutput>const char* clang_getCString (CXString string)</computeroutput></para><para>
Definition at line <link linkend="__c_x_string_8cpp_source_1l00163">163</link> of file <link linkend="__c_x_string_8cpp_source">CXString.cpp</link>.</para>
<programlisting>00163 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00164 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="keywordtype">string</emphasis>.private_flags&#32;==&#32;(<emphasis role="keywordtype">unsigned</emphasis>)&#32;<link linkend="__c_x_string_8cpp_1ab8841ac79b6d3e2432ef36b111ccbdbeac341fab4481fed30e1d8bdb6f9ad7a64">CXS_StringBuf</link>)&#32;{
00165 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keyword">const&#32;</emphasis><link linkend="_structclang_1_1cxstring_1_1_c_x_string_buf">cxstring::CXStringBuf</link>&#32;*<emphasis role="keyword">&gt;</emphasis>(<emphasis role="keywordtype">string</emphasis>.data)-&gt;Data.data();
00166 &#32;&#32;}
00167 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keyword">const&#32;</emphasis><emphasis role="keywordtype">char</emphasis>&#32;*<emphasis role="keyword">&gt;</emphasis>(<emphasis role="keywordtype">string</emphasis>.data);
00168 }
</programlisting><para>
References <link linkend="__c_x_string_8cpp_source_1l00033">CXS_StringBuf</link>.</para>
<para>
Referenced by <link linkend="_c-index-test_8c_source_1l01418">InclusionVisitor()</link>, <link linkend="__c_index_8cpp_source_1l09177">clang::cxindex::Logger::operator&lt;&lt;()</link>, <link linkend="_c-index-test_8c_source_1l01189">PrintDiagnostic()</link>, and <link linkend="__c_index_8cpp_source_1l08994">clang::cxindex::printDiagsToStderr()</link>.</para>
</section>
</section>
</section>
