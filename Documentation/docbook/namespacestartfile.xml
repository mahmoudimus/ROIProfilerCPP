<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_namespacestartfile" xml:lang="en-US">
<title>startfile Namespace Reference</title>
<indexterm><primary>startfile</primary></indexterm>
<simplesect>
    <title>Classes    </title>
        <itemizedlist>
            <listitem><para>class <link linkend="_classstartfile_1_1_base_controller">BaseController</link></para>
</listitem>
            <listitem><para>class <link linkend="_classstartfile_1_1_controller">Controller</link></para>
</listitem>
            <listitem><para>class <link linkend="_classstartfile_1_1_start">Start</link></para>
</listitem>
            <listitem><para>class <link linkend="_classstartfile_1_1_kfm_client">KfmClient</link></para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Functions    </title>
        <itemizedlist>
            <listitem><para>def <link linkend="_namespacestartfile_1afa337d13522bb3e9c4a8d12190480c18">detect_desktop_environment</link> ()</para>
</listitem>
            <listitem><para>def <link linkend="_namespacestartfile_1a5cedadc2bd383955c01a824f59e9ae59">register_X_controllers</link> ()</para>
</listitem>
            <listitem><para>def <link linkend="_namespacestartfile_1af8790d592af0bdf089efd317cbd70e2e">get</link> ()</para>
</listitem>
            <listitem><para>def <link linkend="_namespacestartfile_1aa582f75134b683dc321c07d01ff8e501">open</link> (filename)</para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Function Documentation</title>
<anchor xml:id="_namespacestartfile_1afa337d13522bb3e9c4a8d12190480c18"/>    <section>
    <title>detect_desktop_environment()</title>
<indexterm><primary>detect_desktop_environment</primary><secondary>startfile</secondary></indexterm>
<indexterm><primary>startfile</primary><secondary>detect_desktop_environment</secondary></indexterm>
<para><computeroutput>def startfile.detect_desktop_environment ( )</computeroutput></para>
<para><literallayout><computeroutput>Checks for known desktop environments

Return the desktop environments name, lowercase (kde, gnome, xfce)
or &quot;generic&quot;</computeroutput></literallayout> </para>
<para>
Definition at line <link linkend="_startfile_8py_source_1l00148">148</link> of file <link linkend="_startfile_8py_source">startfile.py</link>.</para>
<programlisting>00148 &#32;&#32;&#32;&#32;<emphasis role="keyword">def&#32;</emphasis><link linkend="_namespacestartfile_1afa337d13522bb3e9c4a8d12190480c18">detect_desktop_environment</link>():
00149 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&apos;&apos;&apos;Checks&#32;for&#32;known&#32;desktop&#32;environments</emphasis>
00150 <emphasis role="stringliteral"></emphasis>
00151 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Return&#32;the&#32;desktop&#32;environments&#32;name,&#32;lowercase&#32;(kde,&#32;gnome,&#32;xfce)</emphasis>
00152 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;or&#32;&quot;generic&quot;</emphasis>
00153 <emphasis role="stringliteral"></emphasis>
00154 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&apos;&apos;&apos;</emphasis>
00155 
00156 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;desktop_environment&#32;=&#32;<emphasis role="stringliteral">&apos;generic&apos;</emphasis>
00157 
00158 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;os.environ.get(<emphasis role="stringliteral">&apos;KDE_FULL_SESSION&apos;</emphasis>)&#32;==&#32;<emphasis role="stringliteral">&apos;true&apos;</emphasis>:
00159 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;desktop_environment&#32;=&#32;<emphasis role="stringliteral">&apos;kde&apos;</emphasis>
00160 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">elif</emphasis>&#32;os.environ.get(<emphasis role="stringliteral">&apos;GNOME_DESKTOP_SESSION_ID&apos;</emphasis>):
00161 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;desktop_environment&#32;=&#32;<emphasis role="stringliteral">&apos;gnome&apos;</emphasis>
00162 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>:
00163 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">try</emphasis>:
00164 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;info&#32;=&#32;getoutput(<emphasis role="stringliteral">&apos;xprop&#32;-root&#32;_DT_SAVE_MODE&apos;</emphasis>)
00165 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="stringliteral">&apos;&#32;=&#32;&quot;xfce4&quot;&apos;</emphasis>&#32;<emphasis role="keywordflow">in</emphasis>&#32;info:
00166 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;desktop_environment&#32;=&#32;<emphasis role="stringliteral">&apos;xfce&apos;</emphasis>
00167 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">except</emphasis>&#32;(OSError,&#32;RuntimeError):
00168 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">pass</emphasis>
00169 
00170 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;desktop_environment
00171 
00172 
</programlisting><para>
Referenced by <link linkend="_startfile_8py_source_1l00181">get()</link>.</para>
    </section><anchor xml:id="_namespacestartfile_1af8790d592af0bdf089efd317cbd70e2e"/>    <section>
    <title>get()</title>
<indexterm><primary>get</primary><secondary>startfile</secondary></indexterm>
<indexterm><primary>startfile</primary><secondary>get</secondary></indexterm>
<para><computeroutput>def startfile.get ( )</computeroutput></para><para>
Definition at line <link linkend="_startfile_8py_source_1l00181">181</link> of file <link linkend="_startfile_8py_source">startfile.py</link>.</para>
<programlisting>00181 &#32;&#32;&#32;&#32;<emphasis role="keyword">def&#32;</emphasis><link linkend="_namespacestartfile_1af8790d592af0bdf089efd317cbd70e2e">get</link>():
00182 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;controllers_map&#32;=&#32;{
00183 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&apos;gnome&apos;</emphasis>:&#32;<emphasis role="stringliteral">&apos;gnome-open&apos;</emphasis>,
00184 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&apos;kde&apos;</emphasis>:&#32;<emphasis role="stringliteral">&apos;kde-open&apos;</emphasis>,
00185 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&apos;xfce&apos;</emphasis>:&#32;<emphasis role="stringliteral">&apos;exo-open&apos;</emphasis>,
00186 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00187 
00188 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;desktop_environment&#32;=&#32;<link linkend="_namespacestartfile_1afa337d13522bb3e9c4a8d12190480c18">detect_desktop_environment</link>()
00189 
00190 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">try</emphasis>:
00191 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;controller_name&#32;=&#32;controllers_map[desktop_environment]
00192 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_controllers[controller_name].open
00193 
00194 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">except</emphasis>&#32;KeyError:
00195 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="stringliteral">&apos;xdg-open&apos;</emphasis>&#32;<emphasis role="keywordflow">in</emphasis>&#32;_controllers:
00196 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_controllers[<emphasis role="stringliteral">&apos;xdg-open&apos;</emphasis>].open
00197 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>:
00198 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;webbrowser.open
00199 
00200 
</programlisting><para>
References <link linkend="_startfile_8py_source_1l00148">detect_desktop_environment()</link>, and <link linkend="_startfile_8py_source_1l00173">register_X_controllers()</link>.</para>
<para>
Referenced by <link linkend="__c_index_8cpp_source_1l03163">clang::cxcursor::CursorVisitor.RunVisitorWorkList()</link>, and <link linkend="__scan_view_8py_source_1l00297">ScanView.ScanViewRequestHandler.submit_bug()</link>.</para>
    </section><anchor xml:id="_namespacestartfile_1aa582f75134b683dc321c07d01ff8e501"/>    <section>
    <title>open()</title>
<indexterm><primary>open</primary><secondary>startfile</secondary></indexterm>
<indexterm><primary>startfile</primary><secondary>open</secondary></indexterm>
<para><computeroutput>def startfile.open ( filename)</computeroutput></para>
<para><literallayout><computeroutput>Open a file or a URL in the registered default application.</computeroutput></literallayout> </para>
<para>
Definition at line <link linkend="_startfile_8py_source_1l00206">206</link> of file <link linkend="_startfile_8py_source">startfile.py</link>.</para>
<programlisting>00206 <emphasis role="keyword">def&#32;</emphasis><link linkend="_namespacestartfile_1aa582f75134b683dc321c07d01ff8e501">open</link>(filename):
00207 &#32;&#32;&#32;&#32;<emphasis role="stringliteral">&apos;&apos;&apos;Open&#32;a&#32;file&#32;or&#32;a&#32;URL&#32;in&#32;the&#32;registered&#32;default&#32;application.&apos;&apos;&apos;</emphasis>
00208 
00209 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_open(filename)
</programlisting><para>
Referenced by <link linkend="_report_8py_source_1l00069">libscanbuild.report.assemble_cover()</link>, <link linkend="_test__exec__anatomy_8py_source_1l00032">tests.functional.cases.test_exec_anatomy.ExecAnatomyTest.assertEqualJson()</link>, <link linkend="_test__from__cdb_8py_source_1l00182">tests.functional.cases.test_from_cdb.TitleTest.assertTitleEqual()</link>, <link linkend="__reporter_8py_source_1l00086">Reporter.EmailReporter.attachFile()</link>, <link linkend="_report_8py_source_1l00168">libscanbuild.report.bug_report()</link>, <link linkend="_report_8py_source_1l00116">libscanbuild.report.bug_summary()</link>, <link linkend="_intercept_8py_source_1l00058">libscanbuild.intercept.capture()</link>, <link linkend="_report_8py_source_1l00580">libscanbuild.report.commonprefix_from()</link>, <link linkend="_test__create__cdb_8py_source_1l00024">tests.functional.cases.test_create_cdb.CompilationDatabaseTest.count_entries()</link>, <link linkend="_test__create__cdb_8py_source_1l00106">tests.functional.cases.test_create_cdb.ResumeFeatureTest.count_entries()</link>, <link linkend="_report_8py_source_1l00215">libscanbuild.report.crash_report()</link>, <link linkend="_tests_2functional_2cases_2____init_____8py_source_1l00068">tests.functional.cases.create_empty_file()</link>, <link linkend="__scan_view_8py_source_1l00270">ScanView.ScanViewRequestHandler.load_crashes()</link>, <link linkend="__scan_view_8py_source_1l00261">ScanView.ScanViewRequestHandler.load_report()</link>, <link linkend="_clang-format-diff_8py_source_1l00038">clang-format-diff.main()</link>, <link linkend="_clang-format_8py_source_1l00069">clang-format.main()</link>, <link linkend="_analyze_8py_source_1l00164">libscanbuild.analyze.merge_ctu_extdef_maps()</link>, <link linkend="_report_8py_source_1l00286">libscanbuild.report.merge_sarif_files()</link>, <link linkend="_report_8py_source_1l00400">libscanbuild.report.parse_bug_html()</link>, <link linkend="_report_8py_source_1l00379">libscanbuild.report.parse_bug_plist()</link>, <link linkend="_report_8py_source_1l00438">libscanbuild.report.parse_crash()</link>, <link linkend="_intercept_8py_source_1l00183">libscanbuild.intercept.parse_exec_trace()</link>, <link linkend="_test__from__cdb_8py_source_1l00015">tests.functional.cases.test_from_cdb.prepare_cdb()</link>, <link linkend="_analyze_8py_source_1l00474">libscanbuild.analyze.report_failure()</link>, <link linkend="_test__analyze_8py_source_1l00131">tests.unit.test_analyze.RunAnalyzerTest.run_analyzer()</link>, <link linkend="_analyze_8py_source_1l00208">libscanbuild.analyze.run_analyzer_parallel()</link>, <link linkend="_test__report_8py_source_1l00014">tests.unit.test_report.run_bug_parse()</link>, <link linkend="_test__report_8py_source_1l00023">tests.unit.test_report.run_crash_parse()</link>, <link linkend="_test__create__cdb_8py_source_1l00130">tests.functional.cases.test_create_cdb.ResultFormatingTest.run_intercept()</link>, <link linkend="__scan_view_8py_source_1l00163">ScanView.ScanViewServer.save_config()</link>, <link linkend="__scan_view_8py_source_1l00418">ScanView.ScanViewRequestHandler.send_open_report()</link>, <link linkend="__scan_view_8py_source_1l00758">ScanView.ScanViewRequestHandler.send_patched_file()</link>, <link linkend="__scan_view_8py_source_1l00718">ScanView.ScanViewRequestHandler.send_path()</link>, <link linkend="_test__clang_8py_source_1l00023">tests.unit.test_clang.ClangGetArgumentsTest.test_get_clang_arguments()</link>, <link linkend="_test__report_8py_source_1l00382">tests.unit.test_report.MergeSarifTest.test_merge_updates_embedded_link()</link>, <link linkend="_test__report_8py_source_1l00152">tests.unit.test_report.MergeSarifTest.test_merging_sarif()</link>, <link linkend="_test__report_8py_source_1l00554">tests.unit.test_report.MergeSarifTest.test_overflow_run_count()</link>, <link linkend="_test__report_8py_source_1l00077">tests.unit.test_report.ParseFileTest.test_parse_real_crash()</link>, <link linkend="_test__analyze_8py_source_1l00190">tests.unit.test_analyze.ReportFailureTest.test_report_failure_create_files()</link>, <link linkend="_test__intercept_8py_source_1l00038">tests.unit.test_intercept.InterceptUtilTest.test_sip()</link>, <link linkend="_lib_2libear_2____init_____8py_source_1l00201">libear.Configure.write_by_template()</link>, and <link linkend="_intercept_8py_source_1l00167">libscanbuild.intercept.write_exec_trace()</link>.</para>
    </section><anchor xml:id="_namespacestartfile_1a5cedadc2bd383955c01a824f59e9ae59"/>    <section>
    <title>register_X_controllers()</title>
<indexterm><primary>register_X_controllers</primary><secondary>startfile</secondary></indexterm>
<indexterm><primary>startfile</primary><secondary>register_X_controllers</secondary></indexterm>
<para><computeroutput>def startfile.register_X_controllers ( )</computeroutput></para><para>
Definition at line <link linkend="_startfile_8py_source_1l00173">173</link> of file <link linkend="_startfile_8py_source">startfile.py</link>.</para>
<programlisting>00173 &#32;&#32;&#32;&#32;<emphasis role="keyword">def&#32;</emphasis><link linkend="_namespacestartfile_1a5cedadc2bd383955c01a824f59e9ae59">register_X_controllers</link>():
00174 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;_iscommand(<emphasis role="stringliteral">&apos;kfmclient&apos;</emphasis>):
00175 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_controllers[<emphasis role="stringliteral">&apos;kde-open&apos;</emphasis>]&#32;=&#32;KfmClient()
00176 
00177 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;command&#32;<emphasis role="keywordflow">in</emphasis>&#32;(<emphasis role="stringliteral">&apos;gnome-open&apos;</emphasis>,&#32;<emphasis role="stringliteral">&apos;exo-open&apos;</emphasis>,&#32;<emphasis role="stringliteral">&apos;xdg-open&apos;</emphasis>):
00178 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;_iscommand(command):
00179 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_controllers[command]&#32;=&#32;Controller(command)
00180 
</programlisting><para>
Referenced by <link linkend="_startfile_8py_source_1l00181">get()</link>.</para>
</section>
</section>
</section>
