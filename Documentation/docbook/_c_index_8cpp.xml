<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="__c_index_8cpp" xml:lang="en-US">
<title>/Users/maximilian/clang-llvm/clang/tools/libclang/CIndex.cpp File Reference</title>
<indexterm><primary>/Users/maximilian/clang-llvm/clang/tools/libclang/CIndex.cpp</primary></indexterm>
<programlisting>#include &quot;CIndexDiagnostic.h&quot;
#include &quot;CIndexer.h&quot;
#include &quot;CLog.h&quot;
#include &quot;CXCursor.h&quot;
#include &quot;CXSourceLocation.h&quot;
#include &quot;CXString.h&quot;
#include &quot;CXTranslationUnit.h&quot;
#include &quot;CXType.h&quot;
#include &quot;CursorVisitor.h&quot;
#include &quot;clang-c/FatalErrorHandler.h&quot;
#include &quot;clang/AST/Attr.h&quot;
#include &quot;clang/AST/DeclObjCCommon.h&quot;
#include &quot;clang/AST/Mangle.h&quot;
#include &quot;clang/AST/OpenMPClause.h&quot;
#include &quot;clang/AST/StmtVisitor.h&quot;
#include &quot;clang/Basic/Diagnostic.h&quot;
#include &quot;clang/Basic/DiagnosticCategories.h&quot;
#include &quot;clang/Basic/DiagnosticIDs.h&quot;
#include &quot;clang/Basic/Stack.h&quot;
#include &quot;clang/Basic/TargetInfo.h&quot;
#include &quot;clang/Basic/Version.h&quot;
#include &quot;clang/Frontend/ASTUnit.h&quot;
#include &quot;clang/Frontend/CompilerInstance.h&quot;
#include &quot;clang/Index/CommentToXML.h&quot;
#include &quot;clang/Lex/HeaderSearch.h&quot;
#include &quot;clang/Lex/Lexer.h&quot;
#include &quot;clang/Lex/PreprocessingRecord.h&quot;
#include &quot;clang/Lex/Preprocessor.h&quot;
#include &quot;llvm/ADT/Optional.h&quot;
#include &quot;llvm/ADT/STLExtras.h&quot;
#include &quot;llvm/ADT/StringSwitch.h&quot;
#include &quot;llvm/Config/llvm-config.h&quot;
#include &quot;llvm/Support/Compiler.h&quot;
#include &quot;llvm/Support/CrashRecoveryContext.h&quot;
#include &quot;llvm/Support/Format.h&quot;
#include &quot;llvm/Support/ManagedStatic.h&quot;
#include &quot;llvm/Support/MemoryBuffer.h&quot;
#include &quot;llvm/Support/Program.h&quot;
#include &quot;llvm/Support/SaveAndRestore.h&quot;
#include &quot;llvm/Support/Signals.h&quot;
#include &quot;llvm/Support/TargetSelect.h&quot;
#include &quot;llvm/Support/Threading.h&quot;
#include &quot;llvm/Support/Timer.h&quot;
#include &quot;llvm/Support/raw_ostream.h&quot;
#include &lt;mutex&gt;
#include &quot;clang/Basic/OpenCLImageTypes.def&quot;
#include &quot;clang/Basic/OpenCLExtensionTypes.def&quot;
#include &quot;clang/Basic/AArch64SVEACLETypes.def&quot;
#include &quot;clang/Basic/PPCTypes.def&quot;
#include &quot;clang/Basic/RISCVVTypes.def&quot;
#include &quot;clang/AST/BuiltinTypes.def&quot;
#include &quot;llvm/Frontend/OpenMP/OMP.inc&quot;
</programlisting><simplesect>
    <title>Classes    </title>
        <itemizedlist>
            <listitem><para>struct <link linkend="_struct_expr_eval_result">ExprEvalResult</link></para>
</listitem>
            <listitem><para>struct <link linkend="_struct___c_x_child_visit_result">_CXChildVisitResult</link></para>
</listitem>
            <listitem><para>struct <link linkend="_struct_get_cursor_data">GetCursorData</link></para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Namespaces    </title>
        <itemizedlist>
            <listitem><para> <link linkend="_namespaceclang">clang</link></para>

<para>-rename </para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Macros    </title>
        <itemizedlist>
            <listitem><para>#define <link linkend="__c_index_8cpp_1a115028e350b8253973a4fedd9d0f309a">IMAGE_TYPE</link>(ImgType,  Id,  SingletonId,  Access,  Suffix)     case BuiltinType::Id:</para>
</listitem>
            <listitem><para>#define <link linkend="__c_index_8cpp_1a5b3b75a224d735f0a0e119919afc304e">EXT_OPAQUE_TYPE</link>(ExtTYpe,  Id,  Ext)   case BuiltinType::Id:</para>
</listitem>
            <listitem><para>#define <link linkend="__c_index_8cpp_1a57c38b1977544d550c582f2e5e3a20ca">SVE_TYPE</link>(Name,  Id,  SingletonId)   case BuiltinType::Id:</para>
</listitem>
            <listitem><para>#define <link linkend="__c_index_8cpp_1a20827ed4c0d752bf188345da115bf9c3">PPC_VECTOR_TYPE</link>(Name,  Id,  Size)   case BuiltinType::Id:</para>
</listitem>
            <listitem><para>#define <link linkend="__c_index_8cpp_1a57fec5be573f15a3be2601d4bdfa1586">RVV_TYPE</link>(Name,  Id,  SingletonId)   case BuiltinType::Id:</para>
</listitem>
            <listitem><para>#define <link linkend="__c_index_8cpp_1a1df410a05b3c6fe66a44f327da27ebbf">BUILTIN_TYPE</link>(Id,  SingletonId)</para>
</listitem>
            <listitem><para>#define <link linkend="__c_index_8cpp_1a8c708d03de8db82b0b166f1ea9737bb1">SIGNED_TYPE</link>(Id,  SingletonId)   case BuiltinType::Id:</para>
</listitem>
            <listitem><para>#define <link linkend="__c_index_8cpp_1a7ebc4c4814c6cf64857b40b7a44bf094">UNSIGNED_TYPE</link>(Id,  SingletonId)   case BuiltinType::Id:</para>
</listitem>
            <listitem><para>#define <link linkend="__c_index_8cpp_1adb09ceedce7536185962e89a29bf6b9c">FLOATING_TYPE</link>(Id,  SingletonId)   case BuiltinType::Id:</para>
</listitem>
            <listitem><para>#define <link linkend="__c_index_8cpp_1aeded3cf51d63ad667f0cbedd717815e0">PLACEHOLDER_TYPE</link>(Id,  SingletonId)   case BuiltinType::Id:</para>
</listitem>
            <listitem><para>#define <link linkend="__c_index_8cpp_1a1fe77f9f91086eed81d3ce9a8eb220cc">DEFAULT_TYPELOC_IMPL</link>(CLASS,  PARENT)</para>
</listitem>
            <listitem><para>#define <link linkend="__c_index_8cpp_1a0d1aa3cc2a5472f2b0a2b62616ca9292">DEF_JOB</link>(NAME,  DATA,  KIND)</para>
</listitem>
            <listitem><para>#define <link linkend="__c_index_8cpp_1a74c01d19d8da079646c91a83b77a07a8">GEN_CLANG_CLAUSE_CLASS</link></para>
</listitem>
            <listitem><para>#define <link linkend="__c_index_8cpp_1ad6bad911a6488fa2115dc9be0a0d4f60">CLAUSE_CLASS</link>(Enum,  Str,  Class)   void Visit##Class(const Class *C);</para>
</listitem>
            <listitem><para>#define <link linkend="__c_index_8cpp_1ad1cb77494b671d342a9e12ea17594ce7">SET_CXOBJCPROP_ATTR</link>(A)</para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Typedefs    </title>
        <itemizedlist>
            <listitem><para>typedef struct <link linkend="_struct___c_x_child_visit_result">_CXChildVisitResult</link> * <link linkend="__c_index_8cpp_1a9ea360dd4276806a13c2ad73b0ae7b93">CXCursorVisitorBlock</link></para>
</listitem>
            <listitem><para>typedef std::vector&lt; CXTUResourceUsageEntry &gt; <link linkend="__c_index_8cpp_1a8c5eea8e1522f74827362d4be37f75c8">MemUsageEntries</link></para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Functions    </title>
        <itemizedlist>
            <listitem><para>CXIndex <link linkend="__c_index_8cpp_1a3420c8e7e10a7ff7906130b207cbb763">clang_createIndex</link> (int excludeDeclarationsFromPCH, int displayDiagnostics)</para>
</listitem>
            <listitem><para>void <link linkend="__c_index_8cpp_1aea91ddf5e996cba0de2f781cb17db1d5">clang_disposeIndex</link> (CXIndex CIdx)</para>
</listitem>
            <listitem><para>void <link linkend="__c_index_8cpp_1aaeea40424d1a6168c98f76021b71f9b6">clang_CXIndex_setGlobalOptions</link> (CXIndex CIdx, unsigned options)</para>
</listitem>
            <listitem><para>unsigned <link linkend="__c_index_8cpp_1a314f8348e1eb2def5b9e88eb8766f4ea">clang_CXIndex_getGlobalOptions</link> (CXIndex CIdx)</para>
</listitem>
            <listitem><para>void <link linkend="__c_index_8cpp_1a97a15ecfe8f0c017cbcc5c45f558123c">clang_CXIndex_setInvocationEmissionPathOption</link> (CXIndex CIdx, const char *Path)</para>
</listitem>
            <listitem><para>void <link linkend="__c_index_8cpp_1a1675239d59b2b9cd24f867fb2c15455b">clang_toggleCrashRecovery</link> (unsigned isEnabled)</para>
</listitem>
            <listitem><para>CXTranslationUnit <link linkend="__c_index_8cpp_1a42e314c492d0d545b1e0e3278894b75d">clang_createTranslationUnit</link> (CXIndex CIdx, const char *ast_filename)</para>
</listitem>
            <listitem><para>enum CXErrorCode <link linkend="__c_index_8cpp_1af1e8fe902a1fa65beb990cc7af6b7a2f">clang_createTranslationUnit2</link> (CXIndex CIdx, const char *ast_filename, CXTranslationUnit *out_TU)</para>
</listitem>
            <listitem><para>unsigned <link linkend="__c_index_8cpp_1a9d5c8fae100ea9327d269f44d23da9b3">clang_defaultEditingTranslationUnitOptions</link> ()</para>
</listitem>
            <listitem><para>CXTranslationUnit <link linkend="__c_index_8cpp_1a177b88f3aeb9c8b214f43afce5c6dc2d">clang_createTranslationUnitFromSourceFile</link> (CXIndex CIdx, const char *source_filename, int num_command_line_args, const char *const *command_line_args, unsigned num_unsaved_files, struct CXUnsavedFile *unsaved_files)</para>
</listitem>
            <listitem><para>CXTranslationUnit <link linkend="__c_index_8cpp_1ad0a9bffbc13f2874a5c0cbfd78aaeded">clang_parseTranslationUnit</link> (CXIndex CIdx, const char *source_filename, const char *const *command_line_args, int num_command_line_args, struct CXUnsavedFile *unsaved_files, unsigned num_unsaved_files, unsigned options)</para>
</listitem>
            <listitem><para>enum CXErrorCode <link linkend="__c_index_8cpp_1a3ddd508cc891d95a82b747955738249a">clang_parseTranslationUnit2</link> (CXIndex CIdx, const char *source_filename, const char *const *command_line_args, int num_command_line_args, struct CXUnsavedFile *unsaved_files, unsigned num_unsaved_files, unsigned options, CXTranslationUnit *out_TU)</para>
</listitem>
            <listitem><para>enum CXErrorCode <link linkend="__c_index_8cpp_1a2dd6d7ceea761f1f0e76ed6f0ba9692b">clang_parseTranslationUnit2FullArgv</link> (CXIndex CIdx, const char *source_filename, const char *const *command_line_args, int num_command_line_args, struct CXUnsavedFile *unsaved_files, unsigned num_unsaved_files, unsigned options, CXTranslationUnit *out_TU)</para>
</listitem>
            <listitem><para>CXString <link linkend="__c_index_8cpp_1a4e194e7ae768674631b733cec3815755">clang_Type_getObjCEncoding</link> (CXType CT)</para>
</listitem>
            <listitem><para>unsigned <link linkend="__c_index_8cpp_1a1b3a4946c65f34996299af537fc263ae">clang_Cursor_isMacroFunctionLike</link> (CXCursor C)</para>
</listitem>
            <listitem><para>unsigned <link linkend="__c_index_8cpp_1aa87fa24bae2366008033005d52645e57">clang_Cursor_isMacroBuiltin</link> (CXCursor C)</para>
</listitem>
            <listitem><para>unsigned <link linkend="__c_index_8cpp_1a0d254aedfcfc4b673c697a6f20b294af">clang_Cursor_isFunctionInlined</link> (CXCursor C)</para>
</listitem>
            <listitem><para>void <link linkend="__c_index_8cpp_1ae2f762d99b78b192138f9afd8773e82e">clang_EvalResult_dispose</link> (CXEvalResult E)</para>
</listitem>
            <listitem><para>CXEvalResultKind <link linkend="__c_index_8cpp_1ab1c0e24a69ad71276e7ce0d7bdf6b0a7">clang_EvalResult_getKind</link> (CXEvalResult E)</para>
</listitem>
            <listitem><para>int <link linkend="__c_index_8cpp_1a47aac07d5d2996189a958eb4140d7a78">clang_EvalResult_getAsInt</link> (CXEvalResult E)</para>
</listitem>
            <listitem><para>long long <link linkend="__c_index_8cpp_1ae4d4de22195dd716156c690b5e7e730e">clang_EvalResult_getAsLongLong</link> (CXEvalResult E)</para>
</listitem>
            <listitem><para>unsigned <link linkend="__c_index_8cpp_1a486e7728d10438206af8edb51eab14d8">clang_EvalResult_isUnsignedInt</link> (CXEvalResult E)</para>
</listitem>
            <listitem><para>unsigned long long <link linkend="__c_index_8cpp_1ada456f56037c9ae23b133bbeedb8edb8">clang_EvalResult_getAsUnsigned</link> (CXEvalResult E)</para>
</listitem>
            <listitem><para>double <link linkend="__c_index_8cpp_1ac04603c779fdaaa0beaab0db8b3acb5d">clang_EvalResult_getAsDouble</link> (CXEvalResult E)</para>
</listitem>
            <listitem><para>const char * <link linkend="__c_index_8cpp_1ae20bdaa6ecefb7fd9f66cd08e6da1e39">clang_EvalResult_getAsStr</link> (CXEvalResult E)</para>
</listitem>
            <listitem><para>CXEvalResult <link linkend="__c_index_8cpp_1a79f2fabb1bf5025f2a5684281fd8a23c">clang_Cursor_Evaluate</link> (CXCursor C)</para>
</listitem>
            <listitem><para>unsigned <link linkend="__c_index_8cpp_1a4104b63fec0184dea701b7bc6136270e">clang_Cursor_hasAttrs</link> (CXCursor C)</para>
</listitem>
            <listitem><para>unsigned <link linkend="__c_index_8cpp_1af7f47ec6ccc9f05c092f813102672290">clang_defaultSaveOptions</link> (CXTranslationUnit TU)</para>
</listitem>
            <listitem><para>int <link linkend="__c_index_8cpp_1a1be3baac9f48e48ba4119cbcdaf35391">clang_saveTranslationUnit</link> (CXTranslationUnit TU, const char *FileName, unsigned options)</para>
</listitem>
            <listitem><para>void <link linkend="__c_index_8cpp_1a3af88c13004a1954abd6dc956faff3be">clang_disposeTranslationUnit</link> (CXTranslationUnit CTUnit)</para>
</listitem>
            <listitem><para>unsigned <link linkend="__c_index_8cpp_1a496961baac6bdcc6be5e7ceac9b2273d">clang_suspendTranslationUnit</link> (CXTranslationUnit CTUnit)</para>
</listitem>
            <listitem><para>unsigned <link linkend="__c_index_8cpp_1a2f79bdd29d8f799a3943c6a5254eb789">clang_defaultReparseOptions</link> (CXTranslationUnit TU)</para>
</listitem>
            <listitem><para>int <link linkend="__c_index_8cpp_1a2befc445c3dde1e89f6900c67892ceaa">clang_reparseTranslationUnit</link> (CXTranslationUnit TU, unsigned num_unsaved_files, struct CXUnsavedFile *unsaved_files, unsigned options)</para>
</listitem>
            <listitem><para>CXString <link linkend="__c_index_8cpp_1a042c9228f6e47d598c5112eb05940837">clang_getTranslationUnitSpelling</link> (CXTranslationUnit CTUnit)</para>
</listitem>
            <listitem><para>CXCursor <link linkend="__c_index_8cpp_1af80b706bca2457340a69f2ff05258046">clang_getTranslationUnitCursor</link> (CXTranslationUnit TU)</para>
</listitem>
            <listitem><para>CXTargetInfo <link linkend="__c_index_8cpp_1a5482a4dddd4f6874d9cbbf5e6012e2d5">clang_getTranslationUnitTargetInfo</link> (CXTranslationUnit CTUnit)</para>
</listitem>
            <listitem><para>CXString <link linkend="__c_index_8cpp_1a2406512f8007c7d88ae433c7c2b4cb0d">clang_TargetInfo_getTriple</link> (CXTargetInfo TargetInfo)</para>
</listitem>
            <listitem><para>int <link linkend="__c_index_8cpp_1a76a103dd593b0f42310028638e1cc493">clang_TargetInfo_getPointerWidth</link> (CXTargetInfo TargetInfo)</para>
</listitem>
            <listitem><para>void <link linkend="__c_index_8cpp_1a29eef1b64c55bf9aa87dbd3e8ff9420c">clang_TargetInfo_dispose</link> (CXTargetInfo TargetInfo)</para>
</listitem>
            <listitem><para>CXString <link linkend="__c_index_8cpp_1a263c34f5782353186990b2c990d648fc">clang_getFileName</link> (CXFile SFile)</para>
</listitem>
            <listitem><para>time_t <link linkend="__c_index_8cpp_1a67542ed54ee45f1eaead6d69d6dd2a5d">clang_getFileTime</link> (CXFile SFile)</para>
</listitem>
            <listitem><para>CXFile <link linkend="__c_index_8cpp_1a7c72c3450d02a5d985f152cc0dee1785">clang_getFile</link> (CXTranslationUnit TU, const char *file_name)</para>
</listitem>
            <listitem><para>const char * <link linkend="__c_index_8cpp_1ab1b9031c14339924bb73c9460957700f">clang_getFileContents</link> (CXTranslationUnit TU, CXFile file, size_t *size)</para>
</listitem>
            <listitem><para>unsigned <link linkend="__c_index_8cpp_1a685b41c679e149e18549cf4f96dd966e">clang_isFileMultipleIncludeGuarded</link> (CXTranslationUnit TU, CXFile file)</para>
</listitem>
            <listitem><para>int <link linkend="__c_index_8cpp_1abe0d3306cef8c302d1d4b4e077dca925">clang_getFileUniqueID</link> (CXFile file, CXFileUniqueID *outID)</para>
</listitem>
            <listitem><para>int <link linkend="__c_index_8cpp_1afa28197effe920c89059cbfb6020b62d">clang_File_isEqual</link> (CXFile file1, CXFile file2)</para>
</listitem>
            <listitem><para>CXString <link linkend="__c_index_8cpp_1a5cb0eeafc678bac68cefa057fea1e56b">clang_File_tryGetRealPathName</link> (CXFile SFile)</para>
</listitem>
            <listitem><para>unsigned <link linkend="__c_index_8cpp_1a68f5626687386695a7c431807b46f085">clang_visitChildren</link> (CXCursor parent, CXCursorVisitor visitor, CXClientData client_data)</para>
</listitem>
            <listitem><para>unsigned <link linkend="__c_index_8cpp_1a3b84afea8d2536aa205930809caa29c0">clang_visitChildrenWithBlock</link> (CXCursor parent, <link linkend="__c_index_8cpp_1a9ea360dd4276806a13c2ad73b0ae7b93">CXCursorVisitorBlock</link> block)</para>
</listitem>
            <listitem><para>CXString <link linkend="__c_index_8cpp_1a412f1282680f05ef2b991f21a59ad3ac">clang_getCursorSpelling</link> (CXCursor C)</para>
</listitem>
            <listitem><para>CXSourceRange <link linkend="__c_index_8cpp_1aedf6f9d3e1c24f3c4e29eae0dd24487d">clang_Cursor_getSpellingNameRange</link> (CXCursor C, unsigned pieceIndex, unsigned options)</para>
</listitem>
            <listitem><para>CXString <link linkend="__c_index_8cpp_1af9df3cb95580d22d253ebb43e47bb466">clang_Cursor_getMangling</link> (CXCursor C)</para>
</listitem>
            <listitem><para>CXStringSet * <link linkend="__c_index_8cpp_1a2a901378706b8476950697e8073d65dc">clang_Cursor_getCXXManglings</link> (CXCursor C)</para>
</listitem>
            <listitem><para>CXStringSet * <link linkend="__c_index_8cpp_1a02df930dfd6a35f25132f6cc40281d8f">clang_Cursor_getObjCManglings</link> (CXCursor C)</para>
</listitem>
            <listitem><para>CXPrintingPolicy <link linkend="__c_index_8cpp_1a472e7c06c70965b983f908f49f27c2bf">clang_getCursorPrintingPolicy</link> (CXCursor C)</para>
</listitem>
            <listitem><para>void <link linkend="__c_index_8cpp_1a5f4c201c1711cf708edccc3227e49197">clang_PrintingPolicy_dispose</link> (CXPrintingPolicy Policy)</para>
</listitem>
            <listitem><para>unsigned <link linkend="__c_index_8cpp_1a99f7fd7cac9071d0a97588e42f111920">clang_PrintingPolicy_getProperty</link> (CXPrintingPolicy Policy, enum CXPrintingPolicyProperty Property)</para>
</listitem>
            <listitem><para>void <link linkend="__c_index_8cpp_1a2f7497c4e8c46282bdf45b57d456a2a4">clang_PrintingPolicy_setProperty</link> (CXPrintingPolicy Policy, enum CXPrintingPolicyProperty Property, unsigned Value)</para>
</listitem>
            <listitem><para>CXString <link linkend="__c_index_8cpp_1aaf6d4365916cd5424df38549e28ffd3b">clang_getCursorPrettyPrinted</link> (CXCursor C, CXPrintingPolicy cxPolicy)</para>
</listitem>
            <listitem><para>CXString <link linkend="__c_index_8cpp_1adacc338d2829e50ff0395a8384d507b3">clang_getCursorDisplayName</link> (CXCursor C)</para>
</listitem>
            <listitem><para>CXString <link linkend="__c_index_8cpp_1a667cf97e111be828ff2c36e23d583fce">clang_getCursorKindSpelling</link> (enum CXCursorKind Kind)</para>
</listitem>
            <listitem><para>CXCursor <link linkend="__c_index_8cpp_1a98b7e00ed3ca471a2e35509110ddc0c5">clang_getCursor</link> (CXTranslationUnit TU, CXSourceLocation Loc)</para>
</listitem>
            <listitem><para>CXCursor <link linkend="__c_index_8cpp_1aa22233466eaf91f6f3cf6b84255c3b68">clang_getNullCursor</link> (void)</para>
</listitem>
            <listitem><para>unsigned <link linkend="__c_index_8cpp_1a96d5f0059613428736715de616ed38f9">clang_equalCursors</link> (CXCursor X, CXCursor Y)</para>
</listitem>
            <listitem><para>unsigned <link linkend="__c_index_8cpp_1ae1dbe324703f9f57822c6e5395cd0a45">clang_hashCursor</link> (CXCursor C)</para>
</listitem>
            <listitem><para>unsigned <link linkend="__c_index_8cpp_1a0c5b391d8bca745084fb8906cce6f66c">clang_isInvalid</link> (enum CXCursorKind K)</para>
</listitem>
            <listitem><para>unsigned <link linkend="__c_index_8cpp_1a5d47db8f608ae0c266d6551875d46b80">clang_isDeclaration</link> (enum CXCursorKind K)</para>
</listitem>
            <listitem><para>unsigned <link linkend="__c_index_8cpp_1aaaa646143a44711b01f7b4afdb67ff7d">clang_isInvalidDeclaration</link> (CXCursor C)</para>
</listitem>
            <listitem><para>unsigned <link linkend="__c_index_8cpp_1a8b03541653a9373d35919c45216bc70f">clang_isReference</link> (enum CXCursorKind K)</para>
</listitem>
            <listitem><para>unsigned <link linkend="__c_index_8cpp_1ab958945dd59c351e1ae1a3f7f5668095">clang_isExpression</link> (enum CXCursorKind K)</para>
</listitem>
            <listitem><para>unsigned <link linkend="__c_index_8cpp_1af186bec30eb4cb63c3a7a295ccbcfe8b">clang_isStatement</link> (enum CXCursorKind K)</para>
</listitem>
            <listitem><para>unsigned <link linkend="__c_index_8cpp_1ab407667e249e0d44e6c56af84f2c28ba">clang_isAttribute</link> (enum CXCursorKind K)</para>
</listitem>
            <listitem><para>unsigned <link linkend="__c_index_8cpp_1ace455769e0f5681db67622db98f263a1">clang_isTranslationUnit</link> (enum CXCursorKind K)</para>
</listitem>
            <listitem><para>unsigned <link linkend="__c_index_8cpp_1ae649be0d722f2ec48dae4b152a5b2709">clang_isPreprocessing</link> (enum CXCursorKind K)</para>
</listitem>
            <listitem><para>unsigned <link linkend="__c_index_8cpp_1a0e56fac91aaded983a98dd1bf3bec5a1">clang_isUnexposed</link> (enum CXCursorKind K)</para>
</listitem>
            <listitem><para>CXCursorKind <link linkend="__c_index_8cpp_1a88e594fe730830706a0b7cff796eaedf">clang_getCursorKind</link> (CXCursor C)</para>
</listitem>
            <listitem><para>CXSourceLocation <link linkend="__c_index_8cpp_1a98001a3f8eb3a76d9c12821c45ef3708">clang_getCursorLocation</link> (CXCursor C)</para>
</listitem>
            <listitem><para>CXSourceRange <link linkend="__c_index_8cpp_1ac535682dfe6658513121c4cf6d4b4076">clang_getCursorExtent</link> (CXCursor C)</para>
</listitem>
            <listitem><para>CXCursor <link linkend="__c_index_8cpp_1ab26fc466345d015d7f9d418080166dc7">clang_getCursorReferenced</link> (CXCursor C)</para>
</listitem>
            <listitem><para>CXCursor <link linkend="__c_index_8cpp_1a090e42b940779ab0c437188858f24dfb">clang_getCursorDefinition</link> (CXCursor C)</para>
</listitem>
            <listitem><para>unsigned <link linkend="__c_index_8cpp_1a619396ba7a888dea29aa6cb0b35ddbe5">clang_isCursorDefinition</link> (CXCursor C)</para>
</listitem>
            <listitem><para>CXCursor <link linkend="__c_index_8cpp_1a8a500567a7154c3ecfc347392e52be03">clang_getCanonicalCursor</link> (CXCursor C)</para>
</listitem>
            <listitem><para>int <link linkend="__c_index_8cpp_1a026bd44ebbcdfe3b1585dc546051cdfa">clang_Cursor_getObjCSelectorIndex</link> (CXCursor cursor)</para>
</listitem>
            <listitem><para>unsigned <link linkend="__c_index_8cpp_1a0456530befeaf5dfc3ab402201f29eae">clang_getNumOverloadedDecls</link> (CXCursor C)</para>
</listitem>
            <listitem><para>CXCursor <link linkend="__c_index_8cpp_1a5bfefc8c75349072669d306071ec6d30">clang_getOverloadedDecl</link> (CXCursor cursor, unsigned index)</para>
</listitem>
            <listitem><para>void <link linkend="__c_index_8cpp_1a877e5ce84687daa2e6befb14dc8fea24">clang_getDefinitionSpellingAndExtent</link> (CXCursor C, const char **startBuf, const char **endBuf, unsigned *startLine, unsigned *startColumn, unsigned *endLine, unsigned *endColumn)</para>
</listitem>
            <listitem><para>CXSourceRange <link linkend="__c_index_8cpp_1afaace7c7d9d35d3f6d2b947d97a926df">clang_getCursorReferenceNameRange</link> (CXCursor C, unsigned NameFlags, unsigned PieceIndex)</para>
</listitem>
            <listitem><para>void <link linkend="__c_index_8cpp_1a459c002cff4b09901ca37e1ad44d3df3">clang_enableStackTraces</link> (void)</para>
</listitem>
            <listitem><para>void <link linkend="__c_index_8cpp_1aeb6cae453fe08d2720436c24d4629e8e">clang_executeOnThread</link> (void(*fn)(void *), void *user_data, unsigned stack_size)</para>
</listitem>
            <listitem><para>CXTokenKind <link linkend="__c_index_8cpp_1a656e3a514ed80a5f265fba4e2cbe6ab3">clang_getTokenKind</link> (CXToken CXTok)</para>
</listitem>
            <listitem><para>CXString <link linkend="__c_index_8cpp_1ac54c8685910211b22533b6aea1e5793f">clang_getTokenSpelling</link> (CXTranslationUnit TU, CXToken CXTok)</para>
</listitem>
            <listitem><para>CXSourceLocation <link linkend="__c_index_8cpp_1a123bf1f8140225a384ea22b9a03b7c3a">clang_getTokenLocation</link> (CXTranslationUnit TU, CXToken CXTok)</para>
</listitem>
            <listitem><para>CXSourceRange <link linkend="__c_index_8cpp_1a216d4670f967e3bd9f9c977691282047">clang_getTokenExtent</link> (CXTranslationUnit TU, CXToken CXTok)</para>
</listitem>
            <listitem><para>CXToken * <link linkend="__c_index_8cpp_1ae7b38c2c862cd0bde6882c48974b11e9">clang_getToken</link> (CXTranslationUnit TU, CXSourceLocation Location)</para>
</listitem>
            <listitem><para>void <link linkend="__c_index_8cpp_1acb7d078bea44691adbb99cd63ce7e556">clang_tokenize</link> (CXTranslationUnit TU, CXSourceRange Range, CXToken **Tokens, unsigned *NumTokens)</para>
</listitem>
            <listitem><para>void <link linkend="__c_index_8cpp_1a69a3b1b393fd8cd3cf50802b2a5b08af">clang_disposeTokens</link> (CXTranslationUnit TU, CXToken *Tokens, unsigned NumTokens)</para>
</listitem>
            <listitem><para>const CXXOperatorCallExpr * <link linkend="__c_index_8cpp_1a6aae6780bf1701f1a1857b467af930a0">GetSubscriptOrCallOperator</link> (CXCursor Cursor)</para>
</listitem>
            <listitem><para>void <link linkend="__c_index_8cpp_1aa53f8643daa75a0e72407ab0cee225f3">clang_annotateTokens</link> (CXTranslationUnit TU, CXToken *Tokens, unsigned NumTokens, CXCursor *Cursors)</para>
</listitem>
            <listitem><para>CXLinkageKind <link linkend="__c_index_8cpp_1a40ce3c0e400584ea807e89d96aa6a3f7">clang_getCursorLinkage</link> (CXCursor cursor)</para>
</listitem>
            <listitem><para>CXVisibilityKind <link linkend="__c_index_8cpp_1af05b946a0d65bb5a668e44875f440b2a">clang_getCursorVisibility</link> (CXCursor cursor)</para>
</listitem>
            <listitem><para>enum CXAvailabilityKind <link linkend="__c_index_8cpp_1a3d2ecf17120d9e5f15b5544b8a901b7e">clang_getCursorAvailability</link> (CXCursor cursor)</para>
</listitem>
            <listitem><para>int <link linkend="__c_index_8cpp_1ab166e6d97e4c81463d7999917b30fb85">clang_getCursorPlatformAvailability</link> (CXCursor cursor, int *always_deprecated, CXString *deprecated_message, int *always_unavailable, CXString *unavailable_message, CXPlatformAvailability *availability, int availability_size)</para>
</listitem>
            <listitem><para>void <link linkend="__c_index_8cpp_1aaa67293732ecceedaed83ec2bac487e7">clang_disposeCXPlatformAvailability</link> (CXPlatformAvailability *availability)</para>
</listitem>
            <listitem><para>CXLanguageKind <link linkend="__c_index_8cpp_1ad639f449c1c95d38ca5b5e283e72b40d">clang_getCursorLanguage</link> (CXCursor cursor)</para>
</listitem>
            <listitem><para>CXTLSKind <link linkend="__c_index_8cpp_1a50357467fc444ba7019986ea2dea65b7">clang_getCursorTLSKind</link> (CXCursor cursor)</para>
</listitem>
            <listitem><para>enum CX_StorageClass <link linkend="__c_index_8cpp_1a0191cd6b4fbd65668e4717719b3f2a00">clang_Cursor_getStorageClass</link> (CXCursor C)</para>
</listitem>
            <listitem><para>CXCursor <link linkend="__c_index_8cpp_1a114663793af87aa65d983a8514db6b43">clang_getCursorSemanticParent</link> (CXCursor cursor)</para>
</listitem>
            <listitem><para>CXCursor <link linkend="__c_index_8cpp_1a777ad61fbe329a32f0478dd71cdeca61">clang_getCursorLexicalParent</link> (CXCursor cursor)</para>
</listitem>
            <listitem><para>CXFile <link linkend="__c_index_8cpp_1a9baf5d19004c01b13cca32574bf6f595">clang_getIncludedFile</link> (CXCursor cursor)</para>
</listitem>
            <listitem><para>unsigned <link linkend="__c_index_8cpp_1af65ce11e5a95923ac8a65745b5e4476c">clang_Cursor_getObjCPropertyAttributes</link> (CXCursor C, unsigned reserved)</para>
</listitem>
            <listitem><para>CXString <link linkend="__c_index_8cpp_1a74073124651f4d25994f1c660a3b097f">clang_Cursor_getObjCPropertyGetterName</link> (CXCursor C)</para>
</listitem>
            <listitem><para>CXString <link linkend="__c_index_8cpp_1ac65f3c2eccf604efa14c1b286cce5e26">clang_Cursor_getObjCPropertySetterName</link> (CXCursor C)</para>
</listitem>
            <listitem><para>unsigned <link linkend="__c_index_8cpp_1a4aa93be0b9a3a68fbe3357f97e41b4ea">clang_Cursor_getObjCDeclQualifiers</link> (CXCursor C)</para>
</listitem>
            <listitem><para>unsigned <link linkend="__c_index_8cpp_1aa6b6ec13289e2906dab7a7e5974571cf">clang_Cursor_isObjCOptional</link> (CXCursor C)</para>
</listitem>
            <listitem><para>unsigned <link linkend="__c_index_8cpp_1a4c88f18c5be15491fbd88b1cacbf5fbf">clang_Cursor_isVariadic</link> (CXCursor C)</para>
</listitem>
            <listitem><para>unsigned <link linkend="__c_index_8cpp_1a56b80d0bcb6eecee56bf8aa8e5c80896">clang_Cursor_isExternalSymbol</link> (CXCursor C, CXString *language, CXString *definedIn, unsigned *isGenerated)</para>
</listitem>
            <listitem><para>CXSourceRange <link linkend="__c_index_8cpp_1acfc6a9db8380053fc33e62e70a4b294b">clang_Cursor_getCommentRange</link> (CXCursor C)</para>
</listitem>
            <listitem><para>CXString <link linkend="__c_index_8cpp_1aa781f7c9e6773175108bd7539fa6cf38">clang_Cursor_getRawCommentText</link> (CXCursor C)</para>
</listitem>
            <listitem><para>CXString <link linkend="__c_index_8cpp_1a9fdbd8a38405153494cef86239d10bbb">clang_Cursor_getBriefCommentText</link> (CXCursor C)</para>
</listitem>
            <listitem><para>CXModule <link linkend="__c_index_8cpp_1a2ca727eeafb4e4eded5e17a28ce42f3d">clang_Cursor_getModule</link> (CXCursor C)</para>
</listitem>
            <listitem><para>CXModule <link linkend="__c_index_8cpp_1a4a0e32160409a25df3774943953152ba">clang_getModuleForFile</link> (CXTranslationUnit TU, CXFile File)</para>
</listitem>
            <listitem><para>CXFile <link linkend="__c_index_8cpp_1a70af2b7ec3ffa582bf6856a740af2fb3">clang_Module_getASTFile</link> (CXModule CXMod)</para>
</listitem>
            <listitem><para>CXModule <link linkend="__c_index_8cpp_1aa90e248614976fd260dab3ad43a845e8">clang_Module_getParent</link> (CXModule CXMod)</para>
</listitem>
            <listitem><para>CXString <link linkend="__c_index_8cpp_1a2a1d6b9f6950cde7be6f62818a8a6253">clang_Module_getName</link> (CXModule CXMod)</para>
</listitem>
            <listitem><para>CXString <link linkend="__c_index_8cpp_1a266036edc3230b98a9c96c33eedae46a">clang_Module_getFullName</link> (CXModule CXMod)</para>
</listitem>
            <listitem><para>int <link linkend="__c_index_8cpp_1ad14a1b11d95472b1b00952419b96b718">clang_Module_isSystem</link> (CXModule CXMod)</para>
</listitem>
            <listitem><para>unsigned <link linkend="__c_index_8cpp_1a386d6d2cb23cfb6be756392a4fb18de7">clang_Module_getNumTopLevelHeaders</link> (CXTranslationUnit TU, CXModule CXMod)</para>
</listitem>
            <listitem><para>CXFile <link linkend="__c_index_8cpp_1a7616ad81129da898d08a576a8e603c78">clang_Module_getTopLevelHeader</link> (CXTranslationUnit TU, CXModule CXMod, unsigned Index)</para>
</listitem>
            <listitem><para>unsigned <link linkend="__c_index_8cpp_1ac6857426b17cddb66fdc5dc421bd5563">clang_CXXConstructor_isDefaultConstructor</link> (CXCursor C)</para>
</listitem>
            <listitem><para>unsigned <link linkend="__c_index_8cpp_1a2c261341a67f895a0eb5d6f4c70763d1">clang_CXXConstructor_isCopyConstructor</link> (CXCursor C)</para>
</listitem>
            <listitem><para>unsigned <link linkend="__c_index_8cpp_1a3146967757d3544807a15b3a4f968aa9">clang_CXXConstructor_isMoveConstructor</link> (CXCursor C)</para>
</listitem>
            <listitem><para>unsigned <link linkend="__c_index_8cpp_1acc53a751c76070406bc1a0d40a507416">clang_CXXConstructor_isConvertingConstructor</link> (CXCursor C)</para>
</listitem>
            <listitem><para>unsigned <link linkend="__c_index_8cpp_1a9a284a8ec63f5e851daa500037e3c621">clang_CXXField_isMutable</link> (CXCursor C)</para>
</listitem>
            <listitem><para>unsigned <link linkend="__c_index_8cpp_1acb254e52b46647500e12d187d0f71e53">clang_CXXMethod_isPureVirtual</link> (CXCursor C)</para>
</listitem>
            <listitem><para>unsigned <link linkend="__c_index_8cpp_1a700b1fa88b7879f9cd9298b076f9fdfe">clang_CXXMethod_isConst</link> (CXCursor C)</para>
</listitem>
            <listitem><para>unsigned <link linkend="__c_index_8cpp_1a8d4ee1fcce72ca516515388e6af796d3">clang_CXXMethod_isDefaulted</link> (CXCursor C)</para>
</listitem>
            <listitem><para>unsigned <link linkend="__c_index_8cpp_1aca00e7b9f952a9bcb9edb9ba99be0c36">clang_CXXMethod_isStatic</link> (CXCursor C)</para>
</listitem>
            <listitem><para>unsigned <link linkend="__c_index_8cpp_1a59f93e621ce7b6a8fd8be167c9a0e353">clang_CXXMethod_isVirtual</link> (CXCursor C)</para>
</listitem>
            <listitem><para>unsigned <link linkend="__c_index_8cpp_1a7536535cae5849fc4c35143e09755fc4">clang_CXXRecord_isAbstract</link> (CXCursor C)</para>
</listitem>
            <listitem><para>unsigned <link linkend="__c_index_8cpp_1a2b44e1c44b0977a639e424c1c775bb80">clang_EnumDecl_isScoped</link> (CXCursor C)</para>
</listitem>
            <listitem><para>CXType <link linkend="__c_index_8cpp_1abddfbdf52be8460f6501ca428494ee48">clang_getIBOutletCollectionType</link> (CXCursor C)</para>
</listitem>
            <listitem><para>const char * <link linkend="__c_index_8cpp_1aeba9f6263fe5dbde18abb55b2f321a34">clang_getTUResourceUsageName</link> (CXTUResourceUsageKind kind)</para>
</listitem>
            <listitem><para>CXTUResourceUsage <link linkend="__c_index_8cpp_1a72299455a328faf612d238bf6aee6eb6">clang_getCXTUResourceUsage</link> (CXTranslationUnit TU)</para>
</listitem>
            <listitem><para>void <link linkend="__c_index_8cpp_1a3e9a2455e3253920304adc26c1084a6f">clang_disposeCXTUResourceUsage</link> (CXTUResourceUsage usage)</para>
</listitem>
            <listitem><para>CXSourceRangeList * <link linkend="__c_index_8cpp_1add341497e44da969ce07c7fbc174d38a">clang_getSkippedRanges</link> (CXTranslationUnit TU, CXFile file)</para>
</listitem>
            <listitem><para>CXSourceRangeList * <link linkend="__c_index_8cpp_1ab2c3529ea58276de8d365ba53873834f">clang_getAllSkippedRanges</link> (CXTranslationUnit TU)</para>
</listitem>
            <listitem><para>void <link linkend="__c_index_8cpp_1acfc7c338d3c08e516bf0773f4fa1180e">clang_disposeSourceRangeList</link> (CXSourceRangeList *ranges)</para>
</listitem>
            <listitem><para>CXCursor <link linkend="__c_index_8cpp_1a325cc28e1127a386f3941a8282754977">clang_Cursor_getVarDeclInitializer</link> (CXCursor cursor)</para>
</listitem>
            <listitem><para>int <link linkend="__c_index_8cpp_1ac99cd0fd7774986dfd8b58d0317da4d9">clang_Cursor_hasVarDeclGlobalStorage</link> (CXCursor cursor)</para>
</listitem>
            <listitem><para>int <link linkend="__c_index_8cpp_1a2ad86229a550aad3311b1b1aa98d03bb">clang_Cursor_hasVarDeclExternalStorage</link> (CXCursor cursor)</para>
</listitem>
            <listitem><para>bool <link linkend="_namespaceclang_1af866b018fe401ae941a367429bdd4c9a">clang::RunSafely</link> (llvm::CrashRecoveryContext &amp;CRC, llvm::function_ref&lt; void()&gt; Fn, unsigned Size)</para>
</listitem>
            <listitem><para>unsigned <link linkend="_namespaceclang_1a784fd2a03784a2dbb08d1841240adb88">clang::GetSafetyThreadStackSize</link> ()</para>

<para>Return the current size to request for &quot;safety&quot;. </para>
</listitem>
            <listitem><para>void <link linkend="_namespaceclang_1a074a6c2b8523d8b50f446a28e8e0f5c4">clang::SetSafetyThreadStackSize</link> (unsigned Value)</para>
</listitem>
            <listitem><para>CXString <link linkend="__c_index_8cpp_1a57a512b9b350427fc6910ca78759e76d">clang_getClangVersion</link> ()</para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Macro Definition Documentation</title>
<anchor xml:id="__c_index_8cpp_1a1df410a05b3c6fe66a44f327da27ebbf"/>    <section>
    <title>BUILTIN_TYPE</title>
<indexterm><primary>BUILTIN_TYPE</primary><secondary>CIndex.cpp</secondary></indexterm>
<indexterm><primary>CIndex.cpp</primary><secondary>BUILTIN_TYPE</secondary></indexterm>
<para><computeroutput>#define BUILTIN_TYPE( Id,  SingletonId)</computeroutput></para>    </section><anchor xml:id="__c_index_8cpp_1ad6bad911a6488fa2115dc9be0a0d4f60"/>    <section>
    <title>CLAUSE_CLASS</title>
<indexterm><primary>CLAUSE_CLASS</primary><secondary>CIndex.cpp</secondary></indexterm>
<indexterm><primary>CIndex.cpp</primary><secondary>CLAUSE_CLASS</secondary></indexterm>
<para><computeroutput>#define CLAUSE_CLASS( Enum,  Str,  Class)   void Visit##Class(const Class *C);</computeroutput></para><para>
Definition at line <link linkend="__c_index_8cpp_source_1l02183">2183</link> of file <link linkend="__c_index_8cpp_source">CIndex.cpp</link>.</para>
    </section><anchor xml:id="__c_index_8cpp_1a0d1aa3cc2a5472f2b0a2b62616ca9292"/>    <section>
    <title>DEF_JOB</title>
<indexterm><primary>DEF_JOB</primary><secondary>CIndex.cpp</secondary></indexterm>
<indexterm><primary>CIndex.cpp</primary><secondary>DEF_JOB</secondary></indexterm>
<para><computeroutput>#define DEF_JOB( NAME,  DATA,  KIND)</computeroutput></para><emphasis role="strong">Value:</emphasis><programlisting>&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>NAME&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;<link linkend="_classclang_1_1cxcursor_1_1_visitor_job">VisitorJob</link>&#32;{&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\
&#32;&#32;public:&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\
&#32;&#32;&#32;&#32;NAME(<emphasis role="keyword">const</emphasis>&#32;DATA&#32;*d,&#32;CXCursor&#32;parent)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;<link linkend="_classclang_1_1cxcursor_1_1_visitor_job_1a1fe36de4b2f52c917128b52b946d65cf">VisitorJob</link>(parent,&#32;VisitorJob::KIND,&#32;d)&#32;{}&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\
&#32;&#32;&#32;&#32;static&#32;<emphasis role="keywordtype">bool</emphasis>&#32;classof(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classclang_1_1cxcursor_1_1_visitor_job">VisitorJob</link>&#32;*VJ)&#32;{&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\
&#32;&#32;&#32;&#32;&#32;&#32;return&#32;VJ-&gt;<link linkend="_classclang_1_1cxcursor_1_1_visitor_job_1aee9fca3379d1821e847ce816fef67219">getKind</link>()&#32;==&#32;KIND;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\
&#32;&#32;&#32;&#32;}&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\
&#32;&#32;&#32;&#32;const&#32;DATA&#32;*<emphasis role="keyword">get</emphasis>()&#32;<emphasis role="keyword">const</emphasis>&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keyword">const&#32;</emphasis>DATA&#32;*<emphasis role="keyword">&gt;</emphasis>(data[0]);&#32;}&#32;&#32;&#32;&#32;&#32;\
&#32;&#32;};
</programlisting><para>
Definition at line <link linkend="__c_index_8cpp_source_1l01851">1851</link> of file <link linkend="__c_index_8cpp_source">CIndex.cpp</link>.</para>
    </section><anchor xml:id="__c_index_8cpp_1a1fe77f9f91086eed81d3ce9a8eb220cc"/>    <section>
    <title>DEFAULT_TYPELOC_IMPL</title>
<indexterm><primary>DEFAULT_TYPELOC_IMPL</primary><secondary>CIndex.cpp</secondary></indexterm>
<indexterm><primary>CIndex.cpp</primary><secondary>DEFAULT_TYPELOC_IMPL</secondary></indexterm>
<para><computeroutput>#define DEFAULT_TYPELOC_IMPL( CLASS,  PARENT)</computeroutput></para><emphasis role="strong">Value:</emphasis><programlisting>&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;CursorVisitor::Visit##CLASS##TypeLoc(CLASS##TypeLoc&#32;TL)&#32;{&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\
&#32;&#32;&#32;&#32;return&#32;Visit##PARENT##Loc(TL);&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\
&#32;&#32;}
</programlisting><para>
Definition at line <link linkend="__c_index_8cpp_source_1l01793">1793</link> of file <link linkend="__c_index_8cpp_source">CIndex.cpp</link>.</para>
    </section><anchor xml:id="__c_index_8cpp_1a5b3b75a224d735f0a0e119919afc304e"/>    <section>
    <title>EXT_OPAQUE_TYPE</title>
<indexterm><primary>EXT_OPAQUE_TYPE</primary><secondary>CIndex.cpp</secondary></indexterm>
<indexterm><primary>CIndex.cpp</primary><secondary>EXT_OPAQUE_TYPE</secondary></indexterm>
<para><computeroutput>#define EXT_OPAQUE_TYPE( ExtTYpe,  Id,  Ext)   case BuiltinType::Id:</computeroutput></para>    </section><anchor xml:id="__c_index_8cpp_1adb09ceedce7536185962e89a29bf6b9c"/>    <section>
    <title>FLOATING_TYPE</title>
<indexterm><primary>FLOATING_TYPE</primary><secondary>CIndex.cpp</secondary></indexterm>
<indexterm><primary>CIndex.cpp</primary><secondary>FLOATING_TYPE</secondary></indexterm>
<para><computeroutput>#define FLOATING_TYPE( Id,  SingletonId)   case BuiltinType::Id:</computeroutput></para>    </section><anchor xml:id="__c_index_8cpp_1a74c01d19d8da079646c91a83b77a07a8"/>    <section>
    <title>GEN_CLANG_CLAUSE_CLASS</title>
<indexterm><primary>GEN_CLANG_CLAUSE_CLASS</primary><secondary>CIndex.cpp</secondary></indexterm>
<indexterm><primary>CIndex.cpp</primary><secondary>GEN_CLANG_CLAUSE_CLASS</secondary></indexterm>
<para><computeroutput>#define GEN_CLANG_CLAUSE_CLASS</computeroutput></para><para>
Definition at line <link linkend="__c_index_8cpp_source_1l02182">2182</link> of file <link linkend="__c_index_8cpp_source">CIndex.cpp</link>.</para>
    </section><anchor xml:id="__c_index_8cpp_1a115028e350b8253973a4fedd9d0f309a"/>    <section>
    <title>IMAGE_TYPE</title>
<indexterm><primary>IMAGE_TYPE</primary><secondary>CIndex.cpp</secondary></indexterm>
<indexterm><primary>CIndex.cpp</primary><secondary>IMAGE_TYPE</secondary></indexterm>
<para><computeroutput>#define IMAGE_TYPE( ImgType,  Id,  SingletonId,  Access,  Suffix)     case BuiltinType::Id:</computeroutput></para>    </section><anchor xml:id="__c_index_8cpp_1aeded3cf51d63ad667f0cbedd717815e0"/>    <section>
    <title>PLACEHOLDER_TYPE</title>
<indexterm><primary>PLACEHOLDER_TYPE</primary><secondary>CIndex.cpp</secondary></indexterm>
<indexterm><primary>CIndex.cpp</primary><secondary>PLACEHOLDER_TYPE</secondary></indexterm>
<para><computeroutput>#define PLACEHOLDER_TYPE( Id,  SingletonId)   case BuiltinType::Id:</computeroutput></para>    </section><anchor xml:id="__c_index_8cpp_1a20827ed4c0d752bf188345da115bf9c3"/>    <section>
    <title>PPC_VECTOR_TYPE</title>
<indexterm><primary>PPC_VECTOR_TYPE</primary><secondary>CIndex.cpp</secondary></indexterm>
<indexterm><primary>CIndex.cpp</primary><secondary>PPC_VECTOR_TYPE</secondary></indexterm>
<para><computeroutput>#define PPC_VECTOR_TYPE( Name,  Id,  Size)   case BuiltinType::Id:</computeroutput></para>    </section><anchor xml:id="__c_index_8cpp_1a57fec5be573f15a3be2601d4bdfa1586"/>    <section>
    <title>RVV_TYPE</title>
<indexterm><primary>RVV_TYPE</primary><secondary>CIndex.cpp</secondary></indexterm>
<indexterm><primary>CIndex.cpp</primary><secondary>RVV_TYPE</secondary></indexterm>
<para><computeroutput>#define RVV_TYPE( Name,  Id,  SingletonId)   case BuiltinType::Id:</computeroutput></para>    </section><anchor xml:id="__c_index_8cpp_1ad1cb77494b671d342a9e12ea17594ce7"/>    <section>
    <title>SET_CXOBJCPROP_ATTR</title>
<indexterm><primary>SET_CXOBJCPROP_ATTR</primary><secondary>CIndex.cpp</secondary></indexterm>
<indexterm><primary>CIndex.cpp</primary><secondary>SET_CXOBJCPROP_ATTR</secondary></indexterm>
<para><computeroutput>#define SET_CXOBJCPROP_ATTR( A)</computeroutput></para><emphasis role="strong">Value:</emphasis><programlisting>&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(Attr&#32;&amp;&#32;ObjCPropertyAttribute::kind_##A)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\
&#32;&#32;Result&#32;|=&#32;CXObjCPropertyAttr_##A
</programlisting>    </section><anchor xml:id="__c_index_8cpp_1a8c708d03de8db82b0b166f1ea9737bb1"/>    <section>
    <title>SIGNED_TYPE</title>
<indexterm><primary>SIGNED_TYPE</primary><secondary>CIndex.cpp</secondary></indexterm>
<indexterm><primary>CIndex.cpp</primary><secondary>SIGNED_TYPE</secondary></indexterm>
<para><computeroutput>#define SIGNED_TYPE( Id,  SingletonId)   case BuiltinType::Id:</computeroutput></para>    </section><anchor xml:id="__c_index_8cpp_1a57c38b1977544d550c582f2e5e3a20ca"/>    <section>
    <title>SVE_TYPE</title>
<indexterm><primary>SVE_TYPE</primary><secondary>CIndex.cpp</secondary></indexterm>
<indexterm><primary>CIndex.cpp</primary><secondary>SVE_TYPE</secondary></indexterm>
<para><computeroutput>#define SVE_TYPE( Name,  Id,  SingletonId)   case BuiltinType::Id:</computeroutput></para>    </section><anchor xml:id="__c_index_8cpp_1a7ebc4c4814c6cf64857b40b7a44bf094"/>    <section>
    <title>UNSIGNED_TYPE</title>
<indexterm><primary>UNSIGNED_TYPE</primary><secondary>CIndex.cpp</secondary></indexterm>
<indexterm><primary>CIndex.cpp</primary><secondary>UNSIGNED_TYPE</secondary></indexterm>
<para><computeroutput>#define UNSIGNED_TYPE( Id,  SingletonId)   case BuiltinType::Id:</computeroutput></para></section>
</section>
<section>
<title>Typedef Documentation</title>
<anchor xml:id="__c_index_8cpp_1a9ea360dd4276806a13c2ad73b0ae7b93"/>    <section>
    <title>CXCursorVisitorBlock</title>
<indexterm><primary>CXCursorVisitorBlock</primary><secondary>CIndex.cpp</secondary></indexterm>
<indexterm><primary>CIndex.cpp</primary><secondary>CXCursorVisitorBlock</secondary></indexterm>
<para><computeroutput>typedef struct <link linkend="_struct___c_x_child_visit_result">_CXChildVisitResult</link> * <link linkend="__c_index_8cpp_1a9ea360dd4276806a13c2ad73b0ae7b93">CXCursorVisitorBlock</link></computeroutput></para>    </section><anchor xml:id="__c_index_8cpp_1a8c5eea8e1522f74827362d4be37f75c8"/>    <section>
    <title>MemUsageEntries</title>
<indexterm><primary>MemUsageEntries</primary><secondary>CIndex.cpp</secondary></indexterm>
<indexterm><primary>CIndex.cpp</primary><secondary>MemUsageEntries</secondary></indexterm>
<para><computeroutput>typedef std::vector&lt;CXTUResourceUsageEntry&gt; <link linkend="__c_index_8cpp_1a8c5eea8e1522f74827362d4be37f75c8">MemUsageEntries</link></computeroutput></para><para>
Definition at line <link linkend="__c_index_8cpp_source_1l08678">8678</link> of file <link linkend="__c_index_8cpp_source">CIndex.cpp</link>.</para>
</section>
</section>
<section>
<title>Function Documentation</title>
<anchor xml:id="__c_index_8cpp_1aa53f8643daa75a0e72407ab0cee225f3"/>    <section>
    <title>clang_annotateTokens()</title>
<indexterm><primary>clang_annotateTokens</primary><secondary>CIndex.cpp</secondary></indexterm>
<indexterm><primary>CIndex.cpp</primary><secondary>clang_annotateTokens</secondary></indexterm>
<para><computeroutput>void clang_annotateTokens (CXTranslationUnit TU, CXToken * Tokens, unsigned NumTokens, CXCursor * Cursors)</computeroutput></para><para>
Definition at line <link linkend="__c_index_8cpp_source_1l07815">7815</link> of file <link linkend="__c_index_8cpp_source">CIndex.cpp</link>.</para>
<programlisting>07816 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
07817 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(isNotUsableTU(TU))&#32;{
07818 &#32;&#32;&#32;&#32;<link linkend="__c_x_translation_unit_8h_1a4ec17e6e03ea0baf73e27802eae36106">LOG_BAD_TU</link>(TU);
07819 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
07820 &#32;&#32;}
07821 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(NumTokens&#32;==&#32;0&#32;||&#32;!Tokens&#32;||&#32;!Cursors)&#32;{
07822 &#32;&#32;&#32;&#32;<link linkend="__c_log_8h_1a24474e48ce7e218f17ae9353103470d8">LOG_FUNC_SECTION</link>&#32;{&#32;*Log&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&lt;null&#32;input&gt;&quot;</emphasis>;&#32;}
07823 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
07824 &#32;&#32;}
07825 
07826 &#32;&#32;<link linkend="__c_log_8h_1a24474e48ce7e218f17ae9353103470d8">LOG_FUNC_SECTION</link>&#32;{
07827 &#32;&#32;&#32;&#32;*Log&#32;&lt;&lt;&#32;TU&#32;&lt;&lt;&#32;<emphasis role="charliteral">&apos;&#32;&apos;</emphasis>;
07828 &#32;&#32;&#32;&#32;CXSourceLocation&#32;bloc&#32;=&#32;<link linkend="__c_index_8cpp_1a123bf1f8140225a384ea22b9a03b7c3a">clang_getTokenLocation</link>(TU,&#32;Tokens[0]);
07829 &#32;&#32;&#32;&#32;CXSourceLocation&#32;eloc&#32;=&#32;<link linkend="__c_index_8cpp_1a123bf1f8140225a384ea22b9a03b7c3a">clang_getTokenLocation</link>(TU,&#32;Tokens[NumTokens&#32;-&#32;1]);
07830 &#32;&#32;&#32;&#32;*Log&#32;&lt;&lt;&#32;<link linkend="__c_x_source_location_8cpp_1a6d436a40e815644209860de3f1416210">clang_getRange</link>(bloc,&#32;eloc);
07831 &#32;&#32;}
07832 
07833 &#32;&#32;<emphasis role="comment">//&#32;Any&#32;token&#32;we&#32;don&apos;t&#32;specifically&#32;annotate&#32;will&#32;have&#32;a&#32;NULL&#32;cursor.</emphasis>
07834 &#32;&#32;CXCursor&#32;C&#32;=&#32;<link linkend="__c_index_8cpp_1aa22233466eaf91f6f3cf6b84255c3b68">clang_getNullCursor</link>();
07835 &#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">unsigned</emphasis>&#32;I&#32;=&#32;0;&#32;I&#32;!=&#32;NumTokens;&#32;++I)
07836 &#32;&#32;&#32;&#32;Cursors[I]&#32;=&#32;C;
07837 
07838 &#32;&#32;ASTUnit&#32;*CXXUnit&#32;=&#32;cxtu::getASTUnit(TU);
07839 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!CXXUnit)
07840 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
07841 
07842 &#32;&#32;ASTUnit::ConcurrencyCheck&#32;Check(*CXXUnit);
07843 
07844 &#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;AnnotateTokensImpl&#32;=&#32;[=]()&#32;{
07845 &#32;&#32;&#32;&#32;clang_annotateTokensImpl(TU,&#32;CXXUnit,&#32;Tokens,&#32;NumTokens,&#32;Cursors);
07846 &#32;&#32;};
07847 &#32;&#32;llvm::CrashRecoveryContext&#32;CRC;
07848 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!<link linkend="_namespaceclang_1af866b018fe401ae941a367429bdd4c9a">RunSafely</link>(CRC,&#32;AnnotateTokensImpl,&#32;<link linkend="_namespaceclang_1a784fd2a03784a2dbb08d1841240adb88">GetSafetyThreadStackSize</link>()&#32;*&#32;2))&#32;{
07849 &#32;&#32;&#32;&#32;fprintf(stderr,&#32;<emphasis role="stringliteral">&quot;libclang:&#32;crash&#32;detected&#32;while&#32;annotating&#32;tokens\n&quot;</emphasis>);
07850 &#32;&#32;}
07851 }
</programlisting>    </section><anchor xml:id="__c_index_8cpp_1a3420c8e7e10a7ff7906130b207cbb763"/>    <section>
    <title>clang_createIndex()</title>
<indexterm><primary>clang_createIndex</primary><secondary>CIndex.cpp</secondary></indexterm>
<indexterm><primary>CIndex.cpp</primary><secondary>clang_createIndex</secondary></indexterm>
<para><computeroutput>CXIndex clang_createIndex (int excludeDeclarationsFromPCH, int displayDiagnostics)</computeroutput></para><para>
Definition at line <link linkend="__c_index_8cpp_source_1l03436">3436</link> of file <link linkend="__c_index_8cpp_source">CIndex.cpp</link>.</para>
<programlisting>03437 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
03438 &#32;&#32;<emphasis role="comment">//&#32;We&#32;use&#32;crash&#32;recovery&#32;to&#32;make&#32;some&#32;of&#32;our&#32;APIs&#32;more&#32;reliable,&#32;implicitly</emphasis>
03439 &#32;&#32;<emphasis role="comment">//&#32;enable&#32;it.</emphasis>
03440 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!getenv(<emphasis role="stringliteral">&quot;LIBCLANG_DISABLE_CRASH_RECOVERY&quot;</emphasis>))
03441 &#32;&#32;&#32;&#32;llvm::CrashRecoveryContext::Enable();
03442 
03443 &#32;&#32;<emphasis role="comment">//&#32;Look&#32;through&#32;the&#32;managed&#32;static&#32;to&#32;trigger&#32;construction&#32;of&#32;the&#32;managed</emphasis>
03444 &#32;&#32;<emphasis role="comment">//&#32;static&#32;which&#32;registers&#32;our&#32;fatal&#32;error&#32;handler.&#32;This&#32;ensures&#32;it&#32;is&#32;only</emphasis>
03445 &#32;&#32;<emphasis role="comment">//&#32;registered&#32;once.</emphasis>
03446 &#32;&#32;(void)*RegisterFatalErrorHandlerOnce;
03447 
03448 &#32;&#32;<emphasis role="comment">//&#32;Initialize&#32;targets&#32;for&#32;clang&#32;module&#32;support.</emphasis>
03449 &#32;&#32;llvm::InitializeAllTargets();
03450 &#32;&#32;llvm::InitializeAllTargetMCs();
03451 &#32;&#32;llvm::InitializeAllAsmPrinters();
03452 &#32;&#32;llvm::InitializeAllAsmParsers();
03453 
03454 &#32;&#32;<link linkend="_classclang_1_1_c_indexer">CIndexer</link>&#32;*CIdxr&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_classclang_1_1_c_indexer">CIndexer</link>();
03455 
03456 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(excludeDeclarationsFromPCH)
03457 &#32;&#32;&#32;&#32;CIdxr-&gt;<link linkend="_classclang_1_1_c_indexer_1a591845d07c3aae50c8801150e077b826">setOnlyLocalDecls</link>();
03458 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(displayDiagnostics)
03459 &#32;&#32;&#32;&#32;CIdxr-&gt;<link linkend="_classclang_1_1_c_indexer_1ab2bceec4f09f9b42169a17e6de7a49ce">setDisplayDiagnostics</link>();
03460 
03461 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(getenv(<emphasis role="stringliteral">&quot;LIBCLANG_BGPRIO_INDEX&quot;</emphasis>))
03462 &#32;&#32;&#32;&#32;CIdxr-&gt;<link linkend="_classclang_1_1_c_indexer_1a082ac8e1740ef35ea17cba6ca71e9063">setCXGlobalOptFlags</link>(CIdxr-&gt;<link linkend="_classclang_1_1_c_indexer_1a4c543585b07f085ac744c5d16ead7b2c">getCXGlobalOptFlags</link>()&#32;|
03463 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;CXGlobalOpt_ThreadBackgroundPriorityForIndexing);
03464 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(getenv(<emphasis role="stringliteral">&quot;LIBCLANG_BGPRIO_EDIT&quot;</emphasis>))
03465 &#32;&#32;&#32;&#32;CIdxr-&gt;<link linkend="_classclang_1_1_c_indexer_1a082ac8e1740ef35ea17cba6ca71e9063">setCXGlobalOptFlags</link>(CIdxr-&gt;<link linkend="_classclang_1_1_c_indexer_1a4c543585b07f085ac744c5d16ead7b2c">getCXGlobalOptFlags</link>()&#32;|
03466 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;CXGlobalOpt_ThreadBackgroundPriorityForEditing);
03467 
03468 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;CIdxr;
03469 }
</programlisting><para>
Referenced by <link linkend="_c-index-test_8c_source_1l02012">perform_test_load_source()</link>, <link linkend="_c-index-test_8c_source_1l01992">perform_test_load_tu()</link>, <link linkend="_c-index-test_8c_source_1l02088">perform_test_reparse_source()</link>, and <link linkend="_c-index-test_8c_source_1l04554">write_pch_file()</link>.</para>
    </section><anchor xml:id="__c_index_8cpp_1a42e314c492d0d545b1e0e3278894b75d"/>    <section>
    <title>clang_createTranslationUnit()</title>
<indexterm><primary>clang_createTranslationUnit</primary><secondary>CIndex.cpp</secondary></indexterm>
<indexterm><primary>CIndex.cpp</primary><secondary>clang_createTranslationUnit</secondary></indexterm>
<para><computeroutput>CXTranslationUnit clang_createTranslationUnit (CXIndex CIdx, const char * ast_filename)</computeroutput></para><para>
Definition at line <link linkend="__c_index_8cpp_source_1l03500">3500</link> of file <link linkend="__c_index_8cpp_source">CIndex.cpp</link>.</para>
<programlisting>03501 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
03502 &#32;&#32;CXTranslationUnit&#32;TU;
03503 &#32;&#32;<emphasis role="keyword">enum</emphasis>&#32;CXErrorCode&#32;Result&#32;=
03504 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__c_index_8cpp_1af1e8fe902a1fa65beb990cc7af6b7a2f">clang_createTranslationUnit2</link>(CIdx,&#32;ast_filename,&#32;&amp;TU);
03505 &#32;&#32;(void)Result;
03506 &#32;&#32;assert((TU&#32;&amp;&amp;&#32;Result&#32;==&#32;CXError_Success)&#32;||
03507 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(!TU&#32;&amp;&amp;&#32;Result&#32;!=&#32;CXError_Success));
03508 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;TU;
03509 }
</programlisting><para>
References <link linkend="__c_index_8cpp_source_1l03511">clang_createTranslationUnit2()</link>.</para>
<para>
Referenced by <link linkend="__c_indexer_8cpp_source_1l00099">clang::CIndexer::getClangResourcesPath()</link>.</para>
    </section><anchor xml:id="__c_index_8cpp_1af1e8fe902a1fa65beb990cc7af6b7a2f"/>    <section>
    <title>clang_createTranslationUnit2()</title>
<indexterm><primary>clang_createTranslationUnit2</primary><secondary>CIndex.cpp</secondary></indexterm>
<indexterm><primary>CIndex.cpp</primary><secondary>clang_createTranslationUnit2</secondary></indexterm>
<para><computeroutput>enum CXErrorCode clang_createTranslationUnit2 (CXIndex CIdx, const char * ast_filename, CXTranslationUnit * out_TU)</computeroutput></para><para>
Definition at line <link linkend="__c_index_8cpp_source_1l03500">3500</link> of file <link linkend="__c_index_8cpp_source">CIndex.cpp</link>.</para>
<programlisting>03513 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
03514 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(out_TU)
03515 &#32;&#32;&#32;&#32;*out_TU&#32;=&#32;<emphasis role="keyword">nullptr</emphasis>;
03516 
03517 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!CIdx&#32;||&#32;!ast_filename&#32;||&#32;!out_TU)
03518 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;CXError_InvalidArguments;
03519 
03520 &#32;&#32;<link linkend="__c_log_8h_1a24474e48ce7e218f17ae9353103470d8">LOG_FUNC_SECTION</link>&#32;{&#32;*Log&#32;&lt;&lt;&#32;ast_filename;&#32;}
03521 
03522 &#32;&#32;<link linkend="_classclang_1_1_c_indexer">CIndexer</link>&#32;*CXXIdx&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis><link linkend="_classclang_1_1_c_indexer">CIndexer</link>&#32;*<emphasis role="keyword">&gt;</emphasis>(CIdx);
03523 &#32;&#32;FileSystemOptions&#32;FileSystemOpts;
03524 
03525 &#32;&#32;IntrusiveRefCntPtr&lt;DiagnosticsEngine&gt;&#32;Diags&#32;=
03526 &#32;&#32;&#32;&#32;&#32;&#32;CompilerInstance::createDiagnostics(<emphasis role="keyword">new</emphasis>&#32;DiagnosticOptions());
03527 &#32;&#32;std::unique_ptr&lt;ASTUnit&gt;&#32;AU&#32;=&#32;ASTUnit::LoadFromASTFile(
03528 &#32;&#32;&#32;&#32;&#32;&#32;ast_filename,&#32;CXXIdx-&gt;<link linkend="_classclang_1_1_c_indexer_1aca55b1e223fa5e22564d21c796f83b53">getPCHContainerOperations</link>()-&gt;getRawReader(),
03529 &#32;&#32;&#32;&#32;&#32;&#32;ASTUnit::LoadEverything,&#32;Diags,&#32;FileSystemOpts,&#32;<emphasis role="comment">/*UseDebugInfo=*/</emphasis><emphasis role="keyword">false</emphasis>,
03530 &#32;&#32;&#32;&#32;&#32;&#32;CXXIdx-&gt;<link linkend="_classclang_1_1_c_indexer_1ab98bc58a97c08a74688c5201ee108e99">getOnlyLocalDecls</link>(),&#32;CaptureDiagsKind::All,
03531 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*AllowASTWithCompilerErrors=*/</emphasis><emphasis role="keyword">true</emphasis>,
03532 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*UserFilesAreVolatile=*/</emphasis><emphasis role="keyword">true</emphasis>);
03533 &#32;&#32;*out_TU&#32;=&#32;<link linkend="_namespaceclang_1_1cxtu_1a00c98a9560b39abf66fa58c2059de48e">MakeCXTranslationUnit</link>(CXXIdx,&#32;std::move(AU));
03534 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*out_TU&#32;?&#32;CXError_Success&#32;:&#32;CXError_Failure;
03535 }
</programlisting><para>
Referenced by <link linkend="__c_index_8cpp_source_1l03500">clang_createTranslationUnit()</link>.</para>
    </section><anchor xml:id="__c_index_8cpp_1a177b88f3aeb9c8b214f43afce5c6dc2d"/>    <section>
    <title>clang_createTranslationUnitFromSourceFile()</title>
<indexterm><primary>clang_createTranslationUnitFromSourceFile</primary><secondary>CIndex.cpp</secondary></indexterm>
<indexterm><primary>CIndex.cpp</primary><secondary>clang_createTranslationUnitFromSourceFile</secondary></indexterm>
<para><computeroutput>CXTranslationUnit clang_createTranslationUnitFromSourceFile (CXIndex CIdx, const char * source_filename, int num_command_line_args, const char *const * command_line_args, unsigned num_unsaved_files, struct CXUnsavedFile * unsaved_files)</computeroutput></para><para>
Definition at line <link linkend="__c_index_8cpp_source_1l03542">3542</link> of file <link linkend="__c_index_8cpp_source">CIndex.cpp</link>.</para>
<programlisting>03545 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
03546 &#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;Options&#32;=&#32;CXTranslationUnit_DetailedPreprocessingRecord;
03547 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__c_index_8cpp_1ad0a9bffbc13f2874a5c0cbfd78aaeded">clang_parseTranslationUnit</link>(CIdx,&#32;source_filename,&#32;command_line_args,
03548 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;num_command_line_args,&#32;unsaved_files,
03549 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;num_unsaved_files,&#32;Options);
03550 }
</programlisting>    </section><anchor xml:id="__c_index_8cpp_1a79f2fabb1bf5025f2a5684281fd8a23c"/>    <section>
    <title>clang_Cursor_Evaluate()</title>
<indexterm><primary>clang_Cursor_Evaluate</primary><secondary>CIndex.cpp</secondary></indexterm>
<indexterm><primary>CIndex.cpp</primary><secondary>clang_Cursor_Evaluate</secondary></indexterm>
<para><computeroutput>CXEvalResult clang_Cursor_Evaluate (CXCursor C)</computeroutput></para><para>
Definition at line <link linkend="__c_index_8cpp_source_1l04118">4118</link> of file <link linkend="__c_index_8cpp_source">CIndex.cpp</link>.</para>
<programlisting>04118 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
04119 &#32;&#32;<emphasis role="keyword">const</emphasis>&#32;Expr&#32;*E&#32;=&#32;<emphasis role="keyword">nullptr</emphasis>;
04120 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="__c_index_8cpp_1a88e594fe730830706a0b7cff796eaedf">clang_getCursorKind</link>(C)&#32;==&#32;CXCursor_CompoundStmt)
04121 &#32;&#32;&#32;&#32;E&#32;=&#32;evaluateCompoundStmtExpr(cast&lt;CompoundStmt&gt;(<link linkend="_namespaceclang_1_1cxcursor_1a2d5cb233204f81be58bd21deb628c7ad">getCursorStmt</link>(C)));
04122 &#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="__c_index_8cpp_1a5d47db8f608ae0c266d6551875d46b80">clang_isDeclaration</link>(C.kind))
04123 &#32;&#32;&#32;&#32;E&#32;=&#32;evaluateDeclExpr(<link linkend="_namespaceclang_1_1cxcursor_1a1f702246831c96afd990e457613dc642">getCursorDecl</link>(C));
04124 &#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="__c_index_8cpp_1ab958945dd59c351e1ae1a3f7f5668095">clang_isExpression</link>(C.kind))
04125 &#32;&#32;&#32;&#32;E&#32;=&#32;<link linkend="_namespaceclang_1_1cxcursor_1a80837a3710c6df0dfc24b5ee1d94ff9b">getCursorExpr</link>(C);
04126 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(E)
04127 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">const_cast&lt;</emphasis>CXEvalResult<emphasis role="keyword">&gt;</emphasis>(
04128 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">reinterpret_cast&lt;</emphasis><emphasis role="keyword">const&#32;</emphasis><emphasis role="keywordtype">void</emphasis>&#32;*<emphasis role="keyword">&gt;</emphasis>(evaluateExpr(<emphasis role="keyword">const_cast&lt;</emphasis>Expr&#32;*<emphasis role="keyword">&gt;</emphasis>(E),&#32;C)));
04129 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">nullptr</emphasis>;
04130 }
</programlisting><para>
References <link linkend="__c_index_8cpp_source_1l05984">clang_getCursorKind()</link>.</para>
    </section><anchor xml:id="__c_index_8cpp_1a9fdbd8a38405153494cef86239d10bbb"/>    <section>
    <title>clang_Cursor_getBriefCommentText()</title>
<indexterm><primary>clang_Cursor_getBriefCommentText</primary><secondary>CIndex.cpp</secondary></indexterm>
<indexterm><primary>CIndex.cpp</primary><secondary>clang_Cursor_getBriefCommentText</secondary></indexterm>
<para><computeroutput>CXString clang_Cursor_getBriefCommentText (CXCursor C)</computeroutput></para><para>
Definition at line <link linkend="__c_index_8cpp_source_1l08421">8421</link> of file <link linkend="__c_index_8cpp_source">CIndex.cpp</link>.</para>
<programlisting>08421 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
08422 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!<link linkend="__c_index_8cpp_1a5d47db8f608ae0c266d6551875d46b80">clang_isDeclaration</link>(C.kind))
08423 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1a8684a35d52ccb8c623144db89a0205e1">cxstring::createNull</link>();
08424 
08425 &#32;&#32;<emphasis role="keyword">const</emphasis>&#32;Decl&#32;*D&#32;=&#32;<link linkend="_namespaceclang_1_1cxcursor_1a1f702246831c96afd990e457613dc642">getCursorDecl</link>(C);
08426 &#32;&#32;<emphasis role="keyword">const</emphasis>&#32;ASTContext&#32;&amp;Context&#32;=&#32;<link linkend="_namespaceclang_1_1cxcursor_1a9f29c286f26b3cf616331c7e6554d373">getCursorContext</link>(C);
08427 &#32;&#32;<emphasis role="keyword">const</emphasis>&#32;RawComment&#32;*RC&#32;=&#32;Context.getRawCommentForAnyRedecl(D);
08428 
08429 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(RC)&#32;{
08430 &#32;&#32;&#32;&#32;StringRef&#32;BriefText&#32;=&#32;RC-&gt;getBriefText(Context);
08431 
08432 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Don&apos;t&#32;duplicate&#32;the&#32;string&#32;because&#32;RawComment&#32;ensures&#32;that&#32;this&#32;memory</emphasis>
08433 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;will&#32;not&#32;go&#32;away.</emphasis>
08434 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(BriefText);
08435 &#32;&#32;}
08436 
08437 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1a8684a35d52ccb8c623144db89a0205e1">cxstring::createNull</link>();
08438 }
</programlisting><para>
References <link linkend="__c_index_8cpp_source_1l05934">clang_isDeclaration()</link>, <link linkend="__c_x_string_8cpp_source_1l00050">clang::cxstring::createNull()</link>, <link linkend="__c_x_string_8cpp_source_1l00057">clang::cxstring::createRef()</link>, <link linkend="__c_x_cursor_8cpp_source_1l01122">clang::cxcursor::getCursorContext()</link>, and <link linkend="__c_x_cursor_8cpp_source_1l01101">clang::cxcursor::getCursorDecl()</link>.</para>
    </section><anchor xml:id="__c_index_8cpp_1acfc6a9db8380053fc33e62e70a4b294b"/>    <section>
    <title>clang_Cursor_getCommentRange()</title>
<indexterm><primary>clang_Cursor_getCommentRange</primary><secondary>CIndex.cpp</secondary></indexterm>
<indexterm><primary>CIndex.cpp</primary><secondary>clang_Cursor_getCommentRange</secondary></indexterm>
<para><computeroutput>CXSourceRange clang_Cursor_getCommentRange (CXCursor C)</computeroutput></para><para>
Definition at line <link linkend="__c_index_8cpp_source_1l08393">8393</link> of file <link linkend="__c_index_8cpp_source">CIndex.cpp</link>.</para>
<programlisting>08393 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
08394 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!<link linkend="__c_index_8cpp_1a5d47db8f608ae0c266d6551875d46b80">clang_isDeclaration</link>(C.kind))
08395 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__c_x_source_location_8cpp_1afadb1a95ce51366407cf6c363299a17f">clang_getNullRange</link>();
08396 
08397 &#32;&#32;<emphasis role="keyword">const</emphasis>&#32;Decl&#32;*D&#32;=&#32;<link linkend="_namespaceclang_1_1cxcursor_1a1f702246831c96afd990e457613dc642">getCursorDecl</link>(C);
08398 &#32;&#32;ASTContext&#32;&amp;Context&#32;=&#32;<link linkend="_namespaceclang_1_1cxcursor_1a9f29c286f26b3cf616331c7e6554d373">getCursorContext</link>(C);
08399 &#32;&#32;<emphasis role="keyword">const</emphasis>&#32;RawComment&#32;*RC&#32;=&#32;Context.getRawCommentForAnyRedecl(D);
08400 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!RC)
08401 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__c_x_source_location_8cpp_1afadb1a95ce51366407cf6c363299a17f">clang_getNullRange</link>();
08402 
08403 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxloc_1a39d02b462b1f3233518f01951d83d035">cxloc::translateSourceRange</link>(Context,&#32;RC-&gt;getSourceRange());
08404 }
</programlisting><para>
References <link linkend="__c_x_source_location_8cpp_source_1l00052">clang_getNullRange()</link>, <link linkend="__c_index_8cpp_source_1l05934">clang_isDeclaration()</link>, <link linkend="__c_x_cursor_8cpp_source_1l01122">clang::cxcursor::getCursorContext()</link>, <link linkend="__c_x_cursor_8cpp_source_1l01101">clang::cxcursor::getCursorDecl()</link>, and <link linkend="__c_index_8cpp_source_1l00143">clang::cxloc::translateSourceRange()</link>.</para>
    </section><anchor xml:id="__c_index_8cpp_1a2a901378706b8476950697e8073d65dc"/>    <section>
    <title>clang_Cursor_getCXXManglings()</title>
<indexterm><primary>clang_Cursor_getCXXManglings</primary><secondary>CIndex.cpp</secondary></indexterm>
<indexterm><primary>CIndex.cpp</primary><secondary>clang_Cursor_getCXXManglings</secondary></indexterm>
<para><computeroutput>CXStringSet* clang_Cursor_getCXXManglings (CXCursor C)</computeroutput></para><para>
Definition at line <link linkend="__c_index_8cpp_source_1l04903">4903</link> of file <link linkend="__c_index_8cpp_source">CIndex.cpp</link>.</para>
<programlisting>04903 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
04904 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="__c_index_8cpp_1a0c5b391d8bca745084fb8906cce6f66c">clang_isInvalid</link>(C.kind)&#32;||&#32;!<link linkend="__c_index_8cpp_1a5d47db8f608ae0c266d6551875d46b80">clang_isDeclaration</link>(C.kind))
04905 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">nullptr</emphasis>;
04906 
04907 &#32;&#32;<emphasis role="keyword">const</emphasis>&#32;Decl&#32;*D&#32;=&#32;<link linkend="_namespaceclang_1_1cxcursor_1a1f702246831c96afd990e457613dc642">getCursorDecl</link>(C);
04908 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!(isa&lt;CXXRecordDecl&gt;(D)&#32;||&#32;isa&lt;CXXMethodDecl&gt;(D)))
04909 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">nullptr</emphasis>;
04910 
04911 &#32;&#32;ASTContext&#32;&amp;Ctx&#32;=&#32;D-&gt;getASTContext();
04912 &#32;&#32;ASTNameGenerator&#32;ASTNameGen(Ctx);
04913 &#32;&#32;std::vector&lt;std::string&gt;&#32;Manglings&#32;=&#32;ASTNameGen.getAllManglings(D);
04914 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1a0ebb0924de5a075db7ae5d7937df8056">cxstring::createSet</link>(Manglings);
04915 }
</programlisting><para>
References <link linkend="__c_index_8cpp_source_1l05934">clang_isDeclaration()</link>, <link linkend="__c_index_8cpp_source_1l05930">clang_isInvalid()</link>, <link linkend="__c_x_string_8cpp_source_1l00113">clang::cxstring::createSet()</link>, and <link linkend="__c_x_cursor_8cpp_source_1l01101">clang::cxcursor::getCursorDecl()</link>.</para>
    </section><anchor xml:id="__c_index_8cpp_1af9df3cb95580d22d253ebb43e47bb466"/>    <section>
    <title>clang_Cursor_getMangling()</title>
<indexterm><primary>clang_Cursor_getMangling</primary><secondary>CIndex.cpp</secondary></indexterm>
<indexterm><primary>CIndex.cpp</primary><secondary>clang_Cursor_getMangling</secondary></indexterm>
<para><computeroutput>CXString clang_Cursor_getMangling (CXCursor C)</computeroutput></para><para>
Definition at line <link linkend="__c_index_8cpp_source_1l04889">4889</link> of file <link linkend="__c_index_8cpp_source">CIndex.cpp</link>.</para>
<programlisting>04889 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
04890 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="__c_index_8cpp_1a0c5b391d8bca745084fb8906cce6f66c">clang_isInvalid</link>(C.kind)&#32;||&#32;!<link linkend="__c_index_8cpp_1a5d47db8f608ae0c266d6551875d46b80">clang_isDeclaration</link>(C.kind))
04891 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1a8a49aa6ea196abdde85886689f2630f9">cxstring::createEmpty</link>();
04892 
04893 &#32;&#32;<emphasis role="comment">//&#32;Mangling&#32;only&#32;works&#32;for&#32;functions&#32;and&#32;variables.</emphasis>
04894 &#32;&#32;<emphasis role="keyword">const</emphasis>&#32;Decl&#32;*D&#32;=&#32;<link linkend="_namespaceclang_1_1cxcursor_1a1f702246831c96afd990e457613dc642">getCursorDecl</link>(C);
04895 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!D&#32;||&#32;!(isa&lt;FunctionDecl&gt;(D)&#32;||&#32;isa&lt;VarDecl&gt;(D)))
04896 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1a8a49aa6ea196abdde85886689f2630f9">cxstring::createEmpty</link>();
04897 
04898 &#32;&#32;ASTContext&#32;&amp;Ctx&#32;=&#32;D-&gt;getASTContext();
04899 &#32;&#32;ASTNameGenerator&#32;ASTNameGen(Ctx);
04900 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1a19a4962be87f75a8c1fa5a0b75f76298">cxstring::createDup</link>(ASTNameGen.getName(D));
04901 }
</programlisting><para>
References <link linkend="__c_index_8cpp_source_1l05934">clang_isDeclaration()</link>, <link linkend="__c_index_8cpp_source_1l05930">clang_isInvalid()</link>, <link linkend="__c_x_string_8cpp_source_1l00067">clang::cxstring::createDup()</link>, <link linkend="__c_x_string_8cpp_source_1l00043">clang::cxstring::createEmpty()</link>, and <link linkend="__c_x_cursor_8cpp_source_1l01101">clang::cxcursor::getCursorDecl()</link>.</para>
    </section><anchor xml:id="__c_index_8cpp_1a2ca727eeafb4e4eded5e17a28ce42f3d"/>    <section>
    <title>clang_Cursor_getModule()</title>
<indexterm><primary>clang_Cursor_getModule</primary><secondary>CIndex.cpp</secondary></indexterm>
<indexterm><primary>CIndex.cpp</primary><secondary>clang_Cursor_getModule</secondary></indexterm>
<para><computeroutput>CXModule clang_Cursor_getModule (CXCursor C)</computeroutput></para><para>
Definition at line <link linkend="__c_index_8cpp_source_1l08440">8440</link> of file <link linkend="__c_index_8cpp_source">CIndex.cpp</link>.</para>
<programlisting>08440 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
08441 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(C.kind&#32;==&#32;CXCursor_ModuleImportDecl)&#32;{
08442 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;ImportDecl&#32;*ImportD&#32;=
08443 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;dyn_cast_or_null&lt;ImportDecl&gt;(<link linkend="_namespaceclang_1_1cxcursor_1a1f702246831c96afd990e457613dc642">getCursorDecl</link>(C)))
08444 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;ImportD-&gt;getImportedModule();
08445 &#32;&#32;}
08446 
08447 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">nullptr</emphasis>;
08448 }
</programlisting><para>
References <link linkend="__c_x_cursor_8cpp_source_1l01101">clang::cxcursor::getCursorDecl()</link>.</para>
    </section><anchor xml:id="__c_index_8cpp_1a4aa93be0b9a3a68fbe3357f97e41b4ea"/>    <section>
    <title>clang_Cursor_getObjCDeclQualifiers()</title>
<indexterm><primary>clang_Cursor_getObjCDeclQualifiers</primary><secondary>CIndex.cpp</secondary></indexterm>
<indexterm><primary>CIndex.cpp</primary><secondary>clang_Cursor_getObjCDeclQualifiers</secondary></indexterm>
<para><computeroutput>unsigned clang_Cursor_getObjCDeclQualifiers (CXCursor C)</computeroutput></para><para>
Definition at line <link linkend="__c_index_8cpp_source_1l08317">8317</link> of file <link linkend="__c_index_8cpp_source">CIndex.cpp</link>.</para>
<programlisting>08317 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
08318 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!<link linkend="__c_index_8cpp_1a5d47db8f608ae0c266d6551875d46b80">clang_isDeclaration</link>(C.kind))
08319 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;CXObjCDeclQualifier_None;
08320 
08321 &#32;&#32;Decl::ObjCDeclQualifier&#32;QT&#32;=&#32;Decl::OBJC_TQ_None;
08322 &#32;&#32;<emphasis role="keyword">const</emphasis>&#32;Decl&#32;*D&#32;=&#32;<link linkend="_namespaceclang_1_1cxcursor_1a1f702246831c96afd990e457613dc642">getCursorDecl</link>(C);
08323 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;ObjCMethodDecl&#32;*MD&#32;=&#32;dyn_cast&lt;ObjCMethodDecl&gt;(D))
08324 &#32;&#32;&#32;&#32;QT&#32;=&#32;MD-&gt;getObjCDeclQualifier();
08325 &#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;ParmVarDecl&#32;*PD&#32;=&#32;dyn_cast&lt;ParmVarDecl&gt;(D))
08326 &#32;&#32;&#32;&#32;QT&#32;=&#32;PD-&gt;getObjCDeclQualifier();
08327 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(QT&#32;==&#32;Decl::OBJC_TQ_None)
08328 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;CXObjCDeclQualifier_None;
08329 
08330 &#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;Result&#32;=&#32;CXObjCDeclQualifier_None;
08331 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(QT&#32;&amp;&#32;Decl::OBJC_TQ_In)
08332 &#32;&#32;&#32;&#32;Result&#32;|=&#32;CXObjCDeclQualifier_In;
08333 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(QT&#32;&amp;&#32;Decl::OBJC_TQ_Inout)
08334 &#32;&#32;&#32;&#32;Result&#32;|=&#32;CXObjCDeclQualifier_Inout;
08335 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(QT&#32;&amp;&#32;Decl::OBJC_TQ_Out)
08336 &#32;&#32;&#32;&#32;Result&#32;|=&#32;CXObjCDeclQualifier_Out;
08337 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(QT&#32;&amp;&#32;Decl::OBJC_TQ_Bycopy)
08338 &#32;&#32;&#32;&#32;Result&#32;|=&#32;CXObjCDeclQualifier_Bycopy;
08339 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(QT&#32;&amp;&#32;Decl::OBJC_TQ_Byref)
08340 &#32;&#32;&#32;&#32;Result&#32;|=&#32;CXObjCDeclQualifier_Byref;
08341 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(QT&#32;&amp;&#32;Decl::OBJC_TQ_Oneway)
08342 &#32;&#32;&#32;&#32;Result&#32;|=&#32;CXObjCDeclQualifier_Oneway;
08343 
08344 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;Result;
08345 }
</programlisting><para>
References <link linkend="__c_index_8cpp_source_1l05934">clang_isDeclaration()</link>, and <link linkend="__c_x_cursor_8cpp_source_1l01101">clang::cxcursor::getCursorDecl()</link>.</para>
    </section><anchor xml:id="__c_index_8cpp_1a02df930dfd6a35f25132f6cc40281d8f"/>    <section>
    <title>clang_Cursor_getObjCManglings()</title>
<indexterm><primary>clang_Cursor_getObjCManglings</primary><secondary>CIndex.cpp</secondary></indexterm>
<indexterm><primary>CIndex.cpp</primary><secondary>clang_Cursor_getObjCManglings</secondary></indexterm>
<para><computeroutput>CXStringSet* clang_Cursor_getObjCManglings (CXCursor C)</computeroutput></para><para>
Definition at line <link linkend="__c_index_8cpp_source_1l04917">4917</link> of file <link linkend="__c_index_8cpp_source">CIndex.cpp</link>.</para>
<programlisting>04917 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
04918 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="__c_index_8cpp_1a0c5b391d8bca745084fb8906cce6f66c">clang_isInvalid</link>(C.kind)&#32;||&#32;!<link linkend="__c_index_8cpp_1a5d47db8f608ae0c266d6551875d46b80">clang_isDeclaration</link>(C.kind))
04919 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">nullptr</emphasis>;
04920 
04921 &#32;&#32;<emphasis role="keyword">const</emphasis>&#32;Decl&#32;*D&#32;=&#32;<link linkend="_namespaceclang_1_1cxcursor_1a1f702246831c96afd990e457613dc642">getCursorDecl</link>(C);
04922 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!(isa&lt;ObjCInterfaceDecl&gt;(D)&#32;||&#32;isa&lt;ObjCImplementationDecl&gt;(D)))
04923 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">nullptr</emphasis>;
04924 
04925 &#32;&#32;ASTContext&#32;&amp;Ctx&#32;=&#32;D-&gt;getASTContext();
04926 &#32;&#32;ASTNameGenerator&#32;ASTNameGen(Ctx);
04927 &#32;&#32;std::vector&lt;std::string&gt;&#32;Manglings&#32;=&#32;ASTNameGen.getAllManglings(D);
04928 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1a0ebb0924de5a075db7ae5d7937df8056">cxstring::createSet</link>(Manglings);
04929 }
</programlisting><para>
References <link linkend="__c_index_8cpp_source_1l05934">clang_isDeclaration()</link>, <link linkend="__c_index_8cpp_source_1l05930">clang_isInvalid()</link>, <link linkend="__c_x_string_8cpp_source_1l00113">clang::cxstring::createSet()</link>, and <link linkend="__c_x_cursor_8cpp_source_1l01101">clang::cxcursor::getCursorDecl()</link>.</para>
    </section><anchor xml:id="__c_index_8cpp_1af65ce11e5a95923ac8a65745b5e4476c"/>    <section>
    <title>clang_Cursor_getObjCPropertyAttributes()</title>
<indexterm><primary>clang_Cursor_getObjCPropertyAttributes</primary><secondary>CIndex.cpp</secondary></indexterm>
<indexterm><primary>CIndex.cpp</primary><secondary>clang_Cursor_getObjCPropertyAttributes</secondary></indexterm>
<para><computeroutput>unsigned clang_Cursor_getObjCPropertyAttributes (CXCursor C, unsigned reserved)</computeroutput></para><para>
Definition at line <link linkend="__c_index_8cpp_source_1l08264">8264</link> of file <link linkend="__c_index_8cpp_source">CIndex.cpp</link>.</para>
<programlisting>08264 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
08265 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(C.kind&#32;!=&#32;CXCursor_ObjCPropertyDecl)
08266 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;CXObjCPropertyAttr_noattr;
08267 
08268 &#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;Result&#32;=&#32;CXObjCPropertyAttr_noattr;
08269 &#32;&#32;<emphasis role="keyword">const</emphasis>&#32;ObjCPropertyDecl&#32;*PD&#32;=&#32;dyn_cast&lt;ObjCPropertyDecl&gt;(<link linkend="_namespaceclang_1_1cxcursor_1a1f702246831c96afd990e457613dc642">getCursorDecl</link>(C));
08270 &#32;&#32;ObjCPropertyAttribute::Kind&#32;Attr&#32;=&#32;PD-&gt;getPropertyAttributesAsWritten();
08271 
08272 <emphasis role="preprocessor">#define&#32;SET_CXOBJCPROP_ATTR(A)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
08273 <emphasis role="preprocessor">&#32;&#32;if&#32;(Attr&#32;&amp;&#32;ObjCPropertyAttribute::kind_##A)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
08274 <emphasis role="preprocessor">&#32;&#32;Result&#32;|=&#32;CXObjCPropertyAttr_##A</emphasis>
08275 &#32;&#32;<link linkend="__c_index_8cpp_1ad1cb77494b671d342a9e12ea17594ce7">SET_CXOBJCPROP_ATTR</link>(readonly);
08276 &#32;&#32;<link linkend="__c_index_8cpp_1ad1cb77494b671d342a9e12ea17594ce7">SET_CXOBJCPROP_ATTR</link>(getter);
08277 &#32;&#32;<link linkend="__c_index_8cpp_1ad1cb77494b671d342a9e12ea17594ce7">SET_CXOBJCPROP_ATTR</link>(assign);
08278 &#32;&#32;<link linkend="__c_index_8cpp_1ad1cb77494b671d342a9e12ea17594ce7">SET_CXOBJCPROP_ATTR</link>(readwrite);
08279 &#32;&#32;<link linkend="__c_index_8cpp_1ad1cb77494b671d342a9e12ea17594ce7">SET_CXOBJCPROP_ATTR</link>(retain);
08280 &#32;&#32;<link linkend="__c_index_8cpp_1ad1cb77494b671d342a9e12ea17594ce7">SET_CXOBJCPROP_ATTR</link>(copy);
08281 &#32;&#32;<link linkend="__c_index_8cpp_1ad1cb77494b671d342a9e12ea17594ce7">SET_CXOBJCPROP_ATTR</link>(nonatomic);
08282 &#32;&#32;<link linkend="__c_index_8cpp_1ad1cb77494b671d342a9e12ea17594ce7">SET_CXOBJCPROP_ATTR</link>(setter);
08283 &#32;&#32;<link linkend="__c_index_8cpp_1ad1cb77494b671d342a9e12ea17594ce7">SET_CXOBJCPROP_ATTR</link>(atomic);
08284 &#32;&#32;<link linkend="__c_index_8cpp_1ad1cb77494b671d342a9e12ea17594ce7">SET_CXOBJCPROP_ATTR</link>(weak);
08285 &#32;&#32;<link linkend="__c_index_8cpp_1ad1cb77494b671d342a9e12ea17594ce7">SET_CXOBJCPROP_ATTR</link>(strong);
08286 &#32;&#32;<link linkend="__c_index_8cpp_1ad1cb77494b671d342a9e12ea17594ce7">SET_CXOBJCPROP_ATTR</link>(unsafe_unretained);
08287 &#32;&#32;<link linkend="__c_index_8cpp_1ad1cb77494b671d342a9e12ea17594ce7">SET_CXOBJCPROP_ATTR</link>(<emphasis role="keyword">class</emphasis>);
08288 <emphasis role="preprocessor">#undef&#32;SET_CXOBJCPROP_ATTR</emphasis>
08289 
08290 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;Result;
08291 }
</programlisting><para>
References <link linkend="__c_x_cursor_8cpp_source_1l01101">clang::cxcursor::getCursorDecl()</link>, and <link linkend="__c_index_8cpp_1ad1cb77494b671d342a9e12ea17594ce7">SET_CXOBJCPROP_ATTR</link>.</para>
    </section><anchor xml:id="__c_index_8cpp_1a74073124651f4d25994f1c660a3b097f"/>    <section>
    <title>clang_Cursor_getObjCPropertyGetterName()</title>
<indexterm><primary>clang_Cursor_getObjCPropertyGetterName</primary><secondary>CIndex.cpp</secondary></indexterm>
<indexterm><primary>CIndex.cpp</primary><secondary>clang_Cursor_getObjCPropertyGetterName</secondary></indexterm>
<para><computeroutput>CXString clang_Cursor_getObjCPropertyGetterName (CXCursor C)</computeroutput></para><para>
Definition at line <link linkend="__c_index_8cpp_source_1l08293">8293</link> of file <link linkend="__c_index_8cpp_source">CIndex.cpp</link>.</para>
<programlisting>08293 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
08294 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(C.kind&#32;!=&#32;CXCursor_ObjCPropertyDecl)
08295 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1a8684a35d52ccb8c623144db89a0205e1">cxstring::createNull</link>();
08296 
08297 &#32;&#32;<emphasis role="keyword">const</emphasis>&#32;ObjCPropertyDecl&#32;*PD&#32;=&#32;dyn_cast&lt;ObjCPropertyDecl&gt;(<link linkend="_namespaceclang_1_1cxcursor_1a1f702246831c96afd990e457613dc642">getCursorDecl</link>(C));
08298 &#32;&#32;Selector&#32;sel&#32;=&#32;PD-&gt;getGetterName();
08299 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(sel.isNull())
08300 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1a8684a35d52ccb8c623144db89a0205e1">cxstring::createNull</link>();
08301 
08302 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1a19a4962be87f75a8c1fa5a0b75f76298">cxstring::createDup</link>(sel.getAsString());
08303 }
</programlisting><para>
References <link linkend="__c_x_string_8cpp_source_1l00067">clang::cxstring::createDup()</link>, <link linkend="__c_x_string_8cpp_source_1l00050">clang::cxstring::createNull()</link>, and <link linkend="__c_x_cursor_8cpp_source_1l01101">clang::cxcursor::getCursorDecl()</link>.</para>
    </section><anchor xml:id="__c_index_8cpp_1ac65f3c2eccf604efa14c1b286cce5e26"/>    <section>
    <title>clang_Cursor_getObjCPropertySetterName()</title>
<indexterm><primary>clang_Cursor_getObjCPropertySetterName</primary><secondary>CIndex.cpp</secondary></indexterm>
<indexterm><primary>CIndex.cpp</primary><secondary>clang_Cursor_getObjCPropertySetterName</secondary></indexterm>
<para><computeroutput>CXString clang_Cursor_getObjCPropertySetterName (CXCursor C)</computeroutput></para><para>
Definition at line <link linkend="__c_index_8cpp_source_1l08305">8305</link> of file <link linkend="__c_index_8cpp_source">CIndex.cpp</link>.</para>
<programlisting>08305 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
08306 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(C.kind&#32;!=&#32;CXCursor_ObjCPropertyDecl)
08307 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1a8684a35d52ccb8c623144db89a0205e1">cxstring::createNull</link>();
08308 
08309 &#32;&#32;<emphasis role="keyword">const</emphasis>&#32;ObjCPropertyDecl&#32;*PD&#32;=&#32;dyn_cast&lt;ObjCPropertyDecl&gt;(<link linkend="_namespaceclang_1_1cxcursor_1a1f702246831c96afd990e457613dc642">getCursorDecl</link>(C));
08310 &#32;&#32;Selector&#32;sel&#32;=&#32;PD-&gt;getSetterName();
08311 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(sel.isNull())
08312 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1a8684a35d52ccb8c623144db89a0205e1">cxstring::createNull</link>();
08313 
08314 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1a19a4962be87f75a8c1fa5a0b75f76298">cxstring::createDup</link>(sel.getAsString());
08315 }
</programlisting><para>
References <link linkend="__c_x_string_8cpp_source_1l00067">clang::cxstring::createDup()</link>, <link linkend="__c_x_string_8cpp_source_1l00050">clang::cxstring::createNull()</link>, and <link linkend="__c_x_cursor_8cpp_source_1l01101">clang::cxcursor::getCursorDecl()</link>.</para>
    </section><anchor xml:id="__c_index_8cpp_1a026bd44ebbcdfe3b1585dc546051cdfa"/>    <section>
    <title>clang_Cursor_getObjCSelectorIndex()</title>
<indexterm><primary>clang_Cursor_getObjCSelectorIndex</primary><secondary>CIndex.cpp</secondary></indexterm>
<indexterm><primary>CIndex.cpp</primary><secondary>clang_Cursor_getObjCSelectorIndex</secondary></indexterm>
<para><computeroutput>int clang_Cursor_getObjCSelectorIndex (CXCursor cursor)</computeroutput></para><para>
Definition at line <link linkend="__c_index_8cpp_source_1l06666">6666</link> of file <link linkend="__c_index_8cpp_source">CIndex.cpp</link>.</para>
<programlisting>06666 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
06667 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxcursor_1ac0203107f2338d86b2c77680155c3bf5">cxcursor::getSelectorIdentifierIndexAndLoc</link>(cursor).first;
06668 }
</programlisting><para>
References <link linkend="__c_x_cursor_8cpp_source_1l01156">clang::cxcursor::getSelectorIdentifierIndexAndLoc()</link>.</para>
    </section><anchor xml:id="__c_index_8cpp_1aa781f7c9e6773175108bd7539fa6cf38"/>    <section>
    <title>clang_Cursor_getRawCommentText()</title>
<indexterm><primary>clang_Cursor_getRawCommentText</primary><secondary>CIndex.cpp</secondary></indexterm>
<indexterm><primary>CIndex.cpp</primary><secondary>clang_Cursor_getRawCommentText</secondary></indexterm>
<para><computeroutput>CXString clang_Cursor_getRawCommentText (CXCursor C)</computeroutput></para><para>
Definition at line <link linkend="__c_index_8cpp_source_1l08406">8406</link> of file <link linkend="__c_index_8cpp_source">CIndex.cpp</link>.</para>
<programlisting>08406 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
08407 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!<link linkend="__c_index_8cpp_1a5d47db8f608ae0c266d6551875d46b80">clang_isDeclaration</link>(C.kind))
08408 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1a8684a35d52ccb8c623144db89a0205e1">cxstring::createNull</link>();
08409 
08410 &#32;&#32;<emphasis role="keyword">const</emphasis>&#32;Decl&#32;*D&#32;=&#32;<link linkend="_namespaceclang_1_1cxcursor_1a1f702246831c96afd990e457613dc642">getCursorDecl</link>(C);
08411 &#32;&#32;ASTContext&#32;&amp;Context&#32;=&#32;<link linkend="_namespaceclang_1_1cxcursor_1a9f29c286f26b3cf616331c7e6554d373">getCursorContext</link>(C);
08412 &#32;&#32;<emphasis role="keyword">const</emphasis>&#32;RawComment&#32;*RC&#32;=&#32;Context.getRawCommentForAnyRedecl(D);
08413 &#32;&#32;StringRef&#32;RawText&#32;=
08414 &#32;&#32;&#32;&#32;&#32;&#32;RC&#32;?&#32;RC-&gt;getRawText(Context.getSourceManager())&#32;:&#32;StringRef();
08415 
08416 &#32;&#32;<emphasis role="comment">//&#32;Don&apos;t&#32;duplicate&#32;the&#32;string&#32;because&#32;RawText&#32;points&#32;directly&#32;into&#32;source</emphasis>
08417 &#32;&#32;<emphasis role="comment">//&#32;code.</emphasis>
08418 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(RawText);
08419 }
</programlisting><para>
References <link linkend="__c_index_8cpp_source_1l05934">clang_isDeclaration()</link>, <link linkend="__c_x_string_8cpp_source_1l00050">clang::cxstring::createNull()</link>, <link linkend="__c_x_string_8cpp_source_1l00057">clang::cxstring::createRef()</link>, <link linkend="__c_x_cursor_8cpp_source_1l01122">clang::cxcursor::getCursorContext()</link>, and <link linkend="__c_x_cursor_8cpp_source_1l01101">clang::cxcursor::getCursorDecl()</link>.</para>
    </section><anchor xml:id="__c_index_8cpp_1aedf6f9d3e1c24f3c4e29eae0dd24487d"/>    <section>
    <title>clang_Cursor_getSpellingNameRange()</title>
<indexterm><primary>clang_Cursor_getSpellingNameRange</primary><secondary>CIndex.cpp</secondary></indexterm>
<indexterm><primary>CIndex.cpp</primary><secondary>clang_Cursor_getSpellingNameRange</secondary></indexterm>
<para><computeroutput>CXSourceRange clang_Cursor_getSpellingNameRange (CXCursor C, unsigned pieceIndex, unsigned options)</computeroutput></para><para>
Definition at line <link linkend="__c_index_8cpp_source_1l04795">4795</link> of file <link linkend="__c_index_8cpp_source">CIndex.cpp</link>.</para>
<programlisting>04796 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
04797 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="__c_x_cursor_8cpp_1af734553e3bac74a4a1f6f7450513cf0f">clang_Cursor_isNull</link>(C))
04798 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__c_x_source_location_8cpp_1afadb1a95ce51366407cf6c363299a17f">clang_getNullRange</link>();
04799 
04800 &#32;&#32;ASTContext&#32;&amp;Ctx&#32;=&#32;<link linkend="_namespaceclang_1_1cxcursor_1a9f29c286f26b3cf616331c7e6554d373">getCursorContext</link>(C);
04801 
04802 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="__c_index_8cpp_1af186bec30eb4cb63c3a7a295ccbcfe8b">clang_isStatement</link>(C.kind))&#32;{
04803 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;Stmt&#32;*S&#32;=&#32;<link linkend="_namespaceclang_1_1cxcursor_1a2d5cb233204f81be58bd21deb628c7ad">getCursorStmt</link>(C);
04804 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;LabelStmt&#32;*Label&#32;=&#32;dyn_cast_or_null&lt;LabelStmt&gt;(S))&#32;{
04805 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(pieceIndex&#32;&gt;&#32;0)
04806 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__c_x_source_location_8cpp_1afadb1a95ce51366407cf6c363299a17f">clang_getNullRange</link>();
04807 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxloc_1a39d02b462b1f3233518f01951d83d035">cxloc::translateSourceRange</link>(Ctx,&#32;Label-&gt;getIdentLoc());
04808 &#32;&#32;&#32;&#32;}
04809 
04810 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__c_x_source_location_8cpp_1afadb1a95ce51366407cf6c363299a17f">clang_getNullRange</link>();
04811 &#32;&#32;}
04812 
04813 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(C.kind&#32;==&#32;CXCursor_ObjCMessageExpr)&#32;{
04814 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;ObjCMessageExpr&#32;*ME&#32;=
04815 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;dyn_cast_or_null&lt;ObjCMessageExpr&gt;(<link linkend="_namespaceclang_1_1cxcursor_1a80837a3710c6df0dfc24b5ee1d94ff9b">getCursorExpr</link>(C)))&#32;{
04816 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(pieceIndex&#32;&gt;=&#32;ME-&gt;getNumSelectorLocs())
04817 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__c_x_source_location_8cpp_1afadb1a95ce51366407cf6c363299a17f">clang_getNullRange</link>();
04818 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxloc_1a39d02b462b1f3233518f01951d83d035">cxloc::translateSourceRange</link>(Ctx,&#32;ME-&gt;getSelectorLoc(pieceIndex));
04819 &#32;&#32;&#32;&#32;}
04820 &#32;&#32;}
04821 
04822 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(C.kind&#32;==&#32;CXCursor_ObjCInstanceMethodDecl&#32;||
04823 &#32;&#32;&#32;&#32;&#32;&#32;C.kind&#32;==&#32;CXCursor_ObjCClassMethodDecl)&#32;{
04824 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;ObjCMethodDecl&#32;*MD&#32;=
04825 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;dyn_cast_or_null&lt;ObjCMethodDecl&gt;(<link linkend="_namespaceclang_1_1cxcursor_1a1f702246831c96afd990e457613dc642">getCursorDecl</link>(C)))&#32;{
04826 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(pieceIndex&#32;&gt;=&#32;MD-&gt;getNumSelectorLocs())
04827 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__c_x_source_location_8cpp_1afadb1a95ce51366407cf6c363299a17f">clang_getNullRange</link>();
04828 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxloc_1a39d02b462b1f3233518f01951d83d035">cxloc::translateSourceRange</link>(Ctx,&#32;MD-&gt;getSelectorLoc(pieceIndex));
04829 &#32;&#32;&#32;&#32;}
04830 &#32;&#32;}
04831 
04832 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(C.kind&#32;==&#32;CXCursor_ObjCCategoryDecl&#32;||
04833 &#32;&#32;&#32;&#32;&#32;&#32;C.kind&#32;==&#32;CXCursor_ObjCCategoryImplDecl)&#32;{
04834 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(pieceIndex&#32;&gt;&#32;0)
04835 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__c_x_source_location_8cpp_1afadb1a95ce51366407cf6c363299a17f">clang_getNullRange</link>();
04836 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;ObjCCategoryDecl&#32;*CD&#32;=
04837 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;dyn_cast_or_null&lt;ObjCCategoryDecl&gt;(<link linkend="_namespaceclang_1_1cxcursor_1a1f702246831c96afd990e457613dc642">getCursorDecl</link>(C)))
04838 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxloc_1a39d02b462b1f3233518f01951d83d035">cxloc::translateSourceRange</link>(Ctx,&#32;CD-&gt;getCategoryNameLoc());
04839 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;ObjCCategoryImplDecl&#32;*CID&#32;=
04840 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;dyn_cast_or_null&lt;ObjCCategoryImplDecl&gt;(<link linkend="_namespaceclang_1_1cxcursor_1a1f702246831c96afd990e457613dc642">getCursorDecl</link>(C)))
04841 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxloc_1a39d02b462b1f3233518f01951d83d035">cxloc::translateSourceRange</link>(Ctx,&#32;CID-&gt;getCategoryNameLoc());
04842 &#32;&#32;}
04843 
04844 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(C.kind&#32;==&#32;CXCursor_ModuleImportDecl)&#32;{
04845 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(pieceIndex&#32;&gt;&#32;0)
04846 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__c_x_source_location_8cpp_1afadb1a95ce51366407cf6c363299a17f">clang_getNullRange</link>();
04847 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;ImportDecl&#32;*ImportD&#32;=
04848 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;dyn_cast_or_null&lt;ImportDecl&gt;(<link linkend="_namespaceclang_1_1cxcursor_1a1f702246831c96afd990e457613dc642">getCursorDecl</link>(C)))&#32;{
04849 &#32;&#32;&#32;&#32;&#32;&#32;ArrayRef&lt;SourceLocation&gt;&#32;Locs&#32;=&#32;ImportD-&gt;getIdentifierLocs();
04850 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!Locs.empty())
04851 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxloc_1a39d02b462b1f3233518f01951d83d035">cxloc::translateSourceRange</link>(
04852 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Ctx,&#32;SourceRange(Locs.front(),&#32;Locs.back()));
04853 &#32;&#32;&#32;&#32;}
04854 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__c_x_source_location_8cpp_1afadb1a95ce51366407cf6c363299a17f">clang_getNullRange</link>();
04855 &#32;&#32;}
04856 
04857 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(C.kind&#32;==&#32;CXCursor_CXXMethod&#32;||&#32;C.kind&#32;==&#32;CXCursor_Destructor&#32;||
04858 &#32;&#32;&#32;&#32;&#32;&#32;C.kind&#32;==&#32;CXCursor_ConversionFunction&#32;||
04859 &#32;&#32;&#32;&#32;&#32;&#32;C.kind&#32;==&#32;CXCursor_FunctionDecl)&#32;{
04860 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(pieceIndex&#32;&gt;&#32;0)
04861 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__c_x_source_location_8cpp_1afadb1a95ce51366407cf6c363299a17f">clang_getNullRange</link>();
04862 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;FunctionDecl&#32;*FD&#32;=
04863 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;dyn_cast_or_null&lt;FunctionDecl&gt;(<link linkend="_namespaceclang_1_1cxcursor_1a1f702246831c96afd990e457613dc642">getCursorDecl</link>(C)))&#32;{
04864 &#32;&#32;&#32;&#32;&#32;&#32;DeclarationNameInfo&#32;FunctionName&#32;=&#32;FD-&gt;getNameInfo();
04865 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxloc_1a39d02b462b1f3233518f01951d83d035">cxloc::translateSourceRange</link>(Ctx,&#32;FunctionName.getSourceRange());
04866 &#32;&#32;&#32;&#32;}
04867 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__c_x_source_location_8cpp_1afadb1a95ce51366407cf6c363299a17f">clang_getNullRange</link>();
04868 &#32;&#32;}
04869 
04870 &#32;&#32;<emphasis role="comment">//&#32;FIXME:&#32;A&#32;CXCursor_InclusionDirective&#32;should&#32;give&#32;the&#32;location&#32;of&#32;the</emphasis>
04871 &#32;&#32;<emphasis role="comment">//&#32;filename,&#32;but&#32;we&#32;don&apos;t&#32;keep&#32;track&#32;of&#32;this.</emphasis>
04872 
04873 &#32;&#32;<emphasis role="comment">//&#32;FIXME:&#32;A&#32;CXCursor_AnnotateAttr&#32;should&#32;give&#32;the&#32;location&#32;of&#32;the&#32;annotation</emphasis>
04874 &#32;&#32;<emphasis role="comment">//&#32;but&#32;we&#32;don&apos;t&#32;keep&#32;track&#32;of&#32;this.</emphasis>
04875 
04876 &#32;&#32;<emphasis role="comment">//&#32;FIXME:&#32;A&#32;CXCursor_AsmLabelAttr&#32;should&#32;give&#32;the&#32;location&#32;of&#32;the&#32;label</emphasis>
04877 &#32;&#32;<emphasis role="comment">//&#32;but&#32;we&#32;don&apos;t&#32;keep&#32;track&#32;of&#32;this.</emphasis>
04878 
04879 &#32;&#32;<emphasis role="comment">//&#32;Default&#32;handling,&#32;give&#32;the&#32;location&#32;of&#32;the&#32;cursor.</emphasis>
04880 
04881 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(pieceIndex&#32;&gt;&#32;0)
04882 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__c_x_source_location_8cpp_1afadb1a95ce51366407cf6c363299a17f">clang_getNullRange</link>();
04883 
04884 &#32;&#32;CXSourceLocation&#32;CXLoc&#32;=&#32;<link linkend="__c_index_8cpp_1a98001a3f8eb3a76d9c12821c45ef3708">clang_getCursorLocation</link>(C);
04885 &#32;&#32;SourceLocation&#32;Loc&#32;=&#32;cxloc::translateSourceLocation(CXLoc);
04886 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxloc_1a39d02b462b1f3233518f01951d83d035">cxloc::translateSourceRange</link>(Ctx,&#32;Loc);
04887 }
</programlisting><para>
References <link linkend="__c_x_cursor_8cpp_source_1l01253">clang_Cursor_isNull()</link>, <link linkend="__c_index_8cpp_source_1l05986">clang_getCursorLocation()</link>, <link linkend="__c_x_source_location_8cpp_source_1l00052">clang_getNullRange()</link>, <link linkend="__c_index_8cpp_source_1l05956">clang_isStatement()</link>, <link linkend="__c_x_cursor_8cpp_source_1l01122">clang::cxcursor::getCursorContext()</link>, <link linkend="__c_x_cursor_8cpp_source_1l01101">clang::cxcursor::getCursorDecl()</link>, <link linkend="__c_x_cursor_8cpp_source_1l01105">clang::cxcursor::getCursorExpr()</link>, <link linkend="__c_x_cursor_8cpp_source_1l01109">clang::cxcursor::getCursorStmt()</link>, and <link linkend="__c_index_8cpp_source_1l00143">clang::cxloc::translateSourceRange()</link>.</para>
    </section><anchor xml:id="__c_index_8cpp_1a0191cd6b4fbd65668e4717719b3f2a00"/>    <section>
    <title>clang_Cursor_getStorageClass()</title>
<indexterm><primary>clang_Cursor_getStorageClass</primary><secondary>CIndex.cpp</secondary></indexterm>
<indexterm><primary>CIndex.cpp</primary><secondary>clang_Cursor_getStorageClass</secondary></indexterm>
<para><computeroutput>enum CX_StorageClass clang_Cursor_getStorageClass (CXCursor C)</computeroutput></para><para>
Definition at line <link linkend="__c_index_8cpp_source_1l08173">8173</link> of file <link linkend="__c_index_8cpp_source">CIndex.cpp</link>.</para>
<programlisting>08188 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
08189 &#32;&#32;StorageClass&#32;sc&#32;=&#32;SC_None;
08190 &#32;&#32;<emphasis role="keyword">const</emphasis>&#32;Decl&#32;*D&#32;=&#32;<link linkend="_namespaceclang_1_1cxcursor_1a1f702246831c96afd990e457613dc642">getCursorDecl</link>(C);
08191 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(D)&#32;{
08192 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;FunctionDecl&#32;*FD&#32;=&#32;dyn_cast&lt;FunctionDecl&gt;(D))&#32;{
08193 &#32;&#32;&#32;&#32;&#32;&#32;sc&#32;=&#32;FD-&gt;getStorageClass();
08194 &#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;VarDecl&#32;*VD&#32;=&#32;dyn_cast&lt;VarDecl&gt;(D))&#32;{
08195 &#32;&#32;&#32;&#32;&#32;&#32;sc&#32;=&#32;VD-&gt;getStorageClass();
08196 &#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
08197 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;CX_SC_Invalid;
08198 &#32;&#32;&#32;&#32;}
08199 &#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
08200 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;CX_SC_Invalid;
08201 &#32;&#32;}
08202 &#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(sc)&#32;{
08203 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;SC_None:
08204 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;CX_SC_None;
08205 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;SC_Extern:
08206 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;CX_SC_Extern;
08207 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;SC_Static:
08208 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;CX_SC_Static;
08209 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;SC_PrivateExtern:
08210 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;CX_SC_PrivateExtern;
08211 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;SC_Auto:
08212 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;CX_SC_Auto;
08213 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;SC_Register:
08214 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;CX_SC_Register;
08215 &#32;&#32;}
08216 &#32;&#32;llvm_unreachable(<emphasis role="stringliteral">&quot;Unhandled&#32;storage&#32;class!&quot;</emphasis>);
08217 }
</programlisting>    </section><anchor xml:id="__c_index_8cpp_1a325cc28e1127a386f3941a8282754977"/>    <section>
    <title>clang_Cursor_getVarDeclInitializer()</title>
<indexterm><primary>clang_Cursor_getVarDeclInitializer</primary><secondary>CIndex.cpp</secondary></indexterm>
<indexterm><primary>CIndex.cpp</primary><secondary>clang_Cursor_getVarDeclInitializer</secondary></indexterm>
<para><computeroutput>CXCursor clang_Cursor_getVarDeclInitializer (CXCursor cursor)</computeroutput></para><para>
Definition at line <link linkend="__c_index_8cpp_source_1l08925">8925</link> of file <link linkend="__c_index_8cpp_source">CIndex.cpp</link>.</para>
<programlisting>08925 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
08926 &#32;&#32;<emphasis role="keyword">const</emphasis>&#32;Decl&#32;*<emphasis role="keyword">const</emphasis>&#32;D&#32;=&#32;<link linkend="_namespaceclang_1_1cxcursor_1a1f702246831c96afd990e457613dc642">getCursorDecl</link>(cursor);
08927 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!D)
08928 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__c_index_8cpp_1aa22233466eaf91f6f3cf6b84255c3b68">clang_getNullCursor</link>();
08929 &#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;*<emphasis role="keyword">const</emphasis>&#32;VD&#32;=&#32;dyn_cast&lt;VarDecl&gt;(D);
08930 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!VD)
08931 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__c_index_8cpp_1aa22233466eaf91f6f3cf6b84255c3b68">clang_getNullCursor</link>();
08932 &#32;&#32;<emphasis role="keyword">const</emphasis>&#32;Expr&#32;*<emphasis role="keyword">const</emphasis>&#32;Init&#32;=&#32;VD-&gt;getInit();
08933 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!Init)
08934 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__c_index_8cpp_1aa22233466eaf91f6f3cf6b84255c3b68">clang_getNullCursor</link>();
08935 
08936 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxcursor_1ab61ec2059175833672e8e78a376bb218">cxcursor::MakeCXCursor</link>(Init,&#32;VD,&#32;<link linkend="_namespaceclang_1_1cxcursor_1a23a495df22339e8289ae6d2421f493b6">cxcursor::getCursorTU</link>(cursor));
08937 }
</programlisting><para>
References <link linkend="__c_index_8cpp_source_1l05901">clang_getNullCursor()</link>, <link linkend="__c_x_cursor_8cpp_source_1l01101">clang::cxcursor::getCursorDecl()</link>, <link linkend="__c_x_cursor_8cpp_source_1l01133">clang::cxcursor::getCursorTU()</link>, and <link linkend="_namespaceclang_1_1cxcursor_1ab61ec2059175833672e8e78a376bb218">clang::cxcursor::MakeCXCursor()</link>.</para>
    </section><anchor xml:id="__c_index_8cpp_1a4104b63fec0184dea701b7bc6136270e"/>    <section>
    <title>clang_Cursor_hasAttrs()</title>
<indexterm><primary>clang_Cursor_hasAttrs</primary><secondary>CIndex.cpp</secondary></indexterm>
<indexterm><primary>CIndex.cpp</primary><secondary>clang_Cursor_hasAttrs</secondary></indexterm>
<para><computeroutput>unsigned clang_Cursor_hasAttrs (CXCursor C)</computeroutput></para><para>
Definition at line <link linkend="__c_index_8cpp_source_1l04132">4132</link> of file <link linkend="__c_index_8cpp_source">CIndex.cpp</link>.</para>
<programlisting>04132 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
04133 &#32;&#32;<emphasis role="keyword">const</emphasis>&#32;Decl&#32;*D&#32;=&#32;<link linkend="_namespaceclang_1_1cxcursor_1a1f702246831c96afd990e457613dc642">getCursorDecl</link>(C);
04134 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!D)&#32;{
04135 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
04136 &#32;&#32;}
04137 
04138 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(D-&gt;hasAttrs())&#32;{
04139 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;1;
04140 &#32;&#32;}
04141 
04142 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
04143 }
</programlisting><para>
References <link linkend="__c_x_cursor_8cpp_source_1l01101">clang::cxcursor::getCursorDecl()</link>.</para>
    </section><anchor xml:id="__c_index_8cpp_1a2ad86229a550aad3311b1b1aa98d03bb"/>    <section>
    <title>clang_Cursor_hasVarDeclExternalStorage()</title>
<indexterm><primary>clang_Cursor_hasVarDeclExternalStorage</primary><secondary>CIndex.cpp</secondary></indexterm>
<indexterm><primary>CIndex.cpp</primary><secondary>clang_Cursor_hasVarDeclExternalStorage</secondary></indexterm>
<para><computeroutput>int clang_Cursor_hasVarDeclExternalStorage (CXCursor cursor)</computeroutput></para><para>
Definition at line <link linkend="__c_index_8cpp_source_1l08950">8950</link> of file <link linkend="__c_index_8cpp_source">CIndex.cpp</link>.</para>
<programlisting>08950 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
08951 &#32;&#32;<emphasis role="keyword">const</emphasis>&#32;Decl&#32;*<emphasis role="keyword">const</emphasis>&#32;D&#32;=&#32;<link linkend="_namespaceclang_1_1cxcursor_1a1f702246831c96afd990e457613dc642">getCursorDecl</link>(cursor);
08952 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!D)
08953 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;-1;
08954 &#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;*<emphasis role="keyword">const</emphasis>&#32;VD&#32;=&#32;dyn_cast&lt;VarDecl&gt;(D);
08955 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!VD)
08956 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;-1;
08957 
08958 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;VD-&gt;hasExternalStorage();
08959 }
</programlisting><para>
References <link linkend="__c_x_cursor_8cpp_source_1l01101">clang::cxcursor::getCursorDecl()</link>.</para>
    </section><anchor xml:id="__c_index_8cpp_1ac99cd0fd7774986dfd8b58d0317da4d9"/>    <section>
    <title>clang_Cursor_hasVarDeclGlobalStorage()</title>
<indexterm><primary>clang_Cursor_hasVarDeclGlobalStorage</primary><secondary>CIndex.cpp</secondary></indexterm>
<indexterm><primary>CIndex.cpp</primary><secondary>clang_Cursor_hasVarDeclGlobalStorage</secondary></indexterm>
<para><computeroutput>int clang_Cursor_hasVarDeclGlobalStorage (CXCursor cursor)</computeroutput></para><para>
Definition at line <link linkend="__c_index_8cpp_source_1l08939">8939</link> of file <link linkend="__c_index_8cpp_source">CIndex.cpp</link>.</para>
<programlisting>08939 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
08940 &#32;&#32;<emphasis role="keyword">const</emphasis>&#32;Decl&#32;*<emphasis role="keyword">const</emphasis>&#32;D&#32;=&#32;<link linkend="_namespaceclang_1_1cxcursor_1a1f702246831c96afd990e457613dc642">getCursorDecl</link>(cursor);
08941 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!D)
08942 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;-1;
08943 &#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;*<emphasis role="keyword">const</emphasis>&#32;VD&#32;=&#32;dyn_cast&lt;VarDecl&gt;(D);
08944 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!VD)
08945 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;-1;
08946 
08947 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;VD-&gt;hasGlobalStorage();
08948 }
</programlisting><para>
References <link linkend="__c_x_cursor_8cpp_source_1l01101">clang::cxcursor::getCursorDecl()</link>.</para>
    </section><anchor xml:id="__c_index_8cpp_1a56b80d0bcb6eecee56bf8aa8e5c80896"/>    <section>
    <title>clang_Cursor_isExternalSymbol()</title>
<indexterm><primary>clang_Cursor_isExternalSymbol</primary><secondary>CIndex.cpp</secondary></indexterm>
<indexterm><primary>CIndex.cpp</primary><secondary>clang_Cursor_isExternalSymbol</secondary></indexterm>
<para><computeroutput>unsigned clang_Cursor_isExternalSymbol (CXCursor C, CXString * language, CXString * definedIn, unsigned * isGenerated)</computeroutput></para><para>
Definition at line <link linkend="__c_index_8cpp_source_1l08373">8373</link> of file <link linkend="__c_index_8cpp_source">CIndex.cpp</link>.</para>
<programlisting>08375 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
08376 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!<link linkend="__c_index_8cpp_1a5d47db8f608ae0c266d6551875d46b80">clang_isDeclaration</link>(C.kind))
08377 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
08378 
08379 &#32;&#32;<emphasis role="keyword">const</emphasis>&#32;Decl&#32;*D&#32;=&#32;<link linkend="_namespaceclang_1_1cxcursor_1a1f702246831c96afd990e457613dc642">getCursorDecl</link>(C);
08380 
08381 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="keyword">auto</emphasis>&#32;*attr&#32;=&#32;D-&gt;getExternalSourceSymbolAttr())&#32;{
08382 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(language)
08383 &#32;&#32;&#32;&#32;&#32;&#32;*language&#32;=&#32;<link linkend="_namespaceclang_1_1cxstring_1a19a4962be87f75a8c1fa5a0b75f76298">cxstring::createDup</link>(attr-&gt;getLanguage());
08384 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(definedIn)
08385 &#32;&#32;&#32;&#32;&#32;&#32;*definedIn&#32;=&#32;<link linkend="_namespaceclang_1_1cxstring_1a19a4962be87f75a8c1fa5a0b75f76298">cxstring::createDup</link>(attr-&gt;getDefinedIn());
08386 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(isGenerated)
08387 &#32;&#32;&#32;&#32;&#32;&#32;*isGenerated&#32;=&#32;attr-&gt;getGeneratedDeclaration();
08388 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;1;
08389 &#32;&#32;}
08390 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
08391 }
</programlisting><para>
References <link linkend="__c_index_8cpp_source_1l05934">clang_isDeclaration()</link>, <link linkend="__c_x_string_8cpp_source_1l00067">clang::cxstring::createDup()</link>, and <link linkend="__c_x_cursor_8cpp_source_1l01101">clang::cxcursor::getCursorDecl()</link>.</para>
    </section><anchor xml:id="__c_index_8cpp_1a0d254aedfcfc4b673c697a6f20b294af"/>    <section>
    <title>clang_Cursor_isFunctionInlined()</title>
<indexterm><primary>clang_Cursor_isFunctionInlined</primary><secondary>CIndex.cpp</secondary></indexterm>
<indexterm><primary>CIndex.cpp</primary><secondary>clang_Cursor_isFunctionInlined</secondary></indexterm>
<para><computeroutput>unsigned clang_Cursor_isFunctionInlined (CXCursor C)</computeroutput></para><para>
Definition at line <link linkend="__c_index_8cpp_source_1l03844">3844</link> of file <link linkend="__c_index_8cpp_source">CIndex.cpp</link>.</para>
<programlisting>03844 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
03845 &#32;&#32;<emphasis role="keyword">const</emphasis>&#32;Decl&#32;*D&#32;=&#32;<link linkend="_namespaceclang_1_1cxcursor_1a1f702246831c96afd990e457613dc642">getCursorDecl</link>(C);
03846 &#32;&#32;<emphasis role="keyword">const</emphasis>&#32;FunctionDecl&#32;*FD&#32;=&#32;dyn_cast_or_null&lt;FunctionDecl&gt;(D);
03847 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!FD)&#32;{
03848 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
03849 &#32;&#32;}
03850 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;FD-&gt;isInlined();
03851 }
</programlisting><para>
References <link linkend="__c_x_cursor_8cpp_source_1l01101">clang::cxcursor::getCursorDecl()</link>.</para>
    </section><anchor xml:id="__c_index_8cpp_1aa87fa24bae2366008033005d52645e57"/>    <section>
    <title>clang_Cursor_isMacroBuiltin()</title>
<indexterm><primary>clang_Cursor_isMacroBuiltin</primary><secondary>CIndex.cpp</secondary></indexterm>
<indexterm><primary>CIndex.cpp</primary><secondary>clang_Cursor_isMacroBuiltin</secondary></indexterm>
<para><computeroutput>unsigned clang_Cursor_isMacroBuiltin (CXCursor C)</computeroutput></para><para>
Definition at line <link linkend="__c_index_8cpp_source_1l03832">3832</link> of file <link linkend="__c_index_8cpp_source">CIndex.cpp</link>.</para>
<programlisting>03832 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
03833 &#32;&#32;<emphasis role="keyword">const</emphasis>&#32;IdentifierInfo&#32;*II&#32;=&#32;getMacroIdentifier(C);
03834 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!II)&#32;{
03835 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
03836 &#32;&#32;}
03837 &#32;&#32;ASTUnit&#32;*ASTU&#32;=&#32;<link linkend="_namespaceclang_1_1cxcursor_1a68c106f7bebde4f72b0fe7f6f67e8f29">getCursorASTUnit</link>(C);
03838 &#32;&#32;Preprocessor&#32;&amp;PP&#32;=&#32;ASTU-&gt;getPreprocessor();
03839 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;MacroInfo&#32;*MI&#32;=&#32;PP.getMacroInfo(II))
03840 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;MI-&gt;isBuiltinMacro();
03841 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
03842 }
</programlisting>    </section><anchor xml:id="__c_index_8cpp_1a1b3a4946c65f34996299af537fc263ae"/>    <section>
    <title>clang_Cursor_isMacroFunctionLike()</title>
<indexterm><primary>clang_Cursor_isMacroFunctionLike</primary><secondary>CIndex.cpp</secondary></indexterm>
<indexterm><primary>CIndex.cpp</primary><secondary>clang_Cursor_isMacroFunctionLike</secondary></indexterm>
<para><computeroutput>unsigned clang_Cursor_isMacroFunctionLike (CXCursor C)</computeroutput></para><para>
Definition at line <link linkend="__c_index_8cpp_source_1l03820">3820</link> of file <link linkend="__c_index_8cpp_source">CIndex.cpp</link>.</para>
<programlisting>03820 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
03821 &#32;&#32;<emphasis role="keyword">const</emphasis>&#32;IdentifierInfo&#32;*II&#32;=&#32;getMacroIdentifier(C);
03822 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!II)&#32;{
03823 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
03824 &#32;&#32;}
03825 &#32;&#32;ASTUnit&#32;*ASTU&#32;=&#32;<link linkend="_namespaceclang_1_1cxcursor_1a68c106f7bebde4f72b0fe7f6f67e8f29">getCursorASTUnit</link>(C);
03826 &#32;&#32;Preprocessor&#32;&amp;PP&#32;=&#32;ASTU-&gt;getPreprocessor();
03827 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;MacroInfo&#32;*MI&#32;=&#32;PP.getMacroInfo(II))
03828 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;MI-&gt;isFunctionLike();
03829 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
03830 }
</programlisting>    </section><anchor xml:id="__c_index_8cpp_1aa6b6ec13289e2906dab7a7e5974571cf"/>    <section>
    <title>clang_Cursor_isObjCOptional()</title>
<indexterm><primary>clang_Cursor_isObjCOptional</primary><secondary>CIndex.cpp</secondary></indexterm>
<indexterm><primary>CIndex.cpp</primary><secondary>clang_Cursor_isObjCOptional</secondary></indexterm>
<para><computeroutput>unsigned clang_Cursor_isObjCOptional (CXCursor C)</computeroutput></para><para>
Definition at line <link linkend="__c_index_8cpp_source_1l08347">8347</link> of file <link linkend="__c_index_8cpp_source">CIndex.cpp</link>.</para>
<programlisting>08347 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
08348 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!<link linkend="__c_index_8cpp_1a5d47db8f608ae0c266d6551875d46b80">clang_isDeclaration</link>(C.kind))
08349 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
08350 
08351 &#32;&#32;<emphasis role="keyword">const</emphasis>&#32;Decl&#32;*D&#32;=&#32;<link linkend="_namespaceclang_1_1cxcursor_1a1f702246831c96afd990e457613dc642">getCursorDecl</link>(C);
08352 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;ObjCPropertyDecl&#32;*PD&#32;=&#32;dyn_cast&lt;ObjCPropertyDecl&gt;(D))
08353 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;PD-&gt;getPropertyImplementation()&#32;==&#32;ObjCPropertyDecl::Optional;
08354 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;ObjCMethodDecl&#32;*MD&#32;=&#32;dyn_cast&lt;ObjCMethodDecl&gt;(D))
08355 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;MD-&gt;getImplementationControl()&#32;==&#32;ObjCMethodDecl::Optional;
08356 
08357 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
08358 }
</programlisting><para>
References <link linkend="__c_index_8cpp_source_1l05934">clang_isDeclaration()</link>, and <link linkend="__c_x_cursor_8cpp_source_1l01101">clang::cxcursor::getCursorDecl()</link>.</para>
    </section><anchor xml:id="__c_index_8cpp_1a4c88f18c5be15491fbd88b1cacbf5fbf"/>    <section>
    <title>clang_Cursor_isVariadic()</title>
<indexterm><primary>clang_Cursor_isVariadic</primary><secondary>CIndex.cpp</secondary></indexterm>
<indexterm><primary>CIndex.cpp</primary><secondary>clang_Cursor_isVariadic</secondary></indexterm>
<para><computeroutput>unsigned clang_Cursor_isVariadic (CXCursor C)</computeroutput></para><para>
Definition at line <link linkend="__c_index_8cpp_source_1l08360">8360</link> of file <link linkend="__c_index_8cpp_source">CIndex.cpp</link>.</para>
<programlisting>08360 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
08361 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!<link linkend="__c_index_8cpp_1a5d47db8f608ae0c266d6551875d46b80">clang_isDeclaration</link>(C.kind))
08362 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
08363 
08364 &#32;&#32;<emphasis role="keyword">const</emphasis>&#32;Decl&#32;*D&#32;=&#32;<link linkend="_namespaceclang_1_1cxcursor_1a1f702246831c96afd990e457613dc642">getCursorDecl</link>(C);
08365 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;FunctionDecl&#32;*FD&#32;=&#32;dyn_cast&lt;FunctionDecl&gt;(D))
08366 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;FD-&gt;isVariadic();
08367 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;ObjCMethodDecl&#32;*MD&#32;=&#32;dyn_cast&lt;ObjCMethodDecl&gt;(D))
08368 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;MD-&gt;isVariadic();
08369 
08370 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
08371 }
</programlisting><para>
References <link linkend="__c_index_8cpp_source_1l05934">clang_isDeclaration()</link>, and <link linkend="__c_x_cursor_8cpp_source_1l01101">clang::cxcursor::getCursorDecl()</link>.</para>
    </section><anchor xml:id="__c_index_8cpp_1a314f8348e1eb2def5b9e88eb8766f4ea"/>    <section>
    <title>clang_CXIndex_getGlobalOptions()</title>
<indexterm><primary>clang_CXIndex_getGlobalOptions</primary><secondary>CIndex.cpp</secondary></indexterm>
<indexterm><primary>CIndex.cpp</primary><secondary>clang_CXIndex_getGlobalOptions</secondary></indexterm>
<para><computeroutput>unsigned clang_CXIndex_getGlobalOptions (CXIndex CIdx)</computeroutput></para><para>
Definition at line <link linkend="__c_index_8cpp_source_1l03481">3481</link> of file <link linkend="__c_index_8cpp_source">CIndex.cpp</link>.</para>
<programlisting>03481 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
03482 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(CIdx)
03483 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">static_cast&lt;</emphasis><link linkend="_classclang_1_1_c_indexer">CIndexer</link>&#32;*<emphasis role="keyword">&gt;</emphasis>(CIdx)-&gt;getCXGlobalOptFlags();
03484 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
03485 }
</programlisting>    </section><anchor xml:id="__c_index_8cpp_1aaeea40424d1a6168c98f76021b71f9b6"/>    <section>
    <title>clang_CXIndex_setGlobalOptions()</title>
<indexterm><primary>clang_CXIndex_setGlobalOptions</primary><secondary>CIndex.cpp</secondary></indexterm>
<indexterm><primary>CIndex.cpp</primary><secondary>clang_CXIndex_setGlobalOptions</secondary></indexterm>
<para><computeroutput>void clang_CXIndex_setGlobalOptions (CXIndex CIdx, unsigned options)</computeroutput></para><para>
Definition at line <link linkend="__c_index_8cpp_source_1l03476">3476</link> of file <link linkend="__c_index_8cpp_source">CIndex.cpp</link>.</para>
<programlisting>03476 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
03477 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(CIdx)
03478 &#32;&#32;&#32;&#32;<emphasis role="keyword">static_cast&lt;</emphasis><link linkend="_classclang_1_1_c_indexer">CIndexer</link>&#32;*<emphasis role="keyword">&gt;</emphasis>(CIdx)-&gt;setCXGlobalOptFlags(<link linkend="_namespaceoptions">options</link>);
03479 }
</programlisting>    </section><anchor xml:id="__c_index_8cpp_1a97a15ecfe8f0c017cbcc5c45f558123c"/>    <section>
    <title>clang_CXIndex_setInvocationEmissionPathOption()</title>
<indexterm><primary>clang_CXIndex_setInvocationEmissionPathOption</primary><secondary>CIndex.cpp</secondary></indexterm>
<indexterm><primary>CIndex.cpp</primary><secondary>clang_CXIndex_setInvocationEmissionPathOption</secondary></indexterm>
<para><computeroutput>void clang_CXIndex_setInvocationEmissionPathOption (CXIndex CIdx, const char * Path)</computeroutput></para><para>
Definition at line <link linkend="__c_index_8cpp_source_1l03487">3487</link> of file <link linkend="__c_index_8cpp_source">CIndex.cpp</link>.</para>
<programlisting>03488 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
03489 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(CIdx)
03490 &#32;&#32;&#32;&#32;<emphasis role="keyword">static_cast&lt;</emphasis><link linkend="_classclang_1_1_c_indexer">CIndexer</link>&#32;*<emphasis role="keyword">&gt;</emphasis>(CIdx)-&gt;setInvocationEmissionPath(Path&#32;?&#32;Path&#32;:&#32;<emphasis role="stringliteral">&quot;&quot;</emphasis>);
03491 }
</programlisting><para>
Referenced by <link linkend="_c-index-test_8c_source_1l02012">perform_test_load_source()</link>.</para>
    </section><anchor xml:id="__c_index_8cpp_1acc53a751c76070406bc1a0d40a507416"/>    <section>
    <title>clang_CXXConstructor_isConvertingConstructor()</title>
<indexterm><primary>clang_CXXConstructor_isConvertingConstructor</primary><secondary>CIndex.cpp</secondary></indexterm>
<indexterm><primary>CIndex.cpp</primary><secondary>clang_CXXConstructor_isConvertingConstructor</secondary></indexterm>
<para><computeroutput>unsigned clang_CXXConstructor_isConvertingConstructor (CXCursor C)</computeroutput></para><para>
Definition at line <link linkend="__c_index_8cpp_source_1l08569">8569</link> of file <link linkend="__c_index_8cpp_source">CIndex.cpp</link>.</para>
<programlisting>08569 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
08570 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!<link linkend="__c_index_8cpp_1a5d47db8f608ae0c266d6551875d46b80">clang_isDeclaration</link>(C.kind))
08571 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
08572 
08573 &#32;&#32;<emphasis role="keyword">const</emphasis>&#32;Decl&#32;*D&#32;=&#32;<link linkend="_namespaceclang_1_1cxcursor_1a1f702246831c96afd990e457613dc642">cxcursor::getCursorDecl</link>(C);
08574 &#32;&#32;<emphasis role="keyword">const</emphasis>&#32;CXXConstructorDecl&#32;*Constructor&#32;=
08575 &#32;&#32;&#32;&#32;&#32;&#32;D&#32;?&#32;dyn_cast_or_null&lt;CXXConstructorDecl&gt;(D-&gt;getAsFunction())&#32;:&#32;nullptr;
08576 &#32;&#32;<emphasis role="comment">//&#32;Passing&#32;&apos;false&apos;&#32;excludes&#32;constructors&#32;marked&#32;&apos;explicit&apos;.</emphasis>
08577 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(Constructor&#32;&amp;&amp;&#32;Constructor-&gt;isConvertingConstructor(<emphasis role="keyword">false</emphasis>))&#32;?&#32;1&#32;:&#32;0;
08578 }
</programlisting><para>
References <link linkend="__c_index_8cpp_source_1l05934">clang_isDeclaration()</link>, and <link linkend="__c_x_cursor_8cpp_source_1l01101">clang::cxcursor::getCursorDecl()</link>.</para>
    </section><anchor xml:id="__c_index_8cpp_1a2c261341a67f895a0eb5d6f4c70763d1"/>    <section>
    <title>clang_CXXConstructor_isCopyConstructor()</title>
<indexterm><primary>clang_CXXConstructor_isCopyConstructor</primary><secondary>CIndex.cpp</secondary></indexterm>
<indexterm><primary>CIndex.cpp</primary><secondary>clang_CXXConstructor_isCopyConstructor</secondary></indexterm>
<para><computeroutput>unsigned clang_CXXConstructor_isCopyConstructor (CXCursor C)</computeroutput></para><para>
Definition at line <link linkend="__c_index_8cpp_source_1l08549">8549</link> of file <link linkend="__c_index_8cpp_source">CIndex.cpp</link>.</para>
<programlisting>08549 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
08550 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!<link linkend="__c_index_8cpp_1a5d47db8f608ae0c266d6551875d46b80">clang_isDeclaration</link>(C.kind))
08551 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
08552 
08553 &#32;&#32;<emphasis role="keyword">const</emphasis>&#32;Decl&#32;*D&#32;=&#32;<link linkend="_namespaceclang_1_1cxcursor_1a1f702246831c96afd990e457613dc642">cxcursor::getCursorDecl</link>(C);
08554 &#32;&#32;<emphasis role="keyword">const</emphasis>&#32;CXXConstructorDecl&#32;*Constructor&#32;=
08555 &#32;&#32;&#32;&#32;&#32;&#32;D&#32;?&#32;dyn_cast_or_null&lt;CXXConstructorDecl&gt;(D-&gt;getAsFunction())&#32;:&#32;nullptr;
08556 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(Constructor&#32;&amp;&amp;&#32;Constructor-&gt;isCopyConstructor())&#32;?&#32;1&#32;:&#32;0;
08557 }
</programlisting><para>
References <link linkend="__c_index_8cpp_source_1l05934">clang_isDeclaration()</link>, and <link linkend="__c_x_cursor_8cpp_source_1l01101">clang::cxcursor::getCursorDecl()</link>.</para>
    </section><anchor xml:id="__c_index_8cpp_1ac6857426b17cddb66fdc5dc421bd5563"/>    <section>
    <title>clang_CXXConstructor_isDefaultConstructor()</title>
<indexterm><primary>clang_CXXConstructor_isDefaultConstructor</primary><secondary>CIndex.cpp</secondary></indexterm>
<indexterm><primary>CIndex.cpp</primary><secondary>clang_CXXConstructor_isDefaultConstructor</secondary></indexterm>
<para><computeroutput>unsigned clang_CXXConstructor_isDefaultConstructor (CXCursor C)</computeroutput></para><para>
Definition at line <link linkend="__c_index_8cpp_source_1l08539">8539</link> of file <link linkend="__c_index_8cpp_source">CIndex.cpp</link>.</para>
<programlisting>08539 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
08540 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!<link linkend="__c_index_8cpp_1a5d47db8f608ae0c266d6551875d46b80">clang_isDeclaration</link>(C.kind))
08541 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
08542 
08543 &#32;&#32;<emphasis role="keyword">const</emphasis>&#32;Decl&#32;*D&#32;=&#32;<link linkend="_namespaceclang_1_1cxcursor_1a1f702246831c96afd990e457613dc642">cxcursor::getCursorDecl</link>(C);
08544 &#32;&#32;<emphasis role="keyword">const</emphasis>&#32;CXXConstructorDecl&#32;*Constructor&#32;=
08545 &#32;&#32;&#32;&#32;&#32;&#32;D&#32;?&#32;dyn_cast_or_null&lt;CXXConstructorDecl&gt;(D-&gt;getAsFunction())&#32;:&#32;nullptr;
08546 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(Constructor&#32;&amp;&amp;&#32;Constructor-&gt;isDefaultConstructor())&#32;?&#32;1&#32;:&#32;0;
08547 }
</programlisting><para>
References <link linkend="__c_index_8cpp_source_1l05934">clang_isDeclaration()</link>, and <link linkend="__c_x_cursor_8cpp_source_1l01101">clang::cxcursor::getCursorDecl()</link>.</para>
    </section><anchor xml:id="__c_index_8cpp_1a3146967757d3544807a15b3a4f968aa9"/>    <section>
    <title>clang_CXXConstructor_isMoveConstructor()</title>
<indexterm><primary>clang_CXXConstructor_isMoveConstructor</primary><secondary>CIndex.cpp</secondary></indexterm>
<indexterm><primary>CIndex.cpp</primary><secondary>clang_CXXConstructor_isMoveConstructor</secondary></indexterm>
<para><computeroutput>unsigned clang_CXXConstructor_isMoveConstructor (CXCursor C)</computeroutput></para><para>
Definition at line <link linkend="__c_index_8cpp_source_1l08559">8559</link> of file <link linkend="__c_index_8cpp_source">CIndex.cpp</link>.</para>
<programlisting>08559 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
08560 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!<link linkend="__c_index_8cpp_1a5d47db8f608ae0c266d6551875d46b80">clang_isDeclaration</link>(C.kind))
08561 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
08562 
08563 &#32;&#32;<emphasis role="keyword">const</emphasis>&#32;Decl&#32;*D&#32;=&#32;<link linkend="_namespaceclang_1_1cxcursor_1a1f702246831c96afd990e457613dc642">cxcursor::getCursorDecl</link>(C);
08564 &#32;&#32;<emphasis role="keyword">const</emphasis>&#32;CXXConstructorDecl&#32;*Constructor&#32;=
08565 &#32;&#32;&#32;&#32;&#32;&#32;D&#32;?&#32;dyn_cast_or_null&lt;CXXConstructorDecl&gt;(D-&gt;getAsFunction())&#32;:&#32;nullptr;
08566 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(Constructor&#32;&amp;&amp;&#32;Constructor-&gt;isMoveConstructor())&#32;?&#32;1&#32;:&#32;0;
08567 }
</programlisting><para>
References <link linkend="__c_index_8cpp_source_1l05934">clang_isDeclaration()</link>, and <link linkend="__c_x_cursor_8cpp_source_1l01101">clang::cxcursor::getCursorDecl()</link>.</para>
    </section><anchor xml:id="__c_index_8cpp_1a9a284a8ec63f5e851daa500037e3c621"/>    <section>
    <title>clang_CXXField_isMutable()</title>
<indexterm><primary>clang_CXXField_isMutable</primary><secondary>CIndex.cpp</secondary></indexterm>
<indexterm><primary>CIndex.cpp</primary><secondary>clang_CXXField_isMutable</secondary></indexterm>
<para><computeroutput>unsigned clang_CXXField_isMutable (CXCursor C)</computeroutput></para><para>
Definition at line <link linkend="__c_index_8cpp_source_1l08580">8580</link> of file <link linkend="__c_index_8cpp_source">CIndex.cpp</link>.</para>
<programlisting>08580 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
08581 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!<link linkend="__c_index_8cpp_1a5d47db8f608ae0c266d6551875d46b80">clang_isDeclaration</link>(C.kind))
08582 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
08583 
08584 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;D&#32;=&#32;<link linkend="_namespaceclang_1_1cxcursor_1a1f702246831c96afd990e457613dc642">cxcursor::getCursorDecl</link>(C))
08585 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;FD&#32;=&#32;dyn_cast_or_null&lt;FieldDecl&gt;(D))
08586 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;FD-&gt;isMutable()&#32;?&#32;1&#32;:&#32;0;
08587 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
08588 }
</programlisting><para>
References <link linkend="__c_index_8cpp_source_1l05934">clang_isDeclaration()</link>, and <link linkend="__c_x_cursor_8cpp_source_1l01101">clang::cxcursor::getCursorDecl()</link>.</para>
    </section><anchor xml:id="__c_index_8cpp_1a700b1fa88b7879f9cd9298b076f9fdfe"/>    <section>
    <title>clang_CXXMethod_isConst()</title>
<indexterm><primary>clang_CXXMethod_isConst</primary><secondary>CIndex.cpp</secondary></indexterm>
<indexterm><primary>CIndex.cpp</primary><secondary>clang_CXXMethod_isConst</secondary></indexterm>
<para><computeroutput>unsigned clang_CXXMethod_isConst (CXCursor C)</computeroutput></para><para>
Definition at line <link linkend="__c_index_8cpp_source_1l08600">8600</link> of file <link linkend="__c_index_8cpp_source">CIndex.cpp</link>.</para>
<programlisting>08600 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
08601 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!<link linkend="__c_index_8cpp_1a5d47db8f608ae0c266d6551875d46b80">clang_isDeclaration</link>(C.kind))
08602 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
08603 
08604 &#32;&#32;<emphasis role="keyword">const</emphasis>&#32;Decl&#32;*D&#32;=&#32;<link linkend="_namespaceclang_1_1cxcursor_1a1f702246831c96afd990e457613dc642">cxcursor::getCursorDecl</link>(C);
08605 &#32;&#32;<emphasis role="keyword">const</emphasis>&#32;CXXMethodDecl&#32;*Method&#32;=
08606 &#32;&#32;&#32;&#32;&#32;&#32;D&#32;?&#32;dyn_cast_or_null&lt;CXXMethodDecl&gt;(D-&gt;getAsFunction())&#32;:&#32;nullptr;
08607 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(Method&#32;&amp;&amp;&#32;Method-&gt;getMethodQualifiers().hasConst())&#32;?&#32;1&#32;:&#32;0;
08608 }
</programlisting><para>
References <link linkend="__c_index_8cpp_source_1l05934">clang_isDeclaration()</link>, and <link linkend="__c_x_cursor_8cpp_source_1l01101">clang::cxcursor::getCursorDecl()</link>.</para>
    </section><anchor xml:id="__c_index_8cpp_1a8d4ee1fcce72ca516515388e6af796d3"/>    <section>
    <title>clang_CXXMethod_isDefaulted()</title>
<indexterm><primary>clang_CXXMethod_isDefaulted</primary><secondary>CIndex.cpp</secondary></indexterm>
<indexterm><primary>CIndex.cpp</primary><secondary>clang_CXXMethod_isDefaulted</secondary></indexterm>
<para><computeroutput>unsigned clang_CXXMethod_isDefaulted (CXCursor C)</computeroutput></para><para>
Definition at line <link linkend="__c_index_8cpp_source_1l08610">8610</link> of file <link linkend="__c_index_8cpp_source">CIndex.cpp</link>.</para>
<programlisting>08610 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
08611 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!<link linkend="__c_index_8cpp_1a5d47db8f608ae0c266d6551875d46b80">clang_isDeclaration</link>(C.kind))
08612 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
08613 
08614 &#32;&#32;<emphasis role="keyword">const</emphasis>&#32;Decl&#32;*D&#32;=&#32;<link linkend="_namespaceclang_1_1cxcursor_1a1f702246831c96afd990e457613dc642">cxcursor::getCursorDecl</link>(C);
08615 &#32;&#32;<emphasis role="keyword">const</emphasis>&#32;CXXMethodDecl&#32;*Method&#32;=
08616 &#32;&#32;&#32;&#32;&#32;&#32;D&#32;?&#32;dyn_cast_or_null&lt;CXXMethodDecl&gt;(D-&gt;getAsFunction())&#32;:&#32;nullptr;
08617 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(Method&#32;&amp;&amp;&#32;Method-&gt;isDefaulted())&#32;?&#32;1&#32;:&#32;0;
08618 }
</programlisting><para>
References <link linkend="__c_index_8cpp_source_1l05934">clang_isDeclaration()</link>, and <link linkend="__c_x_cursor_8cpp_source_1l01101">clang::cxcursor::getCursorDecl()</link>.</para>
    </section><anchor xml:id="__c_index_8cpp_1acb254e52b46647500e12d187d0f71e53"/>    <section>
    <title>clang_CXXMethod_isPureVirtual()</title>
<indexterm><primary>clang_CXXMethod_isPureVirtual</primary><secondary>CIndex.cpp</secondary></indexterm>
<indexterm><primary>CIndex.cpp</primary><secondary>clang_CXXMethod_isPureVirtual</secondary></indexterm>
<para><computeroutput>unsigned clang_CXXMethod_isPureVirtual (CXCursor C)</computeroutput></para><para>
Definition at line <link linkend="__c_index_8cpp_source_1l08590">8590</link> of file <link linkend="__c_index_8cpp_source">CIndex.cpp</link>.</para>
<programlisting>08590 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
08591 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!<link linkend="__c_index_8cpp_1a5d47db8f608ae0c266d6551875d46b80">clang_isDeclaration</link>(C.kind))
08592 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
08593 
08594 &#32;&#32;<emphasis role="keyword">const</emphasis>&#32;Decl&#32;*D&#32;=&#32;<link linkend="_namespaceclang_1_1cxcursor_1a1f702246831c96afd990e457613dc642">cxcursor::getCursorDecl</link>(C);
08595 &#32;&#32;<emphasis role="keyword">const</emphasis>&#32;CXXMethodDecl&#32;*Method&#32;=
08596 &#32;&#32;&#32;&#32;&#32;&#32;D&#32;?&#32;dyn_cast_or_null&lt;CXXMethodDecl&gt;(D-&gt;getAsFunction())&#32;:&#32;nullptr;
08597 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(Method&#32;&amp;&amp;&#32;Method-&gt;isVirtual()&#32;&amp;&amp;&#32;Method-&gt;isPure())&#32;?&#32;1&#32;:&#32;0;
08598 }
</programlisting><para>
References <link linkend="__c_index_8cpp_source_1l05934">clang_isDeclaration()</link>, and <link linkend="__c_x_cursor_8cpp_source_1l01101">clang::cxcursor::getCursorDecl()</link>.</para>
    </section><anchor xml:id="__c_index_8cpp_1aca00e7b9f952a9bcb9edb9ba99be0c36"/>    <section>
    <title>clang_CXXMethod_isStatic()</title>
<indexterm><primary>clang_CXXMethod_isStatic</primary><secondary>CIndex.cpp</secondary></indexterm>
<indexterm><primary>CIndex.cpp</primary><secondary>clang_CXXMethod_isStatic</secondary></indexterm>
<para><computeroutput>unsigned clang_CXXMethod_isStatic (CXCursor C)</computeroutput></para><para>
Definition at line <link linkend="__c_index_8cpp_source_1l08620">8620</link> of file <link linkend="__c_index_8cpp_source">CIndex.cpp</link>.</para>
<programlisting>08620 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
08621 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!<link linkend="__c_index_8cpp_1a5d47db8f608ae0c266d6551875d46b80">clang_isDeclaration</link>(C.kind))
08622 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
08623 
08624 &#32;&#32;<emphasis role="keyword">const</emphasis>&#32;Decl&#32;*D&#32;=&#32;<link linkend="_namespaceclang_1_1cxcursor_1a1f702246831c96afd990e457613dc642">cxcursor::getCursorDecl</link>(C);
08625 &#32;&#32;<emphasis role="keyword">const</emphasis>&#32;CXXMethodDecl&#32;*Method&#32;=
08626 &#32;&#32;&#32;&#32;&#32;&#32;D&#32;?&#32;dyn_cast_or_null&lt;CXXMethodDecl&gt;(D-&gt;getAsFunction())&#32;:&#32;nullptr;
08627 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(Method&#32;&amp;&amp;&#32;Method-&gt;isStatic())&#32;?&#32;1&#32;:&#32;0;
08628 }
</programlisting><para>
References <link linkend="__c_index_8cpp_source_1l05934">clang_isDeclaration()</link>, and <link linkend="__c_x_cursor_8cpp_source_1l01101">clang::cxcursor::getCursorDecl()</link>.</para>
    </section><anchor xml:id="__c_index_8cpp_1a59f93e621ce7b6a8fd8be167c9a0e353"/>    <section>
    <title>clang_CXXMethod_isVirtual()</title>
<indexterm><primary>clang_CXXMethod_isVirtual</primary><secondary>CIndex.cpp</secondary></indexterm>
<indexterm><primary>CIndex.cpp</primary><secondary>clang_CXXMethod_isVirtual</secondary></indexterm>
<para><computeroutput>unsigned clang_CXXMethod_isVirtual (CXCursor C)</computeroutput></para><para>
Definition at line <link linkend="__c_index_8cpp_source_1l08630">8630</link> of file <link linkend="__c_index_8cpp_source">CIndex.cpp</link>.</para>
<programlisting>08630 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
08631 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!<link linkend="__c_index_8cpp_1a5d47db8f608ae0c266d6551875d46b80">clang_isDeclaration</link>(C.kind))
08632 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
08633 
08634 &#32;&#32;<emphasis role="keyword">const</emphasis>&#32;Decl&#32;*D&#32;=&#32;<link linkend="_namespaceclang_1_1cxcursor_1a1f702246831c96afd990e457613dc642">cxcursor::getCursorDecl</link>(C);
08635 &#32;&#32;<emphasis role="keyword">const</emphasis>&#32;CXXMethodDecl&#32;*Method&#32;=
08636 &#32;&#32;&#32;&#32;&#32;&#32;D&#32;?&#32;dyn_cast_or_null&lt;CXXMethodDecl&gt;(D-&gt;getAsFunction())&#32;:&#32;nullptr;
08637 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(Method&#32;&amp;&amp;&#32;Method-&gt;isVirtual())&#32;?&#32;1&#32;:&#32;0;
08638 }
</programlisting><para>
References <link linkend="__c_index_8cpp_source_1l05934">clang_isDeclaration()</link>, and <link linkend="__c_x_cursor_8cpp_source_1l01101">clang::cxcursor::getCursorDecl()</link>.</para>
    </section><anchor xml:id="__c_index_8cpp_1a7536535cae5849fc4c35143e09755fc4"/>    <section>
    <title>clang_CXXRecord_isAbstract()</title>
<indexterm><primary>clang_CXXRecord_isAbstract</primary><secondary>CIndex.cpp</secondary></indexterm>
<indexterm><primary>CIndex.cpp</primary><secondary>clang_CXXRecord_isAbstract</secondary></indexterm>
<para><computeroutput>unsigned clang_CXXRecord_isAbstract (CXCursor C)</computeroutput></para><para>
Definition at line <link linkend="__c_index_8cpp_source_1l08640">8640</link> of file <link linkend="__c_index_8cpp_source">CIndex.cpp</link>.</para>
<programlisting>08640 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
08641 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!<link linkend="__c_index_8cpp_1a5d47db8f608ae0c266d6551875d46b80">clang_isDeclaration</link>(C.kind))
08642 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
08643 
08644 &#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;*D&#32;=&#32;<link linkend="_namespaceclang_1_1cxcursor_1a1f702246831c96afd990e457613dc642">cxcursor::getCursorDecl</link>(C);
08645 &#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;*RD&#32;=&#32;dyn_cast_or_null&lt;CXXRecordDecl&gt;(D);
08646 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(RD)
08647 &#32;&#32;&#32;&#32;RD&#32;=&#32;RD-&gt;getDefinition();
08648 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(RD&#32;&amp;&amp;&#32;RD-&gt;isAbstract())&#32;?&#32;1&#32;:&#32;0;
08649 }
</programlisting><para>
References <link linkend="__c_index_8cpp_source_1l05934">clang_isDeclaration()</link>, and <link linkend="__c_x_cursor_8cpp_source_1l01101">clang::cxcursor::getCursorDecl()</link>.</para>
    </section><anchor xml:id="__c_index_8cpp_1a9d5c8fae100ea9327d269f44d23da9b3"/>    <section>
    <title>clang_defaultEditingTranslationUnitOptions()</title>
<indexterm><primary>clang_defaultEditingTranslationUnitOptions</primary><secondary>CIndex.cpp</secondary></indexterm>
<indexterm><primary>CIndex.cpp</primary><secondary>clang_defaultEditingTranslationUnitOptions</secondary></indexterm>
<para><computeroutput>unsigned clang_defaultEditingTranslationUnitOptions ( )</computeroutput></para><para>
Definition at line <link linkend="__c_index_8cpp_source_1l03537">3537</link> of file <link linkend="__c_index_8cpp_source">CIndex.cpp</link>.</para>
<programlisting>03537 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
03538 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;CXTranslationUnit_PrecompiledPreamble&#32;|
03539 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;CXTranslationUnit_CacheCompletionResults;
03540 }
</programlisting>    </section><anchor xml:id="__c_index_8cpp_1a2f79bdd29d8f799a3943c6a5254eb789"/>    <section>
    <title>clang_defaultReparseOptions()</title>
<indexterm><primary>clang_defaultReparseOptions</primary><secondary>CIndex.cpp</secondary></indexterm>
<indexterm><primary>CIndex.cpp</primary><secondary>clang_defaultReparseOptions</secondary></indexterm>
<para><computeroutput>unsigned clang_defaultReparseOptions (CXTranslationUnit TU)</computeroutput></para><para>
Definition at line <link linkend="__c_index_8cpp_source_1l04238">4238</link> of file <link linkend="__c_index_8cpp_source">CIndex.cpp</link>.</para>
<programlisting>04238 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
04239 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;CXReparse_None;
04240 }
</programlisting>    </section><anchor xml:id="__c_index_8cpp_1af7f47ec6ccc9f05c092f813102672290"/>    <section>
    <title>clang_defaultSaveOptions()</title>
<indexterm><primary>clang_defaultSaveOptions</primary><secondary>CIndex.cpp</secondary></indexterm>
<indexterm><primary>CIndex.cpp</primary><secondary>clang_defaultSaveOptions</secondary></indexterm>
<para><computeroutput>unsigned clang_defaultSaveOptions (CXTranslationUnit TU)</computeroutput></para><para>
Definition at line <link linkend="__c_index_8cpp_source_1l04144">4144</link> of file <link linkend="__c_index_8cpp_source">CIndex.cpp</link>.</para>
<programlisting>04144 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
04145 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;CXSaveTranslationUnit_None;
04146 }
</programlisting>    </section><anchor xml:id="__c_index_8cpp_1aaa67293732ecceedaed83ec2bac487e7"/>    <section>
    <title>clang_disposeCXPlatformAvailability()</title>
<indexterm><primary>clang_disposeCXPlatformAvailability</primary><secondary>CIndex.cpp</secondary></indexterm>
<indexterm><primary>CIndex.cpp</primary><secondary>clang_disposeCXPlatformAvailability</secondary></indexterm>
<para><computeroutput>void clang_disposeCXPlatformAvailability (CXPlatformAvailability * availability)</computeroutput></para><para>
Definition at line <link linkend="__c_index_8cpp_source_1l08142">8142</link> of file <link linkend="__c_index_8cpp_source">CIndex.cpp</link>.</para>
<programlisting>08142 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
08143 &#32;&#32;<link linkend="__c_x_string_8cpp_1a46c85f1255580ed186aa6f7380a06883">clang_disposeString</link>(availability-&gt;Platform);
08144 &#32;&#32;<link linkend="__c_x_string_8cpp_1a46c85f1255580ed186aa6f7380a06883">clang_disposeString</link>(availability-&gt;Message);
08145 }
</programlisting><para>
References <link linkend="__c_x_string_8cpp_source_1l00170">clang_disposeString()</link>.</para>
    </section><anchor xml:id="__c_index_8cpp_1a3e9a2455e3253920304adc26c1084a6f"/>    <section>
    <title>clang_disposeCXTUResourceUsage()</title>
<indexterm><primary>clang_disposeCXTUResourceUsage</primary><secondary>CIndex.cpp</secondary></indexterm>
<indexterm><primary>CIndex.cpp</primary><secondary>clang_disposeCXTUResourceUsage</secondary></indexterm>
<para><computeroutput>void clang_disposeCXTUResourceUsage (CXTUResourceUsage usage)</computeroutput></para><para>
Definition at line <link linkend="__c_index_8cpp_source_1l08829">8829</link> of file <link linkend="__c_index_8cpp_source">CIndex.cpp</link>.</para>
<programlisting>08829 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
08830 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(usage.data)
08831 &#32;&#32;&#32;&#32;<emphasis role="keyword">delete</emphasis>&#32;(<link linkend="__c_index_8cpp_1a8c5eea8e1522f74827362d4be37f75c8">MemUsageEntries</link>&#32;*)usage.data;
08832 }
</programlisting><para>
Referenced by <link linkend="__c_index_8cpp_source_1l08915">clang::PrintLibclangResourceUsage()</link>, and <link linkend="_c-index-test_8c_source_1l01263">PrintMemoryUsage()</link>.</para>
    </section><anchor xml:id="__c_index_8cpp_1aea91ddf5e996cba0de2f781cb17db1d5"/>    <section>
    <title>clang_disposeIndex()</title>
<indexterm><primary>clang_disposeIndex</primary><secondary>CIndex.cpp</secondary></indexterm>
<indexterm><primary>CIndex.cpp</primary><secondary>clang_disposeIndex</secondary></indexterm>
<para><computeroutput>void clang_disposeIndex (CXIndex CIdx)</computeroutput></para><para>
Definition at line <link linkend="__c_index_8cpp_source_1l03471">3471</link> of file <link linkend="__c_index_8cpp_source">CIndex.cpp</link>.</para>
<programlisting>03471 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
03472 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(CIdx)
03473 &#32;&#32;&#32;&#32;<emphasis role="keyword">delete</emphasis>&#32;<emphasis role="keyword">static_cast&lt;</emphasis><link linkend="_classclang_1_1_c_indexer">CIndexer</link>&#32;*<emphasis role="keyword">&gt;</emphasis>(CIdx);
03474 }
</programlisting>    </section><anchor xml:id="__c_index_8cpp_1acfc7c338d3c08e516bf0773f4fa1180e"/>    <section>
    <title>clang_disposeSourceRangeList()</title>
<indexterm><primary>clang_disposeSourceRangeList</primary><secondary>CIndex.cpp</secondary></indexterm>
<indexterm><primary>CIndex.cpp</primary><secondary>clang_disposeSourceRangeList</secondary></indexterm>
<para><computeroutput>void clang_disposeSourceRangeList (CXSourceRangeList * ranges)</computeroutput></para><para>
Definition at line <link linkend="__c_index_8cpp_source_1l08908">8908</link> of file <link linkend="__c_index_8cpp_source">CIndex.cpp</link>.</para>
<programlisting>08908 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
08909 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(ranges)&#32;{
08910 &#32;&#32;&#32;&#32;<emphasis role="keyword">delete</emphasis>[]&#32;ranges-&gt;ranges;
08911 &#32;&#32;&#32;&#32;<emphasis role="keyword">delete</emphasis>&#32;ranges;
08912 &#32;&#32;}
08913 }
</programlisting>    </section><anchor xml:id="__c_index_8cpp_1a69a3b1b393fd8cd3cf50802b2a5b08af"/>    <section>
    <title>clang_disposeTokens()</title>
<indexterm><primary>clang_disposeTokens</primary><secondary>CIndex.cpp</secondary></indexterm>
<indexterm><primary>CIndex.cpp</primary><secondary>clang_disposeTokens</secondary></indexterm>
<para><computeroutput>void clang_disposeTokens (CXTranslationUnit TU, CXToken * Tokens, unsigned NumTokens)</computeroutput></para><para>
Definition at line <link linkend="__c_index_8cpp_source_1l07022">7022</link> of file <link linkend="__c_index_8cpp_source">CIndex.cpp</link>.</para>
<programlisting>07023 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
07024 &#32;&#32;free(Tokens);
07025 }
</programlisting>    </section><anchor xml:id="__c_index_8cpp_1a3af88c13004a1954abd6dc956faff3be"/>    <section>
    <title>clang_disposeTranslationUnit()</title>
<indexterm><primary>clang_disposeTranslationUnit</primary><secondary>CIndex.cpp</secondary></indexterm>
<indexterm><primary>CIndex.cpp</primary><secondary>clang_disposeTranslationUnit</secondary></indexterm>
<para><computeroutput>void clang_disposeTranslationUnit (CXTranslationUnit CTUnit)</computeroutput></para><para>
Definition at line <link linkend="__c_index_8cpp_source_1l04207">4207</link> of file <link linkend="__c_index_8cpp_source">CIndex.cpp</link>.</para>
<programlisting>04207 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
04208 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(CTUnit)&#32;{
04209 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;If&#32;the&#32;translation&#32;unit&#32;has&#32;been&#32;marked&#32;as&#32;unsafe&#32;to&#32;free,&#32;just&#32;discard</emphasis>
04210 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;it.</emphasis>
04211 &#32;&#32;&#32;&#32;ASTUnit&#32;*Unit&#32;=&#32;cxtu::getASTUnit(CTUnit);
04212 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(Unit&#32;&amp;&amp;&#32;Unit-&gt;isUnsafeToFree())
04213 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
04214 
04215 &#32;&#32;&#32;&#32;<emphasis role="keyword">delete</emphasis>&#32;cxtu::getASTUnit(CTUnit);
04216 &#32;&#32;&#32;&#32;<emphasis role="keyword">delete</emphasis>&#32;CTUnit-&gt;StringPool;
04217 &#32;&#32;&#32;&#32;<emphasis role="keyword">delete</emphasis>&#32;<emphasis role="keyword">static_cast&lt;</emphasis><link linkend="_classclang_1_1_c_x_diagnostic_set_impl">CXDiagnosticSetImpl</link>&#32;*<emphasis role="keyword">&gt;</emphasis>(CTUnit-&gt;Diagnostics);
04218 &#32;&#32;&#32;&#32;<link linkend="_namespaceclang_1_1cxcursor_1a3e9eef17e1ba69991801fcfcfc8a0d9e">disposeOverridenCXCursorsPool</link>(CTUnit-&gt;OverridenCursorsPool);
04219 &#32;&#32;&#32;&#32;<emphasis role="keyword">delete</emphasis>&#32;CTUnit-&gt;CommentToXML;
04220 &#32;&#32;&#32;&#32;<emphasis role="keyword">delete</emphasis>&#32;CTUnit;
04221 &#32;&#32;}
04222 }
</programlisting><para>
References <link linkend="__c_x_cursor_8cpp_source_1l01569">clang::cxcursor::disposeOverridenCXCursorsPool()</link>.</para>
<para>
Referenced by <link linkend="__c_index_8cpp_source_1l00102">clang::cxtu::CXTUOwner::~CXTUOwner()</link>.</para>
    </section><anchor xml:id="__c_index_8cpp_1a459c002cff4b09901ca37e1ad44d3df3"/>    <section>
    <title>clang_enableStackTraces()</title>
<indexterm><primary>clang_enableStackTraces</primary><secondary>CIndex.cpp</secondary></indexterm>
<indexterm><primary>CIndex.cpp</primary><secondary>clang_enableStackTraces</secondary></indexterm>
<para><computeroutput>void clang_enableStackTraces (void )</computeroutput></para><para>
Definition at line <link linkend="__c_index_8cpp_source_1l06781">6781</link> of file <link linkend="__c_index_8cpp_source">CIndex.cpp</link>.</para>
<programlisting>06781 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
06782 &#32;&#32;<emphasis role="comment">//&#32;FIXME:&#32;Provide&#32;an&#32;argv0&#32;here&#32;so&#32;we&#32;can&#32;find&#32;llvm-symbolizer.</emphasis>
06783 &#32;&#32;llvm::sys::PrintStackTraceOnErrorSignal(StringRef());
06784 }
</programlisting><para>
Referenced by <link linkend="_c-arcmt-test_8c_source_1l00074">carcmttest_main()</link>, and <link linkend="_c-index-test_8c_source_1l04861">cindextest_main()</link>.</para>
    </section><anchor xml:id="__c_index_8cpp_1a2b44e1c44b0977a639e424c1c775bb80"/>    <section>
    <title>clang_EnumDecl_isScoped()</title>
<indexterm><primary>clang_EnumDecl_isScoped</primary><secondary>CIndex.cpp</secondary></indexterm>
<indexterm><primary>CIndex.cpp</primary><secondary>clang_EnumDecl_isScoped</secondary></indexterm>
<para><computeroutput>unsigned clang_EnumDecl_isScoped (CXCursor C)</computeroutput></para><para>
Definition at line <link linkend="__c_index_8cpp_source_1l08651">8651</link> of file <link linkend="__c_index_8cpp_source">CIndex.cpp</link>.</para>
<programlisting>08651 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
08652 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!<link linkend="__c_index_8cpp_1a5d47db8f608ae0c266d6551875d46b80">clang_isDeclaration</link>(C.kind))
08653 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
08654 
08655 &#32;&#32;<emphasis role="keyword">const</emphasis>&#32;Decl&#32;*D&#32;=&#32;<link linkend="_namespaceclang_1_1cxcursor_1a1f702246831c96afd990e457613dc642">cxcursor::getCursorDecl</link>(C);
08656 &#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;*Enum&#32;=&#32;dyn_cast_or_null&lt;EnumDecl&gt;(D);
08657 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(Enum&#32;&amp;&amp;&#32;Enum-&gt;isScoped())&#32;?&#32;1&#32;:&#32;0;
08658 }
</programlisting><para>
References <link linkend="__c_index_8cpp_source_1l05934">clang_isDeclaration()</link>, and <link linkend="__c_x_cursor_8cpp_source_1l01101">clang::cxcursor::getCursorDecl()</link>.</para>
    </section><anchor xml:id="__c_index_8cpp_1a96d5f0059613428736715de616ed38f9"/>    <section>
    <title>clang_equalCursors()</title>
<indexterm><primary>clang_equalCursors</primary><secondary>CIndex.cpp</secondary></indexterm>
<indexterm><primary>CIndex.cpp</primary><secondary>clang_equalCursors</secondary></indexterm>
<para><computeroutput>unsigned clang_equalCursors (CXCursor X, CXCursor Y)</computeroutput></para><para>
Definition at line <link linkend="__c_index_8cpp_source_1l05905">5905</link> of file <link linkend="__c_index_8cpp_source">CIndex.cpp</link>.</para>
<programlisting>05905 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
05906 &#32;&#32;<emphasis role="comment">//&#32;Clear&#32;out&#32;the&#32;&quot;FirstInDeclGroup&quot;&#32;part&#32;in&#32;a&#32;declaration&#32;cursor,&#32;since&#32;we</emphasis>
05907 &#32;&#32;<emphasis role="comment">//&#32;can&apos;t&#32;set&#32;consistently.&#32;For&#32;example,&#32;when&#32;visiting&#32;a&#32;DeclStmt&#32;we&#32;will&#32;set</emphasis>
05908 &#32;&#32;<emphasis role="comment">//&#32;it&#32;but&#32;we&#32;don&apos;t&#32;set&#32;it&#32;on&#32;the&#32;result&#32;of&#32;clang_getCursorDefinition&#32;for</emphasis>
05909 &#32;&#32;<emphasis role="comment">//&#32;a&#32;reference&#32;of&#32;the&#32;same&#32;declaration.</emphasis>
05910 &#32;&#32;<emphasis role="comment">//&#32;FIXME:&#32;Setting&#32;&quot;FirstInDeclGroup&quot;&#32;in&#32;CXCursors&#32;is&#32;a&#32;hack&#32;that&#32;only&#32;works</emphasis>
05911 &#32;&#32;<emphasis role="comment">//&#32;when&#32;visiting&#32;a&#32;DeclStmt&#32;currently,&#32;the&#32;AST&#32;should&#32;be&#32;enhanced&#32;to&#32;be&#32;able</emphasis>
05912 &#32;&#32;<emphasis role="comment">//&#32;to&#32;provide&#32;that&#32;kind&#32;of&#32;info.</emphasis>
05913 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="__c_index_8cpp_1a5d47db8f608ae0c266d6551875d46b80">clang_isDeclaration</link>(X.kind))
05914 &#32;&#32;&#32;&#32;X.data[1]&#32;=&#32;<emphasis role="keyword">nullptr</emphasis>;
05915 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="__c_index_8cpp_1a5d47db8f608ae0c266d6551875d46b80">clang_isDeclaration</link>(Y.kind))
05916 &#32;&#32;&#32;&#32;Y.data[1]&#32;=&#32;<emphasis role="keyword">nullptr</emphasis>;
05917 
05918 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;X&#32;==&#32;Y;
05919 }
</programlisting><para>
References <link linkend="__c_index_8cpp_source_1l05934">clang_isDeclaration()</link>.</para>
<para>
Referenced by <link linkend="__c_x_cursor_8cpp_source_1l01253">clang_Cursor_isNull()</link>.</para>
    </section><anchor xml:id="__c_index_8cpp_1ae2f762d99b78b192138f9afd8773e82e"/>    <section>
    <title>clang_EvalResult_dispose()</title>
<indexterm><primary>clang_EvalResult_dispose</primary><secondary>CIndex.cpp</secondary></indexterm>
<indexterm><primary>CIndex.cpp</primary><secondary>clang_EvalResult_dispose</secondary></indexterm>
<para><computeroutput>void clang_EvalResult_dispose (CXEvalResult E)</computeroutput></para><para>
Definition at line <link linkend="__c_index_8cpp_source_1l03894">3894</link> of file <link linkend="__c_index_8cpp_source">CIndex.cpp</link>.</para>
<programlisting>03894 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
03895 &#32;&#32;<emphasis role="keyword">delete</emphasis>&#32;<emphasis role="keyword">static_cast&lt;</emphasis><link linkend="_struct_expr_eval_result">ExprEvalResult</link>&#32;*<emphasis role="keyword">&gt;</emphasis>(E);
03896 }
</programlisting>    </section><anchor xml:id="__c_index_8cpp_1ac04603c779fdaaa0beaab0db8b3acb5d"/>    <section>
    <title>clang_EvalResult_getAsDouble()</title>
<indexterm><primary>clang_EvalResult_getAsDouble</primary><secondary>CIndex.cpp</secondary></indexterm>
<indexterm><primary>CIndex.cpp</primary><secondary>clang_EvalResult_getAsDouble</secondary></indexterm>
<para><computeroutput>double clang_EvalResult_getAsDouble (CXEvalResult E)</computeroutput></para><para>
Definition at line <link linkend="__c_index_8cpp_source_1l03934">3934</link> of file <link linkend="__c_index_8cpp_source">CIndex.cpp</link>.</para>
<programlisting>03934 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
03935 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!E)&#32;{
03936 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
03937 &#32;&#32;}
03938 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;((<link linkend="_struct_expr_eval_result">ExprEvalResult</link>&#32;*)E)-&gt;EvalData.floatVal;
03939 }
</programlisting>    </section><anchor xml:id="__c_index_8cpp_1a47aac07d5d2996189a958eb4140d7a78"/>    <section>
    <title>clang_EvalResult_getAsInt()</title>
<indexterm><primary>clang_EvalResult_getAsInt</primary><secondary>CIndex.cpp</secondary></indexterm>
<indexterm><primary>CIndex.cpp</primary><secondary>clang_EvalResult_getAsInt</secondary></indexterm>
<para><computeroutput>int clang_EvalResult_getAsInt (CXEvalResult E)</computeroutput></para><para>
Definition at line <link linkend="__c_index_8cpp_source_1l03905">3905</link> of file <link linkend="__c_index_8cpp_source">CIndex.cpp</link>.</para>
<programlisting>03905 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
03906 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__c_index_8cpp_1ae4d4de22195dd716156c690b5e7e730e">clang_EvalResult_getAsLongLong</link>(E);
03907 }
</programlisting><para>
References <link linkend="__c_index_8cpp_source_1l03909">clang_EvalResult_getAsLongLong()</link>.</para>
    </section><anchor xml:id="__c_index_8cpp_1ae4d4de22195dd716156c690b5e7e730e"/>    <section>
    <title>clang_EvalResult_getAsLongLong()</title>
<indexterm><primary>clang_EvalResult_getAsLongLong</primary><secondary>CIndex.cpp</secondary></indexterm>
<indexterm><primary>CIndex.cpp</primary><secondary>clang_EvalResult_getAsLongLong</secondary></indexterm>
<para><computeroutput>long long clang_EvalResult_getAsLongLong (CXEvalResult E)</computeroutput></para><para>
Definition at line <link linkend="__c_index_8cpp_source_1l03909">3909</link> of file <link linkend="__c_index_8cpp_source">CIndex.cpp</link>.</para>
<programlisting>03909 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
03910 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!E)&#32;{
03911 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
03912 &#32;&#32;}
03913 &#32;&#32;<link linkend="_struct_expr_eval_result">ExprEvalResult</link>&#32;*Result&#32;=&#32;(<link linkend="_struct_expr_eval_result">ExprEvalResult</link>&#32;*)E;
03914 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(Result-&gt;<link linkend="_struct_expr_eval_result_1a5744b386feb8207d293495ce187ab5ca">IsUnsignedInt</link>)
03915 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;Result-&gt;<link linkend="_struct_expr_eval_result_1a237e2f58375382a3bb3817f48f9917c2">EvalData</link>.<link linkend="_struct_expr_eval_result_1a87a770a677d35e69ce678183c43bae8d">unsignedVal</link>;
03916 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;Result-&gt;<link linkend="_struct_expr_eval_result_1a237e2f58375382a3bb3817f48f9917c2">EvalData</link>.<link linkend="_struct_expr_eval_result_1ab0750e9729f12028852830d69f6d7571">intVal</link>;
03917 }
</programlisting><para>
References <link linkend="_struct_expr_eval_result_1a237e2f58375382a3bb3817f48f9917c2">ExprEvalResult::EvalData</link>, <link linkend="__c_index_8cpp_source_1l03881">ExprEvalResult::intVal</link>, <link linkend="__c_index_8cpp_source_1l03885">ExprEvalResult::IsUnsignedInt</link>, and <link linkend="__c_index_8cpp_source_1l03880">ExprEvalResult::unsignedVal</link>.</para>
<para>
Referenced by <link linkend="__c_index_8cpp_source_1l03905">clang_EvalResult_getAsInt()</link>.</para>
    </section><anchor xml:id="__c_index_8cpp_1ae20bdaa6ecefb7fd9f66cd08e6da1e39"/>    <section>
    <title>clang_EvalResult_getAsStr()</title>
<indexterm><primary>clang_EvalResult_getAsStr</primary><secondary>CIndex.cpp</secondary></indexterm>
<indexterm><primary>CIndex.cpp</primary><secondary>clang_EvalResult_getAsStr</secondary></indexterm>
<para><computeroutput>const char* clang_EvalResult_getAsStr (CXEvalResult E)</computeroutput></para><para>
Definition at line <link linkend="__c_index_8cpp_source_1l03941">3941</link> of file <link linkend="__c_index_8cpp_source">CIndex.cpp</link>.</para>
<programlisting>03941 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
03942 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!E)&#32;{
03943 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">nullptr</emphasis>;
03944 &#32;&#32;}
03945 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;((<link linkend="_struct_expr_eval_result">ExprEvalResult</link>&#32;*)E)-&gt;EvalData.stringVal;
03946 }
</programlisting>    </section><anchor xml:id="__c_index_8cpp_1ada456f56037c9ae23b133bbeedb8edb8"/>    <section>
    <title>clang_EvalResult_getAsUnsigned()</title>
<indexterm><primary>clang_EvalResult_getAsUnsigned</primary><secondary>CIndex.cpp</secondary></indexterm>
<indexterm><primary>CIndex.cpp</primary><secondary>clang_EvalResult_getAsUnsigned</secondary></indexterm>
<para><computeroutput>unsigned long long clang_EvalResult_getAsUnsigned (CXEvalResult E)</computeroutput></para><para>
Definition at line <link linkend="__c_index_8cpp_source_1l03923">3923</link> of file <link linkend="__c_index_8cpp_source">CIndex.cpp</link>.</para>
<programlisting>03923 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
03924 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!E)&#32;{
03925 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
03926 &#32;&#32;}
03927 
03928 &#32;&#32;<link linkend="_struct_expr_eval_result">ExprEvalResult</link>&#32;*Result&#32;=&#32;(<link linkend="_struct_expr_eval_result">ExprEvalResult</link>&#32;*)E;
03929 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(Result-&gt;<link linkend="_struct_expr_eval_result_1a5744b386feb8207d293495ce187ab5ca">IsUnsignedInt</link>)
03930 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;Result-&gt;<link linkend="_struct_expr_eval_result_1a237e2f58375382a3bb3817f48f9917c2">EvalData</link>.<link linkend="_struct_expr_eval_result_1a87a770a677d35e69ce678183c43bae8d">unsignedVal</link>;
03931 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;Result-&gt;<link linkend="_struct_expr_eval_result_1a237e2f58375382a3bb3817f48f9917c2">EvalData</link>.<link linkend="_struct_expr_eval_result_1ab0750e9729f12028852830d69f6d7571">intVal</link>;
03932 }
</programlisting><para>
References <link linkend="_struct_expr_eval_result_1a237e2f58375382a3bb3817f48f9917c2">ExprEvalResult::EvalData</link>, <link linkend="__c_index_8cpp_source_1l03881">ExprEvalResult::intVal</link>, <link linkend="__c_index_8cpp_source_1l03885">ExprEvalResult::IsUnsignedInt</link>, and <link linkend="__c_index_8cpp_source_1l03880">ExprEvalResult::unsignedVal</link>.</para>
    </section><anchor xml:id="__c_index_8cpp_1ab1c0e24a69ad71276e7ce0d7bdf6b0a7"/>    <section>
    <title>clang_EvalResult_getKind()</title>
<indexterm><primary>clang_EvalResult_getKind</primary><secondary>CIndex.cpp</secondary></indexterm>
<indexterm><primary>CIndex.cpp</primary><secondary>clang_EvalResult_getKind</secondary></indexterm>
<para><computeroutput>CXEvalResultKind clang_EvalResult_getKind (CXEvalResult E)</computeroutput></para><para>
Definition at line <link linkend="__c_index_8cpp_source_1l03898">3898</link> of file <link linkend="__c_index_8cpp_source">CIndex.cpp</link>.</para>
<programlisting>03898 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
03899 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!E)&#32;{
03900 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;CXEval_UnExposed;
03901 &#32;&#32;}
03902 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;((<link linkend="_struct_expr_eval_result">ExprEvalResult</link>&#32;*)E)-&gt;EvalType;
03903 }
</programlisting>    </section><anchor xml:id="__c_index_8cpp_1a486e7728d10438206af8edb51eab14d8"/>    <section>
    <title>clang_EvalResult_isUnsignedInt()</title>
<indexterm><primary>clang_EvalResult_isUnsignedInt</primary><secondary>CIndex.cpp</secondary></indexterm>
<indexterm><primary>CIndex.cpp</primary><secondary>clang_EvalResult_isUnsignedInt</secondary></indexterm>
<para><computeroutput>unsigned clang_EvalResult_isUnsignedInt (CXEvalResult E)</computeroutput></para><para>
Definition at line <link linkend="__c_index_8cpp_source_1l03919">3919</link> of file <link linkend="__c_index_8cpp_source">CIndex.cpp</link>.</para>
<programlisting>03919 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
03920 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;((<link linkend="_struct_expr_eval_result">ExprEvalResult</link>&#32;*)E)-&gt;IsUnsignedInt;
03921 }
</programlisting>    </section><anchor xml:id="__c_index_8cpp_1aeb6cae453fe08d2720436c24d4629e8e"/>    <section>
    <title>clang_executeOnThread()</title>
<indexterm><primary>clang_executeOnThread</primary><secondary>CIndex.cpp</secondary></indexterm>
<indexterm><primary>CIndex.cpp</primary><secondary>clang_executeOnThread</secondary></indexterm>
<para><computeroutput>void clang_executeOnThread (void(*)(void *) fn, void * user_data, unsigned stack_size)</computeroutput></para><para>
Definition at line <link linkend="__c_index_8cpp_source_1l06786">6786</link> of file <link linkend="__c_index_8cpp_source">CIndex.cpp</link>.</para>
<programlisting>06787 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
06788 &#32;&#32;llvm::llvm_execute_on_thread(fn,&#32;user_data,
06789 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;stack_size&#32;==&#32;0
06790 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;?&#32;clang::DesiredStackSize
06791 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;llvm::Optional&lt;unsigned&gt;(stack_size));
06792 }
</programlisting>    </section><anchor xml:id="__c_index_8cpp_1afa28197effe920c89059cbfb6020b62d"/>    <section>
    <title>clang_File_isEqual()</title>
<indexterm><primary>clang_File_isEqual</primary><secondary>CIndex.cpp</secondary></indexterm>
<indexterm><primary>CIndex.cpp</primary><secondary>clang_File_isEqual</secondary></indexterm>
<para><computeroutput>int clang_File_isEqual (CXFile file1, CXFile file2)</computeroutput></para><para>
Definition at line <link linkend="__c_index_8cpp_source_1l04458">4458</link> of file <link linkend="__c_index_8cpp_source">CIndex.cpp</link>.</para>
<programlisting>04458 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
04459 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(file1&#32;==&#32;file2)
04460 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
04461 
04462 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!file1&#32;||&#32;!file2)
04463 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
04464 
04465 &#32;&#32;FileEntry&#32;*FEnt1&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis>FileEntry&#32;*<emphasis role="keyword">&gt;</emphasis>(file1);
04466 &#32;&#32;FileEntry&#32;*FEnt2&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis>FileEntry&#32;*<emphasis role="keyword">&gt;</emphasis>(file2);
04467 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;FEnt1-&gt;getUniqueID()&#32;==&#32;FEnt2-&gt;getUniqueID();
04468 }
</programlisting>    </section><anchor xml:id="__c_index_8cpp_1a5cb0eeafc678bac68cefa057fea1e56b"/>    <section>
    <title>clang_File_tryGetRealPathName()</title>
<indexterm><primary>clang_File_tryGetRealPathName</primary><secondary>CIndex.cpp</secondary></indexterm>
<indexterm><primary>CIndex.cpp</primary><secondary>clang_File_tryGetRealPathName</secondary></indexterm>
<para><computeroutput>CXString clang_File_tryGetRealPathName (CXFile SFile)</computeroutput></para><para>
Definition at line <link linkend="__c_index_8cpp_source_1l04470">4470</link> of file <link linkend="__c_index_8cpp_source">CIndex.cpp</link>.</para>
<programlisting>04470 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
04471 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!SFile)
04472 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1a8684a35d52ccb8c623144db89a0205e1">cxstring::createNull</link>();
04473 
04474 &#32;&#32;FileEntry&#32;*FEnt&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis>FileEntry&#32;*<emphasis role="keyword">&gt;</emphasis>(SFile);
04475 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(FEnt-&gt;tryGetRealPathName());
04476 }
</programlisting><para>
References <link linkend="__c_x_string_8cpp_source_1l00050">clang::cxstring::createNull()</link>, and <link linkend="__c_x_string_8cpp_source_1l00057">clang::cxstring::createRef()</link>.</para>
    </section><anchor xml:id="__c_index_8cpp_1ab2c3529ea58276de8d365ba53873834f"/>    <section>
    <title>clang_getAllSkippedRanges()</title>
<indexterm><primary>clang_getAllSkippedRanges</primary><secondary>CIndex.cpp</secondary></indexterm>
<indexterm><primary>CIndex.cpp</primary><secondary>clang_getAllSkippedRanges</secondary></indexterm>
<para><computeroutput>CXSourceRangeList* clang_getAllSkippedRanges (CXTranslationUnit TU)</computeroutput></para><para>
Definition at line <link linkend="__c_index_8cpp_source_1l08880">8880</link> of file <link linkend="__c_index_8cpp_source">CIndex.cpp</link>.</para>
<programlisting>08880 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
08881 &#32;&#32;CXSourceRangeList&#32;*skipped&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;CXSourceRangeList;
08882 &#32;&#32;skipped-&gt;count&#32;=&#32;0;
08883 &#32;&#32;skipped-&gt;ranges&#32;=&#32;<emphasis role="keyword">nullptr</emphasis>;
08884 
08885 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(isNotUsableTU(TU))&#32;{
08886 &#32;&#32;&#32;&#32;<link linkend="__c_x_translation_unit_8h_1a4ec17e6e03ea0baf73e27802eae36106">LOG_BAD_TU</link>(TU);
08887 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;skipped;
08888 &#32;&#32;}
08889 
08890 &#32;&#32;ASTUnit&#32;*astUnit&#32;=&#32;cxtu::getASTUnit(TU);
08891 &#32;&#32;PreprocessingRecord&#32;*ppRec&#32;=
08892 &#32;&#32;&#32;&#32;&#32;&#32;astUnit-&gt;getPreprocessor().getPreprocessingRecord();
08893 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!ppRec)
08894 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;skipped;
08895 
08896 &#32;&#32;ASTContext&#32;&amp;Ctx&#32;=&#32;astUnit-&gt;getASTContext();
08897 
08898 &#32;&#32;<emphasis role="keyword">const</emphasis>&#32;std::vector&lt;SourceRange&gt;&#32;&amp;SkippedRanges&#32;=&#32;ppRec-&gt;getSkippedRanges();
08899 
08900 &#32;&#32;skipped-&gt;count&#32;=&#32;SkippedRanges.size();
08901 &#32;&#32;skipped-&gt;ranges&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;CXSourceRange[skipped-&gt;count];
08902 &#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">unsigned</emphasis>&#32;i&#32;=&#32;0,&#32;ei&#32;=&#32;skipped-&gt;count;&#32;i&#32;!=&#32;ei;&#32;++i)
08903 &#32;&#32;&#32;&#32;skipped-&gt;ranges[i]&#32;=&#32;<link linkend="_namespaceclang_1_1cxloc_1a39d02b462b1f3233518f01951d83d035">cxloc::translateSourceRange</link>(Ctx,&#32;SkippedRanges[i]);
08904 
08905 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;skipped;
08906 }
</programlisting>    </section><anchor xml:id="__c_index_8cpp_1a8a500567a7154c3ecfc347392e52be03"/>    <section>
    <title>clang_getCanonicalCursor()</title>
<indexterm><primary>clang_getCanonicalCursor</primary><secondary>CIndex.cpp</secondary></indexterm>
<indexterm><primary>CIndex.cpp</primary><secondary>clang_getCanonicalCursor</secondary></indexterm>
<para><computeroutput>CXCursor clang_getCanonicalCursor (CXCursor C)</computeroutput></para><para>
Definition at line <link linkend="__c_index_8cpp_source_1l06646">6646</link> of file <link linkend="__c_index_8cpp_source">CIndex.cpp</link>.</para>
<programlisting>06646 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
06647 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!<link linkend="__c_index_8cpp_1a5d47db8f608ae0c266d6551875d46b80">clang_isDeclaration</link>(C.kind))
06648 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;C;
06649 
06650 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;Decl&#32;*D&#32;=&#32;<link linkend="_namespaceclang_1_1cxcursor_1a1f702246831c96afd990e457613dc642">getCursorDecl</link>(C))&#32;{
06651 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;ObjCCategoryImplDecl&#32;*CatImplD&#32;=
06652 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;dyn_cast&lt;ObjCCategoryImplDecl&gt;(D))
06653 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(ObjCCategoryDecl&#32;*CatD&#32;=&#32;CatImplD-&gt;getCategoryDecl())
06654 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxcursor_1ab61ec2059175833672e8e78a376bb218">MakeCXCursor</link>(CatD,&#32;<link linkend="_namespaceclang_1_1cxcursor_1a23a495df22339e8289ae6d2421f493b6">getCursorTU</link>(C));
06655 
06656 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;ObjCImplDecl&#32;*ImplD&#32;=&#32;dyn_cast&lt;ObjCImplDecl&gt;(D))
06657 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;ObjCInterfaceDecl&#32;*IFD&#32;=&#32;ImplD-&gt;getClassInterface())
06658 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxcursor_1ab61ec2059175833672e8e78a376bb218">MakeCXCursor</link>(IFD,&#32;<link linkend="_namespaceclang_1_1cxcursor_1a23a495df22339e8289ae6d2421f493b6">getCursorTU</link>(C));
06659 
06660 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxcursor_1ab61ec2059175833672e8e78a376bb218">MakeCXCursor</link>(D-&gt;getCanonicalDecl(),&#32;<link linkend="_namespaceclang_1_1cxcursor_1a23a495df22339e8289ae6d2421f493b6">getCursorTU</link>(C));
06661 &#32;&#32;}
06662 
06663 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;C;
06664 }
</programlisting><para>
References <link linkend="__c_index_8cpp_source_1l05934">clang_isDeclaration()</link>, <link linkend="__c_x_cursor_8cpp_source_1l01101">clang::cxcursor::getCursorDecl()</link>, <link linkend="__c_x_cursor_8cpp_source_1l01133">clang::cxcursor::getCursorTU()</link>, and <link linkend="_namespaceclang_1_1cxcursor_1ab61ec2059175833672e8e78a376bb218">clang::cxcursor::MakeCXCursor()</link>.</para>
    </section><anchor xml:id="__c_index_8cpp_1a57a512b9b350427fc6910ca78759e76d"/>    <section>
    <title>clang_getClangVersion()</title>
<indexterm><primary>clang_getClangVersion</primary><secondary>CIndex.cpp</secondary></indexterm>
<indexterm><primary>CIndex.cpp</primary><secondary>clang_getClangVersion</secondary></indexterm>
<para><computeroutput>CXString clang_getClangVersion ( )</computeroutput></para><para>
Definition at line <link linkend="__c_index_8cpp_source_1l09109">9109</link> of file <link linkend="__c_index_8cpp_source">CIndex.cpp</link>.</para>
<programlisting>09109 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
09110 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1a19a4962be87f75a8c1fa5a0b75f76298">cxstring::createDup</link>(getClangFullVersion());
09111 }
</programlisting><para>
References <link linkend="__c_x_string_8cpp_source_1l00067">clang::cxstring::createDup()</link>.</para>
    </section><anchor xml:id="__c_index_8cpp_1a98b7e00ed3ca471a2e35509110ddc0c5"/>    <section>
    <title>clang_getCursor()</title>
<indexterm><primary>clang_getCursor</primary><secondary>CIndex.cpp</secondary></indexterm>
<indexterm><primary>CIndex.cpp</primary><secondary>clang_getCursor</secondary></indexterm>
<para><computeroutput>CXCursor clang_getCursor (CXTranslationUnit TU, CXSourceLocation Loc)</computeroutput></para><para>
Definition at line <link linkend="__c_index_8cpp_source_1l05839">5839</link> of file <link linkend="__c_index_8cpp_source">CIndex.cpp</link>.</para>
<programlisting>05839 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
05840 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(isNotUsableTU(TU))&#32;{
05841 &#32;&#32;&#32;&#32;<link linkend="__c_x_translation_unit_8h_1a4ec17e6e03ea0baf73e27802eae36106">LOG_BAD_TU</link>(TU);
05842 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__c_index_8cpp_1aa22233466eaf91f6f3cf6b84255c3b68">clang_getNullCursor</link>();
05843 &#32;&#32;}
05844 
05845 &#32;&#32;ASTUnit&#32;*CXXUnit&#32;=&#32;cxtu::getASTUnit(TU);
05846 &#32;&#32;ASTUnit::ConcurrencyCheck&#32;Check(*CXXUnit);
05847 
05848 &#32;&#32;SourceLocation&#32;SLoc&#32;=&#32;cxloc::translateSourceLocation(Loc);
05849 &#32;&#32;CXCursor&#32;Result&#32;=&#32;<link linkend="_namespaceclang_1_1cxcursor_1a17dbc7b3a465bf9e70491f77a9a4f63b">cxcursor::getCursor</link>(TU,&#32;SLoc);
05850 
05851 &#32;&#32;<link linkend="__c_log_8h_1a24474e48ce7e218f17ae9353103470d8">LOG_FUNC_SECTION</link>&#32;{
05852 &#32;&#32;&#32;&#32;CXFile&#32;SearchFile;
05853 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;SearchLine,&#32;SearchColumn;
05854 &#32;&#32;&#32;&#32;CXFile&#32;ResultFile;
05855 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;ResultLine,&#32;ResultColumn;
05856 &#32;&#32;&#32;&#32;CXString&#32;SearchFileName,&#32;ResultFileName,&#32;KindSpelling,&#32;USR;
05857 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*IsDef&#32;=&#32;<link linkend="__c_index_8cpp_1a619396ba7a888dea29aa6cb0b35ddbe5">clang_isCursorDefinition</link>(Result)&#32;?&#32;<emphasis role="stringliteral">&quot;&#32;(Definition)&quot;</emphasis>&#32;:&#32;<emphasis role="stringliteral">&quot;&quot;</emphasis>;
05858 &#32;&#32;&#32;&#32;CXSourceLocation&#32;ResultLoc&#32;=&#32;<link linkend="__c_index_8cpp_1a98001a3f8eb3a76d9c12821c45ef3708">clang_getCursorLocation</link>(Result);
05859 
05860 &#32;&#32;&#32;&#32;<link linkend="__c_x_source_location_8cpp_1a35b4c0e781e65d746666e3d263b000e8">clang_getFileLocation</link>(Loc,&#32;&amp;SearchFile,&#32;&amp;SearchLine,&#32;&amp;SearchColumn,
05861 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">nullptr</emphasis>);
05862 &#32;&#32;&#32;&#32;<link linkend="__c_x_source_location_8cpp_1a35b4c0e781e65d746666e3d263b000e8">clang_getFileLocation</link>(ResultLoc,&#32;&amp;ResultFile,&#32;&amp;ResultLine,&#32;&amp;ResultColumn,
05863 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">nullptr</emphasis>);
05864 &#32;&#32;&#32;&#32;SearchFileName&#32;=&#32;<link linkend="__c_index_8cpp_1a263c34f5782353186990b2c990d648fc">clang_getFileName</link>(SearchFile);
05865 &#32;&#32;&#32;&#32;ResultFileName&#32;=&#32;<link linkend="__c_index_8cpp_1a263c34f5782353186990b2c990d648fc">clang_getFileName</link>(ResultFile);
05866 &#32;&#32;&#32;&#32;KindSpelling&#32;=&#32;<link linkend="__c_index_8cpp_1a667cf97e111be828ff2c36e23d583fce">clang_getCursorKindSpelling</link>(Result.kind);
05867 &#32;&#32;&#32;&#32;USR&#32;=&#32;<link linkend="__c_index_u_s_rs_8cpp_1ae603480d6cea9e6b8e4a3bc927c1f43b">clang_getCursorUSR</link>(Result);
05868 &#32;&#32;&#32;&#32;*Log&#32;&lt;&lt;&#32;llvm::format(<emphasis role="stringliteral">&quot;(%s:%d:%d)&#32;=&#32;%s&quot;</emphasis>,&#32;<link linkend="__c_x_string_8cpp_1acd478c1b1785e17c0fe377bd70a2195f">clang_getCString</link>(SearchFileName),
05869 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;SearchLine,&#32;SearchColumn,
05870 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__c_x_string_8cpp_1acd478c1b1785e17c0fe377bd70a2195f">clang_getCString</link>(KindSpelling))
05871 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;llvm::format(<emphasis role="stringliteral">&quot;(%s:%d:%d):%s%s&quot;</emphasis>,&#32;<link linkend="__c_x_string_8cpp_1acd478c1b1785e17c0fe377bd70a2195f">clang_getCString</link>(ResultFileName),
05872 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ResultLine,&#32;ResultColumn,&#32;<link linkend="__c_x_string_8cpp_1acd478c1b1785e17c0fe377bd70a2195f">clang_getCString</link>(USR),
05873 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;IsDef);
05874 &#32;&#32;&#32;&#32;<link linkend="__c_x_string_8cpp_1a46c85f1255580ed186aa6f7380a06883">clang_disposeString</link>(SearchFileName);
05875 &#32;&#32;&#32;&#32;<link linkend="__c_x_string_8cpp_1a46c85f1255580ed186aa6f7380a06883">clang_disposeString</link>(ResultFileName);
05876 &#32;&#32;&#32;&#32;<link linkend="__c_x_string_8cpp_1a46c85f1255580ed186aa6f7380a06883">clang_disposeString</link>(KindSpelling);
05877 &#32;&#32;&#32;&#32;<link linkend="__c_x_string_8cpp_1a46c85f1255580ed186aa6f7380a06883">clang_disposeString</link>(USR);
05878 
05879 &#32;&#32;&#32;&#32;CXCursor&#32;Definition&#32;=&#32;<link linkend="__c_index_8cpp_1a090e42b940779ab0c437188858f24dfb">clang_getCursorDefinition</link>(Result);
05880 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!<link linkend="__c_index_8cpp_1a96d5f0059613428736715de616ed38f9">clang_equalCursors</link>(Definition,&#32;<link linkend="__c_index_8cpp_1aa22233466eaf91f6f3cf6b84255c3b68">clang_getNullCursor</link>()))&#32;{
05881 &#32;&#32;&#32;&#32;&#32;&#32;CXSourceLocation&#32;DefinitionLoc&#32;=&#32;<link linkend="__c_index_8cpp_1a98001a3f8eb3a76d9c12821c45ef3708">clang_getCursorLocation</link>(Definition);
05882 &#32;&#32;&#32;&#32;&#32;&#32;CXString&#32;DefinitionKindSpelling&#32;=
05883 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__c_index_8cpp_1a667cf97e111be828ff2c36e23d583fce">clang_getCursorKindSpelling</link>(Definition.kind);
05884 &#32;&#32;&#32;&#32;&#32;&#32;CXFile&#32;DefinitionFile;
05885 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;DefinitionLine,&#32;DefinitionColumn;
05886 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__c_x_source_location_8cpp_1a35b4c0e781e65d746666e3d263b000e8">clang_getFileLocation</link>(DefinitionLoc,&#32;&amp;DefinitionFile,&#32;&amp;DefinitionLine,
05887 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;DefinitionColumn,&#32;<emphasis role="keyword">nullptr</emphasis>);
05888 &#32;&#32;&#32;&#32;&#32;&#32;CXString&#32;DefinitionFileName&#32;=&#32;<link linkend="__c_index_8cpp_1a263c34f5782353186990b2c990d648fc">clang_getFileName</link>(DefinitionFile);
05889 &#32;&#32;&#32;&#32;&#32;&#32;*Log&#32;&lt;&lt;&#32;llvm::format(<emphasis role="stringliteral">&quot;&#32;&#32;-&gt;&#32;%s(%s:%d:%d)&quot;</emphasis>,
05890 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__c_x_string_8cpp_1acd478c1b1785e17c0fe377bd70a2195f">clang_getCString</link>(DefinitionKindSpelling),
05891 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__c_x_string_8cpp_1acd478c1b1785e17c0fe377bd70a2195f">clang_getCString</link>(DefinitionFileName),&#32;DefinitionLine,
05892 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;DefinitionColumn);
05893 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__c_x_string_8cpp_1a46c85f1255580ed186aa6f7380a06883">clang_disposeString</link>(DefinitionFileName);
05894 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__c_x_string_8cpp_1a46c85f1255580ed186aa6f7380a06883">clang_disposeString</link>(DefinitionKindSpelling);
05895 &#32;&#32;&#32;&#32;}
05896 &#32;&#32;}
05897 
05898 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;Result;
05899 }
</programlisting>    </section><anchor xml:id="__c_index_8cpp_1a3d2ecf17120d9e5f15b5544b8a901b7e"/>    <section>
    <title>clang_getCursorAvailability()</title>
<indexterm><primary>clang_getCursorAvailability</primary><secondary>CIndex.cpp</secondary></indexterm>
<indexterm><primary>CIndex.cpp</primary><secondary>clang_getCursorAvailability</secondary></indexterm>
<para><computeroutput>enum CXAvailabilityKind clang_getCursorAvailability (CXCursor cursor)</computeroutput></para><para>
Definition at line <link linkend="__c_index_8cpp_source_1l07956">7956</link> of file <link linkend="__c_index_8cpp_source">CIndex.cpp</link>.</para>
<programlisting>07978 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
07979 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="__c_index_8cpp_1a5d47db8f608ae0c266d6551875d46b80">clang_isDeclaration</link>(cursor.kind))
07980 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;Decl&#32;*D&#32;=&#32;<link linkend="_namespaceclang_1_1cxcursor_1a1f702246831c96afd990e457613dc642">cxcursor::getCursorDecl</link>(cursor))
07981 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;getCursorAvailabilityForDecl(D);
07982 
07983 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;CXAvailability_Available;
07984 }
</programlisting>    </section><anchor xml:id="__c_index_8cpp_1a090e42b940779ab0c437188858f24dfb"/>    <section>
    <title>clang_getCursorDefinition()</title>
<indexterm><primary>clang_getCursorDefinition</primary><secondary>CIndex.cpp</secondary></indexterm>
<indexterm><primary>CIndex.cpp</primary><secondary>clang_getCursorDefinition</secondary></indexterm>
<para><computeroutput>CXCursor clang_getCursorDefinition (CXCursor C)</computeroutput></para><para>
Definition at line <link linkend="__c_index_8cpp_source_1l06411">6411</link> of file <link linkend="__c_index_8cpp_source">CIndex.cpp</link>.</para>
<programlisting>06411 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
06412 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="__c_index_8cpp_1a0c5b391d8bca745084fb8906cce6f66c">clang_isInvalid</link>(C.kind))
06413 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__c_index_8cpp_1aa22233466eaf91f6f3cf6b84255c3b68">clang_getNullCursor</link>();
06414 
06415 &#32;&#32;CXTranslationUnit&#32;TU&#32;=&#32;<link linkend="_namespaceclang_1_1cxcursor_1a23a495df22339e8289ae6d2421f493b6">getCursorTU</link>(C);
06416 
06417 &#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;WasReference&#32;=&#32;<emphasis role="keyword">false</emphasis>;
06418 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="__c_index_8cpp_1a8b03541653a9373d35919c45216bc70f">clang_isReference</link>(C.kind)&#32;||&#32;<link linkend="__c_index_8cpp_1ab958945dd59c351e1ae1a3f7f5668095">clang_isExpression</link>(C.kind))&#32;{
06419 &#32;&#32;&#32;&#32;C&#32;=&#32;<link linkend="__c_index_8cpp_1ab26fc466345d015d7f9d418080166dc7">clang_getCursorReferenced</link>(C);
06420 &#32;&#32;&#32;&#32;WasReference&#32;=&#32;<emphasis role="keyword">true</emphasis>;
06421 &#32;&#32;}
06422 
06423 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(C.kind&#32;==&#32;CXCursor_MacroExpansion)
06424 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__c_index_8cpp_1ab26fc466345d015d7f9d418080166dc7">clang_getCursorReferenced</link>(C);
06425 
06426 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!<link linkend="__c_index_8cpp_1a5d47db8f608ae0c266d6551875d46b80">clang_isDeclaration</link>(C.kind))
06427 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__c_index_8cpp_1aa22233466eaf91f6f3cf6b84255c3b68">clang_getNullCursor</link>();
06428 
06429 &#32;&#32;<emphasis role="keyword">const</emphasis>&#32;Decl&#32;*D&#32;=&#32;<link linkend="_namespaceclang_1_1cxcursor_1a1f702246831c96afd990e457613dc642">getCursorDecl</link>(C);
06430 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!D)
06431 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__c_index_8cpp_1aa22233466eaf91f6f3cf6b84255c3b68">clang_getNullCursor</link>();
06432 
06433 &#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(D-&gt;getKind())&#32;{
06434 &#32;&#32;<emphasis role="comment">//&#32;Declaration&#32;kinds&#32;that&#32;don&apos;t&#32;really&#32;separate&#32;the&#32;notions&#32;of</emphasis>
06435 &#32;&#32;<emphasis role="comment">//&#32;declaration&#32;and&#32;definition.</emphasis>
06436 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;Decl::Namespace:
06437 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;Decl::Typedef:
06438 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;Decl::TypeAlias:
06439 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;Decl::TypeAliasTemplate:
06440 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;Decl::TemplateTypeParm:
06441 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;Decl::EnumConstant:
06442 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;Decl::Field:
06443 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;Decl::Binding:
06444 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;Decl::MSProperty:
06445 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;Decl::MSGuid:
06446 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;Decl::TemplateParamObject:
06447 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;Decl::IndirectField:
06448 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;Decl::ObjCIvar:
06449 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;Decl::ObjCAtDefsField:
06450 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;Decl::ImplicitParam:
06451 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;Decl::ParmVar:
06452 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;Decl::NonTypeTemplateParm:
06453 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;Decl::TemplateTemplateParm:
06454 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;Decl::ObjCCategoryImpl:
06455 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;Decl::ObjCImplementation:
06456 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;Decl::AccessSpec:
06457 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;Decl::LinkageSpec:
06458 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;Decl::Export:
06459 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;Decl::ObjCPropertyImpl:
06460 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;Decl::FileScopeAsm:
06461 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;Decl::StaticAssert:
06462 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;Decl::Block:
06463 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;Decl::Captured:
06464 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;Decl::OMPCapturedExpr:
06465 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;Decl::Label:&#32;<emphasis role="comment">//&#32;FIXME:&#32;Is&#32;this&#32;right??</emphasis>
06466 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;Decl::ClassScopeFunctionSpecialization:
06467 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;Decl::CXXDeductionGuide:
06468 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;Decl::Import:
06469 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;Decl::OMPThreadPrivate:
06470 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;Decl::OMPAllocate:
06471 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;Decl::OMPDeclareReduction:
06472 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;Decl::OMPDeclareMapper:
06473 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;Decl::OMPRequires:
06474 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;Decl::ObjCTypeParam:
06475 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;Decl::BuiltinTemplate:
06476 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;Decl::PragmaComment:
06477 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;Decl::PragmaDetectMismatch:
06478 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;Decl::UsingPack:
06479 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;Decl::Concept:
06480 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;Decl::LifetimeExtendedTemporary:
06481 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;Decl::RequiresExprBody:
06482 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;Decl::UnresolvedUsingIfExists:
06483 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;C;
06484 
06485 &#32;&#32;<emphasis role="comment">//&#32;Declaration&#32;kinds&#32;that&#32;don&apos;t&#32;make&#32;any&#32;sense&#32;here,&#32;but&#32;are</emphasis>
06486 &#32;&#32;<emphasis role="comment">//&#32;nonetheless&#32;harmless.</emphasis>
06487 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;Decl::Empty:
06488 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;Decl::TranslationUnit:
06489 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;Decl::ExternCContext:
06490 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
06491 
06492 &#32;&#32;<emphasis role="comment">//&#32;Declaration&#32;kinds&#32;for&#32;which&#32;the&#32;definition&#32;is&#32;not&#32;resolvable.</emphasis>
06493 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;Decl::UnresolvedUsingTypename:
06494 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;Decl::UnresolvedUsingValue:
06495 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
06496 
06497 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;Decl::UsingDirective:
06498 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxcursor_1ab61ec2059175833672e8e78a376bb218">MakeCXCursor</link>(cast&lt;UsingDirectiveDecl&gt;(D)-&gt;getNominatedNamespace(),
06499 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;TU);
06500 
06501 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;Decl::NamespaceAlias:
06502 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxcursor_1ab61ec2059175833672e8e78a376bb218">MakeCXCursor</link>(cast&lt;NamespaceAliasDecl&gt;(D)-&gt;getNamespace(),&#32;TU);
06503 
06504 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;Decl::Enum:
06505 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;Decl::Record:
06506 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;Decl::CXXRecord:
06507 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;Decl::ClassTemplateSpecialization:
06508 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;Decl::ClassTemplatePartialSpecialization:
06509 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(TagDecl&#32;*Def&#32;=&#32;cast&lt;TagDecl&gt;(D)-&gt;getDefinition())
06510 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxcursor_1ab61ec2059175833672e8e78a376bb218">MakeCXCursor</link>(Def,&#32;TU);
06511 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__c_index_8cpp_1aa22233466eaf91f6f3cf6b84255c3b68">clang_getNullCursor</link>();
06512 
06513 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;Decl::Function:
06514 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;Decl::CXXMethod:
06515 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;Decl::CXXConstructor:
06516 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;Decl::CXXDestructor:
06517 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;Decl::CXXConversion:&#32;{
06518 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;FunctionDecl&#32;*Def&#32;=&#32;<emphasis role="keyword">nullptr</emphasis>;
06519 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(cast&lt;FunctionDecl&gt;(D)-&gt;getBody(Def))
06520 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxcursor_1ab61ec2059175833672e8e78a376bb218">MakeCXCursor</link>(Def,&#32;TU);
06521 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__c_index_8cpp_1aa22233466eaf91f6f3cf6b84255c3b68">clang_getNullCursor</link>();
06522 &#32;&#32;}
06523 
06524 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;Decl::Var:
06525 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;Decl::VarTemplateSpecialization:
06526 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;Decl::VarTemplatePartialSpecialization:
06527 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;Decl::Decomposition:&#32;{
06528 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Ask&#32;the&#32;variable&#32;if&#32;it&#32;has&#32;a&#32;definition.</emphasis>
06529 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;VarDecl&#32;*Def&#32;=&#32;cast&lt;VarDecl&gt;(D)-&gt;getDefinition())
06530 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxcursor_1ab61ec2059175833672e8e78a376bb218">MakeCXCursor</link>(Def,&#32;TU);
06531 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__c_index_8cpp_1aa22233466eaf91f6f3cf6b84255c3b68">clang_getNullCursor</link>();
06532 &#32;&#32;}
06533 
06534 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;Decl::FunctionTemplate:&#32;{
06535 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;FunctionDecl&#32;*Def&#32;=&#32;<emphasis role="keyword">nullptr</emphasis>;
06536 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(cast&lt;FunctionTemplateDecl&gt;(D)-&gt;getTemplatedDecl()-&gt;getBody(Def))
06537 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxcursor_1ab61ec2059175833672e8e78a376bb218">MakeCXCursor</link>(Def-&gt;getDescribedFunctionTemplate(),&#32;TU);
06538 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__c_index_8cpp_1aa22233466eaf91f6f3cf6b84255c3b68">clang_getNullCursor</link>();
06539 &#32;&#32;}
06540 
06541 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;Decl::ClassTemplate:&#32;{
06542 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(RecordDecl&#32;*Def&#32;=
06543 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cast&lt;ClassTemplateDecl&gt;(D)-&gt;getTemplatedDecl()-&gt;getDefinition())
06544 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxcursor_1ab61ec2059175833672e8e78a376bb218">MakeCXCursor</link>(cast&lt;CXXRecordDecl&gt;(Def)-&gt;getDescribedClassTemplate(),
06545 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;TU);
06546 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__c_index_8cpp_1aa22233466eaf91f6f3cf6b84255c3b68">clang_getNullCursor</link>();
06547 &#32;&#32;}
06548 
06549 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;Decl::VarTemplate:&#32;{
06550 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(VarDecl&#32;*Def&#32;=
06551 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cast&lt;VarTemplateDecl&gt;(D)-&gt;getTemplatedDecl()-&gt;getDefinition())
06552 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxcursor_1ab61ec2059175833672e8e78a376bb218">MakeCXCursor</link>(cast&lt;VarDecl&gt;(Def)-&gt;getDescribedVarTemplate(),&#32;TU);
06553 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__c_index_8cpp_1aa22233466eaf91f6f3cf6b84255c3b68">clang_getNullCursor</link>();
06554 &#32;&#32;}
06555 
06556 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;Decl::Using:
06557 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;Decl::UsingEnum:
06558 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxcursor_1a631225e024301b99cc72be73f0ee9271">MakeCursorOverloadedDeclRef</link>(cast&lt;BaseUsingDecl&gt;(D),&#32;D-&gt;getLocation(),
06559 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;TU);
06560 
06561 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;Decl::UsingShadow:
06562 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;Decl::ConstructorUsingShadow:
06563 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__c_index_8cpp_1a090e42b940779ab0c437188858f24dfb">clang_getCursorDefinition</link>(
06564 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespaceclang_1_1cxcursor_1ab61ec2059175833672e8e78a376bb218">MakeCXCursor</link>(cast&lt;UsingShadowDecl&gt;(D)-&gt;getTargetDecl(),&#32;TU));
06565 
06566 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;Decl::ObjCMethod:&#32;{
06567 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;ObjCMethodDecl&#32;*Method&#32;=&#32;cast&lt;ObjCMethodDecl&gt;(D);
06568 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(Method-&gt;isThisDeclarationADefinition())
06569 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;C;
06570 
06571 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Dig&#32;out&#32;the&#32;method&#32;definition&#32;in&#32;the&#32;associated</emphasis>
06572 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;@implementation,&#32;if&#32;we&#32;have&#32;it.</emphasis>
06573 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;FIXME:&#32;The&#32;ASTs&#32;should&#32;make&#32;finding&#32;the&#32;definition&#32;easier.</emphasis>
06574 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;ObjCInterfaceDecl&#32;*Class&#32;=
06575 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;dyn_cast&lt;ObjCInterfaceDecl&gt;(Method-&gt;getDeclContext()))
06576 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(ObjCImplementationDecl&#32;*ClassImpl&#32;=&#32;Class-&gt;getImplementation())
06577 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(ObjCMethodDecl&#32;*Def&#32;=&#32;ClassImpl-&gt;getMethod(
06578 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Method-&gt;getSelector(),&#32;Method-&gt;isInstanceMethod()))
06579 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(Def-&gt;isThisDeclarationADefinition())
06580 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxcursor_1ab61ec2059175833672e8e78a376bb218">MakeCXCursor</link>(Def,&#32;TU);
06581 
06582 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__c_index_8cpp_1aa22233466eaf91f6f3cf6b84255c3b68">clang_getNullCursor</link>();
06583 &#32;&#32;}
06584 
06585 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;Decl::ObjCCategory:
06586 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(ObjCCategoryImplDecl&#32;*Impl&#32;=
06587 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cast&lt;ObjCCategoryDecl&gt;(D)-&gt;getImplementation())
06588 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxcursor_1ab61ec2059175833672e8e78a376bb218">MakeCXCursor</link>(Impl,&#32;TU);
06589 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__c_index_8cpp_1aa22233466eaf91f6f3cf6b84255c3b68">clang_getNullCursor</link>();
06590 
06591 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;Decl::ObjCProtocol:
06592 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;ObjCProtocolDecl&#32;*Def&#32;=
06593 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cast&lt;ObjCProtocolDecl&gt;(D)-&gt;getDefinition())
06594 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxcursor_1ab61ec2059175833672e8e78a376bb218">MakeCXCursor</link>(Def,&#32;TU);
06595 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__c_index_8cpp_1aa22233466eaf91f6f3cf6b84255c3b68">clang_getNullCursor</link>();
06596 
06597 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;Decl::ObjCInterface:&#32;{
06598 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;There&#32;are&#32;two&#32;notions&#32;of&#32;a&#32;&quot;definition&quot;&#32;for&#32;an&#32;Objective-C</emphasis>
06599 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;class:&#32;the&#32;interface&#32;and&#32;its&#32;implementation.&#32;When&#32;we&#32;resolved&#32;a</emphasis>
06600 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;reference&#32;to&#32;an&#32;Objective-C&#32;class,&#32;produce&#32;the&#32;@interface&#32;as</emphasis>
06601 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;the&#32;definition;&#32;when&#32;we&#32;were&#32;provided&#32;with&#32;the&#32;interface,</emphasis>
06602 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;produce&#32;the&#32;@implementation&#32;as&#32;the&#32;definition.</emphasis>
06603 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;ObjCInterfaceDecl&#32;*IFace&#32;=&#32;cast&lt;ObjCInterfaceDecl&gt;(D);
06604 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(WasReference)&#32;{
06605 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;ObjCInterfaceDecl&#32;*Def&#32;=&#32;IFace-&gt;getDefinition())
06606 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxcursor_1ab61ec2059175833672e8e78a376bb218">MakeCXCursor</link>(Def,&#32;TU);
06607 &#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(ObjCImplementationDecl&#32;*Impl&#32;=&#32;IFace-&gt;getImplementation())
06608 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxcursor_1ab61ec2059175833672e8e78a376bb218">MakeCXCursor</link>(Impl,&#32;TU);
06609 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__c_index_8cpp_1aa22233466eaf91f6f3cf6b84255c3b68">clang_getNullCursor</link>();
06610 &#32;&#32;}
06611 
06612 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;Decl::ObjCProperty:
06613 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;FIXME:&#32;We&#32;don&apos;t&#32;really&#32;know&#32;where&#32;to&#32;find&#32;the</emphasis>
06614 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;ObjCPropertyImplDecls&#32;that&#32;implement&#32;this&#32;property.</emphasis>
06615 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__c_index_8cpp_1aa22233466eaf91f6f3cf6b84255c3b68">clang_getNullCursor</link>();
06616 
06617 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;Decl::ObjCCompatibleAlias:
06618 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;ObjCInterfaceDecl&#32;*Class&#32;=
06619 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cast&lt;ObjCCompatibleAliasDecl&gt;(D)-&gt;getClassInterface())
06620 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;ObjCInterfaceDecl&#32;*Def&#32;=&#32;Class-&gt;getDefinition())
06621 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxcursor_1ab61ec2059175833672e8e78a376bb218">MakeCXCursor</link>(Def,&#32;TU);
06622 
06623 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__c_index_8cpp_1aa22233466eaf91f6f3cf6b84255c3b68">clang_getNullCursor</link>();
06624 
06625 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;Decl::Friend:
06626 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(NamedDecl&#32;*Friend&#32;=&#32;cast&lt;FriendDecl&gt;(D)-&gt;getFriendDecl())
06627 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__c_index_8cpp_1a090e42b940779ab0c437188858f24dfb">clang_getCursorDefinition</link>(<link linkend="_namespaceclang_1_1cxcursor_1ab61ec2059175833672e8e78a376bb218">MakeCXCursor</link>(Friend,&#32;TU));
06628 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__c_index_8cpp_1aa22233466eaf91f6f3cf6b84255c3b68">clang_getNullCursor</link>();
06629 
06630 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;Decl::FriendTemplate:
06631 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(NamedDecl&#32;*Friend&#32;=&#32;cast&lt;FriendTemplateDecl&gt;(D)-&gt;getFriendDecl())
06632 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__c_index_8cpp_1a090e42b940779ab0c437188858f24dfb">clang_getCursorDefinition</link>(<link linkend="_namespaceclang_1_1cxcursor_1ab61ec2059175833672e8e78a376bb218">MakeCXCursor</link>(Friend,&#32;TU));
06633 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__c_index_8cpp_1aa22233466eaf91f6f3cf6b84255c3b68">clang_getNullCursor</link>();
06634 &#32;&#32;}
06635 
06636 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__c_index_8cpp_1aa22233466eaf91f6f3cf6b84255c3b68">clang_getNullCursor</link>();
06637 }
</programlisting><para>
References <link linkend="__c_index_8cpp_source_1l06301">clang_getCursorReferenced()</link>, <link linkend="__c_index_8cpp_source_1l05901">clang_getNullCursor()</link>, <link linkend="__c_index_8cpp_source_1l05934">clang_isDeclaration()</link>, <link linkend="__c_index_8cpp_source_1l05952">clang_isExpression()</link>, <link linkend="__c_index_8cpp_source_1l05930">clang_isInvalid()</link>, <link linkend="__c_index_8cpp_source_1l05948">clang_isReference()</link>, <link linkend="__c_x_cursor_8cpp_source_1l01101">clang::cxcursor::getCursorDecl()</link>, <link linkend="__c_x_cursor_8cpp_source_1l01133">clang::cxcursor::getCursorTU()</link>, <link linkend="__c_x_cursor_8cpp_source_1l01061">clang::cxcursor::MakeCursorOverloadedDeclRef()</link>, and <link linkend="_namespaceclang_1_1cxcursor_1ab61ec2059175833672e8e78a376bb218">clang::cxcursor::MakeCXCursor()</link>.</para>
<para>
Referenced by <link linkend="__c_index_8cpp_source_1l06639">clang_isCursorDefinition()</link>.</para>
    </section><anchor xml:id="__c_index_8cpp_1adacc338d2829e50ff0395a8384d507b3"/>    <section>
    <title>clang_getCursorDisplayName()</title>
<indexterm><primary>clang_getCursorDisplayName</primary><secondary>CIndex.cpp</secondary></indexterm>
<indexterm><primary>CIndex.cpp</primary><secondary>clang_getCursorDisplayName</secondary></indexterm>
<para><computeroutput>CXString clang_getCursorDisplayName (CXCursor C)</computeroutput></para><para>
Definition at line <link linkend="__c_index_8cpp_source_1l05120">5120</link> of file <link linkend="__c_index_8cpp_source">CIndex.cpp</link>.</para>
<programlisting>05120 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
05121 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!<link linkend="__c_index_8cpp_1a5d47db8f608ae0c266d6551875d46b80">clang_isDeclaration</link>(C.kind))
05122 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__c_index_8cpp_1a412f1282680f05ef2b991f21a59ad3ac">clang_getCursorSpelling</link>(C);
05123 
05124 &#32;&#32;<emphasis role="keyword">const</emphasis>&#32;Decl&#32;*D&#32;=&#32;<link linkend="_namespaceclang_1_1cxcursor_1a1f702246831c96afd990e457613dc642">getCursorDecl</link>(C);
05125 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!D)
05126 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1a8a49aa6ea196abdde85886689f2630f9">cxstring::createEmpty</link>();
05127 
05128 &#32;&#32;PrintingPolicy&#32;Policy&#32;=&#32;<link linkend="_namespaceclang_1_1cxcursor_1a9f29c286f26b3cf616331c7e6554d373">getCursorContext</link>(C).getPrintingPolicy();
05129 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;FunctionTemplateDecl&#32;*FunTmpl&#32;=&#32;dyn_cast&lt;FunctionTemplateDecl&gt;(D))
05130 &#32;&#32;&#32;&#32;D&#32;=&#32;FunTmpl-&gt;getTemplatedDecl();
05131 
05132 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;FunctionDecl&#32;*Function&#32;=&#32;dyn_cast&lt;FunctionDecl&gt;(D))&#32;{
05133 &#32;&#32;&#32;&#32;SmallString&lt;64&gt;&#32;Str;
05134 &#32;&#32;&#32;&#32;llvm::raw_svector_ostream&#32;OS(Str);
05135 &#32;&#32;&#32;&#32;OS&#32;&lt;&lt;&#32;*Function;
05136 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(Function-&gt;getPrimaryTemplate())
05137 &#32;&#32;&#32;&#32;&#32;&#32;OS&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&lt;&gt;&quot;</emphasis>;
05138 &#32;&#32;&#32;&#32;OS&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;(&quot;</emphasis>;
05139 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">unsigned</emphasis>&#32;I&#32;=&#32;0,&#32;N&#32;=&#32;Function-&gt;getNumParams();&#32;I&#32;!=&#32;N;&#32;++I)&#32;{
05140 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(I)
05141 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;OS&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;,&#32;&quot;</emphasis>;
05142 &#32;&#32;&#32;&#32;&#32;&#32;OS&#32;&lt;&lt;&#32;Function-&gt;getParamDecl(I)-&gt;getType().getAsString(Policy);
05143 &#32;&#32;&#32;&#32;}
05144 
05145 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(Function-&gt;isVariadic())&#32;{
05146 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(Function-&gt;getNumParams())
05147 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;OS&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;,&#32;&quot;</emphasis>;
05148 &#32;&#32;&#32;&#32;&#32;&#32;OS&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;...&quot;</emphasis>;
05149 &#32;&#32;&#32;&#32;}
05150 &#32;&#32;&#32;&#32;OS&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;)&quot;</emphasis>;
05151 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1a19a4962be87f75a8c1fa5a0b75f76298">cxstring::createDup</link>(OS.str());
05152 &#32;&#32;}
05153 
05154 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;ClassTemplateDecl&#32;*ClassTemplate&#32;=&#32;dyn_cast&lt;ClassTemplateDecl&gt;(D))&#32;{
05155 &#32;&#32;&#32;&#32;SmallString&lt;64&gt;&#32;Str;
05156 &#32;&#32;&#32;&#32;llvm::raw_svector_ostream&#32;OS(Str);
05157 &#32;&#32;&#32;&#32;OS&#32;&lt;&lt;&#32;*ClassTemplate;
05158 &#32;&#32;&#32;&#32;OS&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&lt;&quot;</emphasis>;
05159 &#32;&#32;&#32;&#32;TemplateParameterList&#32;*Params&#32;=&#32;ClassTemplate-&gt;getTemplateParameters();
05160 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">unsigned</emphasis>&#32;I&#32;=&#32;0,&#32;N&#32;=&#32;Params-&gt;size();&#32;I&#32;!=&#32;N;&#32;++I)&#32;{
05161 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(I)
05162 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;OS&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;,&#32;&quot;</emphasis>;
05163 
05164 &#32;&#32;&#32;&#32;&#32;&#32;NamedDecl&#32;*Param&#32;=&#32;Params-&gt;getParam(I);
05165 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(Param-&gt;getIdentifier())&#32;{
05166 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;OS&#32;&lt;&lt;&#32;Param-&gt;getIdentifier()-&gt;getName();
05167 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">continue</emphasis>;
05168 &#32;&#32;&#32;&#32;&#32;&#32;}
05169 
05170 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;There&#32;is&#32;no&#32;parameter&#32;name,&#32;which&#32;makes&#32;this&#32;tricky.&#32;Try&#32;to&#32;come&#32;up</emphasis>
05171 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;with&#32;something&#32;useful&#32;that&#32;isn&apos;t&#32;too&#32;long.</emphasis>
05172 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(TemplateTypeParmDecl&#32;*TTP&#32;=&#32;dyn_cast&lt;TemplateTypeParmDecl&gt;(Param))
05173 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;*TC&#32;=&#32;TTP-&gt;getTypeConstraint())&#32;{
05174 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;TC-&gt;getConceptNameInfo().printName(OS,&#32;Policy);
05175 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(TC-&gt;hasExplicitTemplateArgs())
05176 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;OS&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&lt;...&gt;&quot;</emphasis>;
05177 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>
05178 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;OS&#32;&lt;&lt;&#32;(TTP-&gt;wasDeclaredWithTypename()&#32;?&#32;<emphasis role="stringliteral">&quot;typename&quot;</emphasis>&#32;:&#32;<emphasis role="stringliteral">&quot;class&quot;</emphasis>);
05179 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(NonTypeTemplateParmDecl&#32;*NTTP&#32;=
05180 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;dyn_cast&lt;NonTypeTemplateParmDecl&gt;(Param))
05181 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;OS&#32;&lt;&lt;&#32;NTTP-&gt;getType().getAsString(Policy);
05182 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
05183 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;OS&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;template&lt;...&gt;&#32;class&quot;</emphasis>;
05184 &#32;&#32;&#32;&#32;}
05185 
05186 &#32;&#32;&#32;&#32;OS&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&gt;&quot;</emphasis>;
05187 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1a19a4962be87f75a8c1fa5a0b75f76298">cxstring::createDup</link>(OS.str());
05188 &#32;&#32;}
05189 
05190 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;ClassTemplateSpecializationDecl&#32;*ClassSpec&#32;=
05191 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;dyn_cast&lt;ClassTemplateSpecializationDecl&gt;(D))&#32;{
05192 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;If&#32;the&#32;type&#32;was&#32;explicitly&#32;written,&#32;use&#32;that.</emphasis>
05193 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(TypeSourceInfo&#32;*TSInfo&#32;=&#32;ClassSpec-&gt;getTypeAsWritten())
05194 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1a19a4962be87f75a8c1fa5a0b75f76298">cxstring::createDup</link>(TSInfo-&gt;getType().getAsString(Policy));
05195 
05196 &#32;&#32;&#32;&#32;SmallString&lt;128&gt;&#32;Str;
05197 &#32;&#32;&#32;&#32;llvm::raw_svector_ostream&#32;OS(Str);
05198 &#32;&#32;&#32;&#32;OS&#32;&lt;&lt;&#32;*ClassSpec;
05199 &#32;&#32;&#32;&#32;printTemplateArgumentList(
05200 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;OS,&#32;ClassSpec-&gt;getTemplateArgs().asArray(),&#32;Policy,
05201 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ClassSpec-&gt;getSpecializedTemplate()-&gt;getTemplateParameters());
05202 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1a19a4962be87f75a8c1fa5a0b75f76298">cxstring::createDup</link>(OS.str());
05203 &#32;&#32;}
05204 
05205 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__c_index_8cpp_1a412f1282680f05ef2b991f21a59ad3ac">clang_getCursorSpelling</link>(C);
05206 }
</programlisting><para>
References <link linkend="__c_index_8cpp_source_1l04634">clang_getCursorSpelling()</link>, <link linkend="__c_index_8cpp_source_1l05934">clang_isDeclaration()</link>, <link linkend="__c_x_string_8cpp_source_1l00067">clang::cxstring::createDup()</link>, <link linkend="__c_x_string_8cpp_source_1l00043">clang::cxstring::createEmpty()</link>, <link linkend="__c_x_cursor_8cpp_source_1l01122">clang::cxcursor::getCursorContext()</link>, and <link linkend="__c_x_cursor_8cpp_source_1l01101">clang::cxcursor::getCursorDecl()</link>.</para>
<para>
Referenced by <link linkend="__c_index_8cpp_source_1l09132">clang::cxindex::Logger::operator&lt;&lt;()</link>.</para>
    </section><anchor xml:id="__c_index_8cpp_1ac535682dfe6658513121c4cf6d4b4076"/>    <section>
    <title>clang_getCursorExtent()</title>
<indexterm><primary>clang_getCursorExtent</primary><secondary>CIndex.cpp</secondary></indexterm>
<indexterm><primary>CIndex.cpp</primary><secondary>clang_getCursorExtent</secondary></indexterm>
<para><computeroutput>CXSourceRange clang_getCursorExtent (CXCursor C)</computeroutput></para><para>
Definition at line <link linkend="__c_index_8cpp_source_1l06293">6293</link> of file <link linkend="__c_index_8cpp_source">CIndex.cpp</link>.</para>
<programlisting>06293 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
06294 &#32;&#32;SourceRange&#32;R&#32;=&#32;getRawCursorExtent(C);
06295 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(R.isInvalid())
06296 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__c_x_source_location_8cpp_1afadb1a95ce51366407cf6c363299a17f">clang_getNullRange</link>();
06297 
06298 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxloc_1a39d02b462b1f3233518f01951d83d035">cxloc::translateSourceRange</link>(<link linkend="_namespaceclang_1_1cxcursor_1a9f29c286f26b3cf616331c7e6554d373">getCursorContext</link>(C),&#32;R);
06299 }
</programlisting><para>
Referenced by <link linkend="__c_index_8cpp_source_1l06732">clang_getCursorReferenceNameRange()</link>.</para>
    </section><anchor xml:id="__c_index_8cpp_1a88e594fe730830706a0b7cff796eaedf"/>    <section>
    <title>clang_getCursorKind()</title>
<indexterm><primary>clang_getCursorKind</primary><secondary>CIndex.cpp</secondary></indexterm>
<indexterm><primary>CIndex.cpp</primary><secondary>clang_getCursorKind</secondary></indexterm>
<para><computeroutput>CXCursorKind clang_getCursorKind (CXCursor C)</computeroutput></para><para>
Definition at line <link linkend="__c_index_8cpp_source_1l05984">5984</link> of file <link linkend="__c_index_8cpp_source">CIndex.cpp</link>.</para>
<programlisting>05984 {&#32;<emphasis role="keywordflow">return</emphasis>&#32;C.kind;&#32;}
</programlisting><para>
Referenced by <link linkend="__c_index_8cpp_source_1l04118">clang_Cursor_Evaluate()</link>, <link linkend="__c_x_cursor_8cpp_source_1l01316">clang_Cursor_getNumTemplateArguments()</link>, <link linkend="__c_x_cursor_8cpp_source_1l01518">clang_getCursorCompletionString()</link>, and <link linkend="__c_index_u_s_rs_8cpp_source_1l00038">clang_getCursorUSR()</link>.</para>
    </section><anchor xml:id="__c_index_8cpp_1a667cf97e111be828ff2c36e23d583fce"/>    <section>
    <title>clang_getCursorKindSpelling()</title>
<indexterm><primary>clang_getCursorKindSpelling</primary><secondary>CIndex.cpp</secondary></indexterm>
<indexterm><primary>CIndex.cpp</primary><secondary>clang_getCursorKindSpelling</secondary></indexterm>
<para><computeroutput>CXString clang_getCursorKindSpelling (enum CXCursorKind Kind)</computeroutput></para><para>
Definition at line <link linkend="__c_index_8cpp_source_1l05208">5208</link> of file <link linkend="__c_index_8cpp_source">CIndex.cpp</link>.</para>
<programlisting>05208 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
05209 &#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(Kind)&#32;{
05210 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_FunctionDecl:
05211 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;FunctionDecl&quot;</emphasis>);
05212 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_TypedefDecl:
05213 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;TypedefDecl&quot;</emphasis>);
05214 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_EnumDecl:
05215 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;EnumDecl&quot;</emphasis>);
05216 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_EnumConstantDecl:
05217 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;EnumConstantDecl&quot;</emphasis>);
05218 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_StructDecl:
05219 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;StructDecl&quot;</emphasis>);
05220 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_UnionDecl:
05221 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;UnionDecl&quot;</emphasis>);
05222 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_ClassDecl:
05223 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;ClassDecl&quot;</emphasis>);
05224 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_FieldDecl:
05225 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;FieldDecl&quot;</emphasis>);
05226 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_VarDecl:
05227 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;VarDecl&quot;</emphasis>);
05228 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_ParmDecl:
05229 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;ParmDecl&quot;</emphasis>);
05230 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_ObjCInterfaceDecl:
05231 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;ObjCInterfaceDecl&quot;</emphasis>);
05232 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_ObjCCategoryDecl:
05233 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;ObjCCategoryDecl&quot;</emphasis>);
05234 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_ObjCProtocolDecl:
05235 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;ObjCProtocolDecl&quot;</emphasis>);
05236 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_ObjCPropertyDecl:
05237 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;ObjCPropertyDecl&quot;</emphasis>);
05238 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_ObjCIvarDecl:
05239 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;ObjCIvarDecl&quot;</emphasis>);
05240 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_ObjCInstanceMethodDecl:
05241 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;ObjCInstanceMethodDecl&quot;</emphasis>);
05242 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_ObjCClassMethodDecl:
05243 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;ObjCClassMethodDecl&quot;</emphasis>);
05244 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_ObjCImplementationDecl:
05245 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;ObjCImplementationDecl&quot;</emphasis>);
05246 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_ObjCCategoryImplDecl:
05247 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;ObjCCategoryImplDecl&quot;</emphasis>);
05248 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_CXXMethod:
05249 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;CXXMethod&quot;</emphasis>);
05250 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_UnexposedDecl:
05251 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;UnexposedDecl&quot;</emphasis>);
05252 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_ObjCSuperClassRef:
05253 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;ObjCSuperClassRef&quot;</emphasis>);
05254 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_ObjCProtocolRef:
05255 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;ObjCProtocolRef&quot;</emphasis>);
05256 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_ObjCClassRef:
05257 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;ObjCClassRef&quot;</emphasis>);
05258 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_TypeRef:
05259 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;TypeRef&quot;</emphasis>);
05260 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_TemplateRef:
05261 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;TemplateRef&quot;</emphasis>);
05262 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_NamespaceRef:
05263 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;NamespaceRef&quot;</emphasis>);
05264 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_MemberRef:
05265 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;MemberRef&quot;</emphasis>);
05266 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_LabelRef:
05267 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;LabelRef&quot;</emphasis>);
05268 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_OverloadedDeclRef:
05269 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;OverloadedDeclRef&quot;</emphasis>);
05270 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_VariableRef:
05271 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;VariableRef&quot;</emphasis>);
05272 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_IntegerLiteral:
05273 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;IntegerLiteral&quot;</emphasis>);
05274 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_FixedPointLiteral:
05275 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;FixedPointLiteral&quot;</emphasis>);
05276 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_FloatingLiteral:
05277 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;FloatingLiteral&quot;</emphasis>);
05278 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_ImaginaryLiteral:
05279 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;ImaginaryLiteral&quot;</emphasis>);
05280 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_StringLiteral:
05281 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;StringLiteral&quot;</emphasis>);
05282 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_CharacterLiteral:
05283 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;CharacterLiteral&quot;</emphasis>);
05284 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_ParenExpr:
05285 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;ParenExpr&quot;</emphasis>);
05286 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_UnaryOperator:
05287 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;UnaryOperator&quot;</emphasis>);
05288 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_ArraySubscriptExpr:
05289 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;ArraySubscriptExpr&quot;</emphasis>);
05290 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_OMPArraySectionExpr:
05291 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;OMPArraySectionExpr&quot;</emphasis>);
05292 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_OMPArrayShapingExpr:
05293 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;OMPArrayShapingExpr&quot;</emphasis>);
05294 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_OMPIteratorExpr:
05295 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;OMPIteratorExpr&quot;</emphasis>);
05296 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_BinaryOperator:
05297 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;BinaryOperator&quot;</emphasis>);
05298 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_CompoundAssignOperator:
05299 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;CompoundAssignOperator&quot;</emphasis>);
05300 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_ConditionalOperator:
05301 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;ConditionalOperator&quot;</emphasis>);
05302 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_CStyleCastExpr:
05303 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;CStyleCastExpr&quot;</emphasis>);
05304 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_CompoundLiteralExpr:
05305 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;CompoundLiteralExpr&quot;</emphasis>);
05306 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_InitListExpr:
05307 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;InitListExpr&quot;</emphasis>);
05308 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_AddrLabelExpr:
05309 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;AddrLabelExpr&quot;</emphasis>);
05310 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_StmtExpr:
05311 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;StmtExpr&quot;</emphasis>);
05312 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_GenericSelectionExpr:
05313 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;GenericSelectionExpr&quot;</emphasis>);
05314 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_GNUNullExpr:
05315 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;GNUNullExpr&quot;</emphasis>);
05316 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_CXXStaticCastExpr:
05317 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;CXXStaticCastExpr&quot;</emphasis>);
05318 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_CXXDynamicCastExpr:
05319 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;CXXDynamicCastExpr&quot;</emphasis>);
05320 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_CXXReinterpretCastExpr:
05321 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;CXXReinterpretCastExpr&quot;</emphasis>);
05322 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_CXXConstCastExpr:
05323 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;CXXConstCastExpr&quot;</emphasis>);
05324 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_CXXFunctionalCastExpr:
05325 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;CXXFunctionalCastExpr&quot;</emphasis>);
05326 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_CXXAddrspaceCastExpr:
05327 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;CXXAddrspaceCastExpr&quot;</emphasis>);
05328 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_CXXTypeidExpr:
05329 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;CXXTypeidExpr&quot;</emphasis>);
05330 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_CXXBoolLiteralExpr:
05331 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;CXXBoolLiteralExpr&quot;</emphasis>);
05332 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_CXXNullPtrLiteralExpr:
05333 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;CXXNullPtrLiteralExpr&quot;</emphasis>);
05334 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_CXXThisExpr:
05335 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;CXXThisExpr&quot;</emphasis>);
05336 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_CXXThrowExpr:
05337 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;CXXThrowExpr&quot;</emphasis>);
05338 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_CXXNewExpr:
05339 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;CXXNewExpr&quot;</emphasis>);
05340 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_CXXDeleteExpr:
05341 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;CXXDeleteExpr&quot;</emphasis>);
05342 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_UnaryExpr:
05343 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;UnaryExpr&quot;</emphasis>);
05344 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_ObjCStringLiteral:
05345 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;ObjCStringLiteral&quot;</emphasis>);
05346 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_ObjCBoolLiteralExpr:
05347 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;ObjCBoolLiteralExpr&quot;</emphasis>);
05348 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_ObjCAvailabilityCheckExpr:
05349 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;ObjCAvailabilityCheckExpr&quot;</emphasis>);
05350 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_ObjCSelfExpr:
05351 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;ObjCSelfExpr&quot;</emphasis>);
05352 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_ObjCEncodeExpr:
05353 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;ObjCEncodeExpr&quot;</emphasis>);
05354 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_ObjCSelectorExpr:
05355 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;ObjCSelectorExpr&quot;</emphasis>);
05356 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_ObjCProtocolExpr:
05357 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;ObjCProtocolExpr&quot;</emphasis>);
05358 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_ObjCBridgedCastExpr:
05359 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;ObjCBridgedCastExpr&quot;</emphasis>);
05360 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_BlockExpr:
05361 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;BlockExpr&quot;</emphasis>);
05362 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_PackExpansionExpr:
05363 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;PackExpansionExpr&quot;</emphasis>);
05364 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_SizeOfPackExpr:
05365 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;SizeOfPackExpr&quot;</emphasis>);
05366 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_LambdaExpr:
05367 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;LambdaExpr&quot;</emphasis>);
05368 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_UnexposedExpr:
05369 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;UnexposedExpr&quot;</emphasis>);
05370 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_DeclRefExpr:
05371 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;DeclRefExpr&quot;</emphasis>);
05372 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_MemberRefExpr:
05373 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;MemberRefExpr&quot;</emphasis>);
05374 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_CallExpr:
05375 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;CallExpr&quot;</emphasis>);
05376 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_ObjCMessageExpr:
05377 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;ObjCMessageExpr&quot;</emphasis>);
05378 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_BuiltinBitCastExpr:
05379 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;BuiltinBitCastExpr&quot;</emphasis>);
05380 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_UnexposedStmt:
05381 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;UnexposedStmt&quot;</emphasis>);
05382 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_DeclStmt:
05383 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;DeclStmt&quot;</emphasis>);
05384 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_LabelStmt:
05385 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;LabelStmt&quot;</emphasis>);
05386 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_CompoundStmt:
05387 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;CompoundStmt&quot;</emphasis>);
05388 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_CaseStmt:
05389 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;CaseStmt&quot;</emphasis>);
05390 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_DefaultStmt:
05391 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;DefaultStmt&quot;</emphasis>);
05392 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_IfStmt:
05393 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;IfStmt&quot;</emphasis>);
05394 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_SwitchStmt:
05395 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;SwitchStmt&quot;</emphasis>);
05396 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_WhileStmt:
05397 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;WhileStmt&quot;</emphasis>);
05398 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_DoStmt:
05399 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;DoStmt&quot;</emphasis>);
05400 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_ForStmt:
05401 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;ForStmt&quot;</emphasis>);
05402 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_GotoStmt:
05403 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;GotoStmt&quot;</emphasis>);
05404 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_IndirectGotoStmt:
05405 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;IndirectGotoStmt&quot;</emphasis>);
05406 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_ContinueStmt:
05407 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;ContinueStmt&quot;</emphasis>);
05408 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_BreakStmt:
05409 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;BreakStmt&quot;</emphasis>);
05410 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_ReturnStmt:
05411 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;ReturnStmt&quot;</emphasis>);
05412 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_GCCAsmStmt:
05413 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;GCCAsmStmt&quot;</emphasis>);
05414 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_MSAsmStmt:
05415 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;MSAsmStmt&quot;</emphasis>);
05416 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_ObjCAtTryStmt:
05417 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;ObjCAtTryStmt&quot;</emphasis>);
05418 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_ObjCAtCatchStmt:
05419 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;ObjCAtCatchStmt&quot;</emphasis>);
05420 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_ObjCAtFinallyStmt:
05421 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;ObjCAtFinallyStmt&quot;</emphasis>);
05422 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_ObjCAtThrowStmt:
05423 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;ObjCAtThrowStmt&quot;</emphasis>);
05424 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_ObjCAtSynchronizedStmt:
05425 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;ObjCAtSynchronizedStmt&quot;</emphasis>);
05426 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_ObjCAutoreleasePoolStmt:
05427 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;ObjCAutoreleasePoolStmt&quot;</emphasis>);
05428 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_ObjCForCollectionStmt:
05429 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;ObjCForCollectionStmt&quot;</emphasis>);
05430 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_CXXCatchStmt:
05431 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;CXXCatchStmt&quot;</emphasis>);
05432 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_CXXTryStmt:
05433 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;CXXTryStmt&quot;</emphasis>);
05434 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_CXXForRangeStmt:
05435 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;CXXForRangeStmt&quot;</emphasis>);
05436 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_SEHTryStmt:
05437 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;SEHTryStmt&quot;</emphasis>);
05438 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_SEHExceptStmt:
05439 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;SEHExceptStmt&quot;</emphasis>);
05440 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_SEHFinallyStmt:
05441 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;SEHFinallyStmt&quot;</emphasis>);
05442 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_SEHLeaveStmt:
05443 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;SEHLeaveStmt&quot;</emphasis>);
05444 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_NullStmt:
05445 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;NullStmt&quot;</emphasis>);
05446 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_InvalidFile:
05447 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;InvalidFile&quot;</emphasis>);
05448 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_InvalidCode:
05449 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;InvalidCode&quot;</emphasis>);
05450 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_NoDeclFound:
05451 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;NoDeclFound&quot;</emphasis>);
05452 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_NotImplemented:
05453 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;NotImplemented&quot;</emphasis>);
05454 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_TranslationUnit:
05455 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;TranslationUnit&quot;</emphasis>);
05456 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_UnexposedAttr:
05457 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;UnexposedAttr&quot;</emphasis>);
05458 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_IBActionAttr:
05459 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;attribute(ibaction)&quot;</emphasis>);
05460 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_IBOutletAttr:
05461 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;attribute(iboutlet)&quot;</emphasis>);
05462 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_IBOutletCollectionAttr:
05463 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;attribute(iboutletcollection)&quot;</emphasis>);
05464 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_CXXFinalAttr:
05465 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;attribute(final)&quot;</emphasis>);
05466 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_CXXOverrideAttr:
05467 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;attribute(override)&quot;</emphasis>);
05468 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_AnnotateAttr:
05469 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;attribute(annotate)&quot;</emphasis>);
05470 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_AsmLabelAttr:
05471 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;asm&#32;label&quot;</emphasis>);
05472 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_PackedAttr:
05473 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;attribute(packed)&quot;</emphasis>);
05474 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_PureAttr:
05475 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;attribute(pure)&quot;</emphasis>);
05476 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_ConstAttr:
05477 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;attribute(const)&quot;</emphasis>);
05478 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_NoDuplicateAttr:
05479 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;attribute(noduplicate)&quot;</emphasis>);
05480 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_CUDAConstantAttr:
05481 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;attribute(constant)&quot;</emphasis>);
05482 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_CUDADeviceAttr:
05483 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;attribute(device)&quot;</emphasis>);
05484 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_CUDAGlobalAttr:
05485 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;attribute(global)&quot;</emphasis>);
05486 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_CUDAHostAttr:
05487 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;attribute(host)&quot;</emphasis>);
05488 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_CUDASharedAttr:
05489 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;attribute(shared)&quot;</emphasis>);
05490 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_VisibilityAttr:
05491 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;attribute(visibility)&quot;</emphasis>);
05492 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_DLLExport:
05493 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;attribute(dllexport)&quot;</emphasis>);
05494 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_DLLImport:
05495 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;attribute(dllimport)&quot;</emphasis>);
05496 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_NSReturnsRetained:
05497 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;attribute(ns_returns_retained)&quot;</emphasis>);
05498 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_NSReturnsNotRetained:
05499 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;attribute(ns_returns_not_retained)&quot;</emphasis>);
05500 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_NSReturnsAutoreleased:
05501 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;attribute(ns_returns_autoreleased)&quot;</emphasis>);
05502 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_NSConsumesSelf:
05503 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;attribute(ns_consumes_self)&quot;</emphasis>);
05504 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_NSConsumed:
05505 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;attribute(ns_consumed)&quot;</emphasis>);
05506 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_ObjCException:
05507 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;attribute(objc_exception)&quot;</emphasis>);
05508 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_ObjCNSObject:
05509 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;attribute(NSObject)&quot;</emphasis>);
05510 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_ObjCIndependentClass:
05511 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;attribute(objc_independent_class)&quot;</emphasis>);
05512 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_ObjCPreciseLifetime:
05513 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;attribute(objc_precise_lifetime)&quot;</emphasis>);
05514 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_ObjCReturnsInnerPointer:
05515 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;attribute(objc_returns_inner_pointer)&quot;</emphasis>);
05516 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_ObjCRequiresSuper:
05517 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;attribute(objc_requires_super)&quot;</emphasis>);
05518 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_ObjCRootClass:
05519 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;attribute(objc_root_class)&quot;</emphasis>);
05520 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_ObjCSubclassingRestricted:
05521 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;attribute(objc_subclassing_restricted)&quot;</emphasis>);
05522 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_ObjCExplicitProtocolImpl:
05523 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(
05524 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;attribute(objc_protocol_requires_explicit_implementation)&quot;</emphasis>);
05525 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_ObjCDesignatedInitializer:
05526 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;attribute(objc_designated_initializer)&quot;</emphasis>);
05527 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_ObjCRuntimeVisible:
05528 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;attribute(objc_runtime_visible)&quot;</emphasis>);
05529 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_ObjCBoxable:
05530 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;attribute(objc_boxable)&quot;</emphasis>);
05531 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_FlagEnum:
05532 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;attribute(flag_enum)&quot;</emphasis>);
05533 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_PreprocessingDirective:
05534 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;preprocessing&#32;directive&quot;</emphasis>);
05535 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_MacroDefinition:
05536 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;macro&#32;definition&quot;</emphasis>);
05537 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_MacroExpansion:
05538 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;macro&#32;expansion&quot;</emphasis>);
05539 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_InclusionDirective:
05540 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;inclusion&#32;directive&quot;</emphasis>);
05541 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_Namespace:
05542 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;Namespace&quot;</emphasis>);
05543 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_LinkageSpec:
05544 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;LinkageSpec&quot;</emphasis>);
05545 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_CXXBaseSpecifier:
05546 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;C++&#32;base&#32;class&#32;specifier&quot;</emphasis>);
05547 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_Constructor:
05548 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;CXXConstructor&quot;</emphasis>);
05549 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_Destructor:
05550 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;CXXDestructor&quot;</emphasis>);
05551 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_ConversionFunction:
05552 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;CXXConversion&quot;</emphasis>);
05553 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_TemplateTypeParameter:
05554 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;TemplateTypeParameter&quot;</emphasis>);
05555 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_NonTypeTemplateParameter:
05556 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;NonTypeTemplateParameter&quot;</emphasis>);
05557 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_TemplateTemplateParameter:
05558 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;TemplateTemplateParameter&quot;</emphasis>);
05559 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_FunctionTemplate:
05560 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;FunctionTemplate&quot;</emphasis>);
05561 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_ClassTemplate:
05562 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;ClassTemplate&quot;</emphasis>);
05563 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_ClassTemplatePartialSpecialization:
05564 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;ClassTemplatePartialSpecialization&quot;</emphasis>);
05565 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_NamespaceAlias:
05566 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;NamespaceAlias&quot;</emphasis>);
05567 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_UsingDirective:
05568 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;UsingDirective&quot;</emphasis>);
05569 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_UsingDeclaration:
05570 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;UsingDeclaration&quot;</emphasis>);
05571 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_TypeAliasDecl:
05572 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;TypeAliasDecl&quot;</emphasis>);
05573 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_ObjCSynthesizeDecl:
05574 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;ObjCSynthesizeDecl&quot;</emphasis>);
05575 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_ObjCDynamicDecl:
05576 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;ObjCDynamicDecl&quot;</emphasis>);
05577 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_CXXAccessSpecifier:
05578 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;CXXAccessSpecifier&quot;</emphasis>);
05579 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_ModuleImportDecl:
05580 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;ModuleImport&quot;</emphasis>);
05581 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_OMPCanonicalLoop:
05582 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;OMPCanonicalLoop&quot;</emphasis>);
05583 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_OMPParallelDirective:
05584 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;OMPParallelDirective&quot;</emphasis>);
05585 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_OMPSimdDirective:
05586 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;OMPSimdDirective&quot;</emphasis>);
05587 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_OMPTileDirective:
05588 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;OMPTileDirective&quot;</emphasis>);
05589 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_OMPUnrollDirective:
05590 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;OMPUnrollDirective&quot;</emphasis>);
05591 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_OMPForDirective:
05592 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;OMPForDirective&quot;</emphasis>);
05593 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_OMPForSimdDirective:
05594 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;OMPForSimdDirective&quot;</emphasis>);
05595 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_OMPSectionsDirective:
05596 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;OMPSectionsDirective&quot;</emphasis>);
05597 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_OMPSectionDirective:
05598 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;OMPSectionDirective&quot;</emphasis>);
05599 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_OMPSingleDirective:
05600 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;OMPSingleDirective&quot;</emphasis>);
05601 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_OMPMasterDirective:
05602 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;OMPMasterDirective&quot;</emphasis>);
05603 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_OMPCriticalDirective:
05604 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;OMPCriticalDirective&quot;</emphasis>);
05605 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_OMPParallelForDirective:
05606 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;OMPParallelForDirective&quot;</emphasis>);
05607 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_OMPParallelForSimdDirective:
05608 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;OMPParallelForSimdDirective&quot;</emphasis>);
05609 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_OMPParallelMasterDirective:
05610 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;OMPParallelMasterDirective&quot;</emphasis>);
05611 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_OMPParallelSectionsDirective:
05612 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;OMPParallelSectionsDirective&quot;</emphasis>);
05613 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_OMPTaskDirective:
05614 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;OMPTaskDirective&quot;</emphasis>);
05615 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_OMPTaskyieldDirective:
05616 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;OMPTaskyieldDirective&quot;</emphasis>);
05617 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_OMPBarrierDirective:
05618 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;OMPBarrierDirective&quot;</emphasis>);
05619 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_OMPTaskwaitDirective:
05620 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;OMPTaskwaitDirective&quot;</emphasis>);
05621 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_OMPTaskgroupDirective:
05622 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;OMPTaskgroupDirective&quot;</emphasis>);
05623 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_OMPFlushDirective:
05624 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;OMPFlushDirective&quot;</emphasis>);
05625 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_OMPDepobjDirective:
05626 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;OMPDepobjDirective&quot;</emphasis>);
05627 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_OMPScanDirective:
05628 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;OMPScanDirective&quot;</emphasis>);
05629 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_OMPOrderedDirective:
05630 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;OMPOrderedDirective&quot;</emphasis>);
05631 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_OMPAtomicDirective:
05632 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;OMPAtomicDirective&quot;</emphasis>);
05633 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_OMPTargetDirective:
05634 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;OMPTargetDirective&quot;</emphasis>);
05635 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_OMPTargetDataDirective:
05636 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;OMPTargetDataDirective&quot;</emphasis>);
05637 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_OMPTargetEnterDataDirective:
05638 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;OMPTargetEnterDataDirective&quot;</emphasis>);
05639 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_OMPTargetExitDataDirective:
05640 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;OMPTargetExitDataDirective&quot;</emphasis>);
05641 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_OMPTargetParallelDirective:
05642 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;OMPTargetParallelDirective&quot;</emphasis>);
05643 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_OMPTargetParallelForDirective:
05644 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;OMPTargetParallelForDirective&quot;</emphasis>);
05645 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_OMPTargetUpdateDirective:
05646 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;OMPTargetUpdateDirective&quot;</emphasis>);
05647 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_OMPTeamsDirective:
05648 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;OMPTeamsDirective&quot;</emphasis>);
05649 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_OMPCancellationPointDirective:
05650 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;OMPCancellationPointDirective&quot;</emphasis>);
05651 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_OMPCancelDirective:
05652 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;OMPCancelDirective&quot;</emphasis>);
05653 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_OMPTaskLoopDirective:
05654 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;OMPTaskLoopDirective&quot;</emphasis>);
05655 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_OMPTaskLoopSimdDirective:
05656 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;OMPTaskLoopSimdDirective&quot;</emphasis>);
05657 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_OMPMasterTaskLoopDirective:
05658 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;OMPMasterTaskLoopDirective&quot;</emphasis>);
05659 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_OMPMasterTaskLoopSimdDirective:
05660 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;OMPMasterTaskLoopSimdDirective&quot;</emphasis>);
05661 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_OMPParallelMasterTaskLoopDirective:
05662 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;OMPParallelMasterTaskLoopDirective&quot;</emphasis>);
05663 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_OMPParallelMasterTaskLoopSimdDirective:
05664 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;OMPParallelMasterTaskLoopSimdDirective&quot;</emphasis>);
05665 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_OMPDistributeDirective:
05666 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;OMPDistributeDirective&quot;</emphasis>);
05667 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_OMPDistributeParallelForDirective:
05668 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;OMPDistributeParallelForDirective&quot;</emphasis>);
05669 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_OMPDistributeParallelForSimdDirective:
05670 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;OMPDistributeParallelForSimdDirective&quot;</emphasis>);
05671 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_OMPDistributeSimdDirective:
05672 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;OMPDistributeSimdDirective&quot;</emphasis>);
05673 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_OMPTargetParallelForSimdDirective:
05674 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;OMPTargetParallelForSimdDirective&quot;</emphasis>);
05675 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_OMPTargetSimdDirective:
05676 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;OMPTargetSimdDirective&quot;</emphasis>);
05677 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_OMPTeamsDistributeDirective:
05678 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;OMPTeamsDistributeDirective&quot;</emphasis>);
05679 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_OMPTeamsDistributeSimdDirective:
05680 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;OMPTeamsDistributeSimdDirective&quot;</emphasis>);
05681 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_OMPTeamsDistributeParallelForSimdDirective:
05682 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;OMPTeamsDistributeParallelForSimdDirective&quot;</emphasis>);
05683 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_OMPTeamsDistributeParallelForDirective:
05684 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;OMPTeamsDistributeParallelForDirective&quot;</emphasis>);
05685 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_OMPTargetTeamsDirective:
05686 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;OMPTargetTeamsDirective&quot;</emphasis>);
05687 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_OMPTargetTeamsDistributeDirective:
05688 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;OMPTargetTeamsDistributeDirective&quot;</emphasis>);
05689 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_OMPTargetTeamsDistributeParallelForDirective:
05690 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;OMPTargetTeamsDistributeParallelForDirective&quot;</emphasis>);
05691 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_OMPTargetTeamsDistributeParallelForSimdDirective:
05692 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(
05693 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;OMPTargetTeamsDistributeParallelForSimdDirective&quot;</emphasis>);
05694 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_OMPTargetTeamsDistributeSimdDirective:
05695 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;OMPTargetTeamsDistributeSimdDirective&quot;</emphasis>);
05696 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_OMPInteropDirective:
05697 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;OMPInteropDirective&quot;</emphasis>);
05698 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_OMPDispatchDirective:
05699 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;OMPDispatchDirective&quot;</emphasis>);
05700 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_OMPMaskedDirective:
05701 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;OMPMaskedDirective&quot;</emphasis>);
05702 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_OverloadCandidate:
05703 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;OverloadCandidate&quot;</emphasis>);
05704 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_TypeAliasTemplateDecl:
05705 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;TypeAliasTemplateDecl&quot;</emphasis>);
05706 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_StaticAssert:
05707 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;StaticAssert&quot;</emphasis>);
05708 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_FriendDecl:
05709 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;FriendDecl&quot;</emphasis>);
05710 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_ConvergentAttr:
05711 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;attribute(convergent)&quot;</emphasis>);
05712 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_WarnUnusedAttr:
05713 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;attribute(warn_unused)&quot;</emphasis>);
05714 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_WarnUnusedResultAttr:
05715 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;attribute(warn_unused_result)&quot;</emphasis>);
05716 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_AlignedAttr:
05717 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;attribute(aligned)&quot;</emphasis>);
05718 &#32;&#32;}
05719 
05720 &#32;&#32;llvm_unreachable(<emphasis role="stringliteral">&quot;Unhandled&#32;CXCursorKind&quot;</emphasis>);
05721 }
</programlisting><para>
References <link linkend="__c_x_string_8cpp_source_1l00057">clang::cxstring::createRef()</link>.</para>
    </section><anchor xml:id="__c_index_8cpp_1ad639f449c1c95d38ca5b5e283e72b40d"/>    <section>
    <title>clang_getCursorLanguage()</title>
<indexterm><primary>clang_getCursorLanguage</primary><secondary>CIndex.cpp</secondary></indexterm>
<indexterm><primary>CIndex.cpp</primary><secondary>clang_getCursorLanguage</secondary></indexterm>
<para><computeroutput>CXLanguageKind clang_getCursorLanguage (CXCursor cursor)</computeroutput></para><para>
Definition at line <link linkend="__c_index_8cpp_source_1l08147">8147</link> of file <link linkend="__c_index_8cpp_source">CIndex.cpp</link>.</para>
<programlisting>08147 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
08148 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="__c_index_8cpp_1a5d47db8f608ae0c266d6551875d46b80">clang_isDeclaration</link>(cursor.kind))
08149 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;getDeclLanguage(<link linkend="_namespaceclang_1_1cxcursor_1a1f702246831c96afd990e457613dc642">cxcursor::getCursorDecl</link>(cursor));
08150 
08151 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;CXLanguage_Invalid;
08152 }
</programlisting><para>
References <link linkend="__c_index_8cpp_source_1l05934">clang_isDeclaration()</link>.</para>
    </section><anchor xml:id="__c_index_8cpp_1a777ad61fbe329a32f0478dd71cdeca61"/>    <section>
    <title>clang_getCursorLexicalParent()</title>
<indexterm><primary>clang_getCursorLexicalParent</primary><secondary>CIndex.cpp</secondary></indexterm>
<indexterm><primary>CIndex.cpp</primary><secondary>clang_getCursorLexicalParent</secondary></indexterm>
<para><computeroutput>CXCursor clang_getCursorLexicalParent (CXCursor cursor)</computeroutput></para><para>
Definition at line <link linkend="__c_index_8cpp_source_1l08239">8239</link> of file <link linkend="__c_index_8cpp_source">CIndex.cpp</link>.</para>
<programlisting>08239 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
08240 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="__c_index_8cpp_1a5d47db8f608ae0c266d6551875d46b80">clang_isDeclaration</link>(cursor.kind))&#32;{
08241 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;Decl&#32;*D&#32;=&#32;<link linkend="_namespaceclang_1_1cxcursor_1a1f702246831c96afd990e457613dc642">getCursorDecl</link>(cursor))&#32;{
08242 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;DeclContext&#32;*DC&#32;=&#32;D-&gt;getLexicalDeclContext();
08243 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!DC)
08244 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__c_index_8cpp_1aa22233466eaf91f6f3cf6b84255c3b68">clang_getNullCursor</link>();
08245 
08246 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxcursor_1ab61ec2059175833672e8e78a376bb218">MakeCXCursor</link>(maybeGetTemplateCursor(cast&lt;Decl&gt;(DC)),
08247 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespaceclang_1_1cxcursor_1a23a495df22339e8289ae6d2421f493b6">getCursorTU</link>(cursor));
08248 &#32;&#32;&#32;&#32;}
08249 &#32;&#32;}
08250 
08251 &#32;&#32;<emphasis role="comment">//&#32;FIXME:&#32;Note&#32;that&#32;we&#32;can&apos;t&#32;easily&#32;compute&#32;the&#32;lexical&#32;context&#32;of&#32;a</emphasis>
08252 &#32;&#32;<emphasis role="comment">//&#32;statement&#32;or&#32;expression,&#32;so&#32;we&#32;return&#32;nothing.</emphasis>
08253 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__c_index_8cpp_1aa22233466eaf91f6f3cf6b84255c3b68">clang_getNullCursor</link>();
08254 }
</programlisting><para>
References <link linkend="__c_index_8cpp_source_1l05901">clang_getNullCursor()</link>, <link linkend="__c_index_8cpp_source_1l05934">clang_isDeclaration()</link>, <link linkend="__c_x_cursor_8cpp_source_1l01101">clang::cxcursor::getCursorDecl()</link>, and <link linkend="_namespaceclang_1_1cxcursor_1ab61ec2059175833672e8e78a376bb218">clang::cxcursor::MakeCXCursor()</link>.</para>
    </section><anchor xml:id="__c_index_8cpp_1a40ce3c0e400584ea807e89d96aa6a3f7"/>    <section>
    <title>clang_getCursorLinkage()</title>
<indexterm><primary>clang_getCursorLinkage</primary><secondary>CIndex.cpp</secondary></indexterm>
<indexterm><primary>CIndex.cpp</primary><secondary>clang_getCursorLinkage</secondary></indexterm>
<para><computeroutput>CXLinkageKind clang_getCursorLinkage (CXCursor cursor)</computeroutput></para><para>
Definition at line <link linkend="__c_index_8cpp_source_1l07857">7857</link> of file <link linkend="__c_index_8cpp_source">CIndex.cpp</link>.</para>
<programlisting>07857 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
07858 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!<link linkend="__c_index_8cpp_1a5d47db8f608ae0c266d6551875d46b80">clang_isDeclaration</link>(cursor.kind))
07859 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;CXLinkage_Invalid;
07860 
07861 &#32;&#32;<emphasis role="keyword">const</emphasis>&#32;Decl&#32;*D&#32;=&#32;<link linkend="_namespaceclang_1_1cxcursor_1a1f702246831c96afd990e457613dc642">cxcursor::getCursorDecl</link>(cursor);
07862 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;NamedDecl&#32;*ND&#32;=&#32;dyn_cast_or_null&lt;NamedDecl&gt;(D))
07863 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(ND-&gt;getLinkageInternal())&#32;{
07864 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;NoLinkage:
07865 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;VisibleNoLinkage:
07866 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;CXLinkage_NoLinkage;
07867 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;ModuleInternalLinkage:
07868 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;InternalLinkage:
07869 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;CXLinkage_Internal;
07870 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;UniqueExternalLinkage:
07871 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;CXLinkage_UniqueExternal;
07872 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;ModuleLinkage:
07873 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;ExternalLinkage:
07874 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;CXLinkage_External;
07875 &#32;&#32;&#32;&#32;};
07876 
07877 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;CXLinkage_Invalid;
07878 }
</programlisting><para>
References <link linkend="__c_index_8cpp_source_1l05934">clang_isDeclaration()</link>, and <link linkend="__c_x_cursor_8cpp_source_1l01101">clang::cxcursor::getCursorDecl()</link>.</para>
    </section><anchor xml:id="__c_index_8cpp_1a98001a3f8eb3a76d9c12821c45ef3708"/>    <section>
    <title>clang_getCursorLocation()</title>
<indexterm><primary>clang_getCursorLocation</primary><secondary>CIndex.cpp</secondary></indexterm>
<indexterm><primary>CIndex.cpp</primary><secondary>clang_getCursorLocation</secondary></indexterm>
<para><computeroutput>CXSourceLocation clang_getCursorLocation (CXCursor C)</computeroutput></para><para>
Definition at line <link linkend="__c_index_8cpp_source_1l05986">5986</link> of file <link linkend="__c_index_8cpp_source">CIndex.cpp</link>.</para>
<programlisting>05986 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
05987 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="__c_index_8cpp_1a8b03541653a9373d35919c45216bc70f">clang_isReference</link>(C.kind))&#32;{
05988 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(C.kind)&#32;{
05989 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_ObjCSuperClassRef:&#32;{
05990 &#32;&#32;&#32;&#32;&#32;&#32;std::pair&lt;const&#32;ObjCInterfaceDecl&#32;*,&#32;SourceLocation&gt;&#32;P&#32;=
05991 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespaceclang_1_1cxcursor_1a071683bc881399c3bcadba5a4da408b2">getCursorObjCSuperClassRef</link>(C);
05992 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;cxloc::translateSourceLocation(P.first-&gt;getASTContext(),&#32;P.second);
05993 &#32;&#32;&#32;&#32;}
05994 
05995 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_ObjCProtocolRef:&#32;{
05996 &#32;&#32;&#32;&#32;&#32;&#32;std::pair&lt;const&#32;ObjCProtocolDecl&#32;*,&#32;SourceLocation&gt;&#32;P&#32;=
05997 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespaceclang_1_1cxcursor_1a1675d17bfec653da314fa2beff772829">getCursorObjCProtocolRef</link>(C);
05998 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;cxloc::translateSourceLocation(P.first-&gt;getASTContext(),&#32;P.second);
05999 &#32;&#32;&#32;&#32;}
06000 
06001 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_ObjCClassRef:&#32;{
06002 &#32;&#32;&#32;&#32;&#32;&#32;std::pair&lt;const&#32;ObjCInterfaceDecl&#32;*,&#32;SourceLocation&gt;&#32;P&#32;=
06003 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespaceclang_1_1cxcursor_1ad21fba4a3d5f6bdc63a19303b1cb42a3">getCursorObjCClassRef</link>(C);
06004 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;cxloc::translateSourceLocation(P.first-&gt;getASTContext(),&#32;P.second);
06005 &#32;&#32;&#32;&#32;}
06006 
06007 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_TypeRef:&#32;{
06008 &#32;&#32;&#32;&#32;&#32;&#32;std::pair&lt;const&#32;TypeDecl&#32;*,&#32;SourceLocation&gt;&#32;P&#32;=&#32;<link linkend="_namespaceclang_1_1cxcursor_1ab0284c10c2cfeb2ffe43b99ec3e9dd9f">getCursorTypeRef</link>(C);
06009 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;cxloc::translateSourceLocation(P.first-&gt;getASTContext(),&#32;P.second);
06010 &#32;&#32;&#32;&#32;}
06011 
06012 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_TemplateRef:&#32;{
06013 &#32;&#32;&#32;&#32;&#32;&#32;std::pair&lt;const&#32;TemplateDecl&#32;*,&#32;SourceLocation&gt;&#32;P&#32;=
06014 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespaceclang_1_1cxcursor_1aacf77fc4aabf02cfa865e6fe19e55d08">getCursorTemplateRef</link>(C);
06015 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;cxloc::translateSourceLocation(P.first-&gt;getASTContext(),&#32;P.second);
06016 &#32;&#32;&#32;&#32;}
06017 
06018 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_NamespaceRef:&#32;{
06019 &#32;&#32;&#32;&#32;&#32;&#32;std::pair&lt;const&#32;NamedDecl&#32;*,&#32;SourceLocation&gt;&#32;P&#32;=&#32;<link linkend="_namespaceclang_1_1cxcursor_1ac87835a4525ca9f54e4666e7b76ec6f6">getCursorNamespaceRef</link>(C);
06020 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;cxloc::translateSourceLocation(P.first-&gt;getASTContext(),&#32;P.second);
06021 &#32;&#32;&#32;&#32;}
06022 
06023 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_MemberRef:&#32;{
06024 &#32;&#32;&#32;&#32;&#32;&#32;std::pair&lt;const&#32;FieldDecl&#32;*,&#32;SourceLocation&gt;&#32;P&#32;=&#32;<link linkend="_namespaceclang_1_1cxcursor_1af3f3d2390bed39285f0b3313c1fab84b">getCursorMemberRef</link>(C);
06025 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;cxloc::translateSourceLocation(P.first-&gt;getASTContext(),&#32;P.second);
06026 &#32;&#32;&#32;&#32;}
06027 
06028 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_VariableRef:&#32;{
06029 &#32;&#32;&#32;&#32;&#32;&#32;std::pair&lt;const&#32;VarDecl&#32;*,&#32;SourceLocation&gt;&#32;P&#32;=&#32;<link linkend="_namespaceclang_1_1cxcursor_1a53fa4c4c92a2fbaded59ad51eeed6e47">getCursorVariableRef</link>(C);
06030 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;cxloc::translateSourceLocation(P.first-&gt;getASTContext(),&#32;P.second);
06031 &#32;&#32;&#32;&#32;}
06032 
06033 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_CXXBaseSpecifier:&#32;{
06034 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;CXXBaseSpecifier&#32;*BaseSpec&#32;=&#32;<link linkend="_namespaceclang_1_1cxcursor_1a05b387c1d9aeb75b3de539f8622e0964">getCursorCXXBaseSpecifier</link>(C);
06035 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!BaseSpec)
06036 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__c_x_source_location_8cpp_1a20bb1e9a72e2c16fbcb21958f0648947">clang_getNullLocation</link>();
06037 
06038 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(TypeSourceInfo&#32;*TSInfo&#32;=&#32;BaseSpec-&gt;getTypeSourceInfo())
06039 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;cxloc::translateSourceLocation(
06040 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespaceclang_1_1cxcursor_1a9f29c286f26b3cf616331c7e6554d373">getCursorContext</link>(C),&#32;TSInfo-&gt;getTypeLoc().getBeginLoc());
06041 
06042 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;cxloc::translateSourceLocation(<link linkend="_namespaceclang_1_1cxcursor_1a9f29c286f26b3cf616331c7e6554d373">getCursorContext</link>(C),
06043 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;BaseSpec-&gt;getBeginLoc());
06044 &#32;&#32;&#32;&#32;}
06045 
06046 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_LabelRef:&#32;{
06047 &#32;&#32;&#32;&#32;&#32;&#32;std::pair&lt;const&#32;LabelStmt&#32;*,&#32;SourceLocation&gt;&#32;P&#32;=&#32;<link linkend="_namespaceclang_1_1cxcursor_1a642e34370b829d06752d76d13c6a58dd">getCursorLabelRef</link>(C);
06048 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;cxloc::translateSourceLocation(<link linkend="_namespaceclang_1_1cxcursor_1a9f29c286f26b3cf616331c7e6554d373">getCursorContext</link>(C),&#32;P.second);
06049 &#32;&#32;&#32;&#32;}
06050 
06051 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_OverloadedDeclRef:
06052 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;cxloc::translateSourceLocation(
06053 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespaceclang_1_1cxcursor_1a9f29c286f26b3cf616331c7e6554d373">getCursorContext</link>(C),&#32;<link linkend="_namespaceclang_1_1cxcursor_1a4b41e93d6de24aed1376ec7f789efa2a">getCursorOverloadedDeclRef</link>(C).second);
06054 
06055 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">default</emphasis>:
06056 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;FIXME:&#32;Need&#32;a&#32;way&#32;to&#32;enumerate&#32;all&#32;non-reference&#32;cases.</emphasis>
06057 &#32;&#32;&#32;&#32;&#32;&#32;llvm_unreachable(<emphasis role="stringliteral">&quot;Missed&#32;a&#32;reference&#32;kind&quot;</emphasis>);
06058 &#32;&#32;&#32;&#32;}
06059 &#32;&#32;}
06060 
06061 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="__c_index_8cpp_1ab958945dd59c351e1ae1a3f7f5668095">clang_isExpression</link>(C.kind))
06062 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;cxloc::translateSourceLocation(
06063 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespaceclang_1_1cxcursor_1a9f29c286f26b3cf616331c7e6554d373">getCursorContext</link>(C),&#32;getLocationFromExpr(<link linkend="_namespaceclang_1_1cxcursor_1a80837a3710c6df0dfc24b5ee1d94ff9b">getCursorExpr</link>(C)));
06064 
06065 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="__c_index_8cpp_1af186bec30eb4cb63c3a7a295ccbcfe8b">clang_isStatement</link>(C.kind))
06066 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;cxloc::translateSourceLocation(<link linkend="_namespaceclang_1_1cxcursor_1a9f29c286f26b3cf616331c7e6554d373">getCursorContext</link>(C),
06067 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespaceclang_1_1cxcursor_1a2d5cb233204f81be58bd21deb628c7ad">getCursorStmt</link>(C)-&gt;getBeginLoc());
06068 
06069 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(C.kind&#32;==&#32;CXCursor_PreprocessingDirective)&#32;{
06070 &#32;&#32;&#32;&#32;SourceLocation&#32;L&#32;=&#32;<link linkend="_namespaceclang_1_1cxcursor_1ad23bd48471b18d4d196d9777f3943e25">cxcursor::getCursorPreprocessingDirective</link>(C).getBegin();
06071 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;cxloc::translateSourceLocation(<link linkend="_namespaceclang_1_1cxcursor_1a9f29c286f26b3cf616331c7e6554d373">getCursorContext</link>(C),&#32;L);
06072 &#32;&#32;}
06073 
06074 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(C.kind&#32;==&#32;CXCursor_MacroExpansion)&#32;{
06075 &#32;&#32;&#32;&#32;SourceLocation&#32;L&#32;=
06076 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cxcursor::getCursorMacroExpansion(C).getSourceRange().getBegin();
06077 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;cxloc::translateSourceLocation(<link linkend="_namespaceclang_1_1cxcursor_1a9f29c286f26b3cf616331c7e6554d373">getCursorContext</link>(C),&#32;L);
06078 &#32;&#32;}
06079 
06080 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(C.kind&#32;==&#32;CXCursor_MacroDefinition)&#32;{
06081 &#32;&#32;&#32;&#32;SourceLocation&#32;L&#32;=&#32;<link linkend="_namespaceclang_1_1cxcursor_1a62254c8ae8eca4c0ca0f2d2a659e7d80">cxcursor::getCursorMacroDefinition</link>(C)-&gt;getLocation();
06082 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;cxloc::translateSourceLocation(<link linkend="_namespaceclang_1_1cxcursor_1a9f29c286f26b3cf616331c7e6554d373">getCursorContext</link>(C),&#32;L);
06083 &#32;&#32;}
06084 
06085 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(C.kind&#32;==&#32;CXCursor_InclusionDirective)&#32;{
06086 &#32;&#32;&#32;&#32;SourceLocation&#32;L&#32;=
06087 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespaceclang_1_1cxcursor_1a3894d584fef6edb8ba4333fc240315ac">cxcursor::getCursorInclusionDirective</link>(C)-&gt;getSourceRange().getBegin();
06088 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;cxloc::translateSourceLocation(<link linkend="_namespaceclang_1_1cxcursor_1a9f29c286f26b3cf616331c7e6554d373">getCursorContext</link>(C),&#32;L);
06089 &#32;&#32;}
06090 
06091 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="__c_index_8cpp_1ab407667e249e0d44e6c56af84f2c28ba">clang_isAttribute</link>(C.kind))&#32;{
06092 &#32;&#32;&#32;&#32;SourceLocation&#32;L&#32;=&#32;<link linkend="_namespaceclang_1_1cxcursor_1afdc6aa952869e16b4981b07f05adff7f">cxcursor::getCursorAttr</link>(C)-&gt;getLocation();
06093 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;cxloc::translateSourceLocation(<link linkend="_namespaceclang_1_1cxcursor_1a9f29c286f26b3cf616331c7e6554d373">getCursorContext</link>(C),&#32;L);
06094 &#32;&#32;}
06095 
06096 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!<link linkend="__c_index_8cpp_1a5d47db8f608ae0c266d6551875d46b80">clang_isDeclaration</link>(C.kind))
06097 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__c_x_source_location_8cpp_1a20bb1e9a72e2c16fbcb21958f0648947">clang_getNullLocation</link>();
06098 
06099 &#32;&#32;<emphasis role="keyword">const</emphasis>&#32;Decl&#32;*D&#32;=&#32;<link linkend="_namespaceclang_1_1cxcursor_1a1f702246831c96afd990e457613dc642">getCursorDecl</link>(C);
06100 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!D)
06101 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__c_x_source_location_8cpp_1a20bb1e9a72e2c16fbcb21958f0648947">clang_getNullLocation</link>();
06102 
06103 &#32;&#32;SourceLocation&#32;Loc&#32;=&#32;D-&gt;getLocation();
06104 &#32;&#32;<emphasis role="comment">//&#32;FIXME:&#32;Multiple&#32;variables&#32;declared&#32;in&#32;a&#32;single&#32;declaration</emphasis>
06105 &#32;&#32;<emphasis role="comment">//&#32;currently&#32;lack&#32;the&#32;information&#32;needed&#32;to&#32;correctly&#32;determine&#32;their</emphasis>
06106 &#32;&#32;<emphasis role="comment">//&#32;ranges&#32;when&#32;accounting&#32;for&#32;the&#32;type-specifier.&#32;&#32;We&#32;use&#32;context</emphasis>
06107 &#32;&#32;<emphasis role="comment">//&#32;stored&#32;in&#32;the&#32;CXCursor&#32;to&#32;determine&#32;if&#32;the&#32;VarDecl&#32;is&#32;in&#32;a&#32;DeclGroup,</emphasis>
06108 &#32;&#32;<emphasis role="comment">//&#32;and&#32;if&#32;so,&#32;whether&#32;it&#32;is&#32;the&#32;first&#32;decl.</emphasis>
06109 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;VarDecl&#32;*VD&#32;=&#32;dyn_cast&lt;VarDecl&gt;(D))&#32;{
06110 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!<link linkend="_namespaceclang_1_1cxcursor_1a1ae32d54126c07eca2ab10d9ce40af7c">cxcursor::isFirstInDeclGroup</link>(C))
06111 &#32;&#32;&#32;&#32;&#32;&#32;Loc&#32;=&#32;VD-&gt;getLocation();
06112 &#32;&#32;}
06113 
06114 &#32;&#32;<emphasis role="comment">//&#32;For&#32;ObjC&#32;methods,&#32;give&#32;the&#32;start&#32;location&#32;of&#32;the&#32;method&#32;name.</emphasis>
06115 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;ObjCMethodDecl&#32;*MD&#32;=&#32;dyn_cast&lt;ObjCMethodDecl&gt;(D))
06116 &#32;&#32;&#32;&#32;Loc&#32;=&#32;MD-&gt;getSelectorStartLoc();
06117 
06118 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;cxloc::translateSourceLocation(<link linkend="_namespaceclang_1_1cxcursor_1a9f29c286f26b3cf616331c7e6554d373">getCursorContext</link>(C),&#32;Loc);
06119 }
</programlisting><para>
References <link linkend="__c_x_source_location_8cpp_source_1l00041">clang_getNullLocation()</link>, <link linkend="__c_index_8cpp_source_1l05952">clang_isExpression()</link>, <link linkend="__c_index_8cpp_source_1l05948">clang_isReference()</link>, <link linkend="__c_x_cursor_8cpp_source_1l01122">clang::cxcursor::getCursorContext()</link>, <link linkend="__c_x_cursor_8cpp_source_1l00970">clang::cxcursor::getCursorCXXBaseSpecifier()</link>, <link linkend="__c_x_cursor_8cpp_source_1l01055">clang::cxcursor::getCursorLabelRef()</link>, <link linkend="__c_x_cursor_8cpp_source_1l00958">clang::cxcursor::getCursorMemberRef()</link>, <link linkend="__c_x_cursor_8cpp_source_1l00925">clang::cxcursor::getCursorNamespaceRef()</link>, <link linkend="__c_x_cursor_8cpp_source_1l00876">clang::cxcursor::getCursorObjCClassRef()</link>, <link linkend="__c_x_cursor_8cpp_source_1l00857">clang::cxcursor::getCursorObjCProtocolRef()</link>, <link linkend="__c_x_cursor_8cpp_source_1l00841">clang::cxcursor::getCursorObjCSuperClassRef()</link>, <link linkend="__c_x_cursor_8cpp_source_1l01094">clang::cxcursor::getCursorOverloadedDeclRef()</link>, <link linkend="__c_x_cursor_8cpp_source_1l00907">clang::cxcursor::getCursorTemplateRef()</link>, <link linkend="__c_x_cursor_8cpp_source_1l00891">clang::cxcursor::getCursorTypeRef()</link>, and <link linkend="__c_x_cursor_8cpp_source_1l00941">clang::cxcursor::getCursorVariableRef()</link>.</para>
<para>
Referenced by <link linkend="__c_index_8cpp_source_1l04795">clang_Cursor_getSpellingNameRange()</link>, and <link linkend="__c_index_8cpp_source_1l09132">clang::cxindex::Logger::operator&lt;&lt;()</link>.</para>
    </section><anchor xml:id="__c_index_8cpp_1ab166e6d97e4c81463d7999917b30fb85"/>    <section>
    <title>clang_getCursorPlatformAvailability()</title>
<indexterm><primary>clang_getCursorPlatformAvailability</primary><secondary>CIndex.cpp</secondary></indexterm>
<indexterm><primary>CIndex.cpp</primary><secondary>clang_getCursorPlatformAvailability</secondary></indexterm>
<para><computeroutput>int clang_getCursorPlatformAvailability (CXCursor cursor, int * always_deprecated, CXString * deprecated_message, int * always_unavailable, CXString * unavailable_message, CXPlatformAvailability * availability, int availability_size)</computeroutput></para><para>
Definition at line <link linkend="__c_index_8cpp_source_1l08097">8097</link> of file <link linkend="__c_index_8cpp_source">CIndex.cpp</link>.</para>
<programlisting>08102 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
08103 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(always_deprecated)
08104 &#32;&#32;&#32;&#32;*always_deprecated&#32;=&#32;0;
08105 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(deprecated_message)
08106 &#32;&#32;&#32;&#32;*deprecated_message&#32;=&#32;<link linkend="_namespaceclang_1_1cxstring_1a8a49aa6ea196abdde85886689f2630f9">cxstring::createEmpty</link>();
08107 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(always_unavailable)
08108 &#32;&#32;&#32;&#32;*always_unavailable&#32;=&#32;0;
08109 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(unavailable_message)
08110 &#32;&#32;&#32;&#32;*unavailable_message&#32;=&#32;<link linkend="_namespaceclang_1_1cxstring_1a8a49aa6ea196abdde85886689f2630f9">cxstring::createEmpty</link>();
08111 
08112 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!<link linkend="__c_index_8cpp_1a5d47db8f608ae0c266d6551875d46b80">clang_isDeclaration</link>(cursor.kind))
08113 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
08114 
08115 &#32;&#32;<emphasis role="keyword">const</emphasis>&#32;Decl&#32;*D&#32;=&#32;<link linkend="_namespaceclang_1_1cxcursor_1a1f702246831c96afd990e457613dc642">cxcursor::getCursorDecl</link>(cursor);
08116 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!D)
08117 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
08118 
08119 &#32;&#32;SmallVector&lt;AvailabilityAttr&#32;*,&#32;8&gt;&#32;AvailabilityAttrs;
08120 &#32;&#32;getCursorPlatformAvailabilityForDecl(D,&#32;always_deprecated,&#32;deprecated_message,
08121 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;always_unavailable,&#32;unavailable_message,
08122 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;AvailabilityAttrs);
08123 &#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;&amp;Avail&#32;:
08124 &#32;&#32;&#32;&#32;&#32;&#32;&#32;llvm::enumerate(llvm::makeArrayRef(AvailabilityAttrs)
08125 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;.take_front(availability_size)))&#32;{
08126 &#32;&#32;&#32;&#32;availability[Avail.index()].Platform&#32;=
08127 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespaceclang_1_1cxstring_1a19a4962be87f75a8c1fa5a0b75f76298">cxstring::createDup</link>(Avail.value()-&gt;getPlatform()-&gt;getName());
08128 &#32;&#32;&#32;&#32;availability[Avail.index()].Introduced&#32;=
08129 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;convertVersion(Avail.value()-&gt;getIntroduced());
08130 &#32;&#32;&#32;&#32;availability[Avail.index()].Deprecated&#32;=
08131 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;convertVersion(Avail.value()-&gt;getDeprecated());
08132 &#32;&#32;&#32;&#32;availability[Avail.index()].Obsoleted&#32;=
08133 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;convertVersion(Avail.value()-&gt;getObsoleted());
08134 &#32;&#32;&#32;&#32;availability[Avail.index()].Unavailable&#32;=&#32;Avail.value()-&gt;getUnavailable();
08135 &#32;&#32;&#32;&#32;availability[Avail.index()].Message&#32;=
08136 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespaceclang_1_1cxstring_1a19a4962be87f75a8c1fa5a0b75f76298">cxstring::createDup</link>(Avail.value()-&gt;getMessage());
08137 &#32;&#32;}
08138 
08139 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;AvailabilityAttrs.size();
08140 }
</programlisting><para>
References <link linkend="__c_index_8cpp_source_1l05934">clang_isDeclaration()</link>, <link linkend="__c_x_string_8cpp_source_1l00043">clang::cxstring::createEmpty()</link>, and <link linkend="__c_x_cursor_8cpp_source_1l01101">clang::cxcursor::getCursorDecl()</link>.</para>
    </section><anchor xml:id="__c_index_8cpp_1aaf6d4365916cd5424df38549e28ffd3b"/>    <section>
    <title>clang_getCursorPrettyPrinted()</title>
<indexterm><primary>clang_getCursorPrettyPrinted</primary><secondary>CIndex.cpp</secondary></indexterm>
<indexterm><primary>CIndex.cpp</primary><secondary>clang_getCursorPrettyPrinted</secondary></indexterm>
<para><computeroutput>CXString clang_getCursorPrettyPrinted (CXCursor C, CXPrintingPolicy cxPolicy)</computeroutput></para><para>
Definition at line <link linkend="__c_index_8cpp_source_1l05099">5099</link> of file <link linkend="__c_index_8cpp_source">CIndex.cpp</link>.</para>
<programlisting>05099 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
05100 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="__c_x_cursor_8cpp_1af734553e3bac74a4a1f6f7450513cf0f">clang_Cursor_isNull</link>(C))
05101 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1a8a49aa6ea196abdde85886689f2630f9">cxstring::createEmpty</link>();
05102 
05103 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="__c_index_8cpp_1a5d47db8f608ae0c266d6551875d46b80">clang_isDeclaration</link>(C.kind))&#32;{
05104 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;Decl&#32;*D&#32;=&#32;<link linkend="_namespaceclang_1_1cxcursor_1a1f702246831c96afd990e457613dc642">getCursorDecl</link>(C);
05105 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!D)
05106 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1a8a49aa6ea196abdde85886689f2630f9">cxstring::createEmpty</link>();
05107 
05108 &#32;&#32;&#32;&#32;SmallString&lt;128&gt;&#32;Str;
05109 &#32;&#32;&#32;&#32;llvm::raw_svector_ostream&#32;OS(Str);
05110 &#32;&#32;&#32;&#32;PrintingPolicy&#32;*UserPolicy&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis>PrintingPolicy&#32;*<emphasis role="keyword">&gt;</emphasis>(cxPolicy);
05111 &#32;&#32;&#32;&#32;D-&gt;print(OS,&#32;UserPolicy&#32;?&#32;*UserPolicy
05112 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;<link linkend="_namespaceclang_1_1cxcursor_1a9f29c286f26b3cf616331c7e6554d373">getCursorContext</link>(C).getPrintingPolicy());
05113 
05114 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1a19a4962be87f75a8c1fa5a0b75f76298">cxstring::createDup</link>(OS.str());
05115 &#32;&#32;}
05116 
05117 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1a8a49aa6ea196abdde85886689f2630f9">cxstring::createEmpty</link>();
05118 }
</programlisting><para>
References <link linkend="__c_x_cursor_8cpp_source_1l01253">clang_Cursor_isNull()</link>, <link linkend="__c_index_8cpp_source_1l05934">clang_isDeclaration()</link>, <link linkend="__c_x_string_8cpp_source_1l00067">clang::cxstring::createDup()</link>, <link linkend="__c_x_string_8cpp_source_1l00043">clang::cxstring::createEmpty()</link>, <link linkend="__c_x_cursor_8cpp_source_1l01122">clang::cxcursor::getCursorContext()</link>, and <link linkend="__c_x_cursor_8cpp_source_1l01101">clang::cxcursor::getCursorDecl()</link>.</para>
    </section><anchor xml:id="__c_index_8cpp_1a472e7c06c70965b983f908f49f27c2bf"/>    <section>
    <title>clang_getCursorPrintingPolicy()</title>
<indexterm><primary>clang_getCursorPrintingPolicy</primary><secondary>CIndex.cpp</secondary></indexterm>
<indexterm><primary>CIndex.cpp</primary><secondary>clang_getCursorPrintingPolicy</secondary></indexterm>
<para><computeroutput>CXPrintingPolicy clang_getCursorPrintingPolicy (CXCursor C)</computeroutput></para><para>
Definition at line <link linkend="__c_index_8cpp_source_1l04931">4931</link> of file <link linkend="__c_index_8cpp_source">CIndex.cpp</link>.</para>
<programlisting>04931 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
04932 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="__c_x_cursor_8cpp_1af734553e3bac74a4a1f6f7450513cf0f">clang_Cursor_isNull</link>(C))
04933 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
04934 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">new</emphasis>&#32;PrintingPolicy(<link linkend="_namespaceclang_1_1cxcursor_1a9f29c286f26b3cf616331c7e6554d373">getCursorContext</link>(C).getPrintingPolicy());
04935 }
</programlisting><para>
References <link linkend="__c_x_cursor_8cpp_source_1l01253">clang_Cursor_isNull()</link>, and <link linkend="__c_x_cursor_8cpp_source_1l01122">clang::cxcursor::getCursorContext()</link>.</para>
    </section><anchor xml:id="__c_index_8cpp_1ab26fc466345d015d7f9d418080166dc7"/>    <section>
    <title>clang_getCursorReferenced()</title>
<indexterm><primary>clang_getCursorReferenced</primary><secondary>CIndex.cpp</secondary></indexterm>
<indexterm><primary>CIndex.cpp</primary><secondary>clang_getCursorReferenced</secondary></indexterm>
<para><computeroutput>CXCursor clang_getCursorReferenced (CXCursor C)</computeroutput></para><para>
Definition at line <link linkend="__c_index_8cpp_source_1l06301">6301</link> of file <link linkend="__c_index_8cpp_source">CIndex.cpp</link>.</para>
<programlisting>06301 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
06302 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="__c_index_8cpp_1a0c5b391d8bca745084fb8906cce6f66c">clang_isInvalid</link>(C.kind))
06303 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__c_index_8cpp_1aa22233466eaf91f6f3cf6b84255c3b68">clang_getNullCursor</link>();
06304 
06305 &#32;&#32;CXTranslationUnit&#32;tu&#32;=&#32;<link linkend="_namespaceclang_1_1cxcursor_1a23a495df22339e8289ae6d2421f493b6">getCursorTU</link>(C);
06306 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="__c_index_8cpp_1a5d47db8f608ae0c266d6551875d46b80">clang_isDeclaration</link>(C.kind))&#32;{
06307 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;Decl&#32;*D&#32;=&#32;<link linkend="_namespaceclang_1_1cxcursor_1a1f702246831c96afd990e457613dc642">getCursorDecl</link>(C);
06308 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!D)
06309 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__c_index_8cpp_1aa22233466eaf91f6f3cf6b84255c3b68">clang_getNullCursor</link>();
06310 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;UsingDecl&#32;*Using&#32;=&#32;dyn_cast&lt;UsingDecl&gt;(D))
06311 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxcursor_1a631225e024301b99cc72be73f0ee9271">MakeCursorOverloadedDeclRef</link>(Using,&#32;D-&gt;getLocation(),&#32;tu);
06312 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;ObjCPropertyImplDecl&#32;*PropImpl&#32;=
06313 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;dyn_cast&lt;ObjCPropertyImplDecl&gt;(D))
06314 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(ObjCPropertyDecl&#32;*Property&#32;=&#32;PropImpl-&gt;getPropertyDecl())
06315 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxcursor_1ab61ec2059175833672e8e78a376bb218">MakeCXCursor</link>(Property,&#32;tu);
06316 
06317 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;C;
06318 &#32;&#32;}
06319 
06320 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="__c_index_8cpp_1ab958945dd59c351e1ae1a3f7f5668095">clang_isExpression</link>(C.kind))&#32;{
06321 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;Expr&#32;*E&#32;=&#32;<link linkend="_namespaceclang_1_1cxcursor_1a80837a3710c6df0dfc24b5ee1d94ff9b">getCursorExpr</link>(C);
06322 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;Decl&#32;*D&#32;=&#32;getDeclFromExpr(E);
06323 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(D)&#32;{
06324 &#32;&#32;&#32;&#32;&#32;&#32;CXCursor&#32;declCursor&#32;=&#32;<link linkend="_namespaceclang_1_1cxcursor_1ab61ec2059175833672e8e78a376bb218">MakeCXCursor</link>(D,&#32;tu);
06325 &#32;&#32;&#32;&#32;&#32;&#32;declCursor&#32;=&#32;<link linkend="_namespaceclang_1_1cxcursor_1a3fd86e25b3fca940466669d13b0ea93e">getSelectorIdentifierCursor</link>(getSelectorIdentifierIndex(C),
06326 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;declCursor);
06327 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;declCursor;
06328 &#32;&#32;&#32;&#32;}
06329 
06330 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;OverloadExpr&#32;*Ovl&#32;=&#32;dyn_cast_or_null&lt;OverloadExpr&gt;(E))
06331 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxcursor_1a631225e024301b99cc72be73f0ee9271">MakeCursorOverloadedDeclRef</link>(Ovl,&#32;tu);
06332 
06333 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__c_index_8cpp_1aa22233466eaf91f6f3cf6b84255c3b68">clang_getNullCursor</link>();
06334 &#32;&#32;}
06335 
06336 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="__c_index_8cpp_1af186bec30eb4cb63c3a7a295ccbcfe8b">clang_isStatement</link>(C.kind))&#32;{
06337 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;Stmt&#32;*S&#32;=&#32;<link linkend="_namespaceclang_1_1cxcursor_1a2d5cb233204f81be58bd21deb628c7ad">getCursorStmt</link>(C);
06338 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;GotoStmt&#32;*Goto&#32;=&#32;dyn_cast_or_null&lt;GotoStmt&gt;(S))
06339 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(LabelDecl&#32;*label&#32;=&#32;Goto-&gt;getLabel())
06340 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(LabelStmt&#32;*labelS&#32;=&#32;label-&gt;getStmt())
06341 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxcursor_1ab61ec2059175833672e8e78a376bb218">MakeCXCursor</link>(labelS,&#32;<link linkend="_namespaceclang_1_1cxcursor_1a1f702246831c96afd990e457613dc642">getCursorDecl</link>(C),&#32;tu);
06342 
06343 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__c_index_8cpp_1aa22233466eaf91f6f3cf6b84255c3b68">clang_getNullCursor</link>();
06344 &#32;&#32;}
06345 
06346 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(C.kind&#32;==&#32;CXCursor_MacroExpansion)&#32;{
06347 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;MacroDefinitionRecord&#32;*Def&#32;=
06348 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;getCursorMacroExpansion(C).getDefinition())
06349 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxcursor_1a62e05b7f28b894bf90226918a8f3386a">MakeMacroDefinitionCursor</link>(Def,&#32;tu);
06350 &#32;&#32;}
06351 
06352 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!<link linkend="__c_index_8cpp_1a8b03541653a9373d35919c45216bc70f">clang_isReference</link>(C.kind))
06353 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__c_index_8cpp_1aa22233466eaf91f6f3cf6b84255c3b68">clang_getNullCursor</link>();
06354 
06355 &#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(C.kind)&#32;{
06356 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_ObjCSuperClassRef:
06357 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxcursor_1ab61ec2059175833672e8e78a376bb218">MakeCXCursor</link>(<link linkend="_namespaceclang_1_1cxcursor_1a071683bc881399c3bcadba5a4da408b2">getCursorObjCSuperClassRef</link>(C).first,&#32;tu);
06358 
06359 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_ObjCProtocolRef:&#32;{
06360 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;ObjCProtocolDecl&#32;*Prot&#32;=&#32;<link linkend="_namespaceclang_1_1cxcursor_1a1675d17bfec653da314fa2beff772829">getCursorObjCProtocolRef</link>(C).first;
06361 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;ObjCProtocolDecl&#32;*Def&#32;=&#32;Prot-&gt;getDefinition())
06362 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxcursor_1ab61ec2059175833672e8e78a376bb218">MakeCXCursor</link>(Def,&#32;tu);
06363 
06364 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxcursor_1ab61ec2059175833672e8e78a376bb218">MakeCXCursor</link>(Prot,&#32;tu);
06365 &#32;&#32;}
06366 
06367 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_ObjCClassRef:&#32;{
06368 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;ObjCInterfaceDecl&#32;*Class&#32;=&#32;<link linkend="_namespaceclang_1_1cxcursor_1ad21fba4a3d5f6bdc63a19303b1cb42a3">getCursorObjCClassRef</link>(C).first;
06369 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;ObjCInterfaceDecl&#32;*Def&#32;=&#32;Class-&gt;getDefinition())
06370 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxcursor_1ab61ec2059175833672e8e78a376bb218">MakeCXCursor</link>(Def,&#32;tu);
06371 
06372 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxcursor_1ab61ec2059175833672e8e78a376bb218">MakeCXCursor</link>(Class,&#32;tu);
06373 &#32;&#32;}
06374 
06375 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_TypeRef:
06376 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxcursor_1ab61ec2059175833672e8e78a376bb218">MakeCXCursor</link>(<link linkend="_namespaceclang_1_1cxcursor_1ab0284c10c2cfeb2ffe43b99ec3e9dd9f">getCursorTypeRef</link>(C).first,&#32;tu);
06377 
06378 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_TemplateRef:
06379 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxcursor_1ab61ec2059175833672e8e78a376bb218">MakeCXCursor</link>(<link linkend="_namespaceclang_1_1cxcursor_1aacf77fc4aabf02cfa865e6fe19e55d08">getCursorTemplateRef</link>(C).first,&#32;tu);
06380 
06381 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_NamespaceRef:
06382 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxcursor_1ab61ec2059175833672e8e78a376bb218">MakeCXCursor</link>(<link linkend="_namespaceclang_1_1cxcursor_1ac87835a4525ca9f54e4666e7b76ec6f6">getCursorNamespaceRef</link>(C).first,&#32;tu);
06383 
06384 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_MemberRef:
06385 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxcursor_1ab61ec2059175833672e8e78a376bb218">MakeCXCursor</link>(<link linkend="_namespaceclang_1_1cxcursor_1af3f3d2390bed39285f0b3313c1fab84b">getCursorMemberRef</link>(C).first,&#32;tu);
06386 
06387 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_CXXBaseSpecifier:&#32;{
06388 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;CXXBaseSpecifier&#32;*B&#32;=&#32;<link linkend="_namespaceclang_1_1cxcursor_1a05b387c1d9aeb75b3de539f8622e0964">cxcursor::getCursorCXXBaseSpecifier</link>(C);
06389 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__c_x_type_8cpp_1af7b6b47bb98865b91a02e148f87062a2">clang_getTypeDeclaration</link>(<link linkend="_namespaceclang_1_1cxtype_1afab44f51bd657249b6dcf6476c6b6b98">cxtype::MakeCXType</link>(B-&gt;getType(),&#32;tu));
06390 &#32;&#32;}
06391 
06392 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_LabelRef:
06393 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;FIXME:&#32;We&#32;end&#32;up&#32;faking&#32;the&#32;&quot;parent&quot;&#32;declaration&#32;here&#32;because&#32;we</emphasis>
06394 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;don&apos;t&#32;want&#32;to&#32;make&#32;CXCursor&#32;larger.</emphasis>
06395 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxcursor_1ab61ec2059175833672e8e78a376bb218">MakeCXCursor</link>(
06396 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespaceclang_1_1cxcursor_1a642e34370b829d06752d76d13c6a58dd">getCursorLabelRef</link>(C).first,
06397 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cxtu::getASTUnit(tu)-&gt;getASTContext().getTranslationUnitDecl(),&#32;tu);
06398 
06399 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_OverloadedDeclRef:
06400 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;C;
06401 
06402 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_VariableRef:
06403 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxcursor_1ab61ec2059175833672e8e78a376bb218">MakeCXCursor</link>(<link linkend="_namespaceclang_1_1cxcursor_1a53fa4c4c92a2fbaded59ad51eeed6e47">getCursorVariableRef</link>(C).first,&#32;tu);
06404 
06405 &#32;&#32;<emphasis role="keywordflow">default</emphasis>:
06406 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;We&#32;would&#32;prefer&#32;to&#32;enumerate&#32;all&#32;non-reference&#32;cursor&#32;kinds&#32;here.</emphasis>
06407 &#32;&#32;&#32;&#32;llvm_unreachable(<emphasis role="stringliteral">&quot;Unhandled&#32;reference&#32;cursor&#32;kind&quot;</emphasis>);
06408 &#32;&#32;}
06409 }
</programlisting><para>
References <link linkend="__c_index_8cpp_source_1l05901">clang_getNullCursor()</link>, <link linkend="__c_index_8cpp_source_1l05934">clang_isDeclaration()</link>, <link linkend="__c_index_8cpp_source_1l05952">clang_isExpression()</link>, <link linkend="__c_index_8cpp_source_1l05930">clang_isInvalid()</link>, <link linkend="__c_x_cursor_8cpp_source_1l01101">clang::cxcursor::getCursorDecl()</link>, <link linkend="__c_x_cursor_8cpp_source_1l01105">clang::cxcursor::getCursorExpr()</link>, <link linkend="__c_x_cursor_8cpp_source_1l01133">clang::cxcursor::getCursorTU()</link>, <link linkend="__c_x_cursor_8cpp_source_1l01061">clang::cxcursor::MakeCursorOverloadedDeclRef()</link>, and <link linkend="_namespaceclang_1_1cxcursor_1ab61ec2059175833672e8e78a376bb218">clang::cxcursor::MakeCXCursor()</link>.</para>
<para>
Referenced by <link linkend="__c_index_8cpp_source_1l06411">clang_getCursorDefinition()</link>.</para>
    </section><anchor xml:id="__c_index_8cpp_1afaace7c7d9d35d3f6d2b947d97a926df"/>    <section>
    <title>clang_getCursorReferenceNameRange()</title>
<indexterm><primary>clang_getCursorReferenceNameRange</primary><secondary>CIndex.cpp</secondary></indexterm>
<indexterm><primary>CIndex.cpp</primary><secondary>clang_getCursorReferenceNameRange</secondary></indexterm>
<para><computeroutput>CXSourceRange clang_getCursorReferenceNameRange (CXCursor C, unsigned NameFlags, unsigned PieceIndex)</computeroutput></para><para>
Definition at line <link linkend="__c_index_8cpp_source_1l06732">6732</link> of file <link linkend="__c_index_8cpp_source">CIndex.cpp</link>.</para>
<programlisting>06733 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
06734 &#32;&#32;RefNamePieces&#32;Pieces;
06735 
06736 &#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(C.kind)&#32;{
06737 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_MemberRefExpr:
06738 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;MemberExpr&#32;*E&#32;=&#32;dyn_cast&lt;MemberExpr&gt;(<link linkend="_namespaceclang_1_1cxcursor_1a80837a3710c6df0dfc24b5ee1d94ff9b">getCursorExpr</link>(C)))
06739 &#32;&#32;&#32;&#32;&#32;&#32;Pieces&#32;=&#32;buildPieces(NameFlags,&#32;<emphasis role="keyword">true</emphasis>,&#32;E-&gt;getMemberNameInfo(),
06740 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;E-&gt;getQualifierLoc().getSourceRange());
06741 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
06742 
06743 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_DeclRefExpr:
06744 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;DeclRefExpr&#32;*E&#32;=&#32;dyn_cast&lt;DeclRefExpr&gt;(<link linkend="_namespaceclang_1_1cxcursor_1a80837a3710c6df0dfc24b5ee1d94ff9b">getCursorExpr</link>(C)))&#32;{
06745 &#32;&#32;&#32;&#32;&#32;&#32;SourceRange&#32;TemplateArgLoc(E-&gt;getLAngleLoc(),&#32;E-&gt;getRAngleLoc());
06746 &#32;&#32;&#32;&#32;&#32;&#32;Pieces&#32;=
06747 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;buildPieces(NameFlags,&#32;<emphasis role="keyword">false</emphasis>,&#32;E-&gt;getNameInfo(),
06748 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;E-&gt;getQualifierLoc().getSourceRange(),&#32;&amp;TemplateArgLoc);
06749 &#32;&#32;&#32;&#32;}
06750 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
06751 
06752 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_CallExpr:
06753 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;CXXOperatorCallExpr&#32;*OCE&#32;=
06754 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;dyn_cast&lt;CXXOperatorCallExpr&gt;(<link linkend="_namespaceclang_1_1cxcursor_1a80837a3710c6df0dfc24b5ee1d94ff9b">getCursorExpr</link>(C)))&#32;{
06755 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;Expr&#32;*Callee&#32;=&#32;OCE-&gt;getCallee();
06756 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;ImplicitCastExpr&#32;*ICE&#32;=&#32;dyn_cast&lt;ImplicitCastExpr&gt;(Callee))
06757 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Callee&#32;=&#32;ICE-&gt;getSubExpr();
06758 
06759 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;DeclRefExpr&#32;*DRE&#32;=&#32;dyn_cast&lt;DeclRefExpr&gt;(Callee))
06760 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Pieces&#32;=&#32;buildPieces(NameFlags,&#32;<emphasis role="keyword">false</emphasis>,&#32;DRE-&gt;getNameInfo(),
06761 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;DRE-&gt;getQualifierLoc().getSourceRange());
06762 &#32;&#32;&#32;&#32;}
06763 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
06764 
06765 &#32;&#32;<emphasis role="keywordflow">default</emphasis>:
06766 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
06767 &#32;&#32;}
06768 
06769 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(Pieces.empty())&#32;{
06770 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(PieceIndex&#32;==&#32;0)
06771 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__c_index_8cpp_1ac535682dfe6658513121c4cf6d4b4076">clang_getCursorExtent</link>(C);
06772 &#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(PieceIndex&#32;&lt;&#32;Pieces.size())&#32;{
06773 &#32;&#32;&#32;&#32;SourceRange&#32;R&#32;=&#32;Pieces[PieceIndex];
06774 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(R.isValid())
06775 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxloc_1a39d02b462b1f3233518f01951d83d035">cxloc::translateSourceRange</link>(<link linkend="_namespaceclang_1_1cxcursor_1a9f29c286f26b3cf616331c7e6554d373">getCursorContext</link>(C),&#32;R);
06776 &#32;&#32;}
06777 
06778 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__c_x_source_location_8cpp_1afadb1a95ce51366407cf6c363299a17f">clang_getNullRange</link>();
06779 }
</programlisting><para>
References <link linkend="__c_index_8cpp_source_1l06293">clang_getCursorExtent()</link>, <link linkend="__c_x_source_location_8cpp_source_1l00052">clang_getNullRange()</link>, <link linkend="__c_x_cursor_8cpp_source_1l01122">clang::cxcursor::getCursorContext()</link>, <link linkend="__c_x_cursor_8cpp_source_1l01105">clang::cxcursor::getCursorExpr()</link>, and <link linkend="__c_index_8cpp_source_1l00143">clang::cxloc::translateSourceRange()</link>.</para>
    </section><anchor xml:id="__c_index_8cpp_1a114663793af87aa65d983a8514db6b43"/>    <section>
    <title>clang_getCursorSemanticParent()</title>
<indexterm><primary>clang_getCursorSemanticParent</primary><secondary>CIndex.cpp</secondary></indexterm>
<indexterm><primary>CIndex.cpp</primary><secondary>clang_getCursorSemanticParent</secondary></indexterm>
<para><computeroutput>CXCursor clang_getCursorSemanticParent (CXCursor cursor)</computeroutput></para><para>
Definition at line <link linkend="__c_index_8cpp_source_1l08219">8219</link> of file <link linkend="__c_index_8cpp_source">CIndex.cpp</link>.</para>
<programlisting>08219 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
08220 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="__c_index_8cpp_1a5d47db8f608ae0c266d6551875d46b80">clang_isDeclaration</link>(cursor.kind))&#32;{
08221 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;Decl&#32;*D&#32;=&#32;<link linkend="_namespaceclang_1_1cxcursor_1a1f702246831c96afd990e457613dc642">getCursorDecl</link>(cursor))&#32;{
08222 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;DeclContext&#32;*DC&#32;=&#32;D-&gt;getDeclContext();
08223 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!DC)
08224 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__c_index_8cpp_1aa22233466eaf91f6f3cf6b84255c3b68">clang_getNullCursor</link>();
08225 
08226 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxcursor_1ab61ec2059175833672e8e78a376bb218">MakeCXCursor</link>(maybeGetTemplateCursor(cast&lt;Decl&gt;(DC)),
08227 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespaceclang_1_1cxcursor_1a23a495df22339e8289ae6d2421f493b6">getCursorTU</link>(cursor));
08228 &#32;&#32;&#32;&#32;}
08229 &#32;&#32;}
08230 
08231 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="__c_index_8cpp_1af186bec30eb4cb63c3a7a295ccbcfe8b">clang_isStatement</link>(cursor.kind)&#32;||&#32;<link linkend="__c_index_8cpp_1ab958945dd59c351e1ae1a3f7f5668095">clang_isExpression</link>(cursor.kind))&#32;{
08232 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;Decl&#32;*D&#32;=&#32;<link linkend="_namespaceclang_1_1cxcursor_1a1f702246831c96afd990e457613dc642">getCursorDecl</link>(cursor))
08233 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxcursor_1ab61ec2059175833672e8e78a376bb218">MakeCXCursor</link>(D,&#32;<link linkend="_namespaceclang_1_1cxcursor_1a23a495df22339e8289ae6d2421f493b6">getCursorTU</link>(cursor));
08234 &#32;&#32;}
08235 
08236 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__c_index_8cpp_1aa22233466eaf91f6f3cf6b84255c3b68">clang_getNullCursor</link>();
08237 }
</programlisting><para>
References <link linkend="__c_index_8cpp_source_1l05901">clang_getNullCursor()</link>, <link linkend="__c_index_8cpp_source_1l05934">clang_isDeclaration()</link>, <link linkend="__c_x_cursor_8cpp_source_1l01101">clang::cxcursor::getCursorDecl()</link>, and <link linkend="_namespaceclang_1_1cxcursor_1ab61ec2059175833672e8e78a376bb218">clang::cxcursor::MakeCXCursor()</link>.</para>
<para>
Referenced by <link linkend="__c_x_type_8cpp_source_1l01054">clang_Cursor_getOffsetOfField()</link>.</para>
    </section><anchor xml:id="__c_index_8cpp_1a412f1282680f05ef2b991f21a59ad3ac"/>    <section>
    <title>clang_getCursorSpelling()</title>
<indexterm><primary>clang_getCursorSpelling</primary><secondary>CIndex.cpp</secondary></indexterm>
<indexterm><primary>CIndex.cpp</primary><secondary>clang_getCursorSpelling</secondary></indexterm>
<para><computeroutput>CXString clang_getCursorSpelling (CXCursor C)</computeroutput></para><para>
Definition at line <link linkend="__c_index_8cpp_source_1l04634">4634</link> of file <link linkend="__c_index_8cpp_source">CIndex.cpp</link>.</para>
<programlisting>04634 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
04635 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="__c_index_8cpp_1ace455769e0f5681db67622db98f263a1">clang_isTranslationUnit</link>(C.kind))
04636 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__c_index_8cpp_1a042c9228f6e47d598c5112eb05940837">clang_getTranslationUnitSpelling</link>(<link linkend="_namespaceclang_1_1cxcursor_1a23a495df22339e8289ae6d2421f493b6">getCursorTU</link>(C));
04637 
04638 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="__c_index_8cpp_1a8b03541653a9373d35919c45216bc70f">clang_isReference</link>(C.kind))&#32;{
04639 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(C.kind)&#32;{
04640 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_ObjCSuperClassRef:&#32;{
04641 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;ObjCInterfaceDecl&#32;*Super&#32;=&#32;<link linkend="_namespaceclang_1_1cxcursor_1a071683bc881399c3bcadba5a4da408b2">getCursorObjCSuperClassRef</link>(C).first;
04642 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(Super-&gt;getIdentifier()-&gt;getNameStart());
04643 &#32;&#32;&#32;&#32;}
04644 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_ObjCClassRef:&#32;{
04645 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;ObjCInterfaceDecl&#32;*Class&#32;=&#32;<link linkend="_namespaceclang_1_1cxcursor_1ad21fba4a3d5f6bdc63a19303b1cb42a3">getCursorObjCClassRef</link>(C).first;
04646 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(Class-&gt;getIdentifier()-&gt;getNameStart());
04647 &#32;&#32;&#32;&#32;}
04648 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_ObjCProtocolRef:&#32;{
04649 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;ObjCProtocolDecl&#32;*OID&#32;=&#32;<link linkend="_namespaceclang_1_1cxcursor_1a1675d17bfec653da314fa2beff772829">getCursorObjCProtocolRef</link>(C).first;
04650 &#32;&#32;&#32;&#32;&#32;&#32;assert(OID&#32;&amp;&amp;&#32;<emphasis role="stringliteral">&quot;getCursorSpelling():&#32;Missing&#32;protocol&#32;decl&quot;</emphasis>);
04651 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(OID-&gt;getIdentifier()-&gt;getNameStart());
04652 &#32;&#32;&#32;&#32;}
04653 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_CXXBaseSpecifier:&#32;{
04654 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;CXXBaseSpecifier&#32;*B&#32;=&#32;<link linkend="_namespaceclang_1_1cxcursor_1a05b387c1d9aeb75b3de539f8622e0964">getCursorCXXBaseSpecifier</link>(C);
04655 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1a19a4962be87f75a8c1fa5a0b75f76298">cxstring::createDup</link>(B-&gt;getType().getAsString());
04656 &#32;&#32;&#32;&#32;}
04657 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_TypeRef:&#32;{
04658 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;TypeDecl&#32;*Type&#32;=&#32;<link linkend="_namespaceclang_1_1cxcursor_1ab0284c10c2cfeb2ffe43b99ec3e9dd9f">getCursorTypeRef</link>(C).first;
04659 &#32;&#32;&#32;&#32;&#32;&#32;assert(Type&#32;&amp;&amp;&#32;<emphasis role="stringliteral">&quot;Missing&#32;type&#32;decl&quot;</emphasis>);
04660 
04661 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1a19a4962be87f75a8c1fa5a0b75f76298">cxstring::createDup</link>(
04662 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespaceclang_1_1cxcursor_1a9f29c286f26b3cf616331c7e6554d373">getCursorContext</link>(C).getTypeDeclType(Type).getAsString());
04663 &#32;&#32;&#32;&#32;}
04664 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_TemplateRef:&#32;{
04665 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;TemplateDecl&#32;*Template&#32;=&#32;<link linkend="_namespaceclang_1_1cxcursor_1aacf77fc4aabf02cfa865e6fe19e55d08">getCursorTemplateRef</link>(C).first;
04666 &#32;&#32;&#32;&#32;&#32;&#32;assert(Template&#32;&amp;&amp;&#32;<emphasis role="stringliteral">&quot;Missing&#32;template&#32;decl&quot;</emphasis>);
04667 
04668 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1a19a4962be87f75a8c1fa5a0b75f76298">cxstring::createDup</link>(Template-&gt;getNameAsString());
04669 &#32;&#32;&#32;&#32;}
04670 
04671 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_NamespaceRef:&#32;{
04672 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;NamedDecl&#32;*NS&#32;=&#32;<link linkend="_namespaceclang_1_1cxcursor_1ac87835a4525ca9f54e4666e7b76ec6f6">getCursorNamespaceRef</link>(C).first;
04673 &#32;&#32;&#32;&#32;&#32;&#32;assert(NS&#32;&amp;&amp;&#32;<emphasis role="stringliteral">&quot;Missing&#32;namespace&#32;decl&quot;</emphasis>);
04674 
04675 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1a19a4962be87f75a8c1fa5a0b75f76298">cxstring::createDup</link>(NS-&gt;getNameAsString());
04676 &#32;&#32;&#32;&#32;}
04677 
04678 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_MemberRef:&#32;{
04679 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;FieldDecl&#32;*Field&#32;=&#32;<link linkend="_namespaceclang_1_1cxcursor_1af3f3d2390bed39285f0b3313c1fab84b">getCursorMemberRef</link>(C).first;
04680 &#32;&#32;&#32;&#32;&#32;&#32;assert(Field&#32;&amp;&amp;&#32;<emphasis role="stringliteral">&quot;Missing&#32;member&#32;decl&quot;</emphasis>);
04681 
04682 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1a19a4962be87f75a8c1fa5a0b75f76298">cxstring::createDup</link>(Field-&gt;getNameAsString());
04683 &#32;&#32;&#32;&#32;}
04684 
04685 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_LabelRef:&#32;{
04686 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;LabelStmt&#32;*Label&#32;=&#32;<link linkend="_namespaceclang_1_1cxcursor_1a642e34370b829d06752d76d13c6a58dd">getCursorLabelRef</link>(C).first;
04687 &#32;&#32;&#32;&#32;&#32;&#32;assert(Label&#32;&amp;&amp;&#32;<emphasis role="stringliteral">&quot;Missing&#32;label&quot;</emphasis>);
04688 
04689 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(Label-&gt;getName());
04690 &#32;&#32;&#32;&#32;}
04691 
04692 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_OverloadedDeclRef:&#32;{
04693 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespaceclang_1_1cxcursor_1a944e67de567f6905f10876d7585ac43b">OverloadedDeclRefStorage</link>&#32;Storage&#32;=&#32;<link linkend="_namespaceclang_1_1cxcursor_1a4b41e93d6de24aed1376ec7f789efa2a">getCursorOverloadedDeclRef</link>(C).first;
04694 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;Decl&#32;*D&#32;=&#32;Storage.dyn_cast&lt;<emphasis role="keyword">const</emphasis>&#32;Decl&#32;*&gt;())&#32;{
04695 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;NamedDecl&#32;*ND&#32;=&#32;dyn_cast&lt;NamedDecl&gt;(D))
04696 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1a19a4962be87f75a8c1fa5a0b75f76298">cxstring::createDup</link>(ND-&gt;getNameAsString());
04697 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1a8a49aa6ea196abdde85886689f2630f9">cxstring::createEmpty</link>();
04698 &#32;&#32;&#32;&#32;&#32;&#32;}
04699 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;OverloadExpr&#32;*E&#32;=&#32;Storage.dyn_cast&lt;<emphasis role="keyword">const</emphasis>&#32;OverloadExpr&#32;*&gt;())
04700 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1a19a4962be87f75a8c1fa5a0b75f76298">cxstring::createDup</link>(E-&gt;getName().getAsString());
04701 &#32;&#32;&#32;&#32;&#32;&#32;OverloadedTemplateStorage&#32;*Ovl&#32;=
04702 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Storage.get&lt;OverloadedTemplateStorage&#32;*&gt;();
04703 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(Ovl-&gt;size()&#32;==&#32;0)
04704 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1a8a49aa6ea196abdde85886689f2630f9">cxstring::createEmpty</link>();
04705 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1a19a4962be87f75a8c1fa5a0b75f76298">cxstring::createDup</link>((*Ovl-&gt;begin())-&gt;getNameAsString());
04706 &#32;&#32;&#32;&#32;}
04707 
04708 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_VariableRef:&#32;{
04709 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;VarDecl&#32;*Var&#32;=&#32;<link linkend="_namespaceclang_1_1cxcursor_1a53fa4c4c92a2fbaded59ad51eeed6e47">getCursorVariableRef</link>(C).first;
04710 &#32;&#32;&#32;&#32;&#32;&#32;assert(Var&#32;&amp;&amp;&#32;<emphasis role="stringliteral">&quot;Missing&#32;variable&#32;decl&quot;</emphasis>);
04711 
04712 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1a19a4962be87f75a8c1fa5a0b75f76298">cxstring::createDup</link>(Var-&gt;getNameAsString());
04713 &#32;&#32;&#32;&#32;}
04714 
04715 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">default</emphasis>:
04716 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;&lt;not&#32;implemented&gt;&quot;</emphasis>);
04717 &#32;&#32;&#32;&#32;}
04718 &#32;&#32;}
04719 
04720 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="__c_index_8cpp_1ab958945dd59c351e1ae1a3f7f5668095">clang_isExpression</link>(C.kind))&#32;{
04721 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;Expr&#32;*E&#32;=&#32;<link linkend="_namespaceclang_1_1cxcursor_1a80837a3710c6df0dfc24b5ee1d94ff9b">getCursorExpr</link>(C);
04722 
04723 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(C.kind&#32;==&#32;CXCursor_ObjCStringLiteral&#32;||
04724 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;C.kind&#32;==&#32;CXCursor_StringLiteral)&#32;{
04725 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;StringLiteral&#32;*SLit;
04726 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;ObjCStringLiteral&#32;*OSL&#32;=&#32;dyn_cast&lt;ObjCStringLiteral&gt;(E))&#32;{
04727 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;SLit&#32;=&#32;OSL-&gt;getString();
04728 &#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
04729 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;SLit&#32;=&#32;cast&lt;StringLiteral&gt;(E);
04730 &#32;&#32;&#32;&#32;&#32;&#32;}
04731 &#32;&#32;&#32;&#32;&#32;&#32;SmallString&lt;256&gt;&#32;Buf;
04732 &#32;&#32;&#32;&#32;&#32;&#32;llvm::raw_svector_ostream&#32;OS(Buf);
04733 &#32;&#32;&#32;&#32;&#32;&#32;SLit-&gt;outputString(OS);
04734 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1a19a4962be87f75a8c1fa5a0b75f76298">cxstring::createDup</link>(OS.str());
04735 &#32;&#32;&#32;&#32;}
04736 
04737 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;Decl&#32;*D&#32;=&#32;getDeclFromExpr(<link linkend="_namespaceclang_1_1cxcursor_1a80837a3710c6df0dfc24b5ee1d94ff9b">getCursorExpr</link>(C));
04738 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(D)
04739 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;getDeclSpelling(D);
04740 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1a8a49aa6ea196abdde85886689f2630f9">cxstring::createEmpty</link>();
04741 &#32;&#32;}
04742 
04743 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="__c_index_8cpp_1af186bec30eb4cb63c3a7a295ccbcfe8b">clang_isStatement</link>(C.kind))&#32;{
04744 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;Stmt&#32;*S&#32;=&#32;<link linkend="_namespaceclang_1_1cxcursor_1a2d5cb233204f81be58bd21deb628c7ad">getCursorStmt</link>(C);
04745 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;LabelStmt&#32;*Label&#32;=&#32;dyn_cast_or_null&lt;LabelStmt&gt;(S))
04746 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(Label-&gt;getName());
04747 
04748 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1a8a49aa6ea196abdde85886689f2630f9">cxstring::createEmpty</link>();
04749 &#32;&#32;}
04750 
04751 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(C.kind&#32;==&#32;CXCursor_MacroExpansion)
04752 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(
04753 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;getCursorMacroExpansion(C).getName()-&gt;getNameStart());
04754 
04755 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(C.kind&#32;==&#32;CXCursor_MacroDefinition)
04756 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(
04757 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespaceclang_1_1cxcursor_1a62254c8ae8eca4c0ca0f2d2a659e7d80">getCursorMacroDefinition</link>(C)-&gt;getName()-&gt;getNameStart());
04758 
04759 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(C.kind&#32;==&#32;CXCursor_InclusionDirective)
04760 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1a19a4962be87f75a8c1fa5a0b75f76298">cxstring::createDup</link>(<link linkend="_namespaceclang_1_1cxcursor_1a3894d584fef6edb8ba4333fc240315ac">getCursorInclusionDirective</link>(C)-&gt;getFileName());
04761 
04762 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="__c_index_8cpp_1a5d47db8f608ae0c266d6551875d46b80">clang_isDeclaration</link>(C.kind))
04763 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;getDeclSpelling(<link linkend="_namespaceclang_1_1cxcursor_1a1f702246831c96afd990e457613dc642">getCursorDecl</link>(C));
04764 
04765 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(C.kind&#32;==&#32;CXCursor_AnnotateAttr)&#32;{
04766 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;AnnotateAttr&#32;*AA&#32;=&#32;cast&lt;AnnotateAttr&gt;(<link linkend="_namespaceclang_1_1cxcursor_1afdc6aa952869e16b4981b07f05adff7f">cxcursor::getCursorAttr</link>(C));
04767 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1a19a4962be87f75a8c1fa5a0b75f76298">cxstring::createDup</link>(AA-&gt;getAnnotation());
04768 &#32;&#32;}
04769 
04770 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(C.kind&#32;==&#32;CXCursor_AsmLabelAttr)&#32;{
04771 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;AsmLabelAttr&#32;*AA&#32;=&#32;cast&lt;AsmLabelAttr&gt;(<link linkend="_namespaceclang_1_1cxcursor_1afdc6aa952869e16b4981b07f05adff7f">cxcursor::getCursorAttr</link>(C));
04772 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1a19a4962be87f75a8c1fa5a0b75f76298">cxstring::createDup</link>(AA-&gt;getLabel());
04773 &#32;&#32;}
04774 
04775 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(C.kind&#32;==&#32;CXCursor_PackedAttr)&#32;{
04776 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;packed&quot;</emphasis>);
04777 &#32;&#32;}
04778 
04779 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(C.kind&#32;==&#32;CXCursor_VisibilityAttr)&#32;{
04780 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;VisibilityAttr&#32;*AA&#32;=&#32;cast&lt;VisibilityAttr&gt;(<link linkend="_namespaceclang_1_1cxcursor_1afdc6aa952869e16b4981b07f05adff7f">cxcursor::getCursorAttr</link>(C));
04781 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(AA-&gt;getVisibility())&#32;{
04782 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;VisibilityAttr::VisibilityType::Default:
04783 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;default&quot;</emphasis>);
04784 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;VisibilityAttr::VisibilityType::Hidden:
04785 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;hidden&quot;</emphasis>);
04786 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;VisibilityAttr::VisibilityType::Protected:
04787 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<emphasis role="stringliteral">&quot;protected&quot;</emphasis>);
04788 &#32;&#32;&#32;&#32;}
04789 &#32;&#32;&#32;&#32;llvm_unreachable(<emphasis role="stringliteral">&quot;unknown&#32;visibility&#32;type&quot;</emphasis>);
04790 &#32;&#32;}
04791 
04792 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1a8a49aa6ea196abdde85886689f2630f9">cxstring::createEmpty</link>();
04793 }
</programlisting><para>
References <link linkend="__c_index_8cpp_source_1l04311">clang_getTranslationUnitSpelling()</link>, <link linkend="__c_index_8cpp_source_1l05952">clang_isExpression()</link>, <link linkend="__c_index_8cpp_source_1l05948">clang_isReference()</link>, <link linkend="__c_index_8cpp_source_1l05964">clang_isTranslationUnit()</link>, <link linkend="__c_x_string_8cpp_source_1l00067">clang::cxstring::createDup()</link>, <link linkend="__c_x_string_8cpp_source_1l00043">clang::cxstring::createEmpty()</link>, <link linkend="__c_x_string_8cpp_source_1l00057">clang::cxstring::createRef()</link>, <link linkend="__c_x_cursor_8cpp_source_1l01122">clang::cxcursor::getCursorContext()</link>, <link linkend="__c_x_cursor_8cpp_source_1l00970">clang::cxcursor::getCursorCXXBaseSpecifier()</link>, <link linkend="__c_x_cursor_8cpp_source_1l01105">clang::cxcursor::getCursorExpr()</link>, <link linkend="__c_x_cursor_8cpp_source_1l01055">clang::cxcursor::getCursorLabelRef()</link>, <link linkend="__c_x_cursor_8cpp_source_1l00958">clang::cxcursor::getCursorMemberRef()</link>, <link linkend="__c_x_cursor_8cpp_source_1l00925">clang::cxcursor::getCursorNamespaceRef()</link>, <link linkend="__c_x_cursor_8cpp_source_1l00876">clang::cxcursor::getCursorObjCClassRef()</link>, <link linkend="__c_x_cursor_8cpp_source_1l00857">clang::cxcursor::getCursorObjCProtocolRef()</link>, <link linkend="__c_x_cursor_8cpp_source_1l00841">clang::cxcursor::getCursorObjCSuperClassRef()</link>, <link linkend="__c_x_cursor_8cpp_source_1l01094">clang::cxcursor::getCursorOverloadedDeclRef()</link>, <link linkend="__c_x_cursor_8cpp_source_1l00907">clang::cxcursor::getCursorTemplateRef()</link>, <link linkend="__c_x_cursor_8cpp_source_1l01133">clang::cxcursor::getCursorTU()</link>, <link linkend="__c_x_cursor_8cpp_source_1l00891">clang::cxcursor::getCursorTypeRef()</link>, and <link linkend="__c_x_cursor_8cpp_source_1l00941">clang::cxcursor::getCursorVariableRef()</link>.</para>
<para>
Referenced by <link linkend="__c_index_8cpp_source_1l05120">clang_getCursorDisplayName()</link>.</para>
    </section><anchor xml:id="__c_index_8cpp_1a50357467fc444ba7019986ea2dea65b7"/>    <section>
    <title>clang_getCursorTLSKind()</title>
<indexterm><primary>clang_getCursorTLSKind</primary><secondary>CIndex.cpp</secondary></indexterm>
<indexterm><primary>CIndex.cpp</primary><secondary>clang_getCursorTLSKind</secondary></indexterm>
<para><computeroutput>CXTLSKind clang_getCursorTLSKind (CXCursor cursor)</computeroutput></para><para>
Definition at line <link linkend="__c_index_8cpp_source_1l08154">8154</link> of file <link linkend="__c_index_8cpp_source">CIndex.cpp</link>.</para>
<programlisting>08154 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
08155 &#32;&#32;<emphasis role="keyword">const</emphasis>&#32;Decl&#32;*D&#32;=&#32;<link linkend="_namespaceclang_1_1cxcursor_1a1f702246831c96afd990e457613dc642">cxcursor::getCursorDecl</link>(cursor);
08156 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;VarDecl&#32;*VD&#32;=&#32;dyn_cast&lt;VarDecl&gt;(D))&#32;{
08157 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(VD-&gt;getTLSKind())&#32;{
08158 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;VarDecl::TLS_None:
08159 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;CXTLS_None;
08160 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;VarDecl::TLS_Dynamic:
08161 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;CXTLS_Dynamic;
08162 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;VarDecl::TLS_Static:
08163 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;CXTLS_Static;
08164 &#32;&#32;&#32;&#32;}
08165 &#32;&#32;}
08166 
08167 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;CXTLS_None;
08168 }
</programlisting><para>
References <link linkend="__c_x_cursor_8cpp_source_1l01101">clang::cxcursor::getCursorDecl()</link>.</para>
    </section><anchor xml:id="__c_index_8cpp_1af05b946a0d65bb5a668e44875f440b2a"/>    <section>
    <title>clang_getCursorVisibility()</title>
<indexterm><primary>clang_getCursorVisibility</primary><secondary>CIndex.cpp</secondary></indexterm>
<indexterm><primary>CIndex.cpp</primary><secondary>clang_getCursorVisibility</secondary></indexterm>
<para><computeroutput>CXVisibilityKind clang_getCursorVisibility (CXCursor cursor)</computeroutput></para><para>
Definition at line <link linkend="__c_index_8cpp_source_1l07884">7884</link> of file <link linkend="__c_index_8cpp_source">CIndex.cpp</link>.</para>
<programlisting>07884 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
07885 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!<link linkend="__c_index_8cpp_1a5d47db8f608ae0c266d6551875d46b80">clang_isDeclaration</link>(cursor.kind))
07886 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;CXVisibility_Invalid;
07887 
07888 &#32;&#32;<emphasis role="keyword">const</emphasis>&#32;Decl&#32;*D&#32;=&#32;<link linkend="_namespaceclang_1_1cxcursor_1a1f702246831c96afd990e457613dc642">cxcursor::getCursorDecl</link>(cursor);
07889 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;NamedDecl&#32;*ND&#32;=&#32;dyn_cast_or_null&lt;NamedDecl&gt;(D))
07890 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(ND-&gt;getVisibility())&#32;{
07891 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;HiddenVisibility:
07892 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;CXVisibility_Hidden;
07893 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;ProtectedVisibility:
07894 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;CXVisibility_Protected;
07895 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;DefaultVisibility:
07896 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;CXVisibility_Default;
07897 &#32;&#32;&#32;&#32;};
07898 
07899 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;CXVisibility_Invalid;
07900 }
</programlisting><para>
References <link linkend="__c_index_8cpp_source_1l05934">clang_isDeclaration()</link>, and <link linkend="__c_x_cursor_8cpp_source_1l01101">clang::cxcursor::getCursorDecl()</link>.</para>
    </section><anchor xml:id="__c_index_8cpp_1a72299455a328faf612d238bf6aee6eb6"/>    <section>
    <title>clang_getCXTUResourceUsage()</title>
<indexterm><primary>clang_getCXTUResourceUsage</primary><secondary>CIndex.cpp</secondary></indexterm>
<indexterm><primary>CIndex.cpp</primary><secondary>clang_getCXTUResourceUsage</secondary></indexterm>
<para><computeroutput>CXTUResourceUsage clang_getCXTUResourceUsage (CXTranslationUnit TU)</computeroutput></para><para>
Definition at line <link linkend="__c_index_8cpp_source_1l08736">8736</link> of file <link linkend="__c_index_8cpp_source">CIndex.cpp</link>.</para>
<programlisting>08736 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
08737 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(isNotUsableTU(TU))&#32;{
08738 &#32;&#32;&#32;&#32;<link linkend="__c_x_translation_unit_8h_1a4ec17e6e03ea0baf73e27802eae36106">LOG_BAD_TU</link>(TU);
08739 &#32;&#32;&#32;&#32;CXTUResourceUsage&#32;usage&#32;=&#32;{(<emphasis role="keywordtype">void</emphasis>&#32;*)<emphasis role="keyword">nullptr</emphasis>,&#32;0,&#32;<emphasis role="keyword">nullptr</emphasis>};
08740 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;usage;
08741 &#32;&#32;}
08742 
08743 &#32;&#32;ASTUnit&#32;*astUnit&#32;=&#32;cxtu::getASTUnit(TU);
08744 &#32;&#32;std::unique_ptr&lt;MemUsageEntries&gt;&#32;entries(<emphasis role="keyword">new</emphasis>&#32;<link linkend="__c_index_8cpp_1a8c5eea8e1522f74827362d4be37f75c8">MemUsageEntries</link>());
08745 &#32;&#32;ASTContext&#32;&amp;astContext&#32;=&#32;astUnit-&gt;getASTContext();
08746 
08747 &#32;&#32;<emphasis role="comment">//&#32;How&#32;much&#32;memory&#32;is&#32;used&#32;by&#32;AST&#32;nodes&#32;and&#32;types?</emphasis>
08748 &#32;&#32;createCXTUResourceUsageEntry(
08749 &#32;&#32;&#32;&#32;&#32;&#32;*entries,&#32;CXTUResourceUsage_AST,
08750 &#32;&#32;&#32;&#32;&#32;&#32;(<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>)astContext.getASTAllocatedMemory());
08751 
08752 &#32;&#32;<emphasis role="comment">//&#32;How&#32;much&#32;memory&#32;is&#32;used&#32;by&#32;identifiers?</emphasis>
08753 &#32;&#32;createCXTUResourceUsageEntry(
08754 &#32;&#32;&#32;&#32;&#32;&#32;*entries,&#32;CXTUResourceUsage_Identifiers,
08755 &#32;&#32;&#32;&#32;&#32;&#32;(<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>)astContext.Idents.getAllocator().getTotalMemory());
08756 
08757 &#32;&#32;<emphasis role="comment">//&#32;How&#32;much&#32;memory&#32;is&#32;used&#32;for&#32;selectors?</emphasis>
08758 &#32;&#32;createCXTUResourceUsageEntry(
08759 &#32;&#32;&#32;&#32;&#32;&#32;*entries,&#32;CXTUResourceUsage_Selectors,
08760 &#32;&#32;&#32;&#32;&#32;&#32;(<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>)astContext.Selectors.getTotalMemory());
08761 
08762 &#32;&#32;<emphasis role="comment">//&#32;How&#32;much&#32;memory&#32;is&#32;used&#32;by&#32;ASTContext&apos;s&#32;side&#32;tables?</emphasis>
08763 &#32;&#32;createCXTUResourceUsageEntry(
08764 &#32;&#32;&#32;&#32;&#32;&#32;*entries,&#32;CXTUResourceUsage_AST_SideTables,
08765 &#32;&#32;&#32;&#32;&#32;&#32;(<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>)astContext.getSideTableAllocatedMemory());
08766 
08767 &#32;&#32;<emphasis role="comment">//&#32;How&#32;much&#32;memory&#32;is&#32;used&#32;for&#32;caching&#32;global&#32;code&#32;completion&#32;results?</emphasis>
08768 &#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;completionBytes&#32;=&#32;0;
08769 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(GlobalCodeCompletionAllocator&#32;*completionAllocator&#32;=
08770 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;astUnit-&gt;getCachedCompletionAllocator().get())&#32;{
08771 &#32;&#32;&#32;&#32;completionBytes&#32;=&#32;completionAllocator-&gt;getTotalMemory();
08772 &#32;&#32;}
08773 &#32;&#32;createCXTUResourceUsageEntry(
08774 &#32;&#32;&#32;&#32;&#32;&#32;*entries,&#32;CXTUResourceUsage_GlobalCompletionResults,&#32;completionBytes);
08775 
08776 &#32;&#32;<emphasis role="comment">//&#32;How&#32;much&#32;memory&#32;is&#32;being&#32;used&#32;by&#32;SourceManager&apos;s&#32;content&#32;cache?</emphasis>
08777 &#32;&#32;createCXTUResourceUsageEntry(
08778 &#32;&#32;&#32;&#32;&#32;&#32;*entries,&#32;CXTUResourceUsage_SourceManagerContentCache,
08779 &#32;&#32;&#32;&#32;&#32;&#32;(<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>)astContext.getSourceManager().getContentCacheSize());
08780 
08781 &#32;&#32;<emphasis role="comment">//&#32;How&#32;much&#32;memory&#32;is&#32;being&#32;used&#32;by&#32;the&#32;MemoryBuffer&apos;s&#32;in&#32;SourceManager?</emphasis>
08782 &#32;&#32;<emphasis role="keyword">const</emphasis>&#32;SourceManager::MemoryBufferSizes&#32;&amp;srcBufs&#32;=
08783 &#32;&#32;&#32;&#32;&#32;&#32;astUnit-&gt;getSourceManager().getMemoryBufferSizes();
08784 
08785 &#32;&#32;createCXTUResourceUsageEntry(*entries,
08786 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;CXTUResourceUsage_SourceManager_Membuffer_Malloc,
08787 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>)srcBufs.malloc_bytes);
08788 &#32;&#32;createCXTUResourceUsageEntry(*entries,
08789 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;CXTUResourceUsage_SourceManager_Membuffer_MMap,
08790 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>)srcBufs.mmap_bytes);
08791 &#32;&#32;createCXTUResourceUsageEntry(
08792 &#32;&#32;&#32;&#32;&#32;&#32;*entries,&#32;CXTUResourceUsage_SourceManager_DataStructures,
08793 &#32;&#32;&#32;&#32;&#32;&#32;(<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>)astContext.getSourceManager().getDataStructureSizes());
08794 
08795 &#32;&#32;<emphasis role="comment">//&#32;How&#32;much&#32;memory&#32;is&#32;being&#32;used&#32;by&#32;the&#32;ExternalASTSource?</emphasis>
08796 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(ExternalASTSource&#32;*esrc&#32;=&#32;astContext.getExternalSource())&#32;{
08797 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;ExternalASTSource::MemoryBufferSizes&#32;&amp;sizes&#32;=
08798 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;esrc-&gt;getMemoryBufferSizes();
08799 
08800 &#32;&#32;&#32;&#32;createCXTUResourceUsageEntry(
08801 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*entries,&#32;CXTUResourceUsage_ExternalASTSource_Membuffer_Malloc,
08802 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>)sizes.malloc_bytes);
08803 &#32;&#32;&#32;&#32;createCXTUResourceUsageEntry(
08804 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*entries,&#32;CXTUResourceUsage_ExternalASTSource_Membuffer_MMap,
08805 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>)sizes.mmap_bytes);
08806 &#32;&#32;}
08807 
08808 &#32;&#32;<emphasis role="comment">//&#32;How&#32;much&#32;memory&#32;is&#32;being&#32;used&#32;by&#32;the&#32;Preprocessor?</emphasis>
08809 &#32;&#32;Preprocessor&#32;&amp;pp&#32;=&#32;astUnit-&gt;getPreprocessor();
08810 &#32;&#32;createCXTUResourceUsageEntry(*entries,&#32;CXTUResourceUsage_Preprocessor,
08811 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;pp.getTotalMemory());
08812 
08813 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(PreprocessingRecord&#32;*pRec&#32;=&#32;pp.getPreprocessingRecord())&#32;{
08814 &#32;&#32;&#32;&#32;createCXTUResourceUsageEntry(*entries,
08815 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;CXTUResourceUsage_PreprocessingRecord,
08816 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;pRec-&gt;getTotalMemory());
08817 &#32;&#32;}
08818 
08819 &#32;&#32;createCXTUResourceUsageEntry(*entries,
08820 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;CXTUResourceUsage_Preprocessor_HeaderSearch,
08821 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;pp.getHeaderSearchInfo().getTotalMemory());
08822 
08823 &#32;&#32;CXTUResourceUsage&#32;usage&#32;=&#32;{(<emphasis role="keywordtype">void</emphasis>&#32;*)entries.get(),&#32;(unsigned)entries-&gt;size(),
08824 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;!entries-&gt;empty()&#32;?&#32;&amp;(*entries)[0]&#32;:&#32;<emphasis role="keyword">nullptr</emphasis>};
08825 &#32;&#32;(void)entries.release();
08826 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;usage;
08827 }
</programlisting><para>
Referenced by <link linkend="__c_index_8cpp_source_1l08915">clang::PrintLibclangResourceUsage()</link>, and <link linkend="_c-index-test_8c_source_1l01263">PrintMemoryUsage()</link>.</para>
    </section><anchor xml:id="__c_index_8cpp_1a877e5ce84687daa2e6befb14dc8fea24"/>    <section>
    <title>clang_getDefinitionSpellingAndExtent()</title>
<indexterm><primary>clang_getDefinitionSpellingAndExtent</primary><secondary>CIndex.cpp</secondary></indexterm>
<indexterm><primary>CIndex.cpp</primary><secondary>clang_getDefinitionSpellingAndExtent</secondary></indexterm>
<para><computeroutput>void clang_getDefinitionSpellingAndExtent (CXCursor C, const char ** startBuf, const char ** endBuf, unsigned * startLine, unsigned * startColumn, unsigned * endLine, unsigned * endColumn)</computeroutput></para><para>
Definition at line <link linkend="__c_index_8cpp_source_1l06716">6716</link> of file <link linkend="__c_index_8cpp_source">CIndex.cpp</link>.</para>
<programlisting>06718 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
06719 &#32;&#32;assert(<link linkend="_namespaceclang_1_1cxcursor_1a1f702246831c96afd990e457613dc642">getCursorDecl</link>(C)&#32;&amp;&amp;&#32;<emphasis role="stringliteral">&quot;CXCursor&#32;has&#32;null&#32;decl&quot;</emphasis>);
06720 &#32;&#32;<emphasis role="keyword">const</emphasis>&#32;FunctionDecl&#32;*FD&#32;=&#32;dyn_cast&lt;FunctionDecl&gt;(<link linkend="_namespaceclang_1_1cxcursor_1a1f702246831c96afd990e457613dc642">getCursorDecl</link>(C));
06721 &#32;&#32;CompoundStmt&#32;*Body&#32;=&#32;dyn_cast&lt;CompoundStmt&gt;(FD-&gt;getBody());
06722 
06723 &#32;&#32;SourceManager&#32;&amp;SM&#32;=&#32;FD-&gt;getASTContext().getSourceManager();
06724 &#32;&#32;*startBuf&#32;=&#32;SM.getCharacterData(Body-&gt;getLBracLoc());
06725 &#32;&#32;*endBuf&#32;=&#32;SM.getCharacterData(Body-&gt;getRBracLoc());
06726 &#32;&#32;*startLine&#32;=&#32;SM.getSpellingLineNumber(Body-&gt;getLBracLoc());
06727 &#32;&#32;*startColumn&#32;=&#32;SM.getSpellingColumnNumber(Body-&gt;getLBracLoc());
06728 &#32;&#32;*endLine&#32;=&#32;SM.getSpellingLineNumber(Body-&gt;getRBracLoc());
06729 &#32;&#32;*endColumn&#32;=&#32;SM.getSpellingColumnNumber(Body-&gt;getRBracLoc());
06730 }
</programlisting><para>
References <link linkend="__c_x_cursor_8cpp_source_1l01101">clang::cxcursor::getCursorDecl()</link>.</para>
    </section><anchor xml:id="__c_index_8cpp_1a7c72c3450d02a5d985f152cc0dee1785"/>    <section>
    <title>clang_getFile()</title>
<indexterm><primary>clang_getFile</primary><secondary>CIndex.cpp</secondary></indexterm>
<indexterm><primary>CIndex.cpp</primary><secondary>clang_getFile</secondary></indexterm>
<para><computeroutput>CXFile clang_getFile (CXTranslationUnit TU, const char * file_name)</computeroutput></para><para>
Definition at line <link linkend="__c_index_8cpp_source_1l04395">4395</link> of file <link linkend="__c_index_8cpp_source">CIndex.cpp</link>.</para>
<programlisting>04395 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
04396 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(isNotUsableTU(TU))&#32;{
04397 &#32;&#32;&#32;&#32;<link linkend="__c_x_translation_unit_8h_1a4ec17e6e03ea0baf73e27802eae36106">LOG_BAD_TU</link>(TU);
04398 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">nullptr</emphasis>;
04399 &#32;&#32;}
04400 
04401 &#32;&#32;ASTUnit&#32;*CXXUnit&#32;=&#32;cxtu::getASTUnit(TU);
04402 
04403 &#32;&#32;FileManager&#32;&amp;FMgr&#32;=&#32;CXXUnit-&gt;getFileManager();
04404 &#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;File&#32;=&#32;FMgr.getFile(file_name);
04405 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!File)
04406 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">nullptr</emphasis>;
04407 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">const_cast&lt;</emphasis>FileEntry&#32;*<emphasis role="keyword">&gt;</emphasis>(*File);
04408 }
</programlisting>    </section><anchor xml:id="__c_index_8cpp_1ab1b9031c14339924bb73c9460957700f"/>    <section>
    <title>clang_getFileContents()</title>
<indexterm><primary>clang_getFileContents</primary><secondary>CIndex.cpp</secondary></indexterm>
<indexterm><primary>CIndex.cpp</primary><secondary>clang_getFileContents</secondary></indexterm>
<para><computeroutput>const char* clang_getFileContents (CXTranslationUnit TU, CXFile file, size_t * size)</computeroutput></para><para>
Definition at line <link linkend="__c_index_8cpp_source_1l04410">4410</link> of file <link linkend="__c_index_8cpp_source">CIndex.cpp</link>.</para>
<programlisting>04411 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
04412 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(isNotUsableTU(TU))&#32;{
04413 &#32;&#32;&#32;&#32;<link linkend="__c_x_translation_unit_8h_1a4ec17e6e03ea0baf73e27802eae36106">LOG_BAD_TU</link>(TU);
04414 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">nullptr</emphasis>;
04415 &#32;&#32;}
04416 
04417 &#32;&#32;<emphasis role="keyword">const</emphasis>&#32;SourceManager&#32;&amp;SM&#32;=&#32;cxtu::getASTUnit(TU)-&gt;getSourceManager();
04418 &#32;&#32;FileID&#32;fid&#32;=&#32;SM.translateFile(<emphasis role="keyword">static_cast&lt;</emphasis>FileEntry&#32;*<emphasis role="keyword">&gt;</emphasis>(file));
04419 &#32;&#32;llvm::Optional&lt;llvm::MemoryBufferRef&gt;&#32;buf&#32;=&#32;SM.getBufferOrNone(fid);
04420 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!buf)&#32;{
04421 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(size)
04422 &#32;&#32;&#32;&#32;&#32;&#32;*size&#32;=&#32;0;
04423 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">nullptr</emphasis>;
04424 &#32;&#32;}
04425 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(size)
04426 &#32;&#32;&#32;&#32;*size&#32;=&#32;buf-&gt;getBufferSize();
04427 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;buf-&gt;getBufferStart();
04428 }
</programlisting>    </section><anchor xml:id="__c_index_8cpp_1a263c34f5782353186990b2c990d648fc"/>    <section>
    <title>clang_getFileName()</title>
<indexterm><primary>clang_getFileName</primary><secondary>CIndex.cpp</secondary></indexterm>
<indexterm><primary>CIndex.cpp</primary><secondary>clang_getFileName</secondary></indexterm>
<para><computeroutput>CXString clang_getFileName (CXFile SFile)</computeroutput></para><para>
Definition at line <link linkend="__c_index_8cpp_source_1l04379">4379</link> of file <link linkend="__c_index_8cpp_source">CIndex.cpp</link>.</para>
<programlisting>04379 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
04380 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!SFile)
04381 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1a8684a35d52ccb8c623144db89a0205e1">cxstring::createNull</link>();
04382 
04383 &#32;&#32;FileEntry&#32;*FEnt&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis>FileEntry&#32;*<emphasis role="keyword">&gt;</emphasis>(SFile);
04384 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(FEnt-&gt;getName());
04385 }
</programlisting><para>
References <link linkend="__c_x_string_8cpp_source_1l00050">clang::cxstring::createNull()</link>, and <link linkend="__c_x_string_8cpp_source_1l00057">clang::cxstring::createRef()</link>.</para>
<para>
Referenced by <link linkend="_c-index-test_8c_source_1l01418">InclusionVisitor()</link>, and <link linkend="__c_index_8cpp_source_1l09139">clang::cxindex::Logger::operator&lt;&lt;()</link>.</para>
    </section><anchor xml:id="__c_index_8cpp_1a67542ed54ee45f1eaead6d69d6dd2a5d"/>    <section>
    <title>clang_getFileTime()</title>
<indexterm><primary>clang_getFileTime</primary><secondary>CIndex.cpp</secondary></indexterm>
<indexterm><primary>CIndex.cpp</primary><secondary>clang_getFileTime</secondary></indexterm>
<para><computeroutput>time_t clang_getFileTime (CXFile SFile)</computeroutput></para><para>
Definition at line <link linkend="__c_index_8cpp_source_1l04387">4387</link> of file <link linkend="__c_index_8cpp_source">CIndex.cpp</link>.</para>
<programlisting>04387 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
04388 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!SFile)
04389 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
04390 
04391 &#32;&#32;FileEntry&#32;*FEnt&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis>FileEntry&#32;*<emphasis role="keyword">&gt;</emphasis>(SFile);
04392 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;FEnt-&gt;getModificationTime();
04393 }
</programlisting>    </section><anchor xml:id="__c_index_8cpp_1abe0d3306cef8c302d1d4b4e077dca925"/>    <section>
    <title>clang_getFileUniqueID()</title>
<indexterm><primary>clang_getFileUniqueID</primary><secondary>CIndex.cpp</secondary></indexterm>
<indexterm><primary>CIndex.cpp</primary><secondary>clang_getFileUniqueID</secondary></indexterm>
<para><computeroutput>int clang_getFileUniqueID (CXFile file, CXFileUniqueID * outID)</computeroutput></para><para>
Definition at line <link linkend="__c_index_8cpp_source_1l04446">4446</link> of file <link linkend="__c_index_8cpp_source">CIndex.cpp</link>.</para>
<programlisting>04446 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
04447 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!file&#32;||&#32;!outID)
04448 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;1;
04449 
04450 &#32;&#32;FileEntry&#32;*FEnt&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis>FileEntry&#32;*<emphasis role="keyword">&gt;</emphasis>(file);
04451 &#32;&#32;<emphasis role="keyword">const</emphasis>&#32;llvm::sys::fs::UniqueID&#32;&amp;ID&#32;=&#32;FEnt-&gt;getUniqueID();
04452 &#32;&#32;outID-&gt;data[0]&#32;=&#32;ID.getDevice();
04453 &#32;&#32;outID-&gt;data[1]&#32;=&#32;ID.getFile();
04454 &#32;&#32;outID-&gt;data[2]&#32;=&#32;FEnt-&gt;getModificationTime();
04455 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
04456 }
</programlisting>    </section><anchor xml:id="__c_index_8cpp_1abddfbdf52be8460f6501ca428494ee48"/>    <section>
    <title>clang_getIBOutletCollectionType()</title>
<indexterm><primary>clang_getIBOutletCollectionType</primary><secondary>CIndex.cpp</secondary></indexterm>
<indexterm><primary>CIndex.cpp</primary><secondary>clang_getIBOutletCollectionType</secondary></indexterm>
<para><computeroutput>CXType clang_getIBOutletCollectionType (CXCursor C)</computeroutput></para><para>
Definition at line <link linkend="__c_index_8cpp_source_1l08664">8664</link> of file <link linkend="__c_index_8cpp_source">CIndex.cpp</link>.</para>
<programlisting>08664 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
08665 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(C.kind&#32;!=&#32;CXCursor_IBOutletCollectionAttr)
08666 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxtype_1afab44f51bd657249b6dcf6476c6b6b98">cxtype::MakeCXType</link>(QualType(),&#32;<link linkend="_namespaceclang_1_1cxcursor_1a23a495df22339e8289ae6d2421f493b6">cxcursor::getCursorTU</link>(C));
08667 
08668 &#32;&#32;<emphasis role="keyword">const</emphasis>&#32;IBOutletCollectionAttr&#32;*A&#32;=
08669 &#32;&#32;&#32;&#32;&#32;&#32;cast&lt;IBOutletCollectionAttr&gt;(<link linkend="_namespaceclang_1_1cxcursor_1afdc6aa952869e16b4981b07f05adff7f">cxcursor::getCursorAttr</link>(C));
08670 
08671 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxtype_1afab44f51bd657249b6dcf6476c6b6b98">cxtype::MakeCXType</link>(A-&gt;getInterface(),&#32;<link linkend="_namespaceclang_1_1cxcursor_1a23a495df22339e8289ae6d2421f493b6">cxcursor::getCursorTU</link>(C));
08672 }
</programlisting><para>
References <link linkend="__c_x_cursor_8cpp_source_1l01118">clang::cxcursor::getCursorAttr()</link>, <link linkend="__c_x_cursor_8cpp_source_1l01133">clang::cxcursor::getCursorTU()</link>, and <link linkend="__c_x_type_8cpp_source_1l00126">clang::cxtype::MakeCXType()</link>.</para>
    </section><anchor xml:id="__c_index_8cpp_1a9baf5d19004c01b13cca32574bf6f595"/>    <section>
    <title>clang_getIncludedFile()</title>
<indexterm><primary>clang_getIncludedFile</primary><secondary>CIndex.cpp</secondary></indexterm>
<indexterm><primary>CIndex.cpp</primary><secondary>clang_getIncludedFile</secondary></indexterm>
<para><computeroutput>CXFile clang_getIncludedFile (CXCursor cursor)</computeroutput></para><para>
Definition at line <link linkend="__c_index_8cpp_source_1l08256">8256</link> of file <link linkend="__c_index_8cpp_source">CIndex.cpp</link>.</para>
<programlisting>08256 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
08257 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(cursor.kind&#32;!=&#32;CXCursor_InclusionDirective)
08258 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">nullptr</emphasis>;
08259 
08260 &#32;&#32;<emphasis role="keyword">const</emphasis>&#32;InclusionDirective&#32;*ID&#32;=&#32;<link linkend="_namespaceclang_1_1cxcursor_1a3894d584fef6edb8ba4333fc240315ac">getCursorInclusionDirective</link>(cursor);
08261 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">const_cast&lt;</emphasis>FileEntry&#32;*<emphasis role="keyword">&gt;</emphasis>(ID-&gt;getFile());
08262 }
</programlisting><para>
References <link linkend="__c_x_cursor_8cpp_source_1l01040">clang::cxcursor::getCursorInclusionDirective()</link>.</para>
    </section><anchor xml:id="__c_index_8cpp_1a4a0e32160409a25df3774943953152ba"/>    <section>
    <title>clang_getModuleForFile()</title>
<indexterm><primary>clang_getModuleForFile</primary><secondary>CIndex.cpp</secondary></indexterm>
<indexterm><primary>CIndex.cpp</primary><secondary>clang_getModuleForFile</secondary></indexterm>
<para><computeroutput>CXModule clang_getModuleForFile (CXTranslationUnit TU, CXFile File)</computeroutput></para><para>
Definition at line <link linkend="__c_index_8cpp_source_1l08450">8450</link> of file <link linkend="__c_index_8cpp_source">CIndex.cpp</link>.</para>
<programlisting>08450 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
08451 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(isNotUsableTU(TU))&#32;{
08452 &#32;&#32;&#32;&#32;<link linkend="__c_x_translation_unit_8h_1a4ec17e6e03ea0baf73e27802eae36106">LOG_BAD_TU</link>(TU);
08453 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">nullptr</emphasis>;
08454 &#32;&#32;}
08455 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!File)
08456 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">nullptr</emphasis>;
08457 &#32;&#32;FileEntry&#32;*FE&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis>FileEntry&#32;*<emphasis role="keyword">&gt;</emphasis>(File);
08458 
08459 &#32;&#32;ASTUnit&#32;&amp;Unit&#32;=&#32;*cxtu::getASTUnit(TU);
08460 &#32;&#32;HeaderSearch&#32;&amp;HS&#32;=&#32;Unit.getPreprocessor().getHeaderSearchInfo();
08461 &#32;&#32;ModuleMap::KnownHeader&#32;Header&#32;=&#32;HS.findModuleForHeader(FE);
08462 
08463 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;Header.getModule();
08464 }
</programlisting>    </section><anchor xml:id="__c_index_8cpp_1aa22233466eaf91f6f3cf6b84255c3b68"/>    <section>
    <title>clang_getNullCursor()</title>
<indexterm><primary>clang_getNullCursor</primary><secondary>CIndex.cpp</secondary></indexterm>
<indexterm><primary>CIndex.cpp</primary><secondary>clang_getNullCursor</secondary></indexterm>
<para><computeroutput>CXCursor clang_getNullCursor (void )</computeroutput></para><para>
Definition at line <link linkend="__c_index_8cpp_source_1l05901">5901</link> of file <link linkend="__c_index_8cpp_source">CIndex.cpp</link>.</para>
<programlisting>05901 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
05902 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxcursor_1aa8325b990acde766ecd9276d7d9df53a">MakeCXCursorInvalid</link>(CXCursor_InvalidFile);
05903 }
</programlisting><para>
References <link linkend="__c_x_cursor_8cpp_source_1l00034">clang::cxcursor::MakeCXCursorInvalid()</link>.</para>
<para>
Referenced by <link linkend="__c_x_index_data_consumer_8cpp_source_1l00279">clang::cxindex::AttrListInfo::AttrListInfo()</link>, <link linkend="__c_x_cursor_8cpp_source_1l01283">clang_Cursor_getArgument()</link>, <link linkend="__c_index_8cpp_source_1l08925">clang_Cursor_getVarDeclInitializer()</link>, <link linkend="__c_x_cursor_8cpp_source_1l01253">clang_Cursor_isNull()</link>, <link linkend="__c_index_8cpp_source_1l06411">clang_getCursorDefinition()</link>, <link linkend="__c_index_8cpp_source_1l08239">clang_getCursorLexicalParent()</link>, <link linkend="__c_index_8cpp_source_1l06301">clang_getCursorReferenced()</link>, <link linkend="__c_index_8cpp_source_1l08219">clang_getCursorSemanticParent()</link>, <link linkend="__c_index_8cpp_source_1l06689">clang_getOverloadedDecl()</link>, <link linkend="__c_index_c_x_x_8cpp_source_1l00082">clang_getSpecializedCursorTemplate()</link>, <link linkend="__c_index_8cpp_source_1l06123">clang::cxcursor::getCursor()</link>, <link linkend="__c_x_index_data_consumer_8cpp_source_1l00741">clang::cxindex::CXIndexDataConsumer::handleObjCCategory()</link>, <link linkend="__c_x_index_data_consumer_8cpp_source_1l00773">clang::cxindex::CXIndexDataConsumer::handleObjCCategoryImpl()</link>, and <link linkend="__c_x_index_data_consumer_8cpp_source_1l00656">clang::cxindex::CXIndexDataConsumer::handleObjCInterface()</link>.</para>
    </section><anchor xml:id="__c_index_8cpp_1a0456530befeaf5dfc3ab402201f29eae"/>    <section>
    <title>clang_getNumOverloadedDecls()</title>
<indexterm><primary>clang_getNumOverloadedDecls</primary><secondary>CIndex.cpp</secondary></indexterm>
<indexterm><primary>CIndex.cpp</primary><secondary>clang_getNumOverloadedDecls</secondary></indexterm>
<para><computeroutput>unsigned clang_getNumOverloadedDecls (CXCursor C)</computeroutput></para><para>
Definition at line <link linkend="__c_index_8cpp_source_1l06670">6670</link> of file <link linkend="__c_index_8cpp_source">CIndex.cpp</link>.</para>
<programlisting>06670 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
06671 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(C.kind&#32;!=&#32;CXCursor_OverloadedDeclRef)
06672 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
06673 
06674 &#32;&#32;<link linkend="_namespaceclang_1_1cxcursor_1a944e67de567f6905f10876d7585ac43b">OverloadedDeclRefStorage</link>&#32;Storage&#32;=&#32;<link linkend="_namespaceclang_1_1cxcursor_1a4b41e93d6de24aed1376ec7f789efa2a">getCursorOverloadedDeclRef</link>(C).first;
06675 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;OverloadExpr&#32;*E&#32;=&#32;Storage.dyn_cast&lt;<emphasis role="keyword">const</emphasis>&#32;OverloadExpr&#32;*&gt;())
06676 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;E-&gt;getNumDecls();
06677 
06678 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(OverloadedTemplateStorage&#32;*S&#32;=
06679 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Storage.dyn_cast&lt;OverloadedTemplateStorage&#32;*&gt;())
06680 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;S-&gt;size();
06681 
06682 &#32;&#32;<emphasis role="keyword">const</emphasis>&#32;Decl&#32;*D&#32;=&#32;Storage.get&lt;<emphasis role="keyword">const</emphasis>&#32;Decl&#32;*&gt;();
06683 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;UsingDecl&#32;*Using&#32;=&#32;dyn_cast&lt;UsingDecl&gt;(D))
06684 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;Using-&gt;shadow_size();
06685 
06686 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
06687 }
</programlisting><para>
References <link linkend="__c_x_cursor_8cpp_source_1l01094">clang::cxcursor::getCursorOverloadedDeclRef()</link>.</para>
<para>
Referenced by <link linkend="__c_index_8cpp_source_1l06689">clang_getOverloadedDecl()</link>.</para>
    </section><anchor xml:id="__c_index_8cpp_1a5bfefc8c75349072669d306071ec6d30"/>    <section>
    <title>clang_getOverloadedDecl()</title>
<indexterm><primary>clang_getOverloadedDecl</primary><secondary>CIndex.cpp</secondary></indexterm>
<indexterm><primary>CIndex.cpp</primary><secondary>clang_getOverloadedDecl</secondary></indexterm>
<para><computeroutput>CXCursor clang_getOverloadedDecl (CXCursor cursor, unsigned index)</computeroutput></para><para>
Definition at line <link linkend="__c_index_8cpp_source_1l06689">6689</link> of file <link linkend="__c_index_8cpp_source">CIndex.cpp</link>.</para>
<programlisting>06689 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
06690 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(cursor.kind&#32;!=&#32;CXCursor_OverloadedDeclRef)
06691 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__c_index_8cpp_1aa22233466eaf91f6f3cf6b84255c3b68">clang_getNullCursor</link>();
06692 
06693 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(index&#32;&gt;=&#32;<link linkend="__c_index_8cpp_1a0456530befeaf5dfc3ab402201f29eae">clang_getNumOverloadedDecls</link>(cursor))
06694 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__c_index_8cpp_1aa22233466eaf91f6f3cf6b84255c3b68">clang_getNullCursor</link>();
06695 
06696 &#32;&#32;CXTranslationUnit&#32;TU&#32;=&#32;<link linkend="_namespaceclang_1_1cxcursor_1a23a495df22339e8289ae6d2421f493b6">getCursorTU</link>(cursor);
06697 &#32;&#32;<link linkend="_namespaceclang_1_1cxcursor_1a944e67de567f6905f10876d7585ac43b">OverloadedDeclRefStorage</link>&#32;Storage&#32;=&#32;<link linkend="_namespaceclang_1_1cxcursor_1a4b41e93d6de24aed1376ec7f789efa2a">getCursorOverloadedDeclRef</link>(cursor).first;
06698 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;OverloadExpr&#32;*E&#32;=&#32;Storage.dyn_cast&lt;<emphasis role="keyword">const</emphasis>&#32;OverloadExpr&#32;*&gt;())
06699 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxcursor_1ab61ec2059175833672e8e78a376bb218">MakeCXCursor</link>(E-&gt;decls_begin()[index],&#32;TU);
06700 
06701 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(OverloadedTemplateStorage&#32;*S&#32;=
06702 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Storage.dyn_cast&lt;OverloadedTemplateStorage&#32;*&gt;())
06703 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxcursor_1ab61ec2059175833672e8e78a376bb218">MakeCXCursor</link>(S-&gt;begin()[index],&#32;TU);
06704 
06705 &#32;&#32;<emphasis role="keyword">const</emphasis>&#32;Decl&#32;*D&#32;=&#32;Storage.get&lt;<emphasis role="keyword">const</emphasis>&#32;Decl&#32;*&gt;();
06706 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;UsingDecl&#32;*Using&#32;=&#32;dyn_cast&lt;UsingDecl&gt;(D))&#32;{
06707 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;FIXME:&#32;This&#32;is,&#32;unfortunately,&#32;linear&#32;time.</emphasis>
06708 &#32;&#32;&#32;&#32;UsingDecl::shadow_iterator&#32;Pos&#32;=&#32;Using-&gt;shadow_begin();
06709 &#32;&#32;&#32;&#32;std::advance(Pos,&#32;index);
06710 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxcursor_1ab61ec2059175833672e8e78a376bb218">MakeCXCursor</link>(cast&lt;UsingShadowDecl&gt;(*Pos)-&gt;getTargetDecl(),&#32;TU);
06711 &#32;&#32;}
06712 
06713 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__c_index_8cpp_1aa22233466eaf91f6f3cf6b84255c3b68">clang_getNullCursor</link>();
06714 }
</programlisting><para>
References <link linkend="__c_index_8cpp_source_1l05901">clang_getNullCursor()</link>, <link linkend="__c_index_8cpp_source_1l06670">clang_getNumOverloadedDecls()</link>, <link linkend="__c_x_cursor_8cpp_source_1l01094">clang::cxcursor::getCursorOverloadedDeclRef()</link>, <link linkend="__c_x_cursor_8cpp_source_1l01133">clang::cxcursor::getCursorTU()</link>, and <link linkend="_namespaceclang_1_1cxcursor_1ab61ec2059175833672e8e78a376bb218">clang::cxcursor::MakeCXCursor()</link>.</para>
    </section><anchor xml:id="__c_index_8cpp_1add341497e44da969ce07c7fbc174d38a"/>    <section>
    <title>clang_getSkippedRanges()</title>
<indexterm><primary>clang_getSkippedRanges</primary><secondary>CIndex.cpp</secondary></indexterm>
<indexterm><primary>CIndex.cpp</primary><secondary>clang_getSkippedRanges</secondary></indexterm>
<para><computeroutput>CXSourceRangeList* clang_getSkippedRanges (CXTranslationUnit TU, CXFile file)</computeroutput></para><para>
Definition at line <link linkend="__c_index_8cpp_source_1l08834">8834</link> of file <link linkend="__c_index_8cpp_source">CIndex.cpp</link>.</para>
<programlisting>08834 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
08835 &#32;&#32;CXSourceRangeList&#32;*skipped&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;CXSourceRangeList;
08836 &#32;&#32;skipped-&gt;count&#32;=&#32;0;
08837 &#32;&#32;skipped-&gt;ranges&#32;=&#32;<emphasis role="keyword">nullptr</emphasis>;
08838 
08839 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(isNotUsableTU(TU))&#32;{
08840 &#32;&#32;&#32;&#32;<link linkend="__c_x_translation_unit_8h_1a4ec17e6e03ea0baf73e27802eae36106">LOG_BAD_TU</link>(TU);
08841 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;skipped;
08842 &#32;&#32;}
08843 
08844 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!file)
08845 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;skipped;
08846 
08847 &#32;&#32;ASTUnit&#32;*astUnit&#32;=&#32;cxtu::getASTUnit(TU);
08848 &#32;&#32;PreprocessingRecord&#32;*ppRec&#32;=
08849 &#32;&#32;&#32;&#32;&#32;&#32;astUnit-&gt;getPreprocessor().getPreprocessingRecord();
08850 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!ppRec)
08851 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;skipped;
08852 
08853 &#32;&#32;ASTContext&#32;&amp;Ctx&#32;=&#32;astUnit-&gt;getASTContext();
08854 &#32;&#32;SourceManager&#32;&amp;sm&#32;=&#32;Ctx.getSourceManager();
08855 &#32;&#32;FileEntry&#32;*fileEntry&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis>FileEntry&#32;*<emphasis role="keyword">&gt;</emphasis>(file);
08856 &#32;&#32;FileID&#32;wantedFileID&#32;=&#32;sm.translateFile(fileEntry);
08857 &#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;isMainFile&#32;=&#32;wantedFileID&#32;==&#32;sm.getMainFileID();
08858 
08859 &#32;&#32;<emphasis role="keyword">const</emphasis>&#32;std::vector&lt;SourceRange&gt;&#32;&amp;SkippedRanges&#32;=&#32;ppRec-&gt;getSkippedRanges();
08860 &#32;&#32;std::vector&lt;SourceRange&gt;&#32;wantedRanges;
08861 &#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(std::vector&lt;SourceRange&gt;::const_iterator&#32;i&#32;=&#32;SkippedRanges.begin(),
08862 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ei&#32;=&#32;SkippedRanges.end();
08863 &#32;&#32;&#32;&#32;&#32;&#32;&#32;i&#32;!=&#32;ei;&#32;++i)&#32;{
08864 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(sm.getFileID(i-&gt;getBegin())&#32;==&#32;wantedFileID&#32;||
08865 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sm.getFileID(i-&gt;getEnd())&#32;==&#32;wantedFileID)
08866 &#32;&#32;&#32;&#32;&#32;&#32;wantedRanges.push_back(*i);
08867 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(isMainFile&#32;&amp;&amp;&#32;(astUnit-&gt;isInPreambleFileID(i-&gt;getBegin())&#32;||
08868 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;astUnit-&gt;isInPreambleFileID(i-&gt;getEnd())))
08869 &#32;&#32;&#32;&#32;&#32;&#32;wantedRanges.push_back(*i);
08870 &#32;&#32;}
08871 
08872 &#32;&#32;skipped-&gt;count&#32;=&#32;wantedRanges.size();
08873 &#32;&#32;skipped-&gt;ranges&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;CXSourceRange[skipped-&gt;count];
08874 &#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">unsigned</emphasis>&#32;i&#32;=&#32;0,&#32;ei&#32;=&#32;skipped-&gt;count;&#32;i&#32;!=&#32;ei;&#32;++i)
08875 &#32;&#32;&#32;&#32;skipped-&gt;ranges[i]&#32;=&#32;<link linkend="_namespaceclang_1_1cxloc_1a39d02b462b1f3233518f01951d83d035">cxloc::translateSourceRange</link>(Ctx,&#32;wantedRanges[i]);
08876 
08877 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;skipped;
08878 }
</programlisting>    </section><anchor xml:id="__c_index_8cpp_1ae7b38c2c862cd0bde6882c48974b11e9"/>    <section>
    <title>clang_getToken()</title>
<indexterm><primary>clang_getToken</primary><secondary>CIndex.cpp</secondary></indexterm>
<indexterm><primary>CIndex.cpp</primary><secondary>clang_getToken</secondary></indexterm>
<para><computeroutput>CXToken* clang_getToken (CXTranslationUnit TU, CXSourceLocation Location)</computeroutput></para><para>
Definition at line <link linkend="__c_index_8cpp_source_1l06950">6950</link> of file <link linkend="__c_index_8cpp_source">CIndex.cpp</link>.</para>
<programlisting>06950 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
06951 &#32;&#32;<link linkend="__c_log_8h_1a24474e48ce7e218f17ae9353103470d8">LOG_FUNC_SECTION</link>&#32;{&#32;*Log&#32;&lt;&lt;&#32;TU&#32;&lt;&lt;&#32;<emphasis role="charliteral">&apos;&#32;&apos;</emphasis>&#32;&lt;&lt;&#32;Location;&#32;}
06952 
06953 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(isNotUsableTU(TU))&#32;{
06954 &#32;&#32;&#32;&#32;<link linkend="__c_x_translation_unit_8h_1a4ec17e6e03ea0baf73e27802eae36106">LOG_BAD_TU</link>(TU);
06955 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;NULL;
06956 &#32;&#32;}
06957 
06958 &#32;&#32;ASTUnit&#32;*CXXUnit&#32;=&#32;cxtu::getASTUnit(TU);
06959 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!CXXUnit)
06960 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;NULL;
06961 
06962 &#32;&#32;SourceLocation&#32;Begin&#32;=&#32;cxloc::translateSourceLocation(Location);
06963 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(Begin.isInvalid())
06964 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;NULL;
06965 &#32;&#32;SourceManager&#32;&amp;SM&#32;=&#32;CXXUnit-&gt;getSourceManager();
06966 &#32;&#32;std::pair&lt;FileID,&#32;unsigned&gt;&#32;DecomposedEnd&#32;=&#32;SM.getDecomposedLoc(Begin);
06967 &#32;&#32;DecomposedEnd.second&#32;+=
06968 &#32;&#32;&#32;&#32;&#32;&#32;Lexer::MeasureTokenLength(Begin,&#32;SM,&#32;CXXUnit-&gt;getLangOpts());
06969 
06970 &#32;&#32;SourceLocation&#32;End&#32;=
06971 &#32;&#32;&#32;&#32;&#32;&#32;SM.getComposedLoc(DecomposedEnd.first,&#32;DecomposedEnd.second);
06972 
06973 &#32;&#32;SmallVector&lt;CXToken,&#32;32&gt;&#32;CXTokens;
06974 &#32;&#32;getTokens(CXXUnit,&#32;SourceRange(Begin,&#32;End),&#32;CXTokens);
06975 
06976 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(CXTokens.empty())
06977 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;NULL;
06978 
06979 &#32;&#32;CXTokens.resize(1);
06980 &#32;&#32;CXToken&#32;*Token&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis>CXToken&#32;*<emphasis role="keyword">&gt;</emphasis>(llvm::safe_malloc(<emphasis role="keyword">sizeof</emphasis>(CXToken)));
06981 
06982 &#32;&#32;memmove(Token,&#32;CXTokens.data(),&#32;<emphasis role="keyword">sizeof</emphasis>(CXToken));
06983 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;Token;
06984 }
</programlisting><para>
References <link linkend="__c_log_8h_source_1l00100">LOG_FUNC_SECTION</link>.</para>
    </section><anchor xml:id="__c_index_8cpp_1a216d4670f967e3bd9f9c977691282047"/>    <section>
    <title>clang_getTokenExtent()</title>
<indexterm><primary>clang_getTokenExtent</primary><secondary>CIndex.cpp</secondary></indexterm>
<indexterm><primary>CIndex.cpp</primary><secondary>clang_getTokenExtent</secondary></indexterm>
<para><computeroutput>CXSourceRange clang_getTokenExtent (CXTranslationUnit TU, CXToken CXTok)</computeroutput></para><para>
Definition at line <link linkend="__c_index_8cpp_source_1l06867">6867</link> of file <link linkend="__c_index_8cpp_source">CIndex.cpp</link>.</para>
<programlisting>06867 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
06868 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(isNotUsableTU(TU))&#32;{
06869 &#32;&#32;&#32;&#32;<link linkend="__c_x_translation_unit_8h_1a4ec17e6e03ea0baf73e27802eae36106">LOG_BAD_TU</link>(TU);
06870 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__c_x_source_location_8cpp_1afadb1a95ce51366407cf6c363299a17f">clang_getNullRange</link>();
06871 &#32;&#32;}
06872 
06873 &#32;&#32;ASTUnit&#32;*CXXUnit&#32;=&#32;cxtu::getASTUnit(TU);
06874 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!CXXUnit)
06875 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__c_x_source_location_8cpp_1afadb1a95ce51366407cf6c363299a17f">clang_getNullRange</link>();
06876 
06877 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxloc_1a39d02b462b1f3233518f01951d83d035">cxloc::translateSourceRange</link>(
06878 &#32;&#32;&#32;&#32;&#32;&#32;CXXUnit-&gt;getASTContext(),
06879 &#32;&#32;&#32;&#32;&#32;&#32;SourceLocation::getFromRawEncoding(CXTok.int_data[1]));
06880 }
</programlisting>    </section><anchor xml:id="__c_index_8cpp_1a656e3a514ed80a5f265fba4e2cbe6ab3"/>    <section>
    <title>clang_getTokenKind()</title>
<indexterm><primary>clang_getTokenKind</primary><secondary>CIndex.cpp</secondary></indexterm>
<indexterm><primary>CIndex.cpp</primary><secondary>clang_getTokenKind</secondary></indexterm>
<para><computeroutput>CXTokenKind clang_getTokenKind (CXToken CXTok)</computeroutput></para><para>
Definition at line <link linkend="__c_index_8cpp_source_1l06806">6806</link> of file <link linkend="__c_index_8cpp_source">CIndex.cpp</link>.</para>
<programlisting>06806 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
06807 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">static_cast&lt;</emphasis>CXTokenKind<emphasis role="keyword">&gt;</emphasis>(CXTok.int_data[0]);
06808 }
</programlisting><para>
Referenced by <link linkend="__c_index_8cpp_source_1l06810">clang_getTokenSpelling()</link>.</para>
    </section><anchor xml:id="__c_index_8cpp_1a123bf1f8140225a384ea22b9a03b7c3a"/>    <section>
    <title>clang_getTokenLocation()</title>
<indexterm><primary>clang_getTokenLocation</primary><secondary>CIndex.cpp</secondary></indexterm>
<indexterm><primary>CIndex.cpp</primary><secondary>clang_getTokenLocation</secondary></indexterm>
<para><computeroutput>CXSourceLocation clang_getTokenLocation (CXTranslationUnit TU, CXToken CXTok)</computeroutput></para><para>
Definition at line <link linkend="__c_index_8cpp_source_1l06852">6852</link> of file <link linkend="__c_index_8cpp_source">CIndex.cpp</link>.</para>
<programlisting>06852 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
06853 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(isNotUsableTU(TU))&#32;{
06854 &#32;&#32;&#32;&#32;<link linkend="__c_x_translation_unit_8h_1a4ec17e6e03ea0baf73e27802eae36106">LOG_BAD_TU</link>(TU);
06855 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__c_x_source_location_8cpp_1a20bb1e9a72e2c16fbcb21958f0648947">clang_getNullLocation</link>();
06856 &#32;&#32;}
06857 
06858 &#32;&#32;ASTUnit&#32;*CXXUnit&#32;=&#32;cxtu::getASTUnit(TU);
06859 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!CXXUnit)
06860 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__c_x_source_location_8cpp_1a20bb1e9a72e2c16fbcb21958f0648947">clang_getNullLocation</link>();
06861 
06862 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;cxloc::translateSourceLocation(
06863 &#32;&#32;&#32;&#32;&#32;&#32;CXXUnit-&gt;getASTContext(),
06864 &#32;&#32;&#32;&#32;&#32;&#32;SourceLocation::getFromRawEncoding(CXTok.int_data[1]));
06865 }
</programlisting>    </section><anchor xml:id="__c_index_8cpp_1ac54c8685910211b22533b6aea1e5793f"/>    <section>
    <title>clang_getTokenSpelling()</title>
<indexterm><primary>clang_getTokenSpelling</primary><secondary>CIndex.cpp</secondary></indexterm>
<indexterm><primary>CIndex.cpp</primary><secondary>clang_getTokenSpelling</secondary></indexterm>
<para><computeroutput>CXString clang_getTokenSpelling (CXTranslationUnit TU, CXToken CXTok)</computeroutput></para><para>
Definition at line <link linkend="__c_index_8cpp_source_1l06810">6810</link> of file <link linkend="__c_index_8cpp_source">CIndex.cpp</link>.</para>
<programlisting>06810 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
06811 &#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(<link linkend="__c_index_8cpp_1a656e3a514ed80a5f265fba4e2cbe6ab3">clang_getTokenKind</link>(CXTok))&#32;{
06812 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXToken_Identifier:
06813 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXToken_Keyword:
06814 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;We&#32;know&#32;we&#32;have&#32;an&#32;IdentifierInfo*,&#32;so&#32;use&#32;that.</emphasis>
06815 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(
06816 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_cast&lt;</emphasis>IdentifierInfo&#32;*<emphasis role="keyword">&gt;</emphasis>(CXTok.ptr_data)-&gt;getNameStart());
06817 
06818 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXToken_Literal:&#32;{
06819 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;We&#32;have&#32;stashed&#32;the&#32;starting&#32;pointer&#32;in&#32;the&#32;ptr_data&#32;field.&#32;Use&#32;it.</emphasis>
06820 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*Text&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keyword">const&#32;</emphasis><emphasis role="keywordtype">char</emphasis>&#32;*<emphasis role="keyword">&gt;</emphasis>(CXTok.ptr_data);
06821 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1a19a4962be87f75a8c1fa5a0b75f76298">cxstring::createDup</link>(StringRef(Text,&#32;CXTok.int_data[2]));
06822 &#32;&#32;}
06823 
06824 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXToken_Punctuation:
06825 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXToken_Comment:
06826 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
06827 &#32;&#32;}
06828 
06829 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(isNotUsableTU(TU))&#32;{
06830 &#32;&#32;&#32;&#32;<link linkend="__c_x_translation_unit_8h_1a4ec17e6e03ea0baf73e27802eae36106">LOG_BAD_TU</link>(TU);
06831 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1a8a49aa6ea196abdde85886689f2630f9">cxstring::createEmpty</link>();
06832 &#32;&#32;}
06833 
06834 &#32;&#32;<emphasis role="comment">//&#32;We&#32;have&#32;to&#32;find&#32;the&#32;starting&#32;buffer&#32;pointer&#32;the&#32;hard&#32;way,&#32;by</emphasis>
06835 &#32;&#32;<emphasis role="comment">//&#32;deconstructing&#32;the&#32;source&#32;location.</emphasis>
06836 &#32;&#32;ASTUnit&#32;*CXXUnit&#32;=&#32;cxtu::getASTUnit(TU);
06837 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!CXXUnit)
06838 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1a8a49aa6ea196abdde85886689f2630f9">cxstring::createEmpty</link>();
06839 
06840 &#32;&#32;SourceLocation&#32;Loc&#32;=&#32;SourceLocation::getFromRawEncoding(CXTok.int_data[1]);
06841 &#32;&#32;std::pair&lt;FileID,&#32;unsigned&gt;&#32;LocInfo&#32;=
06842 &#32;&#32;&#32;&#32;&#32;&#32;CXXUnit-&gt;getSourceManager().getDecomposedSpellingLoc(Loc);
06843 &#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;Invalid&#32;=&#32;<emphasis role="keyword">false</emphasis>;
06844 &#32;&#32;StringRef&#32;Buffer&#32;=
06845 &#32;&#32;&#32;&#32;&#32;&#32;CXXUnit-&gt;getSourceManager().getBufferData(LocInfo.first,&#32;&amp;Invalid);
06846 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(Invalid)
06847 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1a8a49aa6ea196abdde85886689f2630f9">cxstring::createEmpty</link>();
06848 
06849 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1a19a4962be87f75a8c1fa5a0b75f76298">cxstring::createDup</link>(Buffer.substr(LocInfo.second,&#32;CXTok.int_data[2]));
06850 }
</programlisting><para>
References <link linkend="__c_index_8cpp_source_1l06806">clang_getTokenKind()</link>, <link linkend="__c_x_string_8cpp_source_1l00067">clang::cxstring::createDup()</link>, and <link linkend="__c_x_string_8cpp_source_1l00057">clang::cxstring::createRef()</link>.</para>
    </section><anchor xml:id="__c_index_8cpp_1af80b706bca2457340a69f2ff05258046"/>    <section>
    <title>clang_getTranslationUnitCursor()</title>
<indexterm><primary>clang_getTranslationUnitCursor</primary><secondary>CIndex.cpp</secondary></indexterm>
<indexterm><primary>CIndex.cpp</primary><secondary>clang_getTranslationUnitCursor</secondary></indexterm>
<para><computeroutput>CXCursor clang_getTranslationUnitCursor (CXTranslationUnit TU)</computeroutput></para><para>
Definition at line <link linkend="__c_index_8cpp_source_1l04321">4321</link> of file <link linkend="__c_index_8cpp_source">CIndex.cpp</link>.</para>
<programlisting>04321 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
04322 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(isNotUsableTU(TU))&#32;{
04323 &#32;&#32;&#32;&#32;<link linkend="__c_x_translation_unit_8h_1a4ec17e6e03ea0baf73e27802eae36106">LOG_BAD_TU</link>(TU);
04324 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__c_index_8cpp_1aa22233466eaf91f6f3cf6b84255c3b68">clang_getNullCursor</link>();
04325 &#32;&#32;}
04326 
04327 &#32;&#32;ASTUnit&#32;*CXXUnit&#32;=&#32;cxtu::getASTUnit(TU);
04328 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxcursor_1ab61ec2059175833672e8e78a376bb218">MakeCXCursor</link>(CXXUnit-&gt;getASTContext().getTranslationUnitDecl(),&#32;TU);
04329 }
</programlisting>    </section><anchor xml:id="__c_index_8cpp_1a042c9228f6e47d598c5112eb05940837"/>    <section>
    <title>clang_getTranslationUnitSpelling()</title>
<indexterm><primary>clang_getTranslationUnitSpelling</primary><secondary>CIndex.cpp</secondary></indexterm>
<indexterm><primary>CIndex.cpp</primary><secondary>clang_getTranslationUnitSpelling</secondary></indexterm>
<para><computeroutput>CXString clang_getTranslationUnitSpelling (CXTranslationUnit CTUnit)</computeroutput></para><para>
Definition at line <link linkend="__c_index_8cpp_source_1l04311">4311</link> of file <link linkend="__c_index_8cpp_source">CIndex.cpp</link>.</para>
<programlisting>04311 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
04312 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(isNotUsableTU(CTUnit))&#32;{
04313 &#32;&#32;&#32;&#32;<link linkend="__c_x_translation_unit_8h_1a4ec17e6e03ea0baf73e27802eae36106">LOG_BAD_TU</link>(CTUnit);
04314 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1a8a49aa6ea196abdde85886689f2630f9">cxstring::createEmpty</link>();
04315 &#32;&#32;}
04316 
04317 &#32;&#32;ASTUnit&#32;*CXXUnit&#32;=&#32;cxtu::getASTUnit(CTUnit);
04318 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1a19a4962be87f75a8c1fa5a0b75f76298">cxstring::createDup</link>(CXXUnit-&gt;getOriginalSourceFileName());
04319 }
</programlisting><para>
Referenced by <link linkend="__c_index_8cpp_source_1l04634">clang_getCursorSpelling()</link>.</para>
    </section><anchor xml:id="__c_index_8cpp_1a5482a4dddd4f6874d9cbbf5e6012e2d5"/>    <section>
    <title>clang_getTranslationUnitTargetInfo()</title>
<indexterm><primary>clang_getTranslationUnitTargetInfo</primary><secondary>CIndex.cpp</secondary></indexterm>
<indexterm><primary>CIndex.cpp</primary><secondary>clang_getTranslationUnitTargetInfo</secondary></indexterm>
<para><computeroutput>CXTargetInfo clang_getTranslationUnitTargetInfo (CXTranslationUnit CTUnit)</computeroutput></para><para>
Definition at line <link linkend="__c_index_8cpp_source_1l04331">4331</link> of file <link linkend="__c_index_8cpp_source">CIndex.cpp</link>.</para>
<programlisting>04331 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
04332 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(isNotUsableTU(CTUnit))&#32;{
04333 &#32;&#32;&#32;&#32;<link linkend="__c_x_translation_unit_8h_1a4ec17e6e03ea0baf73e27802eae36106">LOG_BAD_TU</link>(CTUnit);
04334 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">nullptr</emphasis>;
04335 &#32;&#32;}
04336 
04337 &#32;&#32;<link linkend="_struct_c_x_target_info_impl">CXTargetInfoImpl</link>&#32;*impl&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_struct_c_x_target_info_impl">CXTargetInfoImpl</link>();
04338 &#32;&#32;impl-&gt;<link linkend="_struct_c_x_target_info_impl_1a662b201dca7d2848e362fee786c91485">TranslationUnit</link>&#32;=&#32;CTUnit;
04339 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;impl;
04340 }
</programlisting>    </section><anchor xml:id="__c_index_8cpp_1aeba9f6263fe5dbde18abb55b2f321a34"/>    <section>
    <title>clang_getTUResourceUsageName()</title>
<indexterm><primary>clang_getTUResourceUsageName</primary><secondary>CIndex.cpp</secondary></indexterm>
<indexterm><primary>CIndex.cpp</primary><secondary>clang_getTUResourceUsageName</secondary></indexterm>
<para><computeroutput>const char* clang_getTUResourceUsageName (CXTUResourceUsageKind kind)</computeroutput></para><para>
Definition at line <link linkend="__c_index_8cpp_source_1l08687">8687</link> of file <link linkend="__c_index_8cpp_source">CIndex.cpp</link>.</para>
<programlisting>08687 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
08688 &#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*str&#32;=&#32;<emphasis role="stringliteral">&quot;&quot;</emphasis>;
08689 &#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(kind)&#32;{
08690 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXTUResourceUsage_AST:
08691 &#32;&#32;&#32;&#32;str&#32;=&#32;<emphasis role="stringliteral">&quot;ASTContext:&#32;expressions,&#32;declarations,&#32;and&#32;types&quot;</emphasis>;
08692 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
08693 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXTUResourceUsage_Identifiers:
08694 &#32;&#32;&#32;&#32;str&#32;=&#32;<emphasis role="stringliteral">&quot;ASTContext:&#32;identifiers&quot;</emphasis>;
08695 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
08696 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXTUResourceUsage_Selectors:
08697 &#32;&#32;&#32;&#32;str&#32;=&#32;<emphasis role="stringliteral">&quot;ASTContext:&#32;selectors&quot;</emphasis>;
08698 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
08699 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXTUResourceUsage_GlobalCompletionResults:
08700 &#32;&#32;&#32;&#32;str&#32;=&#32;<emphasis role="stringliteral">&quot;Code&#32;completion:&#32;cached&#32;global&#32;results&quot;</emphasis>;
08701 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
08702 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXTUResourceUsage_SourceManagerContentCache:
08703 &#32;&#32;&#32;&#32;str&#32;=&#32;<emphasis role="stringliteral">&quot;SourceManager:&#32;content&#32;cache&#32;allocator&quot;</emphasis>;
08704 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
08705 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXTUResourceUsage_AST_SideTables:
08706 &#32;&#32;&#32;&#32;str&#32;=&#32;<emphasis role="stringliteral">&quot;ASTContext:&#32;side&#32;tables&quot;</emphasis>;
08707 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
08708 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXTUResourceUsage_SourceManager_Membuffer_Malloc:
08709 &#32;&#32;&#32;&#32;str&#32;=&#32;<emphasis role="stringliteral">&quot;SourceManager:&#32;malloc&apos;ed&#32;memory&#32;buffers&quot;</emphasis>;
08710 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
08711 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXTUResourceUsage_SourceManager_Membuffer_MMap:
08712 &#32;&#32;&#32;&#32;str&#32;=&#32;<emphasis role="stringliteral">&quot;SourceManager:&#32;mmap&apos;ed&#32;memory&#32;buffers&quot;</emphasis>;
08713 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
08714 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXTUResourceUsage_ExternalASTSource_Membuffer_Malloc:
08715 &#32;&#32;&#32;&#32;str&#32;=&#32;<emphasis role="stringliteral">&quot;ExternalASTSource:&#32;malloc&apos;ed&#32;memory&#32;buffers&quot;</emphasis>;
08716 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
08717 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXTUResourceUsage_ExternalASTSource_Membuffer_MMap:
08718 &#32;&#32;&#32;&#32;str&#32;=&#32;<emphasis role="stringliteral">&quot;ExternalASTSource:&#32;mmap&apos;ed&#32;memory&#32;buffers&quot;</emphasis>;
08719 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
08720 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXTUResourceUsage_Preprocessor:
08721 &#32;&#32;&#32;&#32;str&#32;=&#32;<emphasis role="stringliteral">&quot;Preprocessor:&#32;malloc&apos;ed&#32;memory&quot;</emphasis>;
08722 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
08723 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXTUResourceUsage_PreprocessingRecord:
08724 &#32;&#32;&#32;&#32;str&#32;=&#32;<emphasis role="stringliteral">&quot;Preprocessor:&#32;PreprocessingRecord&quot;</emphasis>;
08725 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
08726 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXTUResourceUsage_SourceManager_DataStructures:
08727 &#32;&#32;&#32;&#32;str&#32;=&#32;<emphasis role="stringliteral">&quot;SourceManager:&#32;data&#32;structures&#32;and&#32;tables&quot;</emphasis>;
08728 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
08729 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXTUResourceUsage_Preprocessor_HeaderSearch:
08730 &#32;&#32;&#32;&#32;str&#32;=&#32;<emphasis role="stringliteral">&quot;Preprocessor:&#32;header&#32;search&#32;tables&quot;</emphasis>;
08731 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
08732 &#32;&#32;}
08733 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;str;
08734 }
</programlisting><para>
Referenced by <link linkend="__c_index_8cpp_source_1l08915">clang::PrintLibclangResourceUsage()</link>, and <link linkend="_c-index-test_8c_source_1l01263">PrintMemoryUsage()</link>.</para>
    </section><anchor xml:id="__c_index_8cpp_1ae1dbe324703f9f57822c6e5395cd0a45"/>    <section>
    <title>clang_hashCursor()</title>
<indexterm><primary>clang_hashCursor</primary><secondary>CIndex.cpp</secondary></indexterm>
<indexterm><primary>CIndex.cpp</primary><secondary>clang_hashCursor</secondary></indexterm>
<para><computeroutput>unsigned clang_hashCursor (CXCursor C)</computeroutput></para><para>
Definition at line <link linkend="__c_index_8cpp_source_1l05921">5921</link> of file <link linkend="__c_index_8cpp_source">CIndex.cpp</link>.</para>
<programlisting>05921 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
05922 &#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;Index&#32;=&#32;0;
05923 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="__c_index_8cpp_1ab958945dd59c351e1ae1a3f7f5668095">clang_isExpression</link>(C.kind)&#32;||&#32;<link linkend="__c_index_8cpp_1af186bec30eb4cb63c3a7a295ccbcfe8b">clang_isStatement</link>(C.kind))
05924 &#32;&#32;&#32;&#32;Index&#32;=&#32;1;
05925 
05926 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;llvm::DenseMapInfo&lt;std::pair&lt;unsigned,&#32;const&#32;void&#32;*&gt;&gt;::getHashValue(
05927 &#32;&#32;&#32;&#32;&#32;&#32;std::make_pair(C.kind,&#32;C.data[Index]));
05928 }
</programlisting><para>
References <link linkend="__c_index_8cpp_source_1l05952">clang_isExpression()</link>, and <link linkend="__c_index_8cpp_source_1l05956">clang_isStatement()</link>.</para>
    </section><anchor xml:id="__c_index_8cpp_1ab407667e249e0d44e6c56af84f2c28ba"/>    <section>
    <title>clang_isAttribute()</title>
<indexterm><primary>clang_isAttribute</primary><secondary>CIndex.cpp</secondary></indexterm>
<indexterm><primary>CIndex.cpp</primary><secondary>clang_isAttribute</secondary></indexterm>
<para><computeroutput>unsigned clang_isAttribute (enum CXCursorKind K)</computeroutput></para><para>
Definition at line <link linkend="__c_index_8cpp_source_1l05960">5960</link> of file <link linkend="__c_index_8cpp_source">CIndex.cpp</link>.</para>
<programlisting>05960 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
05961 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;K&#32;&gt;=&#32;CXCursor_FirstAttr&#32;&amp;&amp;&#32;K&#32;&lt;=&#32;CXCursor_LastAttr;
05962 }
</programlisting>    </section><anchor xml:id="__c_index_8cpp_1a619396ba7a888dea29aa6cb0b35ddbe5"/>    <section>
    <title>clang_isCursorDefinition()</title>
<indexterm><primary>clang_isCursorDefinition</primary><secondary>CIndex.cpp</secondary></indexterm>
<indexterm><primary>CIndex.cpp</primary><secondary>clang_isCursorDefinition</secondary></indexterm>
<para><computeroutput>unsigned clang_isCursorDefinition (CXCursor C)</computeroutput></para><para>
Definition at line <link linkend="__c_index_8cpp_source_1l06639">6639</link> of file <link linkend="__c_index_8cpp_source">CIndex.cpp</link>.</para>
<programlisting>06639 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
06640 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!<link linkend="__c_index_8cpp_1a5d47db8f608ae0c266d6551875d46b80">clang_isDeclaration</link>(C.kind))
06641 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
06642 
06643 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__c_index_8cpp_1a090e42b940779ab0c437188858f24dfb">clang_getCursorDefinition</link>(C)&#32;==&#32;C;
06644 }
</programlisting><para>
References <link linkend="__c_index_8cpp_source_1l06411">clang_getCursorDefinition()</link>, and <link linkend="__c_index_8cpp_source_1l05934">clang_isDeclaration()</link>.</para>
    </section><anchor xml:id="__c_index_8cpp_1a5d47db8f608ae0c266d6551875d46b80"/>    <section>
    <title>clang_isDeclaration()</title>
<indexterm><primary>clang_isDeclaration</primary><secondary>CIndex.cpp</secondary></indexterm>
<indexterm><primary>CIndex.cpp</primary><secondary>clang_isDeclaration</secondary></indexterm>
<para><computeroutput>unsigned clang_isDeclaration (enum CXCursorKind K)</computeroutput></para><para>
Definition at line <link linkend="__c_index_8cpp_source_1l05934">5934</link> of file <link linkend="__c_index_8cpp_source">CIndex.cpp</link>.</para>
<programlisting>05934 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
05935 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(K&#32;&gt;=&#32;CXCursor_FirstDecl&#32;&amp;&amp;&#32;K&#32;&lt;=&#32;CXCursor_LastDecl)&#32;||
05936 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(K&#32;&gt;=&#32;CXCursor_FirstExtraDecl&#32;&amp;&amp;&#32;K&#32;&lt;=&#32;CXCursor_LastExtraDecl);
05937 }
</programlisting><para>
Referenced by <link linkend="__c_x_comment_8cpp_source_1l00041">clang_Comment_getKind()</link>, <link linkend="__c_x_cursor_8cpp_source_1l01283">clang_Cursor_getArgument()</link>, <link linkend="__c_index_8cpp_source_1l08421">clang_Cursor_getBriefCommentText()</link>, <link linkend="__c_index_8cpp_source_1l08393">clang_Cursor_getCommentRange()</link>, <link linkend="__c_index_8cpp_source_1l04903">clang_Cursor_getCXXManglings()</link>, <link linkend="__c_index_8cpp_source_1l04889">clang_Cursor_getMangling()</link>, <link linkend="__c_x_cursor_8cpp_source_1l01261">clang_Cursor_getNumArguments()</link>, <link linkend="__c_index_8cpp_source_1l08317">clang_Cursor_getObjCDeclQualifiers()</link>, <link linkend="__c_index_8cpp_source_1l04917">clang_Cursor_getObjCManglings()</link>, <link linkend="__c_x_type_8cpp_source_1l01054">clang_Cursor_getOffsetOfField()</link>, <link linkend="__c_index_8cpp_source_1l08406">clang_Cursor_getRawCommentText()</link>, <link linkend="__c_x_type_8cpp_source_1l01256">clang_Cursor_isAnonymous()</link>, <link linkend="__c_x_type_8cpp_source_1l01270">clang_Cursor_isAnonymousRecordDecl()</link>, <link linkend="__c_x_type_8cpp_source_1l01091">clang_Cursor_isBitField()</link>, <link linkend="__c_index_8cpp_source_1l08373">clang_Cursor_isExternalSymbol()</link>, <link linkend="__c_x_type_8cpp_source_1l01279">clang_Cursor_isInlineNamespace()</link>, <link linkend="__c_index_8cpp_source_1l08347">clang_Cursor_isObjCOptional()</link>, <link linkend="__c_index_8cpp_source_1l08360">clang_Cursor_isVariadic()</link>, <link linkend="__c_index_8cpp_source_1l08569">clang_CXXConstructor_isConvertingConstructor()</link>, <link linkend="__c_index_8cpp_source_1l08549">clang_CXXConstructor_isCopyConstructor()</link>, <link linkend="__c_index_8cpp_source_1l08539">clang_CXXConstructor_isDefaultConstructor()</link>, <link linkend="__c_index_8cpp_source_1l08559">clang_CXXConstructor_isMoveConstructor()</link>, <link linkend="__c_index_8cpp_source_1l08580">clang_CXXField_isMutable()</link>, <link linkend="__c_index_8cpp_source_1l08600">clang_CXXMethod_isConst()</link>, <link linkend="__c_index_8cpp_source_1l08610">clang_CXXMethod_isDefaulted()</link>, <link linkend="__c_index_8cpp_source_1l08590">clang_CXXMethod_isPureVirtual()</link>, <link linkend="__c_index_8cpp_source_1l08620">clang_CXXMethod_isStatic()</link>, <link linkend="__c_index_8cpp_source_1l08630">clang_CXXMethod_isVirtual()</link>, <link linkend="__c_index_8cpp_source_1l08640">clang_CXXRecord_isAbstract()</link>, <link linkend="__c_index_8cpp_source_1l08651">clang_EnumDecl_isScoped()</link>, <link linkend="__c_index_8cpp_source_1l05905">clang_equalCursors()</link>, <link linkend="__c_index_8cpp_source_1l06646">clang_getCanonicalCursor()</link>, <link linkend="__c_x_cursor_8cpp_source_1l01518">clang_getCursorCompletionString()</link>, <link linkend="__c_index_8cpp_source_1l06411">clang_getCursorDefinition()</link>, <link linkend="__c_index_8cpp_source_1l05120">clang_getCursorDisplayName()</link>, <link linkend="__c_x_type_8cpp_source_1l00775">clang_getCursorExceptionSpecificationType()</link>, <link linkend="__c_index_8cpp_source_1l08147">clang_getCursorLanguage()</link>, <link linkend="__c_index_8cpp_source_1l08239">clang_getCursorLexicalParent()</link>, <link linkend="__c_index_8cpp_source_1l07857">clang_getCursorLinkage()</link>, <link linkend="__c_index_8cpp_source_1l08097">clang_getCursorPlatformAvailability()</link>, <link linkend="__c_index_8cpp_source_1l05099">clang_getCursorPrettyPrinted()</link>, <link linkend="__c_index_8cpp_source_1l06301">clang_getCursorReferenced()</link>, <link linkend="__c_x_type_8cpp_source_1l00722">clang_getCursorResultType()</link>, <link linkend="__c_index_8cpp_source_1l08219">clang_getCursorSemanticParent()</link>, <link linkend="__c_x_type_8cpp_source_1l00216">clang_getCursorType()</link>, <link linkend="__c_index_u_s_rs_8cpp_source_1l00038">clang_getCursorUSR()</link>, <link linkend="__c_index_8cpp_source_1l07884">clang_getCursorVisibility()</link>, <link linkend="__c_x_type_8cpp_source_1l01100">clang_getDeclObjCTypeEncoding()</link>, <link linkend="__c_x_type_8cpp_source_1l00358">clang_getEnumConstantDeclUnsignedValue()</link>, <link linkend="__c_x_type_8cpp_source_1l00342">clang_getEnumConstantDeclValue()</link>, <link linkend="__c_x_type_8cpp_source_1l00324">clang_getEnumDeclIntegerType()</link>, <link linkend="__c_x_type_8cpp_source_1l00374">clang_getFieldDeclBitWidth()</link>, <link linkend="__c_x_cursor_8cpp_source_1l01573">clang_getOverriddenCursors()</link>, <link linkend="__c_index_c_x_x_8cpp_source_1l00082">clang_getSpecializedCursorTemplate()</link>, <link linkend="__c_x_type_8cpp_source_1l00306">clang_getTypedefDeclUnderlyingType()</link>, <link linkend="__c_index_8cpp_source_1l06639">clang_isCursorDefinition()</link>, <link linkend="__c_index_8cpp_source_1l05939">clang_isInvalidDeclaration()</link>, <link linkend="__c_x_cursor_8cpp_source_1l01137">clang::cxcursor::getOverriddenCursors()</link>, and <link linkend="__c_x_cursor_8cpp_source_1l01244">clang::cxcursor::isFirstInDeclGroup()</link>.</para>
    </section><anchor xml:id="__c_index_8cpp_1ab958945dd59c351e1ae1a3f7f5668095"/>    <section>
    <title>clang_isExpression()</title>
<indexterm><primary>clang_isExpression</primary><secondary>CIndex.cpp</secondary></indexterm>
<indexterm><primary>CIndex.cpp</primary><secondary>clang_isExpression</secondary></indexterm>
<para><computeroutput>unsigned clang_isExpression (enum CXCursorKind K)</computeroutput></para><para>
Definition at line <link linkend="__c_index_8cpp_source_1l05952">5952</link> of file <link linkend="__c_index_8cpp_source">CIndex.cpp</link>.</para>
<programlisting>05952 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
05953 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;K&#32;&gt;=&#32;CXCursor_FirstExpr&#32;&amp;&amp;&#32;K&#32;&lt;=&#32;CXCursor_LastExpr;
05954 }
</programlisting><para>
Referenced by <link linkend="__c_x_cursor_8cpp_source_1l01283">clang_Cursor_getArgument()</link>, <link linkend="__c_x_cursor_8cpp_source_1l01261">clang_Cursor_getNumArguments()</link>, <link linkend="__c_x_cursor_8cpp_source_1l01687">clang_Cursor_getReceiverType()</link>, <link linkend="__c_x_cursor_8cpp_source_1l01648">clang_Cursor_isDynamicCall()</link>, <link linkend="__c_index_8cpp_source_1l06411">clang_getCursorDefinition()</link>, <link linkend="__c_index_8cpp_source_1l05986">clang_getCursorLocation()</link>, <link linkend="__c_index_8cpp_source_1l06301">clang_getCursorReferenced()</link>, <link linkend="__c_index_8cpp_source_1l04634">clang_getCursorSpelling()</link>, <link linkend="__c_x_type_8cpp_source_1l00216">clang_getCursorType()</link>, and <link linkend="__c_index_8cpp_source_1l05921">clang_hashCursor()</link>.</para>
    </section><anchor xml:id="__c_index_8cpp_1a685b41c679e149e18549cf4f96dd966e"/>    <section>
    <title>clang_isFileMultipleIncludeGuarded()</title>
<indexterm><primary>clang_isFileMultipleIncludeGuarded</primary><secondary>CIndex.cpp</secondary></indexterm>
<indexterm><primary>CIndex.cpp</primary><secondary>clang_isFileMultipleIncludeGuarded</secondary></indexterm>
<para><computeroutput>unsigned clang_isFileMultipleIncludeGuarded (CXTranslationUnit TU, CXFile file)</computeroutput></para><para>
Definition at line <link linkend="__c_index_8cpp_source_1l04430">4430</link> of file <link linkend="__c_index_8cpp_source">CIndex.cpp</link>.</para>
<programlisting>04430 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
04431 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(isNotUsableTU(TU))&#32;{
04432 &#32;&#32;&#32;&#32;<link linkend="__c_x_translation_unit_8h_1a4ec17e6e03ea0baf73e27802eae36106">LOG_BAD_TU</link>(TU);
04433 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
04434 &#32;&#32;}
04435 
04436 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!file)
04437 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
04438 
04439 &#32;&#32;ASTUnit&#32;*CXXUnit&#32;=&#32;cxtu::getASTUnit(TU);
04440 &#32;&#32;FileEntry&#32;*FEnt&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis>FileEntry&#32;*<emphasis role="keyword">&gt;</emphasis>(file);
04441 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;CXXUnit-&gt;getPreprocessor()
04442 &#32;&#32;&#32;&#32;&#32;&#32;.getHeaderSearchInfo()
04443 &#32;&#32;&#32;&#32;&#32;&#32;.isFileMultipleIncludeGuarded(FEnt);
04444 }
</programlisting>    </section><anchor xml:id="__c_index_8cpp_1a0c5b391d8bca745084fb8906cce6f66c"/>    <section>
    <title>clang_isInvalid()</title>
<indexterm><primary>clang_isInvalid</primary><secondary>CIndex.cpp</secondary></indexterm>
<indexterm><primary>CIndex.cpp</primary><secondary>clang_isInvalid</secondary></indexterm>
<para><computeroutput>unsigned clang_isInvalid (enum CXCursorKind K)</computeroutput></para><para>
Definition at line <link linkend="__c_index_8cpp_source_1l05930">5930</link> of file <link linkend="__c_index_8cpp_source">CIndex.cpp</link>.</para>
<programlisting>05930 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
05931 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;K&#32;&gt;=&#32;CXCursor_FirstInvalid&#32;&amp;&amp;&#32;K&#32;&lt;=&#32;CXCursor_LastInvalid;
05932 }
</programlisting><para>
Referenced by <link linkend="__c_index_8cpp_source_1l04903">clang_Cursor_getCXXManglings()</link>, <link linkend="__c_index_8cpp_source_1l04889">clang_Cursor_getMangling()</link>, <link linkend="__c_index_8cpp_source_1l04917">clang_Cursor_getObjCManglings()</link>, <link linkend="__c_index_8cpp_source_1l06411">clang_getCursorDefinition()</link>, <link linkend="__c_index_8cpp_source_1l06301">clang_getCursorReferenced()</link>, and <link linkend="__c_x_type_8cpp_source_1l01228">clang_Type_visitFields()</link>.</para>
    </section><anchor xml:id="__c_index_8cpp_1aaaa646143a44711b01f7b4afdb67ff7d"/>    <section>
    <title>clang_isInvalidDeclaration()</title>
<indexterm><primary>clang_isInvalidDeclaration</primary><secondary>CIndex.cpp</secondary></indexterm>
<indexterm><primary>CIndex.cpp</primary><secondary>clang_isInvalidDeclaration</secondary></indexterm>
<para><computeroutput>unsigned clang_isInvalidDeclaration (CXCursor C)</computeroutput></para><para>
Definition at line <link linkend="__c_index_8cpp_source_1l05939">5939</link> of file <link linkend="__c_index_8cpp_source">CIndex.cpp</link>.</para>
<programlisting>05939 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
05940 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="__c_index_8cpp_1a5d47db8f608ae0c266d6551875d46b80">clang_isDeclaration</link>(C.kind))&#32;{
05941 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;Decl&#32;*D&#32;=&#32;<link linkend="_namespaceclang_1_1cxcursor_1a1f702246831c96afd990e457613dc642">getCursorDecl</link>(C))
05942 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;D-&gt;isInvalidDecl();
05943 &#32;&#32;}
05944 
05945 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
05946 }
</programlisting><para>
References <link linkend="__c_index_8cpp_source_1l05934">clang_isDeclaration()</link>, and <link linkend="__c_x_cursor_8cpp_source_1l01101">clang::cxcursor::getCursorDecl()</link>.</para>
    </section><anchor xml:id="__c_index_8cpp_1ae649be0d722f2ec48dae4b152a5b2709"/>    <section>
    <title>clang_isPreprocessing()</title>
<indexterm><primary>clang_isPreprocessing</primary><secondary>CIndex.cpp</secondary></indexterm>
<indexterm><primary>CIndex.cpp</primary><secondary>clang_isPreprocessing</secondary></indexterm>
<para><computeroutput>unsigned clang_isPreprocessing (enum CXCursorKind K)</computeroutput></para><para>
Definition at line <link linkend="__c_index_8cpp_source_1l05968">5968</link> of file <link linkend="__c_index_8cpp_source">CIndex.cpp</link>.</para>
<programlisting>05968 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
05969 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;K&#32;&gt;=&#32;CXCursor_FirstPreprocessing&#32;&amp;&amp;&#32;K&#32;&lt;=&#32;CXCursor_LastPreprocessing;
05970 }
</programlisting>    </section><anchor xml:id="__c_index_8cpp_1a8b03541653a9373d35919c45216bc70f"/>    <section>
    <title>clang_isReference()</title>
<indexterm><primary>clang_isReference</primary><secondary>CIndex.cpp</secondary></indexterm>
<indexterm><primary>CIndex.cpp</primary><secondary>clang_isReference</secondary></indexterm>
<para><computeroutput>unsigned clang_isReference (enum CXCursorKind K)</computeroutput></para><para>
Definition at line <link linkend="__c_index_8cpp_source_1l05948">5948</link> of file <link linkend="__c_index_8cpp_source">CIndex.cpp</link>.</para>
<programlisting>05948 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
05949 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;K&#32;&gt;=&#32;CXCursor_FirstRef&#32;&amp;&amp;&#32;K&#32;&lt;=&#32;CXCursor_LastRef;
05950 }
</programlisting><para>
Referenced by <link linkend="__c_index_8cpp_source_1l06411">clang_getCursorDefinition()</link>, <link linkend="__c_index_8cpp_source_1l05986">clang_getCursorLocation()</link>, <link linkend="__c_index_8cpp_source_1l04634">clang_getCursorSpelling()</link>, and <link linkend="__c_x_type_8cpp_source_1l00216">clang_getCursorType()</link>.</para>
    </section><anchor xml:id="__c_index_8cpp_1af186bec30eb4cb63c3a7a295ccbcfe8b"/>    <section>
    <title>clang_isStatement()</title>
<indexterm><primary>clang_isStatement</primary><secondary>CIndex.cpp</secondary></indexterm>
<indexterm><primary>CIndex.cpp</primary><secondary>clang_isStatement</secondary></indexterm>
<para><computeroutput>unsigned clang_isStatement (enum CXCursorKind K)</computeroutput></para><para>
Definition at line <link linkend="__c_index_8cpp_source_1l05956">5956</link> of file <link linkend="__c_index_8cpp_source">CIndex.cpp</link>.</para>
<programlisting>05956 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
05957 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;K&#32;&gt;=&#32;CXCursor_FirstStmt&#32;&amp;&amp;&#32;K&#32;&lt;=&#32;CXCursor_LastStmt;
05958 }
</programlisting><para>
Referenced by <link linkend="__c_index_8cpp_source_1l04795">clang_Cursor_getSpellingNameRange()</link>, and <link linkend="__c_index_8cpp_source_1l05921">clang_hashCursor()</link>.</para>
    </section><anchor xml:id="__c_index_8cpp_1ace455769e0f5681db67622db98f263a1"/>    <section>
    <title>clang_isTranslationUnit()</title>
<indexterm><primary>clang_isTranslationUnit</primary><secondary>CIndex.cpp</secondary></indexterm>
<indexterm><primary>CIndex.cpp</primary><secondary>clang_isTranslationUnit</secondary></indexterm>
<para><computeroutput>unsigned clang_isTranslationUnit (enum CXCursorKind K)</computeroutput></para><para>
Definition at line <link linkend="__c_index_8cpp_source_1l05964">5964</link> of file <link linkend="__c_index_8cpp_source">CIndex.cpp</link>.</para>
<programlisting>05964 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
05965 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;K&#32;==&#32;CXCursor_TranslationUnit;
05966 }
</programlisting><para>
Referenced by <link linkend="__c_index_8cpp_source_1l04634">clang_getCursorSpelling()</link>.</para>
    </section><anchor xml:id="__c_index_8cpp_1a0e56fac91aaded983a98dd1bf3bec5a1"/>    <section>
    <title>clang_isUnexposed()</title>
<indexterm><primary>clang_isUnexposed</primary><secondary>CIndex.cpp</secondary></indexterm>
<indexterm><primary>CIndex.cpp</primary><secondary>clang_isUnexposed</secondary></indexterm>
<para><computeroutput>unsigned clang_isUnexposed (enum CXCursorKind K)</computeroutput></para><para>
Definition at line <link linkend="__c_index_8cpp_source_1l05972">5972</link> of file <link linkend="__c_index_8cpp_source">CIndex.cpp</link>.</para>
<programlisting>05972 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
05973 &#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(K)&#32;{
05974 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_UnexposedDecl:
05975 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_UnexposedExpr:
05976 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_UnexposedStmt:
05977 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_UnexposedAttr:
05978 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
05979 &#32;&#32;<emphasis role="keywordflow">default</emphasis>:
05980 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
05981 &#32;&#32;}
05982 }
</programlisting>    </section><anchor xml:id="__c_index_8cpp_1a70af2b7ec3ffa582bf6856a740af2fb3"/>    <section>
    <title>clang_Module_getASTFile()</title>
<indexterm><primary>clang_Module_getASTFile</primary><secondary>CIndex.cpp</secondary></indexterm>
<indexterm><primary>CIndex.cpp</primary><secondary>clang_Module_getASTFile</secondary></indexterm>
<para><computeroutput>CXFile clang_Module_getASTFile (CXModule CXMod)</computeroutput></para><para>
Definition at line <link linkend="__c_index_8cpp_source_1l08466">8466</link> of file <link linkend="__c_index_8cpp_source">CIndex.cpp</link>.</para>
<programlisting>08466 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
08467 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!CXMod)
08468 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">nullptr</emphasis>;
08469 &#32;&#32;Module&#32;*Mod&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis>Module&#32;*<emphasis role="keyword">&gt;</emphasis>(CXMod);
08470 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="keyword">auto</emphasis>&#32;File&#32;=&#32;Mod-&gt;getASTFile())
08471 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">const_cast&lt;</emphasis>FileEntry&#32;*<emphasis role="keyword">&gt;</emphasis>(&amp;File-&gt;getFileEntry());
08472 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">nullptr</emphasis>;
08473 }
</programlisting>    </section><anchor xml:id="__c_index_8cpp_1a266036edc3230b98a9c96c33eedae46a"/>    <section>
    <title>clang_Module_getFullName()</title>
<indexterm><primary>clang_Module_getFullName</primary><secondary>CIndex.cpp</secondary></indexterm>
<indexterm><primary>CIndex.cpp</primary><secondary>clang_Module_getFullName</secondary></indexterm>
<para><computeroutput>CXString clang_Module_getFullName (CXModule CXMod)</computeroutput></para><para>
Definition at line <link linkend="__c_index_8cpp_source_1l08489">8489</link> of file <link linkend="__c_index_8cpp_source">CIndex.cpp</link>.</para>
<programlisting>08489 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
08490 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!CXMod)
08491 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1a8a49aa6ea196abdde85886689f2630f9">cxstring::createEmpty</link>();
08492 &#32;&#32;Module&#32;*Mod&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis>Module&#32;*<emphasis role="keyword">&gt;</emphasis>(CXMod);
08493 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1a19a4962be87f75a8c1fa5a0b75f76298">cxstring::createDup</link>(Mod-&gt;getFullModuleName());
08494 }
</programlisting><para>
References <link linkend="__c_x_string_8cpp_source_1l00067">clang::cxstring::createDup()</link>, and <link linkend="__c_x_string_8cpp_source_1l00043">clang::cxstring::createEmpty()</link>.</para>
    </section><anchor xml:id="__c_index_8cpp_1a2a1d6b9f6950cde7be6f62818a8a6253"/>    <section>
    <title>clang_Module_getName()</title>
<indexterm><primary>clang_Module_getName</primary><secondary>CIndex.cpp</secondary></indexterm>
<indexterm><primary>CIndex.cpp</primary><secondary>clang_Module_getName</secondary></indexterm>
<para><computeroutput>CXString clang_Module_getName (CXModule CXMod)</computeroutput></para><para>
Definition at line <link linkend="__c_index_8cpp_source_1l08482">8482</link> of file <link linkend="__c_index_8cpp_source">CIndex.cpp</link>.</para>
<programlisting>08482 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
08483 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!CXMod)
08484 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1a8a49aa6ea196abdde85886689f2630f9">cxstring::createEmpty</link>();
08485 &#32;&#32;Module&#32;*Mod&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis>Module&#32;*<emphasis role="keyword">&gt;</emphasis>(CXMod);
08486 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1a19a4962be87f75a8c1fa5a0b75f76298">cxstring::createDup</link>(Mod-&gt;Name);
08487 }
</programlisting><para>
References <link linkend="__c_x_string_8cpp_source_1l00067">clang::cxstring::createDup()</link>, and <link linkend="__c_x_string_8cpp_source_1l00043">clang::cxstring::createEmpty()</link>.</para>
    </section><anchor xml:id="__c_index_8cpp_1a386d6d2cb23cfb6be756392a4fb18de7"/>    <section>
    <title>clang_Module_getNumTopLevelHeaders()</title>
<indexterm><primary>clang_Module_getNumTopLevelHeaders</primary><secondary>CIndex.cpp</secondary></indexterm>
<indexterm><primary>CIndex.cpp</primary><secondary>clang_Module_getNumTopLevelHeaders</secondary></indexterm>
<para><computeroutput>unsigned clang_Module_getNumTopLevelHeaders (CXTranslationUnit TU, CXModule CXMod)</computeroutput></para><para>
Definition at line <link linkend="__c_index_8cpp_source_1l08503">8503</link> of file <link linkend="__c_index_8cpp_source">CIndex.cpp</link>.</para>
<programlisting>08504 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
08505 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(isNotUsableTU(TU))&#32;{
08506 &#32;&#32;&#32;&#32;<link linkend="__c_x_translation_unit_8h_1a4ec17e6e03ea0baf73e27802eae36106">LOG_BAD_TU</link>(TU);
08507 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
08508 &#32;&#32;}
08509 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!CXMod)
08510 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
08511 &#32;&#32;Module&#32;*Mod&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis>Module&#32;*<emphasis role="keyword">&gt;</emphasis>(CXMod);
08512 &#32;&#32;FileManager&#32;&amp;FileMgr&#32;=&#32;cxtu::getASTUnit(TU)-&gt;getFileManager();
08513 &#32;&#32;ArrayRef&lt;const&#32;FileEntry&#32;*&gt;&#32;TopHeaders&#32;=&#32;Mod-&gt;getTopHeaders(FileMgr);
08514 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;TopHeaders.size();
08515 }
</programlisting>    </section><anchor xml:id="__c_index_8cpp_1aa90e248614976fd260dab3ad43a845e8"/>    <section>
    <title>clang_Module_getParent()</title>
<indexterm><primary>clang_Module_getParent</primary><secondary>CIndex.cpp</secondary></indexterm>
<indexterm><primary>CIndex.cpp</primary><secondary>clang_Module_getParent</secondary></indexterm>
<para><computeroutput>CXModule clang_Module_getParent (CXModule CXMod)</computeroutput></para><para>
Definition at line <link linkend="__c_index_8cpp_source_1l08475">8475</link> of file <link linkend="__c_index_8cpp_source">CIndex.cpp</link>.</para>
<programlisting>08475 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
08476 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!CXMod)
08477 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">nullptr</emphasis>;
08478 &#32;&#32;Module&#32;*Mod&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis>Module&#32;*<emphasis role="keyword">&gt;</emphasis>(CXMod);
08479 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;Mod-&gt;Parent;
08480 }
</programlisting>    </section><anchor xml:id="__c_index_8cpp_1a7616ad81129da898d08a576a8e603c78"/>    <section>
    <title>clang_Module_getTopLevelHeader()</title>
<indexterm><primary>clang_Module_getTopLevelHeader</primary><secondary>CIndex.cpp</secondary></indexterm>
<indexterm><primary>CIndex.cpp</primary><secondary>clang_Module_getTopLevelHeader</secondary></indexterm>
<para><computeroutput>CXFile clang_Module_getTopLevelHeader (CXTranslationUnit TU, CXModule CXMod, unsigned Index)</computeroutput></para><para>
Definition at line <link linkend="__c_index_8cpp_source_1l08517">8517</link> of file <link linkend="__c_index_8cpp_source">CIndex.cpp</link>.</para>
<programlisting>08518 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
08519 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(isNotUsableTU(TU))&#32;{
08520 &#32;&#32;&#32;&#32;<link linkend="__c_x_translation_unit_8h_1a4ec17e6e03ea0baf73e27802eae36106">LOG_BAD_TU</link>(TU);
08521 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">nullptr</emphasis>;
08522 &#32;&#32;}
08523 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!CXMod)
08524 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">nullptr</emphasis>;
08525 &#32;&#32;Module&#32;*Mod&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis>Module&#32;*<emphasis role="keyword">&gt;</emphasis>(CXMod);
08526 &#32;&#32;FileManager&#32;&amp;FileMgr&#32;=&#32;cxtu::getASTUnit(TU)-&gt;getFileManager();
08527 
08528 &#32;&#32;ArrayRef&lt;const&#32;FileEntry&#32;*&gt;&#32;TopHeaders&#32;=&#32;Mod-&gt;getTopHeaders(FileMgr);
08529 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(Index&#32;&lt;&#32;TopHeaders.size())
08530 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">const_cast&lt;</emphasis>FileEntry&#32;*<emphasis role="keyword">&gt;</emphasis>(TopHeaders[Index]);
08531 
08532 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">nullptr</emphasis>;
08533 }
</programlisting>    </section><anchor xml:id="__c_index_8cpp_1ad14a1b11d95472b1b00952419b96b718"/>    <section>
    <title>clang_Module_isSystem()</title>
<indexterm><primary>clang_Module_isSystem</primary><secondary>CIndex.cpp</secondary></indexterm>
<indexterm><primary>CIndex.cpp</primary><secondary>clang_Module_isSystem</secondary></indexterm>
<para><computeroutput>int clang_Module_isSystem (CXModule CXMod)</computeroutput></para><para>
Definition at line <link linkend="__c_index_8cpp_source_1l08496">8496</link> of file <link linkend="__c_index_8cpp_source">CIndex.cpp</link>.</para>
<programlisting>08496 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
08497 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!CXMod)
08498 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
08499 &#32;&#32;Module&#32;*Mod&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis>Module&#32;*<emphasis role="keyword">&gt;</emphasis>(CXMod);
08500 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;Mod-&gt;IsSystem;
08501 }
</programlisting>    </section><anchor xml:id="__c_index_8cpp_1ad0a9bffbc13f2874a5c0cbfd78aaeded"/>    <section>
    <title>clang_parseTranslationUnit()</title>
<indexterm><primary>clang_parseTranslationUnit</primary><secondary>CIndex.cpp</secondary></indexterm>
<indexterm><primary>CIndex.cpp</primary><secondary>clang_parseTranslationUnit</secondary></indexterm>
<para><computeroutput>CXTranslationUnit clang_parseTranslationUnit (CXIndex CIdx, const char * source_filename, const char *const * command_line_args, int num_command_line_args, struct CXUnsavedFile * unsaved_files, unsigned num_unsaved_files, unsigned options)</computeroutput></para><para>
Definition at line <link linkend="__c_index_8cpp_source_1l03717">3717</link> of file <link linkend="__c_index_8cpp_source">CIndex.cpp</link>.</para>
<programlisting>03721 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
03722 &#32;&#32;CXTranslationUnit&#32;TU;
03723 &#32;&#32;<emphasis role="keyword">enum</emphasis>&#32;CXErrorCode&#32;Result&#32;=&#32;<link linkend="__c_index_8cpp_1a3ddd508cc891d95a82b747955738249a">clang_parseTranslationUnit2</link>(
03724 &#32;&#32;&#32;&#32;&#32;&#32;CIdx,&#32;source_filename,&#32;command_line_args,&#32;num_command_line_args,
03725 &#32;&#32;&#32;&#32;&#32;&#32;unsaved_files,&#32;num_unsaved_files,&#32;<link linkend="_namespaceoptions">options</link>,&#32;&amp;TU);
03726 &#32;&#32;(void)Result;
03727 &#32;&#32;assert((TU&#32;&amp;&amp;&#32;Result&#32;==&#32;CXError_Success)&#32;||
03728 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(!TU&#32;&amp;&amp;&#32;Result&#32;!=&#32;CXError_Success));
03729 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;TU;
03730 }
</programlisting><para>
References <link linkend="__c_index_8cpp_source_1l03732">clang_parseTranslationUnit2()</link>.</para>
    </section><anchor xml:id="__c_index_8cpp_1a3ddd508cc891d95a82b747955738249a"/>    <section>
    <title>clang_parseTranslationUnit2()</title>
<indexterm><primary>clang_parseTranslationUnit2</primary><secondary>CIndex.cpp</secondary></indexterm>
<indexterm><primary>CIndex.cpp</primary><secondary>clang_parseTranslationUnit2</secondary></indexterm>
<para><computeroutput>enum CXErrorCode clang_parseTranslationUnit2 (CXIndex CIdx, const char * source_filename, const char *const * command_line_args, int num_command_line_args, struct CXUnsavedFile * unsaved_files, unsigned num_unsaved_files, unsigned options, CXTranslationUnit * out_TU)</computeroutput></para><para>
Definition at line <link linkend="__c_index_8cpp_source_1l03717">3717</link> of file <link linkend="__c_index_8cpp_source">CIndex.cpp</link>.</para>
<programlisting>03736 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
03737 &#32;&#32;noteBottomOfStack();
03738 &#32;&#32;SmallVector&lt;const&#32;char&#32;*,&#32;4&gt;&#32;Args;
03739 &#32;&#32;Args.push_back(<emphasis role="stringliteral">&quot;clang&quot;</emphasis>);
03740 &#32;&#32;Args.append(command_line_args,&#32;command_line_args&#32;+&#32;num_command_line_args);
03741 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__c_index_8cpp_1a2dd6d7ceea761f1f0e76ed6f0ba9692b">clang_parseTranslationUnit2FullArgv</link>(
03742 &#32;&#32;&#32;&#32;&#32;&#32;CIdx,&#32;source_filename,&#32;Args.data(),&#32;Args.size(),&#32;unsaved_files,
03743 &#32;&#32;&#32;&#32;&#32;&#32;num_unsaved_files,&#32;<link linkend="_namespaceoptions">options</link>,&#32;out_TU);
03744 }
</programlisting><para>
Referenced by <link linkend="__c_index_8cpp_source_1l03717">clang_parseTranslationUnit()</link>.</para>
    </section><anchor xml:id="__c_index_8cpp_1a2dd6d7ceea761f1f0e76ed6f0ba9692b"/>    <section>
    <title>clang_parseTranslationUnit2FullArgv()</title>
<indexterm><primary>clang_parseTranslationUnit2FullArgv</primary><secondary>CIndex.cpp</secondary></indexterm>
<indexterm><primary>CIndex.cpp</primary><secondary>clang_parseTranslationUnit2FullArgv</secondary></indexterm>
<para><computeroutput>enum CXErrorCode clang_parseTranslationUnit2FullArgv (CXIndex CIdx, const char * source_filename, const char *const * command_line_args, int num_command_line_args, struct CXUnsavedFile * unsaved_files, unsigned num_unsaved_files, unsigned options, CXTranslationUnit * out_TU)</computeroutput></para><para>
Definition at line <link linkend="__c_index_8cpp_source_1l03717">3717</link> of file <link linkend="__c_index_8cpp_source">CIndex.cpp</link>.</para>
<programlisting>03750 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
03751 &#32;&#32;<link linkend="__c_log_8h_1a24474e48ce7e218f17ae9353103470d8">LOG_FUNC_SECTION</link>&#32;{
03752 &#32;&#32;&#32;&#32;*Log&#32;&lt;&lt;&#32;source_filename&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;:&#32;&quot;</emphasis>;
03753 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;!=&#32;num_command_line_args;&#32;++i)
03754 &#32;&#32;&#32;&#32;&#32;&#32;*Log&#32;&lt;&lt;&#32;command_line_args[i]&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;&quot;</emphasis>;
03755 &#32;&#32;}
03756 
03757 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(num_unsaved_files&#32;&amp;&amp;&#32;!unsaved_files)
03758 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;CXError_InvalidArguments;
03759 
03760 &#32;&#32;CXErrorCode&#32;result&#32;=&#32;CXError_Failure;
03761 &#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;ParseTranslationUnitImpl&#32;=&#32;[=,&#32;&amp;result]&#32;{
03762 &#32;&#32;&#32;&#32;noteBottomOfStack();
03763 &#32;&#32;&#32;&#32;result&#32;=&#32;clang_parseTranslationUnit_Impl(
03764 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;CIdx,&#32;source_filename,&#32;command_line_args,&#32;num_command_line_args,
03765 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;llvm::makeArrayRef(unsaved_files,&#32;num_unsaved_files),&#32;<link linkend="_namespaceoptions">options</link>,&#32;out_TU);
03766 &#32;&#32;};
03767 
03768 &#32;&#32;llvm::CrashRecoveryContext&#32;CRC;
03769 
03770 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!<link linkend="_namespaceclang_1af866b018fe401ae941a367429bdd4c9a">RunSafely</link>(CRC,&#32;ParseTranslationUnitImpl))&#32;{
03771 &#32;&#32;&#32;&#32;fprintf(stderr,&#32;<emphasis role="stringliteral">&quot;libclang:&#32;crash&#32;detected&#32;during&#32;parsing:&#32;{\n&quot;</emphasis>);
03772 &#32;&#32;&#32;&#32;fprintf(stderr,&#32;<emphasis role="stringliteral">&quot;&#32;&#32;&apos;source_filename&apos;&#32;:&#32;&apos;%s&apos;\n&quot;</emphasis>,&#32;source_filename);
03773 &#32;&#32;&#32;&#32;fprintf(stderr,&#32;<emphasis role="stringliteral">&quot;&#32;&#32;&apos;command_line_args&apos;&#32;:&#32;[&quot;</emphasis>);
03774 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;!=&#32;num_command_line_args;&#32;++i)&#32;{
03775 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(i)
03776 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;fprintf(stderr,&#32;<emphasis role="stringliteral">&quot;,&#32;&quot;</emphasis>);
03777 &#32;&#32;&#32;&#32;&#32;&#32;fprintf(stderr,&#32;<emphasis role="stringliteral">&quot;&apos;%s&apos;&quot;</emphasis>,&#32;command_line_args[i]);
03778 &#32;&#32;&#32;&#32;}
03779 &#32;&#32;&#32;&#32;fprintf(stderr,&#32;<emphasis role="stringliteral">&quot;],\n&quot;</emphasis>);
03780 &#32;&#32;&#32;&#32;fprintf(stderr,&#32;<emphasis role="stringliteral">&quot;&#32;&#32;&apos;unsaved_files&apos;&#32;:&#32;[&quot;</emphasis>);
03781 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">unsigned</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;!=&#32;num_unsaved_files;&#32;++i)&#32;{
03782 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(i)
03783 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;fprintf(stderr,&#32;<emphasis role="stringliteral">&quot;,&#32;&quot;</emphasis>);
03784 &#32;&#32;&#32;&#32;&#32;&#32;fprintf(stderr,&#32;<emphasis role="stringliteral">&quot;(&apos;%s&apos;,&#32;&apos;...&apos;,&#32;%ld)&quot;</emphasis>,&#32;unsaved_files[i].Filename,
03785 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;unsaved_files[i].Length);
03786 &#32;&#32;&#32;&#32;}
03787 &#32;&#32;&#32;&#32;fprintf(stderr,&#32;<emphasis role="stringliteral">&quot;],\n&quot;</emphasis>);
03788 &#32;&#32;&#32;&#32;fprintf(stderr,&#32;<emphasis role="stringliteral">&quot;&#32;&#32;&apos;options&apos;&#32;:&#32;%d,\n&quot;</emphasis>,&#32;<link linkend="_namespaceoptions">options</link>);
03789 &#32;&#32;&#32;&#32;fprintf(stderr,&#32;<emphasis role="stringliteral">&quot;}\n&quot;</emphasis>);
03790 
03791 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;CXError_Crashed;
03792 &#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(getenv(<emphasis role="stringliteral">&quot;LIBCLANG_RESOURCE_USAGE&quot;</emphasis>))&#32;{
03793 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(CXTranslationUnit&#32;*TU&#32;=&#32;out_TU)
03794 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespaceclang_1aa969857ada50e5f302f7127c78a63018">PrintLibclangResourceUsage</link>(*TU);
03795 &#32;&#32;}
03796 
03797 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;result;
03798 }
</programlisting>    </section><anchor xml:id="__c_index_8cpp_1a5f4c201c1711cf708edccc3227e49197"/>    <section>
    <title>clang_PrintingPolicy_dispose()</title>
<indexterm><primary>clang_PrintingPolicy_dispose</primary><secondary>CIndex.cpp</secondary></indexterm>
<indexterm><primary>CIndex.cpp</primary><secondary>clang_PrintingPolicy_dispose</secondary></indexterm>
<para><computeroutput>void clang_PrintingPolicy_dispose (CXPrintingPolicy Policy)</computeroutput></para><para>
Definition at line <link linkend="__c_index_8cpp_source_1l04937">4937</link> of file <link linkend="__c_index_8cpp_source">CIndex.cpp</link>.</para>
<programlisting>04937 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
04938 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(Policy)
04939 &#32;&#32;&#32;&#32;<emphasis role="keyword">delete</emphasis>&#32;<emphasis role="keyword">static_cast&lt;</emphasis>PrintingPolicy&#32;*<emphasis role="keyword">&gt;</emphasis>(Policy);
04940 }
</programlisting>    </section><anchor xml:id="__c_index_8cpp_1a99f7fd7cac9071d0a97588e42f111920"/>    <section>
    <title>clang_PrintingPolicy_getProperty()</title>
<indexterm><primary>clang_PrintingPolicy_getProperty</primary><secondary>CIndex.cpp</secondary></indexterm>
<indexterm><primary>CIndex.cpp</primary><secondary>clang_PrintingPolicy_getProperty</secondary></indexterm>
<para><computeroutput>unsigned clang_PrintingPolicy_getProperty (CXPrintingPolicy Policy, enum CXPrintingPolicyProperty Property)</computeroutput></para><para>
Definition at line <link linkend="__c_index_8cpp_source_1l04943">4943</link> of file <link linkend="__c_index_8cpp_source">CIndex.cpp</link>.</para>
<programlisting>04944 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
04945 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!Policy)
04946 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
04947 
04948 &#32;&#32;PrintingPolicy&#32;*P&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis>PrintingPolicy&#32;*<emphasis role="keyword">&gt;</emphasis>(Policy);
04949 &#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(Property)&#32;{
04950 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXPrintingPolicy_Indentation:
04951 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;P-&gt;Indentation;
04952 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXPrintingPolicy_SuppressSpecifiers:
04953 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;P-&gt;SuppressSpecifiers;
04954 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXPrintingPolicy_SuppressTagKeyword:
04955 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;P-&gt;SuppressTagKeyword;
04956 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXPrintingPolicy_IncludeTagDefinition:
04957 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;P-&gt;IncludeTagDefinition;
04958 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXPrintingPolicy_SuppressScope:
04959 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;P-&gt;SuppressScope;
04960 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXPrintingPolicy_SuppressUnwrittenScope:
04961 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;P-&gt;SuppressUnwrittenScope;
04962 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXPrintingPolicy_SuppressInitializers:
04963 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;P-&gt;SuppressInitializers;
04964 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXPrintingPolicy_ConstantArraySizeAsWritten:
04965 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;P-&gt;ConstantArraySizeAsWritten;
04966 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXPrintingPolicy_AnonymousTagLocations:
04967 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;P-&gt;AnonymousTagLocations;
04968 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXPrintingPolicy_SuppressStrongLifetime:
04969 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;P-&gt;SuppressStrongLifetime;
04970 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXPrintingPolicy_SuppressLifetimeQualifiers:
04971 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;P-&gt;SuppressLifetimeQualifiers;
04972 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXPrintingPolicy_SuppressTemplateArgsInCXXConstructors:
04973 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;P-&gt;SuppressTemplateArgsInCXXConstructors;
04974 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXPrintingPolicy_Bool:
04975 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;P-&gt;Bool;
04976 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXPrintingPolicy_Restrict:
04977 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;P-&gt;Restrict;
04978 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXPrintingPolicy_Alignof:
04979 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;P-&gt;Alignof;
04980 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXPrintingPolicy_UnderscoreAlignof:
04981 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;P-&gt;UnderscoreAlignof;
04982 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXPrintingPolicy_UseVoidForZeroParams:
04983 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;P-&gt;UseVoidForZeroParams;
04984 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXPrintingPolicy_TerseOutput:
04985 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;P-&gt;TerseOutput;
04986 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXPrintingPolicy_PolishForDeclaration:
04987 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;P-&gt;PolishForDeclaration;
04988 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXPrintingPolicy_Half:
04989 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;P-&gt;Half;
04990 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXPrintingPolicy_MSWChar:
04991 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;P-&gt;MSWChar;
04992 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXPrintingPolicy_IncludeNewlines:
04993 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;P-&gt;IncludeNewlines;
04994 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXPrintingPolicy_MSVCFormatting:
04995 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;P-&gt;MSVCFormatting;
04996 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXPrintingPolicy_ConstantsAsWritten:
04997 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;P-&gt;ConstantsAsWritten;
04998 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXPrintingPolicy_SuppressImplicitBase:
04999 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;P-&gt;SuppressImplicitBase;
05000 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXPrintingPolicy_FullyQualifiedName:
05001 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;P-&gt;FullyQualifiedName;
05002 &#32;&#32;}
05003 
05004 &#32;&#32;assert(<emphasis role="keyword">false</emphasis>&#32;&amp;&amp;&#32;<emphasis role="stringliteral">&quot;Invalid&#32;CXPrintingPolicyProperty&quot;</emphasis>);
05005 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
05006 }
</programlisting>    </section><anchor xml:id="__c_index_8cpp_1a2f7497c4e8c46282bdf45b57d456a2a4"/>    <section>
    <title>clang_PrintingPolicy_setProperty()</title>
<indexterm><primary>clang_PrintingPolicy_setProperty</primary><secondary>CIndex.cpp</secondary></indexterm>
<indexterm><primary>CIndex.cpp</primary><secondary>clang_PrintingPolicy_setProperty</secondary></indexterm>
<para><computeroutput>void clang_PrintingPolicy_setProperty (CXPrintingPolicy Policy, enum CXPrintingPolicyProperty Property, unsigned Value)</computeroutput></para><para>
Definition at line <link linkend="__c_index_8cpp_source_1l05008">5008</link> of file <link linkend="__c_index_8cpp_source">CIndex.cpp</link>.</para>
<programlisting>05010 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
05011 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!Policy)
05012 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
05013 
05014 &#32;&#32;PrintingPolicy&#32;*P&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis>PrintingPolicy&#32;*<emphasis role="keyword">&gt;</emphasis>(Policy);
05015 &#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(Property)&#32;{
05016 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXPrintingPolicy_Indentation:
05017 &#32;&#32;&#32;&#32;P-&gt;Indentation&#32;=&#32;Value;
05018 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
05019 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXPrintingPolicy_SuppressSpecifiers:
05020 &#32;&#32;&#32;&#32;P-&gt;SuppressSpecifiers&#32;=&#32;Value;
05021 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
05022 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXPrintingPolicy_SuppressTagKeyword:
05023 &#32;&#32;&#32;&#32;P-&gt;SuppressTagKeyword&#32;=&#32;Value;
05024 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
05025 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXPrintingPolicy_IncludeTagDefinition:
05026 &#32;&#32;&#32;&#32;P-&gt;IncludeTagDefinition&#32;=&#32;Value;
05027 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
05028 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXPrintingPolicy_SuppressScope:
05029 &#32;&#32;&#32;&#32;P-&gt;SuppressScope&#32;=&#32;Value;
05030 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
05031 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXPrintingPolicy_SuppressUnwrittenScope:
05032 &#32;&#32;&#32;&#32;P-&gt;SuppressUnwrittenScope&#32;=&#32;Value;
05033 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
05034 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXPrintingPolicy_SuppressInitializers:
05035 &#32;&#32;&#32;&#32;P-&gt;SuppressInitializers&#32;=&#32;Value;
05036 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
05037 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXPrintingPolicy_ConstantArraySizeAsWritten:
05038 &#32;&#32;&#32;&#32;P-&gt;ConstantArraySizeAsWritten&#32;=&#32;Value;
05039 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
05040 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXPrintingPolicy_AnonymousTagLocations:
05041 &#32;&#32;&#32;&#32;P-&gt;AnonymousTagLocations&#32;=&#32;Value;
05042 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
05043 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXPrintingPolicy_SuppressStrongLifetime:
05044 &#32;&#32;&#32;&#32;P-&gt;SuppressStrongLifetime&#32;=&#32;Value;
05045 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
05046 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXPrintingPolicy_SuppressLifetimeQualifiers:
05047 &#32;&#32;&#32;&#32;P-&gt;SuppressLifetimeQualifiers&#32;=&#32;Value;
05048 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
05049 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXPrintingPolicy_SuppressTemplateArgsInCXXConstructors:
05050 &#32;&#32;&#32;&#32;P-&gt;SuppressTemplateArgsInCXXConstructors&#32;=&#32;Value;
05051 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
05052 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXPrintingPolicy_Bool:
05053 &#32;&#32;&#32;&#32;P-&gt;Bool&#32;=&#32;Value;
05054 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
05055 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXPrintingPolicy_Restrict:
05056 &#32;&#32;&#32;&#32;P-&gt;Restrict&#32;=&#32;Value;
05057 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
05058 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXPrintingPolicy_Alignof:
05059 &#32;&#32;&#32;&#32;P-&gt;Alignof&#32;=&#32;Value;
05060 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
05061 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXPrintingPolicy_UnderscoreAlignof:
05062 &#32;&#32;&#32;&#32;P-&gt;UnderscoreAlignof&#32;=&#32;Value;
05063 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
05064 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXPrintingPolicy_UseVoidForZeroParams:
05065 &#32;&#32;&#32;&#32;P-&gt;UseVoidForZeroParams&#32;=&#32;Value;
05066 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
05067 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXPrintingPolicy_TerseOutput:
05068 &#32;&#32;&#32;&#32;P-&gt;TerseOutput&#32;=&#32;Value;
05069 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
05070 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXPrintingPolicy_PolishForDeclaration:
05071 &#32;&#32;&#32;&#32;P-&gt;PolishForDeclaration&#32;=&#32;Value;
05072 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
05073 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXPrintingPolicy_Half:
05074 &#32;&#32;&#32;&#32;P-&gt;Half&#32;=&#32;Value;
05075 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
05076 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXPrintingPolicy_MSWChar:
05077 &#32;&#32;&#32;&#32;P-&gt;MSWChar&#32;=&#32;Value;
05078 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
05079 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXPrintingPolicy_IncludeNewlines:
05080 &#32;&#32;&#32;&#32;P-&gt;IncludeNewlines&#32;=&#32;Value;
05081 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
05082 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXPrintingPolicy_MSVCFormatting:
05083 &#32;&#32;&#32;&#32;P-&gt;MSVCFormatting&#32;=&#32;Value;
05084 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
05085 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXPrintingPolicy_ConstantsAsWritten:
05086 &#32;&#32;&#32;&#32;P-&gt;ConstantsAsWritten&#32;=&#32;Value;
05087 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
05088 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXPrintingPolicy_SuppressImplicitBase:
05089 &#32;&#32;&#32;&#32;P-&gt;SuppressImplicitBase&#32;=&#32;Value;
05090 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
05091 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXPrintingPolicy_FullyQualifiedName:
05092 &#32;&#32;&#32;&#32;P-&gt;FullyQualifiedName&#32;=&#32;Value;
05093 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
05094 &#32;&#32;}
05095 
05096 &#32;&#32;assert(<emphasis role="keyword">false</emphasis>&#32;&amp;&amp;&#32;<emphasis role="stringliteral">&quot;Invalid&#32;CXPrintingPolicyProperty&quot;</emphasis>);
05097 }
</programlisting>    </section><anchor xml:id="__c_index_8cpp_1a2befc445c3dde1e89f6900c67892ceaa"/>    <section>
    <title>clang_reparseTranslationUnit()</title>
<indexterm><primary>clang_reparseTranslationUnit</primary><secondary>CIndex.cpp</secondary></indexterm>
<indexterm><primary>CIndex.cpp</primary><secondary>clang_reparseTranslationUnit</secondary></indexterm>
<para><computeroutput>int clang_reparseTranslationUnit (CXTranslationUnit TU, unsigned num_unsaved_files, struct CXUnsavedFile * unsaved_files, unsigned options)</computeroutput></para><para>
Definition at line <link linkend="__c_index_8cpp_source_1l04284">4284</link> of file <link linkend="__c_index_8cpp_source">CIndex.cpp</link>.</para>
<programlisting>04287 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
04288 &#32;&#32;<link linkend="__c_log_8h_1a24474e48ce7e218f17ae9353103470d8">LOG_FUNC_SECTION</link>&#32;{&#32;*Log&#32;&lt;&lt;&#32;TU;&#32;}
04289 
04290 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(num_unsaved_files&#32;&amp;&amp;&#32;!unsaved_files)
04291 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;CXError_InvalidArguments;
04292 
04293 &#32;&#32;CXErrorCode&#32;result;
04294 &#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;ReparseTranslationUnitImpl&#32;=&#32;[=,&#32;&amp;result]()&#32;{
04295 &#32;&#32;&#32;&#32;result&#32;=&#32;clang_reparseTranslationUnit_Impl(
04296 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;TU,&#32;llvm::makeArrayRef(unsaved_files,&#32;num_unsaved_files),&#32;<link linkend="_namespaceoptions">options</link>);
04297 &#32;&#32;};
04298 
04299 &#32;&#32;llvm::CrashRecoveryContext&#32;CRC;
04300 
04301 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!<link linkend="_namespaceclang_1af866b018fe401ae941a367429bdd4c9a">RunSafely</link>(CRC,&#32;ReparseTranslationUnitImpl))&#32;{
04302 &#32;&#32;&#32;&#32;fprintf(stderr,&#32;<emphasis role="stringliteral">&quot;libclang:&#32;crash&#32;detected&#32;during&#32;reparsing\n&quot;</emphasis>);
04303 &#32;&#32;&#32;&#32;cxtu::getASTUnit(TU)-&gt;setUnsafeToFree(<emphasis role="keyword">true</emphasis>);
04304 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;CXError_Crashed;
04305 &#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(getenv(<emphasis role="stringliteral">&quot;LIBCLANG_RESOURCE_USAGE&quot;</emphasis>))
04306 &#32;&#32;&#32;&#32;<link linkend="_namespaceclang_1aa969857ada50e5f302f7127c78a63018">PrintLibclangResourceUsage</link>(TU);
04307 
04308 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;result;
04309 }
</programlisting><para>
References <link linkend="__c_log_8h_source_1l00100">LOG_FUNC_SECTION</link>.</para>
    </section><anchor xml:id="__c_index_8cpp_1a1be3baac9f48e48ba4119cbcdaf35391"/>    <section>
    <title>clang_saveTranslationUnit()</title>
<indexterm><primary>clang_saveTranslationUnit</primary><secondary>CIndex.cpp</secondary></indexterm>
<indexterm><primary>CIndex.cpp</primary><secondary>clang_saveTranslationUnit</secondary></indexterm>
<para><computeroutput>int clang_saveTranslationUnit (CXTranslationUnit TU, const char * FileName, unsigned options)</computeroutput></para><para>
Definition at line <link linkend="__c_index_8cpp_source_1l04159">4159</link> of file <link linkend="__c_index_8cpp_source">CIndex.cpp</link>.</para>
<programlisting>04160 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
04161 &#32;&#32;<link linkend="__c_log_8h_1a24474e48ce7e218f17ae9353103470d8">LOG_FUNC_SECTION</link>&#32;{&#32;*Log&#32;&lt;&lt;&#32;TU&#32;&lt;&lt;&#32;<emphasis role="charliteral">&apos;&#32;&apos;</emphasis>&#32;&lt;&lt;&#32;FileName;&#32;}
04162 
04163 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(isNotUsableTU(TU))&#32;{
04164 &#32;&#32;&#32;&#32;<link linkend="__c_x_translation_unit_8h_1a4ec17e6e03ea0baf73e27802eae36106">LOG_BAD_TU</link>(TU);
04165 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;CXSaveError_InvalidTU;
04166 &#32;&#32;}
04167 
04168 &#32;&#32;ASTUnit&#32;*CXXUnit&#32;=&#32;cxtu::getASTUnit(TU);
04169 &#32;&#32;ASTUnit::ConcurrencyCheck&#32;Check(*CXXUnit);
04170 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!CXXUnit-&gt;hasSema())
04171 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;CXSaveError_InvalidTU;
04172 
04173 &#32;&#32;CXSaveError&#32;result;
04174 &#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;SaveTranslationUnitImpl&#32;=&#32;[=,&#32;&amp;result]()&#32;{
04175 &#32;&#32;&#32;&#32;result&#32;=&#32;clang_saveTranslationUnit_Impl(TU,&#32;FileName,&#32;<link linkend="_namespaceoptions">options</link>);
04176 &#32;&#32;};
04177 
04178 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!CXXUnit-&gt;getDiagnostics().hasUnrecoverableErrorOccurred())&#32;{
04179 &#32;&#32;&#32;&#32;SaveTranslationUnitImpl();
04180 
04181 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(getenv(<emphasis role="stringliteral">&quot;LIBCLANG_RESOURCE_USAGE&quot;</emphasis>))
04182 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespaceclang_1aa969857ada50e5f302f7127c78a63018">PrintLibclangResourceUsage</link>(TU);
04183 
04184 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;result;
04185 &#32;&#32;}
04186 
04187 &#32;&#32;<emphasis role="comment">//&#32;We&#32;have&#32;an&#32;AST&#32;that&#32;has&#32;invalid&#32;nodes&#32;due&#32;to&#32;compiler&#32;errors.</emphasis>
04188 &#32;&#32;<emphasis role="comment">//&#32;Use&#32;a&#32;crash&#32;recovery&#32;thread&#32;for&#32;protection.</emphasis>
04189 
04190 &#32;&#32;llvm::CrashRecoveryContext&#32;CRC;
04191 
04192 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!<link linkend="_namespaceclang_1af866b018fe401ae941a367429bdd4c9a">RunSafely</link>(CRC,&#32;SaveTranslationUnitImpl))&#32;{
04193 &#32;&#32;&#32;&#32;fprintf(stderr,&#32;<emphasis role="stringliteral">&quot;libclang:&#32;crash&#32;detected&#32;during&#32;AST&#32;saving:&#32;{\n&quot;</emphasis>);
04194 &#32;&#32;&#32;&#32;fprintf(stderr,&#32;<emphasis role="stringliteral">&quot;&#32;&#32;&apos;filename&apos;&#32;:&#32;&apos;%s&apos;\n&quot;</emphasis>,&#32;FileName);
04195 &#32;&#32;&#32;&#32;fprintf(stderr,&#32;<emphasis role="stringliteral">&quot;&#32;&#32;&apos;options&apos;&#32;:&#32;%d,\n&quot;</emphasis>,&#32;<link linkend="_namespaceoptions">options</link>);
04196 &#32;&#32;&#32;&#32;fprintf(stderr,&#32;<emphasis role="stringliteral">&quot;}\n&quot;</emphasis>);
04197 
04198 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;CXSaveError_Unknown;
04199 
04200 &#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(getenv(<emphasis role="stringliteral">&quot;LIBCLANG_RESOURCE_USAGE&quot;</emphasis>))&#32;{
04201 &#32;&#32;&#32;&#32;<link linkend="_namespaceclang_1aa969857ada50e5f302f7127c78a63018">PrintLibclangResourceUsage</link>(TU);
04202 &#32;&#32;}
04203 
04204 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;result;
04205 }
</programlisting><para>
References <link linkend="__c_log_8h_source_1l00100">LOG_FUNC_SECTION</link>.</para>
    </section><anchor xml:id="__c_index_8cpp_1a496961baac6bdcc6be5e7ceac9b2273d"/>    <section>
    <title>clang_suspendTranslationUnit()</title>
<indexterm><primary>clang_suspendTranslationUnit</primary><secondary>CIndex.cpp</secondary></indexterm>
<indexterm><primary>CIndex.cpp</primary><secondary>clang_suspendTranslationUnit</secondary></indexterm>
<para><computeroutput>unsigned clang_suspendTranslationUnit (CXTranslationUnit CTUnit)</computeroutput></para><para>
Definition at line <link linkend="__c_index_8cpp_source_1l04224">4224</link> of file <link linkend="__c_index_8cpp_source">CIndex.cpp</link>.</para>
<programlisting>04224 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
04225 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(CTUnit)&#32;{
04226 &#32;&#32;&#32;&#32;ASTUnit&#32;*Unit&#32;=&#32;cxtu::getASTUnit(CTUnit);
04227 
04228 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(Unit&#32;&amp;&amp;&#32;Unit-&gt;isUnsafeToFree())
04229 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
04230 
04231 &#32;&#32;&#32;&#32;Unit-&gt;ResetForParse();
04232 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
04233 &#32;&#32;}
04234 
04235 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
04236 }
</programlisting>    </section><anchor xml:id="__c_index_8cpp_1a29eef1b64c55bf9aa87dbd3e8ff9420c"/>    <section>
    <title>clang_TargetInfo_dispose()</title>
<indexterm><primary>clang_TargetInfo_dispose</primary><secondary>CIndex.cpp</secondary></indexterm>
<indexterm><primary>CIndex.cpp</primary><secondary>clang_TargetInfo_dispose</secondary></indexterm>
<para><computeroutput>void clang_TargetInfo_dispose (CXTargetInfo TargetInfo)</computeroutput></para><para>
Definition at line <link linkend="__c_index_8cpp_source_1l04368">4368</link> of file <link linkend="__c_index_8cpp_source">CIndex.cpp</link>.</para>
<programlisting>04368 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
04369 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!TargetInfo)
04370 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
04371 
04372 &#32;&#32;<emphasis role="keyword">delete</emphasis>&#32;TargetInfo;
04373 }
</programlisting>    </section><anchor xml:id="__c_index_8cpp_1a76a103dd593b0f42310028638e1cc493"/>    <section>
    <title>clang_TargetInfo_getPointerWidth()</title>
<indexterm><primary>clang_TargetInfo_getPointerWidth</primary><secondary>CIndex.cpp</secondary></indexterm>
<indexterm><primary>CIndex.cpp</primary><secondary>clang_TargetInfo_getPointerWidth</secondary></indexterm>
<para><computeroutput>int clang_TargetInfo_getPointerWidth (CXTargetInfo TargetInfo)</computeroutput></para><para>
Definition at line <link linkend="__c_index_8cpp_source_1l04356">4356</link> of file <link linkend="__c_index_8cpp_source">CIndex.cpp</link>.</para>
<programlisting>04356 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
04357 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!TargetInfo)
04358 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;-1;
04359 
04360 &#32;&#32;CXTranslationUnit&#32;CTUnit&#32;=&#32;TargetInfo-&gt;TranslationUnit;
04361 &#32;&#32;assert(!isNotUsableTU(CTUnit)&#32;&amp;&amp;
04362 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;Unexpected&#32;unusable&#32;translation&#32;unit&#32;in&#32;TargetInfo&quot;</emphasis>);
04363 
04364 &#32;&#32;ASTUnit&#32;*CXXUnit&#32;=&#32;cxtu::getASTUnit(CTUnit);
04365 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;CXXUnit-&gt;getASTContext().getTargetInfo().getMaxPointerWidth();
04366 }
</programlisting>    </section><anchor xml:id="__c_index_8cpp_1a2406512f8007c7d88ae433c7c2b4cb0d"/>    <section>
    <title>clang_TargetInfo_getTriple()</title>
<indexterm><primary>clang_TargetInfo_getTriple</primary><secondary>CIndex.cpp</secondary></indexterm>
<indexterm><primary>CIndex.cpp</primary><secondary>clang_TargetInfo_getTriple</secondary></indexterm>
<para><computeroutput>CXString clang_TargetInfo_getTriple (CXTargetInfo TargetInfo)</computeroutput></para><para>
Definition at line <link linkend="__c_index_8cpp_source_1l04342">4342</link> of file <link linkend="__c_index_8cpp_source">CIndex.cpp</link>.</para>
<programlisting>04342 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
04343 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!TargetInfo)
04344 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1a8a49aa6ea196abdde85886689f2630f9">cxstring::createEmpty</link>();
04345 
04346 &#32;&#32;CXTranslationUnit&#32;CTUnit&#32;=&#32;TargetInfo-&gt;TranslationUnit;
04347 &#32;&#32;assert(!isNotUsableTU(CTUnit)&#32;&amp;&amp;
04348 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;Unexpected&#32;unusable&#32;translation&#32;unit&#32;in&#32;TargetInfo&quot;</emphasis>);
04349 
04350 &#32;&#32;ASTUnit&#32;*CXXUnit&#32;=&#32;cxtu::getASTUnit(CTUnit);
04351 &#32;&#32;std::string&#32;Triple&#32;=
04352 &#32;&#32;&#32;&#32;&#32;&#32;CXXUnit-&gt;getASTContext().getTargetInfo().getTriple().normalize();
04353 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1a19a4962be87f75a8c1fa5a0b75f76298">cxstring::createDup</link>(Triple);
04354 }
</programlisting><para>
References <link linkend="__c_x_string_8cpp_source_1l00043">clang::cxstring::createEmpty()</link>.</para>
    </section><anchor xml:id="__c_index_8cpp_1a1675239d59b2b9cd24f867fb2c15455b"/>    <section>
    <title>clang_toggleCrashRecovery()</title>
<indexterm><primary>clang_toggleCrashRecovery</primary><secondary>CIndex.cpp</secondary></indexterm>
<indexterm><primary>CIndex.cpp</primary><secondary>clang_toggleCrashRecovery</secondary></indexterm>
<para><computeroutput>void clang_toggleCrashRecovery (unsigned isEnabled)</computeroutput></para><para>
Definition at line <link linkend="__c_index_8cpp_source_1l03493">3493</link> of file <link linkend="__c_index_8cpp_source">CIndex.cpp</link>.</para>
<programlisting>03493 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
03494 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(isEnabled)
03495 &#32;&#32;&#32;&#32;llvm::CrashRecoveryContext::Enable();
03496 &#32;&#32;<emphasis role="keywordflow">else</emphasis>
03497 &#32;&#32;&#32;&#32;llvm::CrashRecoveryContext::Disable();
03498 }
</programlisting>    </section><anchor xml:id="__c_index_8cpp_1acb7d078bea44691adbb99cd63ce7e556"/>    <section>
    <title>clang_tokenize()</title>
<indexterm><primary>clang_tokenize</primary><secondary>CIndex.cpp</secondary></indexterm>
<indexterm><primary>CIndex.cpp</primary><secondary>clang_tokenize</secondary></indexterm>
<para><computeroutput>void clang_tokenize (CXTranslationUnit TU, CXSourceRange Range, CXToken ** Tokens, unsigned * NumTokens)</computeroutput></para><para>
Definition at line <link linkend="__c_index_8cpp_source_1l06986">6986</link> of file <link linkend="__c_index_8cpp_source">CIndex.cpp</link>.</para>
<programlisting>06987 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
06988 &#32;&#32;<link linkend="__c_log_8h_1a24474e48ce7e218f17ae9353103470d8">LOG_FUNC_SECTION</link>&#32;{&#32;*Log&#32;&lt;&lt;&#32;TU&#32;&lt;&lt;&#32;<emphasis role="charliteral">&apos;&#32;&apos;</emphasis>&#32;&lt;&lt;&#32;Range;&#32;}
06989 
06990 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(Tokens)
06991 &#32;&#32;&#32;&#32;*Tokens&#32;=&#32;<emphasis role="keyword">nullptr</emphasis>;
06992 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(NumTokens)
06993 &#32;&#32;&#32;&#32;*NumTokens&#32;=&#32;0;
06994 
06995 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(isNotUsableTU(TU))&#32;{
06996 &#32;&#32;&#32;&#32;<link linkend="__c_x_translation_unit_8h_1a4ec17e6e03ea0baf73e27802eae36106">LOG_BAD_TU</link>(TU);
06997 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
06998 &#32;&#32;}
06999 
07000 &#32;&#32;ASTUnit&#32;*CXXUnit&#32;=&#32;cxtu::getASTUnit(TU);
07001 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!CXXUnit&#32;||&#32;!Tokens&#32;||&#32;!NumTokens)
07002 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
07003 
07004 &#32;&#32;ASTUnit::ConcurrencyCheck&#32;Check(*CXXUnit);
07005 
07006 &#32;&#32;SourceRange&#32;R&#32;=&#32;cxloc::translateCXSourceRange(Range);
07007 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(R.isInvalid())
07008 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
07009 
07010 &#32;&#32;SmallVector&lt;CXToken,&#32;32&gt;&#32;CXTokens;
07011 &#32;&#32;getTokens(CXXUnit,&#32;R,&#32;CXTokens);
07012 
07013 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(CXTokens.empty())
07014 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
07015 
07016 &#32;&#32;*Tokens&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis>CXToken&#32;*<emphasis role="keyword">&gt;</emphasis>(
07017 &#32;&#32;&#32;&#32;&#32;&#32;llvm::safe_malloc(<emphasis role="keyword">sizeof</emphasis>(CXToken)&#32;*&#32;CXTokens.size()));
07018 &#32;&#32;memmove(*Tokens,&#32;CXTokens.data(),&#32;<emphasis role="keyword">sizeof</emphasis>(CXToken)&#32;*&#32;CXTokens.size());
07019 &#32;&#32;*NumTokens&#32;=&#32;CXTokens.size();
07020 }
</programlisting><para>
References <link linkend="__c_log_8h_source_1l00100">LOG_FUNC_SECTION</link>.</para>
    </section><anchor xml:id="__c_index_8cpp_1a4e194e7ae768674631b733cec3815755"/>    <section>
    <title>clang_Type_getObjCEncoding()</title>
<indexterm><primary>clang_Type_getObjCEncoding</primary><secondary>CIndex.cpp</secondary></indexterm>
<indexterm><primary>CIndex.cpp</primary><secondary>clang_Type_getObjCEncoding</secondary></indexterm>
<para><computeroutput>CXString clang_Type_getObjCEncoding (CXType CT)</computeroutput></para><para>
Definition at line <link linkend="__c_index_8cpp_source_1l03800">3800</link> of file <link linkend="__c_index_8cpp_source">CIndex.cpp</link>.</para>
<programlisting>03800 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
03801 &#32;&#32;CXTranslationUnit&#32;tu&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis>CXTranslationUnit<emphasis role="keyword">&gt;</emphasis>(CT.data[1]);
03802 &#32;&#32;ASTContext&#32;&amp;Ctx&#32;=&#32;getASTUnit(tu)-&gt;getASTContext();
03803 &#32;&#32;std::string&#32;encoding;
03804 &#32;&#32;Ctx.getObjCEncodingForType(QualType::getFromOpaquePtr(CT.data[0]),&#32;encoding);
03805 
03806 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1a19a4962be87f75a8c1fa5a0b75f76298">cxstring::createDup</link>(encoding);
03807 }
</programlisting>    </section><anchor xml:id="__c_index_8cpp_1a68f5626687386695a7c431807b46f085"/>    <section>
    <title>clang_visitChildren()</title>
<indexterm><primary>clang_visitChildren</primary><secondary>CIndex.cpp</secondary></indexterm>
<indexterm><primary>CIndex.cpp</primary><secondary>clang_visitChildren</secondary></indexterm>
<para><computeroutput>unsigned clang_visitChildren (CXCursor parent, CXCursorVisitor visitor, CXClientData client_data)</computeroutput></para><para>
Definition at line <link linkend="__c_index_8cpp_source_1l04555">4555</link> of file <link linkend="__c_index_8cpp_source">CIndex.cpp</link>.</para>
<programlisting>04556 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
04557 &#32;&#32;<link linkend="_classclang_1_1cxcursor_1_1_cursor_visitor">CursorVisitor</link>&#32;CursorVis(<link linkend="_namespaceclang_1_1cxcursor_1a23a495df22339e8289ae6d2421f493b6">getCursorTU</link>(parent),&#32;visitor,&#32;client_data,
04558 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*VisitPreprocessorLast=*/</emphasis><emphasis role="keyword">false</emphasis>);
04559 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;CursorVis.VisitChildren(parent);
04560 }
</programlisting><para>
References <link linkend="__c_x_cursor_8cpp_source_1l01133">clang::cxcursor::getCursorTU()</link>, and <link linkend="__c_index_8cpp_source_1l00492">clang::cxcursor::CursorVisitor::VisitChildren()</link>.</para>
<para>
Referenced by <link linkend="__c_index_8cpp_source_1l04592">clang_visitChildrenWithBlock()</link>.</para>
    </section><anchor xml:id="__c_index_8cpp_1a3b84afea8d2536aa205930809caa29c0"/>    <section>
    <title>clang_visitChildrenWithBlock()</title>
<indexterm><primary>clang_visitChildrenWithBlock</primary><secondary>CIndex.cpp</secondary></indexterm>
<indexterm><primary>CIndex.cpp</primary><secondary>clang_visitChildrenWithBlock</secondary></indexterm>
<para><computeroutput>unsigned clang_visitChildrenWithBlock (CXCursor parent, <link linkend="__c_index_8cpp_1a9ea360dd4276806a13c2ad73b0ae7b93">CXCursorVisitorBlock</link> block)</computeroutput></para><para>
Definition at line <link linkend="__c_index_8cpp_source_1l04592">4592</link> of file <link linkend="__c_index_8cpp_source">CIndex.cpp</link>.</para>
<programlisting>04593 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
04594 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__c_index_8cpp_1a68f5626687386695a7c431807b46f085">clang_visitChildren</link>(parent,&#32;visitWithBlock,&#32;block);
04595 }
</programlisting><para>
References <link linkend="__c_index_8cpp_source_1l04555">clang_visitChildren()</link>.</para>
    </section><anchor xml:id="__c_index_8cpp_1a6aae6780bf1701f1a1857b467af930a0"/>    <section>
    <title>GetSubscriptOrCallOperator()</title>
<indexterm><primary>GetSubscriptOrCallOperator</primary><secondary>CIndex.cpp</secondary></indexterm>
<indexterm><primary>CIndex.cpp</primary><secondary>GetSubscriptOrCallOperator</secondary></indexterm>
<para><computeroutput>const CXXOperatorCallExpr* GetSubscriptOrCallOperator (CXCursor Cursor)</computeroutput></para><para>
Definition at line <link linkend="__c_index_8cpp_source_1l07142">7142</link> of file <link linkend="__c_index_8cpp_source">CIndex.cpp</link>.</para>
<programlisting>07142 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
07143 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!<link linkend="__c_index_8cpp_1ab958945dd59c351e1ae1a3f7f5668095">clang_isExpression</link>(Cursor.kind))
07144 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">nullptr</emphasis>;
07145 
07146 &#32;&#32;<emphasis role="keyword">const</emphasis>&#32;Expr&#32;*E&#32;=&#32;<link linkend="_namespaceclang_1_1cxcursor_1a80837a3710c6df0dfc24b5ee1d94ff9b">getCursorExpr</link>(Cursor);
07147 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;*OCE&#32;=&#32;dyn_cast&lt;CXXOperatorCallExpr&gt;(E))&#32;{
07148 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;OverloadedOperatorKind&#32;Kind&#32;=&#32;OCE-&gt;getOperator();
07149 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(Kind&#32;==&#32;OO_Call&#32;||&#32;Kind&#32;==&#32;OO_Subscript)
07150 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;OCE;
07151 &#32;&#32;}
07152 
07153 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">nullptr</emphasis>;
07154 }
</programlisting></section>
</section>
</section>
