<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="__c_indexer_8h" xml:lang="en-US">
<title>/Users/maximilian/clang-llvm/clang/tools/libclang/CIndexer.h File Reference</title>
<indexterm><primary>/Users/maximilian/clang-llvm/clang/tools/libclang/CIndexer.h</primary></indexterm>
<programlisting>#include &quot;clang-c/Index.h&quot;
#include &quot;clang/Frontend/PCHContainerOperations.h&quot;
#include &quot;llvm/ADT/STLExtras.h&quot;
#include &lt;utility&gt;
</programlisting><simplesect>
    <title>Classes    </title>
        <itemizedlist>
            <listitem><para>class <link linkend="_classclang_1_1_c_indexer">clang::CIndexer</link></para>
</listitem>
            <listitem><para>class <link linkend="_classclang_1_1_libclang_invocation_reporter">clang::LibclangInvocationReporter</link></para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Namespaces    </title>
        <itemizedlist>
            <listitem><para> <link linkend="_namespacellvm">llvm</link></para>
</listitem>
            <listitem><para> <link linkend="_namespaceclang">clang</link></para>

<para>-rename </para>
</listitem>
            <listitem><para> <link linkend="_namespaceclang_1_1cxindex">clang::cxindex</link></para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Functions    </title>
        <itemizedlist>
            <listitem><para>unsigned <link linkend="_namespaceclang_1a784fd2a03784a2dbb08d1841240adb88">clang::GetSafetyThreadStackSize</link> ()</para>

<para>Return the current size to request for &quot;safety&quot;. </para>
</listitem>
            <listitem><para>void <link linkend="_namespaceclang_1a074a6c2b8523d8b50f446a28e8e0f5c4">clang::SetSafetyThreadStackSize</link> (unsigned Value)</para>
</listitem>
            <listitem><para>bool <link linkend="_namespaceclang_1af866b018fe401ae941a367429bdd4c9a">clang::RunSafely</link> (llvm::CrashRecoveryContext &amp;CRC, llvm::function_ref&lt; void()&gt; Fn, unsigned Size)</para>
</listitem>
            <listitem><para>void <link linkend="_namespaceclang_1ab1c32e4de49bdf7a50374807a6d2701c">clang::setThreadBackgroundPriority</link> ()</para>
</listitem>
            <listitem><para>void <link linkend="_namespaceclang_1aa969857ada50e5f302f7127c78a63018">clang::PrintLibclangResourceUsage</link> (CXTranslationUnit TU)</para>

<para>Print libclang&apos;s resource usage to standard error. </para>
</listitem>
            <listitem><para>void <link linkend="_namespaceclang_1_1cxindex_1a134d158252a9bfcc3db346dd2e65f09f">clang::cxindex::printDiagsToStderr</link> (ASTUnit *Unit)</para>
</listitem>
            <listitem><para>MacroInfo * <link linkend="_namespaceclang_1_1cxindex_1af7ce142e794a78913423f48c9d01c78d">clang::cxindex::getMacroInfo</link> (const IdentifierInfo &amp;II, SourceLocation MacroDefLoc, CXTranslationUnit TU)</para>
</listitem>
            <listitem><para>const MacroInfo * <link linkend="_namespaceclang_1_1cxindex_1a9af76d8fd72b3732e87a672007c73bcd">clang::cxindex::getMacroInfo</link> (const MacroDefinitionRecord *MacroDef, CXTranslationUnit TU)</para>

<para>Retrieves the corresponding MacroInfo of a MacroDefinitionRecord. </para>
</listitem>
            <listitem><para>MacroDefinitionRecord * <link linkend="_namespaceclang_1_1cxindex_1ac81be1c63a9bbf2e05be99daa2b11750">clang::cxindex::checkForMacroInMacroDefinition</link> (const MacroInfo *MI, SourceLocation Loc, CXTranslationUnit TU)</para>
</listitem>
            <listitem><para>MacroDefinitionRecord * <link linkend="_namespaceclang_1_1cxindex_1afbdf83287fd5c579f0118d85ba76bb26">clang::cxindex::checkForMacroInMacroDefinition</link> (const MacroInfo *MI, const Token &amp;Tok, CXTranslationUnit TU)</para>
</listitem>
        </itemizedlist>
</simplesect>
</section>
