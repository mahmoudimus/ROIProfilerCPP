<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_handle__llvm_8cpp_source" xml:lang="en-US">
<title>handle_llvm.cpp</title>
<indexterm><primary>/Users/maximilian/clang-llvm/clang/tools/clang-fuzzer/handle-llvm/handle_llvm.cpp</primary></indexterm>
<programlisting>00001 <emphasis role="comment">//==--&#32;handle_llvm.cpp&#32;-&#32;Helper&#32;function&#32;for&#32;Clang&#32;fuzzers&#32;-----------------==//</emphasis>
00002 <emphasis role="comment">//</emphasis>
00003 <emphasis role="comment">//&#32;Part&#32;of&#32;the&#32;LLVM&#32;Project,&#32;under&#32;the&#32;Apache&#32;License&#32;v2.0&#32;with&#32;LLVM&#32;Exceptions.</emphasis>
00004 <emphasis role="comment">//&#32;See&#32;https://llvm.org/LICENSE.txt&#32;for&#32;license&#32;information.</emphasis>
00005 <emphasis role="comment">//&#32;SPDX-License-Identifier:&#32;Apache-2.0&#32;WITH&#32;LLVM-exception</emphasis>
00006 <emphasis role="comment">//</emphasis>
00007 <emphasis role="comment">//===----------------------------------------------------------------------===//</emphasis>
00008 <emphasis role="comment">//</emphasis>
00009 <emphasis role="comment">//&#32;Implements&#32;HandleLLVM&#32;for&#32;use&#32;by&#32;the&#32;Clang&#32;fuzzers.&#32;First&#32;runs&#32;a&#32;loop</emphasis>
00010 <emphasis role="comment">//&#32;vectorizer&#32;optimization&#32;pass&#32;over&#32;the&#32;given&#32;IR&#32;code.&#32;Then&#32;mimics&#32;lli&#32;on&#32;both</emphasis>
00011 <emphasis role="comment">//&#32;versions&#32;to&#32;JIT&#32;the&#32;generated&#32;code&#32;and&#32;execute&#32;it.&#32;Currently,&#32;functions&#32;are&#32;</emphasis>
00012 <emphasis role="comment">//&#32;executed&#32;on&#32;dummy&#32;inputs.</emphasis>
00013 <emphasis role="comment">//</emphasis>
00014 <emphasis role="comment">//===----------------------------------------------------------------------===//</emphasis>
00015 
00016 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="_handle__llvm_8h">handle_llvm.h</link>&quot;</emphasis>
00017 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="_input__arrays_8h">input_arrays.h</link>&quot;</emphasis>
00018 
00019 <emphasis role="preprocessor">#include&#32;&quot;llvm/ADT/Triple.h&quot;</emphasis>
00020 <emphasis role="preprocessor">#include&#32;&quot;llvm/Analysis/TargetLibraryInfo.h&quot;</emphasis>
00021 <emphasis role="preprocessor">#include&#32;&quot;llvm/Analysis/TargetTransformInfo.h&quot;</emphasis>
00022 <emphasis role="preprocessor">#include&#32;&quot;llvm/CodeGen/CommandFlags.h&quot;</emphasis>
00023 <emphasis role="preprocessor">#include&#32;&quot;llvm/CodeGen/MachineModuleInfo.h&quot;</emphasis>
00024 <emphasis role="preprocessor">#include&#32;&quot;llvm/CodeGen/TargetPassConfig.h&quot;</emphasis>
00025 <emphasis role="preprocessor">#include&#32;&quot;llvm/ExecutionEngine/JITEventListener.h&quot;</emphasis>
00026 <emphasis role="preprocessor">#include&#32;&quot;llvm/ExecutionEngine/JITSymbol.h&quot;</emphasis>
00027 <emphasis role="preprocessor">#include&#32;&quot;llvm/ExecutionEngine/MCJIT.h&quot;</emphasis>
00028 <emphasis role="preprocessor">#include&#32;&quot;llvm/ExecutionEngine/ObjectCache.h&quot;</emphasis>
00029 <emphasis role="preprocessor">#include&#32;&quot;llvm/ExecutionEngine/RTDyldMemoryManager.h&quot;</emphasis>
00030 <emphasis role="preprocessor">#include&#32;&quot;llvm/ExecutionEngine/SectionMemoryManager.h&quot;</emphasis>
00031 <emphasis role="preprocessor">#include&#32;&quot;llvm/IR/IRPrintingPasses.h&quot;</emphasis>
00032 <emphasis role="preprocessor">#include&#32;&quot;llvm/IR/LLVMContext.h&quot;</emphasis>
00033 <emphasis role="preprocessor">#include&#32;&quot;llvm/IR/LegacyPassManager.h&quot;</emphasis>
00034 <emphasis role="preprocessor">#include&#32;&quot;llvm/IR/LegacyPassNameParser.h&quot;</emphasis>
00035 <emphasis role="preprocessor">#include&#32;&quot;llvm/IR/Module.h&quot;</emphasis>
00036 <emphasis role="preprocessor">#include&#32;&quot;llvm/IR/Verifier.h&quot;</emphasis>
00037 <emphasis role="preprocessor">#include&#32;&quot;llvm/IRReader/IRReader.h&quot;</emphasis>
00038 <emphasis role="preprocessor">#include&#32;&quot;llvm/Pass.h&quot;</emphasis>
00039 <emphasis role="preprocessor">#include&#32;&quot;llvm/PassRegistry.h&quot;</emphasis>
00040 <emphasis role="preprocessor">#include&#32;&quot;llvm/Support/MemoryBuffer.h&quot;</emphasis>
00041 <emphasis role="preprocessor">#include&#32;&quot;llvm/Support/SourceMgr.h&quot;</emphasis>
00042 <emphasis role="preprocessor">#include&#32;&quot;llvm/Support/TargetRegistry.h&quot;</emphasis>
00043 <emphasis role="preprocessor">#include&#32;&quot;llvm/Support/TargetSelect.h&quot;</emphasis>
00044 <emphasis role="preprocessor">#include&#32;&quot;llvm/Target/TargetMachine.h&quot;</emphasis>
00045 <emphasis role="preprocessor">#include&#32;&quot;llvm/Transforms/IPO.h&quot;</emphasis>
00046 <emphasis role="preprocessor">#include&#32;&quot;llvm/Transforms/IPO/PassManagerBuilder.h&quot;</emphasis>
00047 <emphasis role="preprocessor">#include&#32;&quot;llvm/Transforms/Vectorize.h&quot;</emphasis>
00048 
00049 <emphasis role="keyword">using&#32;namespace&#32;</emphasis><link linkend="_namespacellvm">llvm</link>;
00050 
00051 <emphasis role="keyword">static</emphasis>&#32;codegen::RegisterCodeGenFlags&#32;CGF;
00052 
00053 <emphasis role="comment">//&#32;Define&#32;a&#32;type&#32;for&#32;the&#32;functions&#32;that&#32;are&#32;compiled&#32;and&#32;executed</emphasis>
<anchor xml:id="_handle__llvm_8cpp_source_1l00054"/><link linkend="_handle__llvm_8cpp_1ad679e4a55c200ca194d860e135dfcf7b">00054</link> <emphasis role="keyword">typedef</emphasis>&#32;void&#32;(*<link linkend="_handle__llvm_8cpp_1ad679e4a55c200ca194d860e135dfcf7b">LLVMFunc</link>)(<emphasis role="keywordtype">int</emphasis>*,&#32;<emphasis role="keywordtype">int</emphasis>*,&#32;<emphasis role="keywordtype">int</emphasis>*,&#32;int);
00055 
00056 <emphasis role="comment">//&#32;Helper&#32;function&#32;to&#32;parse&#32;command&#32;line&#32;args&#32;and&#32;find&#32;the&#32;optimization&#32;level</emphasis>
00057 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;getOptLevel(<emphasis role="keyword">const</emphasis>&#32;std::vector&lt;const&#32;char&#32;*&gt;&#32;&amp;ExtraArgs,
00058 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;CodeGenOpt::Level&#32;&amp;OLvl)&#32;{
00059 &#32;&#32;<emphasis role="comment">//&#32;Find&#32;the&#32;optimization&#32;level&#32;from&#32;the&#32;command&#32;line&#32;args</emphasis>
00060 &#32;&#32;OLvl&#32;=&#32;CodeGenOpt::Default;
00061 &#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">auto</emphasis>&#32;&amp;A&#32;:&#32;ExtraArgs)&#32;{
00062 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(A[0]&#32;==&#32;<emphasis role="charliteral">&apos;-&apos;</emphasis>&#32;&amp;&amp;&#32;A[1]&#32;==&#32;<emphasis role="charliteral">&apos;O&apos;</emphasis>)&#32;{
00063 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">switch</emphasis>(A[2])&#32;{
00064 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<emphasis role="charliteral">&apos;0&apos;</emphasis>:&#32;OLvl&#32;=&#32;CodeGenOpt::None;&#32;<emphasis role="keywordflow">break</emphasis>;
00065 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<emphasis role="charliteral">&apos;1&apos;</emphasis>:&#32;OLvl&#32;=&#32;CodeGenOpt::Less;&#32;<emphasis role="keywordflow">break</emphasis>;
00066 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<emphasis role="charliteral">&apos;2&apos;</emphasis>:&#32;OLvl&#32;=&#32;CodeGenOpt::Default;&#32;<emphasis role="keywordflow">break</emphasis>;
00067 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<emphasis role="charliteral">&apos;3&apos;</emphasis>:&#32;OLvl&#32;=&#32;CodeGenOpt::Aggressive;&#32;<emphasis role="keywordflow">break</emphasis>;
00068 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">default</emphasis>:
00069 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;errs()&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;error:&#32;opt&#32;level&#32;must&#32;be&#32;between&#32;0&#32;and&#32;3.\n&quot;</emphasis>;
00070 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::exit(1);
00071 &#32;&#32;&#32;&#32;&#32;&#32;}
00072 &#32;&#32;&#32;&#32;}
00073 &#32;&#32;}
00074 }
00075 
00076 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;ErrorAndExit(std::string&#32;message)&#32;{
00077 &#32;&#32;errs()&lt;&lt;&#32;<emphasis role="stringliteral">&quot;ERROR:&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;message&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;\n&quot;</emphasis>;
00078 &#32;&#32;std::exit(1);
00079 }
00080 
00081 <emphasis role="comment">//&#32;Helper&#32;function&#32;to&#32;add&#32;optimization&#32;passes&#32;to&#32;the&#32;TargetMachine&#32;at&#32;the&#32;</emphasis>
00082 <emphasis role="comment">//&#32;specified&#32;optimization&#32;level,&#32;OptLevel</emphasis>
00083 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;AddOptimizationPasses(legacy::PassManagerBase&#32;&amp;MPM,
00084 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;CodeGenOpt::Level&#32;OptLevel,
00085 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;SizeLevel)&#32;{
00086 &#32;&#32;<emphasis role="comment">//&#32;Create&#32;and&#32;initialize&#32;a&#32;PassManagerBuilder</emphasis>
00087 &#32;&#32;PassManagerBuilder&#32;Builder;
00088 &#32;&#32;Builder.OptLevel&#32;=&#32;OptLevel;
00089 &#32;&#32;Builder.SizeLevel&#32;=&#32;SizeLevel;
00090 &#32;&#32;Builder.Inliner&#32;=&#32;createFunctionInliningPass(OptLevel,&#32;SizeLevel,&#32;<emphasis role="keyword">false</emphasis>);
00091 &#32;&#32;Builder.LoopVectorize&#32;=&#32;<emphasis role="keyword">true</emphasis>;
00092 &#32;&#32;Builder.populateModulePassManager(MPM);
00093 }
00094 
00095 <emphasis role="comment">//&#32;Mimics&#32;the&#32;opt&#32;tool&#32;to&#32;run&#32;an&#32;optimization&#32;pass&#32;over&#32;the&#32;provided&#32;IR</emphasis>
00096 <emphasis role="keyword">static</emphasis>&#32;std::string&#32;OptLLVM(<emphasis role="keyword">const</emphasis>&#32;std::string&#32;&amp;IR,&#32;CodeGenOpt::Level&#32;OLvl)&#32;{
00097 &#32;&#32;<emphasis role="comment">//&#32;Create&#32;a&#32;module&#32;that&#32;will&#32;run&#32;the&#32;optimization&#32;passes</emphasis>
00098 &#32;&#32;SMDiagnostic&#32;Err;
00099 &#32;&#32;LLVMContext&#32;Context;
00100 &#32;&#32;std::unique_ptr&lt;Module&gt;&#32;M&#32;=&#32;parseIR(MemoryBufferRef(IR,&#32;<emphasis role="stringliteral">&quot;IR&quot;</emphasis>),&#32;Err,&#32;Context);
00101 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!M&#32;||&#32;verifyModule(*M,&#32;&amp;errs()))
00102 &#32;&#32;&#32;&#32;ErrorAndExit(<emphasis role="stringliteral">&quot;Could&#32;not&#32;parse&#32;IR&quot;</emphasis>);
00103 
00104 &#32;&#32;Triple&#32;ModuleTriple(M-&gt;getTargetTriple());
00105 &#32;&#32;<emphasis role="keyword">const</emphasis>&#32;TargetOptions&#32;Options&#32;=
00106 &#32;&#32;&#32;&#32;&#32;&#32;codegen::InitTargetOptionsFromCodeGenFlags(ModuleTriple);
00107 &#32;&#32;std::string&#32;E;
00108 &#32;&#32;<emphasis role="keyword">const</emphasis>&#32;Target&#32;*TheTarget&#32;=
00109 &#32;&#32;&#32;&#32;&#32;&#32;TargetRegistry::lookupTarget(codegen::getMArch(),&#32;ModuleTriple,&#32;E);
00110 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!TheTarget)
00111 &#32;&#32;&#32;&#32;ErrorAndExit(E);
00112 
00113 &#32;&#32;std::unique_ptr&lt;TargetMachine&gt;&#32;TM(TheTarget-&gt;createTargetMachine(
00114 &#32;&#32;&#32;&#32;&#32;&#32;M-&gt;getTargetTriple(),&#32;codegen::getCPUStr(),&#32;codegen::getFeaturesStr(),
00115 &#32;&#32;&#32;&#32;&#32;&#32;Options,&#32;codegen::getExplicitRelocModel(),
00116 &#32;&#32;&#32;&#32;&#32;&#32;codegen::getExplicitCodeModel(),&#32;OLvl));
00117 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!TM)
00118 &#32;&#32;&#32;&#32;ErrorAndExit(<emphasis role="stringliteral">&quot;Could&#32;not&#32;create&#32;target&#32;machine&quot;</emphasis>);
00119 
00120 &#32;&#32;codegen::setFunctionAttributes(codegen::getCPUStr(),
00121 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;codegen::getFeaturesStr(),&#32;*M);
00122 
00123 &#32;&#32;legacy::PassManager&#32;Passes;
00124 &#32;&#32;
00125 &#32;&#32;Passes.add(<emphasis role="keyword">new</emphasis>&#32;TargetLibraryInfoWrapperPass(ModuleTriple));
00126 &#32;&#32;Passes.add(createTargetTransformInfoWrapperPass(TM-&gt;getTargetIRAnalysis()));
00127 
00128 &#32;&#32;LLVMTargetMachine&#32;&amp;LTM&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis>LLVMTargetMachine&#32;&amp;<emphasis role="keyword">&gt;</emphasis>(*TM);
00129 &#32;&#32;Passes.add(LTM.createPassConfig(Passes));
00130 
00131 &#32;&#32;Passes.add(createVerifierPass());
00132 
00133 &#32;&#32;AddOptimizationPasses(Passes,&#32;OLvl,&#32;0);
00134 
00135 &#32;&#32;<emphasis role="comment">//&#32;Add&#32;a&#32;pass&#32;that&#32;writes&#32;the&#32;optimized&#32;IR&#32;to&#32;an&#32;output&#32;stream</emphasis>
00136 &#32;&#32;std::string&#32;outString;
00137 &#32;&#32;raw_string_ostream&#32;OS(outString);
00138 &#32;&#32;Passes.add(createPrintModulePass(OS,&#32;<emphasis role="stringliteral">&quot;&quot;</emphasis>,&#32;<emphasis role="keyword">false</emphasis>));
00139 
00140 &#32;&#32;Passes.run(*M);
00141 
00142 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;OS.str();
00143 }
00144 
00145 <emphasis role="comment">//&#32;Takes&#32;a&#32;function&#32;and&#32;runs&#32;it&#32;on&#32;a&#32;set&#32;of&#32;inputs</emphasis>
00146 <emphasis role="comment">//&#32;First&#32;determines&#32;whether&#32;f&#32;is&#32;the&#32;optimized&#32;or&#32;unoptimized&#32;function</emphasis>
00147 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;RunFuncOnInputs(<link linkend="_handle__llvm_8cpp_1ad679e4a55c200ca194d860e135dfcf7b">LLVMFunc</link>&#32;f,&#32;<emphasis role="keywordtype">int</emphasis>&#32;Arr[kNumArrays][kArraySize])&#32;{
00148 &#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;kNumArrays&#32;/&#32;3;&#32;i++)
00149 &#32;&#32;&#32;&#32;f(Arr[i],&#32;Arr[i&#32;+&#32;(kNumArrays&#32;/&#32;3)],&#32;Arr[i&#32;+&#32;(2&#32;*&#32;kNumArrays&#32;/&#32;3)],
00150 &#32;&#32;&#32;&#32;&#32;&#32;kArraySize);
00151 }
00152 
00153 <emphasis role="comment">//&#32;Takes&#32;a&#32;string&#32;of&#32;IR&#32;and&#32;compiles&#32;it&#32;using&#32;LLVM&apos;s&#32;JIT&#32;Engine</emphasis>
00154 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;CreateAndRunJITFunc(<emphasis role="keyword">const</emphasis>&#32;std::string&#32;&amp;IR,&#32;CodeGenOpt::Level&#32;OLvl)&#32;{
00155 &#32;&#32;SMDiagnostic&#32;Err;
00156 &#32;&#32;LLVMContext&#32;Context;
00157 &#32;&#32;std::unique_ptr&lt;Module&gt;&#32;M&#32;=&#32;parseIR(MemoryBufferRef(IR,&#32;<emphasis role="stringliteral">&quot;IR&quot;</emphasis>),&#32;Err,&#32;Context);
00158 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!M)
00159 &#32;&#32;&#32;&#32;ErrorAndExit(<emphasis role="stringliteral">&quot;Could&#32;not&#32;parse&#32;IR&quot;</emphasis>);
00160 
00161 &#32;&#32;Function&#32;*EntryFunc&#32;=&#32;M-&gt;getFunction(<emphasis role="stringliteral">&quot;foo&quot;</emphasis>);
00162 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!EntryFunc)
00163 &#32;&#32;&#32;&#32;ErrorAndExit(<emphasis role="stringliteral">&quot;Function&#32;not&#32;found&#32;in&#32;module&quot;</emphasis>);
00164 
00165 &#32;&#32;std::string&#32;ErrorMsg;
00166 &#32;&#32;Triple&#32;ModuleTriple(M-&gt;getTargetTriple());
00167 
00168 &#32;&#32;EngineBuilder&#32;builder(std::move(M));
00169 &#32;&#32;builder.setMArch(codegen::getMArch());
00170 &#32;&#32;builder.setMCPU(codegen::getCPUStr());
00171 &#32;&#32;builder.setMAttrs(codegen::getFeatureList());
00172 &#32;&#32;builder.setErrorStr(&amp;ErrorMsg);
00173 &#32;&#32;builder.setEngineKind(EngineKind::JIT);
00174 &#32;&#32;builder.setMCJITMemoryManager(std::make_unique&lt;SectionMemoryManager&gt;());
00175 &#32;&#32;builder.setOptLevel(OLvl);
00176 &#32;&#32;builder.setTargetOptions(
00177 &#32;&#32;&#32;&#32;&#32;&#32;codegen::InitTargetOptionsFromCodeGenFlags(ModuleTriple));
00178 
00179 &#32;&#32;std::unique_ptr&lt;ExecutionEngine&gt;&#32;EE(builder.create());
00180 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!EE)
00181 &#32;&#32;&#32;&#32;ErrorAndExit(<emphasis role="stringliteral">&quot;Could&#32;not&#32;create&#32;execution&#32;engine&quot;</emphasis>);
00182 
00183 &#32;&#32;EE-&gt;finalizeObject();
00184 &#32;&#32;EE-&gt;runStaticConstructorsDestructors(<emphasis role="keyword">false</emphasis>);
00185 
00186 <emphasis role="preprocessor">#if&#32;defined(__GNUC__)&#32;&amp;&amp;&#32;!defined(__clang)&#32;&amp;&amp;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
00187 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;((__GNUC__&#32;==&#32;4)&#32;&amp;&amp;&#32;(__GNUC_MINOR__&#32;&lt;&#32;9))</emphasis>
00188 <emphasis role="comment">//&#32;Silence</emphasis>
00189 <emphasis role="comment">//</emphasis>
00190 <emphasis role="comment">//&#32;&#32;&#32;warning:&#32;ISO&#32;C++&#32;forbids&#32;casting&#32;between&#32;pointer-to-function&#32;and</emphasis>
00191 <emphasis role="comment">//&#32;&#32;&#32;pointer-to-object&#32;[-Wpedantic]</emphasis>
00192 <emphasis role="comment">//</emphasis>
00193 <emphasis role="comment">//&#32;Since&#32;C++11&#32;this&#32;casting&#32;is&#32;conditionally&#32;supported&#32;and&#32;GCC&#32;versions</emphasis>
00194 <emphasis role="comment">//&#32;starting&#32;from&#32;4.9.0&#32;don&apos;t&#32;warn&#32;about&#32;the&#32;cast.</emphasis>
00195 <emphasis role="preprocessor">#pragma&#32;GCC&#32;diagnostic&#32;push</emphasis>
00196 <emphasis role="preprocessor">#pragma&#32;GCC&#32;diagnostic&#32;ignored&#32;&quot;-Wpedantic&quot;</emphasis>
00197 <emphasis role="preprocessor">#endif</emphasis>
00198 &#32;&#32;<link linkend="_handle__llvm_8cpp_1ad679e4a55c200ca194d860e135dfcf7b">LLVMFunc</link>&#32;f&#32;=&#32;<emphasis role="keyword">reinterpret_cast&lt;</emphasis><link linkend="_handle__llvm_8cpp_1ad679e4a55c200ca194d860e135dfcf7b">LLVMFunc</link><emphasis role="keyword">&gt;</emphasis>(EE-&gt;getPointerToFunction(EntryFunc));
00199 <emphasis role="preprocessor">#if&#32;defined(__GNUC__)&#32;&amp;&amp;&#32;!defined(__clang)&#32;&amp;&amp;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
00200 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;((__GNUC__&#32;==&#32;4)&#32;&amp;&amp;&#32;(__GNUC_MINOR__&#32;&lt;&#32;9))</emphasis>
00201 <emphasis role="preprocessor">#pragma&#32;GCC&#32;diagnostic&#32;pop</emphasis>
00202 <emphasis role="preprocessor">#endif</emphasis>
00203 
00204 &#32;&#32;<emphasis role="comment">//&#32;Figure&#32;out&#32;if&#32;we&#32;are&#32;running&#32;the&#32;optimized&#32;func&#32;or&#32;the&#32;unoptimized&#32;func</emphasis>
00205 &#32;&#32;RunFuncOnInputs(f,&#32;(OLvl&#32;==&#32;CodeGenOpt::None)&#32;?&#32;UnoptArrays&#32;:&#32;OptArrays);
00206 
00207 &#32;&#32;EE-&gt;runStaticConstructorsDestructors(<emphasis role="keyword">true</emphasis>);
00208 }
00209 
00210 <emphasis role="comment">//&#32;Main&#32;fuzz&#32;target&#32;called&#32;by&#32;ExampleClangLLVMProtoFuzzer.cpp</emphasis>
00211 <emphasis role="comment">//&#32;Mimics&#32;the&#32;lli&#32;tool&#32;to&#32;JIT&#32;the&#32;LLVM&#32;IR&#32;code&#32;and&#32;execute&#32;it</emphasis>
<anchor xml:id="_handle__llvm_8cpp_source_1l00212"/><link linkend="_namespaceclang__fuzzer_1a3adbd0effd16c9fde62eef8b297c8fee">00212</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_namespaceclang__fuzzer_1a3adbd0effd16c9fde62eef8b297c8fee">clang_fuzzer::HandleLLVM</link>(<emphasis role="keyword">const</emphasis>&#32;std::string&#32;&amp;IR,
00213 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;std::vector&lt;const&#32;char&#32;*&gt;&#32;&amp;ExtraArgs)&#32;{
00214 &#32;&#32;<emphasis role="comment">//&#32;Populate&#32;OptArrays&#32;and&#32;UnoptArrays&#32;with&#32;the&#32;arrays&#32;from&#32;InputArrays</emphasis>
00215 &#32;&#32;memcpy(OptArrays,&#32;InputArrays,&#32;kTotalSize);
00216 &#32;&#32;memcpy(UnoptArrays,&#32;InputArrays,&#32;kTotalSize);
00217 
00218 &#32;&#32;<emphasis role="comment">//&#32;Parse&#32;ExtraArgs&#32;to&#32;set&#32;the&#32;optimization&#32;level</emphasis>
00219 &#32;&#32;CodeGenOpt::Level&#32;OLvl;
00220 &#32;&#32;getOptLevel(ExtraArgs,&#32;OLvl);
00221 
00222 &#32;&#32;<emphasis role="comment">//&#32;First&#32;we&#32;optimize&#32;the&#32;IR&#32;by&#32;running&#32;a&#32;loop&#32;vectorizer&#32;pass</emphasis>
00223 &#32;&#32;std::string&#32;OptIR&#32;=&#32;OptLLVM(IR,&#32;OLvl);
00224 
00225 &#32;&#32;CreateAndRunJITFunc(OptIR,&#32;OLvl);
00226 &#32;&#32;CreateAndRunJITFunc(IR,&#32;CodeGenOpt::None);
00227 
00228 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(memcmp(OptArrays,&#32;UnoptArrays,&#32;kTotalSize))
00229 &#32;&#32;&#32;&#32;ErrorAndExit(<emphasis role="stringliteral">&quot;!!!BUG!!!&quot;</emphasis>);
00230 
00231 &#32;&#32;<emphasis role="keywordflow">return</emphasis>;
00232 }
</programlisting></section>
