<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_test__shell_8py_source" xml:lang="en-US">
<title>test_shell.py</title>
<indexterm><primary>/Users/maximilian/clang-llvm/clang/tools/scan-build-py/tests/unit/test_shell.py</primary></indexterm>
<programlisting><anchor xml:id="_test__shell_8py_source_1l00001"/><link linkend="_namespacetests_1_1unit_1_1test__shell">00001</link> <emphasis role="comment">#&#32;-*-&#32;coding:&#32;utf-8&#32;-*-</emphasis>
00002 <emphasis role="comment">#&#32;Part&#32;of&#32;the&#32;LLVM&#32;Project,&#32;under&#32;the&#32;Apache&#32;License&#32;v2.0&#32;with&#32;LLVM&#32;Exceptions.</emphasis>
00003 <emphasis role="comment">#&#32;See&#32;https://llvm.org/LICENSE.txt&#32;for&#32;license&#32;information.</emphasis>
00004 <emphasis role="comment">#&#32;SPDX-License-Identifier:&#32;Apache-2.0&#32;WITH&#32;LLVM-exception</emphasis>
00005 
00006 <emphasis role="keyword">import</emphasis>&#32;<link linkend="_namespacelibscanbuild_1_1shell">libscanbuild.shell</link>&#32;<emphasis role="keyword">as</emphasis>&#32;sut
00007 <emphasis role="keyword">import</emphasis>&#32;unittest
00008 
00009 
<anchor xml:id="_test__shell_8py_source_1l00010"/><link linkend="_classtests_1_1unit_1_1test__shell_1_1_shell_test">00010</link> <emphasis role="keyword">class&#32;</emphasis><link linkend="_classtests_1_1unit_1_1test__shell_1_1_shell_test">ShellTest</link>(unittest.TestCase):
00011 
<anchor xml:id="_test__shell_8py_source_1l00012"/><link linkend="_classtests_1_1unit_1_1test__shell_1_1_shell_test_1a82e7a31ff4c39c404b53c4193b7bc9ac">00012</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">def&#32;</emphasis><link linkend="_classtests_1_1unit_1_1test__shell_1_1_shell_test_1a82e7a31ff4c39c404b53c4193b7bc9ac">test_encode_decode_are_same</link>(self):
00013 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">def&#32;</emphasis><link linkend="__function_call_decls_8cpp_1ae1a3968e7947464bee7714f6d43b7002">test</link>(value):
00014 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;self.assertEqual(sut.encode(sut.decode(value)),&#32;value)
00015 
00016 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__function_call_decls_8cpp_1ae1a3968e7947464bee7714f6d43b7002">test</link>(<emphasis role="stringliteral">&quot;&quot;</emphasis>)
00017 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__function_call_decls_8cpp_1ae1a3968e7947464bee7714f6d43b7002">test</link>(<emphasis role="stringliteral">&quot;clang&quot;</emphasis>)
00018 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__function_call_decls_8cpp_1ae1a3968e7947464bee7714f6d43b7002">test</link>(<emphasis role="stringliteral">&quot;clang&#32;this&#32;and&#32;that&quot;</emphasis>)
00019 
<anchor xml:id="_test__shell_8py_source_1l00020"/><link linkend="_classtests_1_1unit_1_1test__shell_1_1_shell_test_1ac9e1de810e601fcab8a2f4d354c9ed11">00020</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">def&#32;</emphasis><link linkend="_classtests_1_1unit_1_1test__shell_1_1_shell_test_1ac9e1de810e601fcab8a2f4d354c9ed11">test_decode_encode_are_same</link>(self):
00021 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">def&#32;</emphasis><link linkend="__function_call_decls_8cpp_1ae1a3968e7947464bee7714f6d43b7002">test</link>(value):
00022 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;self.assertEqual(sut.decode(sut.encode(value)),&#32;value)
00023 
00024 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__function_call_decls_8cpp_1ae1a3968e7947464bee7714f6d43b7002">test</link>([])
00025 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__function_call_decls_8cpp_1ae1a3968e7947464bee7714f6d43b7002">test</link>([<emphasis role="stringliteral">&apos;clang&apos;</emphasis>])
00026 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__function_call_decls_8cpp_1ae1a3968e7947464bee7714f6d43b7002">test</link>([<emphasis role="stringliteral">&apos;clang&apos;</emphasis>,&#32;<emphasis role="stringliteral">&apos;this&apos;</emphasis>,&#32;<emphasis role="stringliteral">&apos;and&apos;</emphasis>,&#32;<emphasis role="stringliteral">&apos;that&apos;</emphasis>])
00027 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__function_call_decls_8cpp_1ae1a3968e7947464bee7714f6d43b7002">test</link>([<emphasis role="stringliteral">&apos;clang&apos;</emphasis>,&#32;<emphasis role="stringliteral">&apos;this&#32;and&apos;</emphasis>,&#32;<emphasis role="stringliteral">&apos;that&apos;</emphasis>])
00028 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__function_call_decls_8cpp_1ae1a3968e7947464bee7714f6d43b7002">test</link>([<emphasis role="stringliteral">&apos;clang&apos;</emphasis>,&#32;<emphasis role="stringliteral">&quot;it&apos;s&#32;me&quot;</emphasis>,&#32;<emphasis role="stringliteral">&apos;again&apos;</emphasis>])
00029 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__function_call_decls_8cpp_1ae1a3968e7947464bee7714f6d43b7002">test</link>([<emphasis role="stringliteral">&apos;clang&apos;</emphasis>,&#32;<emphasis role="stringliteral">&apos;some&#32;&quot;words&quot;&#32;are&apos;</emphasis>,&#32;<emphasis role="stringliteral">&apos;quoted&apos;</emphasis>])
00030 
<anchor xml:id="_test__shell_8py_source_1l00031"/><link linkend="_classtests_1_1unit_1_1test__shell_1_1_shell_test_1a3196685586c607e8e65974ec3fe72224">00031</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">def&#32;</emphasis><link linkend="_classtests_1_1unit_1_1test__shell_1_1_shell_test_1a3196685586c607e8e65974ec3fe72224">test_encode</link>(self):
00032 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;self.assertEqual(sut.encode([<emphasis role="stringliteral">&apos;clang&apos;</emphasis>,&#32;<emphasis role="stringliteral">&quot;it&apos;s&#32;me&quot;</emphasis>,&#32;<emphasis role="stringliteral">&apos;again&apos;</emphasis>]),
00033 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&apos;clang&#32;&quot;it\&apos;s&#32;me&quot;&#32;again&apos;</emphasis>)
00034 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;self.assertEqual(sut.encode([<emphasis role="stringliteral">&apos;clang&apos;</emphasis>,&#32;<emphasis role="stringliteral">&quot;it(s&#32;me&quot;</emphasis>,&#32;<emphasis role="stringliteral">&apos;again)&apos;</emphasis>]),
00035 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&apos;clang&#32;&quot;it(s&#32;me&quot;&#32;&quot;again)&quot;&apos;</emphasis>)
00036 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;self.assertEqual(sut.encode([<emphasis role="stringliteral">&apos;clang&apos;</emphasis>,&#32;<emphasis role="stringliteral">&apos;redirect&#32;&gt;&#32;it&apos;</emphasis>]),
00037 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&apos;clang&#32;&quot;redirect&#32;&gt;&#32;it&quot;&apos;</emphasis>)
00038 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;self.assertEqual(sut.encode([<emphasis role="stringliteral">&apos;clang&apos;</emphasis>,&#32;<emphasis role="stringliteral">&apos;-DKEY=&quot;VALUE&quot;&apos;</emphasis>]),
00039 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&apos;clang&#32;-DKEY=\\&quot;VALUE\\&quot;&apos;</emphasis>)
00040 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;self.assertEqual(sut.encode([<emphasis role="stringliteral">&apos;clang&apos;</emphasis>,&#32;<emphasis role="stringliteral">&apos;-DKEY=&quot;value&#32;with&#32;spaces&quot;&apos;</emphasis>]),
00041 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&apos;clang&#32;-DKEY=\\&quot;value&#32;with&#32;spaces\\&quot;&apos;</emphasis>)
</programlisting></section>
