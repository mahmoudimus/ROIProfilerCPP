<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_classtests_1_1unit_1_1test__compilation_1_1_split_test" xml:lang="en-US">
<title>tests.unit.test_compilation.SplitTest Class Reference</title>
<indexterm><primary>tests.unit.test_compilation.SplitTest</primary></indexterm>
<para>Inheritance diagram for tests.unit.test_compilation.SplitTest:    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="classtests_1_1unit_1_1test__compilation_1_1_split_test.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
<simplesect>
    <title>Public Member Functions    </title>
        <itemizedlist>
            <listitem><para>def <link linkend="_classtests_1_1unit_1_1test__compilation_1_1_split_test_1a09b97b8751d83b59a12cb821c52b3f0f">test_detect_cxx_from_compiler_name</link> (self)</para>
</listitem>
            <listitem><para>def <link linkend="_classtests_1_1unit_1_1test__compilation_1_1_split_test_1a8415c040cc5d3680fea217f046eb0cb5">test_action</link> (self)</para>
</listitem>
            <listitem><para>def <link linkend="_classtests_1_1unit_1_1test__compilation_1_1_split_test_1a042a93d383d9e89beb5a36e24a5e36ed">test_source_file</link> (self)</para>
</listitem>
            <listitem><para>def <link linkend="_classtests_1_1unit_1_1test__compilation_1_1_split_test_1a0bd4467d2ce29b8882451d201d88eb54">test_filter_flags</link> (self)</para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Detailed Description</title>
<para>
Definition at line <link linkend="_test__compilation_8py_source_1l00034">34</link> of file <link linkend="_test__compilation_8py_source">test_compilation.py</link>.</para>
</section>
<section>
<title>Member Function Documentation</title>
<anchor xml:id="_classtests_1_1unit_1_1test__compilation_1_1_split_test_1a8415c040cc5d3680fea217f046eb0cb5"/>    <section>
    <title>test_action()</title>
<indexterm><primary>test_action</primary><secondary>tests.unit.test_compilation.SplitTest</secondary></indexterm>
<indexterm><primary>tests.unit.test_compilation.SplitTest</primary><secondary>test_action</secondary></indexterm>
<para><computeroutput>def tests.unit.test_compilation.SplitTest.test_action ( self)</computeroutput></para><para>
Definition at line <link linkend="_test__compilation_8py_source_1l00053">53</link> of file <link linkend="_test__compilation_8py_source">test_compilation.py</link>.</para>
<programlisting>00053 &#32;&#32;&#32;&#32;<emphasis role="keyword">def&#32;</emphasis>test_action(self):
00054 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;self.assertIsNotNone(sut.split_command([<emphasis role="stringliteral">&apos;clang&apos;</emphasis>,&#32;<emphasis role="stringliteral">&apos;source.c&apos;</emphasis>]))
00055 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;self.assertIsNotNone(sut.split_command([<emphasis role="stringliteral">&apos;clang&apos;</emphasis>,&#32;<emphasis role="stringliteral">&apos;-c&apos;</emphasis>,&#32;<emphasis role="stringliteral">&apos;source.c&apos;</emphasis>]))
00056 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;self.assertIsNotNone(sut.split_command([<emphasis role="stringliteral">&apos;clang&apos;</emphasis>,&#32;<emphasis role="stringliteral">&apos;-c&apos;</emphasis>,&#32;<emphasis role="stringliteral">&apos;source.c&apos;</emphasis>,
00057 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&apos;-MF&apos;</emphasis>,&#32;<emphasis role="stringliteral">&apos;a.d&apos;</emphasis>]))
00058 
00059 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;self.assertIsNone(sut.split_command([<emphasis role="stringliteral">&apos;clang&apos;</emphasis>,&#32;<emphasis role="stringliteral">&apos;-E&apos;</emphasis>,&#32;<emphasis role="stringliteral">&apos;source.c&apos;</emphasis>]))
00060 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;self.assertIsNone(sut.split_command([<emphasis role="stringliteral">&apos;clang&apos;</emphasis>,&#32;<emphasis role="stringliteral">&apos;-c&apos;</emphasis>,&#32;<emphasis role="stringliteral">&apos;-E&apos;</emphasis>,&#32;<emphasis role="stringliteral">&apos;source.c&apos;</emphasis>]))
00061 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;self.assertIsNone(sut.split_command([<emphasis role="stringliteral">&apos;clang&apos;</emphasis>,&#32;<emphasis role="stringliteral">&apos;-c&apos;</emphasis>,&#32;<emphasis role="stringliteral">&apos;-M&apos;</emphasis>,&#32;<emphasis role="stringliteral">&apos;source.c&apos;</emphasis>]))
00062 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;self.assertIsNone(
00063 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sut.split_command([<emphasis role="stringliteral">&apos;clang&apos;</emphasis>,&#32;<emphasis role="stringliteral">&apos;-c&apos;</emphasis>,&#32;<emphasis role="stringliteral">&apos;-MM&apos;</emphasis>,&#32;<emphasis role="stringliteral">&apos;source.c&apos;</emphasis>]))
00064 
</programlisting>    </section><anchor xml:id="_classtests_1_1unit_1_1test__compilation_1_1_split_test_1a09b97b8751d83b59a12cb821c52b3f0f"/>    <section>
    <title>test_detect_cxx_from_compiler_name()</title>
<indexterm><primary>test_detect_cxx_from_compiler_name</primary><secondary>tests.unit.test_compilation.SplitTest</secondary></indexterm>
<indexterm><primary>tests.unit.test_compilation.SplitTest</primary><secondary>test_detect_cxx_from_compiler_name</secondary></indexterm>
<para><computeroutput>def tests.unit.test_compilation.SplitTest.test_detect_cxx_from_compiler_name ( self)</computeroutput></para><para>
Definition at line <link linkend="_test__compilation_8py_source_1l00036">36</link> of file <link linkend="_test__compilation_8py_source">test_compilation.py</link>.</para>
<programlisting>00036 &#32;&#32;&#32;&#32;<emphasis role="keyword">def&#32;</emphasis>test_detect_cxx_from_compiler_name(self):
00037 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">def&#32;</emphasis><link linkend="__function_call_decls_8cpp_1ae1a3968e7947464bee7714f6d43b7002">test</link>(cmd):
00038 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;result&#32;=&#32;sut.split_command([cmd,&#32;<emphasis role="stringliteral">&apos;-c&apos;</emphasis>,&#32;<emphasis role="stringliteral">&apos;src.c&apos;</emphasis>])
00039 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;self.assertIsNotNone(result,&#32;<emphasis role="stringliteral">&quot;wrong&#32;input&#32;for&#32;test&quot;</emphasis>)
00040 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;result.compiler&#32;==&#32;<emphasis role="stringliteral">&apos;c++&apos;</emphasis>
00041 
00042 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;self.assertFalse(<link linkend="__function_call_decls_8cpp_1ae1a3968e7947464bee7714f6d43b7002">test</link>(<emphasis role="stringliteral">&apos;cc&apos;</emphasis>))
00043 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;self.assertFalse(<link linkend="__function_call_decls_8cpp_1ae1a3968e7947464bee7714f6d43b7002">test</link>(<emphasis role="stringliteral">&apos;gcc&apos;</emphasis>))
00044 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;self.assertFalse(<link linkend="__function_call_decls_8cpp_1ae1a3968e7947464bee7714f6d43b7002">test</link>(<emphasis role="stringliteral">&apos;clang&apos;</emphasis>))
00045 
00046 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;self.assertTrue(<link linkend="__function_call_decls_8cpp_1ae1a3968e7947464bee7714f6d43b7002">test</link>(<emphasis role="stringliteral">&apos;c++&apos;</emphasis>))
00047 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;self.assertTrue(<link linkend="__function_call_decls_8cpp_1ae1a3968e7947464bee7714f6d43b7002">test</link>(<emphasis role="stringliteral">&apos;g++&apos;</emphasis>))
00048 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;self.assertTrue(<link linkend="__function_call_decls_8cpp_1ae1a3968e7947464bee7714f6d43b7002">test</link>(<emphasis role="stringliteral">&apos;g++-5.3.1&apos;</emphasis>))
00049 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;self.assertTrue(<link linkend="__function_call_decls_8cpp_1ae1a3968e7947464bee7714f6d43b7002">test</link>(<emphasis role="stringliteral">&apos;clang++&apos;</emphasis>))
00050 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;self.assertTrue(<link linkend="__function_call_decls_8cpp_1ae1a3968e7947464bee7714f6d43b7002">test</link>(<emphasis role="stringliteral">&apos;clang++-3.7.1&apos;</emphasis>))
00051 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;self.assertTrue(<link linkend="__function_call_decls_8cpp_1ae1a3968e7947464bee7714f6d43b7002">test</link>(<emphasis role="stringliteral">&apos;armv7_neno-linux-gnueabi-g++&apos;</emphasis>))
00052 
</programlisting><para>
References <link linkend="__function_call_decls_8cpp_source_1l00003">test()</link>.</para>
    </section><anchor xml:id="_classtests_1_1unit_1_1test__compilation_1_1_split_test_1a0bd4467d2ce29b8882451d201d88eb54"/>    <section>
    <title>test_filter_flags()</title>
<indexterm><primary>test_filter_flags</primary><secondary>tests.unit.test_compilation.SplitTest</secondary></indexterm>
<indexterm><primary>tests.unit.test_compilation.SplitTest</primary><secondary>test_filter_flags</secondary></indexterm>
<para><computeroutput>def tests.unit.test_compilation.SplitTest.test_filter_flags ( self)</computeroutput></para><para>
Definition at line <link linkend="_test__compilation_8py_source_1l00084">84</link> of file <link linkend="_test__compilation_8py_source">test_compilation.py</link>.</para>
<programlisting>00084 &#32;&#32;&#32;&#32;<emphasis role="keyword">def&#32;</emphasis>test_filter_flags(self):
00085 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">def&#32;</emphasis><link linkend="__function_call_decls_8cpp_1ae1a3968e7947464bee7714f6d43b7002">test</link>(expected,&#32;flags):
00086 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;command&#32;=&#32;[<emphasis role="stringliteral">&apos;clang&apos;</emphasis>,&#32;<emphasis role="stringliteral">&apos;-c&apos;</emphasis>,&#32;<emphasis role="stringliteral">&apos;src.c&apos;</emphasis>]&#32;+&#32;flags
00087 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;self.assertEqual(expected,&#32;sut.split_command(command).flags)
00088 
00089 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">def&#32;</emphasis>same(expected):
00090 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__function_call_decls_8cpp_1ae1a3968e7947464bee7714f6d43b7002">test</link>(expected,&#32;expected)
00091 
00092 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">def&#32;</emphasis>filtered(flags):
00093 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__function_call_decls_8cpp_1ae1a3968e7947464bee7714f6d43b7002">test</link>([],&#32;flags)
00094 
00095 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;same([])
00096 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;same([<emphasis role="stringliteral">&apos;-I&apos;</emphasis>,&#32;<emphasis role="stringliteral">&apos;/opt/me/include&apos;</emphasis>,&#32;<emphasis role="stringliteral">&apos;-DNDEBUG&apos;</emphasis>,&#32;<emphasis role="stringliteral">&apos;-ULIMITS&apos;</emphasis>])
00097 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;same([<emphasis role="stringliteral">&apos;-O&apos;</emphasis>,&#32;<emphasis role="stringliteral">&apos;-O2&apos;</emphasis>])
00098 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;same([<emphasis role="stringliteral">&apos;-m32&apos;</emphasis>,&#32;<emphasis role="stringliteral">&apos;-mmms&apos;</emphasis>])
00099 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;same([<emphasis role="stringliteral">&apos;-Wall&apos;</emphasis>,&#32;<emphasis role="stringliteral">&apos;-Wno-unused&apos;</emphasis>,&#32;<emphasis role="stringliteral">&apos;-g&apos;</emphasis>,&#32;<emphasis role="stringliteral">&apos;-funroll-loops&apos;</emphasis>])
00100 
00101 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;filtered([])
00102 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;filtered([<emphasis role="stringliteral">&apos;-lclien&apos;</emphasis>,&#32;<emphasis role="stringliteral">&apos;-L/opt/me/lib&apos;</emphasis>,&#32;<emphasis role="stringliteral">&apos;-L&apos;</emphasis>,&#32;<emphasis role="stringliteral">&apos;/opt/you/lib&apos;</emphasis>])
00103 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;filtered([<emphasis role="stringliteral">&apos;-static&apos;</emphasis>])
00104 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;filtered([<emphasis role="stringliteral">&apos;-MD&apos;</emphasis>,&#32;<emphasis role="stringliteral">&apos;-MT&apos;</emphasis>,&#32;<emphasis role="stringliteral">&apos;something&apos;</emphasis>])
00105 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;filtered([<emphasis role="stringliteral">&apos;-MMD&apos;</emphasis>,&#32;<emphasis role="stringliteral">&apos;-MF&apos;</emphasis>,&#32;<emphasis role="stringliteral">&apos;something&apos;</emphasis>])
00106 
00107 
</programlisting><para>
References <link linkend="__function_call_decls_8cpp_source_1l00003">test()</link>.</para>
    </section><anchor xml:id="_classtests_1_1unit_1_1test__compilation_1_1_split_test_1a042a93d383d9e89beb5a36e24a5e36ed"/>    <section>
    <title>test_source_file()</title>
<indexterm><primary>test_source_file</primary><secondary>tests.unit.test_compilation.SplitTest</secondary></indexterm>
<indexterm><primary>tests.unit.test_compilation.SplitTest</primary><secondary>test_source_file</secondary></indexterm>
<para><computeroutput>def tests.unit.test_compilation.SplitTest.test_source_file ( self)</computeroutput></para><para>
Definition at line <link linkend="_test__compilation_8py_source_1l00065">65</link> of file <link linkend="_test__compilation_8py_source">test_compilation.py</link>.</para>
<programlisting>00065 &#32;&#32;&#32;&#32;<emphasis role="keyword">def&#32;</emphasis>test_source_file(self):
00066 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">def&#32;</emphasis><link linkend="__function_call_decls_8cpp_1ae1a3968e7947464bee7714f6d43b7002">test</link>(expected,&#32;cmd):
00067 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;self.assertEqual(expected,&#32;sut.split_command(cmd).files)
00068 
00069 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__function_call_decls_8cpp_1ae1a3968e7947464bee7714f6d43b7002">test</link>([<emphasis role="stringliteral">&apos;src.c&apos;</emphasis>],&#32;[<emphasis role="stringliteral">&apos;clang&apos;</emphasis>,&#32;<emphasis role="stringliteral">&apos;src.c&apos;</emphasis>])
00070 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__function_call_decls_8cpp_1ae1a3968e7947464bee7714f6d43b7002">test</link>([<emphasis role="stringliteral">&apos;src.c&apos;</emphasis>],&#32;[<emphasis role="stringliteral">&apos;clang&apos;</emphasis>,&#32;<emphasis role="stringliteral">&apos;-c&apos;</emphasis>,&#32;<emphasis role="stringliteral">&apos;src.c&apos;</emphasis>])
00071 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__function_call_decls_8cpp_1ae1a3968e7947464bee7714f6d43b7002">test</link>([<emphasis role="stringliteral">&apos;src.C&apos;</emphasis>],&#32;[<emphasis role="stringliteral">&apos;clang&apos;</emphasis>,&#32;<emphasis role="stringliteral">&apos;-x&apos;</emphasis>,&#32;<emphasis role="stringliteral">&apos;c&apos;</emphasis>,&#32;<emphasis role="stringliteral">&apos;src.C&apos;</emphasis>])
00072 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__function_call_decls_8cpp_1ae1a3968e7947464bee7714f6d43b7002">test</link>([<emphasis role="stringliteral">&apos;src.cpp&apos;</emphasis>],&#32;[<emphasis role="stringliteral">&apos;clang++&apos;</emphasis>,&#32;<emphasis role="stringliteral">&apos;-c&apos;</emphasis>,&#32;<emphasis role="stringliteral">&apos;src.cpp&apos;</emphasis>])
00073 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__function_call_decls_8cpp_1ae1a3968e7947464bee7714f6d43b7002">test</link>([<emphasis role="stringliteral">&apos;s1.c&apos;</emphasis>,&#32;<emphasis role="stringliteral">&apos;s2.c&apos;</emphasis>],&#32;[<emphasis role="stringliteral">&apos;clang&apos;</emphasis>,&#32;<emphasis role="stringliteral">&apos;-c&apos;</emphasis>,&#32;<emphasis role="stringliteral">&apos;s1.c&apos;</emphasis>,&#32;<emphasis role="stringliteral">&apos;s2.c&apos;</emphasis>])
00074 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__function_call_decls_8cpp_1ae1a3968e7947464bee7714f6d43b7002">test</link>([<emphasis role="stringliteral">&apos;s1.c&apos;</emphasis>,&#32;<emphasis role="stringliteral">&apos;s2.c&apos;</emphasis>],&#32;[<emphasis role="stringliteral">&apos;cc&apos;</emphasis>,&#32;<emphasis role="stringliteral">&apos;s1.c&apos;</emphasis>,&#32;<emphasis role="stringliteral">&apos;s2.c&apos;</emphasis>,&#32;<emphasis role="stringliteral">&apos;-ldep&apos;</emphasis>,&#32;<emphasis role="stringliteral">&apos;-o&apos;</emphasis>,&#32;<emphasis role="stringliteral">&apos;a.out&apos;</emphasis>])
00075 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__function_call_decls_8cpp_1ae1a3968e7947464bee7714f6d43b7002">test</link>([<emphasis role="stringliteral">&apos;src.c&apos;</emphasis>],&#32;[<emphasis role="stringliteral">&apos;clang&apos;</emphasis>,&#32;<emphasis role="stringliteral">&apos;-c&apos;</emphasis>,&#32;<emphasis role="stringliteral">&apos;-I&apos;</emphasis>,&#32;<emphasis role="stringliteral">&apos;./include&apos;</emphasis>,&#32;<emphasis role="stringliteral">&apos;src.c&apos;</emphasis>])
00076 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__function_call_decls_8cpp_1ae1a3968e7947464bee7714f6d43b7002">test</link>([<emphasis role="stringliteral">&apos;src.c&apos;</emphasis>],&#32;[<emphasis role="stringliteral">&apos;clang&apos;</emphasis>,&#32;<emphasis role="stringliteral">&apos;-c&apos;</emphasis>,&#32;<emphasis role="stringliteral">&apos;-I&apos;</emphasis>,&#32;<emphasis role="stringliteral">&apos;/opt/me/include&apos;</emphasis>,&#32;<emphasis role="stringliteral">&apos;src.c&apos;</emphasis>])
00077 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__function_call_decls_8cpp_1ae1a3968e7947464bee7714f6d43b7002">test</link>([<emphasis role="stringliteral">&apos;src.c&apos;</emphasis>],&#32;[<emphasis role="stringliteral">&apos;clang&apos;</emphasis>,&#32;<emphasis role="stringliteral">&apos;-c&apos;</emphasis>,&#32;<emphasis role="stringliteral">&apos;-D&apos;</emphasis>,&#32;<emphasis role="stringliteral">&apos;config=file.c&apos;</emphasis>,&#32;<emphasis role="stringliteral">&apos;src.c&apos;</emphasis>])
00078 
00079 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;self.assertIsNone(
00080 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sut.split_command([<emphasis role="stringliteral">&apos;cc&apos;</emphasis>,&#32;<emphasis role="stringliteral">&apos;this.o&apos;</emphasis>,&#32;<emphasis role="stringliteral">&apos;that.o&apos;</emphasis>,&#32;<emphasis role="stringliteral">&apos;-o&apos;</emphasis>,&#32;<emphasis role="stringliteral">&apos;a.out&apos;</emphasis>]))
00081 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;self.assertIsNone(
00082 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sut.split_command([<emphasis role="stringliteral">&apos;cc&apos;</emphasis>,&#32;<emphasis role="stringliteral">&apos;this.o&apos;</emphasis>,&#32;<emphasis role="stringliteral">&apos;-lthat&apos;</emphasis>,&#32;<emphasis role="stringliteral">&apos;-o&apos;</emphasis>,&#32;<emphasis role="stringliteral">&apos;a.out&apos;</emphasis>]))
00083 
</programlisting><para>
References <link linkend="__function_call_decls_8cpp_source_1l00003">test()</link>.</para>
</section>
<para>
The documentation for this class was generated from the following file:</para>
/Users/maximilian/clang-llvm/clang/tools/scan-build-py/tests/unit/<link linkend="_test__compilation_8py">test_compilation.py</link></section>
</section>
