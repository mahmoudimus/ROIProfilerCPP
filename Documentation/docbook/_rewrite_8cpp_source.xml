<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="__rewrite_8cpp_source" xml:lang="en-US">
<title>Rewrite.cpp</title>
<indexterm><primary>/Users/maximilian/clang-llvm/clang/tools/libclang/Rewrite.cpp</primary></indexterm>
<programlisting>00001 <emphasis role="comment">//===-&#32;Rewrite.cpp&#32;--------------------------------------------------------===//</emphasis>
00002 <emphasis role="comment">//</emphasis>
00003 <emphasis role="comment">//&#32;Part&#32;of&#32;the&#32;LLVM&#32;Project,&#32;under&#32;the&#32;Apache&#32;License&#32;v2.0&#32;with&#32;LLVM&#32;Exceptions.</emphasis>
00004 <emphasis role="comment">//&#32;See&#32;https://llvm.org/LICENSE.txt&#32;for&#32;license&#32;information.</emphasis>
00005 <emphasis role="comment">//&#32;SPDX-License-Identifier:&#32;Apache-2.0&#32;WITH&#32;LLVM-exception</emphasis>
00006 <emphasis role="comment">//</emphasis>
00007 <emphasis role="comment">//===----------------------------------------------------------------------===//</emphasis>
00008 
00009 <emphasis role="preprocessor">#include&#32;&quot;clang-c/Rewrite.h&quot;</emphasis>
00010 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="__c_x_source_location_8h">CXSourceLocation.h</link>&quot;</emphasis>
00011 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="__c_x_translation_unit_8h">CXTranslationUnit.h</link>&quot;</emphasis>
00012 <emphasis role="preprocessor">#include&#32;&quot;clang/Basic/SourceManager.h&quot;</emphasis>
00013 <emphasis role="preprocessor">#include&#32;&quot;clang/Frontend/ASTUnit.h&quot;</emphasis>
00014 <emphasis role="preprocessor">#include&#32;&quot;clang/Rewrite/Core/Rewriter.h&quot;</emphasis>
00015 
<anchor xml:id="__rewrite_8cpp_source_1l00016"/><link linkend="__rewrite_8cpp_1a8cb11432d44a1976b464ad2b46e4cae4">00016</link> CXRewriter&#32;<link linkend="__rewrite_8cpp_1a8cb11432d44a1976b464ad2b46e4cae4">clang_CXRewriter_create</link>(CXTranslationUnit&#32;TU)&#32;{
00017 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(clang::cxtu::isNotUsableTU(TU))&#32;{
00018 &#32;&#32;&#32;&#32;<link linkend="__c_x_translation_unit_8h_1a4ec17e6e03ea0baf73e27802eae36106">LOG_BAD_TU</link>(TU);
00019 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{};
00020 &#32;&#32;}
00021 &#32;&#32;clang::ASTUnit&#32;*AU&#32;=&#32;clang::cxtu::getASTUnit(TU);
00022 &#32;&#32;assert(AU);
00023 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">reinterpret_cast&lt;</emphasis>CXRewriter<emphasis role="keyword">&gt;</emphasis>(
00024 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">new</emphasis>&#32;clang::Rewriter(AU-&gt;getSourceManager(),&#32;AU-&gt;getLangOpts()));
00025 }
00026 
<anchor xml:id="__rewrite_8cpp_source_1l00027"/><link linkend="__rewrite_8cpp_1a3faba2a366e9e55647e55a7a4bfa5fa6">00027</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="__rewrite_8cpp_1a3faba2a366e9e55647e55a7a4bfa5fa6">clang_CXRewriter_insertTextBefore</link>(CXRewriter&#32;Rew,&#32;CXSourceLocation&#32;Loc,
00028 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*Insert)&#32;{
00029 &#32;&#32;assert(Rew);
00030 &#32;&#32;clang::Rewriter&#32;&amp;R&#32;=&#32;*<emphasis role="keyword">reinterpret_cast&lt;</emphasis>clang::Rewriter&#32;*<emphasis role="keyword">&gt;</emphasis>(Rew);
00031 &#32;&#32;R.InsertTextBefore(clang::cxloc::translateSourceLocation(Loc),&#32;Insert);
00032 }
00033 
<anchor xml:id="__rewrite_8cpp_source_1l00034"/><link linkend="__rewrite_8cpp_1aaf2ed4bc46f8a7f1308dc554d3adddf4">00034</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="__rewrite_8cpp_1aaf2ed4bc46f8a7f1308dc554d3adddf4">clang_CXRewriter_replaceText</link>(CXRewriter&#32;Rew,&#32;CXSourceRange&#32;ToBeReplaced,
00035 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*Replacement)&#32;{
00036 &#32;&#32;assert(Rew);
00037 &#32;&#32;clang::Rewriter&#32;&amp;R&#32;=&#32;*<emphasis role="keyword">reinterpret_cast&lt;</emphasis>clang::Rewriter&#32;*<emphasis role="keyword">&gt;</emphasis>(Rew);
00038 &#32;&#32;R.ReplaceText(<link linkend="_namespaceclang_1_1cxloc_1aa8c3cee435c88a9e8a61f79cc8a0c0da">clang::cxloc::translateCXRangeToCharRange</link>(ToBeReplaced),
00039 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Replacement);
00040 }
00041 
<anchor xml:id="__rewrite_8cpp_source_1l00042"/><link linkend="__rewrite_8cpp_1aa070032b429b0d61ab5a4940822d4f37">00042</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="__rewrite_8cpp_1aa070032b429b0d61ab5a4940822d4f37">clang_CXRewriter_removeText</link>(CXRewriter&#32;Rew,&#32;CXSourceRange&#32;ToBeRemoved)&#32;{
00043 &#32;&#32;assert(Rew);
00044 &#32;&#32;clang::Rewriter&#32;&amp;R&#32;=&#32;*<emphasis role="keyword">reinterpret_cast&lt;</emphasis>clang::Rewriter&#32;*<emphasis role="keyword">&gt;</emphasis>(Rew);
00045 &#32;&#32;R.RemoveText(<link linkend="_namespaceclang_1_1cxloc_1aa8c3cee435c88a9e8a61f79cc8a0c0da">clang::cxloc::translateCXRangeToCharRange</link>(ToBeRemoved));
00046 }
00047 
<anchor xml:id="__rewrite_8cpp_source_1l00048"/><link linkend="__rewrite_8cpp_1a6e85bb2b3b72a6ba4b4371502fd21060">00048</link> <emphasis role="keywordtype">int</emphasis>&#32;<link linkend="__rewrite_8cpp_1a6e85bb2b3b72a6ba4b4371502fd21060">clang_CXRewriter_overwriteChangedFiles</link>(CXRewriter&#32;Rew)&#32;{
00049 &#32;&#32;assert(Rew);
00050 &#32;&#32;clang::Rewriter&#32;&amp;R&#32;=&#32;*<emphasis role="keyword">reinterpret_cast&lt;</emphasis>clang::Rewriter&#32;*<emphasis role="keyword">&gt;</emphasis>(Rew);
00051 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;R.overwriteChangedFiles();
00052 }
00053 
<anchor xml:id="__rewrite_8cpp_source_1l00054"/><link linkend="__rewrite_8cpp_1ac7577e0b1ce139d370923eaef5ce50d4">00054</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="__rewrite_8cpp_1ac7577e0b1ce139d370923eaef5ce50d4">clang_CXRewriter_writeMainFileToStdOut</link>(CXRewriter&#32;Rew)&#32;{
00055 &#32;&#32;assert(Rew);
00056 &#32;&#32;clang::Rewriter&#32;&amp;R&#32;=&#32;*<emphasis role="keyword">reinterpret_cast&lt;</emphasis>clang::Rewriter&#32;*<emphasis role="keyword">&gt;</emphasis>(Rew);
00057 &#32;&#32;R.getEditBuffer(R.getSourceMgr().getMainFileID()).write(llvm::outs());
00058 }
00059 
<anchor xml:id="__rewrite_8cpp_source_1l00060"/><link linkend="__rewrite_8cpp_1a8cb2800b504e554267b5fb9a459deb86">00060</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="__rewrite_8cpp_1a8cb2800b504e554267b5fb9a459deb86">clang_CXRewriter_dispose</link>(CXRewriter&#32;Rew)&#32;{
00061 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(Rew)
00062 &#32;&#32;&#32;&#32;<emphasis role="keyword">delete</emphasis>&#32;<emphasis role="keyword">reinterpret_cast&lt;</emphasis>clang::Rewriter&#32;*<emphasis role="keyword">&gt;</emphasis>(Rew);
00063 }
</programlisting></section>
