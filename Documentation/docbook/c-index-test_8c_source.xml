<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_c-index-test_8c_source" xml:lang="en-US">
<title>c-index-test.c</title>
<indexterm><primary>/Users/maximilian/clang-llvm/clang/tools/c-index-test/c-index-test.c</primary></indexterm>
<programlisting>00001 <emphasis role="comment">/*&#32;c-index-test.c&#32;*/</emphasis>
00002 
00003 <emphasis role="preprocessor">#include&#32;&quot;clang/Config/config.h&quot;</emphasis>
00004 <emphasis role="preprocessor">#include&#32;&quot;clang-c/Index.h&quot;</emphasis>
00005 <emphasis role="preprocessor">#include&#32;&quot;clang-c/CXCompilationDatabase.h&quot;</emphasis>
00006 <emphasis role="preprocessor">#include&#32;&quot;clang-c/BuildSystem.h&quot;</emphasis>
00007 <emphasis role="preprocessor">#include&#32;&quot;clang-c/Documentation.h&quot;</emphasis>
00008 <emphasis role="preprocessor">#include&#32;&lt;ctype.h&gt;</emphasis>
00009 <emphasis role="preprocessor">#include&#32;&lt;stdlib.h&gt;</emphasis>
00010 <emphasis role="preprocessor">#include&#32;&lt;stdio.h&gt;</emphasis>
00011 <emphasis role="preprocessor">#include&#32;&lt;string.h&gt;</emphasis>
00012 <emphasis role="preprocessor">#include&#32;&lt;assert.h&gt;</emphasis>
00013 
00014 <emphasis role="preprocessor">#ifdef&#32;CLANG_HAVE_LIBXML</emphasis>
00015 <emphasis role="preprocessor">#include&#32;&lt;libxml/parser.h&gt;</emphasis>
00016 <emphasis role="preprocessor">#include&#32;&lt;libxml/relaxng.h&gt;</emphasis>
00017 <emphasis role="preprocessor">#include&#32;&lt;libxml/xmlerror.h&gt;</emphasis>
00018 <emphasis role="preprocessor">#endif</emphasis>
00019 
00020 <emphasis role="preprocessor">#ifdef&#32;_WIN32</emphasis>
00021 <emphasis role="preprocessor">#&#32;&#32;include&#32;&lt;direct.h&gt;</emphasis>
00022 <emphasis role="preprocessor">#else</emphasis>
00023 <emphasis role="preprocessor">#&#32;&#32;include&#32;&lt;unistd.h&gt;</emphasis>
00024 <emphasis role="preprocessor">#endif</emphasis>
00025 
00026 <emphasis role="keyword">extern</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_c-index-test_8c_1a246a1675ed106163b7d4f141406d3005">indextest_core_main</link>(<emphasis role="keywordtype">int</emphasis>&#32;argc,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;**argv);
00027 <emphasis role="keyword">extern</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_c-index-test_8c_1abf8b8cca4d3659c057fd2ab49afb69be">indextest_perform_shell_execution</link>(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*command_line);
00028 
00029 <emphasis role="comment">/******************************************************************************/</emphasis>
00030 <emphasis role="comment">/*&#32;Utility&#32;functions.&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*/</emphasis>
00031 <emphasis role="comment">/******************************************************************************/</emphasis>
00032 
00033 <emphasis role="preprocessor">#ifdef&#32;_MSC_VER</emphasis>
00034 <emphasis role="keywordtype">char</emphasis>&#32;*<link linkend="_c-index-test_8c_1a8c42f4a0046f13eff609604e4e6dd88a">basename</link>(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;path)
00035 {
00036 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">char</emphasis>*&#32;base1&#32;=&#32;(<emphasis role="keywordtype">char</emphasis>*)strrchr(path,&#32;<emphasis role="charliteral">&apos;/&apos;</emphasis>);
00037 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">char</emphasis>*&#32;base2&#32;=&#32;(<emphasis role="keywordtype">char</emphasis>*)strrchr(path,&#32;<emphasis role="charliteral">&apos;\\&apos;</emphasis>);
00038 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(base1&#32;&amp;&amp;&#32;base2)
00039 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>((base1&#32;&gt;&#32;base2)&#32;?&#32;base1&#32;+&#32;1&#32;:&#32;base2&#32;+&#32;1);
00040 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(base1)
00041 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>(base1&#32;+&#32;1);
00042 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(base2)
00043 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>(base2&#32;+&#32;1);
00044 
00045 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>((<emphasis role="keywordtype">char</emphasis>*)path);
00046 }
00047 <emphasis role="keywordtype">char</emphasis>&#32;*<link linkend="_c-index-test_8c_1abdf3701655fccfd6ebb29a597d66f371">dirname</link>(<emphasis role="keywordtype">char</emphasis>*&#32;path)
00048 {
00049 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">char</emphasis>*&#32;base1&#32;=&#32;(<emphasis role="keywordtype">char</emphasis>*)strrchr(path,&#32;<emphasis role="charliteral">&apos;/&apos;</emphasis>);
00050 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">char</emphasis>*&#32;base2&#32;=&#32;(<emphasis role="keywordtype">char</emphasis>*)strrchr(path,&#32;<emphasis role="charliteral">&apos;\\&apos;</emphasis>);
00051 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(base1&#32;&amp;&amp;&#32;base2)
00052 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(base1&#32;&gt;&#32;base2)
00053 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*base1&#32;=&#32;0;
00054 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
00055 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*base2&#32;=&#32;0;
00056 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(base1)
00057 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*base1&#32;=&#32;0;
00058 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(base2)
00059 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*base2&#32;=&#32;0;
00060 
00061 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;path;
00062 }
00063 <emphasis role="preprocessor">#else</emphasis>
<anchor xml:id="_c-index-test_8c_source_1l00064"/><link linkend="_c-index-test_8c_1a8c42f4a0046f13eff609604e4e6dd88a">00064</link> <emphasis role="keyword">extern</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*<link linkend="_c-index-test_8c_1a8c42f4a0046f13eff609604e4e6dd88a">basename</link>(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*);
<anchor xml:id="_c-index-test_8c_source_1l00065"/><link linkend="_c-index-test_8c_1abdf3701655fccfd6ebb29a597d66f371">00065</link> <emphasis role="keyword">extern</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*<link linkend="_c-index-test_8c_1abdf3701655fccfd6ebb29a597d66f371">dirname</link>(<emphasis role="keywordtype">char</emphasis>&#32;*);
00066 <emphasis role="preprocessor">#endif</emphasis>
00067 
00069 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;getDefaultParsingOptions()&#32;{
00070 &#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<link linkend="_namespaceoptions">options</link>&#32;=&#32;CXTranslationUnit_DetailedPreprocessingRecord;
00071 
00072 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(getenv(<emphasis role="stringliteral">&quot;CINDEXTEST_EDITING&quot;</emphasis>))
00073 &#32;&#32;&#32;&#32;<link linkend="_namespaceoptions">options</link>&#32;|=&#32;<link linkend="__c_index_8cpp_1a9d5c8fae100ea9327d269f44d23da9b3">clang_defaultEditingTranslationUnitOptions</link>();
00074 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(getenv(<emphasis role="stringliteral">&quot;CINDEXTEST_COMPLETION_CACHING&quot;</emphasis>))
00075 &#32;&#32;&#32;&#32;<link linkend="_namespaceoptions">options</link>&#32;|=&#32;CXTranslationUnit_CacheCompletionResults;
00076 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(getenv(<emphasis role="stringliteral">&quot;CINDEXTEST_COMPLETION_NO_CACHING&quot;</emphasis>))
00077 &#32;&#32;&#32;&#32;<link linkend="_namespaceoptions">options</link>&#32;&amp;=&#32;~CXTranslationUnit_CacheCompletionResults;
00078 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(getenv(<emphasis role="stringliteral">&quot;CINDEXTEST_SKIP_FUNCTION_BODIES&quot;</emphasis>))
00079 &#32;&#32;&#32;&#32;<link linkend="_namespaceoptions">options</link>&#32;|=&#32;CXTranslationUnit_SkipFunctionBodies;
00080 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(getenv(<emphasis role="stringliteral">&quot;CINDEXTEST_COMPLETION_BRIEF_COMMENTS&quot;</emphasis>))
00081 &#32;&#32;&#32;&#32;<link linkend="_namespaceoptions">options</link>&#32;|=&#32;CXTranslationUnit_IncludeBriefCommentsInCodeCompletion;
00082 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(getenv(<emphasis role="stringliteral">&quot;CINDEXTEST_CREATE_PREAMBLE_ON_FIRST_PARSE&quot;</emphasis>))
00083 &#32;&#32;&#32;&#32;<link linkend="_namespaceoptions">options</link>&#32;|=&#32;CXTranslationUnit_CreatePreambleOnFirstParse;
00084 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(getenv(<emphasis role="stringliteral">&quot;CINDEXTEST_KEEP_GOING&quot;</emphasis>))
00085 &#32;&#32;&#32;&#32;<link linkend="_namespaceoptions">options</link>&#32;|=&#32;CXTranslationUnit_KeepGoing;
00086 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(getenv(<emphasis role="stringliteral">&quot;CINDEXTEST_LIMIT_SKIP_FUNCTION_BODIES_TO_PREAMBLE&quot;</emphasis>))
00087 &#32;&#32;&#32;&#32;<link linkend="_namespaceoptions">options</link>&#32;|=&#32;CXTranslationUnit_LimitSkipFunctionBodiesToPreamble;
00088 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(getenv(<emphasis role="stringliteral">&quot;CINDEXTEST_INCLUDE_ATTRIBUTED_TYPES&quot;</emphasis>))
00089 &#32;&#32;&#32;&#32;<link linkend="_namespaceoptions">options</link>&#32;|=&#32;CXTranslationUnit_IncludeAttributedTypes;
00090 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(getenv(<emphasis role="stringliteral">&quot;CINDEXTEST_VISIT_IMPLICIT_ATTRIBUTES&quot;</emphasis>))
00091 &#32;&#32;&#32;&#32;<link linkend="_namespaceoptions">options</link>&#32;|=&#32;CXTranslationUnit_VisitImplicitAttributes;
00092 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(getenv(<emphasis role="stringliteral">&quot;CINDEXTEST_IGNORE_NONERRORS_FROM_INCLUDED_FILES&quot;</emphasis>))
00093 &#32;&#32;&#32;&#32;<link linkend="_namespaceoptions">options</link>&#32;|=&#32;CXTranslationUnit_IgnoreNonErrorsFromIncludedFiles;
00094 
00095 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceoptions">options</link>;
00096 }
00097 
00098 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;ModifyPrintingPolicyAccordingToEnv(CXPrintingPolicy&#32;Policy)&#32;{
00099 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>Mapping&#32;{
00100 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*name;
00101 &#32;&#32;&#32;&#32;<emphasis role="keyword">enum</emphasis>&#32;CXPrintingPolicyProperty&#32;property;
00102 &#32;&#32;};
00103 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>Mapping&#32;mappings[]&#32;=&#32;{
00104 &#32;&#32;&#32;&#32;&#32;&#32;{<emphasis role="stringliteral">&quot;CINDEXTEST_PRINTINGPOLICY_INDENTATION&quot;</emphasis>,&#32;CXPrintingPolicy_Indentation},
00105 &#32;&#32;&#32;&#32;&#32;&#32;{<emphasis role="stringliteral">&quot;CINDEXTEST_PRINTINGPOLICY_SUPPRESSSPECIFIERS&quot;</emphasis>,
00106 &#32;&#32;&#32;&#32;&#32;&#32;&#32;CXPrintingPolicy_SuppressSpecifiers},
00107 &#32;&#32;&#32;&#32;&#32;&#32;{<emphasis role="stringliteral">&quot;CINDEXTEST_PRINTINGPOLICY_SUPPRESSTAGKEYWORD&quot;</emphasis>,
00108 &#32;&#32;&#32;&#32;&#32;&#32;&#32;CXPrintingPolicy_SuppressTagKeyword},
00109 &#32;&#32;&#32;&#32;&#32;&#32;{<emphasis role="stringliteral">&quot;CINDEXTEST_PRINTINGPOLICY_INCLUDETAGDEFINITION&quot;</emphasis>,
00110 &#32;&#32;&#32;&#32;&#32;&#32;&#32;CXPrintingPolicy_IncludeTagDefinition},
00111 &#32;&#32;&#32;&#32;&#32;&#32;{<emphasis role="stringliteral">&quot;CINDEXTEST_PRINTINGPOLICY_SUPPRESSSCOPE&quot;</emphasis>,
00112 &#32;&#32;&#32;&#32;&#32;&#32;&#32;CXPrintingPolicy_SuppressScope},
00113 &#32;&#32;&#32;&#32;&#32;&#32;{<emphasis role="stringliteral">&quot;CINDEXTEST_PRINTINGPOLICY_SUPPRESSUNWRITTENSCOPE&quot;</emphasis>,
00114 &#32;&#32;&#32;&#32;&#32;&#32;&#32;CXPrintingPolicy_SuppressUnwrittenScope},
00115 &#32;&#32;&#32;&#32;&#32;&#32;{<emphasis role="stringliteral">&quot;CINDEXTEST_PRINTINGPOLICY_SUPPRESSINITIALIZERS&quot;</emphasis>,
00116 &#32;&#32;&#32;&#32;&#32;&#32;&#32;CXPrintingPolicy_SuppressInitializers},
00117 &#32;&#32;&#32;&#32;&#32;&#32;{<emphasis role="stringliteral">&quot;CINDEXTEST_PRINTINGPOLICY_CONSTANTARRAYSIZEASWRITTEN&quot;</emphasis>,
00118 &#32;&#32;&#32;&#32;&#32;&#32;&#32;CXPrintingPolicy_ConstantArraySizeAsWritten},
00119 &#32;&#32;&#32;&#32;&#32;&#32;{<emphasis role="stringliteral">&quot;CINDEXTEST_PRINTINGPOLICY_ANONYMOUSTAGLOCATIONS&quot;</emphasis>,
00120 &#32;&#32;&#32;&#32;&#32;&#32;&#32;CXPrintingPolicy_AnonymousTagLocations},
00121 &#32;&#32;&#32;&#32;&#32;&#32;{<emphasis role="stringliteral">&quot;CINDEXTEST_PRINTINGPOLICY_SUPPRESSSTRONGLIFETIME&quot;</emphasis>,
00122 &#32;&#32;&#32;&#32;&#32;&#32;&#32;CXPrintingPolicy_SuppressStrongLifetime},
00123 &#32;&#32;&#32;&#32;&#32;&#32;{<emphasis role="stringliteral">&quot;CINDEXTEST_PRINTINGPOLICY_SUPPRESSLIFETIMEQUALIFIERS&quot;</emphasis>,
00124 &#32;&#32;&#32;&#32;&#32;&#32;&#32;CXPrintingPolicy_SuppressLifetimeQualifiers},
00125 &#32;&#32;&#32;&#32;&#32;&#32;{<emphasis role="stringliteral">&quot;CINDEXTEST_PRINTINGPOLICY_SUPPRESSTEMPLATEARGSINCXXCONSTRUCTORS&quot;</emphasis>,
00126 &#32;&#32;&#32;&#32;&#32;&#32;&#32;CXPrintingPolicy_SuppressTemplateArgsInCXXConstructors},
00127 &#32;&#32;&#32;&#32;&#32;&#32;{<emphasis role="stringliteral">&quot;CINDEXTEST_PRINTINGPOLICY_BOOL&quot;</emphasis>,&#32;CXPrintingPolicy_Bool},
00128 &#32;&#32;&#32;&#32;&#32;&#32;{<emphasis role="stringliteral">&quot;CINDEXTEST_PRINTINGPOLICY_RESTRICT&quot;</emphasis>,&#32;CXPrintingPolicy_Restrict},
00129 &#32;&#32;&#32;&#32;&#32;&#32;{<emphasis role="stringliteral">&quot;CINDEXTEST_PRINTINGPOLICY_ALIGNOF&quot;</emphasis>,&#32;CXPrintingPolicy_Alignof},
00130 &#32;&#32;&#32;&#32;&#32;&#32;{<emphasis role="stringliteral">&quot;CINDEXTEST_PRINTINGPOLICY_UNDERSCOREALIGNOF&quot;</emphasis>,
00131 &#32;&#32;&#32;&#32;&#32;&#32;&#32;CXPrintingPolicy_UnderscoreAlignof},
00132 &#32;&#32;&#32;&#32;&#32;&#32;{<emphasis role="stringliteral">&quot;CINDEXTEST_PRINTINGPOLICY_USEVOIDFORZEROPARAMS&quot;</emphasis>,
00133 &#32;&#32;&#32;&#32;&#32;&#32;&#32;CXPrintingPolicy_UseVoidForZeroParams},
00134 &#32;&#32;&#32;&#32;&#32;&#32;{<emphasis role="stringliteral">&quot;CINDEXTEST_PRINTINGPOLICY_TERSEOUTPUT&quot;</emphasis>,&#32;CXPrintingPolicy_TerseOutput},
00135 &#32;&#32;&#32;&#32;&#32;&#32;{<emphasis role="stringliteral">&quot;CINDEXTEST_PRINTINGPOLICY_POLISHFORDECLARATION&quot;</emphasis>,
00136 &#32;&#32;&#32;&#32;&#32;&#32;&#32;CXPrintingPolicy_PolishForDeclaration},
00137 &#32;&#32;&#32;&#32;&#32;&#32;{<emphasis role="stringliteral">&quot;CINDEXTEST_PRINTINGPOLICY_HALF&quot;</emphasis>,&#32;CXPrintingPolicy_Half},
00138 &#32;&#32;&#32;&#32;&#32;&#32;{<emphasis role="stringliteral">&quot;CINDEXTEST_PRINTINGPOLICY_MSWCHAR&quot;</emphasis>,&#32;CXPrintingPolicy_MSWChar},
00139 &#32;&#32;&#32;&#32;&#32;&#32;{<emphasis role="stringliteral">&quot;CINDEXTEST_PRINTINGPOLICY_INCLUDENEWLINES&quot;</emphasis>,
00140 &#32;&#32;&#32;&#32;&#32;&#32;&#32;CXPrintingPolicy_IncludeNewlines},
00141 &#32;&#32;&#32;&#32;&#32;&#32;{<emphasis role="stringliteral">&quot;CINDEXTEST_PRINTINGPOLICY_MSVCFORMATTING&quot;</emphasis>,
00142 &#32;&#32;&#32;&#32;&#32;&#32;&#32;CXPrintingPolicy_MSVCFormatting},
00143 &#32;&#32;&#32;&#32;&#32;&#32;{<emphasis role="stringliteral">&quot;CINDEXTEST_PRINTINGPOLICY_CONSTANTSASWRITTEN&quot;</emphasis>,
00144 &#32;&#32;&#32;&#32;&#32;&#32;&#32;CXPrintingPolicy_ConstantsAsWritten},
00145 &#32;&#32;&#32;&#32;&#32;&#32;{<emphasis role="stringliteral">&quot;CINDEXTEST_PRINTINGPOLICY_SUPPRESSIMPLICITBASE&quot;</emphasis>,
00146 &#32;&#32;&#32;&#32;&#32;&#32;&#32;CXPrintingPolicy_SuppressImplicitBase},
00147 &#32;&#32;&#32;&#32;&#32;&#32;{<emphasis role="stringliteral">&quot;CINDEXTEST_PRINTINGPOLICY_FULLYQUALIFIEDNAME&quot;</emphasis>,
00148 &#32;&#32;&#32;&#32;&#32;&#32;&#32;CXPrintingPolicy_FullyQualifiedName},
00149 &#32;&#32;};
00150 
00151 &#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;i;
00152 &#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(i&#32;=&#32;0;&#32;i&#32;&lt;&#32;<emphasis role="keyword">sizeof</emphasis>(mappings)&#32;/&#32;<emphasis role="keyword">sizeof</emphasis>(<emphasis role="keyword">struct</emphasis>&#32;Mapping);&#32;i++)&#32;{
00153 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">char</emphasis>&#32;*<link linkend="_broken-one_8c_1a1978c72fde3abc53afc1a6d53ef29553">value</link>&#32;=&#32;getenv(mappings[i].name);
00154 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_broken-one_8c_1a1978c72fde3abc53afc1a6d53ef29553">value</link>)&#32;{
00155 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__c_index_8cpp_1a2f7497c4e8c46282bdf45b57d456a2a4">clang_PrintingPolicy_setProperty</link>(Policy,&#32;mappings[i].property,
00156 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(<emphasis role="keywordtype">unsigned</emphasis>)strtoul(<link linkend="_broken-one_8c_1a1978c72fde3abc53afc1a6d53ef29553">value</link>,&#32;0L,&#32;10));
00157 &#32;&#32;&#32;&#32;}
00158 &#32;&#32;}
00159 }
00160 
00162 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;checkForErrors(CXTranslationUnit&#32;TU);
00163 
00164 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;describeLibclangFailure(<emphasis role="keyword">enum</emphasis>&#32;CXErrorCode&#32;Err)&#32;{
00165 &#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(Err)&#32;{
00166 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXError_Success:
00167 &#32;&#32;&#32;&#32;fprintf(stderr,&#32;<emphasis role="stringliteral">&quot;Success\n&quot;</emphasis>);
00168 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
00169 
00170 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXError_Failure:
00171 &#32;&#32;&#32;&#32;fprintf(stderr,&#32;<emphasis role="stringliteral">&quot;Failure&#32;(no&#32;details&#32;available)\n&quot;</emphasis>);
00172 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
00173 
00174 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXError_Crashed:
00175 &#32;&#32;&#32;&#32;fprintf(stderr,&#32;<emphasis role="stringliteral">&quot;Failure:&#32;libclang&#32;crashed\n&quot;</emphasis>);
00176 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
00177 
00178 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXError_InvalidArguments:
00179 &#32;&#32;&#32;&#32;fprintf(stderr,&#32;<emphasis role="stringliteral">&quot;Failure:&#32;invalid&#32;arguments&#32;passed&#32;to&#32;a&#32;libclang&#32;routine\n&quot;</emphasis>);
00180 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
00181 
00182 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXError_ASTReadError:
00183 &#32;&#32;&#32;&#32;fprintf(stderr,&#32;<emphasis role="stringliteral">&quot;Failure:&#32;AST&#32;deserialization&#32;error&#32;occurred\n&quot;</emphasis>);
00184 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
00185 &#32;&#32;}
00186 }
00187 
00188 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;PrintExtent(FILE&#32;*out,&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;begin_line,&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;begin_column,
00189 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;end_line,&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;end_column)&#32;{
00190 &#32;&#32;fprintf(out,&#32;<emphasis role="stringliteral">&quot;[%d:%d&#32;-&#32;%d:%d]&quot;</emphasis>,&#32;begin_line,&#32;begin_column,
00191 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;end_line,&#32;end_column);
00192 }
00193 
00194 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;CreateTranslationUnit(CXIndex&#32;Idx,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*file,
00195 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;CXTranslationUnit&#32;*TU)&#32;{
00196 &#32;&#32;<emphasis role="keyword">enum</emphasis>&#32;CXErrorCode&#32;Err&#32;=&#32;<link linkend="__c_index_8cpp_1af1e8fe902a1fa65beb990cc7af6b7a2f">clang_createTranslationUnit2</link>(Idx,&#32;file,&#32;TU);
00197 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(Err&#32;!=&#32;CXError_Success)&#32;{
00198 &#32;&#32;&#32;&#32;fprintf(stderr,&#32;<emphasis role="stringliteral">&quot;Unable&#32;to&#32;load&#32;translation&#32;unit&#32;from&#32;&apos;%s&apos;!\n&quot;</emphasis>,&#32;file);
00199 &#32;&#32;&#32;&#32;describeLibclangFailure(Err);
00200 &#32;&#32;&#32;&#32;*TU&#32;=&#32;0;
00201 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
00202 &#32;&#32;}
00203 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;1;
00204 }
00205 
<anchor xml:id="_c-index-test_8c_source_1l00206"/><link linkend="_c-index-test_8c_1af28d9933e8a8fd14e8394a1e7f9f6379">00206</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_c-index-test_8c_1af28d9933e8a8fd14e8394a1e7f9f6379">free_remapped_files</link>(<emphasis role="keyword">struct</emphasis>&#32;CXUnsavedFile&#32;*unsaved_files,
00207 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;num_unsaved_files)&#32;{
00208 &#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;i;
00209 &#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(i&#32;=&#32;0;&#32;i&#32;!=&#32;num_unsaved_files;&#32;++i)&#32;{
00210 &#32;&#32;&#32;&#32;free((<emphasis role="keywordtype">char</emphasis>&#32;*)unsaved_files[i].Filename);
00211 &#32;&#32;&#32;&#32;free((<emphasis role="keywordtype">char</emphasis>&#32;*)unsaved_files[i].Contents);
00212 &#32;&#32;}
00213 &#32;&#32;free(unsaved_files);
00214 }
00215 
00216 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;parse_remapped_files_with_opt(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*opt_name,
00217 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;argc,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;**argv,
00218 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;start_arg,
00219 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">struct</emphasis>&#32;CXUnsavedFile&#32;**unsaved_files,
00220 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;*num_unsaved_files)&#32;{
00221 &#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;i;
00222 &#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;arg;
00223 &#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;prefix_len&#32;=&#32;strlen(opt_name);
00224 &#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;arg_indices[20];
00225 &#32;&#32;*unsaved_files&#32;=&#32;0;
00226 &#32;&#32;*num_unsaved_files&#32;=&#32;0;
00227 
00228 &#32;&#32;<emphasis role="comment">/*&#32;Count&#32;the&#32;number&#32;of&#32;remapped&#32;files.&#32;*/</emphasis>
00229 &#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(arg&#32;=&#32;start_arg;&#32;arg&#32;&lt;&#32;argc;&#32;++arg)&#32;{
00230 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(strncmp(argv[arg],&#32;opt_name,&#32;prefix_len))
00231 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">continue</emphasis>;
00232 
00233 &#32;&#32;&#32;&#32;assert(*num_unsaved_files&#32;&lt;&#32;(<emphasis role="keywordtype">int</emphasis>)(<emphasis role="keyword">sizeof</emphasis>(arg_indices)/<emphasis role="keyword">sizeof</emphasis>(<emphasis role="keywordtype">int</emphasis>)));
00234 &#32;&#32;&#32;&#32;arg_indices[*num_unsaved_files]&#32;=&#32;arg;
00235 &#32;&#32;&#32;&#32;++*num_unsaved_files;
00236 &#32;&#32;}
00237 
00238 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(*num_unsaved_files&#32;==&#32;0)
00239 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
00240 
00241 &#32;&#32;*unsaved_files
00242 &#32;&#32;&#32;&#32;=&#32;(<emphasis role="keyword">struct&#32;</emphasis>CXUnsavedFile&#32;*)malloc(<emphasis role="keyword">sizeof</emphasis>(<emphasis role="keyword">struct</emphasis>&#32;CXUnsavedFile)&#32;*
00243 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*num_unsaved_files);
00244 &#32;&#32;assert(*unsaved_files);
00245 &#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(i&#32;=&#32;0;&#32;i&#32;!=&#32;*num_unsaved_files;&#32;++i)&#32;{
00246 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>CXUnsavedFile&#32;*unsaved&#32;=&#32;*unsaved_files&#32;+&#32;i;
00247 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*arg_string&#32;=&#32;argv[arg_indices[i]]&#32;+&#32;prefix_len;
00248 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;filename_len;
00249 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">char</emphasis>&#32;*filename;
00250 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">char</emphasis>&#32;*contents;
00251 &#32;&#32;&#32;&#32;FILE&#32;*to_file;
00252 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*sep&#32;=&#32;strchr(arg_string,&#32;<emphasis role="charliteral">&apos;,&apos;</emphasis>);
00253 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!sep)&#32;{
00254 &#32;&#32;&#32;&#32;&#32;&#32;fprintf(stderr,
00255 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;error:&#32;%sfrom:to&#32;argument&#32;is&#32;missing&#32;comma\n&quot;</emphasis>,&#32;opt_name);
00256 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_c-index-test_8c_1af28d9933e8a8fd14e8394a1e7f9f6379">free_remapped_files</link>(*unsaved_files,&#32;i);
00257 &#32;&#32;&#32;&#32;&#32;&#32;*unsaved_files&#32;=&#32;0;
00258 &#32;&#32;&#32;&#32;&#32;&#32;*num_unsaved_files&#32;=&#32;0;
00259 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;-1;
00260 &#32;&#32;&#32;&#32;}
00261 
00262 &#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;Open&#32;the&#32;file&#32;that&#32;we&apos;re&#32;remapping&#32;to.&#32;*/</emphasis>
00263 &#32;&#32;&#32;&#32;to_file&#32;=&#32;fopen(sep&#32;+&#32;1,&#32;<emphasis role="stringliteral">&quot;rb&quot;</emphasis>);
00264 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!to_file)&#32;{
00265 &#32;&#32;&#32;&#32;&#32;&#32;fprintf(stderr,&#32;<emphasis role="stringliteral">&quot;error:&#32;cannot&#32;open&#32;file&#32;%s&#32;that&#32;we&#32;are&#32;remapping&#32;to\n&quot;</emphasis>,
00266 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sep&#32;+&#32;1);
00267 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_c-index-test_8c_1af28d9933e8a8fd14e8394a1e7f9f6379">free_remapped_files</link>(*unsaved_files,&#32;i);
00268 &#32;&#32;&#32;&#32;&#32;&#32;*unsaved_files&#32;=&#32;0;
00269 &#32;&#32;&#32;&#32;&#32;&#32;*num_unsaved_files&#32;=&#32;0;
00270 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;-1;
00271 &#32;&#32;&#32;&#32;}
00272 
00273 &#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;Determine&#32;the&#32;length&#32;of&#32;the&#32;file&#32;we&apos;re&#32;remapping&#32;to.&#32;*/</emphasis>
00274 &#32;&#32;&#32;&#32;fseek(to_file,&#32;0,&#32;SEEK_END);
00275 &#32;&#32;&#32;&#32;unsaved-&gt;Length&#32;=&#32;ftell(to_file);
00276 &#32;&#32;&#32;&#32;fseek(to_file,&#32;0,&#32;SEEK_SET);
00277 
00278 &#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;Read&#32;the&#32;contents&#32;of&#32;the&#32;file&#32;we&apos;re&#32;remapping&#32;to.&#32;*/</emphasis>
00279 &#32;&#32;&#32;&#32;contents&#32;=&#32;(<emphasis role="keywordtype">char</emphasis>&#32;*)malloc(unsaved-&gt;Length&#32;+&#32;1);
00280 &#32;&#32;&#32;&#32;assert(contents);
00281 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(fread(contents,&#32;1,&#32;unsaved-&gt;Length,&#32;to_file)&#32;!=&#32;unsaved-&gt;Length)&#32;{
00282 &#32;&#32;&#32;&#32;&#32;&#32;fprintf(stderr,&#32;<emphasis role="stringliteral">&quot;error:&#32;unexpected&#32;%s&#32;reading&#32;&apos;to&apos;&#32;file&#32;%s\n&quot;</emphasis>,
00283 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(feof(to_file)&#32;?&#32;<emphasis role="stringliteral">&quot;EOF&quot;</emphasis>&#32;:&#32;<emphasis role="stringliteral">&quot;error&quot;</emphasis>),&#32;sep&#32;+&#32;1);
00284 &#32;&#32;&#32;&#32;&#32;&#32;fclose(to_file);
00285 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_c-index-test_8c_1af28d9933e8a8fd14e8394a1e7f9f6379">free_remapped_files</link>(*unsaved_files,&#32;i);
00286 &#32;&#32;&#32;&#32;&#32;&#32;free(contents);
00287 &#32;&#32;&#32;&#32;&#32;&#32;*unsaved_files&#32;=&#32;0;
00288 &#32;&#32;&#32;&#32;&#32;&#32;*num_unsaved_files&#32;=&#32;0;
00289 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;-1;
00290 &#32;&#32;&#32;&#32;}
00291 &#32;&#32;&#32;&#32;contents[unsaved-&gt;Length]&#32;=&#32;0;
00292 &#32;&#32;&#32;&#32;unsaved-&gt;Contents&#32;=&#32;contents;
00293 
00294 &#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;Close&#32;the&#32;file.&#32;*/</emphasis>
00295 &#32;&#32;&#32;&#32;fclose(to_file);
00296 
00297 &#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;Copy&#32;the&#32;file&#32;name&#32;that&#32;we&apos;re&#32;remapping&#32;from.&#32;*/</emphasis>
00298 &#32;&#32;&#32;&#32;filename_len&#32;=&#32;sep&#32;-&#32;arg_string;
00299 &#32;&#32;&#32;&#32;filename&#32;=&#32;(<emphasis role="keywordtype">char</emphasis>&#32;*)malloc(filename_len&#32;+&#32;1);
00300 &#32;&#32;&#32;&#32;assert(filename);
00301 &#32;&#32;&#32;&#32;memcpy(filename,&#32;arg_string,&#32;filename_len);
00302 &#32;&#32;&#32;&#32;filename[filename_len]&#32;=&#32;0;
00303 &#32;&#32;&#32;&#32;unsaved-&gt;Filename&#32;=&#32;filename;
00304 &#32;&#32;}
00305 
00306 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
00307 }
00308 
00309 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;parse_remapped_files(<emphasis role="keywordtype">int</emphasis>&#32;argc,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;**argv,&#32;<emphasis role="keywordtype">int</emphasis>&#32;start_arg,
00310 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">struct</emphasis>&#32;CXUnsavedFile&#32;**unsaved_files,
00311 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;*num_unsaved_files)&#32;{
00312 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;parse_remapped_files_with_opt(<emphasis role="stringliteral">&quot;-remap-file=&quot;</emphasis>,&#32;argc,&#32;argv,&#32;start_arg,
00313 &#32;&#32;&#32;&#32;&#32;&#32;unsaved_files,&#32;num_unsaved_files);
00314 }
00315 
00316 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;parse_remapped_files_with_try(<emphasis role="keywordtype">int</emphasis>&#32;try_idx,
00317 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;argc,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;**argv,
00318 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;start_arg,
00319 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">struct</emphasis>&#32;CXUnsavedFile&#32;**unsaved_files,
00320 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;*num_unsaved_files)&#32;{
00321 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>CXUnsavedFile&#32;*unsaved_files_no_try_idx;
00322 &#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;num_unsaved_files_no_try_idx;
00323 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>CXUnsavedFile&#32;*unsaved_files_try_idx;
00324 &#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;num_unsaved_files_try_idx;
00325 &#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;ret;
00326 &#32;&#32;<emphasis role="keywordtype">char</emphasis>&#32;opt_name[32];
00327 
00328 &#32;&#32;ret&#32;=&#32;parse_remapped_files(argc,&#32;argv,&#32;start_arg,
00329 &#32;&#32;&#32;&#32;&#32;&#32;&amp;unsaved_files_no_try_idx,&#32;&amp;num_unsaved_files_no_try_idx);
00330 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(ret)
00331 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;ret;
00332 
00333 &#32;&#32;sprintf(opt_name,&#32;<emphasis role="stringliteral">&quot;-remap-file-%d=&quot;</emphasis>,&#32;try_idx);
00334 &#32;&#32;ret&#32;=&#32;parse_remapped_files_with_opt(opt_name,&#32;argc,&#32;argv,&#32;start_arg,
00335 &#32;&#32;&#32;&#32;&#32;&#32;&amp;unsaved_files_try_idx,&#32;&amp;num_unsaved_files_try_idx);
00336 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(ret)
00337 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;ret;
00338 
00339 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(num_unsaved_files_no_try_idx&#32;==&#32;0)&#32;{
00340 &#32;&#32;&#32;&#32;*unsaved_files&#32;=&#32;unsaved_files_try_idx;
00341 &#32;&#32;&#32;&#32;*num_unsaved_files&#32;=&#32;num_unsaved_files_try_idx;
00342 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
00343 &#32;&#32;}
00344 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(num_unsaved_files_try_idx&#32;==&#32;0)&#32;{
00345 &#32;&#32;&#32;&#32;*unsaved_files&#32;=&#32;unsaved_files_no_try_idx;
00346 &#32;&#32;&#32;&#32;*num_unsaved_files&#32;=&#32;num_unsaved_files_no_try_idx;
00347 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
00348 &#32;&#32;}
00349 
00350 &#32;&#32;*num_unsaved_files&#32;=&#32;num_unsaved_files_no_try_idx&#32;+&#32;num_unsaved_files_try_idx;
00351 &#32;&#32;*unsaved_files
00352 &#32;&#32;&#32;&#32;=&#32;(<emphasis role="keyword">struct&#32;</emphasis>CXUnsavedFile&#32;*)realloc(unsaved_files_no_try_idx,
00353 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">sizeof</emphasis>(<emphasis role="keyword">struct</emphasis>&#32;CXUnsavedFile)&#32;*
00354 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*num_unsaved_files);
00355 &#32;&#32;assert(*unsaved_files);
00356 &#32;&#32;memcpy(*unsaved_files&#32;+&#32;num_unsaved_files_no_try_idx,
00357 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;unsaved_files_try_idx,&#32;<emphasis role="keyword">sizeof</emphasis>(<emphasis role="keyword">struct</emphasis>&#32;CXUnsavedFile)&#32;*
00358 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;num_unsaved_files_try_idx);
00359 &#32;&#32;free(unsaved_files_try_idx);
00360 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
00361 }
00362 
00363 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*parse_comments_schema(<emphasis role="keywordtype">int</emphasis>&#32;argc,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;**argv)&#32;{
00364 &#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*CommentsSchemaArg&#32;=&#32;<emphasis role="stringliteral">&quot;-comments-xml-schema=&quot;</emphasis>;
00365 &#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*CommentSchemaFile&#32;=&#32;NULL;
00366 
00367 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(argc&#32;==&#32;0)
00368 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;CommentSchemaFile;
00369 
00370 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!strncmp(argv[0],&#32;CommentsSchemaArg,&#32;strlen(CommentsSchemaArg)))
00371 &#32;&#32;&#32;&#32;CommentSchemaFile&#32;=&#32;argv[0]&#32;+&#32;strlen(CommentsSchemaArg);
00372 
00373 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;CommentSchemaFile;
00374 }
00375 
00376 <emphasis role="comment">/******************************************************************************/</emphasis>
00377 <emphasis role="comment">/*&#32;Pretty-printing.&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*/</emphasis>
00378 <emphasis role="comment">/******************************************************************************/</emphasis>
00379 
00380 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*FileCheckPrefix&#32;=&#32;<emphasis role="stringliteral">&quot;CHECK&quot;</emphasis>;
00381 
00382 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;PrintCString(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*CStr)&#32;{
00383 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(CStr&#32;!=&#32;NULL&#32;&amp;&amp;&#32;CStr[0]&#32;!=&#32;<emphasis role="charliteral">&apos;\0&apos;</emphasis>)&#32;{
00384 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(&#32;;&#32;*CStr;&#32;++CStr)&#32;{
00385 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;C&#32;=&#32;*CStr;
00386 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(C)&#32;{
00387 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<emphasis role="charliteral">&apos;\n&apos;</emphasis>:&#32;printf(<emphasis role="stringliteral">&quot;\\n&quot;</emphasis>);&#32;<emphasis role="keywordflow">break</emphasis>;
00388 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<emphasis role="charliteral">&apos;\r&apos;</emphasis>:&#32;printf(<emphasis role="stringliteral">&quot;\\r&quot;</emphasis>);&#32;<emphasis role="keywordflow">break</emphasis>;
00389 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<emphasis role="charliteral">&apos;\t&apos;</emphasis>:&#32;printf(<emphasis role="stringliteral">&quot;\\t&quot;</emphasis>);&#32;<emphasis role="keywordflow">break</emphasis>;
00390 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<emphasis role="charliteral">&apos;\v&apos;</emphasis>:&#32;printf(<emphasis role="stringliteral">&quot;\\v&quot;</emphasis>);&#32;<emphasis role="keywordflow">break</emphasis>;
00391 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<emphasis role="charliteral">&apos;\f&apos;</emphasis>:&#32;printf(<emphasis role="stringliteral">&quot;\\f&quot;</emphasis>);&#32;<emphasis role="keywordflow">break</emphasis>;
00392 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">default</emphasis>:&#32;&#32;&#32;putchar(C);&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
00393 &#32;&#32;&#32;&#32;&#32;&#32;}
00394 &#32;&#32;&#32;&#32;}
00395 &#32;&#32;}
00396 }
00397 
00398 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;PrintCStringWithPrefix(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*Prefix,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*CStr)&#32;{
00399 &#32;&#32;printf(<emphasis role="stringliteral">&quot;&#32;%s=[&quot;</emphasis>,&#32;Prefix);
00400 &#32;&#32;PrintCString(CStr);
00401 &#32;&#32;printf(<emphasis role="stringliteral">&quot;]&quot;</emphasis>);
00402 }
00403 
00404 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;PrintCXStringAndDispose(CXString&#32;Str)&#32;{
00405 &#32;&#32;PrintCString(<link linkend="__c_x_string_8cpp_1acd478c1b1785e17c0fe377bd70a2195f">clang_getCString</link>(Str));
00406 &#32;&#32;<link linkend="__c_x_string_8cpp_1a46c85f1255580ed186aa6f7380a06883">clang_disposeString</link>(Str);
00407 }
00408 
00409 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;PrintCXStringWithPrefix(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*Prefix,&#32;CXString&#32;Str)&#32;{
00410 &#32;&#32;PrintCStringWithPrefix(Prefix,&#32;<link linkend="__c_x_string_8cpp_1acd478c1b1785e17c0fe377bd70a2195f">clang_getCString</link>(Str));
00411 }
00412 
00413 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;PrintCXStringWithPrefixAndDispose(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*Prefix,
00414 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;CXString&#32;Str)&#32;{
00415 &#32;&#32;PrintCStringWithPrefix(Prefix,&#32;<link linkend="__c_x_string_8cpp_1acd478c1b1785e17c0fe377bd70a2195f">clang_getCString</link>(Str));
00416 &#32;&#32;<link linkend="__c_x_string_8cpp_1a46c85f1255580ed186aa6f7380a06883">clang_disposeString</link>(Str);
00417 }
00418 
00419 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;PrintRange(CXSourceRange&#32;R,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*str)&#32;{
00420 &#32;&#32;CXFile&#32;begin_file,&#32;end_file;
00421 &#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;begin_line,&#32;begin_column,&#32;end_line,&#32;end_column;
00422 
00423 &#32;&#32;<link linkend="__c_x_source_location_8cpp_1ae2d805527135aac587ca5c8017bde0ef">clang_getSpellingLocation</link>(<link linkend="__c_x_source_location_8cpp_1a14a10dd8d9a4069c4fc1a7be62f58874">clang_getRangeStart</link>(R),
00424 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;begin_file,&#32;&amp;begin_line,&#32;&amp;begin_column,&#32;0);
00425 &#32;&#32;<link linkend="__c_x_source_location_8cpp_1ae2d805527135aac587ca5c8017bde0ef">clang_getSpellingLocation</link>(<link linkend="__c_x_source_location_8cpp_1a146c4bda0251ee320dc6e4b1b3fbb919">clang_getRangeEnd</link>(R),
00426 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;end_file,&#32;&amp;end_line,&#32;&amp;end_column,&#32;0);
00427 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!begin_file&#32;||&#32;!end_file)
00428 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
00429 
00430 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(str)
00431 &#32;&#32;&#32;&#32;printf(<emphasis role="stringliteral">&quot;&#32;%s=&quot;</emphasis>,&#32;str);
00432 &#32;&#32;PrintExtent(stdout,&#32;begin_line,&#32;begin_column,&#32;end_line,&#32;end_column);
00433 }
00434 
<anchor xml:id="_c-index-test_8c_source_1l00435"/><link linkend="_c-index-test_8c_1a18c0cbeece6bcb1c64d7463ce253ff50">00435</link> <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">enum</emphasis>&#32;<link linkend="_c-index-test_8c_1a18c0cbeece6bcb1c64d7463ce253ff50">DisplayType</link>&#32;{
<anchor xml:id="_c-index-test_8c_source_1l00436"/><link linkend="_c-index-test_8c_1a18c0cbeece6bcb1c64d7463ce253ff50a9f5f9b93a4060a3cddd7f015277c0c8e">00436</link> &#32;&#32;&#32;&#32;<link linkend="_c-index-test_8c_1a18c0cbeece6bcb1c64d7463ce253ff50a9f5f9b93a4060a3cddd7f015277c0c8e">DisplayType_Spelling</link>,
<anchor xml:id="_c-index-test_8c_source_1l00437"/><link linkend="_c-index-test_8c_1a18c0cbeece6bcb1c64d7463ce253ff50a49959c0ca74d6b4e0570bc1d5affeffc">00437</link> &#32;&#32;&#32;&#32;<link linkend="_c-index-test_8c_1a18c0cbeece6bcb1c64d7463ce253ff50a49959c0ca74d6b4e0570bc1d5affeffc">DisplayType_DisplayName</link>,
00438 &#32;&#32;&#32;&#32;<link linkend="_c-index-test_8c_1a18c0cbeece6bcb1c64d7463ce253ff50a5960c8f71e87439216a25cee44967d6f">DisplayType_Pretty</link>
<anchor xml:id="_c-index-test_8c_source_1l00439"/><link linkend="_c-index-test_8c_1a18c0cbeece6bcb1c64d7463ce253ff50a5960c8f71e87439216a25cee44967d6f">00439</link> }&#32;wanted_display_type&#32;=&#32;<link linkend="_c-index-test_8c_1a18c0cbeece6bcb1c64d7463ce253ff50a9f5f9b93a4060a3cddd7f015277c0c8e">DisplayType_Spelling</link>;
00440 
00441 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;printVersion(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*Prefix,&#32;CXVersion&#32;Version)&#32;{
00442 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(Version.Major&#32;&lt;&#32;0)
00443 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
00444 &#32;&#32;printf(<emphasis role="stringliteral">&quot;%s%d&quot;</emphasis>,&#32;Prefix,&#32;Version.Major);
00445 &#32;&#32;
00446 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(Version.Minor&#32;&lt;&#32;0)
00447 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
00448 &#32;&#32;printf(<emphasis role="stringliteral">&quot;.%d&quot;</emphasis>,&#32;Version.Minor);
00449 
00450 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(Version.Subminor&#32;&lt;&#32;0)
00451 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
00452 &#32;&#32;printf(<emphasis role="stringliteral">&quot;.%d&quot;</emphasis>,&#32;Version.Subminor);
00453 }
00454 
<anchor xml:id="_c-index-test_8c_source_1l00455"/><link linkend="_struct_comment_a_s_t_dumping_context">00455</link> <emphasis role="keyword">struct&#32;</emphasis><link linkend="_struct_comment_a_s_t_dumping_context">CommentASTDumpingContext</link>&#32;{
<anchor xml:id="_c-index-test_8c_source_1l00456"/><link linkend="_struct_comment_a_s_t_dumping_context_1a96a3e251fc613062d60fb1ba58320abd">00456</link> &#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_struct_comment_a_s_t_dumping_context_1a96a3e251fc613062d60fb1ba58320abd">IndentLevel</link>;
00457 };
00458 
00459 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;DumpCXCommentInternal(<emphasis role="keyword">struct</emphasis>&#32;<link linkend="_struct_comment_a_s_t_dumping_context">CommentASTDumpingContext</link>&#32;*Ctx,
00460 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;CXComment&#32;Comment)&#32;{
00461 &#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;i;
00462 &#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;e;
00463 &#32;&#32;<emphasis role="keyword">enum</emphasis>&#32;CXCommentKind&#32;Kind&#32;=&#32;<link linkend="__c_x_comment_8cpp_1a38c8a63eb2af838b36cb67b0944345cf">clang_Comment_getKind</link>(Comment);
00464 
00465 &#32;&#32;Ctx-&gt;<link linkend="_struct_comment_a_s_t_dumping_context_1a96a3e251fc613062d60fb1ba58320abd">IndentLevel</link>++;
00466 &#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(i&#32;=&#32;0,&#32;e&#32;=&#32;Ctx-&gt;<link linkend="_struct_comment_a_s_t_dumping_context_1a96a3e251fc613062d60fb1ba58320abd">IndentLevel</link>;&#32;i&#32;!=&#32;e;&#32;++i)
00467 &#32;&#32;&#32;&#32;printf(<emphasis role="stringliteral">&quot;&#32;&#32;&quot;</emphasis>);
00468 
00469 &#32;&#32;printf(<emphasis role="stringliteral">&quot;(&quot;</emphasis>);
00470 &#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(Kind)&#32;{
00471 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXComment_Null:
00472 &#32;&#32;&#32;&#32;printf(<emphasis role="stringliteral">&quot;CXComment_Null&quot;</emphasis>);
00473 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
00474 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXComment_Text:
00475 &#32;&#32;&#32;&#32;printf(<emphasis role="stringliteral">&quot;CXComment_Text&quot;</emphasis>);
00476 &#32;&#32;&#32;&#32;PrintCXStringWithPrefixAndDispose(<emphasis role="stringliteral">&quot;Text&quot;</emphasis>,
00477 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__c_x_comment_8cpp_1adbe075bc5d064d1e16b2e1902cb9a853">clang_TextComment_getText</link>(Comment));
00478 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="__c_x_comment_8cpp_1a1be64745ce67f00827e1c06c0f82e0f3">clang_Comment_isWhitespace</link>(Comment))
00479 &#32;&#32;&#32;&#32;&#32;&#32;printf(<emphasis role="stringliteral">&quot;&#32;IsWhitespace&quot;</emphasis>);
00480 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="__c_x_comment_8cpp_1a7f6654b305c4cb96b6e1bf6a85cbf94c">clang_InlineContentComment_hasTrailingNewline</link>(Comment))
00481 &#32;&#32;&#32;&#32;&#32;&#32;printf(<emphasis role="stringliteral">&quot;&#32;HasTrailingNewline&quot;</emphasis>);
00482 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
00483 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXComment_InlineCommand:
00484 &#32;&#32;&#32;&#32;printf(<emphasis role="stringliteral">&quot;CXComment_InlineCommand&quot;</emphasis>);
00485 &#32;&#32;&#32;&#32;PrintCXStringWithPrefixAndDispose(
00486 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;CommandName&quot;</emphasis>,
00487 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__c_x_comment_8cpp_1a7b57052f2d22bdd2f8b9c4ffe42fc11d">clang_InlineCommandComment_getCommandName</link>(Comment));
00488 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(<link linkend="__c_x_comment_8cpp_1a69760fad9e09c24602f5366a7ad9df5b">clang_InlineCommandComment_getRenderKind</link>(Comment))&#32;{
00489 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCommentInlineCommandRenderKind_Normal:
00490 &#32;&#32;&#32;&#32;&#32;&#32;printf(<emphasis role="stringliteral">&quot;&#32;RenderNormal&quot;</emphasis>);
00491 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
00492 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCommentInlineCommandRenderKind_Bold:
00493 &#32;&#32;&#32;&#32;&#32;&#32;printf(<emphasis role="stringliteral">&quot;&#32;RenderBold&quot;</emphasis>);
00494 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
00495 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCommentInlineCommandRenderKind_Monospaced:
00496 &#32;&#32;&#32;&#32;&#32;&#32;printf(<emphasis role="stringliteral">&quot;&#32;RenderMonospaced&quot;</emphasis>);
00497 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
00498 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCommentInlineCommandRenderKind_Emphasized:
00499 &#32;&#32;&#32;&#32;&#32;&#32;printf(<emphasis role="stringliteral">&quot;&#32;RenderEmphasized&quot;</emphasis>);
00500 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
00501 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCommentInlineCommandRenderKind_Anchor:
00502 &#32;&#32;&#32;&#32;&#32;&#32;printf(<emphasis role="stringliteral">&quot;&#32;RenderAnchor&quot;</emphasis>);
00503 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
00504 &#32;&#32;&#32;&#32;}
00505 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(i&#32;=&#32;0,&#32;e&#32;=&#32;<link linkend="__c_x_comment_8cpp_1aa068e80a8f08f0cc72e16793f3cc1872">clang_InlineCommandComment_getNumArgs</link>(Comment);
00506 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;i&#32;!=&#32;e;&#32;++i)&#32;{
00507 &#32;&#32;&#32;&#32;&#32;&#32;printf(<emphasis role="stringliteral">&quot;&#32;Arg[%u]=&quot;</emphasis>,&#32;i);
00508 &#32;&#32;&#32;&#32;&#32;&#32;PrintCXStringAndDispose(
00509 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__c_x_comment_8cpp_1a1d115b5be591e36494a110bf94e19192">clang_InlineCommandComment_getArgText</link>(Comment,&#32;i));
00510 &#32;&#32;&#32;&#32;}
00511 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="__c_x_comment_8cpp_1a7f6654b305c4cb96b6e1bf6a85cbf94c">clang_InlineContentComment_hasTrailingNewline</link>(Comment))
00512 &#32;&#32;&#32;&#32;&#32;&#32;printf(<emphasis role="stringliteral">&quot;&#32;HasTrailingNewline&quot;</emphasis>);
00513 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
00514 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXComment_HTMLStartTag:&#32;{
00515 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;NumAttrs;
00516 &#32;&#32;&#32;&#32;printf(<emphasis role="stringliteral">&quot;CXComment_HTMLStartTag&quot;</emphasis>);
00517 &#32;&#32;&#32;&#32;PrintCXStringWithPrefixAndDispose(
00518 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;Name&quot;</emphasis>,
00519 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__c_x_comment_8cpp_1a083dc5803164ddfaf16f03aa57f083a0">clang_HTMLTagComment_getTagName</link>(Comment));
00520 &#32;&#32;&#32;&#32;NumAttrs&#32;=&#32;<link linkend="__c_x_comment_8cpp_1af9cca60b360405d919eb42008ac5c3ae">clang_HTMLStartTag_getNumAttrs</link>(Comment);
00521 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(NumAttrs&#32;!=&#32;0)&#32;{
00522 &#32;&#32;&#32;&#32;&#32;&#32;printf(<emphasis role="stringliteral">&quot;&#32;Attrs:&quot;</emphasis>);
00523 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(i&#32;=&#32;0;&#32;i&#32;!=&#32;NumAttrs;&#32;++i)&#32;{
00524 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;printf(<emphasis role="stringliteral">&quot;&#32;&quot;</emphasis>);
00525 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;PrintCXStringAndDispose(<link linkend="__c_x_comment_8cpp_1a48435f0360547546f604d695cd4d9c2d">clang_HTMLStartTag_getAttrName</link>(Comment,&#32;i));
00526 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;printf(<emphasis role="stringliteral">&quot;=&quot;</emphasis>);
00527 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;PrintCXStringAndDispose(<link linkend="__c_x_comment_8cpp_1afc2ea55ff9ec0feb975b5402d6497e8b">clang_HTMLStartTag_getAttrValue</link>(Comment,&#32;i));
00528 &#32;&#32;&#32;&#32;&#32;&#32;}
00529 &#32;&#32;&#32;&#32;}
00530 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="__c_x_comment_8cpp_1a1bf46cbe9764181afb8c2f798f08ab90">clang_HTMLStartTagComment_isSelfClosing</link>(Comment))
00531 &#32;&#32;&#32;&#32;&#32;&#32;printf(<emphasis role="stringliteral">&quot;&#32;SelfClosing&quot;</emphasis>);
00532 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="__c_x_comment_8cpp_1a7f6654b305c4cb96b6e1bf6a85cbf94c">clang_InlineContentComment_hasTrailingNewline</link>(Comment))
00533 &#32;&#32;&#32;&#32;&#32;&#32;printf(<emphasis role="stringliteral">&quot;&#32;HasTrailingNewline&quot;</emphasis>);
00534 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
00535 &#32;&#32;}
00536 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXComment_HTMLEndTag:
00537 &#32;&#32;&#32;&#32;printf(<emphasis role="stringliteral">&quot;CXComment_HTMLEndTag&quot;</emphasis>);
00538 &#32;&#32;&#32;&#32;PrintCXStringWithPrefixAndDispose(
00539 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;Name&quot;</emphasis>,
00540 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__c_x_comment_8cpp_1a083dc5803164ddfaf16f03aa57f083a0">clang_HTMLTagComment_getTagName</link>(Comment));
00541 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="__c_x_comment_8cpp_1a7f6654b305c4cb96b6e1bf6a85cbf94c">clang_InlineContentComment_hasTrailingNewline</link>(Comment))
00542 &#32;&#32;&#32;&#32;&#32;&#32;printf(<emphasis role="stringliteral">&quot;&#32;HasTrailingNewline&quot;</emphasis>);
00543 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
00544 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXComment_Paragraph:
00545 &#32;&#32;&#32;&#32;printf(<emphasis role="stringliteral">&quot;CXComment_Paragraph&quot;</emphasis>);
00546 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="__c_x_comment_8cpp_1a1be64745ce67f00827e1c06c0f82e0f3">clang_Comment_isWhitespace</link>(Comment))
00547 &#32;&#32;&#32;&#32;&#32;&#32;printf(<emphasis role="stringliteral">&quot;&#32;IsWhitespace&quot;</emphasis>);
00548 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
00549 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXComment_BlockCommand:
00550 &#32;&#32;&#32;&#32;printf(<emphasis role="stringliteral">&quot;CXComment_BlockCommand&quot;</emphasis>);
00551 &#32;&#32;&#32;&#32;PrintCXStringWithPrefixAndDispose(
00552 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;CommandName&quot;</emphasis>,
00553 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__c_x_comment_8cpp_1a1a5f0a59b1bfdf9f53585e67f7fc74c2">clang_BlockCommandComment_getCommandName</link>(Comment));
00554 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(i&#32;=&#32;0,&#32;e&#32;=&#32;<link linkend="__c_x_comment_8cpp_1a5ddde9da58fc7ab03db0126e8f8d8944">clang_BlockCommandComment_getNumArgs</link>(Comment);
00555 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;i&#32;!=&#32;e;&#32;++i)&#32;{
00556 &#32;&#32;&#32;&#32;&#32;&#32;printf(<emphasis role="stringliteral">&quot;&#32;Arg[%u]=&quot;</emphasis>,&#32;i);
00557 &#32;&#32;&#32;&#32;&#32;&#32;PrintCXStringAndDispose(
00558 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__c_x_comment_8cpp_1a7458f2a97375f474c7373600474ae71d">clang_BlockCommandComment_getArgText</link>(Comment,&#32;i));
00559 &#32;&#32;&#32;&#32;}
00560 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
00561 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXComment_ParamCommand:
00562 &#32;&#32;&#32;&#32;printf(<emphasis role="stringliteral">&quot;CXComment_ParamCommand&quot;</emphasis>);
00563 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(<link linkend="__c_x_comment_8cpp_1a77e3fadc4012a1bf122edfb99c14e729">clang_ParamCommandComment_getDirection</link>(Comment))&#32;{
00564 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCommentParamPassDirection_In:
00565 &#32;&#32;&#32;&#32;&#32;&#32;printf(<emphasis role="stringliteral">&quot;&#32;in&quot;</emphasis>);
00566 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
00567 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCommentParamPassDirection_Out:
00568 &#32;&#32;&#32;&#32;&#32;&#32;printf(<emphasis role="stringliteral">&quot;&#32;out&quot;</emphasis>);
00569 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
00570 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCommentParamPassDirection_InOut:
00571 &#32;&#32;&#32;&#32;&#32;&#32;printf(<emphasis role="stringliteral">&quot;&#32;in,out&quot;</emphasis>);
00572 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
00573 &#32;&#32;&#32;&#32;}
00574 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="__c_x_comment_8cpp_1a0b31491b9046e1c9ad9eb95851fd7903">clang_ParamCommandComment_isDirectionExplicit</link>(Comment))
00575 &#32;&#32;&#32;&#32;&#32;&#32;printf(<emphasis role="stringliteral">&quot;&#32;explicitly&quot;</emphasis>);
00576 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
00577 &#32;&#32;&#32;&#32;&#32;&#32;printf(<emphasis role="stringliteral">&quot;&#32;implicitly&quot;</emphasis>);
00578 &#32;&#32;&#32;&#32;PrintCXStringWithPrefixAndDispose(
00579 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;ParamName&quot;</emphasis>,
00580 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__c_x_comment_8cpp_1ac80ae00d8799af7924ffa42c02817681">clang_ParamCommandComment_getParamName</link>(Comment));
00581 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="__c_x_comment_8cpp_1a4ca05fbed7e50993c40ddaeca781f1e9">clang_ParamCommandComment_isParamIndexValid</link>(Comment))
00582 &#32;&#32;&#32;&#32;&#32;&#32;printf(<emphasis role="stringliteral">&quot;&#32;ParamIndex=%u&quot;</emphasis>,&#32;<link linkend="__c_x_comment_8cpp_1a3b9e42358aee7f66d87713e2509734cf">clang_ParamCommandComment_getParamIndex</link>(Comment));
00583 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
00584 &#32;&#32;&#32;&#32;&#32;&#32;printf(<emphasis role="stringliteral">&quot;&#32;ParamIndex=Invalid&quot;</emphasis>);
00585 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
00586 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXComment_TParamCommand:
00587 &#32;&#32;&#32;&#32;printf(<emphasis role="stringliteral">&quot;CXComment_TParamCommand&quot;</emphasis>);
00588 &#32;&#32;&#32;&#32;PrintCXStringWithPrefixAndDispose(
00589 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;ParamName&quot;</emphasis>,
00590 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__c_x_comment_8cpp_1af45d777f6b38f24eda40170b4f80cfe1">clang_TParamCommandComment_getParamName</link>(Comment));
00591 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="__c_x_comment_8cpp_1a65d7ba852058cdc5fb7a9310b9cb848a">clang_TParamCommandComment_isParamPositionValid</link>(Comment))&#32;{
00592 &#32;&#32;&#32;&#32;&#32;&#32;printf(<emphasis role="stringliteral">&quot;&#32;ParamPosition={&quot;</emphasis>);
00593 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(i&#32;=&#32;0,&#32;e&#32;=&#32;<link linkend="__c_x_comment_8cpp_1ace49c2197ef00c6dc2252e40446706cd">clang_TParamCommandComment_getDepth</link>(Comment);
00594 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;i&#32;!=&#32;e;&#32;++i)&#32;{
00595 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;printf(<emphasis role="stringliteral">&quot;%u&quot;</emphasis>,&#32;<link linkend="__c_x_comment_8cpp_1a2ecc76615a2b767762b9352bb9d1a407">clang_TParamCommandComment_getIndex</link>(Comment,&#32;i));
00596 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(i&#32;!=&#32;e&#32;-&#32;1)
00597 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;printf(<emphasis role="stringliteral">&quot;,&#32;&quot;</emphasis>);
00598 &#32;&#32;&#32;&#32;&#32;&#32;}
00599 &#32;&#32;&#32;&#32;&#32;&#32;printf(<emphasis role="stringliteral">&quot;}&quot;</emphasis>);
00600 &#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>
00601 &#32;&#32;&#32;&#32;&#32;&#32;printf(<emphasis role="stringliteral">&quot;&#32;ParamPosition=Invalid&quot;</emphasis>);
00602 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
00603 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXComment_VerbatimBlockCommand:
00604 &#32;&#32;&#32;&#32;printf(<emphasis role="stringliteral">&quot;CXComment_VerbatimBlockCommand&quot;</emphasis>);
00605 &#32;&#32;&#32;&#32;PrintCXStringWithPrefixAndDispose(
00606 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;CommandName&quot;</emphasis>,
00607 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__c_x_comment_8cpp_1a1a5f0a59b1bfdf9f53585e67f7fc74c2">clang_BlockCommandComment_getCommandName</link>(Comment));
00608 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
00609 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXComment_VerbatimBlockLine:
00610 &#32;&#32;&#32;&#32;printf(<emphasis role="stringliteral">&quot;CXComment_VerbatimBlockLine&quot;</emphasis>);
00611 &#32;&#32;&#32;&#32;PrintCXStringWithPrefixAndDispose(
00612 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;Text&quot;</emphasis>,
00613 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__c_x_comment_8cpp_1ac973016ab20d3e638594058265cc85fc">clang_VerbatimBlockLineComment_getText</link>(Comment));
00614 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
00615 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXComment_VerbatimLine:
00616 &#32;&#32;&#32;&#32;printf(<emphasis role="stringliteral">&quot;CXComment_VerbatimLine&quot;</emphasis>);
00617 &#32;&#32;&#32;&#32;PrintCXStringWithPrefixAndDispose(
00618 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;Text&quot;</emphasis>,
00619 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__c_x_comment_8cpp_1ab45fe28ecf1dd5155379ecbc388694f3">clang_VerbatimLineComment_getText</link>(Comment));
00620 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
00621 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXComment_FullComment:
00622 &#32;&#32;&#32;&#32;printf(<emphasis role="stringliteral">&quot;CXComment_FullComment&quot;</emphasis>);
00623 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
00624 &#32;&#32;}
00625 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(Kind&#32;!=&#32;CXComment_Null)&#32;{
00626 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;NumChildren&#32;=&#32;<link linkend="__c_x_comment_8cpp_1a8def4fcae92fd482b6af111c41bc24ad">clang_Comment_getNumChildren</link>(Comment);
00627 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;i;
00628 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(i&#32;=&#32;0;&#32;i&#32;!=&#32;NumChildren;&#32;++i)&#32;{
00629 &#32;&#32;&#32;&#32;&#32;&#32;printf(<emphasis role="stringliteral">&quot;\n//&#32;%s:&#32;&quot;</emphasis>,&#32;FileCheckPrefix);
00630 &#32;&#32;&#32;&#32;&#32;&#32;DumpCXCommentInternal(Ctx,&#32;<link linkend="__c_x_comment_8cpp_1aebc90b00afa512bdac23ab77739d75c1">clang_Comment_getChild</link>(Comment,&#32;i));
00631 &#32;&#32;&#32;&#32;}
00632 &#32;&#32;}
00633 &#32;&#32;printf(<emphasis role="stringliteral">&quot;)&quot;</emphasis>);
00634 &#32;&#32;Ctx-&gt;<link linkend="_struct_comment_a_s_t_dumping_context_1a96a3e251fc613062d60fb1ba58320abd">IndentLevel</link>--;
00635 }
00636 
00637 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;DumpCXComment(CXComment&#32;Comment)&#32;{
00638 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_struct_comment_a_s_t_dumping_context">CommentASTDumpingContext</link>&#32;Ctx;
00639 &#32;&#32;Ctx.<link linkend="_struct_comment_a_s_t_dumping_context_1a96a3e251fc613062d60fb1ba58320abd">IndentLevel</link>&#32;=&#32;1;
00640 &#32;&#32;printf(<emphasis role="stringliteral">&quot;\n//&#32;%s:&#32;&#32;CommentAST=[\n//&#32;%s:&quot;</emphasis>,&#32;FileCheckPrefix,&#32;FileCheckPrefix);
00641 &#32;&#32;DumpCXCommentInternal(&amp;Ctx,&#32;Comment);
00642 &#32;&#32;printf(<emphasis role="stringliteral">&quot;]&quot;</emphasis>);
00643 }
00644 
00645 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;ValidateCommentXML(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*Str,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*CommentSchemaFile)&#32;{
00646 <emphasis role="preprocessor">#ifdef&#32;CLANG_HAVE_LIBXML</emphasis>
00647 &#32;&#32;xmlRelaxNGParserCtxtPtr&#32;RNGParser;
00648 &#32;&#32;xmlRelaxNGPtr&#32;Schema;
00649 &#32;&#32;xmlDocPtr&#32;Doc;
00650 &#32;&#32;xmlRelaxNGValidCtxtPtr&#32;ValidationCtxt;
00651 &#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;status;
00652 
00653 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!CommentSchemaFile)
00654 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
00655 
00656 &#32;&#32;RNGParser&#32;=&#32;xmlRelaxNGNewParserCtxt(CommentSchemaFile);
00657 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!RNGParser)&#32;{
00658 &#32;&#32;&#32;&#32;printf(<emphasis role="stringliteral">&quot;&#32;libXMLError&quot;</emphasis>);
00659 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
00660 &#32;&#32;}
00661 &#32;&#32;Schema&#32;=&#32;xmlRelaxNGParse(RNGParser);
00662 
00663 &#32;&#32;Doc&#32;=&#32;xmlParseDoc((<emphasis role="keyword">const</emphasis>&#32;xmlChar&#32;*)&#32;Str);
00664 
00665 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!Doc)&#32;{
00666 &#32;&#32;&#32;&#32;xmlErrorPtr&#32;Error&#32;=&#32;xmlGetLastError();
00667 &#32;&#32;&#32;&#32;printf(<emphasis role="stringliteral">&quot;&#32;CommentXMLInvalid&#32;[not&#32;well-formed&#32;XML:&#32;%s]&quot;</emphasis>,&#32;Error-&gt;message);
00668 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
00669 &#32;&#32;}
00670 
00671 &#32;&#32;ValidationCtxt&#32;=&#32;xmlRelaxNGNewValidCtxt(Schema);
00672 &#32;&#32;status&#32;=&#32;xmlRelaxNGValidateDoc(ValidationCtxt,&#32;Doc);
00673 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!status)
00674 &#32;&#32;&#32;&#32;printf(<emphasis role="stringliteral">&quot;&#32;CommentXMLValid&quot;</emphasis>);
00675 &#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(status&#32;&gt;&#32;0)&#32;{
00676 &#32;&#32;&#32;&#32;xmlErrorPtr&#32;Error&#32;=&#32;xmlGetLastError();
00677 &#32;&#32;&#32;&#32;printf(<emphasis role="stringliteral">&quot;&#32;CommentXMLInvalid&#32;[not&#32;valid&#32;XML:&#32;%s]&quot;</emphasis>,&#32;Error-&gt;message);
00678 &#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>
00679 &#32;&#32;&#32;&#32;printf(<emphasis role="stringliteral">&quot;&#32;libXMLError&quot;</emphasis>);
00680 
00681 &#32;&#32;xmlRelaxNGFreeValidCtxt(ValidationCtxt);
00682 &#32;&#32;xmlFreeDoc(Doc);
00683 &#32;&#32;xmlRelaxNGFree(Schema);
00684 &#32;&#32;xmlRelaxNGFreeParserCtxt(RNGParser);
00685 <emphasis role="preprocessor">#endif</emphasis>
00686 }
00687 
00688 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;PrintCursorComments(CXCursor&#32;Cursor,
00689 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*CommentSchemaFile)&#32;{
00690 &#32;&#32;{
00691 &#32;&#32;&#32;&#32;CXString&#32;RawComment;
00692 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*RawCommentCString;
00693 &#32;&#32;&#32;&#32;CXString&#32;BriefComment;
00694 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*BriefCommentCString;
00695 
00696 &#32;&#32;&#32;&#32;RawComment&#32;=&#32;<link linkend="__c_index_8cpp_1aa781f7c9e6773175108bd7539fa6cf38">clang_Cursor_getRawCommentText</link>(Cursor);
00697 &#32;&#32;&#32;&#32;RawCommentCString&#32;=&#32;<link linkend="__c_x_string_8cpp_1acd478c1b1785e17c0fe377bd70a2195f">clang_getCString</link>(RawComment);
00698 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(RawCommentCString&#32;!=&#32;NULL&#32;&amp;&amp;&#32;RawCommentCString[0]&#32;!=&#32;<emphasis role="charliteral">&apos;\0&apos;</emphasis>)&#32;{
00699 &#32;&#32;&#32;&#32;&#32;&#32;PrintCStringWithPrefix(<emphasis role="stringliteral">&quot;RawComment&quot;</emphasis>,&#32;RawCommentCString);
00700 &#32;&#32;&#32;&#32;&#32;&#32;PrintRange(<link linkend="__c_index_8cpp_1acfc6a9db8380053fc33e62e70a4b294b">clang_Cursor_getCommentRange</link>(Cursor),&#32;<emphasis role="stringliteral">&quot;RawCommentRange&quot;</emphasis>);
00701 
00702 &#32;&#32;&#32;&#32;&#32;&#32;BriefComment&#32;=&#32;<link linkend="__c_index_8cpp_1a9fdbd8a38405153494cef86239d10bbb">clang_Cursor_getBriefCommentText</link>(Cursor);
00703 &#32;&#32;&#32;&#32;&#32;&#32;BriefCommentCString&#32;=&#32;<link linkend="__c_x_string_8cpp_1acd478c1b1785e17c0fe377bd70a2195f">clang_getCString</link>(BriefComment);
00704 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(BriefCommentCString&#32;!=&#32;NULL&#32;&amp;&amp;&#32;BriefCommentCString[0]&#32;!=&#32;<emphasis role="charliteral">&apos;\0&apos;</emphasis>)
00705 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;PrintCStringWithPrefix(<emphasis role="stringliteral">&quot;BriefComment&quot;</emphasis>,&#32;BriefCommentCString);
00706 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__c_x_string_8cpp_1a46c85f1255580ed186aa6f7380a06883">clang_disposeString</link>(BriefComment);
00707 &#32;&#32;&#32;&#32;}
00708 &#32;&#32;&#32;&#32;<link linkend="__c_x_string_8cpp_1a46c85f1255580ed186aa6f7380a06883">clang_disposeString</link>(RawComment);
00709 &#32;&#32;}
00710 
00711 &#32;&#32;{
00712 &#32;&#32;&#32;&#32;CXComment&#32;Comment&#32;=&#32;<link linkend="__c_x_comment_8cpp_1af71dde2d11999c585b48866a426276c8">clang_Cursor_getParsedComment</link>(Cursor);
00713 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="__c_x_comment_8cpp_1a38c8a63eb2af838b36cb67b0944345cf">clang_Comment_getKind</link>(Comment)&#32;!=&#32;CXComment_Null)&#32;{
00714 &#32;&#32;&#32;&#32;&#32;&#32;PrintCXStringWithPrefixAndDispose(<emphasis role="stringliteral">&quot;FullCommentAsHTML&quot;</emphasis>,
00715 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__c_x_comment_8cpp_1aeeb543f510f3d530b95c81aa94e6c6b4">clang_FullComment_getAsHTML</link>(Comment));
00716 &#32;&#32;&#32;&#32;&#32;&#32;{
00717 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;CXString&#32;XML;
00718 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;XML&#32;=&#32;<link linkend="__c_x_comment_8cpp_1a024ac8f00dd56924c7dbaa7994c2934c">clang_FullComment_getAsXML</link>(Comment);
00719 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;PrintCXStringWithPrefix(<emphasis role="stringliteral">&quot;FullCommentAsXML&quot;</emphasis>,&#32;XML);
00720 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ValidateCommentXML(<link linkend="__c_x_string_8cpp_1acd478c1b1785e17c0fe377bd70a2195f">clang_getCString</link>(XML),&#32;CommentSchemaFile);
00721 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__c_x_string_8cpp_1a46c85f1255580ed186aa6f7380a06883">clang_disposeString</link>(XML);
00722 &#32;&#32;&#32;&#32;&#32;&#32;}
00723 
00724 &#32;&#32;&#32;&#32;&#32;&#32;DumpCXComment(Comment);
00725 &#32;&#32;&#32;&#32;}
00726 &#32;&#32;}
00727 }
00728 
<anchor xml:id="_c-index-test_8c_source_1l00729"/><link linkend="_struct_line_col">00729</link> <emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">struct&#32;</emphasis>{
<anchor xml:id="_c-index-test_8c_source_1l00730"/><link linkend="_struct_line_col_1a7224a4e629a73d0fefd83fa9291e5f9a">00730</link> &#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<link linkend="_struct_line_col_1a7224a4e629a73d0fefd83fa9291e5f9a">line</link>;
<anchor xml:id="_c-index-test_8c_source_1l00731"/><link linkend="_struct_line_col_1afbbf106eb9a2d85a640cba4172ca8d74">00731</link> &#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<link linkend="_struct_line_col_1afbbf106eb9a2d85a640cba4172ca8d74">col</link>;
00732 }&#32;<link linkend="_struct_line_col">LineCol</link>;
00733 
00734 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;lineCol_cmp(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;*p1,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;*p2)&#32;{
00735 &#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_struct_line_col">LineCol</link>&#32;*lhs&#32;=&#32;p1;
00736 &#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_struct_line_col">LineCol</link>&#32;*rhs&#32;=&#32;p2;
00737 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(lhs-&gt;<link linkend="_struct_line_col_1a7224a4e629a73d0fefd83fa9291e5f9a">line</link>&#32;!=&#32;rhs-&gt;<link linkend="_struct_line_col_1a7224a4e629a73d0fefd83fa9291e5f9a">line</link>)
00738 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>)lhs-&gt;<link linkend="_struct_line_col_1a7224a4e629a73d0fefd83fa9291e5f9a">line</link>&#32;-&#32;(int)rhs-&gt;<link linkend="_struct_line_col_1a7224a4e629a73d0fefd83fa9291e5f9a">line</link>;
00739 &#32;&#32;return&#32;(<emphasis role="keywordtype">int</emphasis>)lhs-&gt;<link linkend="_struct_line_col_1afbbf106eb9a2d85a640cba4172ca8d74">col</link>&#32;-&#32;(int)rhs-&gt;<link linkend="_struct_line_col_1afbbf106eb9a2d85a640cba4172ca8d74">col</link>;
00740 }
00741 
00742 <emphasis role="keyword">static</emphasis>&#32;CXString&#32;CursorToText(CXCursor&#32;Cursor)&#32;{
00743 &#32;&#32;CXString&#32;text;
00744 &#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(wanted_display_type)&#32;{
00745 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_c-index-test_8c_1a18c0cbeece6bcb1c64d7463ce253ff50a9f5f9b93a4060a3cddd7f015277c0c8e">DisplayType_Spelling</link>:
00746 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__c_index_8cpp_1a412f1282680f05ef2b991f21a59ad3ac">clang_getCursorSpelling</link>(Cursor);
00747 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_c-index-test_8c_1a18c0cbeece6bcb1c64d7463ce253ff50a49959c0ca74d6b4e0570bc1d5affeffc">DisplayType_DisplayName</link>:
00748 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__c_index_8cpp_1adacc338d2829e50ff0395a8384d507b3">clang_getCursorDisplayName</link>(Cursor);
00749 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_c-index-test_8c_1a18c0cbeece6bcb1c64d7463ce253ff50a5960c8f71e87439216a25cee44967d6f">DisplayType_Pretty</link>:&#32;{
00750 &#32;&#32;&#32;&#32;CXPrintingPolicy&#32;Policy&#32;=&#32;<link linkend="__c_index_8cpp_1a472e7c06c70965b983f908f49f27c2bf">clang_getCursorPrintingPolicy</link>(Cursor);
00751 &#32;&#32;&#32;&#32;ModifyPrintingPolicyAccordingToEnv(Policy);
00752 &#32;&#32;&#32;&#32;text&#32;=&#32;<link linkend="__c_index_8cpp_1aaf6d4365916cd5424df38549e28ffd3b">clang_getCursorPrettyPrinted</link>(Cursor,&#32;Policy);
00753 &#32;&#32;&#32;&#32;<link linkend="__c_index_8cpp_1a5f4c201c1711cf708edccc3227e49197">clang_PrintingPolicy_dispose</link>(Policy);
00754 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;text;
00755 &#32;&#32;}
00756 &#32;&#32;}
00757 &#32;&#32;assert(0&#32;&amp;&amp;&#32;<emphasis role="stringliteral">&quot;unknown&#32;display&#32;type&quot;</emphasis>);&#32;<emphasis role="comment">/*&#32;no&#32;llvm_unreachable&#32;in&#32;C.&#32;*/</emphasis>
00758 &#32;&#32;<emphasis role="comment">/*&#32;Set&#32;to&#32;NULL&#32;to&#32;prevent&#32;uninitialized&#32;variable&#32;warnings.&#32;*/</emphasis>
00759 &#32;&#32;text.data&#32;=&#32;NULL;
00760 &#32;&#32;text.private_flags&#32;=&#32;0;
00761 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;text;
00762 }
00763 
00764 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;PrintCursor(CXCursor&#32;Cursor,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*CommentSchemaFile)&#32;{
00765 &#32;&#32;CXTranslationUnit&#32;TU&#32;=&#32;<link linkend="__c_x_cursor_8cpp_1ace7e0a4fcee3aa54c74aa75615cef62a">clang_Cursor_getTranslationUnit</link>(Cursor);
00766 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="__c_index_8cpp_1a0c5b391d8bca745084fb8906cce6f66c">clang_isInvalid</link>(Cursor.kind))&#32;{
00767 &#32;&#32;&#32;&#32;CXString&#32;ks&#32;=&#32;<link linkend="__c_index_8cpp_1a667cf97e111be828ff2c36e23d583fce">clang_getCursorKindSpelling</link>(Cursor.kind);
00768 &#32;&#32;&#32;&#32;printf(<emphasis role="stringliteral">&quot;Invalid&#32;Cursor&#32;=&gt;&#32;%s&quot;</emphasis>,&#32;<link linkend="__c_x_string_8cpp_1acd478c1b1785e17c0fe377bd70a2195f">clang_getCString</link>(ks));
00769 &#32;&#32;&#32;&#32;<link linkend="__c_x_string_8cpp_1a46c85f1255580ed186aa6f7380a06883">clang_disposeString</link>(ks);
00770 &#32;&#32;}
00771 &#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
00772 &#32;&#32;&#32;&#32;CXString&#32;string,&#32;ks;
00773 &#32;&#32;&#32;&#32;CXCursor&#32;Referenced;
00774 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;line,&#32;column;
00775 &#32;&#32;&#32;&#32;CXCursor&#32;SpecializationOf;
00776 &#32;&#32;&#32;&#32;CXCursor&#32;*overridden;
00777 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;num_overridden;
00778 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;RefNameRangeNr;
00779 &#32;&#32;&#32;&#32;CXSourceRange&#32;CursorExtent;
00780 &#32;&#32;&#32;&#32;CXSourceRange&#32;RefNameRange;
00781 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;AlwaysUnavailable;
00782 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;AlwaysDeprecated;
00783 &#32;&#32;&#32;&#32;CXString&#32;UnavailableMessage;
00784 &#32;&#32;&#32;&#32;CXString&#32;DeprecatedMessage;
00785 &#32;&#32;&#32;&#32;CXPlatformAvailability&#32;PlatformAvailability[2];
00786 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;NumPlatformAvailability;
00787 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;I;
00788 
00789 &#32;&#32;&#32;&#32;ks&#32;=&#32;<link linkend="__c_index_8cpp_1a667cf97e111be828ff2c36e23d583fce">clang_getCursorKindSpelling</link>(Cursor.kind);
00790 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">string</emphasis>&#32;=&#32;CursorToText(Cursor);
00791 &#32;&#32;&#32;&#32;printf(<emphasis role="stringliteral">&quot;%s=%s&quot;</emphasis>,&#32;<link linkend="__c_x_string_8cpp_1acd478c1b1785e17c0fe377bd70a2195f">clang_getCString</link>(ks),
00792 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__c_x_string_8cpp_1acd478c1b1785e17c0fe377bd70a2195f">clang_getCString</link>(<emphasis role="keywordtype">string</emphasis>));
00793 &#32;&#32;&#32;&#32;<link linkend="__c_x_string_8cpp_1a46c85f1255580ed186aa6f7380a06883">clang_disposeString</link>(ks);
00794 &#32;&#32;&#32;&#32;<link linkend="__c_x_string_8cpp_1a46c85f1255580ed186aa6f7380a06883">clang_disposeString</link>(<emphasis role="keywordtype">string</emphasis>);
00795 
00796 &#32;&#32;&#32;&#32;Referenced&#32;=&#32;<link linkend="__c_index_8cpp_1ab26fc466345d015d7f9d418080166dc7">clang_getCursorReferenced</link>(Cursor);
00797 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!<link linkend="__c_index_8cpp_1a96d5f0059613428736715de616ed38f9">clang_equalCursors</link>(Referenced,&#32;<link linkend="__c_index_8cpp_1aa22233466eaf91f6f3cf6b84255c3b68">clang_getNullCursor</link>()))&#32;{
00798 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="__c_index_8cpp_1a88e594fe730830706a0b7cff796eaedf">clang_getCursorKind</link>(Referenced)&#32;==&#32;CXCursor_OverloadedDeclRef)&#32;{
00799 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;I,&#32;N&#32;=&#32;<link linkend="__c_index_8cpp_1a0456530befeaf5dfc3ab402201f29eae">clang_getNumOverloadedDecls</link>(Referenced);
00800 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;printf(<emphasis role="stringliteral">&quot;[&quot;</emphasis>);
00801 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(I&#32;=&#32;0;&#32;I&#32;!=&#32;N;&#32;++I)&#32;{
00802 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;CXCursor&#32;Ovl&#32;=&#32;<link linkend="__c_index_8cpp_1a5bfefc8c75349072669d306071ec6d30">clang_getOverloadedDecl</link>(Referenced,&#32;I);
00803 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;CXSourceLocation&#32;Loc;
00804 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(I)
00805 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;printf(<emphasis role="stringliteral">&quot;,&#32;&quot;</emphasis>);
00806 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
00807 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Loc&#32;=&#32;<link linkend="__c_index_8cpp_1a98001a3f8eb3a76d9c12821c45ef3708">clang_getCursorLocation</link>(Ovl);
00808 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__c_x_source_location_8cpp_1ae2d805527135aac587ca5c8017bde0ef">clang_getSpellingLocation</link>(Loc,&#32;0,&#32;&amp;line,&#32;&amp;column,&#32;0);
00809 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;printf(<emphasis role="stringliteral">&quot;%d:%d&quot;</emphasis>,&#32;line,&#32;column);&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
00810 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00811 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;printf(<emphasis role="stringliteral">&quot;]&quot;</emphasis>);
00812 &#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
00813 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;CXSourceLocation&#32;Loc&#32;=&#32;<link linkend="__c_index_8cpp_1a98001a3f8eb3a76d9c12821c45ef3708">clang_getCursorLocation</link>(Referenced);
00814 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__c_x_source_location_8cpp_1ae2d805527135aac587ca5c8017bde0ef">clang_getSpellingLocation</link>(Loc,&#32;0,&#32;&amp;line,&#32;&amp;column,&#32;0);
00815 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;printf(<emphasis role="stringliteral">&quot;:%d:%d&quot;</emphasis>,&#32;line,&#32;column);
00816 &#32;&#32;&#32;&#32;&#32;&#32;}
00817 
00818 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="__c_index_8cpp_1a88e594fe730830706a0b7cff796eaedf">clang_getCursorKind</link>(Referenced)&#32;==&#32;CXCursor_TypedefDecl)&#32;{
00819 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;CXType&#32;T&#32;=&#32;<link linkend="__c_x_type_8cpp_1a1d3670bea8f0f8660f74bc3e4dee10a0">clang_getCursorType</link>(Referenced);
00820 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="__c_x_type_8cpp_1ad08f909487f3043b05527b86dc79c56b">clang_Type_isTransparentTagTypedef</link>(T))&#32;{
00821 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;CXType&#32;Underlying&#32;=&#32;<link linkend="__c_x_type_8cpp_1af08ffb81b29dce8ca5ff8b99cb706deb">clang_getTypedefDeclUnderlyingType</link>(Referenced);
00822 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;CXString&#32;S&#32;=&#32;<link linkend="__c_x_type_8cpp_1ae144228507fed08fdf97002f5308071d">clang_getTypeSpelling</link>(Underlying);
00823 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;printf(<emphasis role="stringliteral">&quot;&#32;(Transparent:&#32;%s)&quot;</emphasis>,&#32;<link linkend="__c_x_string_8cpp_1acd478c1b1785e17c0fe377bd70a2195f">clang_getCString</link>(S));
00824 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__c_x_string_8cpp_1a46c85f1255580ed186aa6f7380a06883">clang_disposeString</link>(S);
00825 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00826 &#32;&#32;&#32;&#32;&#32;&#32;}
00827 &#32;&#32;&#32;&#32;}
00828 
00829 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="__c_index_8cpp_1a619396ba7a888dea29aa6cb0b35ddbe5">clang_isCursorDefinition</link>(Cursor))
00830 &#32;&#32;&#32;&#32;&#32;&#32;printf(<emphasis role="stringliteral">&quot;&#32;(Definition)&quot;</emphasis>);
00831 &#32;&#32;&#32;&#32;
00832 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(<link linkend="__c_index_8cpp_1a3d2ecf17120d9e5f15b5544b8a901b7e">clang_getCursorAvailability</link>(Cursor))&#32;{
00833 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXAvailability_Available:
00834 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
00835 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
00836 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXAvailability_Deprecated:
00837 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;printf(<emphasis role="stringliteral">&quot;&#32;(deprecated)&quot;</emphasis>);
00838 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
00839 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
00840 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXAvailability_NotAvailable:
00841 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;printf(<emphasis role="stringliteral">&quot;&#32;(unavailable)&quot;</emphasis>);
00842 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
00843 
00844 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXAvailability_NotAccessible:
00845 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;printf(<emphasis role="stringliteral">&quot;&#32;(inaccessible)&quot;</emphasis>);
00846 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
00847 &#32;&#32;&#32;&#32;}
00848 &#32;&#32;&#32;&#32;
00849 &#32;&#32;&#32;&#32;NumPlatformAvailability
00850 &#32;&#32;&#32;&#32;&#32;&#32;=&#32;<link linkend="__c_index_8cpp_1ab166e6d97e4c81463d7999917b30fb85">clang_getCursorPlatformAvailability</link>(Cursor,
00851 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;AlwaysDeprecated,
00852 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;DeprecatedMessage,
00853 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;AlwaysUnavailable,
00854 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;UnavailableMessage,
00855 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;PlatformAvailability,&#32;2);
00856 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(AlwaysUnavailable)&#32;{
00857 &#32;&#32;&#32;&#32;&#32;&#32;printf(<emphasis role="stringliteral">&quot;&#32;&#32;(always&#32;unavailable:&#32;\&quot;%s\&quot;)&quot;</emphasis>,
00858 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__c_x_string_8cpp_1acd478c1b1785e17c0fe377bd70a2195f">clang_getCString</link>(UnavailableMessage));
00859 &#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(AlwaysDeprecated)&#32;{
00860 &#32;&#32;&#32;&#32;&#32;&#32;printf(<emphasis role="stringliteral">&quot;&#32;&#32;(always&#32;deprecated:&#32;\&quot;%s\&quot;)&quot;</emphasis>,
00861 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__c_x_string_8cpp_1acd478c1b1785e17c0fe377bd70a2195f">clang_getCString</link>(DeprecatedMessage));
00862 &#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
00863 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(I&#32;=&#32;0;&#32;I&#32;!=&#32;NumPlatformAvailability;&#32;++I)&#32;{
00864 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(I&#32;&gt;=&#32;2)
00865 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
00866 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
00867 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;printf(<emphasis role="stringliteral">&quot;&#32;&#32;(%s&quot;</emphasis>,&#32;<link linkend="__c_x_string_8cpp_1acd478c1b1785e17c0fe377bd70a2195f">clang_getCString</link>(PlatformAvailability[I].Platform));
00868 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(PlatformAvailability[I].Unavailable)
00869 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;printf(<emphasis role="stringliteral">&quot;,&#32;unavailable&quot;</emphasis>);
00870 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
00871 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;printVersion(<emphasis role="stringliteral">&quot;,&#32;introduced=&quot;</emphasis>,&#32;PlatformAvailability[I].Introduced);
00872 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;printVersion(<emphasis role="stringliteral">&quot;,&#32;deprecated=&quot;</emphasis>,&#32;PlatformAvailability[I].Deprecated);
00873 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;printVersion(<emphasis role="stringliteral">&quot;,&#32;obsoleted=&quot;</emphasis>,&#32;PlatformAvailability[I].Obsoleted);
00874 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00875 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="__c_x_string_8cpp_1acd478c1b1785e17c0fe377bd70a2195f">clang_getCString</link>(PlatformAvailability[I].Message)[0])
00876 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;printf(<emphasis role="stringliteral">&quot;,&#32;message=\&quot;%s\&quot;&quot;</emphasis>,
00877 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__c_x_string_8cpp_1acd478c1b1785e17c0fe377bd70a2195f">clang_getCString</link>(PlatformAvailability[I].Message));
00878 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;printf(<emphasis role="stringliteral">&quot;)&quot;</emphasis>);
00879 &#32;&#32;&#32;&#32;&#32;&#32;}
00880 &#32;&#32;&#32;&#32;}
00881 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(I&#32;=&#32;0;&#32;I&#32;!=&#32;NumPlatformAvailability;&#32;++I)&#32;{
00882 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(I&#32;&gt;=&#32;2)
00883 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
00884 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__c_index_8cpp_1aaa67293732ecceedaed83ec2bac487e7">clang_disposeCXPlatformAvailability</link>(PlatformAvailability&#32;+&#32;I);
00885 &#32;&#32;&#32;&#32;}
00886 &#32;&#32;&#32;&#32;
00887 &#32;&#32;&#32;&#32;<link linkend="__c_x_string_8cpp_1a46c85f1255580ed186aa6f7380a06883">clang_disposeString</link>(DeprecatedMessage);
00888 &#32;&#32;&#32;&#32;<link linkend="__c_x_string_8cpp_1a46c85f1255580ed186aa6f7380a06883">clang_disposeString</link>(UnavailableMessage);
00889 
00890 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="__c_index_8cpp_1ac6857426b17cddb66fdc5dc421bd5563">clang_CXXConstructor_isDefaultConstructor</link>(Cursor))
00891 &#32;&#32;&#32;&#32;&#32;&#32;printf(<emphasis role="stringliteral">&quot;&#32;(default&#32;constructor)&quot;</emphasis>);
00892 
00893 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="__c_index_8cpp_1a3146967757d3544807a15b3a4f968aa9">clang_CXXConstructor_isMoveConstructor</link>(Cursor))
00894 &#32;&#32;&#32;&#32;&#32;&#32;printf(<emphasis role="stringliteral">&quot;&#32;(move&#32;constructor)&quot;</emphasis>);
00895 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="__c_index_8cpp_1a2c261341a67f895a0eb5d6f4c70763d1">clang_CXXConstructor_isCopyConstructor</link>(Cursor))
00896 &#32;&#32;&#32;&#32;&#32;&#32;printf(<emphasis role="stringliteral">&quot;&#32;(copy&#32;constructor)&quot;</emphasis>);
00897 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="__c_index_8cpp_1acc53a751c76070406bc1a0d40a507416">clang_CXXConstructor_isConvertingConstructor</link>(Cursor))
00898 &#32;&#32;&#32;&#32;&#32;&#32;printf(<emphasis role="stringliteral">&quot;&#32;(converting&#32;constructor)&quot;</emphasis>);
00899 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="__c_index_8cpp_1a9a284a8ec63f5e851daa500037e3c621">clang_CXXField_isMutable</link>(Cursor))
00900 &#32;&#32;&#32;&#32;&#32;&#32;printf(<emphasis role="stringliteral">&quot;&#32;(mutable)&quot;</emphasis>);
00901 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="__c_index_8cpp_1a8d4ee1fcce72ca516515388e6af796d3">clang_CXXMethod_isDefaulted</link>(Cursor))
00902 &#32;&#32;&#32;&#32;&#32;&#32;printf(<emphasis role="stringliteral">&quot;&#32;(defaulted)&quot;</emphasis>);
00903 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="__c_index_8cpp_1aca00e7b9f952a9bcb9edb9ba99be0c36">clang_CXXMethod_isStatic</link>(Cursor))
00904 &#32;&#32;&#32;&#32;&#32;&#32;printf(<emphasis role="stringliteral">&quot;&#32;(static)&quot;</emphasis>);
00905 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="__c_index_8cpp_1a59f93e621ce7b6a8fd8be167c9a0e353">clang_CXXMethod_isVirtual</link>(Cursor))
00906 &#32;&#32;&#32;&#32;&#32;&#32;printf(<emphasis role="stringliteral">&quot;&#32;(virtual)&quot;</emphasis>);
00907 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="__c_index_8cpp_1a700b1fa88b7879f9cd9298b076f9fdfe">clang_CXXMethod_isConst</link>(Cursor))
00908 &#32;&#32;&#32;&#32;&#32;&#32;printf(<emphasis role="stringliteral">&quot;&#32;(const)&quot;</emphasis>);
00909 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="__c_index_8cpp_1acb254e52b46647500e12d187d0f71e53">clang_CXXMethod_isPureVirtual</link>(Cursor))
00910 &#32;&#32;&#32;&#32;&#32;&#32;printf(<emphasis role="stringliteral">&quot;&#32;(pure)&quot;</emphasis>);
00911 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="__c_index_8cpp_1a7536535cae5849fc4c35143e09755fc4">clang_CXXRecord_isAbstract</link>(Cursor))
00912 &#32;&#32;&#32;&#32;&#32;&#32;printf(<emphasis role="stringliteral">&quot;&#32;(abstract)&quot;</emphasis>);
00913 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="__c_index_8cpp_1a2b44e1c44b0977a639e424c1c775bb80">clang_EnumDecl_isScoped</link>(Cursor))
00914 &#32;&#32;&#32;&#32;&#32;&#32;printf(<emphasis role="stringliteral">&quot;&#32;(scoped)&quot;</emphasis>);
00915 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="__c_index_8cpp_1a4c88f18c5be15491fbd88b1cacbf5fbf">clang_Cursor_isVariadic</link>(Cursor))
00916 &#32;&#32;&#32;&#32;&#32;&#32;printf(<emphasis role="stringliteral">&quot;&#32;(variadic)&quot;</emphasis>);
00917 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="__c_index_8cpp_1aa6b6ec13289e2906dab7a7e5974571cf">clang_Cursor_isObjCOptional</link>(Cursor))
00918 &#32;&#32;&#32;&#32;&#32;&#32;printf(<emphasis role="stringliteral">&quot;&#32;(@optional)&quot;</emphasis>);
00919 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="__c_index_8cpp_1aaaa646143a44711b01f7b4afdb67ff7d">clang_isInvalidDeclaration</link>(Cursor))
00920 &#32;&#32;&#32;&#32;&#32;&#32;printf(<emphasis role="stringliteral">&quot;&#32;(invalid)&quot;</emphasis>);
00921 
00922 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(<link linkend="__c_x_type_8cpp_1aa7a61ee6661341b92168dbc5719e2e3f">clang_getCursorExceptionSpecificationType</link>(Cursor))
00923 &#32;&#32;&#32;&#32;{
00924 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_ExceptionSpecificationKind_None:
00925 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
00926 
00927 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_ExceptionSpecificationKind_DynamicNone:
00928 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;printf(<emphasis role="stringliteral">&quot;&#32;(noexcept&#32;dynamic&#32;none)&quot;</emphasis>);
00929 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
00930 
00931 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_ExceptionSpecificationKind_Dynamic:
00932 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;printf(<emphasis role="stringliteral">&quot;&#32;(noexcept&#32;dynamic)&quot;</emphasis>);
00933 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
00934 
00935 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_ExceptionSpecificationKind_MSAny:
00936 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;printf(<emphasis role="stringliteral">&quot;&#32;(noexcept&#32;dynamic&#32;any)&quot;</emphasis>);
00937 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
00938 
00939 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_ExceptionSpecificationKind_BasicNoexcept:
00940 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;printf(<emphasis role="stringliteral">&quot;&#32;(noexcept)&quot;</emphasis>);
00941 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
00942 
00943 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_ExceptionSpecificationKind_ComputedNoexcept:
00944 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;printf(<emphasis role="stringliteral">&quot;&#32;(computed-noexcept)&quot;</emphasis>);
00945 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
00946 
00947 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_ExceptionSpecificationKind_Unevaluated:
00948 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_ExceptionSpecificationKind_Uninstantiated:
00949 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCursor_ExceptionSpecificationKind_Unparsed:
00950 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
00951 &#32;&#32;&#32;&#32;}
00952 
00953 &#32;&#32;&#32;&#32;{
00954 &#32;&#32;&#32;&#32;&#32;&#32;CXString&#32;language;
00955 &#32;&#32;&#32;&#32;&#32;&#32;CXString&#32;definedIn;
00956 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;generated;
00957 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="__c_index_8cpp_1a56b80d0bcb6eecee56bf8aa8e5c80896">clang_Cursor_isExternalSymbol</link>(Cursor,&#32;&amp;language,&#32;&amp;definedIn,
00958 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;generated))&#32;{
00959 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;printf(<emphasis role="stringliteral">&quot;&#32;(external&#32;lang:&#32;%s,&#32;defined:&#32;%s,&#32;gen:&#32;%d)&quot;</emphasis>,
00960 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__c_x_string_8cpp_1acd478c1b1785e17c0fe377bd70a2195f">clang_getCString</link>(language),&#32;<link linkend="__c_x_string_8cpp_1acd478c1b1785e17c0fe377bd70a2195f">clang_getCString</link>(definedIn),&#32;generated);
00961 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__c_x_string_8cpp_1a46c85f1255580ed186aa6f7380a06883">clang_disposeString</link>(language);
00962 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__c_x_string_8cpp_1a46c85f1255580ed186aa6f7380a06883">clang_disposeString</link>(definedIn);
00963 &#32;&#32;&#32;&#32;&#32;&#32;}
00964 &#32;&#32;&#32;&#32;}
00965 
00966 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(Cursor.kind&#32;==&#32;CXCursor_IBOutletCollectionAttr)&#32;{
00967 &#32;&#32;&#32;&#32;&#32;&#32;CXType&#32;T&#32;=
00968 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__c_x_type_8cpp_1a3d8480e82fc0cdc770e5ecd3c88ffad7">clang_getCanonicalType</link>(<link linkend="__c_index_8cpp_1abddfbdf52be8460f6501ca428494ee48">clang_getIBOutletCollectionType</link>(Cursor));
00969 &#32;&#32;&#32;&#32;&#32;&#32;CXString&#32;S&#32;=&#32;<link linkend="__c_x_type_8cpp_1a7bb1a114f09f7b616a229a8bb874f2f1">clang_getTypeKindSpelling</link>(T.kind);
00970 &#32;&#32;&#32;&#32;&#32;&#32;printf(<emphasis role="stringliteral">&quot;&#32;[IBOutletCollection=%s]&quot;</emphasis>,&#32;<link linkend="__c_x_string_8cpp_1acd478c1b1785e17c0fe377bd70a2195f">clang_getCString</link>(S));
00971 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__c_x_string_8cpp_1a46c85f1255580ed186aa6f7380a06883">clang_disposeString</link>(S);
00972 &#32;&#32;&#32;&#32;}
00973 &#32;&#32;&#32;&#32;
00974 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(Cursor.kind&#32;==&#32;CXCursor_CXXBaseSpecifier)&#32;{
00975 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">enum</emphasis>&#32;CX_CXXAccessSpecifier&#32;access&#32;=&#32;<link linkend="__c_index_c_x_x_8cpp_1aaf7993362c5af9475b57fa2e577c2112">clang_getCXXAccessSpecifier</link>(Cursor);
00976 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;isVirtual&#32;=&#32;<link linkend="__c_index_c_x_x_8cpp_1abdcc0d170ceac8f26fb6974b08471ae2">clang_isVirtualBase</link>(Cursor);
00977 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*accessStr&#32;=&#32;0;
00978 
00979 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(access)&#32;{
00980 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CX_CXXInvalidAccessSpecifier:
00981 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;accessStr&#32;=&#32;<emphasis role="stringliteral">&quot;invalid&quot;</emphasis>;&#32;<emphasis role="keywordflow">break</emphasis>;
00982 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CX_CXXPublic:
00983 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;accessStr&#32;=&#32;<emphasis role="stringliteral">&quot;public&quot;</emphasis>;&#32;<emphasis role="keywordflow">break</emphasis>;
00984 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CX_CXXProtected:
00985 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;accessStr&#32;=&#32;<emphasis role="stringliteral">&quot;protected&quot;</emphasis>;&#32;<emphasis role="keywordflow">break</emphasis>;
00986 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CX_CXXPrivate:
00987 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;accessStr&#32;=&#32;<emphasis role="stringliteral">&quot;private&quot;</emphasis>;&#32;<emphasis role="keywordflow">break</emphasis>;
00988 &#32;&#32;&#32;&#32;&#32;&#32;}&#32;&#32;&#32;&#32;&#32;&#32;
00989 &#32;&#32;&#32;&#32;&#32;&#32;
00990 &#32;&#32;&#32;&#32;&#32;&#32;printf(<emphasis role="stringliteral">&quot;&#32;[access=%s&#32;isVirtual=%s]&quot;</emphasis>,&#32;accessStr,
00991 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;isVirtual&#32;?&#32;<emphasis role="stringliteral">&quot;true&quot;</emphasis>&#32;:&#32;<emphasis role="stringliteral">&quot;false&quot;</emphasis>);
00992 &#32;&#32;&#32;&#32;}
00993 
00994 &#32;&#32;&#32;&#32;SpecializationOf&#32;=&#32;<link linkend="__c_index_c_x_x_8cpp_1a53aeb792021508f8ef3810927064b136">clang_getSpecializedCursorTemplate</link>(Cursor);
00995 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!<link linkend="__c_index_8cpp_1a96d5f0059613428736715de616ed38f9">clang_equalCursors</link>(SpecializationOf,&#32;<link linkend="__c_index_8cpp_1aa22233466eaf91f6f3cf6b84255c3b68">clang_getNullCursor</link>()))&#32;{
00996 &#32;&#32;&#32;&#32;&#32;&#32;CXSourceLocation&#32;Loc&#32;=&#32;<link linkend="__c_index_8cpp_1a98001a3f8eb3a76d9c12821c45ef3708">clang_getCursorLocation</link>(SpecializationOf);
00997 &#32;&#32;&#32;&#32;&#32;&#32;CXString&#32;Name&#32;=&#32;<link linkend="__c_index_8cpp_1a412f1282680f05ef2b991f21a59ad3ac">clang_getCursorSpelling</link>(SpecializationOf);
00998 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__c_x_source_location_8cpp_1ae2d805527135aac587ca5c8017bde0ef">clang_getSpellingLocation</link>(Loc,&#32;0,&#32;&amp;line,&#32;&amp;column,&#32;0);
00999 &#32;&#32;&#32;&#32;&#32;&#32;printf(<emphasis role="stringliteral">&quot;&#32;[Specialization&#32;of&#32;%s:%d:%d]&quot;</emphasis>,
01000 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__c_x_string_8cpp_1acd478c1b1785e17c0fe377bd70a2195f">clang_getCString</link>(Name),&#32;line,&#32;column);
01001 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__c_x_string_8cpp_1a46c85f1255580ed186aa6f7380a06883">clang_disposeString</link>(Name);
01002 
01003 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(Cursor.kind&#32;==&#32;CXCursor_FunctionDecl)&#32;{
01004 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;Collect&#32;the&#32;template&#32;parameter&#32;kinds&#32;from&#32;the&#32;base&#32;template.&#32;*/</emphasis>
01005 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;NumTemplateArgs&#32;=&#32;<link linkend="__c_x_cursor_8cpp_1accb5e7f9bb249d933b1b77fdc53fc5da">clang_Cursor_getNumTemplateArguments</link>(Cursor);
01006 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;I;
01007 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(NumTemplateArgs&#32;&lt;&#32;0)&#32;{
01008 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;printf(<emphasis role="stringliteral">&quot;&#32;[no&#32;template&#32;arg&#32;info]&quot;</emphasis>);
01009 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
01010 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(I&#32;=&#32;0;&#32;I&#32;&lt;&#32;NumTemplateArgs;&#32;I++)&#32;{
01011 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">enum</emphasis>&#32;CXTemplateArgumentKind&#32;TAK&#32;=
01012 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__c_x_cursor_8cpp_1ab1c5cb44256e5b1861c54b4a2cb48574">clang_Cursor_getTemplateArgumentKind</link>(Cursor,&#32;I);
01013 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">switch</emphasis>(TAK)&#32;{
01014 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXTemplateArgumentKind_Type:
01015 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
01016 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;CXType&#32;T&#32;=&#32;<link linkend="__c_x_cursor_8cpp_1a96e7b0702b7bd3ea7cbbb081b3c52268">clang_Cursor_getTemplateArgumentType</link>(Cursor,&#32;I);
01017 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;CXString&#32;S&#32;=&#32;<link linkend="__c_x_type_8cpp_1ae144228507fed08fdf97002f5308071d">clang_getTypeSpelling</link>(T);
01018 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;printf(<emphasis role="stringliteral">&quot;&#32;[Template&#32;arg&#32;%d:&#32;kind:&#32;%d,&#32;type:&#32;%s]&quot;</emphasis>,
01019 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;I,&#32;TAK,&#32;<link linkend="__c_x_string_8cpp_1acd478c1b1785e17c0fe377bd70a2195f">clang_getCString</link>(S));
01020 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__c_x_string_8cpp_1a46c85f1255580ed186aa6f7380a06883">clang_disposeString</link>(S);
01021 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
01022 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
01023 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXTemplateArgumentKind_Integral:
01024 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;printf(<emphasis role="stringliteral">&quot;&#32;[Template&#32;arg&#32;%d:&#32;kind:&#32;%d,&#32;intval:&#32;%lld]&quot;</emphasis>,
01025 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;I,&#32;TAK,&#32;<link linkend="__c_x_cursor_8cpp_1a49f91eaf8d2c14fe0541f9b8d2fbd3c2">clang_Cursor_getTemplateArgumentValue</link>(Cursor,&#32;I));
01026 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
01027 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">default</emphasis>:
01028 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;printf(<emphasis role="stringliteral">&quot;&#32;[Template&#32;arg&#32;%d:&#32;kind:&#32;%d]\n&quot;</emphasis>,&#32;I,&#32;TAK);
01029 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
01030 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
01031 &#32;&#32;&#32;&#32;&#32;&#32;}
01032 &#32;&#32;&#32;&#32;}
01033 
01034 &#32;&#32;&#32;&#32;<link linkend="__c_x_cursor_8cpp_1a04940185910bcfa9b6d008b3fb5aba1c">clang_getOverriddenCursors</link>(Cursor,&#32;&amp;overridden,&#32;&amp;num_overridden);
01035 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(num_overridden)&#32;{&#32;&#32;&#32;&#32;&#32;&#32;
01036 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;I;
01037 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_line_col">LineCol</link>&#32;lineCols[50];
01038 &#32;&#32;&#32;&#32;&#32;&#32;assert(num_overridden&#32;&lt;=&#32;50);
01039 &#32;&#32;&#32;&#32;&#32;&#32;printf(<emphasis role="stringliteral">&quot;&#32;[Overrides&#32;&quot;</emphasis>);
01040 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(I&#32;=&#32;0;&#32;I&#32;!=&#32;num_overridden;&#32;++I)&#32;{
01041 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;CXSourceLocation&#32;Loc&#32;=&#32;<link linkend="__c_index_8cpp_1a98001a3f8eb3a76d9c12821c45ef3708">clang_getCursorLocation</link>(overridden[I]);
01042 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__c_x_source_location_8cpp_1ae2d805527135aac587ca5c8017bde0ef">clang_getSpellingLocation</link>(Loc,&#32;0,&#32;&amp;line,&#32;&amp;column,&#32;0);
01043 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;lineCols[I].<link linkend="_struct_line_col_1a7224a4e629a73d0fefd83fa9291e5f9a">line</link>&#32;=&#32;line;
01044 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;lineCols[I].<link linkend="_struct_line_col_1afbbf106eb9a2d85a640cba4172ca8d74">col</link>&#32;=&#32;column;
01045 &#32;&#32;&#32;&#32;&#32;&#32;}
01046 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;Make&#32;the&#32;order&#32;of&#32;the&#32;override&#32;list&#32;deterministic.&#32;*/</emphasis>
01047 &#32;&#32;&#32;&#32;&#32;&#32;qsort(lineCols,&#32;num_overridden,&#32;<emphasis role="keyword">sizeof</emphasis>(<link linkend="_struct_line_col">LineCol</link>),&#32;lineCol_cmp);
01048 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(I&#32;=&#32;0;&#32;I&#32;!=&#32;num_overridden;&#32;++I)&#32;{
01049 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(I)
01050 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;printf(<emphasis role="stringliteral">&quot;,&#32;&quot;</emphasis>);
01051 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;printf(<emphasis role="stringliteral">&quot;@%d:%d&quot;</emphasis>,&#32;lineCols[I].line,&#32;lineCols[I].col);
01052 &#32;&#32;&#32;&#32;&#32;&#32;}
01053 &#32;&#32;&#32;&#32;&#32;&#32;printf(<emphasis role="stringliteral">&quot;]&quot;</emphasis>);
01054 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__c_x_cursor_8cpp_1a2135ed9fac6fe68a043d59e466ee9842">clang_disposeOverriddenCursors</link>(overridden);
01055 &#32;&#32;&#32;&#32;}
01056 &#32;&#32;&#32;&#32;
01057 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(Cursor.kind&#32;==&#32;CXCursor_InclusionDirective)&#32;{
01058 &#32;&#32;&#32;&#32;&#32;&#32;CXFile&#32;File&#32;=&#32;<link linkend="__c_index_8cpp_1a9baf5d19004c01b13cca32574bf6f595">clang_getIncludedFile</link>(Cursor);
01059 &#32;&#32;&#32;&#32;&#32;&#32;CXString&#32;Included&#32;=&#32;<link linkend="__c_index_8cpp_1a263c34f5782353186990b2c990d648fc">clang_getFileName</link>(File);
01060 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*IncludedString&#32;=&#32;<link linkend="__c_x_string_8cpp_1acd478c1b1785e17c0fe377bd70a2195f">clang_getCString</link>(Included);
01061 &#32;&#32;&#32;&#32;&#32;&#32;printf(<emphasis role="stringliteral">&quot;&#32;(%s)&quot;</emphasis>,&#32;IncludedString&#32;?&#32;IncludedString&#32;:&#32;<emphasis role="stringliteral">&quot;(null)&quot;</emphasis>);
01062 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__c_x_string_8cpp_1a46c85f1255580ed186aa6f7380a06883">clang_disposeString</link>(Included);
01063 &#32;&#32;&#32;&#32;&#32;&#32;
01064 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="__c_index_8cpp_1a685b41c679e149e18549cf4f96dd966e">clang_isFileMultipleIncludeGuarded</link>(TU,&#32;File))
01065 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;printf(<emphasis role="stringliteral">&quot;&#32;&#32;[multi-include&#32;guarded]&quot;</emphasis>);
01066 &#32;&#32;&#32;&#32;}
01067 &#32;&#32;&#32;&#32;
01068 &#32;&#32;&#32;&#32;CursorExtent&#32;=&#32;<link linkend="__c_index_8cpp_1ac535682dfe6658513121c4cf6d4b4076">clang_getCursorExtent</link>(Cursor);
01069 &#32;&#32;&#32;&#32;RefNameRange&#32;=&#32;<link linkend="__c_index_8cpp_1afaace7c7d9d35d3f6d2b947d97a926df">clang_getCursorReferenceNameRange</link>(Cursor,&#32;
01070 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;CXNameRange_WantQualifier
01071 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;|&#32;CXNameRange_WantSinglePiece
01072 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;|&#32;CXNameRange_WantTemplateArgs,
01073 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;0);
01074 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!<link linkend="__c_x_source_location_8cpp_1a1db87704023c788fcbaeac5c7a940560">clang_equalRanges</link>(CursorExtent,&#32;RefNameRange))
01075 &#32;&#32;&#32;&#32;&#32;&#32;PrintRange(RefNameRange,&#32;<emphasis role="stringliteral">&quot;SingleRefName&quot;</emphasis>);
01076 &#32;&#32;&#32;&#32;
01077 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(RefNameRangeNr&#32;=&#32;0;&#32;1;&#32;RefNameRangeNr++)&#32;{
01078 &#32;&#32;&#32;&#32;&#32;&#32;RefNameRange&#32;=&#32;<link linkend="__c_index_8cpp_1afaace7c7d9d35d3f6d2b947d97a926df">clang_getCursorReferenceNameRange</link>(Cursor,&#32;
01079 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;CXNameRange_WantQualifier
01080 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;|&#32;CXNameRange_WantTemplateArgs,
01081 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;RefNameRangeNr);
01082 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="__c_x_source_location_8cpp_1a1db87704023c788fcbaeac5c7a940560">clang_equalRanges</link>(<link linkend="__c_x_source_location_8cpp_1afadb1a95ce51366407cf6c363299a17f">clang_getNullRange</link>(),&#32;RefNameRange))
01083 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
01084 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!<link linkend="__c_x_source_location_8cpp_1a1db87704023c788fcbaeac5c7a940560">clang_equalRanges</link>(CursorExtent,&#32;RefNameRange))
01085 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;PrintRange(RefNameRange,&#32;<emphasis role="stringliteral">&quot;RefName&quot;</emphasis>);
01086 &#32;&#32;&#32;&#32;}
01087 
01088 &#32;&#32;&#32;&#32;PrintCursorComments(Cursor,&#32;CommentSchemaFile);
01089 
01090 &#32;&#32;&#32;&#32;{
01091 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;PropAttrs&#32;=&#32;<link linkend="__c_index_8cpp_1af65ce11e5a95923ac8a65745b5e4476c">clang_Cursor_getObjCPropertyAttributes</link>(Cursor,&#32;0);
01092 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(PropAttrs&#32;!=&#32;CXObjCPropertyAttr_noattr)&#32;{
01093 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;printf(<emphasis role="stringliteral">&quot;&#32;[&quot;</emphasis>);
01094 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#define&#32;PRINT_PROP_ATTR(A)&#32;\</emphasis>
01095 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;if&#32;(PropAttrs&#32;&amp;&#32;CXObjCPropertyAttr_##A)&#32;printf(#A&#32;&quot;,&quot;</emphasis>)
01096 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_c-index-test_8c_1a37b2be89ffcac55a11a29368f7d4765b">PRINT_PROP_ATTR</link>(readonly);
01097 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_c-index-test_8c_1a37b2be89ffcac55a11a29368f7d4765b">PRINT_PROP_ATTR</link>(getter);
01098 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_c-index-test_8c_1a37b2be89ffcac55a11a29368f7d4765b">PRINT_PROP_ATTR</link>(assign);
01099 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_c-index-test_8c_1a37b2be89ffcac55a11a29368f7d4765b">PRINT_PROP_ATTR</link>(readwrite);
01100 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_c-index-test_8c_1a37b2be89ffcac55a11a29368f7d4765b">PRINT_PROP_ATTR</link>(retain);
01101 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_c-index-test_8c_1a37b2be89ffcac55a11a29368f7d4765b">PRINT_PROP_ATTR</link>(copy);
01102 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_c-index-test_8c_1a37b2be89ffcac55a11a29368f7d4765b">PRINT_PROP_ATTR</link>(nonatomic);
01103 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_c-index-test_8c_1a37b2be89ffcac55a11a29368f7d4765b">PRINT_PROP_ATTR</link>(setter);
01104 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_c-index-test_8c_1a37b2be89ffcac55a11a29368f7d4765b">PRINT_PROP_ATTR</link>(atomic);
01105 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_c-index-test_8c_1a37b2be89ffcac55a11a29368f7d4765b">PRINT_PROP_ATTR</link>(weak);
01106 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_c-index-test_8c_1a37b2be89ffcac55a11a29368f7d4765b">PRINT_PROP_ATTR</link>(strong);
01107 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_c-index-test_8c_1a37b2be89ffcac55a11a29368f7d4765b">PRINT_PROP_ATTR</link>(unsafe_unretained);
01108 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_c-index-test_8c_1a37b2be89ffcac55a11a29368f7d4765b">PRINT_PROP_ATTR</link>(<emphasis role="keyword">class</emphasis>);
01109 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;printf(<emphasis role="stringliteral">&quot;]&quot;</emphasis>);
01110 &#32;&#32;&#32;&#32;&#32;&#32;}
01111 &#32;&#32;&#32;&#32;}
01112 
01113 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(Cursor.kind&#32;==&#32;CXCursor_ObjCPropertyDecl)&#32;{
01114 &#32;&#32;&#32;&#32;&#32;&#32;CXString&#32;Name&#32;=&#32;<link linkend="__c_index_8cpp_1a74073124651f4d25994f1c660a3b097f">clang_Cursor_getObjCPropertyGetterName</link>(Cursor);
01115 &#32;&#32;&#32;&#32;&#32;&#32;CXString&#32;Spelling&#32;=&#32;<link linkend="__c_index_8cpp_1a412f1282680f05ef2b991f21a59ad3ac">clang_getCursorSpelling</link>(Cursor);
01116 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*CName&#32;=&#32;<link linkend="__c_x_string_8cpp_1acd478c1b1785e17c0fe377bd70a2195f">clang_getCString</link>(Name);
01117 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*CSpelling&#32;=&#32;<link linkend="__c_x_string_8cpp_1acd478c1b1785e17c0fe377bd70a2195f">clang_getCString</link>(Spelling);
01118 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(CName&#32;&amp;&amp;&#32;strcmp(CName,&#32;CSpelling))&#32;{
01119 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;printf(<emphasis role="stringliteral">&quot;&#32;(getter=%s)&quot;</emphasis>,&#32;CName);
01120 &#32;&#32;&#32;&#32;&#32;&#32;}
01121 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__c_x_string_8cpp_1a46c85f1255580ed186aa6f7380a06883">clang_disposeString</link>(Spelling);
01122 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__c_x_string_8cpp_1a46c85f1255580ed186aa6f7380a06883">clang_disposeString</link>(Name);
01123 &#32;&#32;&#32;&#32;}
01124 
01125 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(Cursor.kind&#32;==&#32;CXCursor_ObjCPropertyDecl)&#32;{
01126 &#32;&#32;&#32;&#32;&#32;&#32;CXString&#32;Name&#32;=&#32;<link linkend="__c_index_8cpp_1ac65f3c2eccf604efa14c1b286cce5e26">clang_Cursor_getObjCPropertySetterName</link>(Cursor);
01127 &#32;&#32;&#32;&#32;&#32;&#32;CXString&#32;Spelling&#32;=&#32;<link linkend="__c_index_8cpp_1a412f1282680f05ef2b991f21a59ad3ac">clang_getCursorSpelling</link>(Cursor);
01128 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*CName&#32;=&#32;<link linkend="__c_x_string_8cpp_1acd478c1b1785e17c0fe377bd70a2195f">clang_getCString</link>(Name);
01129 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*CSpelling&#32;=&#32;<link linkend="__c_x_string_8cpp_1acd478c1b1785e17c0fe377bd70a2195f">clang_getCString</link>(Spelling);
01130 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">char</emphasis>&#32;*DefaultSetter&#32;=&#32;malloc(strlen(CSpelling)&#32;+&#32;5);
01131 &#32;&#32;&#32;&#32;&#32;&#32;sprintf(DefaultSetter,&#32;<emphasis role="stringliteral">&quot;set%s:&quot;</emphasis>,&#32;CSpelling);
01132 &#32;&#32;&#32;&#32;&#32;&#32;DefaultSetter[3]&#32;&amp;=&#32;~(1&#32;&lt;&lt;&#32;5);&#32;<emphasis role="comment">/*&#32;Make&#32;uppercase&#32;*/</emphasis>
01133 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(CName&#32;&amp;&amp;&#32;strcmp(CName,&#32;DefaultSetter))&#32;{
01134 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;printf(<emphasis role="stringliteral">&quot;&#32;(setter=%s)&quot;</emphasis>,&#32;CName);
01135 &#32;&#32;&#32;&#32;&#32;&#32;}
01136 &#32;&#32;&#32;&#32;&#32;&#32;free(DefaultSetter);
01137 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__c_x_string_8cpp_1a46c85f1255580ed186aa6f7380a06883">clang_disposeString</link>(Spelling);
01138 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__c_x_string_8cpp_1a46c85f1255580ed186aa6f7380a06883">clang_disposeString</link>(Name);
01139 &#32;&#32;&#32;&#32;}
01140 
01141 &#32;&#32;&#32;&#32;{
01142 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;QT&#32;=&#32;<link linkend="__c_index_8cpp_1a4aa93be0b9a3a68fbe3357f97e41b4ea">clang_Cursor_getObjCDeclQualifiers</link>(Cursor);
01143 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(QT&#32;!=&#32;CXObjCDeclQualifier_None)&#32;{
01144 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;printf(<emphasis role="stringliteral">&quot;&#32;[&quot;</emphasis>);
01145 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#define&#32;PRINT_OBJC_QUAL(A)&#32;\</emphasis>
01146 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;if&#32;(QT&#32;&amp;&#32;CXObjCDeclQualifier_##A)&#32;printf(#A&#32;&quot;,&quot;</emphasis>)
01147 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_c-index-test_8c_1a4a9849afcef2f49ffddd89cc8ec05e31">PRINT_OBJC_QUAL</link>(In);
01148 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_c-index-test_8c_1a4a9849afcef2f49ffddd89cc8ec05e31">PRINT_OBJC_QUAL</link>(Inout);
01149 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_c-index-test_8c_1a4a9849afcef2f49ffddd89cc8ec05e31">PRINT_OBJC_QUAL</link>(Out);
01150 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_c-index-test_8c_1a4a9849afcef2f49ffddd89cc8ec05e31">PRINT_OBJC_QUAL</link>(Bycopy);
01151 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_c-index-test_8c_1a4a9849afcef2f49ffddd89cc8ec05e31">PRINT_OBJC_QUAL</link>(Byref);
01152 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_c-index-test_8c_1a4a9849afcef2f49ffddd89cc8ec05e31">PRINT_OBJC_QUAL</link>(Oneway);
01153 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;printf(<emphasis role="stringliteral">&quot;]&quot;</emphasis>);
01154 &#32;&#32;&#32;&#32;&#32;&#32;}
01155 &#32;&#32;&#32;&#32;}
01156 &#32;&#32;}
01157 }
01158 
01159 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;GetCursorSource(CXCursor&#32;Cursor)&#32;{
01160 &#32;&#32;CXSourceLocation&#32;Loc&#32;=&#32;<link linkend="__c_index_8cpp_1a98001a3f8eb3a76d9c12821c45ef3708">clang_getCursorLocation</link>(Cursor);
01161 &#32;&#32;CXString&#32;source;
01162 &#32;&#32;CXFile&#32;file;
01163 &#32;&#32;<link linkend="__c_x_source_location_8cpp_1ab2dea99bd78deea3e50564414208687b">clang_getExpansionLocation</link>(Loc,&#32;&amp;file,&#32;0,&#32;0,&#32;0);
01164 &#32;&#32;source&#32;=&#32;<link linkend="__c_index_8cpp_1a263c34f5782353186990b2c990d648fc">clang_getFileName</link>(file);
01165 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!<link linkend="__c_x_string_8cpp_1acd478c1b1785e17c0fe377bd70a2195f">clang_getCString</link>(source))&#32;{
01166 &#32;&#32;&#32;&#32;<link linkend="__c_x_string_8cpp_1a46c85f1255580ed186aa6f7380a06883">clang_disposeString</link>(source);
01167 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="stringliteral">&quot;&lt;invalid&#32;loc&gt;&quot;</emphasis>;
01168 &#32;&#32;}
01169 &#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
01170 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*b&#32;=&#32;<link linkend="_c-index-test_8c_1a8c42f4a0046f13eff609604e4e6dd88a">basename</link>(<link linkend="__c_x_string_8cpp_1acd478c1b1785e17c0fe377bd70a2195f">clang_getCString</link>(source));
01171 &#32;&#32;&#32;&#32;<link linkend="__c_x_string_8cpp_1a46c85f1255580ed186aa6f7380a06883">clang_disposeString</link>(source);
01172 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;b;
01173 &#32;&#32;}
01174 }
01175 
01176 <emphasis role="keyword">static</emphasis>&#32;CXString&#32;createCXString(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*CS)&#32;{
01177 &#32;&#32;CXString&#32;Str;
01178 &#32;&#32;Str.data&#32;=&#32;(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;*)&#32;CS;
01179 &#32;&#32;Str.private_flags&#32;=&#32;0;
01180 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;Str;
01181 }
01182 
01183 <emphasis role="comment">/******************************************************************************/</emphasis>
01184 <emphasis role="comment">/*&#32;Callbacks.&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*/</emphasis>
01185 <emphasis role="comment">/******************************************************************************/</emphasis>
01186 
<anchor xml:id="_c-index-test_8c_source_1l01187"/><link linkend="_c-index-test_8c_1a66dfbd9b90aeaaa39988cd8ea0bbc669">01187</link> <emphasis role="keyword">typedef</emphasis>&#32;void&#32;(*<link linkend="_c-index-test_8c_1a66dfbd9b90aeaaa39988cd8ea0bbc669">PostVisitTU</link>)(CXTranslationUnit);
01188 
<anchor xml:id="_c-index-test_8c_source_1l01189"/><link linkend="_c-index-test_8c_1a6163717d21d3db3edb29824ce554d190">01189</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_c-index-test_8c_1a6163717d21d3db3edb29824ce554d190">PrintDiagnostic</link>(CXDiagnostic&#32;Diagnostic)&#32;{
01190 &#32;&#32;FILE&#32;*out&#32;=&#32;stderr;
01191 &#32;&#32;CXFile&#32;file;
01192 &#32;&#32;CXString&#32;Msg;
01193 &#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;display_opts&#32;=&#32;CXDiagnostic_DisplaySourceLocation
01194 &#32;&#32;&#32;&#32;|&#32;CXDiagnostic_DisplayColumn&#32;|&#32;CXDiagnostic_DisplaySourceRanges
01195 &#32;&#32;&#32;&#32;|&#32;CXDiagnostic_DisplayOption;
01196 &#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;i,&#32;num_fixits;
01197 
01198 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="__c_index_diagnostic_8cpp_1a4acc9ff12cb403c96d56e87359dfc7c7">clang_getDiagnosticSeverity</link>(Diagnostic)&#32;==&#32;CXDiagnostic_Ignored)
01199 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
01200 
01201 &#32;&#32;Msg&#32;=&#32;<link linkend="__c_index_diagnostic_8cpp_1a3ed169ee4a472764c11724cc7768e6eb">clang_formatDiagnostic</link>(Diagnostic,&#32;display_opts);
01202 &#32;&#32;fprintf(stderr,&#32;<emphasis role="stringliteral">&quot;%s\n&quot;</emphasis>,&#32;<link linkend="__c_x_string_8cpp_1acd478c1b1785e17c0fe377bd70a2195f">clang_getCString</link>(Msg));
01203 &#32;&#32;<link linkend="__c_x_string_8cpp_1a46c85f1255580ed186aa6f7380a06883">clang_disposeString</link>(Msg);
01204 
01205 &#32;&#32;<link linkend="__c_x_source_location_8cpp_1ae2d805527135aac587ca5c8017bde0ef">clang_getSpellingLocation</link>(<link linkend="__c_index_diagnostic_8cpp_1a1e0502917ec39f222133358991a1dd0a">clang_getDiagnosticLocation</link>(Diagnostic),
01206 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;file,&#32;0,&#32;0,&#32;0);
01207 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!file)
01208 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
01209 
01210 &#32;&#32;num_fixits&#32;=&#32;<link linkend="__c_index_diagnostic_8cpp_1a328fab9bb901e108adb1b5ec5f3ed748">clang_getDiagnosticNumFixIts</link>(Diagnostic);
01211 &#32;&#32;fprintf(stderr,&#32;<emphasis role="stringliteral">&quot;Number&#32;FIX-ITs&#32;=&#32;%d\n&quot;</emphasis>,&#32;num_fixits);
01212 &#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(i&#32;=&#32;0;&#32;i&#32;!=&#32;num_fixits;&#32;++i)&#32;{
01213 &#32;&#32;&#32;&#32;CXSourceRange&#32;range;
01214 &#32;&#32;&#32;&#32;CXString&#32;insertion_text&#32;=&#32;<link linkend="__c_index_diagnostic_8cpp_1a3038a0534d19be1e8f0adc11373b3c69">clang_getDiagnosticFixIt</link>(Diagnostic,&#32;i,&#32;&amp;range);
01215 &#32;&#32;&#32;&#32;CXSourceLocation&#32;start&#32;=&#32;<link linkend="__c_x_source_location_8cpp_1a14a10dd8d9a4069c4fc1a7be62f58874">clang_getRangeStart</link>(range);
01216 &#32;&#32;&#32;&#32;CXSourceLocation&#32;end&#32;=&#32;<link linkend="__c_x_source_location_8cpp_1a146c4bda0251ee320dc6e4b1b3fbb919">clang_getRangeEnd</link>(range);
01217 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;start_line,&#32;start_column,&#32;end_line,&#32;end_column;
01218 &#32;&#32;&#32;&#32;CXFile&#32;start_file,&#32;end_file;
01219 &#32;&#32;&#32;&#32;<link linkend="__c_x_source_location_8cpp_1ae2d805527135aac587ca5c8017bde0ef">clang_getSpellingLocation</link>(start,&#32;&amp;start_file,&#32;&amp;start_line,
01220 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;start_column,&#32;0);
01221 &#32;&#32;&#32;&#32;<link linkend="__c_x_source_location_8cpp_1ae2d805527135aac587ca5c8017bde0ef">clang_getSpellingLocation</link>(end,&#32;&amp;end_file,&#32;&amp;end_line,&#32;&amp;end_column,&#32;0);
01222 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="__c_x_source_location_8cpp_1aa18c665664a0dd6ebf8eae9954a3a696">clang_equalLocations</link>(start,&#32;end))&#32;{
01223 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;Insertion.&#32;*/</emphasis>
01224 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(start_file&#32;==&#32;file)
01225 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;fprintf(out,&#32;<emphasis role="stringliteral">&quot;FIX-IT:&#32;Insert&#32;\&quot;%s\&quot;&#32;at&#32;%d:%d\n&quot;</emphasis>,
01226 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__c_x_string_8cpp_1acd478c1b1785e17c0fe377bd70a2195f">clang_getCString</link>(insertion_text),&#32;start_line,&#32;start_column);
01227 &#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(strcmp(<link linkend="__c_x_string_8cpp_1acd478c1b1785e17c0fe377bd70a2195f">clang_getCString</link>(insertion_text),&#32;<emphasis role="stringliteral">&quot;&quot;</emphasis>)&#32;==&#32;0)&#32;{
01228 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;Removal.&#32;*/</emphasis>
01229 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(start_file&#32;==&#32;file&#32;&amp;&amp;&#32;end_file&#32;==&#32;file)&#32;{
01230 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;fprintf(out,&#32;<emphasis role="stringliteral">&quot;FIX-IT:&#32;Remove&#32;&quot;</emphasis>);
01231 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;PrintExtent(out,&#32;start_line,&#32;start_column,&#32;end_line,&#32;end_column);
01232 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;fprintf(out,&#32;<emphasis role="stringliteral">&quot;\n&quot;</emphasis>);
01233 &#32;&#32;&#32;&#32;&#32;&#32;}
01234 &#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
01235 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;Replacement.&#32;*/</emphasis>
01236 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(start_file&#32;==&#32;end_file)&#32;{
01237 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;fprintf(out,&#32;<emphasis role="stringliteral">&quot;FIX-IT:&#32;Replace&#32;&quot;</emphasis>);
01238 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;PrintExtent(out,&#32;start_line,&#32;start_column,&#32;end_line,&#32;end_column);
01239 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;fprintf(out,&#32;<emphasis role="stringliteral">&quot;&#32;with&#32;\&quot;%s\&quot;\n&quot;</emphasis>,&#32;<link linkend="__c_x_string_8cpp_1acd478c1b1785e17c0fe377bd70a2195f">clang_getCString</link>(insertion_text));
01240 &#32;&#32;&#32;&#32;&#32;&#32;}
01241 &#32;&#32;&#32;&#32;}
01242 &#32;&#32;&#32;&#32;<link linkend="__c_x_string_8cpp_1a46c85f1255580ed186aa6f7380a06883">clang_disposeString</link>(insertion_text);
01243 &#32;&#32;}
01244 }
01245 
<anchor xml:id="_c-index-test_8c_source_1l01246"/><link linkend="_c-index-test_8c_1a1edb92a2047f535a1f1407b9557cd10d">01246</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_c-index-test_8c_1a1edb92a2047f535a1f1407b9557cd10d">PrintDiagnosticSet</link>(CXDiagnosticSet&#32;Set)&#32;{
01247 &#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;i&#32;=&#32;0,&#32;n&#32;=&#32;<link linkend="__c_index_diagnostic_8cpp_1a9861abba19ec80dae4db68998828261d">clang_getNumDiagnosticsInSet</link>(Set);
01248 &#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(&#32;;&#32;i&#32;!=&#32;n&#32;;&#32;++i)&#32;{
01249 &#32;&#32;&#32;&#32;CXDiagnostic&#32;Diag&#32;=&#32;<link linkend="__c_index_diagnostic_8cpp_1acc45fefa1e17eade2d10177d4ff77851">clang_getDiagnosticInSet</link>(Set,&#32;i);
01250 &#32;&#32;&#32;&#32;CXDiagnosticSet&#32;ChildDiags&#32;=&#32;<link linkend="__c_index_diagnostic_8cpp_1abca973dc6f01b106edd47a39f480dd8f">clang_getChildDiagnostics</link>(Diag);
01251 &#32;&#32;&#32;&#32;<link linkend="_c-index-test_8c_1a6163717d21d3db3edb29824ce554d190">PrintDiagnostic</link>(Diag);
01252 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(ChildDiags)
01253 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_c-index-test_8c_1a1edb92a2047f535a1f1407b9557cd10d">PrintDiagnosticSet</link>(ChildDiags);
01254 &#32;&#32;}&#32;&#32;
01255 }
01256 
<anchor xml:id="_c-index-test_8c_source_1l01257"/><link linkend="_c-index-test_8c_1a40fceb7e4c2e16f5bce47bae394b973a">01257</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_c-index-test_8c_1a40fceb7e4c2e16f5bce47bae394b973a">PrintDiagnostics</link>(CXTranslationUnit&#32;TU)&#32;{
01258 &#32;&#32;CXDiagnosticSet&#32;TUSet&#32;=&#32;<link linkend="__c_index_diagnostic_8cpp_1a01fef60398b711267499e2eabd58806e">clang_getDiagnosticSetFromTU</link>(TU);
01259 &#32;&#32;<link linkend="_c-index-test_8c_1a1edb92a2047f535a1f1407b9557cd10d">PrintDiagnosticSet</link>(TUSet);
01260 &#32;&#32;<link linkend="__c_index_diagnostic_8cpp_1a0b2786b08bcfa94c6aebdb68249fcd85">clang_disposeDiagnosticSet</link>(TUSet);
01261 }
01262 
<anchor xml:id="_c-index-test_8c_source_1l01263"/><link linkend="_c-index-test_8c_1ad807e8418e9685a5284b2bbb776ade49">01263</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_c-index-test_8c_1ad807e8418e9685a5284b2bbb776ade49">PrintMemoryUsage</link>(CXTranslationUnit&#32;TU)&#32;{
01264 &#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;total&#32;=&#32;0;
01265 &#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;i&#32;=&#32;0;
01266 &#32;&#32;CXTUResourceUsage&#32;usage&#32;=&#32;<link linkend="__c_index_8cpp_1a72299455a328faf612d238bf6aee6eb6">clang_getCXTUResourceUsage</link>(TU);
01267 &#32;&#32;fprintf(stderr,&#32;<emphasis role="stringliteral">&quot;Memory&#32;usage:\n&quot;</emphasis>);
01268 &#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(i&#32;=&#32;0&#32;;&#32;i&#32;!=&#32;usage.numEntries;&#32;++i)&#32;{
01269 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*name&#32;=&#32;<link linkend="__c_index_8cpp_1aeba9f6263fe5dbde18abb55b2f321a34">clang_getTUResourceUsageName</link>(usage.entries[i].kind);
01270 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;amount&#32;=&#32;usage.entries[i].amount;
01271 &#32;&#32;&#32;&#32;total&#32;+=&#32;amount;
01272 &#32;&#32;&#32;&#32;fprintf(stderr,&#32;<emphasis role="stringliteral">&quot;&#32;&#32;%s&#32;:&#32;%ld&#32;bytes&#32;(%f&#32;MBytes)\n&quot;</emphasis>,&#32;name,&#32;amount,
01273 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;((<emphasis role="keywordtype">double</emphasis>)&#32;amount)/(1024*1024));
01274 &#32;&#32;}
01275 &#32;&#32;fprintf(stderr,&#32;<emphasis role="stringliteral">&quot;&#32;&#32;TOTAL&#32;=&#32;%ld&#32;bytes&#32;(%f&#32;MBytes)\n&quot;</emphasis>,&#32;total,
01276 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;((<emphasis role="keywordtype">double</emphasis>)&#32;total)/(1024*1024));
01277 &#32;&#32;<link linkend="__c_index_8cpp_1a3e9a2455e3253920304adc26c1084a6f">clang_disposeCXTUResourceUsage</link>(usage);&#32;&#32;
01278 }
01279 
01280 <emphasis role="comment">/******************************************************************************/</emphasis>
01281 <emphasis role="comment">/*&#32;Logic&#32;for&#32;testing&#32;traversal.&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*/</emphasis>
01282 <emphasis role="comment">/******************************************************************************/</emphasis>
01283 
<anchor xml:id="_c-index-test_8c_source_1l01284"/><link linkend="_c-index-test_8c_1a592066faf85d73bd5a13ca28d5aca47d">01284</link> <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;PrintCursorExtent(CXCursor&#32;C)&#32;{
01285 &#32;&#32;CXSourceRange&#32;extent&#32;=&#32;<link linkend="__c_index_8cpp_1ac535682dfe6658513121c4cf6d4b4076">clang_getCursorExtent</link>(C);
01286 &#32;&#32;PrintRange(extent,&#32;<emphasis role="stringliteral">&quot;Extent&quot;</emphasis>);
01287 }
01288 
01289 <emphasis role="comment">/*&#32;Data&#32;used&#32;by&#32;the&#32;visitors.&#32;*/</emphasis>
<anchor xml:id="_c-index-test_8c_source_1l01290"/><link linkend="_struct_visitor_data">01290</link> <emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">struct&#32;</emphasis>{
<anchor xml:id="_c-index-test_8c_source_1l01291"/><link linkend="_struct_visitor_data_1a60cc8c659a50f0e8af07b26902ea8b99">01291</link> &#32;&#32;CXTranslationUnit&#32;<link linkend="_struct_visitor_data_1a60cc8c659a50f0e8af07b26902ea8b99">TU</link>;
<anchor xml:id="_c-index-test_8c_source_1l01292"/><link linkend="_struct_visitor_data_1a2adae660b33ba2270dd98ecffbec5fb7">01292</link> &#32;&#32;<emphasis role="keyword">enum</emphasis>&#32;CXCursorKind&#32;*<link linkend="_struct_visitor_data_1a2adae660b33ba2270dd98ecffbec5fb7">Filter</link>;
<anchor xml:id="_c-index-test_8c_source_1l01293"/><link linkend="_struct_visitor_data_1a6a459e19a9daaa88b22a8fcdbe6041db">01293</link> &#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*<link linkend="_struct_visitor_data_1a6a459e19a9daaa88b22a8fcdbe6041db">CommentSchemaFile</link>;
01294 }&#32;<link linkend="_struct_visitor_data">VisitorData</link>;
01295 
01296 
01297 <emphasis role="keyword">enum</emphasis>&#32;CXChildVisitResult&#32;<link linkend="_c-index-test_8c_1a592066faf85d73bd5a13ca28d5aca47d">FilteredPrintingVisitor</link>(CXCursor&#32;Cursor,
01298 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;CXCursor&#32;Parent,
01299 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;CXClientData&#32;ClientData)&#32;{
01300 &#32;&#32;<link linkend="_struct_visitor_data">VisitorData</link>&#32;*Data&#32;=&#32;(<link linkend="_struct_visitor_data">VisitorData</link>&#32;*)ClientData;
01301 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!Data-&gt;<link linkend="_struct_visitor_data_1a2adae660b33ba2270dd98ecffbec5fb7">Filter</link>&#32;||&#32;(Cursor.kind&#32;==&#32;*(<emphasis role="keyword">enum</emphasis>&#32;CXCursorKind&#32;*)Data-&gt;<link linkend="_struct_visitor_data_1a2adae660b33ba2270dd98ecffbec5fb7">Filter</link>))&#32;{
01302 &#32;&#32;&#32;&#32;CXSourceLocation&#32;Loc&#32;=&#32;<link linkend="__c_index_8cpp_1a98001a3f8eb3a76d9c12821c45ef3708">clang_getCursorLocation</link>(Cursor);
01303 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;line,&#32;column;
01304 &#32;&#32;&#32;&#32;<link linkend="__c_x_source_location_8cpp_1ae2d805527135aac587ca5c8017bde0ef">clang_getSpellingLocation</link>(Loc,&#32;0,&#32;&amp;line,&#32;&amp;column,&#32;0);
01305 &#32;&#32;&#32;&#32;printf(<emphasis role="stringliteral">&quot;//&#32;%s:&#32;%s:%d:%d:&#32;&quot;</emphasis>,&#32;FileCheckPrefix,
01306 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;GetCursorSource(Cursor),&#32;line,&#32;column);
01307 &#32;&#32;&#32;&#32;PrintCursor(Cursor,&#32;Data-&gt;<link linkend="_struct_visitor_data_1a6a459e19a9daaa88b22a8fcdbe6041db">CommentSchemaFile</link>);
01308 &#32;&#32;&#32;&#32;PrintCursorExtent(Cursor);
01309 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="__c_index_8cpp_1a5d47db8f608ae0c266d6551875d46b80">clang_isDeclaration</link>(Cursor.kind))&#32;{
01310 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">enum</emphasis>&#32;CX_CXXAccessSpecifier&#32;access&#32;=&#32;<link linkend="__c_index_c_x_x_8cpp_1aaf7993362c5af9475b57fa2e577c2112">clang_getCXXAccessSpecifier</link>(Cursor);
01311 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*accessStr&#32;=&#32;0;
01312 
01313 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(access)&#32;{
01314 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CX_CXXInvalidAccessSpecifier:&#32;<emphasis role="keywordflow">break</emphasis>;
01315 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CX_CXXPublic:
01316 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;accessStr&#32;=&#32;<emphasis role="stringliteral">&quot;public&quot;</emphasis>;&#32;<emphasis role="keywordflow">break</emphasis>;
01317 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CX_CXXProtected:
01318 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;accessStr&#32;=&#32;<emphasis role="stringliteral">&quot;protected&quot;</emphasis>;&#32;<emphasis role="keywordflow">break</emphasis>;
01319 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CX_CXXPrivate:
01320 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;accessStr&#32;=&#32;<emphasis role="stringliteral">&quot;private&quot;</emphasis>;&#32;<emphasis role="keywordflow">break</emphasis>;
01321 &#32;&#32;&#32;&#32;&#32;&#32;}
01322 
01323 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(accessStr)
01324 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;printf(<emphasis role="stringliteral">&quot;&#32;[access=%s]&quot;</emphasis>,&#32;accessStr);
01325 &#32;&#32;&#32;&#32;}
01326 &#32;&#32;&#32;&#32;printf(<emphasis role="stringliteral">&quot;\n&quot;</emphasis>);
01327 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;CXChildVisit_Recurse;
01328 &#32;&#32;}
01329 
01330 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;CXChildVisit_Continue;
01331 }
01332 
01333 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">enum</emphasis>&#32;CXChildVisitResult&#32;FunctionScanVisitor(CXCursor&#32;Cursor,
01334 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;CXCursor&#32;Parent,
01335 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;CXClientData&#32;ClientData)&#32;{
01336 &#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*startBuf,&#32;*endBuf;
01337 &#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;startLine,&#32;startColumn,&#32;endLine,&#32;endColumn,&#32;curLine,&#32;curColumn;
01338 &#32;&#32;CXCursor&#32;Ref;
01339 &#32;&#32;<link linkend="_struct_visitor_data">VisitorData</link>&#32;*Data&#32;=&#32;(<link linkend="_struct_visitor_data">VisitorData</link>&#32;*)ClientData;
01340 
01341 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(Cursor.kind&#32;!=&#32;CXCursor_FunctionDecl&#32;||
01342 &#32;&#32;&#32;&#32;&#32;&#32;!<link linkend="__c_index_8cpp_1a619396ba7a888dea29aa6cb0b35ddbe5">clang_isCursorDefinition</link>(Cursor))
01343 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;CXChildVisit_Continue;
01344 
01345 &#32;&#32;<link linkend="__c_index_8cpp_1a877e5ce84687daa2e6befb14dc8fea24">clang_getDefinitionSpellingAndExtent</link>(Cursor,&#32;&amp;startBuf,&#32;&amp;endBuf,
01346 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;startLine,&#32;&amp;startColumn,
01347 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;endLine,&#32;&amp;endColumn);
01348 &#32;&#32;<emphasis role="comment">/*&#32;Probe&#32;the&#32;entire&#32;body,&#32;looking&#32;for&#32;both&#32;decls&#32;and&#32;refs.&#32;*/</emphasis>
01349 &#32;&#32;curLine&#32;=&#32;startLine;
01350 &#32;&#32;curColumn&#32;=&#32;startColumn;
01351 
01352 &#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(startBuf&#32;&lt;&#32;endBuf)&#32;{
01353 &#32;&#32;&#32;&#32;CXSourceLocation&#32;Loc;
01354 &#32;&#32;&#32;&#32;CXFile&#32;file;
01355 &#32;&#32;&#32;&#32;CXString&#32;source;
01356 
01357 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(*startBuf&#32;==&#32;<emphasis role="charliteral">&apos;\n&apos;</emphasis>)&#32;{
01358 &#32;&#32;&#32;&#32;&#32;&#32;startBuf++;
01359 &#32;&#32;&#32;&#32;&#32;&#32;curLine++;
01360 &#32;&#32;&#32;&#32;&#32;&#32;curColumn&#32;=&#32;1;
01361 &#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(*startBuf&#32;!=&#32;<emphasis role="charliteral">&apos;\t&apos;</emphasis>)
01362 &#32;&#32;&#32;&#32;&#32;&#32;curColumn++;
01363 
01364 &#32;&#32;&#32;&#32;Loc&#32;=&#32;<link linkend="__c_index_8cpp_1a98001a3f8eb3a76d9c12821c45ef3708">clang_getCursorLocation</link>(Cursor);
01365 &#32;&#32;&#32;&#32;<link linkend="__c_x_source_location_8cpp_1ae2d805527135aac587ca5c8017bde0ef">clang_getSpellingLocation</link>(Loc,&#32;&amp;file,&#32;0,&#32;0,&#32;0);
01366 
01367 &#32;&#32;&#32;&#32;source&#32;=&#32;<link linkend="__c_index_8cpp_1a263c34f5782353186990b2c990d648fc">clang_getFileName</link>(file);
01368 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="__c_x_string_8cpp_1acd478c1b1785e17c0fe377bd70a2195f">clang_getCString</link>(source))&#32;{
01369 &#32;&#32;&#32;&#32;&#32;&#32;CXSourceLocation&#32;RefLoc
01370 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;<link linkend="__c_x_source_location_8cpp_1a3da1e96662794609af6bec3dc345dd9a">clang_getLocation</link>(Data-&gt;<link linkend="_struct_visitor_data_1a60cc8c659a50f0e8af07b26902ea8b99">TU</link>,&#32;file,&#32;curLine,&#32;curColumn);
01371 &#32;&#32;&#32;&#32;&#32;&#32;Ref&#32;=&#32;<link linkend="__c_index_8cpp_1a98b7e00ed3ca471a2e35509110ddc0c5">clang_getCursor</link>(Data-&gt;<link linkend="_struct_visitor_data_1a60cc8c659a50f0e8af07b26902ea8b99">TU</link>,&#32;RefLoc);
01372 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(Ref.kind&#32;==&#32;CXCursor_NoDeclFound)&#32;{
01373 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;Nothing&#32;found&#32;here;&#32;that&apos;s&#32;fine.&#32;*/</emphasis>
01374 &#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(Ref.kind&#32;!=&#32;CXCursor_FunctionDecl)&#32;{
01375 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;printf(<emphasis role="stringliteral">&quot;//&#32;%s:&#32;%s:%d:%d:&#32;&quot;</emphasis>,&#32;FileCheckPrefix,&#32;GetCursorSource(Ref),
01376 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;curLine,&#32;curColumn);
01377 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;PrintCursor(Ref,&#32;Data-&gt;<link linkend="_struct_visitor_data_1a6a459e19a9daaa88b22a8fcdbe6041db">CommentSchemaFile</link>);
01378 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;printf(<emphasis role="stringliteral">&quot;\n&quot;</emphasis>);
01379 &#32;&#32;&#32;&#32;&#32;&#32;}
01380 &#32;&#32;&#32;&#32;}
01381 &#32;&#32;&#32;&#32;<link linkend="__c_x_string_8cpp_1a46c85f1255580ed186aa6f7380a06883">clang_disposeString</link>(source);
01382 &#32;&#32;&#32;&#32;startBuf++;
01383 &#32;&#32;}
01384 
01385 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;CXChildVisit_Continue;
01386 }
01387 
01388 <emphasis role="comment">/******************************************************************************/</emphasis>
01389 <emphasis role="comment">/*&#32;USR&#32;testing.&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*/</emphasis>
01390 <emphasis role="comment">/******************************************************************************/</emphasis>
01391 
01392 <emphasis role="keyword">enum</emphasis>&#32;CXChildVisitResult&#32;<link linkend="_c-index-test_8c_1a0511093879dc5155579f47448dc7f35a">USRVisitor</link>(CXCursor&#32;C,&#32;CXCursor&#32;parent,
01393 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;CXClientData&#32;ClientData)&#32;{
01394 &#32;&#32;<link linkend="_struct_visitor_data">VisitorData</link>&#32;*Data&#32;=&#32;(<link linkend="_struct_visitor_data">VisitorData</link>&#32;*)ClientData;
01395 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!Data-&gt;<link linkend="_struct_visitor_data_1a2adae660b33ba2270dd98ecffbec5fb7">Filter</link>&#32;||&#32;(C.kind&#32;==&#32;*(<emphasis role="keyword">enum</emphasis>&#32;CXCursorKind&#32;*)Data-&gt;<link linkend="_struct_visitor_data_1a2adae660b33ba2270dd98ecffbec5fb7">Filter</link>))&#32;{
01396 &#32;&#32;&#32;&#32;CXString&#32;USR&#32;=&#32;<link linkend="__c_index_u_s_rs_8cpp_1ae603480d6cea9e6b8e4a3bc927c1f43b">clang_getCursorUSR</link>(C);
01397 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*cstr&#32;=&#32;<link linkend="__c_x_string_8cpp_1acd478c1b1785e17c0fe377bd70a2195f">clang_getCString</link>(USR);
01398 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!cstr&#32;||&#32;cstr[0]&#32;==&#32;<emphasis role="charliteral">&apos;\0&apos;</emphasis>)&#32;{
01399 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__c_x_string_8cpp_1a46c85f1255580ed186aa6f7380a06883">clang_disposeString</link>(USR);
01400 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;CXChildVisit_Recurse;
01401 &#32;&#32;&#32;&#32;}
01402 &#32;&#32;&#32;&#32;printf(<emphasis role="stringliteral">&quot;//&#32;%s:&#32;%s&#32;%s&quot;</emphasis>,&#32;FileCheckPrefix,&#32;GetCursorSource(C),&#32;cstr);
01403 
01404 &#32;&#32;&#32;&#32;PrintCursorExtent(C);
01405 &#32;&#32;&#32;&#32;printf(<emphasis role="stringliteral">&quot;\n&quot;</emphasis>);
01406 &#32;&#32;&#32;&#32;<link linkend="__c_x_string_8cpp_1a46c85f1255580ed186aa6f7380a06883">clang_disposeString</link>(USR);
01407 
01408 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;CXChildVisit_Recurse;
01409 &#32;&#32;}
01410 
01411 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;CXChildVisit_Continue;
01412 }
01413 
01414 <emphasis role="comment">/******************************************************************************/</emphasis>
01415 <emphasis role="comment">/*&#32;Inclusion&#32;stack&#32;testing.&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*/</emphasis>
01416 <emphasis role="comment">/******************************************************************************/</emphasis>
01417 
<anchor xml:id="_c-index-test_8c_source_1l01418"/><link linkend="_c-index-test_8c_1aeec77843d6ef3e3e453289ec2018c83d">01418</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_c-index-test_8c_1aeec77843d6ef3e3e453289ec2018c83d">InclusionVisitor</link>(CXFile&#32;includedFile,&#32;CXSourceLocation&#32;*includeStack,
01419 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;includeStackLen,&#32;CXClientData&#32;data)&#32;{
01420 
01421 &#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;i;
01422 &#32;&#32;CXString&#32;fname;
01423 
01424 &#32;&#32;fname&#32;=&#32;<link linkend="__c_index_8cpp_1a263c34f5782353186990b2c990d648fc">clang_getFileName</link>(includedFile);
01425 &#32;&#32;printf(<emphasis role="stringliteral">&quot;file:&#32;%s\nincluded&#32;by:\n&quot;</emphasis>,&#32;<link linkend="__c_x_string_8cpp_1acd478c1b1785e17c0fe377bd70a2195f">clang_getCString</link>(fname));
01426 &#32;&#32;<link linkend="__c_x_string_8cpp_1a46c85f1255580ed186aa6f7380a06883">clang_disposeString</link>(fname);
01427 
01428 &#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(i&#32;=&#32;0;&#32;i&#32;&lt;&#32;includeStackLen;&#32;++i)&#32;{
01429 &#32;&#32;&#32;&#32;CXFile&#32;includingFile;
01430 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;line,&#32;column;
01431 &#32;&#32;&#32;&#32;<link linkend="__c_x_source_location_8cpp_1ae2d805527135aac587ca5c8017bde0ef">clang_getSpellingLocation</link>(includeStack[i],&#32;&amp;includingFile,&#32;&amp;line,
01432 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;column,&#32;0);
01433 &#32;&#32;&#32;&#32;fname&#32;=&#32;<link linkend="__c_index_8cpp_1a263c34f5782353186990b2c990d648fc">clang_getFileName</link>(includingFile);
01434 &#32;&#32;&#32;&#32;printf(<emphasis role="stringliteral">&quot;&#32;&#32;%s:%d:%d\n&quot;</emphasis>,&#32;<link linkend="__c_x_string_8cpp_1acd478c1b1785e17c0fe377bd70a2195f">clang_getCString</link>(fname),&#32;line,&#32;column);
01435 &#32;&#32;&#32;&#32;<link linkend="__c_x_string_8cpp_1a46c85f1255580ed186aa6f7380a06883">clang_disposeString</link>(fname);
01436 &#32;&#32;}
01437 &#32;&#32;printf(<emphasis role="stringliteral">&quot;\n&quot;</emphasis>);
01438 }
01439 
<anchor xml:id="_c-index-test_8c_source_1l01440"/><link linkend="_c-index-test_8c_1a271f309ab673d301e539e00164b71483">01440</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_c-index-test_8c_1a271f309ab673d301e539e00164b71483">PrintInclusionStack</link>(CXTranslationUnit&#32;TU)&#32;{
01441 &#32;&#32;<link linkend="__c_index_inclusion_stack_8cpp_1a46a93eb16ff8f277bb63cbbe5d70d3ae">clang_getInclusions</link>(TU,&#32;<link linkend="_c-index-test_8c_1aeec77843d6ef3e3e453289ec2018c83d">InclusionVisitor</link>,&#32;NULL);
01442 }
01443 
01444 <emphasis role="comment">/******************************************************************************/</emphasis>
01445 <emphasis role="comment">/*&#32;Linkage&#32;testing.&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*/</emphasis>
01446 <emphasis role="comment">/******************************************************************************/</emphasis>
01447 
01448 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">enum</emphasis>&#32;CXChildVisitResult&#32;PrintLinkage(CXCursor&#32;cursor,&#32;CXCursor&#32;p,
01449 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;CXClientData&#32;d)&#32;{
01450 &#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*linkage&#32;=&#32;0;
01451 
01452 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="__c_index_8cpp_1a0c5b391d8bca745084fb8906cce6f66c">clang_isInvalid</link>(<link linkend="__c_index_8cpp_1a88e594fe730830706a0b7cff796eaedf">clang_getCursorKind</link>(cursor)))
01453 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;CXChildVisit_Recurse;
01454 
01455 &#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(<link linkend="__c_index_8cpp_1a40ce3c0e400584ea807e89d96aa6a3f7">clang_getCursorLinkage</link>(cursor))&#32;{
01456 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXLinkage_Invalid:&#32;<emphasis role="keywordflow">break</emphasis>;
01457 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXLinkage_NoLinkage:&#32;linkage&#32;=&#32;<emphasis role="stringliteral">&quot;NoLinkage&quot;</emphasis>;&#32;<emphasis role="keywordflow">break</emphasis>;
01458 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXLinkage_Internal:&#32;linkage&#32;=&#32;<emphasis role="stringliteral">&quot;Internal&quot;</emphasis>;&#32;<emphasis role="keywordflow">break</emphasis>;
01459 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXLinkage_UniqueExternal:&#32;linkage&#32;=&#32;<emphasis role="stringliteral">&quot;UniqueExternal&quot;</emphasis>;&#32;<emphasis role="keywordflow">break</emphasis>;
01460 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXLinkage_External:&#32;linkage&#32;=&#32;<emphasis role="stringliteral">&quot;External&quot;</emphasis>;&#32;<emphasis role="keywordflow">break</emphasis>;
01461 &#32;&#32;}
01462 
01463 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(linkage)&#32;{
01464 &#32;&#32;&#32;&#32;PrintCursor(cursor,&#32;NULL);
01465 &#32;&#32;&#32;&#32;printf(<emphasis role="stringliteral">&quot;linkage=%s\n&quot;</emphasis>,&#32;linkage);
01466 &#32;&#32;}
01467 
01468 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;CXChildVisit_Recurse;
01469 }
01470 
01471 <emphasis role="comment">/******************************************************************************/</emphasis>
01472 <emphasis role="comment">/*&#32;Visibility&#32;testing.&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*/</emphasis>
01473 <emphasis role="comment">/******************************************************************************/</emphasis>
01474 
01475 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">enum</emphasis>&#32;CXChildVisitResult&#32;PrintVisibility(CXCursor&#32;cursor,&#32;CXCursor&#32;p,
01476 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;CXClientData&#32;d)&#32;{
01477 &#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*visibility&#32;=&#32;0;
01478 
01479 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="__c_index_8cpp_1a0c5b391d8bca745084fb8906cce6f66c">clang_isInvalid</link>(<link linkend="__c_index_8cpp_1a88e594fe730830706a0b7cff796eaedf">clang_getCursorKind</link>(cursor)))
01480 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;CXChildVisit_Recurse;
01481 
01482 &#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(<link linkend="__c_index_8cpp_1af05b946a0d65bb5a668e44875f440b2a">clang_getCursorVisibility</link>(cursor))&#32;{
01483 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXVisibility_Invalid:&#32;<emphasis role="keywordflow">break</emphasis>;
01484 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXVisibility_Hidden:&#32;visibility&#32;=&#32;<emphasis role="stringliteral">&quot;Hidden&quot;</emphasis>;&#32;<emphasis role="keywordflow">break</emphasis>;
01485 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXVisibility_Protected:&#32;visibility&#32;=&#32;<emphasis role="stringliteral">&quot;Protected&quot;</emphasis>;&#32;<emphasis role="keywordflow">break</emphasis>;
01486 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXVisibility_Default:&#32;visibility&#32;=&#32;<emphasis role="stringliteral">&quot;Default&quot;</emphasis>;&#32;<emphasis role="keywordflow">break</emphasis>;
01487 &#32;&#32;}
01488 
01489 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(visibility)&#32;{
01490 &#32;&#32;&#32;&#32;PrintCursor(cursor,&#32;NULL);
01491 &#32;&#32;&#32;&#32;printf(<emphasis role="stringliteral">&quot;visibility=%s\n&quot;</emphasis>,&#32;visibility);
01492 &#32;&#32;}
01493 
01494 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;CXChildVisit_Recurse;
01495 }
01496 
01497 <emphasis role="comment">/******************************************************************************/</emphasis>
01498 <emphasis role="comment">/*&#32;Typekind&#32;testing.&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*/</emphasis>
01499 <emphasis role="comment">/******************************************************************************/</emphasis>
01500 
01501 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;PrintTypeAndTypeKind(CXType&#32;T,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*Format)&#32;{
01502 &#32;&#32;CXString&#32;TypeSpelling,&#32;TypeKindSpelling;
01503 
01504 &#32;&#32;TypeSpelling&#32;=&#32;<link linkend="__c_x_type_8cpp_1ae144228507fed08fdf97002f5308071d">clang_getTypeSpelling</link>(T);
01505 &#32;&#32;TypeKindSpelling&#32;=&#32;<link linkend="__c_x_type_8cpp_1a7bb1a114f09f7b616a229a8bb874f2f1">clang_getTypeKindSpelling</link>(T.kind);
01506 &#32;&#32;printf(Format,
01507 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__c_x_string_8cpp_1acd478c1b1785e17c0fe377bd70a2195f">clang_getCString</link>(TypeSpelling),
01508 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__c_x_string_8cpp_1acd478c1b1785e17c0fe377bd70a2195f">clang_getCString</link>(TypeKindSpelling));
01509 &#32;&#32;<link linkend="__c_x_string_8cpp_1a46c85f1255580ed186aa6f7380a06883">clang_disposeString</link>(TypeSpelling);
01510 &#32;&#32;<link linkend="__c_x_string_8cpp_1a46c85f1255580ed186aa6f7380a06883">clang_disposeString</link>(TypeKindSpelling);
01511 }
01512 
01513 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">enum</emphasis>&#32;CXVisitorResult&#32;FieldVisitor(CXCursor&#32;C,
01514 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;CXClientData&#32;client_data)&#32;{
01515 &#32;&#32;&#32;&#32;(*(<emphasis role="keywordtype">int</emphasis>&#32;*)&#32;client_data)+=1;
01516 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;CXVisit_Continue;
01517 }
01518 
01519 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;PrintTypeTemplateArgs(CXType&#32;T,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*Format)&#32;{
01520 &#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;NumTArgs&#32;=&#32;<link linkend="__c_x_type_8cpp_1a90316726b7e7461002955339e55ca245">clang_Type_getNumTemplateArguments</link>(T);
01521 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(NumTArgs&#32;!=&#32;-1&#32;&amp;&amp;&#32;NumTArgs&#32;!=&#32;0)&#32;{
01522 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;i;
01523 &#32;&#32;&#32;&#32;CXType&#32;TArg;
01524 &#32;&#32;&#32;&#32;printf(Format,&#32;NumTArgs);
01525 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(i&#32;=&#32;0;&#32;i&#32;&lt;&#32;NumTArgs;&#32;++i)&#32;{
01526 &#32;&#32;&#32;&#32;&#32;&#32;TArg&#32;=&#32;<link linkend="__c_x_type_8cpp_1a7efab9a1ff4b7be8e852a53c5f4d73e6">clang_Type_getTemplateArgumentAsType</link>(T,&#32;i);
01527 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(TArg.kind&#32;!=&#32;CXType_Invalid)&#32;{
01528 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;PrintTypeAndTypeKind(TArg,&#32;<emphasis role="stringliteral">&quot;&#32;[type=%s]&#32;[typekind=%s]&quot;</emphasis>);
01529 &#32;&#32;&#32;&#32;&#32;&#32;}
01530 &#32;&#32;&#32;&#32;}
01531 &#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;Ensure&#32;that&#32;the&#32;returned&#32;type&#32;is&#32;invalid&#32;when&#32;indexing&#32;off-by-one.&#32;*/</emphasis>
01532 &#32;&#32;&#32;&#32;TArg&#32;=&#32;<link linkend="__c_x_type_8cpp_1a7efab9a1ff4b7be8e852a53c5f4d73e6">clang_Type_getTemplateArgumentAsType</link>(T,&#32;i);
01533 &#32;&#32;&#32;&#32;assert(TArg.kind&#32;==&#32;CXType_Invalid);
01534 &#32;&#32;&#32;&#32;printf(<emphasis role="stringliteral">&quot;]&quot;</emphasis>);
01535 &#32;&#32;}
01536 }
01537 
01538 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;PrintNullabilityKind(CXType&#32;T,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*Format)&#32;{
01539 &#32;&#32;<emphasis role="keyword">enum</emphasis>&#32;CXTypeNullabilityKind&#32;N&#32;=&#32;<link linkend="__c_x_type_8cpp_1aa41af4571d69c09d88b3fde3886e1ed4">clang_Type_getNullability</link>(T);
01540 
01541 &#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*nullability&#32;=&#32;0;
01542 &#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(N)&#32;{
01543 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXTypeNullability_NonNull:
01544 &#32;&#32;&#32;&#32;nullability&#32;=&#32;<emphasis role="stringliteral">&quot;nonnull&quot;</emphasis>;
01545 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
01546 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXTypeNullability_Nullable:
01547 &#32;&#32;&#32;&#32;nullability&#32;=&#32;<emphasis role="stringliteral">&quot;nullable&quot;</emphasis>;
01548 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
01549 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXTypeNullability_NullableResult:
01550 &#32;&#32;&#32;&#32;nullability&#32;=&#32;<emphasis role="stringliteral">&quot;nullable_result&quot;</emphasis>;
01551 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
01552 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXTypeNullability_Unspecified:
01553 &#32;&#32;&#32;&#32;nullability&#32;=&#32;<emphasis role="stringliteral">&quot;unspecified&quot;</emphasis>;
01554 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
01555 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXTypeNullability_Invalid:
01556 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
01557 &#32;&#32;}
01558 
01559 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(nullability)&#32;{
01560 &#32;&#32;&#32;&#32;printf(Format,&#32;nullability);
01561 &#32;&#32;}
01562 }
01563 
01564 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">enum</emphasis>&#32;CXChildVisitResult&#32;PrintType(CXCursor&#32;cursor,&#32;CXCursor&#32;p,
01565 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;CXClientData&#32;d)&#32;{
01566 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!<link linkend="__c_index_8cpp_1a0c5b391d8bca745084fb8906cce6f66c">clang_isInvalid</link>(<link linkend="__c_index_8cpp_1a88e594fe730830706a0b7cff796eaedf">clang_getCursorKind</link>(cursor)))&#32;{
01567 &#32;&#32;&#32;&#32;CXType&#32;T&#32;=&#32;<link linkend="__c_x_type_8cpp_1a1d3670bea8f0f8660f74bc3e4dee10a0">clang_getCursorType</link>(cursor);
01568 &#32;&#32;&#32;&#32;CXType&#32;PT&#32;=&#32;<link linkend="__c_x_type_8cpp_1a5ad5de5325d0345ebe292115f8fdb9ff">clang_getPointeeType</link>(T);
01569 &#32;&#32;&#32;&#32;<emphasis role="keyword">enum</emphasis>&#32;CXRefQualifierKind&#32;RQ&#32;=&#32;<link linkend="__c_x_type_8cpp_1a8641fd362da41b0b80ca4a77f1fb2f07">clang_Type_getCXXRefQualifier</link>(T);
01570 &#32;&#32;&#32;&#32;PrintCursor(cursor,&#32;NULL);
01571 &#32;&#32;&#32;&#32;PrintTypeAndTypeKind(T,&#32;<emphasis role="stringliteral">&quot;&#32;[type=%s]&#32;[typekind=%s]&quot;</emphasis>);
01572 &#32;&#32;&#32;&#32;PrintNullabilityKind(T,&#32;<emphasis role="stringliteral">&quot;&#32;[nullability=%s]&quot;</emphasis>);
01573 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="__c_x_type_8cpp_1a9f8de21d82490d6adfead30e8ab7ca57">clang_isConstQualifiedType</link>(T))
01574 &#32;&#32;&#32;&#32;&#32;&#32;printf(<emphasis role="stringliteral">&quot;&#32;const&quot;</emphasis>);
01575 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="__c_x_type_8cpp_1a9edd8308096b8adf1a91d49468bf18f9">clang_isVolatileQualifiedType</link>(T))
01576 &#32;&#32;&#32;&#32;&#32;&#32;printf(<emphasis role="stringliteral">&quot;&#32;volatile&quot;</emphasis>);
01577 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="__c_x_type_8cpp_1a0beb494915a15b4f221ae61e499e311e">clang_isRestrictQualifiedType</link>(T))
01578 &#32;&#32;&#32;&#32;&#32;&#32;printf(<emphasis role="stringliteral">&quot;&#32;restrict&quot;</emphasis>);
01579 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(RQ&#32;==&#32;CXRefQualifier_LValue)
01580 &#32;&#32;&#32;&#32;&#32;&#32;printf(<emphasis role="stringliteral">&quot;&#32;lvalue-ref-qualifier&quot;</emphasis>);
01581 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(RQ&#32;==&#32;CXRefQualifier_RValue)
01582 &#32;&#32;&#32;&#32;&#32;&#32;printf(<emphasis role="stringliteral">&quot;&#32;rvalue-ref-qualifier&quot;</emphasis>);
01583 &#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;Print&#32;the&#32;template&#32;argument&#32;types&#32;if&#32;they&#32;exist.&#32;*/</emphasis>
01584 &#32;&#32;&#32;&#32;PrintTypeTemplateArgs(T,&#32;<emphasis role="stringliteral">&quot;&#32;[templateargs/%d=&quot;</emphasis>);
01585 &#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;Print&#32;the&#32;canonical&#32;type&#32;if&#32;it&#32;is&#32;different.&#32;*/</emphasis>
01586 &#32;&#32;&#32;&#32;{
01587 &#32;&#32;&#32;&#32;&#32;&#32;CXType&#32;CT&#32;=&#32;<link linkend="__c_x_type_8cpp_1a3d8480e82fc0cdc770e5ecd3c88ffad7">clang_getCanonicalType</link>(T);
01588 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!<link linkend="__c_x_type_8cpp_1a7ceafcd317a03fdb13d31e708d683727">clang_equalTypes</link>(T,&#32;CT))&#32;{
01589 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;PrintTypeAndTypeKind(CT,&#32;<emphasis role="stringliteral">&quot;&#32;[canonicaltype=%s]&#32;[canonicaltypekind=%s]&quot;</emphasis>);
01590 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;PrintTypeTemplateArgs(CT,&#32;<emphasis role="stringliteral">&quot;&#32;[canonicaltemplateargs/%d=&quot;</emphasis>);
01591 &#32;&#32;&#32;&#32;&#32;&#32;}
01592 &#32;&#32;&#32;&#32;}
01593 &#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;Print&#32;the&#32;value&#32;type&#32;if&#32;it&#32;exists.&#32;*/</emphasis>
01594 &#32;&#32;&#32;&#32;{
01595 &#32;&#32;&#32;&#32;&#32;&#32;CXType&#32;VT&#32;=&#32;<link linkend="__c_x_type_8cpp_1a897416ad1979f589bb01359b3a31e354">clang_Type_getValueType</link>(T);
01596 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(VT.kind&#32;!=&#32;CXType_Invalid)
01597 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;PrintTypeAndTypeKind(VT,&#32;<emphasis role="stringliteral">&quot;&#32;[valuetype=%s]&#32;[valuetypekind=%s]&quot;</emphasis>);
01598 &#32;&#32;&#32;&#32;}
01599 &#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;Print&#32;the&#32;modified&#32;type&#32;if&#32;it&#32;exists.&#32;*/</emphasis>
01600 &#32;&#32;&#32;&#32;{
01601 &#32;&#32;&#32;&#32;&#32;&#32;CXType&#32;MT&#32;=&#32;<link linkend="__c_x_type_8cpp_1afc3f56965d3cd31c19be04e7994935eb">clang_Type_getModifiedType</link>(T);
01602 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(MT.kind&#32;!=&#32;CXType_Invalid)&#32;{
01603 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;PrintTypeAndTypeKind(MT,&#32;<emphasis role="stringliteral">&quot;&#32;[modifiedtype=%s]&#32;[modifiedtypekind=%s]&quot;</emphasis>);
01604 &#32;&#32;&#32;&#32;&#32;&#32;}
01605 &#32;&#32;&#32;&#32;}
01606 &#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;Print&#32;the&#32;return&#32;type&#32;if&#32;it&#32;exists.&#32;*/</emphasis>
01607 &#32;&#32;&#32;&#32;{
01608 &#32;&#32;&#32;&#32;&#32;&#32;CXType&#32;RT&#32;=&#32;<link linkend="__c_x_type_8cpp_1a3e8642f2689daf6b729dac3ad81db410">clang_getCursorResultType</link>(cursor);
01609 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(RT.kind&#32;!=&#32;CXType_Invalid)&#32;{
01610 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;PrintTypeAndTypeKind(RT,&#32;<emphasis role="stringliteral">&quot;&#32;[resulttype=%s]&#32;[resulttypekind=%s]&quot;</emphasis>);
01611 &#32;&#32;&#32;&#32;&#32;&#32;}
01612 &#32;&#32;&#32;&#32;&#32;&#32;PrintNullabilityKind(RT,&#32;<emphasis role="stringliteral">&quot;&#32;[resultnullability=%s]&quot;</emphasis>);
01613 &#32;&#32;&#32;&#32;}
01614 &#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;Print&#32;the&#32;argument&#32;types&#32;if&#32;they&#32;exist.&#32;*/</emphasis>
01615 &#32;&#32;&#32;&#32;{
01616 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;NumArgs&#32;=&#32;<link linkend="__c_x_cursor_8cpp_1a22f41fe117dda1a72b55c84e1ae64c6b">clang_Cursor_getNumArguments</link>(cursor);
01617 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(NumArgs&#32;!=&#32;-1&#32;&amp;&amp;&#32;NumArgs&#32;!=&#32;0)&#32;{
01618 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;i;
01619 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;printf(<emphasis role="stringliteral">&quot;&#32;[args=&quot;</emphasis>);
01620 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(i&#32;=&#32;0;&#32;i&#32;&lt;&#32;NumArgs;&#32;++i)&#32;{
01621 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;CXType&#32;T&#32;=&#32;<link linkend="__c_x_type_8cpp_1a1d3670bea8f0f8660f74bc3e4dee10a0">clang_getCursorType</link>(<link linkend="__c_x_cursor_8cpp_1a776c46967cf1110bc067e119e8034434">clang_Cursor_getArgument</link>(cursor,&#32;i));
01622 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(T.kind&#32;!=&#32;CXType_Invalid)&#32;{
01623 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;PrintTypeAndTypeKind(T,&#32;<emphasis role="stringliteral">&quot;&#32;[%s]&#32;[%s]&quot;</emphasis>);
01624 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;PrintNullabilityKind(T,&#32;<emphasis role="stringliteral">&quot;&#32;[%s]&quot;</emphasis>);
01625 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
01626 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
01627 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;printf(<emphasis role="stringliteral">&quot;]&quot;</emphasis>);
01628 &#32;&#32;&#32;&#32;&#32;&#32;}
01629 &#32;&#32;&#32;&#32;}
01630 &#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;Print&#32;ObjC&#32;base&#32;types,&#32;type&#32;arguments,&#32;and&#32;protocol&#32;list&#32;if&#32;available.&#32;*/</emphasis>
01631 &#32;&#32;&#32;&#32;{
01632 &#32;&#32;&#32;&#32;&#32;&#32;CXType&#32;BT&#32;=&#32;<link linkend="__c_x_type_8cpp_1a4c3cddecb5a3ffa2fd4cc6a286f9294a">clang_Type_getObjCObjectBaseType</link>(PT);
01633 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(BT.kind&#32;!=&#32;CXType_Invalid)&#32;{
01634 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;PrintTypeAndTypeKind(BT,&#32;<emphasis role="stringliteral">&quot;&#32;[basetype=%s]&#32;[basekind=%s]&quot;</emphasis>);
01635 &#32;&#32;&#32;&#32;&#32;&#32;}
01636 &#32;&#32;&#32;&#32;}
01637 &#32;&#32;&#32;&#32;{
01638 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;NumTypeArgs&#32;=&#32;<link linkend="__c_x_type_8cpp_1a77806a063adec1d4727afff9af0db813">clang_Type_getNumObjCTypeArgs</link>(PT);
01639 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(NumTypeArgs&#32;&gt;&#32;0)&#32;{
01640 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;i;
01641 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;printf(<emphasis role="stringliteral">&quot;&#32;[typeargs=&quot;</emphasis>);
01642 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(i&#32;=&#32;0;&#32;i&#32;&lt;&#32;NumTypeArgs;&#32;++i)&#32;{
01643 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;CXType&#32;TA&#32;=&#32;<link linkend="__c_x_type_8cpp_1affbafbb6555c318338011747fc1f4831">clang_Type_getObjCTypeArg</link>(PT,&#32;i);
01644 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(TA.kind&#32;!=&#32;CXType_Invalid)&#32;{
01645 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;PrintTypeAndTypeKind(TA,&#32;<emphasis role="stringliteral">&quot;&#32;[%s]&#32;[%s]&quot;</emphasis>);
01646 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
01647 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
01648 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;printf(<emphasis role="stringliteral">&quot;]&quot;</emphasis>);
01649 &#32;&#32;&#32;&#32;&#32;&#32;}
01650 &#32;&#32;&#32;&#32;}
01651 &#32;&#32;&#32;&#32;{
01652 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;NumProtocols&#32;=&#32;<link linkend="__c_x_type_8cpp_1aecb9336722f2659b827e344c7ce05b45">clang_Type_getNumObjCProtocolRefs</link>(PT);
01653 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(NumProtocols&#32;&gt;&#32;0)&#32;{
01654 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;i;
01655 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;printf(<emphasis role="stringliteral">&quot;&#32;[protocols=&quot;</emphasis>);
01656 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(i&#32;=&#32;0;&#32;i&#32;&lt;&#32;NumProtocols;&#32;++i)&#32;{
01657 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;CXCursor&#32;P&#32;=&#32;<link linkend="__c_x_type_8cpp_1a4eb677cf3bfc7179baacc4ffa4790569">clang_Type_getObjCProtocolDecl</link>(PT,&#32;i);
01658 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!<link linkend="__c_index_8cpp_1a0c5b391d8bca745084fb8906cce6f66c">clang_isInvalid</link>(<link linkend="__c_index_8cpp_1a88e594fe730830706a0b7cff796eaedf">clang_getCursorKind</link>(P)))&#32;{
01659 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;PrintCursor(P,&#32;NULL);
01660 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
01661 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
01662 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;printf(<emphasis role="stringliteral">&quot;]&quot;</emphasis>);
01663 &#32;&#32;&#32;&#32;&#32;&#32;}
01664 &#32;&#32;&#32;&#32;}
01665 &#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;Print&#32;if&#32;this&#32;is&#32;a&#32;non-POD&#32;type.&#32;*/</emphasis>
01666 &#32;&#32;&#32;&#32;printf(<emphasis role="stringliteral">&quot;&#32;[isPOD=%d]&quot;</emphasis>,&#32;<link linkend="__c_x_type_8cpp_1a89492eaf65d3f961105efeaca6bb1472">clang_isPODType</link>(T));
01667 &#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;Print&#32;the&#32;pointee&#32;type.&#32;*/</emphasis>
01668 &#32;&#32;&#32;&#32;{
01669 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(PT.kind&#32;!=&#32;CXType_Invalid)&#32;{
01670 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;PrintTypeAndTypeKind(PT,&#32;<emphasis role="stringliteral">&quot;&#32;[pointeetype=%s]&#32;[pointeekind=%s]&quot;</emphasis>);
01671 &#32;&#32;&#32;&#32;&#32;&#32;}
01672 &#32;&#32;&#32;&#32;}
01673 &#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;Print&#32;the&#32;number&#32;of&#32;fields&#32;if&#32;they&#32;exist.&#32;*/</emphasis>
01674 &#32;&#32;&#32;&#32;{
01675 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;numFields&#32;=&#32;0;
01676 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="__c_x_type_8cpp_1abe81959d9ff1a1cfb80c2688bac4e861">clang_Type_visitFields</link>(T,&#32;FieldVisitor,&#32;&amp;numFields)){
01677 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(numFields&#32;!=&#32;0)&#32;{
01678 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;printf(<emphasis role="stringliteral">&quot;&#32;[nbFields=%d]&quot;</emphasis>,&#32;numFields);
01679 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
01680 &#32;&#32;&#32;&#32;&#32;&#32;}
01681 &#32;&#32;&#32;&#32;}
01682 
01683 &#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;Print&#32;if&#32;it&#32;is&#32;an&#32;anonymous&#32;record&#32;or&#32;namespace.&#32;*/</emphasis>
01684 &#32;&#32;&#32;&#32;{
01685 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;isAnon&#32;=&#32;<link linkend="__c_x_type_8cpp_1a2790eda169a41be2e5f48dc18fd2c3a2">clang_Cursor_isAnonymous</link>(cursor);
01686 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(isAnon&#32;!=&#32;0)&#32;{
01687 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;printf(<emphasis role="stringliteral">&quot;&#32;[isAnon=%d]&quot;</emphasis>,&#32;isAnon);
01688 &#32;&#32;&#32;&#32;&#32;&#32;}
01689 &#32;&#32;&#32;&#32;}
01690 
01691 &#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;Print&#32;if&#32;it&#32;is&#32;an&#32;anonymous&#32;record&#32;decl&#32;*/</emphasis>
01692 &#32;&#32;&#32;&#32;{
01693 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;isAnonRecDecl&#32;=&#32;<link linkend="__c_x_type_8cpp_1ae3de9b7cbeb188589802559d7b286146">clang_Cursor_isAnonymousRecordDecl</link>(cursor);
01694 &#32;&#32;&#32;&#32;&#32;&#32;printf(<emphasis role="stringliteral">&quot;&#32;[isAnonRecDecl=%d]&quot;</emphasis>,&#32;isAnonRecDecl);
01695 &#32;&#32;&#32;&#32;}
01696 
01697 &#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;Print&#32;if&#32;it&#32;is&#32;an&#32;inline&#32;namespace&#32;decl&#32;*/</emphasis>
01698 &#32;&#32;&#32;&#32;{
01699 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;isInlineNamespace&#32;=&#32;<link linkend="__c_x_type_8cpp_1a54bbdc8598317cca8992bb8eb7bf725c">clang_Cursor_isInlineNamespace</link>(cursor);
01700 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(isInlineNamespace&#32;!=&#32;0)
01701 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;printf(<emphasis role="stringliteral">&quot;&#32;[isInlineNamespace=%d]&quot;</emphasis>,&#32;isInlineNamespace);
01702 &#32;&#32;&#32;&#32;}
01703 
01704 &#32;&#32;&#32;&#32;printf(<emphasis role="stringliteral">&quot;\n&quot;</emphasis>);
01705 &#32;&#32;}
01706 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;CXChildVisit_Recurse;
01707 }
01708 
01709 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;PrintSingleTypeSize(CXType&#32;T,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*TypeKindFormat,
01710 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*SizeFormat,
01711 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*AlignFormat)&#32;{
01712 &#32;&#32;PrintTypeAndTypeKind(T,&#32;TypeKindFormat);
01713 &#32;&#32;<emphasis role="comment">/*&#32;Print&#32;the&#32;type&#32;sizeof&#32;if&#32;applicable.&#32;*/</emphasis>
01714 &#32;&#32;{
01715 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;Size&#32;=&#32;<link linkend="__c_x_type_8cpp_1ae439d580b183e40c09a0cc66f6fa36bf">clang_Type_getSizeOf</link>(T);
01716 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(Size&#32;&gt;=&#32;0&#32;||&#32;Size&#32;&lt;&#32;-1&#32;)&#32;{
01717 &#32;&#32;&#32;&#32;&#32;&#32;printf(SizeFormat,&#32;Size);
01718 &#32;&#32;&#32;&#32;}
01719 &#32;&#32;}
01720 &#32;&#32;<emphasis role="comment">/*&#32;Print&#32;the&#32;type&#32;alignof&#32;if&#32;applicable.&#32;*/</emphasis>
01721 &#32;&#32;{
01722 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;Align&#32;=&#32;<link linkend="__c_x_type_8cpp_1a1d48d1f5eb9425cbec89c0f7df0f9595">clang_Type_getAlignOf</link>(T);
01723 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(Align&#32;&gt;=&#32;0&#32;||&#32;Align&#32;&lt;&#32;-1)&#32;{
01724 &#32;&#32;&#32;&#32;&#32;&#32;printf(AlignFormat,&#32;Align);
01725 &#32;&#32;&#32;&#32;}
01726 &#32;&#32;}
01727 
01728 &#32;&#32;<emphasis role="comment">/*&#32;Print&#32;the&#32;return&#32;type&#32;if&#32;it&#32;exists.&#32;*/</emphasis>
01729 &#32;&#32;{
01730 &#32;&#32;&#32;&#32;CXType&#32;RT&#32;=&#32;<link linkend="__c_x_type_8cpp_1aeb3044184b6d432dc24b2888cb5a128d">clang_getResultType</link>(T);
01731 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(RT.kind&#32;!=&#32;CXType_Invalid)
01732 &#32;&#32;&#32;&#32;&#32;&#32;PrintSingleTypeSize(RT,&#32;<emphasis role="stringliteral">&quot;&#32;[resulttype=%s]&#32;[resulttypekind=%s]&quot;</emphasis>,
01733 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;&#32;[resultsizeof=%lld]&quot;</emphasis>,&#32;<emphasis role="stringliteral">&quot;&#32;[resultalignof=%lld]&quot;</emphasis>);
01734 &#32;&#32;}
01735 }
01736 
01737 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">enum</emphasis>&#32;CXChildVisitResult&#32;PrintTypeSize(CXCursor&#32;cursor,&#32;CXCursor&#32;p,
01738 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;CXClientData&#32;d)&#32;{
01739 &#32;&#32;CXType&#32;T;
01740 &#32;&#32;<emphasis role="keyword">enum</emphasis>&#32;CXCursorKind&#32;K&#32;=&#32;<link linkend="__c_index_8cpp_1a88e594fe730830706a0b7cff796eaedf">clang_getCursorKind</link>(cursor);
01741 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="__c_index_8cpp_1a0c5b391d8bca745084fb8906cce6f66c">clang_isInvalid</link>(K))
01742 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;CXChildVisit_Recurse;
01743 &#32;&#32;T&#32;=&#32;<link linkend="__c_x_type_8cpp_1a1d3670bea8f0f8660f74bc3e4dee10a0">clang_getCursorType</link>(cursor);
01744 &#32;&#32;PrintCursor(cursor,&#32;NULL);
01745 &#32;&#32;PrintSingleTypeSize(T,&#32;<emphasis role="stringliteral">&quot;&#32;[type=%s]&#32;[typekind=%s]&quot;</emphasis>,&#32;<emphasis role="stringliteral">&quot;&#32;[sizeof=%lld]&quot;</emphasis>,
01746 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;&#32;[alignof=%lld]&quot;</emphasis>);
01747 &#32;&#32;<emphasis role="comment">/*&#32;Print&#32;the&#32;record&#32;field&#32;offset&#32;if&#32;applicable.&#32;*/</emphasis>
01748 &#32;&#32;{
01749 &#32;&#32;&#32;&#32;CXString&#32;FieldSpelling&#32;=&#32;<link linkend="__c_index_8cpp_1a412f1282680f05ef2b991f21a59ad3ac">clang_getCursorSpelling</link>(cursor);
01750 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*FieldName&#32;=&#32;<link linkend="__c_x_string_8cpp_1acd478c1b1785e17c0fe377bd70a2195f">clang_getCString</link>(FieldSpelling);
01751 &#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;recurse&#32;to&#32;get&#32;the&#32;first&#32;parent&#32;record&#32;that&#32;is&#32;not&#32;anonymous.&#32;*/</emphasis>
01752 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;RecordIsAnonymous&#32;=&#32;0;
01753 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="__c_index_8cpp_1a88e594fe730830706a0b7cff796eaedf">clang_getCursorKind</link>(cursor)&#32;==&#32;CXCursor_FieldDecl)&#32;{
01754 &#32;&#32;&#32;&#32;&#32;&#32;CXCursor&#32;Record;
01755 &#32;&#32;&#32;&#32;&#32;&#32;CXCursor&#32;Parent&#32;=&#32;p;
01756 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">do</emphasis>&#32;{
01757 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Record&#32;=&#32;Parent;
01758 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Parent&#32;=&#32;<link linkend="__c_index_8cpp_1a114663793af87aa65d983a8514db6b43">clang_getCursorSemanticParent</link>(Record);
01759 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;RecordIsAnonymous&#32;=&#32;<link linkend="__c_x_type_8cpp_1a2790eda169a41be2e5f48dc18fd2c3a2">clang_Cursor_isAnonymous</link>(Record);
01760 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;Recurse&#32;as&#32;long&#32;as&#32;the&#32;parent&#32;is&#32;a&#32;CXType_Record&#32;and&#32;the&#32;Record</emphasis>
01761 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;is&#32;anonymous&#32;*/</emphasis>
01762 &#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">while</emphasis>&#32;(&#32;<link linkend="__c_x_type_8cpp_1a1d3670bea8f0f8660f74bc3e4dee10a0">clang_getCursorType</link>(Parent).kind&#32;==&#32;CXType_Record&#32;&amp;&amp;
01763 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;RecordIsAnonymous&#32;&gt;&#32;0);
01764 &#32;&#32;&#32;&#32;&#32;&#32;{
01765 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;Offset&#32;=&#32;<link linkend="__c_x_type_8cpp_1a16773a0dbf5bedf922396c5c518ae99a">clang_Type_getOffsetOf</link>(<link linkend="__c_x_type_8cpp_1a1d3670bea8f0f8660f74bc3e4dee10a0">clang_getCursorType</link>(Record),
01766 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;FieldName);
01767 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;Offset2&#32;=&#32;<link linkend="__c_x_type_8cpp_1adb233758f93452b97bdb65ff556f1d9f">clang_Cursor_getOffsetOfField</link>(cursor);
01768 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(Offset&#32;==&#32;Offset2){
01769 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;printf(<emphasis role="stringliteral">&quot;&#32;[offsetof=%lld]&quot;</emphasis>,&#32;Offset);
01770 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
01771 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;Offsets&#32;will&#32;be&#32;different&#32;in&#32;anonymous&#32;records.&#32;*/</emphasis>
01772 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;printf(<emphasis role="stringliteral">&quot;&#32;[offsetof=%lld/%lld]&quot;</emphasis>,&#32;Offset,&#32;Offset2);
01773 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
01774 &#32;&#32;&#32;&#32;&#32;&#32;}
01775 &#32;&#32;&#32;&#32;}
01776 &#32;&#32;&#32;&#32;<link linkend="__c_x_string_8cpp_1a46c85f1255580ed186aa6f7380a06883">clang_disposeString</link>(FieldSpelling);
01777 &#32;&#32;}
01778 &#32;&#32;<emphasis role="comment">/*&#32;Print&#32;if&#32;its&#32;a&#32;bitfield&#32;*/</emphasis>
01779 &#32;&#32;{
01780 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;IsBitfield&#32;=&#32;<link linkend="__c_x_type_8cpp_1a326884cca3b3b7ce06519086cbac4f62">clang_Cursor_isBitField</link>(cursor);
01781 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(IsBitfield)
01782 &#32;&#32;&#32;&#32;&#32;&#32;printf(<emphasis role="stringliteral">&quot;&#32;[BitFieldSize=%d]&quot;</emphasis>,&#32;<link linkend="__c_x_type_8cpp_1a720ee0d2442993bd23d7ba1fa34ca374">clang_getFieldDeclBitWidth</link>(cursor));
01783 &#32;&#32;}
01784 
01785 &#32;&#32;printf(<emphasis role="stringliteral">&quot;\n&quot;</emphasis>);
01786 
01787 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;CXChildVisit_Recurse;
01788 }
01789 
01790 <emphasis role="comment">/******************************************************************************/</emphasis>
01791 <emphasis role="comment">/*&#32;Mangling&#32;testing.&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*/</emphasis>
01792 <emphasis role="comment">/******************************************************************************/</emphasis>
01793 
01794 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">enum</emphasis>&#32;CXChildVisitResult&#32;PrintMangledName(CXCursor&#32;cursor,&#32;CXCursor&#32;p,
01795 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;CXClientData&#32;d)&#32;{
01796 &#32;&#32;CXString&#32;MangledName;
01797 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="__c_index_8cpp_1a0e56fac91aaded983a98dd1bf3bec5a1">clang_isUnexposed</link>(<link linkend="__c_index_8cpp_1a88e594fe730830706a0b7cff796eaedf">clang_getCursorKind</link>(cursor)))
01798 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;CXChildVisit_Recurse;
01799 &#32;&#32;PrintCursor(cursor,&#32;NULL);
01800 &#32;&#32;MangledName&#32;=&#32;<link linkend="__c_index_8cpp_1af9df3cb95580d22d253ebb43e47bb466">clang_Cursor_getMangling</link>(cursor);
01801 &#32;&#32;printf(<emphasis role="stringliteral">&quot;&#32;[mangled=%s]\n&quot;</emphasis>,&#32;<link linkend="__c_x_string_8cpp_1acd478c1b1785e17c0fe377bd70a2195f">clang_getCString</link>(MangledName));
01802 &#32;&#32;<link linkend="__c_x_string_8cpp_1a46c85f1255580ed186aa6f7380a06883">clang_disposeString</link>(MangledName);
01803 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;CXChildVisit_Continue;
01804 }
01805 
01806 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">enum</emphasis>&#32;CXChildVisitResult&#32;PrintManglings(CXCursor&#32;cursor,&#32;CXCursor&#32;p,
01807 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;CXClientData&#32;d)&#32;{
01808 &#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;I,&#32;E;
01809 &#32;&#32;CXStringSet&#32;*Manglings&#32;=&#32;NULL;
01810 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="__c_index_8cpp_1a0e56fac91aaded983a98dd1bf3bec5a1">clang_isUnexposed</link>(<link linkend="__c_index_8cpp_1a88e594fe730830706a0b7cff796eaedf">clang_getCursorKind</link>(cursor)))
01811 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;CXChildVisit_Recurse;
01812 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!<link linkend="__c_index_8cpp_1a5d47db8f608ae0c266d6551875d46b80">clang_isDeclaration</link>(<link linkend="__c_index_8cpp_1a88e594fe730830706a0b7cff796eaedf">clang_getCursorKind</link>(cursor)))
01813 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;CXChildVisit_Recurse;
01814 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="__c_index_8cpp_1a88e594fe730830706a0b7cff796eaedf">clang_getCursorKind</link>(cursor)&#32;==&#32;CXCursor_ParmDecl)
01815 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;CXChildVisit_Continue;
01816 &#32;&#32;PrintCursor(cursor,&#32;NULL);
01817 &#32;&#32;Manglings&#32;=&#32;<link linkend="__c_index_8cpp_1a2a901378706b8476950697e8073d65dc">clang_Cursor_getCXXManglings</link>(cursor);
01818 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(Manglings)&#32;{
01819 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(I&#32;=&#32;0,&#32;E&#32;=&#32;Manglings-&gt;Count;&#32;I&#32;&lt;&#32;E;&#32;++I)
01820 &#32;&#32;&#32;&#32;&#32;&#32;printf(<emphasis role="stringliteral">&quot;&#32;[mangled=%s]&quot;</emphasis>,&#32;<link linkend="__c_x_string_8cpp_1acd478c1b1785e17c0fe377bd70a2195f">clang_getCString</link>(Manglings-&gt;Strings[I]));
01821 &#32;&#32;&#32;&#32;<link linkend="__c_x_string_8cpp_1aa942422cf97595a7f683a4ad4cf89782">clang_disposeStringSet</link>(Manglings);
01822 &#32;&#32;&#32;&#32;printf(<emphasis role="stringliteral">&quot;\n&quot;</emphasis>);
01823 &#32;&#32;}
01824 &#32;&#32;Manglings&#32;=&#32;<link linkend="__c_index_8cpp_1a02df930dfd6a35f25132f6cc40281d8f">clang_Cursor_getObjCManglings</link>(cursor);
01825 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(Manglings)&#32;{
01826 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(I&#32;=&#32;0,&#32;E&#32;=&#32;Manglings-&gt;Count;&#32;I&#32;&lt;&#32;E;&#32;++I)
01827 &#32;&#32;&#32;&#32;&#32;&#32;printf(<emphasis role="stringliteral">&quot;&#32;[mangled=%s]&quot;</emphasis>,&#32;<link linkend="__c_x_string_8cpp_1acd478c1b1785e17c0fe377bd70a2195f">clang_getCString</link>(Manglings-&gt;Strings[I]));
01828 &#32;&#32;&#32;&#32;<link linkend="__c_x_string_8cpp_1aa942422cf97595a7f683a4ad4cf89782">clang_disposeStringSet</link>(Manglings);
01829 &#32;&#32;&#32;&#32;printf(<emphasis role="stringliteral">&quot;\n&quot;</emphasis>);
01830 &#32;&#32;}
01831 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;CXChildVisit_Recurse;
01832 }
01833 
01834 <emphasis role="comment">/******************************************************************************/</emphasis>
01835 <emphasis role="comment">/*&#32;Bitwidth&#32;testing.&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*/</emphasis>
01836 <emphasis role="comment">/******************************************************************************/</emphasis>
01837 
01838 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">enum</emphasis>&#32;CXChildVisitResult&#32;PrintBitWidth(CXCursor&#32;cursor,&#32;CXCursor&#32;p,
01839 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;CXClientData&#32;d)&#32;{
01840 &#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;Bitwidth;
01841 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="__c_index_8cpp_1a88e594fe730830706a0b7cff796eaedf">clang_getCursorKind</link>(cursor)&#32;!=&#32;CXCursor_FieldDecl)
01842 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;CXChildVisit_Recurse;
01843 
01844 &#32;&#32;Bitwidth&#32;=&#32;<link linkend="__c_x_type_8cpp_1a720ee0d2442993bd23d7ba1fa34ca374">clang_getFieldDeclBitWidth</link>(cursor);
01845 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(Bitwidth&#32;&gt;=&#32;0)&#32;{
01846 &#32;&#32;&#32;&#32;PrintCursor(cursor,&#32;NULL);
01847 &#32;&#32;&#32;&#32;printf(<emphasis role="stringliteral">&quot;&#32;bitwidth=%d\n&quot;</emphasis>,&#32;Bitwidth);
01848 &#32;&#32;}
01849 
01850 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;CXChildVisit_Recurse;
01851 }
01852 
01853 <emphasis role="comment">/******************************************************************************/</emphasis>
01854 <emphasis role="comment">/*&#32;Type&#32;declaration&#32;testing&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*/</emphasis>
01855 <emphasis role="comment">/******************************************************************************/</emphasis>
01856 
01857 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">enum</emphasis>&#32;CXChildVisitResult&#32;PrintTypeDeclaration(CXCursor&#32;cursor,&#32;CXCursor&#32;p,
01858 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;CXClientData&#32;d)&#32;{
01859 &#32;&#32;CXCursor&#32;typeDeclaration&#32;=&#32;<link linkend="__c_x_type_8cpp_1af7b6b47bb98865b91a02e148f87062a2">clang_getTypeDeclaration</link>(<link linkend="__c_x_type_8cpp_1a1d3670bea8f0f8660f74bc3e4dee10a0">clang_getCursorType</link>(cursor));
01860 
01861 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="__c_index_8cpp_1a5d47db8f608ae0c266d6551875d46b80">clang_isDeclaration</link>(typeDeclaration.kind))&#32;{
01862 &#32;&#32;&#32;&#32;PrintCursor(cursor,&#32;NULL);
01863 &#32;&#32;&#32;&#32;PrintTypeAndTypeKind(<link linkend="__c_x_type_8cpp_1a1d3670bea8f0f8660f74bc3e4dee10a0">clang_getCursorType</link>(typeDeclaration),&#32;<emphasis role="stringliteral">&quot;&#32;[typedeclaration=%s]&#32;[typekind=%s]\n&quot;</emphasis>);
01864 &#32;&#32;}
01865 
01866 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;CXChildVisit_Recurse;
01867 }
01868 
01869 <emphasis role="comment">/******************************************************************************/</emphasis>
01870 <emphasis role="comment">/*&#32;Declaration&#32;attributes&#32;testing&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*/</emphasis>
01871 <emphasis role="comment">/******************************************************************************/</emphasis>
01872 
01873 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">enum</emphasis>&#32;CXChildVisitResult&#32;PrintDeclAttributes(CXCursor&#32;cursor,&#32;CXCursor&#32;p,
01874 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;CXClientData&#32;d)&#32;{
01875 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="__c_index_8cpp_1a5d47db8f608ae0c266d6551875d46b80">clang_isDeclaration</link>(cursor.kind))&#32;{
01876 &#32;&#32;&#32;&#32;printf(<emphasis role="stringliteral">&quot;\n&quot;</emphasis>);
01877 &#32;&#32;&#32;&#32;PrintCursor(cursor,&#32;NULL);
01878 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;CXChildVisit_Recurse;
01879 &#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="__c_index_8cpp_1ab407667e249e0d44e6c56af84f2c28ba">clang_isAttribute</link>(cursor.kind))&#32;{
01880 &#32;&#32;&#32;&#32;printf(<emphasis role="stringliteral">&quot;&#32;&quot;</emphasis>);
01881 &#32;&#32;&#32;&#32;PrintCursor(cursor,&#32;NULL);
01882 &#32;&#32;}
01883 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;CXChildVisit_Continue;
01884 }
01885 
01886 <emphasis role="comment">/******************************************************************************/</emphasis>
01887 <emphasis role="comment">/*&#32;Target&#32;information&#32;testing.&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*/</emphasis>
01888 <emphasis role="comment">/******************************************************************************/</emphasis>
01889 
01890 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;print_target_info(<emphasis role="keywordtype">int</emphasis>&#32;argc,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;**argv)&#32;{
01891 &#32;&#32;CXIndex&#32;Idx;
01892 &#32;&#32;CXTranslationUnit&#32;TU;
01893 &#32;&#32;CXTargetInfo&#32;TargetInfo;
01894 &#32;&#32;CXString&#32;Triple;
01895 &#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*FileName;
01896 &#32;&#32;<emphasis role="keyword">enum</emphasis>&#32;CXErrorCode&#32;Err;
01897 &#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;PointerWidth;
01898 
01899 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(argc&#32;==&#32;0)&#32;{
01900 &#32;&#32;&#32;&#32;fprintf(stderr,&#32;<emphasis role="stringliteral">&quot;No&#32;filename&#32;specified\n&quot;</emphasis>);
01901 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;1;
01902 &#32;&#32;}
01903 
01904 &#32;&#32;FileName&#32;=&#32;argv[1];
01905 
01906 &#32;&#32;Idx&#32;=&#32;<link linkend="__c_index_8cpp_1a3420c8e7e10a7ff7906130b207cbb763">clang_createIndex</link>(0,&#32;1);
01907 &#32;&#32;Err&#32;=&#32;<link linkend="__c_index_8cpp_1a3ddd508cc891d95a82b747955738249a">clang_parseTranslationUnit2</link>(Idx,&#32;FileName,&#32;argv,&#32;argc,&#32;NULL,&#32;0,
01908 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;getDefaultParsingOptions(),&#32;&amp;TU);
01909 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(Err&#32;!=&#32;CXError_Success)&#32;{
01910 &#32;&#32;&#32;&#32;fprintf(stderr,&#32;<emphasis role="stringliteral">&quot;Couldn&apos;t&#32;parse&#32;translation&#32;unit!\n&quot;</emphasis>);
01911 &#32;&#32;&#32;&#32;describeLibclangFailure(Err);
01912 &#32;&#32;&#32;&#32;<link linkend="__c_index_8cpp_1aea91ddf5e996cba0de2f781cb17db1d5">clang_disposeIndex</link>(Idx);
01913 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;1;
01914 &#32;&#32;}
01915 
01916 &#32;&#32;TargetInfo&#32;=&#32;<link linkend="__c_index_8cpp_1a5482a4dddd4f6874d9cbbf5e6012e2d5">clang_getTranslationUnitTargetInfo</link>(TU);
01917 
01918 &#32;&#32;Triple&#32;=&#32;<link linkend="__c_index_8cpp_1a2406512f8007c7d88ae433c7c2b4cb0d">clang_TargetInfo_getTriple</link>(TargetInfo);
01919 &#32;&#32;printf(<emphasis role="stringliteral">&quot;TargetTriple:&#32;%s\n&quot;</emphasis>,&#32;<link linkend="__c_x_string_8cpp_1acd478c1b1785e17c0fe377bd70a2195f">clang_getCString</link>(Triple));
01920 &#32;&#32;<link linkend="__c_x_string_8cpp_1a46c85f1255580ed186aa6f7380a06883">clang_disposeString</link>(Triple);
01921 
01922 &#32;&#32;PointerWidth&#32;=&#32;<link linkend="__c_index_8cpp_1a76a103dd593b0f42310028638e1cc493">clang_TargetInfo_getPointerWidth</link>(TargetInfo);
01923 &#32;&#32;printf(<emphasis role="stringliteral">&quot;PointerWidth:&#32;%d\n&quot;</emphasis>,&#32;PointerWidth);
01924 
01925 &#32;&#32;<link linkend="__c_index_8cpp_1a29eef1b64c55bf9aa87dbd3e8ff9420c">clang_TargetInfo_dispose</link>(TargetInfo);
01926 &#32;&#32;<link linkend="__c_index_8cpp_1a3af88c13004a1954abd6dc956faff3be">clang_disposeTranslationUnit</link>(TU);
01927 &#32;&#32;<link linkend="__c_index_8cpp_1aea91ddf5e996cba0de2f781cb17db1d5">clang_disposeIndex</link>(Idx);
01928 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
01929 }
01930 
01931 <emphasis role="comment">/******************************************************************************/</emphasis>
01932 <emphasis role="comment">/*&#32;Loading&#32;ASTs/source.&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*/</emphasis>
01933 <emphasis role="comment">/******************************************************************************/</emphasis>
01934 
01935 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;perform_test_load(CXIndex&#32;Idx,&#32;CXTranslationUnit&#32;TU,
01936 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*filter,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*prefix,
01937 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;CXCursorVisitor&#32;Visitor,
01938 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_c-index-test_8c_1a66dfbd9b90aeaaa39988cd8ea0bbc669">PostVisitTU</link>&#32;PV,
01939 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*CommentSchemaFile)&#32;{
01940 
01941 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(prefix)
01942 &#32;&#32;&#32;&#32;FileCheckPrefix&#32;=&#32;prefix;
01943 
01944 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(Visitor)&#32;{
01945 &#32;&#32;&#32;&#32;<emphasis role="keyword">enum</emphasis>&#32;CXCursorKind&#32;K&#32;=&#32;CXCursor_NotImplemented;
01946 &#32;&#32;&#32;&#32;<emphasis role="keyword">enum</emphasis>&#32;CXCursorKind&#32;*ck&#32;=&#32;&amp;K;
01947 &#32;&#32;&#32;&#32;<link linkend="_struct_visitor_data">VisitorData</link>&#32;Data;
01948 
01949 &#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;Perform&#32;some&#32;simple&#32;filtering.&#32;*/</emphasis>
01950 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!strcmp(filter,&#32;<emphasis role="stringliteral">&quot;all&quot;</emphasis>)&#32;||&#32;!strcmp(filter,&#32;<emphasis role="stringliteral">&quot;local&quot;</emphasis>))&#32;ck&#32;=&#32;NULL;
01951 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!strcmp(filter,&#32;<emphasis role="stringliteral">&quot;all-display&quot;</emphasis>)&#32;||&#32;
01952 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;!strcmp(filter,&#32;<emphasis role="stringliteral">&quot;local-display&quot;</emphasis>))&#32;{
01953 &#32;&#32;&#32;&#32;&#32;&#32;ck&#32;=&#32;NULL;
01954 &#32;&#32;&#32;&#32;&#32;&#32;wanted_display_type&#32;=&#32;<link linkend="_c-index-test_8c_1a18c0cbeece6bcb1c64d7463ce253ff50a49959c0ca74d6b4e0570bc1d5affeffc">DisplayType_DisplayName</link>;
01955 &#32;&#32;&#32;&#32;}
01956 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!strcmp(filter,&#32;<emphasis role="stringliteral">&quot;all-pretty&quot;</emphasis>)&#32;||
01957 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;!strcmp(filter,&#32;<emphasis role="stringliteral">&quot;local-pretty&quot;</emphasis>))&#32;{
01958 &#32;&#32;&#32;&#32;&#32;&#32;ck&#32;=&#32;NULL;
01959 &#32;&#32;&#32;&#32;&#32;&#32;wanted_display_type&#32;=&#32;<link linkend="_c-index-test_8c_1a18c0cbeece6bcb1c64d7463ce253ff50a5960c8f71e87439216a25cee44967d6f">DisplayType_Pretty</link>;
01960 &#32;&#32;&#32;&#32;}
01961 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!strcmp(filter,&#32;<emphasis role="stringliteral">&quot;none&quot;</emphasis>))&#32;K&#32;=&#32;(<emphasis role="keyword">enum</emphasis>&#32;CXCursorKind)&#32;~0;
01962 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!strcmp(filter,&#32;<emphasis role="stringliteral">&quot;category&quot;</emphasis>))&#32;K&#32;=&#32;CXCursor_ObjCCategoryDecl;
01963 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!strcmp(filter,&#32;<emphasis role="stringliteral">&quot;interface&quot;</emphasis>))&#32;K&#32;=&#32;CXCursor_ObjCInterfaceDecl;
01964 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!strcmp(filter,&#32;<emphasis role="stringliteral">&quot;protocol&quot;</emphasis>))&#32;K&#32;=&#32;CXCursor_ObjCProtocolDecl;
01965 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!strcmp(filter,&#32;<emphasis role="stringliteral">&quot;function&quot;</emphasis>))&#32;K&#32;=&#32;CXCursor_FunctionDecl;
01966 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!strcmp(filter,&#32;<emphasis role="stringliteral">&quot;typedef&quot;</emphasis>))&#32;K&#32;=&#32;CXCursor_TypedefDecl;
01967 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!strcmp(filter,&#32;<emphasis role="stringliteral">&quot;scan-function&quot;</emphasis>))&#32;Visitor&#32;=&#32;FunctionScanVisitor;
01968 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
01969 &#32;&#32;&#32;&#32;&#32;&#32;fprintf(stderr,&#32;<emphasis role="stringliteral">&quot;Unknown&#32;filter&#32;for&#32;-test-load-tu:&#32;%s\n&quot;</emphasis>,&#32;filter);
01970 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;1;
01971 &#32;&#32;&#32;&#32;}
01972 
01973 &#32;&#32;&#32;&#32;Data.<link linkend="_struct_visitor_data_1a60cc8c659a50f0e8af07b26902ea8b99">TU</link>&#32;=&#32;TU;
01974 &#32;&#32;&#32;&#32;Data.<link linkend="_struct_visitor_data_1a2adae660b33ba2270dd98ecffbec5fb7">Filter</link>&#32;=&#32;ck;
01975 &#32;&#32;&#32;&#32;Data.<link linkend="_struct_visitor_data_1a6a459e19a9daaa88b22a8fcdbe6041db">CommentSchemaFile</link>&#32;=&#32;CommentSchemaFile;
01976 &#32;&#32;&#32;&#32;<link linkend="__c_index_8cpp_1a68f5626687386695a7c431807b46f085">clang_visitChildren</link>(<link linkend="__c_index_8cpp_1af80b706bca2457340a69f2ff05258046">clang_getTranslationUnitCursor</link>(TU),&#32;Visitor,&#32;&amp;Data);
01977 &#32;&#32;}
01978 
01979 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(PV)
01980 &#32;&#32;&#32;&#32;PV(TU);
01981 
01982 &#32;&#32;<link linkend="_c-index-test_8c_1a40fceb7e4c2e16f5bce47bae394b973a">PrintDiagnostics</link>(TU);
01983 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(checkForErrors(TU)&#32;!=&#32;0)&#32;{
01984 &#32;&#32;&#32;&#32;<link linkend="__c_index_8cpp_1a3af88c13004a1954abd6dc956faff3be">clang_disposeTranslationUnit</link>(TU);
01985 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;-1;
01986 &#32;&#32;}
01987 
01988 &#32;&#32;<link linkend="__c_index_8cpp_1a3af88c13004a1954abd6dc956faff3be">clang_disposeTranslationUnit</link>(TU);
01989 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
01990 }
01991 
<anchor xml:id="_c-index-test_8c_source_1l01992"/><link linkend="_c-index-test_8c_1a8f72d274bbe0d8215085af669b08c72d">01992</link> <emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_c-index-test_8c_1a8f72d274bbe0d8215085af669b08c72d">perform_test_load_tu</link>(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*file,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*filter,
01993 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*prefix,&#32;CXCursorVisitor&#32;Visitor,
01994 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_c-index-test_8c_1a66dfbd9b90aeaaa39988cd8ea0bbc669">PostVisitTU</link>&#32;PV)&#32;{
01995 &#32;&#32;CXIndex&#32;Idx;
01996 &#32;&#32;CXTranslationUnit&#32;TU;
01997 &#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;result;
01998 &#32;&#32;Idx&#32;=&#32;<link linkend="__c_index_8cpp_1a3420c8e7e10a7ff7906130b207cbb763">clang_createIndex</link>(<emphasis role="comment">/*&#32;excludeDeclsFromPCH&#32;*/</emphasis>
01999 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;!strcmp(filter,&#32;<emphasis role="stringliteral">&quot;local&quot;</emphasis>)&#32;?&#32;1&#32;:&#32;0,
02000 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;displayDiagnostics=*/</emphasis>1);
02001 
02002 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!CreateTranslationUnit(Idx,&#32;file,&#32;&amp;TU))&#32;{
02003 &#32;&#32;&#32;&#32;<link linkend="__c_index_8cpp_1aea91ddf5e996cba0de2f781cb17db1d5">clang_disposeIndex</link>(Idx);
02004 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;1;
02005 &#32;&#32;}
02006 
02007 &#32;&#32;result&#32;=&#32;perform_test_load(Idx,&#32;TU,&#32;filter,&#32;prefix,&#32;Visitor,&#32;PV,&#32;NULL);
02008 &#32;&#32;<link linkend="__c_index_8cpp_1aea91ddf5e996cba0de2f781cb17db1d5">clang_disposeIndex</link>(Idx);
02009 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;result;
02010 }
02011 
<anchor xml:id="_c-index-test_8c_source_1l02012"/><link linkend="_c-index-test_8c_1adae363afaf561553359800991169ce1c">02012</link> <emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_c-index-test_8c_1adae363afaf561553359800991169ce1c">perform_test_load_source</link>(<emphasis role="keywordtype">int</emphasis>&#32;argc,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;**argv,
02013 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*filter,&#32;CXCursorVisitor&#32;Visitor,
02014 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_c-index-test_8c_1a66dfbd9b90aeaaa39988cd8ea0bbc669">PostVisitTU</link>&#32;PV)&#32;{
02015 &#32;&#32;CXIndex&#32;Idx;
02016 &#32;&#32;CXTranslationUnit&#32;TU;
02017 &#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*CommentSchemaFile;
02018 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>CXUnsavedFile&#32;*unsaved_files&#32;=&#32;0;
02019 &#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;num_unsaved_files&#32;=&#32;0;
02020 &#32;&#32;<emphasis role="keyword">enum</emphasis>&#32;CXErrorCode&#32;Err;
02021 &#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;result;
02022 &#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;Repeats&#32;=&#32;0;
02023 &#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;I;
02024 &#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*InvocationPath;
02025 
02026 &#32;&#32;Idx&#32;=&#32;<link linkend="__c_index_8cpp_1a3420c8e7e10a7ff7906130b207cbb763">clang_createIndex</link>(<emphasis role="comment">/*&#32;excludeDeclsFromPCH&#32;*/</emphasis>
02027 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(!strcmp(filter,&#32;<emphasis role="stringliteral">&quot;local&quot;</emphasis>)&#32;||
02028 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;!strcmp(filter,&#32;<emphasis role="stringliteral">&quot;local-display&quot;</emphasis>)&#32;||
02029 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;!strcmp(filter,&#32;<emphasis role="stringliteral">&quot;local-pretty&quot;</emphasis>))
02030 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;?&#32;1
02031 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;0,
02032 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;displayDiagnostics=*/</emphasis>1);
02033 &#32;&#32;InvocationPath&#32;=&#32;getenv(<emphasis role="stringliteral">&quot;CINDEXTEST_INVOCATION_EMISSION_PATH&quot;</emphasis>);
02034 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(InvocationPath)
02035 &#32;&#32;&#32;&#32;<link linkend="__c_index_8cpp_1a97a15ecfe8f0c017cbcc5c45f558123c">clang_CXIndex_setInvocationEmissionPathOption</link>(Idx,&#32;InvocationPath);
02036 
02037 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;((CommentSchemaFile&#32;=&#32;parse_comments_schema(argc,&#32;argv)))&#32;{
02038 &#32;&#32;&#32;&#32;argc--;
02039 &#32;&#32;&#32;&#32;argv++;
02040 &#32;&#32;}
02041 
02042 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(parse_remapped_files(argc,&#32;argv,&#32;0,&#32;&amp;unsaved_files,&#32;&amp;num_unsaved_files))&#32;{
02043 &#32;&#32;&#32;&#32;<link linkend="__c_index_8cpp_1aea91ddf5e996cba0de2f781cb17db1d5">clang_disposeIndex</link>(Idx);
02044 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;-1;
02045 &#32;&#32;}
02046 
02047 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(getenv(<emphasis role="stringliteral">&quot;CINDEXTEST_EDITING&quot;</emphasis>))
02048 &#32;&#32;&#32;&#32;Repeats&#32;=&#32;5;
02049 
02050 &#32;&#32;Err&#32;=&#32;<link linkend="__c_index_8cpp_1a3ddd508cc891d95a82b747955738249a">clang_parseTranslationUnit2</link>(Idx,&#32;0,
02051 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;argv&#32;+&#32;num_unsaved_files,
02052 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;argc&#32;-&#32;num_unsaved_files,
02053 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;unsaved_files,&#32;num_unsaved_files,
02054 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;getDefaultParsingOptions(),&#32;&amp;TU);
02055 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(Err&#32;!=&#32;CXError_Success)&#32;{
02056 &#32;&#32;&#32;&#32;fprintf(stderr,&#32;<emphasis role="stringliteral">&quot;Unable&#32;to&#32;load&#32;translation&#32;unit!\n&quot;</emphasis>);
02057 &#32;&#32;&#32;&#32;describeLibclangFailure(Err);
02058 &#32;&#32;&#32;&#32;<link linkend="_c-index-test_8c_1af28d9933e8a8fd14e8394a1e7f9f6379">free_remapped_files</link>(unsaved_files,&#32;num_unsaved_files);
02059 &#32;&#32;&#32;&#32;<link linkend="__c_index_8cpp_1aea91ddf5e996cba0de2f781cb17db1d5">clang_disposeIndex</link>(Idx);
02060 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;1;
02061 &#32;&#32;}
02062 
02063 &#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(I&#32;=&#32;0;&#32;I&#32;!=&#32;Repeats;&#32;++I)&#32;{
02064 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(checkForErrors(TU)&#32;!=&#32;0)
02065 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;-1;
02066 
02067 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(Repeats&#32;&gt;&#32;1)&#32;{
02068 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__c_index_8cpp_1a496961baac6bdcc6be5e7ceac9b2273d">clang_suspendTranslationUnit</link>(TU);
02069 
02070 &#32;&#32;&#32;&#32;&#32;&#32;Err&#32;=&#32;<link linkend="__c_index_8cpp_1a2befc445c3dde1e89f6900c67892ceaa">clang_reparseTranslationUnit</link>(TU,&#32;num_unsaved_files,&#32;unsaved_files,
02071 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__c_index_8cpp_1a2f79bdd29d8f799a3943c6a5254eb789">clang_defaultReparseOptions</link>(TU));
02072 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(Err&#32;!=&#32;CXError_Success)&#32;{
02073 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;describeLibclangFailure(Err);
02074 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_c-index-test_8c_1af28d9933e8a8fd14e8394a1e7f9f6379">free_remapped_files</link>(unsaved_files,&#32;num_unsaved_files);
02075 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__c_index_8cpp_1aea91ddf5e996cba0de2f781cb17db1d5">clang_disposeIndex</link>(Idx);
02076 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;1;
02077 &#32;&#32;&#32;&#32;&#32;&#32;}
02078 &#32;&#32;&#32;&#32;}
02079 &#32;&#32;}
02080 
02081 &#32;&#32;result&#32;=&#32;perform_test_load(Idx,&#32;TU,&#32;filter,&#32;NULL,&#32;Visitor,&#32;PV,
02082 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;CommentSchemaFile);
02083 &#32;&#32;<link linkend="_c-index-test_8c_1af28d9933e8a8fd14e8394a1e7f9f6379">free_remapped_files</link>(unsaved_files,&#32;num_unsaved_files);
02084 &#32;&#32;<link linkend="__c_index_8cpp_1aea91ddf5e996cba0de2f781cb17db1d5">clang_disposeIndex</link>(Idx);
02085 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;result;
02086 }
02087 
<anchor xml:id="_c-index-test_8c_source_1l02088"/><link linkend="_c-index-test_8c_1aea3df772c772b8ca80d93c100b3de16f">02088</link> <emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_c-index-test_8c_1aea3df772c772b8ca80d93c100b3de16f">perform_test_reparse_source</link>(<emphasis role="keywordtype">int</emphasis>&#32;argc,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;**argv,&#32;<emphasis role="keywordtype">int</emphasis>&#32;trials,
02089 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*filter,&#32;CXCursorVisitor&#32;Visitor,
02090 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_c-index-test_8c_1a66dfbd9b90aeaaa39988cd8ea0bbc669">PostVisitTU</link>&#32;PV)&#32;{
02091 &#32;&#32;CXIndex&#32;Idx;
02092 &#32;&#32;CXTranslationUnit&#32;TU;
02093 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>CXUnsavedFile&#32;*unsaved_files&#32;=&#32;0;
02094 &#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;num_unsaved_files&#32;=&#32;0;
02095 &#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;compiler_arg_idx&#32;=&#32;0;
02096 &#32;&#32;<emphasis role="keyword">enum</emphasis>&#32;CXErrorCode&#32;Err;
02097 &#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;result,&#32;i;
02098 &#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;trial;
02099 &#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;execute_after_trial&#32;=&#32;0;
02100 &#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*execute_command&#32;=&#32;NULL;
02101 &#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;remap_after_trial&#32;=&#32;0;
02102 &#32;&#32;<emphasis role="keywordtype">char</emphasis>&#32;*endptr&#32;=&#32;0;
02103 &#32;&#32;
02104 &#32;&#32;Idx&#32;=&#32;<link linkend="__c_index_8cpp_1a3420c8e7e10a7ff7906130b207cbb763">clang_createIndex</link>(<emphasis role="comment">/*&#32;excludeDeclsFromPCH&#32;*/</emphasis>
02105 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;!strcmp(filter,&#32;<emphasis role="stringliteral">&quot;local&quot;</emphasis>)&#32;?&#32;1&#32;:&#32;0,
02106 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;displayDiagnostics=*/</emphasis>1);
02107 &#32;&#32;
02108 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(parse_remapped_files(argc,&#32;argv,&#32;0,&#32;&amp;unsaved_files,&#32;&amp;num_unsaved_files))&#32;{
02109 &#32;&#32;&#32;&#32;<link linkend="__c_index_8cpp_1aea91ddf5e996cba0de2f781cb17db1d5">clang_disposeIndex</link>(Idx);
02110 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;-1;
02111 &#32;&#32;}
02112 
02113 &#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(i&#32;=&#32;0;&#32;i&#32;&lt;&#32;argc;&#32;++i)&#32;{
02114 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(strcmp(argv[i],&#32;<emphasis role="stringliteral">&quot;--&quot;</emphasis>)&#32;==&#32;0)
02115 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
02116 &#32;&#32;}
02117 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(i&#32;&lt;&#32;argc)
02118 &#32;&#32;&#32;&#32;compiler_arg_idx&#32;=&#32;i+1;
02119 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(num_unsaved_files&#32;&gt;&#32;compiler_arg_idx)
02120 &#32;&#32;&#32;&#32;compiler_arg_idx&#32;=&#32;num_unsaved_files;
02121 &#32;&#32;
02122 &#32;&#32;<emphasis role="comment">/*&#32;Load&#32;the&#32;initial&#32;translation&#32;unit&#32;--&#32;we&#32;do&#32;this&#32;without&#32;honoring&#32;remapped</emphasis>
02123 <emphasis role="comment">&#32;&#32;&#32;*&#32;files,&#32;so&#32;that&#32;we&#32;have&#32;a&#32;way&#32;to&#32;test&#32;results&#32;after&#32;changing&#32;the&#32;source.&#32;*/</emphasis>
02124 &#32;&#32;Err&#32;=&#32;<link linkend="__c_index_8cpp_1a3ddd508cc891d95a82b747955738249a">clang_parseTranslationUnit2</link>(Idx,&#32;0,
02125 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;argv&#32;+&#32;compiler_arg_idx,
02126 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;argc&#32;-&#32;compiler_arg_idx,
02127 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;0,&#32;0,&#32;getDefaultParsingOptions(),&#32;&amp;TU);
02128 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(Err&#32;!=&#32;CXError_Success)&#32;{
02129 &#32;&#32;&#32;&#32;fprintf(stderr,&#32;<emphasis role="stringliteral">&quot;Unable&#32;to&#32;load&#32;translation&#32;unit!\n&quot;</emphasis>);
02130 &#32;&#32;&#32;&#32;describeLibclangFailure(Err);
02131 &#32;&#32;&#32;&#32;<link linkend="_c-index-test_8c_1af28d9933e8a8fd14e8394a1e7f9f6379">free_remapped_files</link>(unsaved_files,&#32;num_unsaved_files);
02132 &#32;&#32;&#32;&#32;<link linkend="__c_index_8cpp_1aea91ddf5e996cba0de2f781cb17db1d5">clang_disposeIndex</link>(Idx);
02133 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;1;
02134 &#32;&#32;}
02135 &#32;&#32;
02136 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(checkForErrors(TU)&#32;!=&#32;0)
02137 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;-1;
02138 
02139 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(getenv(<emphasis role="stringliteral">&quot;CINDEXTEST_EXECUTE_COMMAND&quot;</emphasis>))&#32;{
02140 &#32;&#32;&#32;&#32;execute_command&#32;=&#32;getenv(<emphasis role="stringliteral">&quot;CINDEXTEST_EXECUTE_COMMAND&quot;</emphasis>);
02141 &#32;&#32;}
02142 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(getenv(<emphasis role="stringliteral">&quot;CINDEXTEST_EXECUTE_AFTER_TRIAL&quot;</emphasis>))&#32;{
02143 &#32;&#32;&#32;&#32;execute_after_trial&#32;=
02144 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;strtol(getenv(<emphasis role="stringliteral">&quot;CINDEXTEST_EXECUTE_AFTER_TRIAL&quot;</emphasis>),&#32;&amp;endptr,&#32;10);
02145 &#32;&#32;}
02146 
02147 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(getenv(<emphasis role="stringliteral">&quot;CINDEXTEST_REMAP_AFTER_TRIAL&quot;</emphasis>))&#32;{
02148 &#32;&#32;&#32;&#32;remap_after_trial&#32;=
02149 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;strtol(getenv(<emphasis role="stringliteral">&quot;CINDEXTEST_REMAP_AFTER_TRIAL&quot;</emphasis>),&#32;&amp;endptr,&#32;10);
02150 &#32;&#32;}
02151 
02152 &#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(trial&#32;=&#32;0;&#32;trial&#32;&lt;&#32;trials;&#32;++trial)&#32;{
02153 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(execute_command&#32;&amp;&amp;&#32;trial&#32;==&#32;execute_after_trial)&#32;{
02154 &#32;&#32;&#32;&#32;&#32;&#32;result&#32;=&#32;<link linkend="_c-index-test_8c_1abf8b8cca4d3659c057fd2ab49afb69be">indextest_perform_shell_execution</link>(execute_command);
02155 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(result&#32;!=&#32;0)
02156 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;result;
02157 &#32;&#32;&#32;&#32;}
02158 
02159 &#32;&#32;&#32;&#32;<link linkend="_c-index-test_8c_1af28d9933e8a8fd14e8394a1e7f9f6379">free_remapped_files</link>(unsaved_files,&#32;num_unsaved_files);
02160 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(parse_remapped_files_with_try(trial,&#32;argc,&#32;argv,&#32;0,
02161 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;unsaved_files,&#32;&amp;num_unsaved_files))&#32;{
02162 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__c_index_8cpp_1a3af88c13004a1954abd6dc956faff3be">clang_disposeTranslationUnit</link>(TU);
02163 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__c_index_8cpp_1aea91ddf5e996cba0de2f781cb17db1d5">clang_disposeIndex</link>(Idx);
02164 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;-1;
02165 &#32;&#32;&#32;&#32;}
02166 
02167 &#32;&#32;&#32;&#32;Err&#32;=&#32;<link linkend="__c_index_8cpp_1a2befc445c3dde1e89f6900c67892ceaa">clang_reparseTranslationUnit</link>(
02168 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;TU,
02169 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;trial&#32;&gt;=&#32;remap_after_trial&#32;?&#32;num_unsaved_files&#32;:&#32;0,
02170 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;trial&#32;&gt;=&#32;remap_after_trial&#32;?&#32;unsaved_files&#32;:&#32;0,
02171 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__c_index_8cpp_1a2f79bdd29d8f799a3943c6a5254eb789">clang_defaultReparseOptions</link>(TU));
02172 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(Err&#32;!=&#32;CXError_Success)&#32;{
02173 &#32;&#32;&#32;&#32;&#32;&#32;fprintf(stderr,&#32;<emphasis role="stringliteral">&quot;Unable&#32;to&#32;reparse&#32;translation&#32;unit!\n&quot;</emphasis>);
02174 &#32;&#32;&#32;&#32;&#32;&#32;describeLibclangFailure(Err);
02175 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__c_index_8cpp_1a3af88c13004a1954abd6dc956faff3be">clang_disposeTranslationUnit</link>(TU);
02176 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_c-index-test_8c_1af28d9933e8a8fd14e8394a1e7f9f6379">free_remapped_files</link>(unsaved_files,&#32;num_unsaved_files);
02177 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__c_index_8cpp_1aea91ddf5e996cba0de2f781cb17db1d5">clang_disposeIndex</link>(Idx);
02178 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;-1;&#32;&#32;&#32;&#32;&#32;&#32;
02179 &#32;&#32;&#32;&#32;}
02180 
02181 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(checkForErrors(TU)&#32;!=&#32;0)
02182 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;-1;
02183 &#32;&#32;}
02184 &#32;&#32;
02185 &#32;&#32;result&#32;=&#32;perform_test_load(Idx,&#32;TU,&#32;filter,&#32;NULL,&#32;Visitor,&#32;PV,&#32;NULL);
02186 
02187 &#32;&#32;<link linkend="_c-index-test_8c_1af28d9933e8a8fd14e8394a1e7f9f6379">free_remapped_files</link>(unsaved_files,&#32;num_unsaved_files);
02188 &#32;&#32;<link linkend="__c_index_8cpp_1aea91ddf5e996cba0de2f781cb17db1d5">clang_disposeIndex</link>(Idx);
02189 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;result;
02190 }
02191 
02192 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;perform_single_file_parse(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*filename)&#32;{
02193 &#32;&#32;CXIndex&#32;Idx;
02194 &#32;&#32;CXTranslationUnit&#32;TU;
02195 &#32;&#32;<emphasis role="keyword">enum</emphasis>&#32;CXErrorCode&#32;Err;
02196 &#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;result;
02197 
02198 &#32;&#32;Idx&#32;=&#32;<link linkend="__c_index_8cpp_1a3420c8e7e10a7ff7906130b207cbb763">clang_createIndex</link>(<emphasis role="comment">/*&#32;excludeDeclsFromPCH&#32;*/</emphasis>1,
02199 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;displayDiagnostics=*/</emphasis>1);
02200 
02201 &#32;&#32;Err&#32;=&#32;<link linkend="__c_index_8cpp_1a3ddd508cc891d95a82b747955738249a">clang_parseTranslationUnit2</link>(Idx,&#32;filename,
02202 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*command_line_args=*/</emphasis>NULL,
02203 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*num_command_line_args=*/</emphasis>0,
02204 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*unsaved_files=*/</emphasis>NULL,
02205 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*num_unsaved_files=*/</emphasis>0,
02206 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;CXTranslationUnit_SingleFileParse,&#32;&amp;TU);
02207 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(Err&#32;!=&#32;CXError_Success)&#32;{
02208 &#32;&#32;&#32;&#32;fprintf(stderr,&#32;<emphasis role="stringliteral">&quot;Unable&#32;to&#32;load&#32;translation&#32;unit!\n&quot;</emphasis>);
02209 &#32;&#32;&#32;&#32;describeLibclangFailure(Err);
02210 &#32;&#32;&#32;&#32;<link linkend="__c_index_8cpp_1aea91ddf5e996cba0de2f781cb17db1d5">clang_disposeIndex</link>(Idx);
02211 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;1;
02212 &#32;&#32;}
02213 
02214 &#32;&#32;result&#32;=&#32;perform_test_load(Idx,&#32;TU,&#32;<emphasis role="comment">/*filter=*/</emphasis><emphasis role="stringliteral">&quot;all&quot;</emphasis>,&#32;<emphasis role="comment">/*prefix=*/</emphasis>NULL,&#32;<link linkend="_c-index-test_8c_1a592066faf85d73bd5a13ca28d5aca47d">FilteredPrintingVisitor</link>,&#32;<emphasis role="comment">/*PostVisit=*/</emphasis>NULL,
02215 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*CommentSchemaFile=*/</emphasis>NULL);
02216 &#32;&#32;<link linkend="__c_index_8cpp_1aea91ddf5e996cba0de2f781cb17db1d5">clang_disposeIndex</link>(Idx);
02217 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;result;
02218 }
02219 
02220 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;perform_file_retain_excluded_cb(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*filename)&#32;{
02221 &#32;&#32;CXIndex&#32;Idx;
02222 &#32;&#32;CXTranslationUnit&#32;TU;
02223 &#32;&#32;<emphasis role="keyword">enum</emphasis>&#32;CXErrorCode&#32;Err;
02224 &#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;result;
02225 
02226 &#32;&#32;Idx&#32;=&#32;<link linkend="__c_index_8cpp_1a3420c8e7e10a7ff7906130b207cbb763">clang_createIndex</link>(<emphasis role="comment">/*&#32;excludeDeclsFromPCH&#32;*/</emphasis>1,
02227 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;displayDiagnostics=*/</emphasis>1);
02228 
02229 &#32;&#32;Err&#32;=&#32;<link linkend="__c_index_8cpp_1a3ddd508cc891d95a82b747955738249a">clang_parseTranslationUnit2</link>(Idx,&#32;filename,
02230 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*command_line_args=*/</emphasis>NULL,
02231 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*num_command_line_args=*/</emphasis>0,
02232 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*unsaved_files=*/</emphasis>NULL,
02233 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*num_unsaved_files=*/</emphasis>0,
02234 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;CXTranslationUnit_RetainExcludedConditionalBlocks,&#32;&amp;TU);
02235 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(Err&#32;!=&#32;CXError_Success)&#32;{
02236 &#32;&#32;&#32;&#32;fprintf(stderr,&#32;<emphasis role="stringliteral">&quot;Unable&#32;to&#32;load&#32;translation&#32;unit!\n&quot;</emphasis>);
02237 &#32;&#32;&#32;&#32;describeLibclangFailure(Err);
02238 &#32;&#32;&#32;&#32;<link linkend="__c_index_8cpp_1aea91ddf5e996cba0de2f781cb17db1d5">clang_disposeIndex</link>(Idx);
02239 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;1;
02240 &#32;&#32;}
02241 
02242 &#32;&#32;result&#32;=&#32;perform_test_load(Idx,&#32;TU,&#32;<emphasis role="comment">/*filter=*/</emphasis><emphasis role="stringliteral">&quot;all&quot;</emphasis>,&#32;<emphasis role="comment">/*prefix=*/</emphasis>NULL,&#32;<link linkend="_c-index-test_8c_1a592066faf85d73bd5a13ca28d5aca47d">FilteredPrintingVisitor</link>,&#32;<emphasis role="comment">/*PostVisit=*/</emphasis>NULL,
02243 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*CommentSchemaFile=*/</emphasis>NULL);
02244 &#32;&#32;<link linkend="__c_index_8cpp_1aea91ddf5e996cba0de2f781cb17db1d5">clang_disposeIndex</link>(Idx);
02245 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;result;
02246 }
02247 
02248 <emphasis role="comment">/******************************************************************************/</emphasis>
02249 <emphasis role="comment">/*&#32;Logic&#32;for&#32;testing&#32;clang_getCursor().&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*/</emphasis>
02250 <emphasis role="comment">/******************************************************************************/</emphasis>
02251 
02252 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;print_cursor_file_scan(CXTranslationUnit&#32;TU,&#32;CXCursor&#32;cursor,
02253 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;start_line,&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;start_col,
02254 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;end_line,&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;end_col,
02255 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*prefix)&#32;{
02256 &#32;&#32;printf(<emphasis role="stringliteral">&quot;//&#32;%s:&#32;&quot;</emphasis>,&#32;FileCheckPrefix);
02257 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(prefix)
02258 &#32;&#32;&#32;&#32;printf(<emphasis role="stringliteral">&quot;-%s&quot;</emphasis>,&#32;prefix);
02259 &#32;&#32;PrintExtent(stdout,&#32;start_line,&#32;start_col,&#32;end_line,&#32;end_col);
02260 &#32;&#32;printf(<emphasis role="stringliteral">&quot;&#32;&quot;</emphasis>);
02261 &#32;&#32;PrintCursor(cursor,&#32;NULL);
02262 &#32;&#32;printf(<emphasis role="stringliteral">&quot;\n&quot;</emphasis>);
02263 }
02264 
02265 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;perform_file_scan(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*ast_file,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*source_file,
02266 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*prefix)&#32;{
02267 &#32;&#32;CXIndex&#32;Idx;
02268 &#32;&#32;CXTranslationUnit&#32;TU;
02269 &#32;&#32;FILE&#32;*fp;
02270 &#32;&#32;CXCursor&#32;prevCursor&#32;=&#32;<link linkend="__c_index_8cpp_1aa22233466eaf91f6f3cf6b84255c3b68">clang_getNullCursor</link>();
02271 &#32;&#32;CXFile&#32;file;
02272 &#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;line&#32;=&#32;1,&#32;col&#32;=&#32;1;
02273 &#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;start_line&#32;=&#32;1,&#32;start_col&#32;=&#32;1;
02274 
02275 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!(Idx&#32;=&#32;<link linkend="__c_index_8cpp_1a3420c8e7e10a7ff7906130b207cbb763">clang_createIndex</link>(<emphasis role="comment">/*&#32;excludeDeclsFromPCH&#32;*/</emphasis>&#32;1,
02276 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;displayDiagnostics=*/</emphasis>1)))&#32;{
02277 &#32;&#32;&#32;&#32;fprintf(stderr,&#32;<emphasis role="stringliteral">&quot;Could&#32;not&#32;create&#32;Index\n&quot;</emphasis>);
02278 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;1;
02279 &#32;&#32;}
02280 
02281 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!CreateTranslationUnit(Idx,&#32;ast_file,&#32;&amp;TU))
02282 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;1;
02283 
02284 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;((fp&#32;=&#32;fopen(source_file,&#32;<emphasis role="stringliteral">&quot;r&quot;</emphasis>))&#32;==&#32;NULL)&#32;{
02285 &#32;&#32;&#32;&#32;fprintf(stderr,&#32;<emphasis role="stringliteral">&quot;Could&#32;not&#32;open&#32;&apos;%s&apos;\n&quot;</emphasis>,&#32;source_file);
02286 &#32;&#32;&#32;&#32;<link linkend="__c_index_8cpp_1a3af88c13004a1954abd6dc956faff3be">clang_disposeTranslationUnit</link>(TU);
02287 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;1;
02288 &#32;&#32;}
02289 
02290 &#32;&#32;file&#32;=&#32;<link linkend="__c_index_8cpp_1a7c72c3450d02a5d985f152cc0dee1785">clang_getFile</link>(TU,&#32;source_file);
02291 &#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(;;)&#32;{
02292 &#32;&#32;&#32;&#32;CXCursor&#32;cursor;
02293 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;c&#32;=&#32;fgetc(fp);
02294 
02295 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(c&#32;==&#32;<emphasis role="charliteral">&apos;\n&apos;</emphasis>)&#32;{
02296 &#32;&#32;&#32;&#32;&#32;&#32;++line;
02297 &#32;&#32;&#32;&#32;&#32;&#32;col&#32;=&#32;1;
02298 &#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>
02299 &#32;&#32;&#32;&#32;&#32;&#32;++col;
02300 
02301 &#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;Check&#32;the&#32;cursor&#32;at&#32;this&#32;position,&#32;and&#32;dump&#32;the&#32;previous&#32;one&#32;if&#32;we&#32;have</emphasis>
02302 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;*&#32;found&#32;something&#32;new.</emphasis>
02303 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;*/</emphasis>
02304 &#32;&#32;&#32;&#32;cursor&#32;=&#32;<link linkend="__c_index_8cpp_1a98b7e00ed3ca471a2e35509110ddc0c5">clang_getCursor</link>(TU,&#32;<link linkend="__c_x_source_location_8cpp_1a3da1e96662794609af6bec3dc345dd9a">clang_getLocation</link>(TU,&#32;file,&#32;line,&#32;col));
02305 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;((c&#32;==&#32;EOF&#32;||&#32;!<link linkend="__c_index_8cpp_1a96d5f0059613428736715de616ed38f9">clang_equalCursors</link>(cursor,&#32;prevCursor))&#32;&amp;&amp;
02306 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;prevCursor.kind&#32;!=&#32;CXCursor_InvalidFile)&#32;{
02307 &#32;&#32;&#32;&#32;&#32;&#32;print_cursor_file_scan(TU,&#32;prevCursor,&#32;start_line,&#32;start_col,
02308 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;line,&#32;col,&#32;prefix);
02309 &#32;&#32;&#32;&#32;&#32;&#32;start_line&#32;=&#32;line;
02310 &#32;&#32;&#32;&#32;&#32;&#32;start_col&#32;=&#32;col;
02311 &#32;&#32;&#32;&#32;}
02312 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(c&#32;==&#32;EOF)
02313 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
02314 
02315 &#32;&#32;&#32;&#32;prevCursor&#32;=&#32;cursor;
02316 &#32;&#32;}
02317 
02318 &#32;&#32;fclose(fp);
02319 &#32;&#32;<link linkend="__c_index_8cpp_1a3af88c13004a1954abd6dc956faff3be">clang_disposeTranslationUnit</link>(TU);
02320 &#32;&#32;<link linkend="__c_index_8cpp_1aea91ddf5e996cba0de2f781cb17db1d5">clang_disposeIndex</link>(Idx);
02321 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
02322 }
02323 
02324 <emphasis role="comment">/******************************************************************************/</emphasis>
02325 <emphasis role="comment">/*&#32;Logic&#32;for&#32;testing&#32;clang&#32;code&#32;completion.&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*/</emphasis>
02326 <emphasis role="comment">/******************************************************************************/</emphasis>
02327 
02328 <emphasis role="comment">/*&#32;Parse&#32;file:line:column&#32;from&#32;the&#32;input&#32;string.&#32;Returns&#32;0&#32;on&#32;success,&#32;non-zero</emphasis>
02329 <emphasis role="comment">&#32;&#32;&#32;on&#32;failure.&#32;If&#32;successful,&#32;the&#32;pointer&#32;*filename&#32;will&#32;contain&#32;newly-allocated</emphasis>
02330 <emphasis role="comment">&#32;&#32;&#32;memory&#32;(that&#32;will&#32;be&#32;owned&#32;by&#32;the&#32;caller)&#32;to&#32;store&#32;the&#32;file&#32;name.&#32;*/</emphasis>
<anchor xml:id="_c-index-test_8c_source_1l02331"/><link linkend="_c-index-test_8c_1a86d7b0a04b2271451b84a97a62081480">02331</link> <emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_c-index-test_8c_1a86d7b0a04b2271451b84a97a62081480">parse_file_line_column</link>(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*input,&#32;<emphasis role="keywordtype">char</emphasis>&#32;**filename,&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;*line,
02332 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;*column,&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;*second_line,
02333 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;*second_column)&#32;{
02334 &#32;&#32;<emphasis role="comment">/*&#32;Find&#32;the&#32;second&#32;colon.&#32;*/</emphasis>
02335 &#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*last_colon&#32;=&#32;strrchr(input,&#32;<emphasis role="charliteral">&apos;:&apos;</emphasis>);
02336 &#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;values[4],&#32;i;
02337 &#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;num_values&#32;=&#32;(second_line&#32;&amp;&amp;&#32;second_column)?&#32;4&#32;:&#32;2;
02338 
02339 &#32;&#32;<emphasis role="keywordtype">char</emphasis>&#32;*endptr&#32;=&#32;0;
02340 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!last_colon&#32;||&#32;last_colon&#32;==&#32;input)&#32;{
02341 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(num_values&#32;==&#32;4)
02342 &#32;&#32;&#32;&#32;&#32;&#32;fprintf(stderr,&#32;<emphasis role="stringliteral">&quot;could&#32;not&#32;parse&#32;filename:line:column:line:column&#32;in&#32;&quot;</emphasis>
02343 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;&apos;%s&apos;\n&quot;</emphasis>,&#32;input);
02344 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
02345 &#32;&#32;&#32;&#32;&#32;&#32;fprintf(stderr,&#32;<emphasis role="stringliteral">&quot;could&#32;not&#32;parse&#32;filename:line:column&#32;in&#32;&apos;%s&apos;\n&quot;</emphasis>,&#32;input);
02346 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;1;
02347 &#32;&#32;}
02348 
02349 &#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(i&#32;=&#32;0;&#32;i&#32;!=&#32;num_values;&#32;++i)&#32;{
02350 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*prev_colon;
02351 
02352 &#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;Parse&#32;the&#32;next&#32;line&#32;or&#32;column.&#32;*/</emphasis>
02353 &#32;&#32;&#32;&#32;values[num_values&#32;-&#32;i&#32;-&#32;1]&#32;=&#32;strtol(last_colon&#32;+&#32;1,&#32;&amp;endptr,&#32;10);
02354 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(*endptr&#32;!=&#32;0&#32;&amp;&amp;&#32;*endptr&#32;!=&#32;<emphasis role="charliteral">&apos;:&apos;</emphasis>)&#32;{
02355 &#32;&#32;&#32;&#32;&#32;&#32;fprintf(stderr,&#32;<emphasis role="stringliteral">&quot;could&#32;not&#32;parse&#32;%s&#32;in&#32;&apos;%s&apos;\n&quot;</emphasis>,
02356 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(i&#32;%&#32;2&#32;?&#32;<emphasis role="stringliteral">&quot;column&quot;</emphasis>&#32;:&#32;<emphasis role="stringliteral">&quot;line&quot;</emphasis>),&#32;input);
02357 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;1;
02358 &#32;&#32;&#32;&#32;}
02359 
02360 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(i&#32;+&#32;1&#32;==&#32;num_values)
02361 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
02362 
02363 &#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;Find&#32;the&#32;previous&#32;colon.&#32;*/</emphasis>
02364 &#32;&#32;&#32;&#32;prev_colon&#32;=&#32;last_colon&#32;-&#32;1;
02365 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(prev_colon&#32;!=&#32;input&#32;&amp;&amp;&#32;*prev_colon&#32;!=&#32;<emphasis role="charliteral">&apos;:&apos;</emphasis>)
02366 &#32;&#32;&#32;&#32;&#32;&#32;--prev_colon;
02367 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(prev_colon&#32;==&#32;input)&#32;{
02368 &#32;&#32;&#32;&#32;&#32;&#32;fprintf(stderr,&#32;<emphasis role="stringliteral">&quot;could&#32;not&#32;parse&#32;%s&#32;in&#32;&apos;%s&apos;\n&quot;</emphasis>,
02369 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(i&#32;%&#32;2&#32;==&#32;0?&#32;<emphasis role="stringliteral">&quot;column&quot;</emphasis>&#32;:&#32;<emphasis role="stringliteral">&quot;line&quot;</emphasis>),&#32;input);
02370 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;1;
02371 &#32;&#32;&#32;&#32;}
02372 
02373 &#32;&#32;&#32;&#32;last_colon&#32;=&#32;prev_colon;
02374 &#32;&#32;}
02375 
02376 &#32;&#32;*line&#32;=&#32;values[0];
02377 &#32;&#32;*column&#32;=&#32;values[1];
02378 
02379 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(second_line&#32;&amp;&amp;&#32;second_column)&#32;{
02380 &#32;&#32;&#32;&#32;*second_line&#32;=&#32;values[2];
02381 &#32;&#32;&#32;&#32;*second_column&#32;=&#32;values[3];
02382 &#32;&#32;}
02383 
02384 &#32;&#32;<emphasis role="comment">/*&#32;Copy&#32;the&#32;file&#32;name.&#32;*/</emphasis>
02385 &#32;&#32;*filename&#32;=&#32;(<emphasis role="keywordtype">char</emphasis>*)malloc(last_colon&#32;-&#32;input&#32;+&#32;1);
02386 &#32;&#32;assert(*filename);
02387 &#32;&#32;memcpy(*filename,&#32;input,&#32;last_colon&#32;-&#32;input);
02388 &#32;&#32;(*filename)[last_colon&#32;-&#32;input]&#32;=&#32;0;
02389 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
02390 }
02391 
02392 <emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*
<anchor xml:id="_c-index-test_8c_source_1l02393"/><link linkend="_c-index-test_8c_1a5f98074f0f9c94d14afc634481d9e037">02393</link> <link linkend="_c-index-test_8c_1a5f98074f0f9c94d14afc634481d9e037">clang_getCompletionChunkKindSpelling</link>(<emphasis role="keyword">enum</emphasis>&#32;CXCompletionChunkKind&#32;Kind)&#32;{
02394 &#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(Kind)&#32;{
02395 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCompletionChunk_Optional:&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="stringliteral">&quot;Optional&quot;</emphasis>;
02396 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCompletionChunk_TypedText:&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="stringliteral">&quot;TypedText&quot;</emphasis>;
02397 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCompletionChunk_Text:&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="stringliteral">&quot;Text&quot;</emphasis>;
02398 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCompletionChunk_Placeholder:&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="stringliteral">&quot;Placeholder&quot;</emphasis>;
02399 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCompletionChunk_Informative:&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="stringliteral">&quot;Informative&quot;</emphasis>;
02400 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCompletionChunk_CurrentParameter:&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="stringliteral">&quot;CurrentParameter&quot;</emphasis>;
02401 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCompletionChunk_LeftParen:&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="stringliteral">&quot;LeftParen&quot;</emphasis>;
02402 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCompletionChunk_RightParen:&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="stringliteral">&quot;RightParen&quot;</emphasis>;
02403 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCompletionChunk_LeftBracket:&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="stringliteral">&quot;LeftBracket&quot;</emphasis>;
02404 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCompletionChunk_RightBracket:&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="stringliteral">&quot;RightBracket&quot;</emphasis>;
02405 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCompletionChunk_LeftBrace:&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="stringliteral">&quot;LeftBrace&quot;</emphasis>;
02406 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCompletionChunk_RightBrace:&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="stringliteral">&quot;RightBrace&quot;</emphasis>;
02407 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCompletionChunk_LeftAngle:&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="stringliteral">&quot;LeftAngle&quot;</emphasis>;
02408 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCompletionChunk_RightAngle:&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="stringliteral">&quot;RightAngle&quot;</emphasis>;
02409 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCompletionChunk_Comma:&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="stringliteral">&quot;Comma&quot;</emphasis>;
02410 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCompletionChunk_ResultType:&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="stringliteral">&quot;ResultType&quot;</emphasis>;
02411 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCompletionChunk_Colon:&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="stringliteral">&quot;Colon&quot;</emphasis>;
02412 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCompletionChunk_SemiColon:&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="stringliteral">&quot;SemiColon&quot;</emphasis>;
02413 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCompletionChunk_Equal:&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="stringliteral">&quot;Equal&quot;</emphasis>;
02414 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCompletionChunk_HorizontalSpace:&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="stringliteral">&quot;HorizontalSpace&quot;</emphasis>;
02415 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXCompletionChunk_VerticalSpace:&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="stringliteral">&quot;VerticalSpace&quot;</emphasis>;
02416 &#32;&#32;}
02417 
02418 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="stringliteral">&quot;Unknown&quot;</emphasis>;
02419 }
02420 
02421 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;checkForErrors(CXTranslationUnit&#32;TU)&#32;{
02422 &#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;Num,&#32;i;
02423 &#32;&#32;CXDiagnostic&#32;Diag;
02424 &#32;&#32;CXString&#32;DiagStr;
02425 
02426 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!getenv(<emphasis role="stringliteral">&quot;CINDEXTEST_FAILONERROR&quot;</emphasis>))
02427 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
02428 
02429 &#32;&#32;Num&#32;=&#32;<link linkend="__c_index_diagnostic_8cpp_1ac312148831b9a3031a36a0825e26a870">clang_getNumDiagnostics</link>(TU);
02430 &#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(i&#32;=&#32;0;&#32;i&#32;!=&#32;Num;&#32;++i)&#32;{
02431 &#32;&#32;&#32;&#32;Diag&#32;=&#32;<link linkend="__c_index_diagnostic_8cpp_1a8357ec474218706cbc792732a54e3dfd">clang_getDiagnostic</link>(TU,&#32;i);
02432 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="__c_index_diagnostic_8cpp_1a4acc9ff12cb403c96d56e87359dfc7c7">clang_getDiagnosticSeverity</link>(Diag)&#32;&gt;=&#32;CXDiagnostic_Error)&#32;{
02433 &#32;&#32;&#32;&#32;&#32;&#32;DiagStr&#32;=&#32;<link linkend="__c_index_diagnostic_8cpp_1a3ed169ee4a472764c11724cc7768e6eb">clang_formatDiagnostic</link>(Diag,
02434 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__c_index_diagnostic_8cpp_1a1db1e7c1136fd6d171f47d0b7d4f8bd9">clang_defaultDiagnosticDisplayOptions</link>());
02435 &#32;&#32;&#32;&#32;&#32;&#32;fprintf(stderr,&#32;<emphasis role="stringliteral">&quot;%s\n&quot;</emphasis>,&#32;<link linkend="__c_x_string_8cpp_1acd478c1b1785e17c0fe377bd70a2195f">clang_getCString</link>(DiagStr));
02436 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__c_x_string_8cpp_1a46c85f1255580ed186aa6f7380a06883">clang_disposeString</link>(DiagStr);
02437 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__c_index_diagnostic_8cpp_1a11aa4e77bf15f80d846a2216afbe8726">clang_disposeDiagnostic</link>(Diag);
02438 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;-1;
02439 &#32;&#32;&#32;&#32;}
02440 &#32;&#32;&#32;&#32;<link linkend="__c_index_diagnostic_8cpp_1a11aa4e77bf15f80d846a2216afbe8726">clang_disposeDiagnostic</link>(Diag);
02441 &#32;&#32;}
02442 
02443 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
02444 }
02445 
02446 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;print_completion_string(CXCompletionString&#32;completion_string,
02447 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;FILE&#32;*file)&#32;{
02448 &#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;I,&#32;N;
02449 
02450 &#32;&#32;N&#32;=&#32;<link linkend="__c_index_code_completion_8cpp_1a075fc2a04c95b00ccadf6ccc0ab5b91d">clang_getNumCompletionChunks</link>(completion_string);
02451 &#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(I&#32;=&#32;0;&#32;I&#32;!=&#32;N;&#32;++I)&#32;{
02452 &#32;&#32;&#32;&#32;CXString&#32;text;
02453 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*cstr;
02454 &#32;&#32;&#32;&#32;<emphasis role="keyword">enum</emphasis>&#32;CXCompletionChunkKind&#32;Kind
02455 &#32;&#32;&#32;&#32;&#32;&#32;=&#32;<link linkend="__c_index_code_completion_8cpp_1a6ce9754f88dc96e3628a7e479976c4e7">clang_getCompletionChunkKind</link>(completion_string,&#32;I);
02456 
02457 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(Kind&#32;==&#32;CXCompletionChunk_Optional)&#32;{
02458 &#32;&#32;&#32;&#32;&#32;&#32;fprintf(file,&#32;<emphasis role="stringliteral">&quot;{Optional&#32;&quot;</emphasis>);
02459 &#32;&#32;&#32;&#32;&#32;&#32;print_completion_string(
02460 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__c_index_code_completion_8cpp_1a50babc07437ed1bd140ed2580b7d84b4">clang_getCompletionChunkCompletionString</link>(completion_string,&#32;I),
02461 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;file);
02462 &#32;&#32;&#32;&#32;&#32;&#32;fprintf(file,&#32;<emphasis role="stringliteral">&quot;}&quot;</emphasis>);
02463 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">continue</emphasis>;
02464 &#32;&#32;&#32;&#32;}&#32;
02465 
02466 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(Kind&#32;==&#32;CXCompletionChunk_VerticalSpace)&#32;{
02467 &#32;&#32;&#32;&#32;&#32;&#32;fprintf(file,&#32;<emphasis role="stringliteral">&quot;{VerticalSpace&#32;&#32;}&quot;</emphasis>);
02468 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">continue</emphasis>;
02469 &#32;&#32;&#32;&#32;}
02470 
02471 &#32;&#32;&#32;&#32;text&#32;=&#32;<link linkend="__c_index_code_completion_8cpp_1a374f74c7bf629362e8da626775301a00">clang_getCompletionChunkText</link>(completion_string,&#32;I);
02472 &#32;&#32;&#32;&#32;cstr&#32;=&#32;<link linkend="__c_x_string_8cpp_1acd478c1b1785e17c0fe377bd70a2195f">clang_getCString</link>(text);
02473 &#32;&#32;&#32;&#32;fprintf(file,&#32;<emphasis role="stringliteral">&quot;{%s&#32;%s}&quot;</emphasis>,
02474 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_c-index-test_8c_1a5f98074f0f9c94d14afc634481d9e037">clang_getCompletionChunkKindSpelling</link>(Kind),
02475 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cstr&#32;?&#32;cstr&#32;:&#32;<emphasis role="stringliteral">&quot;&quot;</emphasis>);
02476 &#32;&#32;&#32;&#32;<link linkend="__c_x_string_8cpp_1a46c85f1255580ed186aa6f7380a06883">clang_disposeString</link>(text);
02477 &#32;&#32;}
02478 
02479 }
02480 
02481 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;print_line_column(CXSourceLocation&#32;location,&#32;FILE&#32;*file)&#32;{
02482 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;line,&#32;column;
02483 &#32;&#32;&#32;&#32;<link linkend="__c_x_source_location_8cpp_1ab2dea99bd78deea3e50564414208687b">clang_getExpansionLocation</link>(location,&#32;NULL,&#32;&amp;line,&#32;&amp;column,&#32;NULL);
02484 &#32;&#32;&#32;&#32;fprintf(file,&#32;<emphasis role="stringliteral">&quot;%d:%d&quot;</emphasis>,&#32;line,&#32;column);
02485 }
02486 
02487 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;print_token_range(CXTranslationUnit&#32;translation_unit,
02488 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;CXSourceLocation&#32;start,&#32;FILE&#32;*file)&#32;{
02489 &#32;&#32;CXToken&#32;*token&#32;=&#32;<link linkend="__c_index_8cpp_1ae7b38c2c862cd0bde6882c48974b11e9">clang_getToken</link>(translation_unit,&#32;start);
02490 
02491 &#32;&#32;fprintf(file,&#32;<emphasis role="stringliteral">&quot;{&quot;</emphasis>);
02492 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(token&#32;!=&#32;NULL)&#32;{
02493 &#32;&#32;&#32;&#32;CXSourceRange&#32;token_range&#32;=&#32;<link linkend="__c_index_8cpp_1a216d4670f967e3bd9f9c977691282047">clang_getTokenExtent</link>(translation_unit,&#32;*token);
02494 &#32;&#32;&#32;&#32;print_line_column(<link linkend="__c_x_source_location_8cpp_1a14a10dd8d9a4069c4fc1a7be62f58874">clang_getRangeStart</link>(token_range),&#32;file);
02495 &#32;&#32;&#32;&#32;fprintf(file,&#32;<emphasis role="stringliteral">&quot;-&quot;</emphasis>);
02496 &#32;&#32;&#32;&#32;print_line_column(<link linkend="__c_x_source_location_8cpp_1a146c4bda0251ee320dc6e4b1b3fbb919">clang_getRangeEnd</link>(token_range),&#32;file);
02497 &#32;&#32;&#32;&#32;<link linkend="__c_index_8cpp_1a69a3b1b393fd8cd3cf50802b2a5b08af">clang_disposeTokens</link>(translation_unit,&#32;token,&#32;1);
02498 &#32;&#32;}
02499 
02500 &#32;&#32;fprintf(file,&#32;<emphasis role="stringliteral">&quot;}&quot;</emphasis>);
02501 }
02502 
02503 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;print_completion_result(CXTranslationUnit&#32;translation_unit,
02504 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;CXCodeCompleteResults&#32;*completion_results,
02505 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;index,
02506 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;FILE&#32;*file)&#32;{
02507 &#32;&#32;CXCompletionResult&#32;*completion_result&#32;=&#32;completion_results-&gt;Results&#32;+&#32;index;
02508 &#32;&#32;CXString&#32;ks&#32;=&#32;<link linkend="__c_index_8cpp_1a667cf97e111be828ff2c36e23d583fce">clang_getCursorKindSpelling</link>(completion_result-&gt;CursorKind);
02509 &#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;annotationCount;
02510 &#32;&#32;<emphasis role="keyword">enum</emphasis>&#32;CXCursorKind&#32;ParentKind;
02511 &#32;&#32;CXString&#32;ParentName;
02512 &#32;&#32;CXString&#32;BriefComment;
02513 &#32;&#32;CXString&#32;Annotation;
02514 &#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*BriefCommentCString;
02515 &#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;i;
02516 &#32;&#32;
02517 &#32;&#32;fprintf(file,&#32;<emphasis role="stringliteral">&quot;%s:&quot;</emphasis>,&#32;<link linkend="__c_x_string_8cpp_1acd478c1b1785e17c0fe377bd70a2195f">clang_getCString</link>(ks));
02518 &#32;&#32;<link linkend="__c_x_string_8cpp_1a46c85f1255580ed186aa6f7380a06883">clang_disposeString</link>(ks);
02519 
02520 &#32;&#32;print_completion_string(completion_result-&gt;CompletionString,&#32;file);
02521 &#32;&#32;fprintf(file,&#32;<emphasis role="stringliteral">&quot;&#32;(%u)&quot;</emphasis>,&#32;
02522 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__c_index_code_completion_8cpp_1ab31f7dbd962ec8e8cb586bb5e3c78276">clang_getCompletionPriority</link>(completion_result-&gt;CompletionString));
02523 &#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(<link linkend="__c_index_code_completion_8cpp_1a705e9a4bdd5077e49d5a787fe913aeda">clang_getCompletionAvailability</link>(completion_result-&gt;CompletionString)){
02524 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXAvailability_Available:
02525 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
02526 &#32;&#32;&#32;&#32;
02527 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXAvailability_Deprecated:
02528 &#32;&#32;&#32;&#32;fprintf(file,&#32;<emphasis role="stringliteral">&quot;&#32;(deprecated)&quot;</emphasis>);
02529 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
02530 &#32;&#32;&#32;&#32;
02531 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXAvailability_NotAvailable:
02532 &#32;&#32;&#32;&#32;fprintf(file,&#32;<emphasis role="stringliteral">&quot;&#32;(unavailable)&quot;</emphasis>);
02533 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
02534 
02535 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXAvailability_NotAccessible:
02536 &#32;&#32;&#32;&#32;fprintf(file,&#32;<emphasis role="stringliteral">&quot;&#32;(inaccessible)&quot;</emphasis>);
02537 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
02538 &#32;&#32;}
02539 
02540 &#32;&#32;annotationCount&#32;=&#32;<link linkend="__c_index_code_completion_8cpp_1a8ab31cf1861905f7599d87eb48649c2c">clang_getCompletionNumAnnotations</link>(
02541 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;completion_result-&gt;CompletionString);
02542 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(annotationCount)&#32;{
02543 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;i;
02544 &#32;&#32;&#32;&#32;fprintf(file,&#32;<emphasis role="stringliteral">&quot;&#32;(&quot;</emphasis>);
02545 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(i&#32;=&#32;0;&#32;i&#32;&lt;&#32;annotationCount;&#32;++i)&#32;{
02546 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(i&#32;!=&#32;0)
02547 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;fprintf(file,&#32;<emphasis role="stringliteral">&quot;,&#32;&quot;</emphasis>);
02548 &#32;&#32;&#32;&#32;&#32;&#32;Annotation&#32;=
02549 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__c_index_code_completion_8cpp_1ae2edaae1f93d1b09d474ae8446172037">clang_getCompletionAnnotation</link>(completion_result-&gt;CompletionString,&#32;i);
02550 &#32;&#32;&#32;&#32;&#32;&#32;fprintf(file,&#32;<emphasis role="stringliteral">&quot;\&quot;%s\&quot;&quot;</emphasis>,&#32;<link linkend="__c_x_string_8cpp_1acd478c1b1785e17c0fe377bd70a2195f">clang_getCString</link>(Annotation));
02551 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__c_x_string_8cpp_1a46c85f1255580ed186aa6f7380a06883">clang_disposeString</link>(Annotation);
02552 &#32;&#32;&#32;&#32;}
02553 &#32;&#32;&#32;&#32;fprintf(file,&#32;<emphasis role="stringliteral">&quot;)&quot;</emphasis>);
02554 &#32;&#32;}
02555 
02556 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!getenv(<emphasis role="stringliteral">&quot;CINDEXTEST_NO_COMPLETION_PARENTS&quot;</emphasis>))&#32;{
02557 &#32;&#32;&#32;&#32;ParentName&#32;=&#32;<link linkend="__c_index_code_completion_8cpp_1a7255187a485b3364cd0956ccc8a21ba7">clang_getCompletionParent</link>(completion_result-&gt;CompletionString,
02558 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;ParentKind);
02559 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(ParentKind&#32;!=&#32;CXCursor_NotImplemented)&#32;{
02560 &#32;&#32;&#32;&#32;&#32;&#32;CXString&#32;KindSpelling&#32;=&#32;<link linkend="__c_index_8cpp_1a667cf97e111be828ff2c36e23d583fce">clang_getCursorKindSpelling</link>(ParentKind);
02561 &#32;&#32;&#32;&#32;&#32;&#32;fprintf(file,&#32;<emphasis role="stringliteral">&quot;&#32;(parent:&#32;%s&#32;&apos;%s&apos;)&quot;</emphasis>,
02562 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__c_x_string_8cpp_1acd478c1b1785e17c0fe377bd70a2195f">clang_getCString</link>(KindSpelling),
02563 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__c_x_string_8cpp_1acd478c1b1785e17c0fe377bd70a2195f">clang_getCString</link>(ParentName));
02564 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__c_x_string_8cpp_1a46c85f1255580ed186aa6f7380a06883">clang_disposeString</link>(KindSpelling);
02565 &#32;&#32;&#32;&#32;}
02566 &#32;&#32;&#32;&#32;<link linkend="__c_x_string_8cpp_1a46c85f1255580ed186aa6f7380a06883">clang_disposeString</link>(ParentName);
02567 &#32;&#32;}
02568 
02569 &#32;&#32;BriefComment&#32;=&#32;<link linkend="__c_index_code_completion_8cpp_1a583af69f4c45ceea22b0aacbaebfae23">clang_getCompletionBriefComment</link>(
02570 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;completion_result-&gt;CompletionString);
02571 &#32;&#32;BriefCommentCString&#32;=&#32;<link linkend="__c_x_string_8cpp_1acd478c1b1785e17c0fe377bd70a2195f">clang_getCString</link>(BriefComment);
02572 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(BriefCommentCString&#32;&amp;&amp;&#32;*BriefCommentCString&#32;!=&#32;<emphasis role="charliteral">&apos;\0&apos;</emphasis>)&#32;{
02573 &#32;&#32;&#32;&#32;fprintf(file,&#32;<emphasis role="stringliteral">&quot;(brief&#32;comment:&#32;%s)&quot;</emphasis>,&#32;BriefCommentCString);
02574 &#32;&#32;}
02575 &#32;&#32;<link linkend="__c_x_string_8cpp_1a46c85f1255580ed186aa6f7380a06883">clang_disposeString</link>(BriefComment);
02576 
02577 &#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(i&#32;=&#32;0;&#32;i&#32;&lt;&#32;<link linkend="__c_index_code_completion_8cpp_1a2a27263ad8d1070172cea3be70b4d8b9">clang_getCompletionNumFixIts</link>(completion_results,&#32;index);
02578 &#32;&#32;&#32;&#32;&#32;&#32;&#32;++i)&#32;{
02579 &#32;&#32;&#32;&#32;CXSourceRange&#32;correction_range;
02580 &#32;&#32;&#32;&#32;CXString&#32;FixIt&#32;=&#32;<link linkend="__c_index_code_completion_8cpp_1a53d507b63fce804bcd705197ef5eda7a">clang_getCompletionFixIt</link>(completion_results,&#32;index,&#32;i,
02581 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;correction_range);
02582 &#32;&#32;&#32;&#32;fprintf(file,&#32;<emphasis role="stringliteral">&quot;&#32;(requires&#32;fix-it:&#32;&quot;</emphasis>);
02583 &#32;&#32;&#32;&#32;print_token_range(translation_unit,&#32;<link linkend="__c_x_source_location_8cpp_1a14a10dd8d9a4069c4fc1a7be62f58874">clang_getRangeStart</link>(correction_range),
02584 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;file);
02585 &#32;&#32;&#32;&#32;fprintf(file,&#32;<emphasis role="stringliteral">&quot;&#32;to&#32;\&quot;%s\&quot;)&quot;</emphasis>,&#32;<link linkend="__c_x_string_8cpp_1acd478c1b1785e17c0fe377bd70a2195f">clang_getCString</link>(FixIt));
02586 &#32;&#32;&#32;&#32;<link linkend="__c_x_string_8cpp_1a46c85f1255580ed186aa6f7380a06883">clang_disposeString</link>(FixIt);
02587 &#32;&#32;}
02588 
02589 &#32;&#32;fprintf(file,&#32;<emphasis role="stringliteral">&quot;\n&quot;</emphasis>);
02590 }
02591 
<anchor xml:id="_c-index-test_8c_source_1l02592"/><link linkend="_c-index-test_8c_1ae302b130b55b146b76be601a70212b8a">02592</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_c-index-test_8c_1ae302b130b55b146b76be601a70212b8a">print_completion_contexts</link>(<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;contexts,&#32;FILE&#32;*file)&#32;{
02593 &#32;&#32;fprintf(file,&#32;<emphasis role="stringliteral">&quot;Completion&#32;contexts:\n&quot;</emphasis>);
02594 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(contexts&#32;==&#32;CXCompletionContext_Unknown)&#32;{
02595 &#32;&#32;&#32;&#32;fprintf(file,&#32;<emphasis role="stringliteral">&quot;Unknown\n&quot;</emphasis>);
02596 &#32;&#32;}
02597 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(contexts&#32;&amp;&#32;CXCompletionContext_AnyType)&#32;{
02598 &#32;&#32;&#32;&#32;fprintf(file,&#32;<emphasis role="stringliteral">&quot;Any&#32;type\n&quot;</emphasis>);
02599 &#32;&#32;}
02600 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(contexts&#32;&amp;&#32;CXCompletionContext_AnyValue)&#32;{
02601 &#32;&#32;&#32;&#32;fprintf(file,&#32;<emphasis role="stringliteral">&quot;Any&#32;value\n&quot;</emphasis>);
02602 &#32;&#32;}
02603 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(contexts&#32;&amp;&#32;CXCompletionContext_ObjCObjectValue)&#32;{
02604 &#32;&#32;&#32;&#32;fprintf(file,&#32;<emphasis role="stringliteral">&quot;Objective-C&#32;object&#32;value\n&quot;</emphasis>);
02605 &#32;&#32;}
02606 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(contexts&#32;&amp;&#32;CXCompletionContext_ObjCSelectorValue)&#32;{
02607 &#32;&#32;&#32;&#32;fprintf(file,&#32;<emphasis role="stringliteral">&quot;Objective-C&#32;selector&#32;value\n&quot;</emphasis>);
02608 &#32;&#32;}
02609 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(contexts&#32;&amp;&#32;CXCompletionContext_CXXClassTypeValue)&#32;{
02610 &#32;&#32;&#32;&#32;fprintf(file,&#32;<emphasis role="stringliteral">&quot;C++&#32;class&#32;type&#32;value\n&quot;</emphasis>);
02611 &#32;&#32;}
02612 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(contexts&#32;&amp;&#32;CXCompletionContext_DotMemberAccess)&#32;{
02613 &#32;&#32;&#32;&#32;fprintf(file,&#32;<emphasis role="stringliteral">&quot;Dot&#32;member&#32;access\n&quot;</emphasis>);
02614 &#32;&#32;}
02615 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(contexts&#32;&amp;&#32;CXCompletionContext_ArrowMemberAccess)&#32;{
02616 &#32;&#32;&#32;&#32;fprintf(file,&#32;<emphasis role="stringliteral">&quot;Arrow&#32;member&#32;access\n&quot;</emphasis>);
02617 &#32;&#32;}
02618 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(contexts&#32;&amp;&#32;CXCompletionContext_ObjCPropertyAccess)&#32;{
02619 &#32;&#32;&#32;&#32;fprintf(file,&#32;<emphasis role="stringliteral">&quot;Objective-C&#32;property&#32;access\n&quot;</emphasis>);
02620 &#32;&#32;}
02621 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(contexts&#32;&amp;&#32;CXCompletionContext_EnumTag)&#32;{
02622 &#32;&#32;&#32;&#32;fprintf(file,&#32;<emphasis role="stringliteral">&quot;Enum&#32;tag\n&quot;</emphasis>);
02623 &#32;&#32;}
02624 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(contexts&#32;&amp;&#32;CXCompletionContext_UnionTag)&#32;{
02625 &#32;&#32;&#32;&#32;fprintf(file,&#32;<emphasis role="stringliteral">&quot;Union&#32;tag\n&quot;</emphasis>);
02626 &#32;&#32;}
02627 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(contexts&#32;&amp;&#32;CXCompletionContext_StructTag)&#32;{
02628 &#32;&#32;&#32;&#32;fprintf(file,&#32;<emphasis role="stringliteral">&quot;Struct&#32;tag\n&quot;</emphasis>);
02629 &#32;&#32;}
02630 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(contexts&#32;&amp;&#32;CXCompletionContext_ClassTag)&#32;{
02631 &#32;&#32;&#32;&#32;fprintf(file,&#32;<emphasis role="stringliteral">&quot;Class&#32;name\n&quot;</emphasis>);
02632 &#32;&#32;}
02633 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(contexts&#32;&amp;&#32;CXCompletionContext_Namespace)&#32;{
02634 &#32;&#32;&#32;&#32;fprintf(file,&#32;<emphasis role="stringliteral">&quot;Namespace&#32;or&#32;namespace&#32;alias\n&quot;</emphasis>);
02635 &#32;&#32;}
02636 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(contexts&#32;&amp;&#32;CXCompletionContext_NestedNameSpecifier)&#32;{
02637 &#32;&#32;&#32;&#32;fprintf(file,&#32;<emphasis role="stringliteral">&quot;Nested&#32;name&#32;specifier\n&quot;</emphasis>);
02638 &#32;&#32;}
02639 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(contexts&#32;&amp;&#32;CXCompletionContext_ObjCInterface)&#32;{
02640 &#32;&#32;&#32;&#32;fprintf(file,&#32;<emphasis role="stringliteral">&quot;Objective-C&#32;interface\n&quot;</emphasis>);
02641 &#32;&#32;}
02642 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(contexts&#32;&amp;&#32;CXCompletionContext_ObjCProtocol)&#32;{
02643 &#32;&#32;&#32;&#32;fprintf(file,&#32;<emphasis role="stringliteral">&quot;Objective-C&#32;protocol\n&quot;</emphasis>);
02644 &#32;&#32;}
02645 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(contexts&#32;&amp;&#32;CXCompletionContext_ObjCCategory)&#32;{
02646 &#32;&#32;&#32;&#32;fprintf(file,&#32;<emphasis role="stringliteral">&quot;Objective-C&#32;category\n&quot;</emphasis>);
02647 &#32;&#32;}
02648 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(contexts&#32;&amp;&#32;CXCompletionContext_ObjCInstanceMessage)&#32;{
02649 &#32;&#32;&#32;&#32;fprintf(file,&#32;<emphasis role="stringliteral">&quot;Objective-C&#32;instance&#32;method\n&quot;</emphasis>);
02650 &#32;&#32;}
02651 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(contexts&#32;&amp;&#32;CXCompletionContext_ObjCClassMessage)&#32;{
02652 &#32;&#32;&#32;&#32;fprintf(file,&#32;<emphasis role="stringliteral">&quot;Objective-C&#32;class&#32;method\n&quot;</emphasis>);
02653 &#32;&#32;}
02654 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(contexts&#32;&amp;&#32;CXCompletionContext_ObjCSelectorName)&#32;{
02655 &#32;&#32;&#32;&#32;fprintf(file,&#32;<emphasis role="stringliteral">&quot;Objective-C&#32;selector&#32;name\n&quot;</emphasis>);
02656 &#32;&#32;}
02657 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(contexts&#32;&amp;&#32;CXCompletionContext_MacroName)&#32;{
02658 &#32;&#32;&#32;&#32;fprintf(file,&#32;<emphasis role="stringliteral">&quot;Macro&#32;name\n&quot;</emphasis>);
02659 &#32;&#32;}
02660 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(contexts&#32;&amp;&#32;CXCompletionContext_NaturalLanguage)&#32;{
02661 &#32;&#32;&#32;&#32;fprintf(file,&#32;<emphasis role="stringliteral">&quot;Natural&#32;language\n&quot;</emphasis>);
02662 &#32;&#32;}
02663 }
02664 
<anchor xml:id="_c-index-test_8c_source_1l02665"/><link linkend="_c-index-test_8c_1a6cfa2a8406fea0e71a2700d8f58b8553">02665</link> <emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_c-index-test_8c_1a6cfa2a8406fea0e71a2700d8f58b8553">perform_code_completion</link>(<emphasis role="keywordtype">int</emphasis>&#32;argc,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;**argv,&#32;<emphasis role="keywordtype">int</emphasis>&#32;timing_only)&#32;{
02666 &#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*input&#32;=&#32;argv[1];
02667 &#32;&#32;<emphasis role="keywordtype">char</emphasis>&#32;*filename&#32;=&#32;0;
02668 &#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;line;
02669 &#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;column;
02670 &#32;&#32;CXIndex&#32;CIdx;
02671 &#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;errorCode;
02672 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>CXUnsavedFile&#32;*unsaved_files&#32;=&#32;0;
02673 &#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;num_unsaved_files&#32;=&#32;0;
02674 &#32;&#32;CXCodeCompleteResults&#32;*results&#32;=&#32;0;
02675 &#32;&#32;<emphasis role="keyword">enum</emphasis>&#32;CXErrorCode&#32;Err;
02676 &#32;&#32;CXTranslationUnit&#32;TU;
02677 &#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;I,&#32;Repeats&#32;=&#32;1;
02678 &#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;completionOptions&#32;=&#32;<link linkend="__c_index_code_completion_8cpp_1a6cf74c52d33527eeee0b2bd27ef69044">clang_defaultCodeCompleteOptions</link>();
02679 &#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*InvocationPath;
02680 
02681 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(getenv(<emphasis role="stringliteral">&quot;CINDEXTEST_CODE_COMPLETE_PATTERNS&quot;</emphasis>))
02682 &#32;&#32;&#32;&#32;completionOptions&#32;|=&#32;CXCodeComplete_IncludeCodePatterns;
02683 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(getenv(<emphasis role="stringliteral">&quot;CINDEXTEST_COMPLETION_BRIEF_COMMENTS&quot;</emphasis>))
02684 &#32;&#32;&#32;&#32;completionOptions&#32;|=&#32;CXCodeComplete_IncludeBriefComments;
02685 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(getenv(<emphasis role="stringliteral">&quot;CINDEXTEST_COMPLETION_SKIP_PREAMBLE&quot;</emphasis>))
02686 &#32;&#32;&#32;&#32;completionOptions&#32;|=&#32;CXCodeComplete_SkipPreamble;
02687 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(getenv(<emphasis role="stringliteral">&quot;CINDEXTEST_COMPLETION_INCLUDE_FIXITS&quot;</emphasis>))
02688 &#32;&#32;&#32;&#32;completionOptions&#32;|=&#32;CXCodeComplete_IncludeCompletionsWithFixIts;
02689 &#32;&#32;
02690 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(timing_only)
02691 &#32;&#32;&#32;&#32;input&#32;+=&#32;strlen(<emphasis role="stringliteral">&quot;-code-completion-timing=&quot;</emphasis>);
02692 &#32;&#32;<emphasis role="keywordflow">else</emphasis>
02693 &#32;&#32;&#32;&#32;input&#32;+=&#32;strlen(<emphasis role="stringliteral">&quot;-code-completion-at=&quot;</emphasis>);
02694 
02695 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;((errorCode&#32;=&#32;<link linkend="_c-index-test_8c_1a86d7b0a04b2271451b84a97a62081480">parse_file_line_column</link>(input,&#32;&amp;filename,&#32;&amp;line,&#32;&amp;column,
02696 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;0,&#32;0)))
02697 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;errorCode;
02698 
02699 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(parse_remapped_files(argc,&#32;argv,&#32;2,&#32;&amp;unsaved_files,&#32;&amp;num_unsaved_files))
02700 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;-1;
02701 
02702 &#32;&#32;CIdx&#32;=&#32;<link linkend="__c_index_8cpp_1a3420c8e7e10a7ff7906130b207cbb763">clang_createIndex</link>(0,&#32;0);
02703 &#32;&#32;InvocationPath&#32;=&#32;getenv(<emphasis role="stringliteral">&quot;CINDEXTEST_INVOCATION_EMISSION_PATH&quot;</emphasis>);
02704 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(InvocationPath)
02705 &#32;&#32;&#32;&#32;<link linkend="__c_index_8cpp_1a97a15ecfe8f0c017cbcc5c45f558123c">clang_CXIndex_setInvocationEmissionPathOption</link>(CIdx,&#32;InvocationPath);
02706 
02707 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(getenv(<emphasis role="stringliteral">&quot;CINDEXTEST_EDITING&quot;</emphasis>))
02708 &#32;&#32;&#32;&#32;Repeats&#32;=&#32;5;
02709 
02710 &#32;&#32;Err&#32;=&#32;<link linkend="__c_index_8cpp_1a3ddd508cc891d95a82b747955738249a">clang_parseTranslationUnit2</link>(CIdx,&#32;0,
02711 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;argv&#32;+&#32;num_unsaved_files&#32;+&#32;2,
02712 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;argc&#32;-&#32;num_unsaved_files&#32;-&#32;2,
02713 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;0,&#32;0,&#32;getDefaultParsingOptions(),&#32;&amp;TU);
02714 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(Err&#32;!=&#32;CXError_Success)&#32;{
02715 &#32;&#32;&#32;&#32;fprintf(stderr,&#32;<emphasis role="stringliteral">&quot;Unable&#32;to&#32;load&#32;translation&#32;unit!\n&quot;</emphasis>);
02716 &#32;&#32;&#32;&#32;describeLibclangFailure(Err);
02717 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;1;
02718 &#32;&#32;}
02719 
02720 &#32;&#32;Err&#32;=&#32;<link linkend="__c_index_8cpp_1a2befc445c3dde1e89f6900c67892ceaa">clang_reparseTranslationUnit</link>(TU,&#32;0,&#32;0,
02721 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__c_index_8cpp_1a2f79bdd29d8f799a3943c6a5254eb789">clang_defaultReparseOptions</link>(TU));
02722 
02723 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(Err&#32;!=&#32;CXError_Success)&#32;{
02724 &#32;&#32;&#32;&#32;fprintf(stderr,&#32;<emphasis role="stringliteral">&quot;Unable&#32;to&#32;reparse&#32;translation&#32;unit!\n&quot;</emphasis>);
02725 &#32;&#32;&#32;&#32;describeLibclangFailure(Err);
02726 &#32;&#32;&#32;&#32;<link linkend="__c_index_8cpp_1a3af88c13004a1954abd6dc956faff3be">clang_disposeTranslationUnit</link>(TU);
02727 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;1;
02728 &#32;&#32;}
02729 
02730 &#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(I&#32;=&#32;0;&#32;I&#32;!=&#32;Repeats;&#32;++I)&#32;{
02731 &#32;&#32;&#32;&#32;results&#32;=&#32;<link linkend="__c_index_code_completion_8cpp_1aa00452b93a381eacef696b538f19ca6e">clang_codeCompleteAt</link>(TU,&#32;filename,&#32;line,&#32;column,
02732 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;unsaved_files,&#32;num_unsaved_files,
02733 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;completionOptions);
02734 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!results)&#32;{
02735 &#32;&#32;&#32;&#32;&#32;&#32;fprintf(stderr,&#32;<emphasis role="stringliteral">&quot;Unable&#32;to&#32;perform&#32;code&#32;completion!\n&quot;</emphasis>);
02736 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;1;
02737 &#32;&#32;&#32;&#32;}
02738 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(I&#32;!=&#32;Repeats-1)
02739 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__c_index_code_completion_8cpp_1ab33453b1d11a0d7c68ccf5c2f3f55bb3">clang_disposeCodeCompleteResults</link>(results);
02740 &#32;&#32;}
02741 
02742 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(results)&#32;{
02743 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;i,&#32;n&#32;=&#32;results-&gt;NumResults,&#32;containerIsIncomplete&#32;=&#32;0;
02744 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;contexts;
02745 &#32;&#32;&#32;&#32;<emphasis role="keyword">enum</emphasis>&#32;CXCursorKind&#32;containerKind;
02746 &#32;&#32;&#32;&#32;CXString&#32;objCSelector;
02747 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*selectorString;
02748 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!timing_only)&#32;{&#32;&#32;&#32;&#32;&#32;&#32;
02749 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;Sort&#32;the&#32;code-completion&#32;results&#32;based&#32;on&#32;the&#32;typed&#32;text.&#32;*/</emphasis>
02750 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__c_index_code_completion_8cpp_1a15ff3b3f6b97479e2516f3e4993a9baa">clang_sortCodeCompletionResults</link>(results-&gt;Results,&#32;results-&gt;NumResults);
02751 
02752 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(i&#32;=&#32;0;&#32;i&#32;!=&#32;n;&#32;++i)
02753 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;print_completion_result(TU,&#32;results,&#32;i,&#32;stdout);
02754 &#32;&#32;&#32;&#32;}
02755 &#32;&#32;&#32;&#32;n&#32;=&#32;<link linkend="__c_index_code_completion_8cpp_1aaa0ec260d3ad875615930d0c009e5dba">clang_codeCompleteGetNumDiagnostics</link>(results);
02756 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(i&#32;=&#32;0;&#32;i&#32;!=&#32;n;&#32;++i)&#32;{
02757 &#32;&#32;&#32;&#32;&#32;&#32;CXDiagnostic&#32;diag&#32;=&#32;<link linkend="__c_index_code_completion_8cpp_1a2889b7f63ecab662d464c9c64921f4de">clang_codeCompleteGetDiagnostic</link>(results,&#32;i);
02758 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_c-index-test_8c_1a6163717d21d3db3edb29824ce554d190">PrintDiagnostic</link>(diag);
02759 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__c_index_diagnostic_8cpp_1a11aa4e77bf15f80d846a2216afbe8726">clang_disposeDiagnostic</link>(diag);
02760 &#32;&#32;&#32;&#32;}
02761 &#32;&#32;&#32;&#32;
02762 &#32;&#32;&#32;&#32;contexts&#32;=&#32;<link linkend="__c_index_code_completion_8cpp_1afc1d7645383b816cb5e62253b85f9b7c">clang_codeCompleteGetContexts</link>(results);
02763 &#32;&#32;&#32;&#32;<link linkend="_c-index-test_8c_1ae302b130b55b146b76be601a70212b8a">print_completion_contexts</link>(contexts,&#32;stdout);
02764 &#32;&#32;&#32;&#32;
02765 &#32;&#32;&#32;&#32;containerKind&#32;=&#32;<link linkend="__c_index_code_completion_8cpp_1a6d5d24395b436aaedf13984af8f19afa">clang_codeCompleteGetContainerKind</link>(results,
02766 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;containerIsIncomplete);
02767 &#32;&#32;&#32;&#32;
02768 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(containerKind&#32;!=&#32;CXCursor_InvalidCode)&#32;{
02769 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;We&#32;have&#32;found&#32;a&#32;container&#32;*/</emphasis>
02770 &#32;&#32;&#32;&#32;&#32;&#32;CXString&#32;containerUSR,&#32;containerKindSpelling;
02771 &#32;&#32;&#32;&#32;&#32;&#32;containerKindSpelling&#32;=&#32;<link linkend="__c_index_8cpp_1a667cf97e111be828ff2c36e23d583fce">clang_getCursorKindSpelling</link>(containerKind);
02772 &#32;&#32;&#32;&#32;&#32;&#32;printf(<emphasis role="stringliteral">&quot;Container&#32;Kind:&#32;%s\n&quot;</emphasis>,&#32;<link linkend="__c_x_string_8cpp_1acd478c1b1785e17c0fe377bd70a2195f">clang_getCString</link>(containerKindSpelling));
02773 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__c_x_string_8cpp_1a46c85f1255580ed186aa6f7380a06883">clang_disposeString</link>(containerKindSpelling);
02774 &#32;&#32;&#32;&#32;&#32;&#32;
02775 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(containerIsIncomplete)&#32;{
02776 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;printf(<emphasis role="stringliteral">&quot;Container&#32;is&#32;incomplete\n&quot;</emphasis>);
02777 &#32;&#32;&#32;&#32;&#32;&#32;}
02778 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
02779 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;printf(<emphasis role="stringliteral">&quot;Container&#32;is&#32;complete\n&quot;</emphasis>);
02780 &#32;&#32;&#32;&#32;&#32;&#32;}
02781 &#32;&#32;&#32;&#32;&#32;&#32;
02782 &#32;&#32;&#32;&#32;&#32;&#32;containerUSR&#32;=&#32;<link linkend="__c_index_code_completion_8cpp_1aa7fdf1ceb18aed68b458ebd05f5aa6c5">clang_codeCompleteGetContainerUSR</link>(results);
02783 &#32;&#32;&#32;&#32;&#32;&#32;printf(<emphasis role="stringliteral">&quot;Container&#32;USR:&#32;%s\n&quot;</emphasis>,&#32;<link linkend="__c_x_string_8cpp_1acd478c1b1785e17c0fe377bd70a2195f">clang_getCString</link>(containerUSR));
02784 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__c_x_string_8cpp_1a46c85f1255580ed186aa6f7380a06883">clang_disposeString</link>(containerUSR);
02785 &#32;&#32;&#32;&#32;}
02786 &#32;&#32;&#32;&#32;
02787 &#32;&#32;&#32;&#32;objCSelector&#32;=&#32;<link linkend="__c_index_code_completion_8cpp_1a1cee18661b755d3b0b6ee3b44630033f">clang_codeCompleteGetObjCSelector</link>(results);
02788 &#32;&#32;&#32;&#32;selectorString&#32;=&#32;<link linkend="__c_x_string_8cpp_1acd478c1b1785e17c0fe377bd70a2195f">clang_getCString</link>(objCSelector);
02789 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(selectorString&#32;&amp;&amp;&#32;strlen(selectorString)&#32;&gt;&#32;0)&#32;{
02790 &#32;&#32;&#32;&#32;&#32;&#32;printf(<emphasis role="stringliteral">&quot;Objective-C&#32;selector:&#32;%s\n&quot;</emphasis>,&#32;selectorString);
02791 &#32;&#32;&#32;&#32;}
02792 &#32;&#32;&#32;&#32;<link linkend="__c_x_string_8cpp_1a46c85f1255580ed186aa6f7380a06883">clang_disposeString</link>(objCSelector);
02793 &#32;&#32;&#32;&#32;
02794 &#32;&#32;&#32;&#32;<link linkend="__c_index_code_completion_8cpp_1ab33453b1d11a0d7c68ccf5c2f3f55bb3">clang_disposeCodeCompleteResults</link>(results);
02795 &#32;&#32;}
02796 &#32;&#32;<link linkend="__c_index_8cpp_1a3af88c13004a1954abd6dc956faff3be">clang_disposeTranslationUnit</link>(TU);
02797 &#32;&#32;<link linkend="__c_index_8cpp_1aea91ddf5e996cba0de2f781cb17db1d5">clang_disposeIndex</link>(CIdx);
02798 &#32;&#32;free(filename);
02799 
02800 &#32;&#32;<link linkend="_c-index-test_8c_1af28d9933e8a8fd14e8394a1e7f9f6379">free_remapped_files</link>(unsaved_files,&#32;num_unsaved_files);
02801 
02802 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
02803 }
02804 
<anchor xml:id="_c-index-test_8c_source_1l02805"/><link linkend="_struct_cursor_source_location">02805</link> <emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">struct&#32;</emphasis>{
<anchor xml:id="_c-index-test_8c_source_1l02806"/><link linkend="_struct_cursor_source_location_1af68265f7ce11e6081ae8624cd5fd1c71">02806</link> &#32;&#32;<emphasis role="keywordtype">char</emphasis>&#32;*<link linkend="_struct_cursor_source_location_1af68265f7ce11e6081ae8624cd5fd1c71">filename</link>;
<anchor xml:id="_c-index-test_8c_source_1l02807"/><link linkend="_struct_cursor_source_location_1a3b9ec73e7d262451ae57c0f6f1c65781">02807</link> &#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<link linkend="_struct_cursor_source_location_1a3b9ec73e7d262451ae57c0f6f1c65781">line</link>;
<anchor xml:id="_c-index-test_8c_source_1l02808"/><link linkend="_struct_cursor_source_location_1add3cf7586135fc06f61eba15328753ce">02808</link> &#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<link linkend="_struct_cursor_source_location_1add3cf7586135fc06f61eba15328753ce">column</link>;
02809 }&#32;<link linkend="_struct_cursor_source_location">CursorSourceLocation</link>;
02810 
<anchor xml:id="_c-index-test_8c_source_1l02811"/><link linkend="_c-index-test_8c_1ab782a8229793b5f9556f76a9e94200bb">02811</link> <emphasis role="keyword">typedef</emphasis>&#32;void&#32;(*<link linkend="_c-index-test_8c_1ab782a8229793b5f9556f76a9e94200bb">cursor_handler_t</link>)(CXCursor&#32;cursor);
02812 
02813 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;inspect_cursor_at(<emphasis role="keywordtype">int</emphasis>&#32;argc,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;**argv,
02814 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*locations_flag,
02815 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_c-index-test_8c_1ab782a8229793b5f9556f76a9e94200bb">cursor_handler_t</link>&#32;handler)&#32;{
02816 &#32;&#32;CXIndex&#32;CIdx;
02817 &#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;errorCode;
02818 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>CXUnsavedFile&#32;*unsaved_files&#32;=&#32;0;
02819 &#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;num_unsaved_files&#32;=&#32;0;
02820 &#32;&#32;<emphasis role="keyword">enum</emphasis>&#32;CXErrorCode&#32;Err;
02821 &#32;&#32;CXTranslationUnit&#32;TU;
02822 &#32;&#32;CXCursor&#32;Cursor;
02823 &#32;&#32;<link linkend="_struct_cursor_source_location">CursorSourceLocation</link>&#32;*Locations&#32;=&#32;0;
02824 &#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;NumLocations&#32;=&#32;0,&#32;Loc;
02825 &#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;Repeats&#32;=&#32;1;
02826 &#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;I;
02827 &#32;&#32;
02828 &#32;&#32;<emphasis role="comment">/*&#32;Count&#32;the&#32;number&#32;of&#32;locations.&#32;*/</emphasis>
02829 &#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(strstr(argv[NumLocations+1],&#32;locations_flag)&#32;==&#32;argv[NumLocations+1])
02830 &#32;&#32;&#32;&#32;++NumLocations;
02831 
02832 &#32;&#32;<emphasis role="comment">/*&#32;Parse&#32;the&#32;locations.&#32;*/</emphasis>
02833 &#32;&#32;assert(NumLocations&#32;&gt;&#32;0&#32;&amp;&amp;&#32;<emphasis role="stringliteral">&quot;Unable&#32;to&#32;count&#32;locations?&quot;</emphasis>);
02834 &#32;&#32;Locations&#32;=&#32;(<link linkend="_struct_cursor_source_location">CursorSourceLocation</link>&#32;*)malloc(
02835 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;NumLocations&#32;*&#32;<emphasis role="keyword">sizeof</emphasis>(<link linkend="_struct_cursor_source_location">CursorSourceLocation</link>));
02836 &#32;&#32;assert(Locations);
02837 &#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(Loc&#32;=&#32;0;&#32;Loc&#32;&lt;&#32;NumLocations;&#32;++Loc)&#32;{
02838 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*input&#32;=&#32;argv[Loc&#32;+&#32;1]&#32;+&#32;strlen(locations_flag);
02839 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;((errorCode&#32;=&#32;<link linkend="_c-index-test_8c_1a86d7b0a04b2271451b84a97a62081480">parse_file_line_column</link>(input,&#32;&amp;Locations[Loc].filename,
02840 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;Locations[Loc].line,
02841 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;Locations[Loc].column,&#32;0,&#32;0)))
02842 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;errorCode;
02843 &#32;&#32;}
02844 
02845 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(parse_remapped_files(argc,&#32;argv,&#32;NumLocations&#32;+&#32;1,&#32;&amp;unsaved_files,
02846 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;num_unsaved_files))
02847 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;-1;
02848 
02849 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(getenv(<emphasis role="stringliteral">&quot;CINDEXTEST_EDITING&quot;</emphasis>))
02850 &#32;&#32;&#32;&#32;Repeats&#32;=&#32;5;
02851 
02852 &#32;&#32;<emphasis role="comment">/*&#32;Parse&#32;the&#32;translation&#32;unit.&#32;When&#32;we&apos;re&#32;testing&#32;clang_getCursor()&#32;after</emphasis>
02853 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;reparsing,&#32;don&apos;t&#32;remap&#32;unsaved&#32;files&#32;until&#32;the&#32;second&#32;parse.&#32;*/</emphasis>
02854 &#32;&#32;CIdx&#32;=&#32;<link linkend="__c_index_8cpp_1a3420c8e7e10a7ff7906130b207cbb763">clang_createIndex</link>(1,&#32;1);
02855 &#32;&#32;Err&#32;=&#32;<link linkend="__c_index_8cpp_1a3ddd508cc891d95a82b747955738249a">clang_parseTranslationUnit2</link>(CIdx,&#32;argv[argc&#32;-&#32;1],
02856 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;argv&#32;+&#32;num_unsaved_files&#32;+&#32;1&#32;+&#32;NumLocations,
02857 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;argc&#32;-&#32;num_unsaved_files&#32;-&#32;2&#32;-&#32;NumLocations,
02858 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;unsaved_files,
02859 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Repeats&#32;&gt;&#32;1?&#32;0&#32;:&#32;num_unsaved_files,
02860 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;getDefaultParsingOptions(),&#32;&amp;TU);
02861 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(Err&#32;!=&#32;CXError_Success)&#32;{
02862 &#32;&#32;&#32;&#32;fprintf(stderr,&#32;<emphasis role="stringliteral">&quot;unable&#32;to&#32;parse&#32;input\n&quot;</emphasis>);
02863 &#32;&#32;&#32;&#32;describeLibclangFailure(Err);
02864 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;-1;
02865 &#32;&#32;}
02866 
02867 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(checkForErrors(TU)&#32;!=&#32;0)
02868 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;-1;
02869 
02870 &#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(I&#32;=&#32;0;&#32;I&#32;!=&#32;Repeats;&#32;++I)&#32;{
02871 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(Repeats&#32;&gt;&#32;1)&#32;{
02872 &#32;&#32;&#32;&#32;&#32;&#32;Err&#32;=&#32;<link linkend="__c_index_8cpp_1a2befc445c3dde1e89f6900c67892ceaa">clang_reparseTranslationUnit</link>(TU,&#32;num_unsaved_files,&#32;unsaved_files,
02873 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__c_index_8cpp_1a2f79bdd29d8f799a3943c6a5254eb789">clang_defaultReparseOptions</link>(TU));
02874 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(Err&#32;!=&#32;CXError_Success)&#32;{
02875 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;describeLibclangFailure(Err);
02876 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__c_index_8cpp_1a3af88c13004a1954abd6dc956faff3be">clang_disposeTranslationUnit</link>(TU);
02877 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;1;
02878 &#32;&#32;&#32;&#32;&#32;&#32;}
02879 &#32;&#32;&#32;&#32;}
02880 
02881 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(checkForErrors(TU)&#32;!=&#32;0)
02882 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;-1;
02883 &#32;&#32;&#32;&#32;
02884 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(Loc&#32;=&#32;0;&#32;Loc&#32;&lt;&#32;NumLocations;&#32;++Loc)&#32;{
02885 &#32;&#32;&#32;&#32;&#32;&#32;CXFile&#32;file&#32;=&#32;<link linkend="__c_index_8cpp_1a7c72c3450d02a5d985f152cc0dee1785">clang_getFile</link>(TU,&#32;Locations[Loc].filename);
02886 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!file)
02887 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">continue</emphasis>;
02888 
02889 &#32;&#32;&#32;&#32;&#32;&#32;Cursor&#32;=&#32;<link linkend="__c_index_8cpp_1a98b7e00ed3ca471a2e35509110ddc0c5">clang_getCursor</link>(TU,
02890 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__c_x_source_location_8cpp_1a3da1e96662794609af6bec3dc345dd9a">clang_getLocation</link>(TU,&#32;file,&#32;Locations[Loc].line,
02891 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Locations[Loc].column));
02892 
02893 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(checkForErrors(TU)&#32;!=&#32;0)
02894 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;-1;
02895 
02896 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(I&#32;+&#32;1&#32;==&#32;Repeats)&#32;{
02897 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;handler(Cursor);
02898 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;free(Locations[Loc].filename);
02899 &#32;&#32;&#32;&#32;&#32;&#32;}
02900 &#32;&#32;&#32;&#32;}
02901 &#32;&#32;}
02902 &#32;&#32;
02903 &#32;&#32;<link linkend="_c-index-test_8c_1a40fceb7e4c2e16f5bce47bae394b973a">PrintDiagnostics</link>(TU);
02904 &#32;&#32;<link linkend="__c_index_8cpp_1a3af88c13004a1954abd6dc956faff3be">clang_disposeTranslationUnit</link>(TU);
02905 &#32;&#32;<link linkend="__c_index_8cpp_1aea91ddf5e996cba0de2f781cb17db1d5">clang_disposeIndex</link>(CIdx);
02906 &#32;&#32;free(Locations);
02907 &#32;&#32;<link linkend="_c-index-test_8c_1af28d9933e8a8fd14e8394a1e7f9f6379">free_remapped_files</link>(unsaved_files,&#32;num_unsaved_files);
02908 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
02909 }
02910 
02911 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;inspect_print_cursor(CXCursor&#32;Cursor)&#32;{
02912 &#32;&#32;CXTranslationUnit&#32;TU&#32;=&#32;<link linkend="__c_x_cursor_8cpp_1ace7e0a4fcee3aa54c74aa75615cef62a">clang_Cursor_getTranslationUnit</link>(Cursor);
02913 &#32;&#32;CXCompletionString&#32;completionString&#32;=&#32;<link linkend="__c_x_cursor_8cpp_1ac65a717dd583769c4bc5dccb4625a496">clang_getCursorCompletionString</link>(
02914 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Cursor);
02915 &#32;&#32;CXSourceLocation&#32;CursorLoc&#32;=&#32;<link linkend="__c_index_8cpp_1a98001a3f8eb3a76d9c12821c45ef3708">clang_getCursorLocation</link>(Cursor);
02916 &#32;&#32;CXString&#32;Spelling;
02917 &#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*cspell;
02918 &#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;line,&#32;column;
02919 &#32;&#32;<link linkend="__c_x_source_location_8cpp_1ae2d805527135aac587ca5c8017bde0ef">clang_getSpellingLocation</link>(CursorLoc,&#32;0,&#32;&amp;line,&#32;&amp;column,&#32;0);
02920 &#32;&#32;printf(<emphasis role="stringliteral">&quot;%d:%d&#32;&quot;</emphasis>,&#32;line,&#32;column);
02921 &#32;&#32;PrintCursor(Cursor,&#32;NULL);
02922 &#32;&#32;PrintCursorExtent(Cursor);
02923 &#32;&#32;Spelling&#32;=&#32;<link linkend="__c_index_8cpp_1a412f1282680f05ef2b991f21a59ad3ac">clang_getCursorSpelling</link>(Cursor);
02924 &#32;&#32;cspell&#32;=&#32;<link linkend="__c_x_string_8cpp_1acd478c1b1785e17c0fe377bd70a2195f">clang_getCString</link>(Spelling);
02925 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(cspell&#32;&amp;&amp;&#32;strlen(cspell)&#32;!=&#32;0)&#32;{
02926 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;pieceIndex;
02927 &#32;&#32;&#32;&#32;printf(<emphasis role="stringliteral">&quot;&#32;Spelling=%s&#32;(&quot;</emphasis>,&#32;cspell);
02928 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(pieceIndex&#32;=&#32;0;&#32;;&#32;++pieceIndex)&#32;{
02929 &#32;&#32;&#32;&#32;&#32;&#32;CXSourceRange&#32;range&#32;=
02930 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__c_index_8cpp_1aedf6f9d3e1c24f3c4e29eae0dd24487d">clang_Cursor_getSpellingNameRange</link>(Cursor,&#32;pieceIndex,&#32;0);
02931 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="__c_x_source_location_8cpp_1ae11f8a52af4ea3ffd8018196f41f4128">clang_Range_isNull</link>(range))
02932 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
02933 &#32;&#32;&#32;&#32;&#32;&#32;PrintRange(range,&#32;0);
02934 &#32;&#32;&#32;&#32;}
02935 &#32;&#32;&#32;&#32;printf(<emphasis role="stringliteral">&quot;)&quot;</emphasis>);
02936 &#32;&#32;}
02937 &#32;&#32;<link linkend="__c_x_string_8cpp_1a46c85f1255580ed186aa6f7380a06883">clang_disposeString</link>(Spelling);
02938 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="__c_index_8cpp_1a026bd44ebbcdfe3b1585dc546051cdfa">clang_Cursor_getObjCSelectorIndex</link>(Cursor)&#32;!=&#32;-1)
02939 &#32;&#32;&#32;&#32;printf(<emphasis role="stringliteral">&quot;&#32;Selector&#32;index=%d&quot;</emphasis>,
02940 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__c_index_8cpp_1a026bd44ebbcdfe3b1585dc546051cdfa">clang_Cursor_getObjCSelectorIndex</link>(Cursor));
02941 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="__c_x_cursor_8cpp_1a124276f443ec62421673da6692b3dbda">clang_Cursor_isDynamicCall</link>(Cursor))
02942 &#32;&#32;&#32;&#32;printf(<emphasis role="stringliteral">&quot;&#32;Dynamic-call&quot;</emphasis>);
02943 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(Cursor.kind&#32;==&#32;CXCursor_ObjCMessageExpr&#32;||
02944 &#32;&#32;&#32;&#32;&#32;&#32;Cursor.kind&#32;==&#32;CXCursor_MemberRefExpr)&#32;{
02945 &#32;&#32;&#32;&#32;CXType&#32;T&#32;=&#32;<link linkend="__c_x_cursor_8cpp_1ad857136af3443094d221eb72518d969a">clang_Cursor_getReceiverType</link>(Cursor);
02946 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(T.kind&#32;!=&#32;CXType_Invalid)&#32;{
02947 &#32;&#32;&#32;&#32;&#32;&#32;CXString&#32;S&#32;=&#32;<link linkend="__c_x_type_8cpp_1a7bb1a114f09f7b616a229a8bb874f2f1">clang_getTypeKindSpelling</link>(T.kind);
02948 &#32;&#32;&#32;&#32;&#32;&#32;printf(<emphasis role="stringliteral">&quot;&#32;Receiver-type=%s&quot;</emphasis>,&#32;<link linkend="__c_x_string_8cpp_1acd478c1b1785e17c0fe377bd70a2195f">clang_getCString</link>(S));
02949 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__c_x_string_8cpp_1a46c85f1255580ed186aa6f7380a06883">clang_disposeString</link>(S);
02950 &#32;&#32;&#32;&#32;}
02951 &#32;&#32;}
02952 
02953 &#32;&#32;{
02954 &#32;&#32;&#32;&#32;CXModule&#32;mod&#32;=&#32;<link linkend="__c_index_8cpp_1a2ca727eeafb4e4eded5e17a28ce42f3d">clang_Cursor_getModule</link>(Cursor);
02955 &#32;&#32;&#32;&#32;CXFile&#32;astFile;
02956 &#32;&#32;&#32;&#32;CXString&#32;name,&#32;astFilename;
02957 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;i,&#32;numHeaders;
02958 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(mod)&#32;{
02959 &#32;&#32;&#32;&#32;&#32;&#32;astFile&#32;=&#32;<link linkend="__c_index_8cpp_1a70af2b7ec3ffa582bf6856a740af2fb3">clang_Module_getASTFile</link>(mod);
02960 &#32;&#32;&#32;&#32;&#32;&#32;astFilename&#32;=&#32;<link linkend="__c_index_8cpp_1a263c34f5782353186990b2c990d648fc">clang_getFileName</link>(astFile);
02961 &#32;&#32;&#32;&#32;&#32;&#32;name&#32;=&#32;<link linkend="__c_index_8cpp_1a266036edc3230b98a9c96c33eedae46a">clang_Module_getFullName</link>(mod);
02962 &#32;&#32;&#32;&#32;&#32;&#32;numHeaders&#32;=&#32;<link linkend="__c_index_8cpp_1a386d6d2cb23cfb6be756392a4fb18de7">clang_Module_getNumTopLevelHeaders</link>(TU,&#32;mod);
02963 &#32;&#32;&#32;&#32;&#32;&#32;printf(<emphasis role="stringliteral">&quot;&#32;ModuleName=%s&#32;(%s)&#32;system=%d&#32;Headers(%d):&quot;</emphasis>,
02964 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__c_x_string_8cpp_1acd478c1b1785e17c0fe377bd70a2195f">clang_getCString</link>(name),&#32;<link linkend="__c_x_string_8cpp_1acd478c1b1785e17c0fe377bd70a2195f">clang_getCString</link>(astFilename),
02965 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__c_index_8cpp_1ad14a1b11d95472b1b00952419b96b718">clang_Module_isSystem</link>(mod),&#32;numHeaders);
02966 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__c_x_string_8cpp_1a46c85f1255580ed186aa6f7380a06883">clang_disposeString</link>(name);
02967 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__c_x_string_8cpp_1a46c85f1255580ed186aa6f7380a06883">clang_disposeString</link>(astFilename);
02968 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(i&#32;=&#32;0;&#32;i&#32;&lt;&#32;numHeaders;&#32;++i)&#32;{
02969 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;CXFile&#32;file&#32;=&#32;<link linkend="__c_index_8cpp_1a7616ad81129da898d08a576a8e603c78">clang_Module_getTopLevelHeader</link>(TU,&#32;mod,&#32;i);
02970 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;CXString&#32;filename&#32;=&#32;<link linkend="__c_index_8cpp_1a263c34f5782353186990b2c990d648fc">clang_getFileName</link>(file);
02971 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;printf(<emphasis role="stringliteral">&quot;\n%s&quot;</emphasis>,&#32;<link linkend="__c_x_string_8cpp_1acd478c1b1785e17c0fe377bd70a2195f">clang_getCString</link>(filename));
02972 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__c_x_string_8cpp_1a46c85f1255580ed186aa6f7380a06883">clang_disposeString</link>(filename);
02973 &#32;&#32;&#32;&#32;&#32;&#32;}
02974 &#32;&#32;&#32;&#32;}
02975 &#32;&#32;}
02976 
02977 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(completionString&#32;!=&#32;NULL)&#32;{
02978 &#32;&#32;&#32;&#32;printf(<emphasis role="stringliteral">&quot;\nCompletion&#32;string:&#32;&quot;</emphasis>);
02979 &#32;&#32;&#32;&#32;print_completion_string(completionString,&#32;stdout);
02980 &#32;&#32;}
02981 &#32;&#32;printf(<emphasis role="stringliteral">&quot;\n&quot;</emphasis>);
02982 }
02983 
02984 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;display_evaluate_results(CXEvalResult&#32;result)&#32;{
02985 &#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(<link linkend="__c_index_8cpp_1ab1c0e24a69ad71276e7ce0d7bdf6b0a7">clang_EvalResult_getKind</link>(result))&#32;{
02986 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXEval_Int:
02987 &#32;&#32;&#32;&#32;{
02988 &#32;&#32;&#32;&#32;&#32;&#32;printf(<emphasis role="stringliteral">&quot;Kind:&#32;Int,&#32;&quot;</emphasis>);
02989 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="__c_index_8cpp_1a486e7728d10438206af8edb51eab14d8">clang_EvalResult_isUnsignedInt</link>(result))&#32;{
02990 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;val&#32;=&#32;<link linkend="__c_index_8cpp_1ada456f56037c9ae23b133bbeedb8edb8">clang_EvalResult_getAsUnsigned</link>(result);
02991 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;printf(<emphasis role="stringliteral">&quot;unsigned,&#32;Value:&#32;%llu&quot;</emphasis>,&#32;val);
02992 &#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
02993 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;val&#32;=&#32;<link linkend="__c_index_8cpp_1ae4d4de22195dd716156c690b5e7e730e">clang_EvalResult_getAsLongLong</link>(result);
02994 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;printf(<emphasis role="stringliteral">&quot;Value:&#32;%lld&quot;</emphasis>,&#32;val);
02995 &#32;&#32;&#32;&#32;&#32;&#32;}
02996 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
02997 &#32;&#32;&#32;&#32;}
02998 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXEval_Float:
02999 &#32;&#32;&#32;&#32;{
03000 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;val&#32;=&#32;<link linkend="__c_index_8cpp_1ac04603c779fdaaa0beaab0db8b3acb5d">clang_EvalResult_getAsDouble</link>(result);
03001 &#32;&#32;&#32;&#32;&#32;&#32;printf(<emphasis role="stringliteral">&quot;Kind:&#32;Float&#32;,&#32;Value:&#32;%f&quot;</emphasis>,&#32;val);
03002 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
03003 &#32;&#32;&#32;&#32;}
03004 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXEval_ObjCStrLiteral:
03005 &#32;&#32;&#32;&#32;{
03006 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;str&#32;=&#32;<link linkend="__c_index_8cpp_1ae20bdaa6ecefb7fd9f66cd08e6da1e39">clang_EvalResult_getAsStr</link>(result);
03007 &#32;&#32;&#32;&#32;&#32;&#32;printf(<emphasis role="stringliteral">&quot;Kind:&#32;ObjCString&#32;,&#32;Value:&#32;%s&quot;</emphasis>,&#32;str);
03008 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
03009 &#32;&#32;&#32;&#32;}
03010 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXEval_StrLiteral:
03011 &#32;&#32;&#32;&#32;{
03012 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;str&#32;=&#32;<link linkend="__c_index_8cpp_1ae20bdaa6ecefb7fd9f66cd08e6da1e39">clang_EvalResult_getAsStr</link>(result);
03013 &#32;&#32;&#32;&#32;&#32;&#32;printf(<emphasis role="stringliteral">&quot;Kind:&#32;CString&#32;,&#32;Value:&#32;%s&quot;</emphasis>,&#32;str);
03014 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
03015 &#32;&#32;&#32;&#32;}
03016 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXEval_CFStr:
03017 &#32;&#32;&#32;&#32;{
03018 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;str&#32;=&#32;<link linkend="__c_index_8cpp_1ae20bdaa6ecefb7fd9f66cd08e6da1e39">clang_EvalResult_getAsStr</link>(result);
03019 &#32;&#32;&#32;&#32;&#32;&#32;printf(<emphasis role="stringliteral">&quot;Kind:&#32;CFString&#32;,&#32;Value:&#32;%s&quot;</emphasis>,&#32;str);
03020 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
03021 &#32;&#32;&#32;&#32;}
03022 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">default</emphasis>:
03023 &#32;&#32;&#32;&#32;&#32;&#32;printf(<emphasis role="stringliteral">&quot;Unexposed&quot;</emphasis>);
03024 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
03025 &#32;&#32;&#32;&#32;}
03026 }
03027 
03028 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;inspect_evaluate_cursor(CXCursor&#32;Cursor)&#32;{
03029 &#32;&#32;CXSourceLocation&#32;CursorLoc&#32;=&#32;<link linkend="__c_index_8cpp_1a98001a3f8eb3a76d9c12821c45ef3708">clang_getCursorLocation</link>(Cursor);
03030 &#32;&#32;CXString&#32;Spelling;
03031 &#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*cspell;
03032 &#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;line,&#32;column;
03033 &#32;&#32;CXEvalResult&#32;ER;
03034 
03035 &#32;&#32;<link linkend="__c_x_source_location_8cpp_1ae2d805527135aac587ca5c8017bde0ef">clang_getSpellingLocation</link>(CursorLoc,&#32;0,&#32;&amp;line,&#32;&amp;column,&#32;0);
03036 &#32;&#32;printf(<emphasis role="stringliteral">&quot;%d:%d&#32;&quot;</emphasis>,&#32;line,&#32;column);
03037 &#32;&#32;PrintCursor(Cursor,&#32;NULL);
03038 &#32;&#32;PrintCursorExtent(Cursor);
03039 &#32;&#32;Spelling&#32;=&#32;<link linkend="__c_index_8cpp_1a412f1282680f05ef2b991f21a59ad3ac">clang_getCursorSpelling</link>(Cursor);
03040 &#32;&#32;cspell&#32;=&#32;<link linkend="__c_x_string_8cpp_1acd478c1b1785e17c0fe377bd70a2195f">clang_getCString</link>(Spelling);
03041 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(cspell&#32;&amp;&amp;&#32;strlen(cspell)&#32;!=&#32;0)&#32;{
03042 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;pieceIndex;
03043 &#32;&#32;&#32;&#32;printf(<emphasis role="stringliteral">&quot;&#32;Spelling=%s&#32;(&quot;</emphasis>,&#32;cspell);
03044 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(pieceIndex&#32;=&#32;0;&#32;;&#32;++pieceIndex)&#32;{
03045 &#32;&#32;&#32;&#32;&#32;&#32;CXSourceRange&#32;range&#32;=
03046 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__c_index_8cpp_1aedf6f9d3e1c24f3c4e29eae0dd24487d">clang_Cursor_getSpellingNameRange</link>(Cursor,&#32;pieceIndex,&#32;0);
03047 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="__c_x_source_location_8cpp_1ae11f8a52af4ea3ffd8018196f41f4128">clang_Range_isNull</link>(range))
03048 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
03049 &#32;&#32;&#32;&#32;&#32;&#32;PrintRange(range,&#32;0);
03050 &#32;&#32;&#32;&#32;}
03051 &#32;&#32;&#32;&#32;printf(<emphasis role="stringliteral">&quot;)&quot;</emphasis>);
03052 &#32;&#32;}
03053 &#32;&#32;<link linkend="__c_x_string_8cpp_1a46c85f1255580ed186aa6f7380a06883">clang_disposeString</link>(Spelling);
03054 
03055 &#32;&#32;ER&#32;=&#32;<link linkend="__c_index_8cpp_1a79f2fabb1bf5025f2a5684281fd8a23c">clang_Cursor_Evaluate</link>(Cursor);
03056 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!ER)&#32;{
03057 &#32;&#32;&#32;&#32;printf(<emphasis role="stringliteral">&quot;Not&#32;Evaluatable&quot;</emphasis>);
03058 &#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
03059 &#32;&#32;&#32;&#32;display_evaluate_results(ER);
03060 &#32;&#32;&#32;&#32;<link linkend="__c_index_8cpp_1ae2f762d99b78b192138f9afd8773e82e">clang_EvalResult_dispose</link>(ER);
03061 &#32;&#32;}
03062 &#32;&#32;printf(<emphasis role="stringliteral">&quot;\n&quot;</emphasis>);
03063 }
03064 
03065 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;inspect_macroinfo_cursor(CXCursor&#32;Cursor)&#32;{
03066 &#32;&#32;CXSourceLocation&#32;CursorLoc&#32;=&#32;<link linkend="__c_index_8cpp_1a98001a3f8eb3a76d9c12821c45ef3708">clang_getCursorLocation</link>(Cursor);
03067 &#32;&#32;CXString&#32;Spelling;
03068 &#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*cspell;
03069 &#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;line,&#32;column;
03070 &#32;&#32;<link linkend="__c_x_source_location_8cpp_1ae2d805527135aac587ca5c8017bde0ef">clang_getSpellingLocation</link>(CursorLoc,&#32;0,&#32;&amp;line,&#32;&amp;column,&#32;0);
03071 &#32;&#32;printf(<emphasis role="stringliteral">&quot;%d:%d&#32;&quot;</emphasis>,&#32;line,&#32;column);
03072 &#32;&#32;PrintCursor(Cursor,&#32;NULL);
03073 &#32;&#32;PrintCursorExtent(Cursor);
03074 &#32;&#32;Spelling&#32;=&#32;<link linkend="__c_index_8cpp_1a412f1282680f05ef2b991f21a59ad3ac">clang_getCursorSpelling</link>(Cursor);
03075 &#32;&#32;cspell&#32;=&#32;<link linkend="__c_x_string_8cpp_1acd478c1b1785e17c0fe377bd70a2195f">clang_getCString</link>(Spelling);
03076 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(cspell&#32;&amp;&amp;&#32;strlen(cspell)&#32;!=&#32;0)&#32;{
03077 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;pieceIndex;
03078 &#32;&#32;&#32;&#32;printf(<emphasis role="stringliteral">&quot;&#32;Spelling=%s&#32;(&quot;</emphasis>,&#32;cspell);
03079 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(pieceIndex&#32;=&#32;0;&#32;;&#32;++pieceIndex)&#32;{
03080 &#32;&#32;&#32;&#32;&#32;&#32;CXSourceRange&#32;range&#32;=
03081 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__c_index_8cpp_1aedf6f9d3e1c24f3c4e29eae0dd24487d">clang_Cursor_getSpellingNameRange</link>(Cursor,&#32;pieceIndex,&#32;0);
03082 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="__c_x_source_location_8cpp_1ae11f8a52af4ea3ffd8018196f41f4128">clang_Range_isNull</link>(range))
03083 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
03084 &#32;&#32;&#32;&#32;&#32;&#32;PrintRange(range,&#32;0);
03085 &#32;&#32;&#32;&#32;}
03086 &#32;&#32;&#32;&#32;printf(<emphasis role="stringliteral">&quot;)&quot;</emphasis>);
03087 &#32;&#32;}
03088 &#32;&#32;<link linkend="__c_x_string_8cpp_1a46c85f1255580ed186aa6f7380a06883">clang_disposeString</link>(Spelling);
03089 
03090 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="__c_index_8cpp_1aa87fa24bae2366008033005d52645e57">clang_Cursor_isMacroBuiltin</link>(Cursor))&#32;{
03091 &#32;&#32;&#32;&#32;printf(<emphasis role="stringliteral">&quot;[builtin&#32;macro]&quot;</emphasis>);
03092 &#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="__c_index_8cpp_1a1b3a4946c65f34996299af537fc263ae">clang_Cursor_isMacroFunctionLike</link>(Cursor))&#32;{
03093 &#32;&#32;&#32;&#32;printf(<emphasis role="stringliteral">&quot;[function&#32;macro]&quot;</emphasis>);
03094 &#32;&#32;}
03095 &#32;&#32;printf(<emphasis role="stringliteral">&quot;\n&quot;</emphasis>);
03096 }
03097 
03098 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">enum</emphasis>&#32;CXVisitorResult&#32;findFileRefsVisit(<emphasis role="keywordtype">void</emphasis>&#32;*context,
03099 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;CXCursor&#32;cursor,&#32;CXSourceRange&#32;range)&#32;{
03100 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="__c_x_source_location_8cpp_1ae11f8a52af4ea3ffd8018196f41f4128">clang_Range_isNull</link>(range))
03101 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;CXVisit_Continue;
03102 
03103 &#32;&#32;PrintCursor(cursor,&#32;NULL);
03104 &#32;&#32;PrintRange(range,&#32;<emphasis role="stringliteral">&quot;&quot;</emphasis>);
03105 &#32;&#32;printf(<emphasis role="stringliteral">&quot;\n&quot;</emphasis>);
03106 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;CXVisit_Continue;
03107 }
03108 
03109 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;find_file_refs_at(<emphasis role="keywordtype">int</emphasis>&#32;argc,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;**argv)&#32;{
03110 &#32;&#32;CXIndex&#32;CIdx;
03111 &#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;errorCode;
03112 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>CXUnsavedFile&#32;*unsaved_files&#32;=&#32;0;
03113 &#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;num_unsaved_files&#32;=&#32;0;
03114 &#32;&#32;<emphasis role="keyword">enum</emphasis>&#32;CXErrorCode&#32;Err;
03115 &#32;&#32;CXTranslationUnit&#32;TU;
03116 &#32;&#32;CXCursor&#32;Cursor;
03117 &#32;&#32;<link linkend="_struct_cursor_source_location">CursorSourceLocation</link>&#32;*Locations&#32;=&#32;0;
03118 &#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;NumLocations&#32;=&#32;0,&#32;Loc;
03119 &#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;Repeats&#32;=&#32;1;
03120 &#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;I;
03121 &#32;&#32;
03122 &#32;&#32;<emphasis role="comment">/*&#32;Count&#32;the&#32;number&#32;of&#32;locations.&#32;*/</emphasis>
03123 &#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(strstr(argv[NumLocations+1],&#32;<emphasis role="stringliteral">&quot;-file-refs-at=&quot;</emphasis>)&#32;==&#32;argv[NumLocations+1])
03124 &#32;&#32;&#32;&#32;++NumLocations;
03125 
03126 &#32;&#32;<emphasis role="comment">/*&#32;Parse&#32;the&#32;locations.&#32;*/</emphasis>
03127 &#32;&#32;assert(NumLocations&#32;&gt;&#32;0&#32;&amp;&amp;&#32;<emphasis role="stringliteral">&quot;Unable&#32;to&#32;count&#32;locations?&quot;</emphasis>);
03128 &#32;&#32;Locations&#32;=&#32;(<link linkend="_struct_cursor_source_location">CursorSourceLocation</link>&#32;*)malloc(
03129 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;NumLocations&#32;*&#32;<emphasis role="keyword">sizeof</emphasis>(<link linkend="_struct_cursor_source_location">CursorSourceLocation</link>));
03130 &#32;&#32;assert(Locations);
03131 &#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(Loc&#32;=&#32;0;&#32;Loc&#32;&lt;&#32;NumLocations;&#32;++Loc)&#32;{
03132 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*input&#32;=&#32;argv[Loc&#32;+&#32;1]&#32;+&#32;strlen(<emphasis role="stringliteral">&quot;-file-refs-at=&quot;</emphasis>);
03133 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;((errorCode&#32;=&#32;<link linkend="_c-index-test_8c_1a86d7b0a04b2271451b84a97a62081480">parse_file_line_column</link>(input,&#32;&amp;Locations[Loc].filename,
03134 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;Locations[Loc].line,
03135 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;Locations[Loc].column,&#32;0,&#32;0)))
03136 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;errorCode;
03137 &#32;&#32;}
03138 
03139 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(parse_remapped_files(argc,&#32;argv,&#32;NumLocations&#32;+&#32;1,&#32;&amp;unsaved_files,
03140 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;num_unsaved_files))
03141 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;-1;
03142 
03143 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(getenv(<emphasis role="stringliteral">&quot;CINDEXTEST_EDITING&quot;</emphasis>))
03144 &#32;&#32;&#32;&#32;Repeats&#32;=&#32;5;
03145 
03146 &#32;&#32;<emphasis role="comment">/*&#32;Parse&#32;the&#32;translation&#32;unit.&#32;When&#32;we&apos;re&#32;testing&#32;clang_getCursor()&#32;after</emphasis>
03147 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;reparsing,&#32;don&apos;t&#32;remap&#32;unsaved&#32;files&#32;until&#32;the&#32;second&#32;parse.&#32;*/</emphasis>
03148 &#32;&#32;CIdx&#32;=&#32;<link linkend="__c_index_8cpp_1a3420c8e7e10a7ff7906130b207cbb763">clang_createIndex</link>(1,&#32;1);
03149 &#32;&#32;Err&#32;=&#32;<link linkend="__c_index_8cpp_1a3ddd508cc891d95a82b747955738249a">clang_parseTranslationUnit2</link>(CIdx,&#32;argv[argc&#32;-&#32;1],
03150 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;argv&#32;+&#32;num_unsaved_files&#32;+&#32;1&#32;+&#32;NumLocations,
03151 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;argc&#32;-&#32;num_unsaved_files&#32;-&#32;2&#32;-&#32;NumLocations,
03152 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;unsaved_files,
03153 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Repeats&#32;&gt;&#32;1?&#32;0&#32;:&#32;num_unsaved_files,
03154 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;getDefaultParsingOptions(),&#32;&amp;TU);
03155 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(Err&#32;!=&#32;CXError_Success)&#32;{
03156 &#32;&#32;&#32;&#32;fprintf(stderr,&#32;<emphasis role="stringliteral">&quot;unable&#32;to&#32;parse&#32;input\n&quot;</emphasis>);
03157 &#32;&#32;&#32;&#32;describeLibclangFailure(Err);
03158 &#32;&#32;&#32;&#32;<link linkend="__c_index_8cpp_1a3af88c13004a1954abd6dc956faff3be">clang_disposeTranslationUnit</link>(TU);
03159 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;-1;
03160 &#32;&#32;}
03161 
03162 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(checkForErrors(TU)&#32;!=&#32;0)
03163 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;-1;
03164 
03165 &#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(I&#32;=&#32;0;&#32;I&#32;!=&#32;Repeats;&#32;++I)&#32;{
03166 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(Repeats&#32;&gt;&#32;1)&#32;{
03167 &#32;&#32;&#32;&#32;&#32;&#32;Err&#32;=&#32;<link linkend="__c_index_8cpp_1a2befc445c3dde1e89f6900c67892ceaa">clang_reparseTranslationUnit</link>(TU,&#32;num_unsaved_files,&#32;unsaved_files,
03168 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__c_index_8cpp_1a2f79bdd29d8f799a3943c6a5254eb789">clang_defaultReparseOptions</link>(TU));
03169 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(Err&#32;!=&#32;CXError_Success)&#32;{
03170 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;describeLibclangFailure(Err);
03171 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__c_index_8cpp_1a3af88c13004a1954abd6dc956faff3be">clang_disposeTranslationUnit</link>(TU);
03172 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;1;
03173 &#32;&#32;&#32;&#32;&#32;&#32;}
03174 &#32;&#32;&#32;&#32;}
03175 
03176 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(checkForErrors(TU)&#32;!=&#32;0)
03177 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;-1;
03178 &#32;&#32;&#32;&#32;
03179 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(Loc&#32;=&#32;0;&#32;Loc&#32;&lt;&#32;NumLocations;&#32;++Loc)&#32;{
03180 &#32;&#32;&#32;&#32;&#32;&#32;CXFile&#32;file&#32;=&#32;<link linkend="__c_index_8cpp_1a7c72c3450d02a5d985f152cc0dee1785">clang_getFile</link>(TU,&#32;Locations[Loc].filename);
03181 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!file)
03182 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">continue</emphasis>;
03183 
03184 &#32;&#32;&#32;&#32;&#32;&#32;Cursor&#32;=&#32;<link linkend="__c_index_8cpp_1a98b7e00ed3ca471a2e35509110ddc0c5">clang_getCursor</link>(TU,
03185 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__c_x_source_location_8cpp_1a3da1e96662794609af6bec3dc345dd9a">clang_getLocation</link>(TU,&#32;file,&#32;Locations[Loc].line,
03186 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Locations[Loc].column));
03187 
03188 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(checkForErrors(TU)&#32;!=&#32;0)
03189 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;-1;
03190 
03191 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(I&#32;+&#32;1&#32;==&#32;Repeats)&#32;{
03192 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;CXCursorAndRangeVisitor&#32;visitor&#32;=&#32;{&#32;0,&#32;findFileRefsVisit&#32;};
03193 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;PrintCursor(Cursor,&#32;NULL);
03194 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;printf(<emphasis role="stringliteral">&quot;\n&quot;</emphasis>);
03195 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__c_index_high_8cpp_1a6b21283c57156038f976fb60e3f268c2">clang_findReferencesInFile</link>(Cursor,&#32;file,&#32;visitor);
03196 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;free(Locations[Loc].filename);
03197 
03198 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(checkForErrors(TU)&#32;!=&#32;0)
03199 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;-1;
03200 &#32;&#32;&#32;&#32;&#32;&#32;}
03201 &#32;&#32;&#32;&#32;}
03202 &#32;&#32;}
03203 &#32;&#32;
03204 &#32;&#32;<link linkend="_c-index-test_8c_1a40fceb7e4c2e16f5bce47bae394b973a">PrintDiagnostics</link>(TU);
03205 &#32;&#32;<link linkend="__c_index_8cpp_1a3af88c13004a1954abd6dc956faff3be">clang_disposeTranslationUnit</link>(TU);
03206 &#32;&#32;<link linkend="__c_index_8cpp_1aea91ddf5e996cba0de2f781cb17db1d5">clang_disposeIndex</link>(CIdx);
03207 &#32;&#32;free(Locations);
03208 &#32;&#32;<link linkend="_c-index-test_8c_1af28d9933e8a8fd14e8394a1e7f9f6379">free_remapped_files</link>(unsaved_files,&#32;num_unsaved_files);
03209 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
03210 }
03211 
03212 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">enum</emphasis>&#32;CXVisitorResult&#32;findFileIncludesVisit(<emphasis role="keywordtype">void</emphasis>&#32;*context,
03213 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;CXCursor&#32;cursor,&#32;CXSourceRange&#32;range)&#32;{
03214 &#32;&#32;PrintCursor(cursor,&#32;NULL);
03215 &#32;&#32;PrintRange(range,&#32;<emphasis role="stringliteral">&quot;&quot;</emphasis>);
03216 &#32;&#32;printf(<emphasis role="stringliteral">&quot;\n&quot;</emphasis>);
03217 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;CXVisit_Continue;
03218 }
03219 
03220 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;find_file_includes_in(<emphasis role="keywordtype">int</emphasis>&#32;argc,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;**argv)&#32;{
03221 &#32;&#32;CXIndex&#32;CIdx;
03222 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>CXUnsavedFile&#32;*unsaved_files&#32;=&#32;0;
03223 &#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;num_unsaved_files&#32;=&#32;0;
03224 &#32;&#32;<emphasis role="keyword">enum</emphasis>&#32;CXErrorCode&#32;Err;
03225 &#32;&#32;CXTranslationUnit&#32;TU;
03226 &#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;**Filenames&#32;=&#32;0;
03227 &#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;NumFilenames&#32;=&#32;0;
03228 &#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;Repeats&#32;=&#32;1;
03229 &#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;I,&#32;FI;
03230 
03231 &#32;&#32;<emphasis role="comment">/*&#32;Count&#32;the&#32;number&#32;of&#32;locations.&#32;*/</emphasis>
03232 &#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(strstr(argv[NumFilenames+1],&#32;<emphasis role="stringliteral">&quot;-file-includes-in=&quot;</emphasis>)&#32;==&#32;argv[NumFilenames+1])
03233 &#32;&#32;&#32;&#32;++NumFilenames;
03234 
03235 &#32;&#32;<emphasis role="comment">/*&#32;Parse&#32;the&#32;locations.&#32;*/</emphasis>
03236 &#32;&#32;assert(NumFilenames&#32;&gt;&#32;0&#32;&amp;&amp;&#32;<emphasis role="stringliteral">&quot;Unable&#32;to&#32;count&#32;filenames?&quot;</emphasis>);
03237 &#32;&#32;Filenames&#32;=&#32;(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;**)malloc(NumFilenames&#32;*&#32;<emphasis role="keyword">sizeof</emphasis>(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*));
03238 &#32;&#32;assert(Filenames);
03239 &#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(I&#32;=&#32;0;&#32;I&#32;&lt;&#32;NumFilenames;&#32;++I)&#32;{
03240 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*input&#32;=&#32;argv[I&#32;+&#32;1]&#32;+&#32;strlen(<emphasis role="stringliteral">&quot;-file-includes-in=&quot;</emphasis>);
03241 &#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;Copy&#32;the&#32;file&#32;name.&#32;*/</emphasis>
03242 &#32;&#32;&#32;&#32;Filenames[I]&#32;=&#32;input;
03243 &#32;&#32;}
03244 
03245 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(parse_remapped_files(argc,&#32;argv,&#32;NumFilenames&#32;+&#32;1,&#32;&amp;unsaved_files,
03246 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;num_unsaved_files))
03247 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;-1;
03248 
03249 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(getenv(<emphasis role="stringliteral">&quot;CINDEXTEST_EDITING&quot;</emphasis>))
03250 &#32;&#32;&#32;&#32;Repeats&#32;=&#32;2;
03251 
03252 &#32;&#32;<emphasis role="comment">/*&#32;Parse&#32;the&#32;translation&#32;unit.&#32;When&#32;we&apos;re&#32;testing&#32;clang_getCursor()&#32;after</emphasis>
03253 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;reparsing,&#32;don&apos;t&#32;remap&#32;unsaved&#32;files&#32;until&#32;the&#32;second&#32;parse.&#32;*/</emphasis>
03254 &#32;&#32;CIdx&#32;=&#32;<link linkend="__c_index_8cpp_1a3420c8e7e10a7ff7906130b207cbb763">clang_createIndex</link>(1,&#32;1);
03255 &#32;&#32;Err&#32;=&#32;<link linkend="__c_index_8cpp_1a3ddd508cc891d95a82b747955738249a">clang_parseTranslationUnit2</link>(
03256 &#32;&#32;&#32;&#32;&#32;&#32;CIdx,&#32;argv[argc&#32;-&#32;1],
03257 &#32;&#32;&#32;&#32;&#32;&#32;argv&#32;+&#32;num_unsaved_files&#32;+&#32;1&#32;+&#32;NumFilenames,
03258 &#32;&#32;&#32;&#32;&#32;&#32;argc&#32;-&#32;num_unsaved_files&#32;-&#32;2&#32;-&#32;NumFilenames,
03259 &#32;&#32;&#32;&#32;&#32;&#32;unsaved_files,
03260 &#32;&#32;&#32;&#32;&#32;&#32;Repeats&#32;&gt;&#32;1&#32;?&#32;0&#32;:&#32;num_unsaved_files,&#32;getDefaultParsingOptions(),&#32;&amp;TU);
03261 
03262 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(Err&#32;!=&#32;CXError_Success)&#32;{
03263 &#32;&#32;&#32;&#32;fprintf(stderr,&#32;<emphasis role="stringliteral">&quot;unable&#32;to&#32;parse&#32;input\n&quot;</emphasis>);
03264 &#32;&#32;&#32;&#32;describeLibclangFailure(Err);
03265 &#32;&#32;&#32;&#32;<link linkend="__c_index_8cpp_1a3af88c13004a1954abd6dc956faff3be">clang_disposeTranslationUnit</link>(TU);
03266 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;-1;
03267 &#32;&#32;}
03268 
03269 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(checkForErrors(TU)&#32;!=&#32;0)
03270 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;-1;
03271 
03272 &#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(I&#32;=&#32;0;&#32;I&#32;!=&#32;Repeats;&#32;++I)&#32;{
03273 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(Repeats&#32;&gt;&#32;1)&#32;{
03274 &#32;&#32;&#32;&#32;&#32;&#32;Err&#32;=&#32;<link linkend="__c_index_8cpp_1a2befc445c3dde1e89f6900c67892ceaa">clang_reparseTranslationUnit</link>(TU,&#32;num_unsaved_files,&#32;unsaved_files,
03275 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__c_index_8cpp_1a2f79bdd29d8f799a3943c6a5254eb789">clang_defaultReparseOptions</link>(TU));
03276 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(Err&#32;!=&#32;CXError_Success)&#32;{
03277 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;describeLibclangFailure(Err);
03278 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__c_index_8cpp_1a3af88c13004a1954abd6dc956faff3be">clang_disposeTranslationUnit</link>(TU);
03279 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;1;
03280 &#32;&#32;&#32;&#32;&#32;&#32;}
03281 &#32;&#32;&#32;&#32;}
03282 
03283 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(checkForErrors(TU)&#32;!=&#32;0)
03284 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;-1;
03285 
03286 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(FI&#32;=&#32;0;&#32;FI&#32;&lt;&#32;NumFilenames;&#32;++FI)&#32;{
03287 &#32;&#32;&#32;&#32;&#32;&#32;CXFile&#32;file&#32;=&#32;<link linkend="__c_index_8cpp_1a7c72c3450d02a5d985f152cc0dee1785">clang_getFile</link>(TU,&#32;Filenames[FI]);
03288 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!file)
03289 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">continue</emphasis>;
03290 
03291 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(checkForErrors(TU)&#32;!=&#32;0)
03292 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;-1;
03293 
03294 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(I&#32;+&#32;1&#32;==&#32;Repeats)&#32;{
03295 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;CXCursorAndRangeVisitor&#32;visitor&#32;=&#32;{&#32;0,&#32;findFileIncludesVisit&#32;};
03296 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__c_index_high_8cpp_1a152126673cad4e1f7f0fb80eb8e2044d">clang_findIncludesInFile</link>(TU,&#32;file,&#32;visitor);
03297 
03298 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(checkForErrors(TU)&#32;!=&#32;0)
03299 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;-1;
03300 &#32;&#32;&#32;&#32;&#32;&#32;}
03301 &#32;&#32;&#32;&#32;}
03302 &#32;&#32;}
03303 
03304 &#32;&#32;<link linkend="_c-index-test_8c_1a40fceb7e4c2e16f5bce47bae394b973a">PrintDiagnostics</link>(TU);
03305 &#32;&#32;<link linkend="__c_index_8cpp_1a3af88c13004a1954abd6dc956faff3be">clang_disposeTranslationUnit</link>(TU);
03306 &#32;&#32;<link linkend="__c_index_8cpp_1aea91ddf5e996cba0de2f781cb17db1d5">clang_disposeIndex</link>(CIdx);
03307 &#32;&#32;free((<emphasis role="keywordtype">void</emphasis>&#32;*)Filenames);
03308 &#32;&#32;<link linkend="_c-index-test_8c_1af28d9933e8a8fd14e8394a1e7f9f6379">free_remapped_files</link>(unsaved_files,&#32;num_unsaved_files);
03309 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
03310 }
03311 
<anchor xml:id="_c-index-test_8c_source_1l03312"/><link linkend="_c-index-test_8c_1ad4351eaabb7b57e21fdd4a4cca2c1a1f">03312</link> <emphasis role="preprocessor">#define&#32;MAX_IMPORTED_ASTFILES&#32;200</emphasis>
03313 
<anchor xml:id="_c-index-test_8c_source_1l03314"/><link linkend="_struct_imported_a_s_t_files_data">03314</link> <emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">struct&#32;</emphasis>{
<anchor xml:id="_c-index-test_8c_source_1l03315"/><link linkend="_struct_imported_a_s_t_files_data_1ac87e88cb077dd1e127703a50aaa009a8">03315</link> &#32;&#32;<emphasis role="keywordtype">char</emphasis>&#32;**<link linkend="_struct_imported_a_s_t_files_data_1ac87e88cb077dd1e127703a50aaa009a8">filenames</link>;
<anchor xml:id="_c-index-test_8c_source_1l03316"/><link linkend="_struct_imported_a_s_t_files_data_1a059be3358e7656b2d55177e40e2922d7">03316</link> &#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<link linkend="_struct_imported_a_s_t_files_data_1a059be3358e7656b2d55177e40e2922d7">num_files</link>;
03317 }&#32;<link linkend="_struct_imported_a_s_t_files_data">ImportedASTFilesData</link>;
03318 
03319 <emphasis role="keyword">static</emphasis>&#32;<link linkend="_struct_imported_a_s_t_files_data">ImportedASTFilesData</link>&#32;*importedASTs_create()&#32;{
03320 &#32;&#32;<link linkend="_struct_imported_a_s_t_files_data">ImportedASTFilesData</link>&#32;*p;
03321 &#32;&#32;p&#32;=&#32;malloc(<emphasis role="keyword">sizeof</emphasis>(<link linkend="_struct_imported_a_s_t_files_data">ImportedASTFilesData</link>));
03322 &#32;&#32;assert(p);
03323 &#32;&#32;p-&gt;<link linkend="_struct_imported_a_s_t_files_data_1ac87e88cb077dd1e127703a50aaa009a8">filenames</link>&#32;=&#32;malloc(<link linkend="_c-index-test_8c_1ad4351eaabb7b57e21fdd4a4cca2c1a1f">MAX_IMPORTED_ASTFILES</link>&#32;*&#32;<emphasis role="keyword">sizeof</emphasis>(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*));
03324 &#32;&#32;assert(p-&gt;<link linkend="_struct_imported_a_s_t_files_data_1ac87e88cb077dd1e127703a50aaa009a8">filenames</link>);
03325 &#32;&#32;p-&gt;<link linkend="_struct_imported_a_s_t_files_data_1a059be3358e7656b2d55177e40e2922d7">num_files</link>&#32;=&#32;0;
03326 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;p;
03327 }
03328 
03329 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;importedASTs_dispose(<link linkend="_struct_imported_a_s_t_files_data">ImportedASTFilesData</link>&#32;*p)&#32;{
03330 &#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;i;
03331 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!p)
03332 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
03333 
03334 &#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(i&#32;=&#32;0;&#32;i&#32;&lt;&#32;p-&gt;<link linkend="_struct_imported_a_s_t_files_data_1a059be3358e7656b2d55177e40e2922d7">num_files</link>;&#32;++i)
03335 &#32;&#32;&#32;&#32;free(p-&gt;<link linkend="_struct_imported_a_s_t_files_data_1ac87e88cb077dd1e127703a50aaa009a8">filenames</link>[i]);
03336 &#32;&#32;free(p-&gt;<link linkend="_struct_imported_a_s_t_files_data_1ac87e88cb077dd1e127703a50aaa009a8">filenames</link>);
03337 &#32;&#32;free(p);
03338 }
03339 
03340 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;importedASTS_insert(<link linkend="_struct_imported_a_s_t_files_data">ImportedASTFilesData</link>&#32;*p,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*file)&#32;{
03341 &#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;i;
03342 &#32;&#32;assert(p&#32;&amp;&amp;&#32;file);
03343 &#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(i&#32;=&#32;0;&#32;i&#32;&lt;&#32;p-&gt;<link linkend="_struct_imported_a_s_t_files_data_1a059be3358e7656b2d55177e40e2922d7">num_files</link>;&#32;++i)
03344 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(strcmp(file,&#32;p-&gt;<link linkend="_struct_imported_a_s_t_files_data_1ac87e88cb077dd1e127703a50aaa009a8">filenames</link>[i])&#32;==&#32;0)
03345 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
03346 &#32;&#32;assert(p-&gt;<link linkend="_struct_imported_a_s_t_files_data_1a059be3358e7656b2d55177e40e2922d7">num_files</link>&#32;+&#32;1&#32;&lt;&#32;<link linkend="_c-index-test_8c_1ad4351eaabb7b57e21fdd4a4cca2c1a1f">MAX_IMPORTED_ASTFILES</link>);
03347 &#32;&#32;p-&gt;<link linkend="_struct_imported_a_s_t_files_data_1ac87e88cb077dd1e127703a50aaa009a8">filenames</link>[p-&gt;<link linkend="_struct_imported_a_s_t_files_data_1a059be3358e7656b2d55177e40e2922d7">num_files</link>++]&#32;=&#32;strdup(file);
03348 }
03349 
<anchor xml:id="_c-index-test_8c_source_1l03350"/><link linkend="_struct_index_data_string_list__">03350</link> <emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_struct_index_data_string_list__">IndexDataStringList_</link>&#32;{
<anchor xml:id="_c-index-test_8c_source_1l03351"/><link linkend="_struct_index_data_string_list___1a96cb78b754f428833a02ed6932e17afe">03351</link> &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_struct_index_data_string_list__">IndexDataStringList_</link>&#32;*<link linkend="_struct_index_data_string_list___1a96cb78b754f428833a02ed6932e17afe">next</link>;
<anchor xml:id="_c-index-test_8c_source_1l03352"/><link linkend="_struct_index_data_string_list___1aa8ef401c9ffe0128096e59ae278b6abd">03352</link> &#32;&#32;<emphasis role="keywordtype">char</emphasis>&#32;<link linkend="_struct_index_data_string_list___1aa8ef401c9ffe0128096e59ae278b6abd">data</link>[1];&#32;<emphasis role="comment">/*&#32;Dynamically&#32;sized.&#32;*/</emphasis>
<anchor xml:id="_c-index-test_8c_source_1l03353"/><link linkend="_c-index-test_8c_1a002cdb688da1d4e1d6c9d7b9fb053e23">03353</link> }&#32;<link linkend="_c-index-test_8c_1a002cdb688da1d4e1d6c9d7b9fb053e23">IndexDataStringList</link>;
03354 
<anchor xml:id="_c-index-test_8c_source_1l03355"/><link linkend="_struct_index_data">03355</link> <emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">struct&#32;</emphasis>{
<anchor xml:id="_c-index-test_8c_source_1l03356"/><link linkend="_struct_index_data_1a874013156845e11ecbe59521b4b7edb6">03356</link> &#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*<link linkend="_struct_index_data_1a874013156845e11ecbe59521b4b7edb6">check_prefix</link>;
<anchor xml:id="_c-index-test_8c_source_1l03357"/><link linkend="_struct_index_data_1a36960111218278065698d9a07cadaa94">03357</link> &#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_struct_index_data_1a36960111218278065698d9a07cadaa94">first_check_printed</link>;
<anchor xml:id="_c-index-test_8c_source_1l03358"/><link linkend="_struct_index_data_1ac94496c8357949aafd7c663b71729b2c">03358</link> &#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_struct_index_data_1ac94496c8357949aafd7c663b71729b2c">fail_for_error</link>;
<anchor xml:id="_c-index-test_8c_source_1l03359"/><link linkend="_struct_index_data_1a504c19d2dbd2f11f2e0b1117a2dd8f34">03359</link> &#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_struct_index_data_1a504c19d2dbd2f11f2e0b1117a2dd8f34">abort</link>;
<anchor xml:id="_c-index-test_8c_source_1l03360"/><link linkend="_struct_index_data_1ab3b03a4de5cae6c152e3150fac8b6db4">03360</link> &#32;&#32;CXString&#32;<link linkend="_struct_index_data_1ab3b03a4de5cae6c152e3150fac8b6db4">main_filename</link>;
<anchor xml:id="_c-index-test_8c_source_1l03361"/><link linkend="_struct_index_data_1af0b783cec8aa895043606012fcf99c09">03361</link> &#32;&#32;<link linkend="_struct_imported_a_s_t_files_data">ImportedASTFilesData</link>&#32;*<link linkend="_struct_index_data_1af0b783cec8aa895043606012fcf99c09">importedASTs</link>;
<anchor xml:id="_c-index-test_8c_source_1l03362"/><link linkend="_struct_index_data_1a9ef372150a7b8819314095e9185dc2d5">03362</link> &#32;&#32;<link linkend="_struct_index_data_string_list__">IndexDataStringList</link>&#32;*<link linkend="_struct_index_data_1a9ef372150a7b8819314095e9185dc2d5">strings</link>;
<anchor xml:id="_c-index-test_8c_source_1l03363"/><link linkend="_struct_index_data_1a97a35007cd25ed2ce312ecad74c7f2d2">03363</link> &#32;&#32;CXTranslationUnit&#32;<link linkend="_struct_index_data_1a97a35007cd25ed2ce312ecad74c7f2d2">TU</link>;
03364 }&#32;<link linkend="_struct_index_data">IndexData</link>;
03365 
03366 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;free_client_data(<link linkend="_struct_index_data">IndexData</link>&#32;*index_data)&#32;{
03367 &#32;&#32;<link linkend="_struct_index_data_string_list__">IndexDataStringList</link>&#32;*node&#32;=&#32;index_data-&gt;<link linkend="_struct_index_data_1a9ef372150a7b8819314095e9185dc2d5">strings</link>;
03368 &#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(node)&#32;{
03369 &#32;&#32;&#32;&#32;<link linkend="_struct_index_data_string_list__">IndexDataStringList</link>&#32;*next&#32;=&#32;node-&gt;<link linkend="_struct_index_data_string_list___1a96cb78b754f428833a02ed6932e17afe">next</link>;
03370 &#32;&#32;&#32;&#32;free(node);
03371 &#32;&#32;&#32;&#32;node&#32;=&#32;next;
03372 &#32;&#32;}
03373 &#32;&#32;index_data-&gt;<link linkend="_struct_index_data_1a9ef372150a7b8819314095e9185dc2d5">strings</link>&#32;=&#32;NULL;
03374 }
03375 
03376 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;printCheck(<link linkend="_struct_index_data">IndexData</link>&#32;*data)&#32;{
03377 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(data-&gt;<link linkend="_struct_index_data_1a874013156845e11ecbe59521b4b7edb6">check_prefix</link>)&#32;{
03378 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(data-&gt;<link linkend="_struct_index_data_1a36960111218278065698d9a07cadaa94">first_check_printed</link>)&#32;{
03379 &#32;&#32;&#32;&#32;&#32;&#32;printf(<emphasis role="stringliteral">&quot;//&#32;%s-NEXT:&#32;&quot;</emphasis>,&#32;data-&gt;<link linkend="_struct_index_data_1a874013156845e11ecbe59521b4b7edb6">check_prefix</link>);
03380 &#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
03381 &#32;&#32;&#32;&#32;&#32;&#32;printf(<emphasis role="stringliteral">&quot;//&#32;%s&#32;&#32;&#32;&#32;&#32;:&#32;&quot;</emphasis>,&#32;data-&gt;<link linkend="_struct_index_data_1a874013156845e11ecbe59521b4b7edb6">check_prefix</link>);
03382 &#32;&#32;&#32;&#32;&#32;&#32;data-&gt;<link linkend="_struct_index_data_1a36960111218278065698d9a07cadaa94">first_check_printed</link>&#32;=&#32;1;
03383 &#32;&#32;&#32;&#32;}
03384 &#32;&#32;}
03385 }
03386 
03387 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;printCXIndexFile(CXIdxClientFile&#32;file)&#32;{
03388 &#32;&#32;CXString&#32;filename&#32;=&#32;<link linkend="__c_index_8cpp_1a263c34f5782353186990b2c990d648fc">clang_getFileName</link>((CXFile)file);
03389 &#32;&#32;printf(<emphasis role="stringliteral">&quot;%s&quot;</emphasis>,&#32;<link linkend="__c_x_string_8cpp_1acd478c1b1785e17c0fe377bd70a2195f">clang_getCString</link>(filename));
03390 &#32;&#32;<link linkend="__c_x_string_8cpp_1a46c85f1255580ed186aa6f7380a06883">clang_disposeString</link>(filename);
03391 }
03392 
03393 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;printCXIndexLoc(CXIdxLoc&#32;loc,&#32;CXClientData&#32;client_data)&#32;{
03394 &#32;&#32;<link linkend="_struct_index_data">IndexData</link>&#32;*index_data;
03395 &#32;&#32;CXString&#32;filename;
03396 &#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*cname;
03397 &#32;&#32;CXIdxClientFile&#32;file;
03398 &#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;line,&#32;column;
03399 &#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*main_filename;
03400 &#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;isMainFile;
03401 &#32;&#32;
03402 &#32;&#32;index_data&#32;=&#32;(<link linkend="_struct_index_data">IndexData</link>&#32;*)client_data;
03403 &#32;&#32;<link linkend="__indexing_8cpp_1a3b0c6665884edefc87f18c9b27930cad">clang_indexLoc_getFileLocation</link>(loc,&#32;&amp;file,&#32;0,&#32;&amp;line,&#32;&amp;column,&#32;0);
03404 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(line&#32;==&#32;0)&#32;{
03405 &#32;&#32;&#32;&#32;printf(<emphasis role="stringliteral">&quot;&lt;invalid&gt;&quot;</emphasis>);
03406 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
03407 &#32;&#32;}
03408 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!file)&#32;{
03409 &#32;&#32;&#32;&#32;printf(<emphasis role="stringliteral">&quot;&lt;no&#32;idxfile&gt;&quot;</emphasis>);
03410 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
03411 &#32;&#32;}
03412 &#32;&#32;filename&#32;=&#32;<link linkend="__c_index_8cpp_1a263c34f5782353186990b2c990d648fc">clang_getFileName</link>((CXFile)file);
03413 &#32;&#32;cname&#32;=&#32;<link linkend="__c_x_string_8cpp_1acd478c1b1785e17c0fe377bd70a2195f">clang_getCString</link>(filename);
03414 &#32;&#32;main_filename&#32;=&#32;<link linkend="__c_x_string_8cpp_1acd478c1b1785e17c0fe377bd70a2195f">clang_getCString</link>(index_data-&gt;<link linkend="_struct_index_data_1ab3b03a4de5cae6c152e3150fac8b6db4">main_filename</link>);
03415 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(strcmp(cname,&#32;main_filename)&#32;==&#32;0)
03416 &#32;&#32;&#32;&#32;isMainFile&#32;=&#32;1;
03417 &#32;&#32;<emphasis role="keywordflow">else</emphasis>
03418 &#32;&#32;&#32;&#32;isMainFile&#32;=&#32;0;
03419 &#32;&#32;<link linkend="__c_x_string_8cpp_1a46c85f1255580ed186aa6f7380a06883">clang_disposeString</link>(filename);
03420 
03421 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!isMainFile)&#32;{
03422 &#32;&#32;&#32;&#32;printCXIndexFile(file);
03423 &#32;&#32;&#32;&#32;printf(<emphasis role="stringliteral">&quot;:&quot;</emphasis>);
03424 &#32;&#32;}
03425 &#32;&#32;printf(<emphasis role="stringliteral">&quot;%d:%d&quot;</emphasis>,&#32;line,&#32;column);
03426 }
03427 
03428 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;digitCount(<emphasis role="keywordtype">unsigned</emphasis>&#32;val)&#32;{
03429 &#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;c&#32;=&#32;1;
03430 &#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(1)&#32;{
03431 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(val&#32;&lt;&#32;10)
03432 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;c;
03433 &#32;&#32;&#32;&#32;++c;
03434 &#32;&#32;&#32;&#32;val&#32;/=&#32;10;
03435 &#32;&#32;}
03436 }
03437 
03438 <emphasis role="keyword">static</emphasis>&#32;CXIdxClientContainer&#32;makeClientContainer(CXClientData&#32;*client_data,
03439 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;CXIdxEntityInfo&#32;*info,
03440 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;CXIdxLoc&#32;loc)&#32;{
03441 &#32;&#32;<link linkend="_struct_index_data">IndexData</link>&#32;*index_data;
03442 &#32;&#32;<link linkend="_struct_index_data_string_list__">IndexDataStringList</link>&#32;*node;
03443 &#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*name;
03444 &#32;&#32;<emphasis role="keywordtype">char</emphasis>&#32;*newStr;
03445 &#32;&#32;CXIdxClientFile&#32;file;
03446 &#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;line,&#32;column;
03447 &#32;&#32;
03448 &#32;&#32;name&#32;=&#32;info-&gt;name;
03449 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!name)
03450 &#32;&#32;&#32;&#32;name&#32;=&#32;<emphasis role="stringliteral">&quot;&lt;anon-tag&gt;&quot;</emphasis>;
03451 
03452 &#32;&#32;<link linkend="__indexing_8cpp_1a3b0c6665884edefc87f18c9b27930cad">clang_indexLoc_getFileLocation</link>(loc,&#32;&amp;file,&#32;0,&#32;&amp;line,&#32;&amp;column,&#32;0);
03453 
03454 &#32;&#32;node&#32;=
03455 &#32;&#32;&#32;&#32;&#32;&#32;(<link linkend="_struct_index_data_string_list__">IndexDataStringList</link>&#32;*)malloc(<emphasis role="keyword">sizeof</emphasis>(<link linkend="_struct_index_data_string_list__">IndexDataStringList</link>)&#32;+&#32;strlen(name)&#32;+
03456 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;digitCount(line)&#32;+&#32;digitCount(column)&#32;+&#32;2);
03457 &#32;&#32;assert(node);
03458 &#32;&#32;newStr&#32;=&#32;node-&gt;<link linkend="_struct_index_data_string_list___1aa8ef401c9ffe0128096e59ae278b6abd">data</link>;
03459 &#32;&#32;sprintf(newStr,&#32;<emphasis role="stringliteral">&quot;%s:%d:%d&quot;</emphasis>,&#32;name,&#32;line,&#32;column);
03460 
03461 &#32;&#32;<emphasis role="comment">/*&#32;Remember&#32;string&#32;so&#32;it&#32;can&#32;be&#32;freed&#32;later.&#32;*/</emphasis>
03462 &#32;&#32;index_data&#32;=&#32;(<link linkend="_struct_index_data">IndexData</link>&#32;*)client_data;
03463 &#32;&#32;node-&gt;<link linkend="_struct_index_data_string_list___1a96cb78b754f428833a02ed6932e17afe">next</link>&#32;=&#32;index_data-&gt;<link linkend="_struct_index_data_1a9ef372150a7b8819314095e9185dc2d5">strings</link>;
03464 &#32;&#32;index_data-&gt;<link linkend="_struct_index_data_1a9ef372150a7b8819314095e9185dc2d5">strings</link>&#32;=&#32;node;
03465 
03466 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(CXIdxClientContainer)newStr;
03467 }
03468 
03469 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;printCXIndexContainer(<emphasis role="keyword">const</emphasis>&#32;CXIdxContainerInfo&#32;*info)&#32;{
03470 &#32;&#32;CXIdxClientContainer&#32;container;
03471 &#32;&#32;container&#32;=&#32;<link linkend="__indexing_8cpp_1a3bb9e55b3928a84a4d3aa3857116fc97">clang_index_getClientContainer</link>(info);
03472 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!container)
03473 &#32;&#32;&#32;&#32;printf(<emphasis role="stringliteral">&quot;[&lt;&lt;NULL&gt;&gt;]&quot;</emphasis>);
03474 &#32;&#32;<emphasis role="keywordflow">else</emphasis>
03475 &#32;&#32;&#32;&#32;printf(<emphasis role="stringliteral">&quot;[%s]&quot;</emphasis>,&#32;(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*)container);
03476 }
03477 
03478 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*getEntityKindString(CXIdxEntityKind&#32;kind)&#32;{
03479 &#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(kind)&#32;{
03480 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXIdxEntity_Unexposed:&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="stringliteral">&quot;&lt;&lt;UNEXPOSED&gt;&gt;&quot;</emphasis>;
03481 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXIdxEntity_Typedef:&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="stringliteral">&quot;typedef&quot;</emphasis>;
03482 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXIdxEntity_Function:&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="stringliteral">&quot;function&quot;</emphasis>;
03483 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXIdxEntity_Variable:&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="stringliteral">&quot;variable&quot;</emphasis>;
03484 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXIdxEntity_Field:&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="stringliteral">&quot;field&quot;</emphasis>;
03485 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXIdxEntity_EnumConstant:&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="stringliteral">&quot;enumerator&quot;</emphasis>;
03486 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXIdxEntity_ObjCClass:&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="stringliteral">&quot;objc-class&quot;</emphasis>;
03487 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXIdxEntity_ObjCProtocol:&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="stringliteral">&quot;objc-protocol&quot;</emphasis>;
03488 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXIdxEntity_ObjCCategory:&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="stringliteral">&quot;objc-category&quot;</emphasis>;
03489 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXIdxEntity_ObjCInstanceMethod:&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="stringliteral">&quot;objc-instance-method&quot;</emphasis>;
03490 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXIdxEntity_ObjCClassMethod:&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="stringliteral">&quot;objc-class-method&quot;</emphasis>;
03491 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXIdxEntity_ObjCProperty:&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="stringliteral">&quot;objc-property&quot;</emphasis>;
03492 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXIdxEntity_ObjCIvar:&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="stringliteral">&quot;objc-ivar&quot;</emphasis>;
03493 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXIdxEntity_Enum:&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="stringliteral">&quot;enum&quot;</emphasis>;
03494 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXIdxEntity_Struct:&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="stringliteral">&quot;struct&quot;</emphasis>;
03495 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXIdxEntity_Union:&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="stringliteral">&quot;union&quot;</emphasis>;
03496 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXIdxEntity_CXXClass:&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="stringliteral">&quot;c++-class&quot;</emphasis>;
03497 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXIdxEntity_CXXNamespace:&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="stringliteral">&quot;namespace&quot;</emphasis>;
03498 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXIdxEntity_CXXNamespaceAlias:&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="stringliteral">&quot;namespace-alias&quot;</emphasis>;
03499 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXIdxEntity_CXXStaticVariable:&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="stringliteral">&quot;c++-static-var&quot;</emphasis>;
03500 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXIdxEntity_CXXStaticMethod:&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="stringliteral">&quot;c++-static-method&quot;</emphasis>;
03501 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXIdxEntity_CXXInstanceMethod:&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="stringliteral">&quot;c++-instance-method&quot;</emphasis>;
03502 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXIdxEntity_CXXConstructor:&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="stringliteral">&quot;constructor&quot;</emphasis>;
03503 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXIdxEntity_CXXDestructor:&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="stringliteral">&quot;destructor&quot;</emphasis>;
03504 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXIdxEntity_CXXConversionFunction:&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="stringliteral">&quot;conversion-func&quot;</emphasis>;
03505 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXIdxEntity_CXXTypeAlias:&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="stringliteral">&quot;type-alias&quot;</emphasis>;
03506 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXIdxEntity_CXXInterface:&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="stringliteral">&quot;c++-__interface&quot;</emphasis>;
03507 &#32;&#32;}
03508 &#32;&#32;assert(0&#32;&amp;&amp;&#32;<emphasis role="stringliteral">&quot;Garbage&#32;entity&#32;kind&quot;</emphasis>);
03509 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
03510 }
03511 
03512 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*getEntityTemplateKindString(CXIdxEntityCXXTemplateKind&#32;kind)&#32;{
03513 &#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(kind)&#32;{
03514 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXIdxEntity_NonTemplate:&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="stringliteral">&quot;&quot;</emphasis>;
03515 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXIdxEntity_Template:&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="stringliteral">&quot;-template&quot;</emphasis>;
03516 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXIdxEntity_TemplatePartialSpecialization:
03517 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="stringliteral">&quot;-template-partial-spec&quot;</emphasis>;
03518 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXIdxEntity_TemplateSpecialization:&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="stringliteral">&quot;-template-spec&quot;</emphasis>;
03519 &#32;&#32;}
03520 &#32;&#32;assert(0&#32;&amp;&amp;&#32;<emphasis role="stringliteral">&quot;Garbage&#32;entity&#32;kind&quot;</emphasis>);
03521 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
03522 }
03523 
03524 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*getEntityLanguageString(CXIdxEntityLanguage&#32;kind)&#32;{
03525 &#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(kind)&#32;{
03526 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXIdxEntityLang_None:&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="stringliteral">&quot;&lt;none&gt;&quot;</emphasis>;
03527 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXIdxEntityLang_C:&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="stringliteral">&quot;C&quot;</emphasis>;
03528 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXIdxEntityLang_ObjC:&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="stringliteral">&quot;ObjC&quot;</emphasis>;
03529 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXIdxEntityLang_CXX:&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="stringliteral">&quot;C++&quot;</emphasis>;
03530 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXIdxEntityLang_Swift:&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="stringliteral">&quot;Swift&quot;</emphasis>;
03531 &#32;&#32;}
03532 &#32;&#32;assert(0&#32;&amp;&amp;&#32;<emphasis role="stringliteral">&quot;Garbage&#32;language&#32;kind&quot;</emphasis>);
03533 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
03534 }
03535 
03536 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;printEntityInfo(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*cb,
03537 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;CXClientData&#32;client_data,
03538 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;CXIdxEntityInfo&#32;*info)&#32;{
03539 &#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*name;
03540 &#32;&#32;<link linkend="_struct_index_data">IndexData</link>&#32;*index_data;
03541 &#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;i;
03542 &#32;&#32;index_data&#32;=&#32;(<link linkend="_struct_index_data">IndexData</link>&#32;*)client_data;
03543 &#32;&#32;printCheck(index_data);
03544 
03545 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!info)&#32;{
03546 &#32;&#32;&#32;&#32;printf(<emphasis role="stringliteral">&quot;%s:&#32;&lt;&lt;NULL&gt;&gt;&quot;</emphasis>,&#32;cb);
03547 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
03548 &#32;&#32;}
03549 
03550 &#32;&#32;name&#32;=&#32;info-&gt;name;
03551 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!name)
03552 &#32;&#32;&#32;&#32;name&#32;=&#32;<emphasis role="stringliteral">&quot;&lt;anon-tag&gt;&quot;</emphasis>;
03553 
03554 &#32;&#32;printf(<emphasis role="stringliteral">&quot;%s:&#32;kind:&#32;%s%s&quot;</emphasis>,&#32;cb,&#32;getEntityKindString(info-&gt;kind),
03555 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;getEntityTemplateKindString(info-&gt;templateKind));
03556 &#32;&#32;printf(<emphasis role="stringliteral">&quot;&#32;|&#32;name:&#32;%s&quot;</emphasis>,&#32;name);
03557 &#32;&#32;printf(<emphasis role="stringliteral">&quot;&#32;|&#32;USR:&#32;%s&quot;</emphasis>,&#32;info-&gt;USR);
03558 &#32;&#32;printf(<emphasis role="stringliteral">&quot;&#32;|&#32;lang:&#32;%s&quot;</emphasis>,&#32;getEntityLanguageString(info-&gt;lang));
03559 
03560 &#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(i&#32;=&#32;0;&#32;i&#32;!=&#32;info-&gt;numAttributes;&#32;++i)&#32;{
03561 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;CXIdxAttrInfo&#32;*Attr&#32;=&#32;info-&gt;attributes[i];
03562 &#32;&#32;&#32;&#32;printf(<emphasis role="stringliteral">&quot;&#32;&#32;&#32;&#32;&#32;&lt;attribute&gt;:&#32;&quot;</emphasis>);
03563 &#32;&#32;&#32;&#32;PrintCursor(Attr-&gt;cursor,&#32;NULL);
03564 &#32;&#32;}
03565 }
03566 
03567 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;printBaseClassInfo(CXClientData&#32;client_data,
03568 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;CXIdxBaseClassInfo&#32;*info)&#32;{
03569 &#32;&#32;printEntityInfo(<emphasis role="stringliteral">&quot;&#32;&#32;&#32;&#32;&#32;&lt;base&gt;&quot;</emphasis>,&#32;client_data,&#32;info-&gt;base);
03570 &#32;&#32;printf(<emphasis role="stringliteral">&quot;&#32;|&#32;cursor:&#32;&quot;</emphasis>);
03571 &#32;&#32;PrintCursor(info-&gt;cursor,&#32;NULL);
03572 &#32;&#32;printf(<emphasis role="stringliteral">&quot;&#32;|&#32;loc:&#32;&quot;</emphasis>);
03573 &#32;&#32;printCXIndexLoc(info-&gt;loc,&#32;client_data);
03574 }
03575 
03576 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;printProtocolList(<emphasis role="keyword">const</emphasis>&#32;CXIdxObjCProtocolRefListInfo&#32;*ProtoInfo,
03577 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;CXClientData&#32;client_data)&#32;{
03578 &#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;i;
03579 &#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(i&#32;=&#32;0;&#32;i&#32;&lt;&#32;ProtoInfo-&gt;numProtocols;&#32;++i)&#32;{
03580 &#32;&#32;&#32;&#32;printEntityInfo(<emphasis role="stringliteral">&quot;&#32;&#32;&#32;&#32;&#32;&lt;protocol&gt;&quot;</emphasis>,&#32;client_data,
03581 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ProtoInfo-&gt;protocols[i]-&gt;protocol);
03582 &#32;&#32;&#32;&#32;printf(<emphasis role="stringliteral">&quot;&#32;|&#32;cursor:&#32;&quot;</emphasis>);
03583 &#32;&#32;&#32;&#32;PrintCursor(ProtoInfo-&gt;protocols[i]-&gt;cursor,&#32;NULL);
03584 &#32;&#32;&#32;&#32;printf(<emphasis role="stringliteral">&quot;&#32;|&#32;loc:&#32;&quot;</emphasis>);
03585 &#32;&#32;&#32;&#32;printCXIndexLoc(ProtoInfo-&gt;protocols[i]-&gt;loc,&#32;client_data);
03586 &#32;&#32;&#32;&#32;printf(<emphasis role="stringliteral">&quot;\n&quot;</emphasis>);
03587 &#32;&#32;}
03588 }
03589 
03590 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;printSymbolRole(CXSymbolRole&#32;role)&#32;{
03591 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(role&#32;&amp;&#32;CXSymbolRole_Declaration)
03592 &#32;&#32;&#32;&#32;printf(<emphasis role="stringliteral">&quot;&#32;decl&quot;</emphasis>);
03593 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(role&#32;&amp;&#32;CXSymbolRole_Definition)
03594 &#32;&#32;&#32;&#32;printf(<emphasis role="stringliteral">&quot;&#32;def&quot;</emphasis>);
03595 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(role&#32;&amp;&#32;CXSymbolRole_Reference)
03596 &#32;&#32;&#32;&#32;printf(<emphasis role="stringliteral">&quot;&#32;ref&quot;</emphasis>);
03597 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(role&#32;&amp;&#32;CXSymbolRole_Read)
03598 &#32;&#32;&#32;&#32;printf(<emphasis role="stringliteral">&quot;&#32;read&quot;</emphasis>);
03599 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(role&#32;&amp;&#32;CXSymbolRole_Write)
03600 &#32;&#32;&#32;&#32;printf(<emphasis role="stringliteral">&quot;&#32;write&quot;</emphasis>);
03601 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(role&#32;&amp;&#32;CXSymbolRole_Call)
03602 &#32;&#32;&#32;&#32;printf(<emphasis role="stringliteral">&quot;&#32;call&quot;</emphasis>);
03603 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(role&#32;&amp;&#32;CXSymbolRole_Dynamic)
03604 &#32;&#32;&#32;&#32;printf(<emphasis role="stringliteral">&quot;&#32;dyn&quot;</emphasis>);
03605 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(role&#32;&amp;&#32;CXSymbolRole_AddressOf)
03606 &#32;&#32;&#32;&#32;printf(<emphasis role="stringliteral">&quot;&#32;addr&quot;</emphasis>);
03607 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(role&#32;&amp;&#32;CXSymbolRole_Implicit)
03608 &#32;&#32;&#32;&#32;printf(<emphasis role="stringliteral">&quot;&#32;implicit&quot;</emphasis>);
03609 }
03610 
03611 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;index_diagnostic(CXClientData&#32;client_data,
03612 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;CXDiagnosticSet&#32;diagSet,&#32;<emphasis role="keywordtype">void</emphasis>&#32;*reserved)&#32;{
03613 &#32;&#32;CXString&#32;str;
03614 &#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*cstr;
03615 &#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;numDiags,&#32;i;
03616 &#32;&#32;CXDiagnostic&#32;diag;
03617 &#32;&#32;<link linkend="_struct_index_data">IndexData</link>&#32;*index_data;
03618 &#32;&#32;index_data&#32;=&#32;(<link linkend="_struct_index_data">IndexData</link>&#32;*)client_data;
03619 &#32;&#32;printCheck(index_data);
03620 
03621 &#32;&#32;numDiags&#32;=&#32;<link linkend="__c_index_diagnostic_8cpp_1a9861abba19ec80dae4db68998828261d">clang_getNumDiagnosticsInSet</link>(diagSet);
03622 &#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(i&#32;=&#32;0;&#32;i&#32;!=&#32;numDiags;&#32;++i)&#32;{
03623 &#32;&#32;&#32;&#32;diag&#32;=&#32;<link linkend="__c_index_diagnostic_8cpp_1acc45fefa1e17eade2d10177d4ff77851">clang_getDiagnosticInSet</link>(diagSet,&#32;i);
03624 &#32;&#32;&#32;&#32;str&#32;=&#32;<link linkend="__c_index_diagnostic_8cpp_1a3ed169ee4a472764c11724cc7768e6eb">clang_formatDiagnostic</link>(diag,&#32;<link linkend="__c_index_diagnostic_8cpp_1a1db1e7c1136fd6d171f47d0b7d4f8bd9">clang_defaultDiagnosticDisplayOptions</link>());
03625 &#32;&#32;&#32;&#32;cstr&#32;=&#32;<link linkend="__c_x_string_8cpp_1acd478c1b1785e17c0fe377bd70a2195f">clang_getCString</link>(str);
03626 &#32;&#32;&#32;&#32;printf(<emphasis role="stringliteral">&quot;[diagnostic]:&#32;%s\n&quot;</emphasis>,&#32;cstr);
03627 &#32;&#32;&#32;&#32;<link linkend="__c_x_string_8cpp_1a46c85f1255580ed186aa6f7380a06883">clang_disposeString</link>(str);&#32;&#32;
03628 &#32;&#32;
03629 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(getenv(<emphasis role="stringliteral">&quot;CINDEXTEST_FAILONERROR&quot;</emphasis>)&#32;&amp;&amp;
03630 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__c_index_diagnostic_8cpp_1a4acc9ff12cb403c96d56e87359dfc7c7">clang_getDiagnosticSeverity</link>(diag)&#32;&gt;=&#32;CXDiagnostic_Error)&#32;{
03631 &#32;&#32;&#32;&#32;&#32;&#32;index_data-&gt;<link linkend="_struct_index_data_1ac94496c8357949aafd7c663b71729b2c">fail_for_error</link>&#32;=&#32;1;
03632 &#32;&#32;&#32;&#32;}
03633 &#32;&#32;}
03634 }
03635 
03636 <emphasis role="keyword">static</emphasis>&#32;CXIdxClientFile&#32;index_enteredMainFile(CXClientData&#32;client_data,
03637 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;CXFile&#32;file,&#32;<emphasis role="keywordtype">void</emphasis>&#32;*reserved)&#32;{
03638 &#32;&#32;<link linkend="_struct_index_data">IndexData</link>&#32;*index_data;
03639 
03640 &#32;&#32;index_data&#32;=&#32;(<link linkend="_struct_index_data">IndexData</link>&#32;*)client_data;
03641 &#32;&#32;printCheck(index_data);
03642 
03643 &#32;&#32;index_data-&gt;<link linkend="_struct_index_data_1ab3b03a4de5cae6c152e3150fac8b6db4">main_filename</link>&#32;=&#32;<link linkend="__c_index_8cpp_1a263c34f5782353186990b2c990d648fc">clang_getFileName</link>(file);
03644 
03645 &#32;&#32;printf(<emphasis role="stringliteral">&quot;[enteredMainFile]:&#32;&quot;</emphasis>);
03646 &#32;&#32;printCXIndexFile((CXIdxClientFile)file);
03647 &#32;&#32;printf(<emphasis role="stringliteral">&quot;\n&quot;</emphasis>);
03648 
03649 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(CXIdxClientFile)file;
03650 }
03651 
03652 <emphasis role="keyword">static</emphasis>&#32;CXIdxClientFile&#32;index_ppIncludedFile(CXClientData&#32;client_data,
03653 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;CXIdxIncludedFileInfo&#32;*info)&#32;{
03654 &#32;&#32;<link linkend="_struct_index_data">IndexData</link>&#32;*index_data;
03655 &#32;&#32;CXModule&#32;Mod;
03656 &#32;&#32;index_data&#32;=&#32;(<link linkend="_struct_index_data">IndexData</link>&#32;*)client_data;
03657 &#32;&#32;printCheck(index_data);
03658 
03659 &#32;&#32;printf(<emphasis role="stringliteral">&quot;[ppIncludedFile]:&#32;&quot;</emphasis>);
03660 &#32;&#32;printCXIndexFile((CXIdxClientFile)info-&gt;file);
03661 &#32;&#32;printf(<emphasis role="stringliteral">&quot;&#32;|&#32;name:&#32;\&quot;%s\&quot;&quot;</emphasis>,&#32;info-&gt;filename);
03662 &#32;&#32;printf(<emphasis role="stringliteral">&quot;&#32;|&#32;hash&#32;loc:&#32;&quot;</emphasis>);
03663 &#32;&#32;printCXIndexLoc(info-&gt;hashLoc,&#32;client_data);
03664 &#32;&#32;printf(<emphasis role="stringliteral">&quot;&#32;|&#32;isImport:&#32;%d&#32;|&#32;isAngled:&#32;%d&#32;|&#32;isModule:&#32;%d&quot;</emphasis>,
03665 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;info-&gt;isImport,&#32;info-&gt;isAngled,&#32;info-&gt;isModuleImport);
03666 &#32;&#32;
03667 &#32;&#32;Mod&#32;=&#32;<link linkend="__c_index_8cpp_1a4a0e32160409a25df3774943953152ba">clang_getModuleForFile</link>(index_data-&gt;<link linkend="_struct_index_data_1a97a35007cd25ed2ce312ecad74c7f2d2">TU</link>,&#32;(CXFile)info-&gt;file);
03668 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(Mod)&#32;{
03669 &#32;&#32;&#32;&#32;CXString&#32;str&#32;=&#32;<link linkend="__c_index_8cpp_1a266036edc3230b98a9c96c33eedae46a">clang_Module_getFullName</link>(Mod);
03670 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*cstr&#32;=&#32;<link linkend="__c_x_string_8cpp_1acd478c1b1785e17c0fe377bd70a2195f">clang_getCString</link>(str);
03671 &#32;&#32;&#32;&#32;printf(<emphasis role="stringliteral">&quot;&#32;|&#32;module:&#32;%s&quot;</emphasis>,&#32;cstr);
03672 &#32;&#32;&#32;&#32;<link linkend="__c_x_string_8cpp_1a46c85f1255580ed186aa6f7380a06883">clang_disposeString</link>(str);
03673 &#32;&#32;}
03674 
03675 &#32;&#32;printf(<emphasis role="stringliteral">&quot;\n&quot;</emphasis>);
03676 
03677 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(CXIdxClientFile)info-&gt;file;
03678 }
03679 
03680 <emphasis role="keyword">static</emphasis>&#32;CXIdxClientFile&#32;index_importedASTFile(CXClientData&#32;client_data,
03681 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;CXIdxImportedASTFileInfo&#32;*info)&#32;{
03682 &#32;&#32;<link linkend="_struct_index_data">IndexData</link>&#32;*index_data;
03683 &#32;&#32;index_data&#32;=&#32;(<link linkend="_struct_index_data">IndexData</link>&#32;*)client_data;
03684 &#32;&#32;printCheck(index_data);
03685 
03686 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(index_data-&gt;<link linkend="_struct_index_data_1af0b783cec8aa895043606012fcf99c09">importedASTs</link>)&#32;{
03687 &#32;&#32;&#32;&#32;CXString&#32;filename&#32;=&#32;<link linkend="__c_index_8cpp_1a263c34f5782353186990b2c990d648fc">clang_getFileName</link>(info-&gt;file);
03688 &#32;&#32;&#32;&#32;importedASTS_insert(index_data-&gt;<link linkend="_struct_index_data_1af0b783cec8aa895043606012fcf99c09">importedASTs</link>,&#32;<link linkend="__c_x_string_8cpp_1acd478c1b1785e17c0fe377bd70a2195f">clang_getCString</link>(filename));
03689 &#32;&#32;&#32;&#32;<link linkend="__c_x_string_8cpp_1a46c85f1255580ed186aa6f7380a06883">clang_disposeString</link>(filename);
03690 &#32;&#32;}
03691 &#32;&#32;
03692 &#32;&#32;printf(<emphasis role="stringliteral">&quot;[importedASTFile]:&#32;&quot;</emphasis>);
03693 &#32;&#32;printCXIndexFile((CXIdxClientFile)info-&gt;file);
03694 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(info-&gt;module)&#32;{
03695 &#32;&#32;&#32;&#32;CXString&#32;name&#32;=&#32;<link linkend="__c_index_8cpp_1a266036edc3230b98a9c96c33eedae46a">clang_Module_getFullName</link>(info-&gt;module);
03696 &#32;&#32;&#32;&#32;printf(<emphasis role="stringliteral">&quot;&#32;|&#32;loc:&#32;&quot;</emphasis>);
03697 &#32;&#32;&#32;&#32;printCXIndexLoc(info-&gt;loc,&#32;client_data);
03698 &#32;&#32;&#32;&#32;printf(<emphasis role="stringliteral">&quot;&#32;|&#32;name:&#32;\&quot;%s\&quot;&quot;</emphasis>,&#32;<link linkend="__c_x_string_8cpp_1acd478c1b1785e17c0fe377bd70a2195f">clang_getCString</link>(name));
03699 &#32;&#32;&#32;&#32;printf(<emphasis role="stringliteral">&quot;&#32;|&#32;isImplicit:&#32;%d\n&quot;</emphasis>,&#32;info-&gt;isImplicit);
03700 &#32;&#32;&#32;&#32;<link linkend="__c_x_string_8cpp_1a46c85f1255580ed186aa6f7380a06883">clang_disposeString</link>(name);
03701 &#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
03702 &#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;PCH&#32;file,&#32;the&#32;rest&#32;are&#32;not&#32;relevant.&#32;*/</emphasis>
03703 &#32;&#32;&#32;&#32;printf(<emphasis role="stringliteral">&quot;\n&quot;</emphasis>);
03704 &#32;&#32;}
03705 
03706 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(CXIdxClientFile)info-&gt;file;
03707 }
03708 
03709 <emphasis role="keyword">static</emphasis>&#32;CXIdxClientContainer
03710 index_startedTranslationUnit(CXClientData&#32;client_data,&#32;<emphasis role="keywordtype">void</emphasis>&#32;*reserved)&#32;{
03711 &#32;&#32;<link linkend="_struct_index_data">IndexData</link>&#32;*index_data;
03712 &#32;&#32;index_data&#32;=&#32;(<link linkend="_struct_index_data">IndexData</link>&#32;*)client_data;
03713 &#32;&#32;printCheck(index_data);
03714 
03715 &#32;&#32;printf(<emphasis role="stringliteral">&quot;[startedTranslationUnit]\n&quot;</emphasis>);
03716 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(CXIdxClientContainer)<emphasis role="stringliteral">&quot;TU&quot;</emphasis>;
03717 }
03718 
03719 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;index_indexDeclaration(CXClientData&#32;client_data,
03720 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;CXIdxDeclInfo&#32;*info)&#32;{
03721 &#32;&#32;<link linkend="_struct_index_data">IndexData</link>&#32;*index_data;
03722 &#32;&#32;<emphasis role="keyword">const</emphasis>&#32;CXIdxObjCCategoryDeclInfo&#32;*CatInfo;
03723 &#32;&#32;<emphasis role="keyword">const</emphasis>&#32;CXIdxObjCInterfaceDeclInfo&#32;*InterInfo;
03724 &#32;&#32;<emphasis role="keyword">const</emphasis>&#32;CXIdxObjCProtocolRefListInfo&#32;*ProtoInfo;
03725 &#32;&#32;<emphasis role="keyword">const</emphasis>&#32;CXIdxObjCPropertyDeclInfo&#32;*PropInfo;
03726 &#32;&#32;<emphasis role="keyword">const</emphasis>&#32;CXIdxCXXClassDeclInfo&#32;*CXXClassInfo;
03727 &#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;i;
03728 &#32;&#32;index_data&#32;=&#32;(<link linkend="_struct_index_data">IndexData</link>&#32;*)client_data;
03729 
03730 &#32;&#32;printEntityInfo(<emphasis role="stringliteral">&quot;[indexDeclaration]&quot;</emphasis>,&#32;client_data,&#32;info-&gt;entityInfo);
03731 &#32;&#32;printf(<emphasis role="stringliteral">&quot;&#32;|&#32;cursor:&#32;&quot;</emphasis>);
03732 &#32;&#32;PrintCursor(info-&gt;cursor,&#32;NULL);
03733 &#32;&#32;printf(<emphasis role="stringliteral">&quot;&#32;|&#32;loc:&#32;&quot;</emphasis>);
03734 &#32;&#32;printCXIndexLoc(info-&gt;loc,&#32;client_data);
03735 &#32;&#32;printf(<emphasis role="stringliteral">&quot;&#32;|&#32;semantic-container:&#32;&quot;</emphasis>);
03736 &#32;&#32;printCXIndexContainer(info-&gt;semanticContainer);
03737 &#32;&#32;printf(<emphasis role="stringliteral">&quot;&#32;|&#32;lexical-container:&#32;&quot;</emphasis>);
03738 &#32;&#32;printCXIndexContainer(info-&gt;lexicalContainer);
03739 &#32;&#32;printf(<emphasis role="stringliteral">&quot;&#32;|&#32;isRedecl:&#32;%d&quot;</emphasis>,&#32;info-&gt;isRedeclaration);
03740 &#32;&#32;printf(<emphasis role="stringliteral">&quot;&#32;|&#32;isDef:&#32;%d&quot;</emphasis>,&#32;info-&gt;isDefinition);
03741 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(info-&gt;flags&#32;&amp;&#32;CXIdxDeclFlag_Skipped)&#32;{
03742 &#32;&#32;&#32;&#32;assert(!info-&gt;isContainer);
03743 &#32;&#32;&#32;&#32;printf(<emphasis role="stringliteral">&quot;&#32;|&#32;isContainer:&#32;skipped&quot;</emphasis>);
03744 &#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
03745 &#32;&#32;&#32;&#32;printf(<emphasis role="stringliteral">&quot;&#32;|&#32;isContainer:&#32;%d&quot;</emphasis>,&#32;info-&gt;isContainer);
03746 &#32;&#32;}
03747 &#32;&#32;printf(<emphasis role="stringliteral">&quot;&#32;|&#32;isImplicit:&#32;%d\n&quot;</emphasis>,&#32;info-&gt;isImplicit);
03748 
03749 &#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(i&#32;=&#32;0;&#32;i&#32;!=&#32;info-&gt;numAttributes;&#32;++i)&#32;{
03750 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;CXIdxAttrInfo&#32;*Attr&#32;=&#32;info-&gt;attributes[i];
03751 &#32;&#32;&#32;&#32;printf(<emphasis role="stringliteral">&quot;&#32;&#32;&#32;&#32;&#32;&lt;attribute&gt;:&#32;&quot;</emphasis>);
03752 &#32;&#32;&#32;&#32;PrintCursor(Attr-&gt;cursor,&#32;NULL);
03753 &#32;&#32;&#32;&#32;printf(<emphasis role="stringliteral">&quot;\n&quot;</emphasis>);
03754 &#32;&#32;}
03755 
03756 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="__indexing_8cpp_1aa218aee51ef76115268b7e9bc5ea1589">clang_index_isEntityObjCContainerKind</link>(info-&gt;entityInfo-&gt;kind))&#32;{
03757 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*kindName&#32;=&#32;0;
03758 &#32;&#32;&#32;&#32;CXIdxObjCContainerKind&#32;K&#32;=&#32;<link linkend="__indexing_8cpp_1a5009ec9a006f9b9c275e8501147be820">clang_index_getObjCContainerDeclInfo</link>(info)-&gt;kind;
03759 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(K)&#32;{
03760 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXIdxObjCContainer_ForwardRef:
03761 &#32;&#32;&#32;&#32;&#32;&#32;kindName&#32;=&#32;<emphasis role="stringliteral">&quot;forward-ref&quot;</emphasis>;&#32;<emphasis role="keywordflow">break</emphasis>;
03762 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXIdxObjCContainer_Interface:
03763 &#32;&#32;&#32;&#32;&#32;&#32;kindName&#32;=&#32;<emphasis role="stringliteral">&quot;interface&quot;</emphasis>;&#32;<emphasis role="keywordflow">break</emphasis>;
03764 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXIdxObjCContainer_Implementation:
03765 &#32;&#32;&#32;&#32;&#32;&#32;kindName&#32;=&#32;<emphasis role="stringliteral">&quot;implementation&quot;</emphasis>;&#32;<emphasis role="keywordflow">break</emphasis>;
03766 &#32;&#32;&#32;&#32;}
03767 &#32;&#32;&#32;&#32;printCheck(index_data);
03768 &#32;&#32;&#32;&#32;printf(<emphasis role="stringliteral">&quot;&#32;&#32;&#32;&#32;&#32;&lt;ObjCContainerInfo&gt;:&#32;kind:&#32;%s\n&quot;</emphasis>,&#32;kindName);
03769 &#32;&#32;}
03770 
03771 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;((CatInfo&#32;=&#32;<link linkend="__indexing_8cpp_1a4f42a70f90d010e75213a54e4efb71e4">clang_index_getObjCCategoryDeclInfo</link>(info)))&#32;{
03772 &#32;&#32;&#32;&#32;printEntityInfo(<emphasis role="stringliteral">&quot;&#32;&#32;&#32;&#32;&#32;&lt;ObjCCategoryInfo&gt;:&#32;class&quot;</emphasis>,&#32;client_data,
03773 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;CatInfo-&gt;objcClass);
03774 &#32;&#32;&#32;&#32;printf(<emphasis role="stringliteral">&quot;&#32;|&#32;cursor:&#32;&quot;</emphasis>);
03775 &#32;&#32;&#32;&#32;PrintCursor(CatInfo-&gt;classCursor,&#32;NULL);
03776 &#32;&#32;&#32;&#32;printf(<emphasis role="stringliteral">&quot;&#32;|&#32;loc:&#32;&quot;</emphasis>);
03777 &#32;&#32;&#32;&#32;printCXIndexLoc(CatInfo-&gt;classLoc,&#32;client_data);
03778 &#32;&#32;&#32;&#32;printf(<emphasis role="stringliteral">&quot;\n&quot;</emphasis>);
03779 &#32;&#32;}
03780 
03781 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;((InterInfo&#32;=&#32;<link linkend="__indexing_8cpp_1a4fd62151af19e4c04d4885c1de582a5a">clang_index_getObjCInterfaceDeclInfo</link>(info)))&#32;{
03782 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(InterInfo-&gt;superInfo)&#32;{
03783 &#32;&#32;&#32;&#32;&#32;&#32;printBaseClassInfo(client_data,&#32;InterInfo-&gt;superInfo);
03784 &#32;&#32;&#32;&#32;&#32;&#32;printf(<emphasis role="stringliteral">&quot;\n&quot;</emphasis>);
03785 &#32;&#32;&#32;&#32;}
03786 &#32;&#32;}
03787 
03788 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;((ProtoInfo&#32;=&#32;<link linkend="__indexing_8cpp_1a84557aa0abab4f20cc678ebb033fc35d">clang_index_getObjCProtocolRefListInfo</link>(info)))&#32;{
03789 &#32;&#32;&#32;&#32;printProtocolList(ProtoInfo,&#32;client_data);
03790 &#32;&#32;}
03791 
03792 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;((PropInfo&#32;=&#32;<link linkend="__indexing_8cpp_1acb9210ebcc65a6c1b4c560485b27c9b1">clang_index_getObjCPropertyDeclInfo</link>(info)))&#32;{
03793 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(PropInfo-&gt;getter)&#32;{
03794 &#32;&#32;&#32;&#32;&#32;&#32;printEntityInfo(<emphasis role="stringliteral">&quot;&#32;&#32;&#32;&#32;&#32;&lt;getter&gt;&quot;</emphasis>,&#32;client_data,&#32;PropInfo-&gt;getter);
03795 &#32;&#32;&#32;&#32;&#32;&#32;printf(<emphasis role="stringliteral">&quot;\n&quot;</emphasis>);
03796 &#32;&#32;&#32;&#32;}
03797 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(PropInfo-&gt;setter)&#32;{
03798 &#32;&#32;&#32;&#32;&#32;&#32;printEntityInfo(<emphasis role="stringliteral">&quot;&#32;&#32;&#32;&#32;&#32;&lt;setter&gt;&quot;</emphasis>,&#32;client_data,&#32;PropInfo-&gt;setter);
03799 &#32;&#32;&#32;&#32;&#32;&#32;printf(<emphasis role="stringliteral">&quot;\n&quot;</emphasis>);
03800 &#32;&#32;&#32;&#32;}
03801 &#32;&#32;}
03802 
03803 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;((CXXClassInfo&#32;=&#32;<link linkend="__indexing_8cpp_1a99ab66a0a0f83e87a0e37af7eeb46025">clang_index_getCXXClassDeclInfo</link>(info)))&#32;{
03804 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(i&#32;=&#32;0;&#32;i&#32;!=&#32;CXXClassInfo-&gt;numBases;&#32;++i)&#32;{
03805 &#32;&#32;&#32;&#32;&#32;&#32;printBaseClassInfo(client_data,&#32;CXXClassInfo-&gt;bases[i]);
03806 &#32;&#32;&#32;&#32;&#32;&#32;printf(<emphasis role="stringliteral">&quot;\n&quot;</emphasis>);
03807 &#32;&#32;&#32;&#32;}
03808 &#32;&#32;}
03809 
03810 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(info-&gt;declAsContainer)
03811 &#32;&#32;&#32;&#32;<link linkend="__indexing_8cpp_1aa2eac57f19b74e513bad40df9a9d4a98">clang_index_setClientContainer</link>(
03812 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;info-&gt;declAsContainer,
03813 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;makeClientContainer(client_data,&#32;info-&gt;entityInfo,&#32;info-&gt;loc));
03814 }
03815 
03816 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;index_indexEntityReference(CXClientData&#32;client_data,
03817 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;CXIdxEntityRefInfo&#32;*info)&#32;{
03818 &#32;&#32;printEntityInfo(<emphasis role="stringliteral">&quot;[indexEntityReference]&quot;</emphasis>,&#32;client_data,
03819 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;info-&gt;referencedEntity);
03820 &#32;&#32;printf(<emphasis role="stringliteral">&quot;&#32;|&#32;cursor:&#32;&quot;</emphasis>);
03821 &#32;&#32;PrintCursor(info-&gt;cursor,&#32;NULL);
03822 &#32;&#32;printf(<emphasis role="stringliteral">&quot;&#32;|&#32;loc:&#32;&quot;</emphasis>);
03823 &#32;&#32;printCXIndexLoc(info-&gt;loc,&#32;client_data);
03824 &#32;&#32;printEntityInfo(<emphasis role="stringliteral">&quot;&#32;|&#32;&lt;parent&gt;:&quot;</emphasis>,&#32;client_data,&#32;info-&gt;parentEntity);
03825 &#32;&#32;printf(<emphasis role="stringliteral">&quot;&#32;|&#32;container:&#32;&quot;</emphasis>);
03826 &#32;&#32;printCXIndexContainer(info-&gt;container);
03827 &#32;&#32;printf(<emphasis role="stringliteral">&quot;&#32;|&#32;refkind:&#32;&quot;</emphasis>);
03828 &#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(info-&gt;kind)&#32;{
03829 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXIdxEntityRef_Direct:&#32;printf(<emphasis role="stringliteral">&quot;direct&quot;</emphasis>);&#32;<emphasis role="keywordflow">break</emphasis>;
03830 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXIdxEntityRef_Implicit:&#32;printf(<emphasis role="stringliteral">&quot;implicit&quot;</emphasis>);&#32;<emphasis role="keywordflow">break</emphasis>;
03831 &#32;&#32;}
03832 &#32;&#32;printf(<emphasis role="stringliteral">&quot;&#32;|&#32;role:&quot;</emphasis>);
03833 &#32;&#32;printSymbolRole(info-&gt;role);
03834 &#32;&#32;printf(<emphasis role="stringliteral">&quot;\n&quot;</emphasis>);
03835 }
03836 
03837 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;index_abortQuery(CXClientData&#32;client_data,&#32;<emphasis role="keywordtype">void</emphasis>&#32;*reserved)&#32;{
03838 &#32;&#32;<link linkend="_struct_index_data">IndexData</link>&#32;*index_data;
03839 &#32;&#32;index_data&#32;=&#32;(<link linkend="_struct_index_data">IndexData</link>&#32;*)client_data;
03840 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;index_data-&gt;<link linkend="_struct_index_data_1a504c19d2dbd2f11f2e0b1117a2dd8f34">abort</link>;
03841 }
03842 
03843 <emphasis role="keyword">static</emphasis>&#32;IndexerCallbacks&#32;IndexCB&#32;=&#32;{
03844 &#32;&#32;index_abortQuery,
03845 &#32;&#32;index_diagnostic,
03846 &#32;&#32;index_enteredMainFile,
03847 &#32;&#32;index_ppIncludedFile,
03848 &#32;&#32;index_importedASTFile,
03849 &#32;&#32;index_startedTranslationUnit,
03850 &#32;&#32;index_indexDeclaration,
03851 &#32;&#32;index_indexEntityReference
03852 };
03853 
03854 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;getIndexOptions(<emphasis role="keywordtype">void</emphasis>)&#32;{
03855 &#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;index_opts;
03856 &#32;&#32;index_opts&#32;=&#32;0;
03857 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(getenv(<emphasis role="stringliteral">&quot;CINDEXTEST_SUPPRESSREFS&quot;</emphasis>))
03858 &#32;&#32;&#32;&#32;index_opts&#32;|=&#32;CXIndexOpt_SuppressRedundantRefs;
03859 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(getenv(<emphasis role="stringliteral">&quot;CINDEXTEST_INDEXLOCALSYMBOLS&quot;</emphasis>))
03860 &#32;&#32;&#32;&#32;index_opts&#32;|=&#32;CXIndexOpt_IndexFunctionLocalSymbols;
03861 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!getenv(<emphasis role="stringliteral">&quot;CINDEXTEST_DISABLE_SKIPPARSEDBODIES&quot;</emphasis>))
03862 &#32;&#32;&#32;&#32;index_opts&#32;|=&#32;CXIndexOpt_SkipParsedBodiesInSession;
03863 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(getenv(<emphasis role="stringliteral">&quot;CINDEXTEST_INDEXIMPLICITTEMPLATEINSTANTIATIONS&quot;</emphasis>))
03864 &#32;&#32;&#32;&#32;index_opts&#32;|=&#32;CXIndexOpt_IndexImplicitTemplateInstantiations;
03865 
03866 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;index_opts;
03867 }
03868 
03869 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;index_compile_args(<emphasis role="keywordtype">int</emphasis>&#32;num_args,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;**args,
03870 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;CXIndexAction&#32;idxAction,
03871 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_imported_a_s_t_files_data">ImportedASTFilesData</link>&#32;*importedASTs,
03872 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*check_prefix)&#32;{
03873 &#32;&#32;<link linkend="_struct_index_data">IndexData</link>&#32;index_data;
03874 &#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;index_opts;
03875 &#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;result;
03876 
03877 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(num_args&#32;==&#32;0)&#32;{
03878 &#32;&#32;&#32;&#32;fprintf(stderr,&#32;<emphasis role="stringliteral">&quot;no&#32;compiler&#32;arguments\n&quot;</emphasis>);
03879 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;-1;
03880 &#32;&#32;}
03881 
03882 &#32;&#32;index_data.<link linkend="_struct_index_data_1a874013156845e11ecbe59521b4b7edb6">check_prefix</link>&#32;=&#32;check_prefix;
03883 &#32;&#32;index_data.<link linkend="_struct_index_data_1a36960111218278065698d9a07cadaa94">first_check_printed</link>&#32;=&#32;0;
03884 &#32;&#32;index_data.<link linkend="_struct_index_data_1ac94496c8357949aafd7c663b71729b2c">fail_for_error</link>&#32;=&#32;0;
03885 &#32;&#32;index_data.<link linkend="_struct_index_data_1a504c19d2dbd2f11f2e0b1117a2dd8f34">abort</link>&#32;=&#32;0;
03886 &#32;&#32;index_data.<link linkend="_struct_index_data_1ab3b03a4de5cae6c152e3150fac8b6db4">main_filename</link>&#32;=&#32;createCXString(<emphasis role="stringliteral">&quot;&quot;</emphasis>);
03887 &#32;&#32;index_data.<link linkend="_struct_index_data_1af0b783cec8aa895043606012fcf99c09">importedASTs</link>&#32;=&#32;importedASTs;
03888 &#32;&#32;index_data.<link linkend="_struct_index_data_1a9ef372150a7b8819314095e9185dc2d5">strings</link>&#32;=&#32;NULL;
03889 &#32;&#32;index_data.<link linkend="_struct_index_data_1a97a35007cd25ed2ce312ecad74c7f2d2">TU</link>&#32;=&#32;NULL;
03890 
03891 &#32;&#32;index_opts&#32;=&#32;getIndexOptions();
03892 &#32;&#32;result&#32;=&#32;<link linkend="__indexing_8cpp_1aa28c1e7030b5ca7f87e589e2e11450cc">clang_indexSourceFile</link>(idxAction,&#32;&amp;index_data,
03893 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;IndexCB,<emphasis role="keyword">sizeof</emphasis>(IndexCB),&#32;index_opts,
03894 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;0,&#32;args,&#32;num_args,&#32;0,&#32;0,&#32;0,
03895 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;getDefaultParsingOptions());
03896 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(result&#32;!=&#32;CXError_Success)
03897 &#32;&#32;&#32;&#32;describeLibclangFailure(result);
03898 
03899 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(index_data.<link linkend="_struct_index_data_1ac94496c8357949aafd7c663b71729b2c">fail_for_error</link>)
03900 &#32;&#32;&#32;&#32;result&#32;=&#32;-1;
03901 
03902 &#32;&#32;<link linkend="__c_x_string_8cpp_1a46c85f1255580ed186aa6f7380a06883">clang_disposeString</link>(index_data.<link linkend="_struct_index_data_1ab3b03a4de5cae6c152e3150fac8b6db4">main_filename</link>);
03903 &#32;&#32;free_client_data(&amp;index_data);
03904 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;result;
03905 }
03906 
03907 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;index_ast_file(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*ast_file,
03908 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;CXIndex&#32;Idx,
03909 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;CXIndexAction&#32;idxAction,
03910 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_imported_a_s_t_files_data">ImportedASTFilesData</link>&#32;*importedASTs,
03911 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*check_prefix)&#32;{
03912 &#32;&#32;CXTranslationUnit&#32;TU;
03913 &#32;&#32;<link linkend="_struct_index_data">IndexData</link>&#32;index_data;
03914 &#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;index_opts;
03915 &#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;result;
03916 
03917 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!CreateTranslationUnit(Idx,&#32;ast_file,&#32;&amp;TU))
03918 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;-1;
03919 
03920 &#32;&#32;index_data.<link linkend="_struct_index_data_1a874013156845e11ecbe59521b4b7edb6">check_prefix</link>&#32;=&#32;check_prefix;
03921 &#32;&#32;index_data.<link linkend="_struct_index_data_1a36960111218278065698d9a07cadaa94">first_check_printed</link>&#32;=&#32;0;
03922 &#32;&#32;index_data.<link linkend="_struct_index_data_1ac94496c8357949aafd7c663b71729b2c">fail_for_error</link>&#32;=&#32;0;
03923 &#32;&#32;index_data.<link linkend="_struct_index_data_1a504c19d2dbd2f11f2e0b1117a2dd8f34">abort</link>&#32;=&#32;0;
03924 &#32;&#32;index_data.<link linkend="_struct_index_data_1ab3b03a4de5cae6c152e3150fac8b6db4">main_filename</link>&#32;=&#32;createCXString(<emphasis role="stringliteral">&quot;&quot;</emphasis>);
03925 &#32;&#32;index_data.<link linkend="_struct_index_data_1af0b783cec8aa895043606012fcf99c09">importedASTs</link>&#32;=&#32;importedASTs;
03926 &#32;&#32;index_data.<link linkend="_struct_index_data_1a9ef372150a7b8819314095e9185dc2d5">strings</link>&#32;=&#32;NULL;
03927 &#32;&#32;index_data.<link linkend="_struct_index_data_1a97a35007cd25ed2ce312ecad74c7f2d2">TU</link>&#32;=&#32;TU;
03928 
03929 &#32;&#32;index_opts&#32;=&#32;getIndexOptions();
03930 &#32;&#32;result&#32;=&#32;<link linkend="__indexing_8cpp_1a92ce635fae76fa9778b17ac5121838cc">clang_indexTranslationUnit</link>(idxAction,&#32;&amp;index_data,
03931 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;IndexCB,<emphasis role="keyword">sizeof</emphasis>(IndexCB),
03932 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;index_opts,&#32;TU);
03933 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(index_data.<link linkend="_struct_index_data_1ac94496c8357949aafd7c663b71729b2c">fail_for_error</link>)
03934 &#32;&#32;&#32;&#32;result&#32;=&#32;-1;
03935 
03936 &#32;&#32;<link linkend="__c_index_8cpp_1a3af88c13004a1954abd6dc956faff3be">clang_disposeTranslationUnit</link>(TU);
03937 &#32;&#32;<link linkend="__c_x_string_8cpp_1a46c85f1255580ed186aa6f7380a06883">clang_disposeString</link>(index_data.<link linkend="_struct_index_data_1ab3b03a4de5cae6c152e3150fac8b6db4">main_filename</link>);
03938 &#32;&#32;free_client_data(&amp;index_data);
03939 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;result;
03940 }
03941 
03942 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;index_file(<emphasis role="keywordtype">int</emphasis>&#32;argc,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;**argv,&#32;<emphasis role="keywordtype">int</emphasis>&#32;full)&#32;{
03943 &#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*check_prefix;
03944 &#32;&#32;CXIndex&#32;Idx;
03945 &#32;&#32;CXIndexAction&#32;idxAction;
03946 &#32;&#32;<link linkend="_struct_imported_a_s_t_files_data">ImportedASTFilesData</link>&#32;*importedASTs;
03947 &#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;result;
03948 
03949 &#32;&#32;check_prefix&#32;=&#32;0;
03950 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(argc&#32;&gt;&#32;0)&#32;{
03951 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(strstr(argv[0],&#32;<emphasis role="stringliteral">&quot;-check-prefix=&quot;</emphasis>)&#32;==&#32;argv[0])&#32;{
03952 &#32;&#32;&#32;&#32;&#32;&#32;check_prefix&#32;=&#32;argv[0]&#32;+&#32;strlen(<emphasis role="stringliteral">&quot;-check-prefix=&quot;</emphasis>);
03953 &#32;&#32;&#32;&#32;&#32;&#32;++argv;
03954 &#32;&#32;&#32;&#32;&#32;&#32;--argc;
03955 &#32;&#32;&#32;&#32;}
03956 &#32;&#32;}
03957 
03958 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!(Idx&#32;=&#32;<link linkend="__c_index_8cpp_1a3420c8e7e10a7ff7906130b207cbb763">clang_createIndex</link>(<emphasis role="comment">/*&#32;excludeDeclsFromPCH&#32;*/</emphasis>&#32;1,
03959 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;displayDiagnostics=*/</emphasis>1)))&#32;{
03960 &#32;&#32;&#32;&#32;fprintf(stderr,&#32;<emphasis role="stringliteral">&quot;Could&#32;not&#32;create&#32;Index\n&quot;</emphasis>);
03961 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;1;
03962 &#32;&#32;}
03963 &#32;&#32;idxAction&#32;=&#32;<link linkend="__indexing_8cpp_1a8951fd3fa3c59e24ac8ae72118363e9a">clang_IndexAction_create</link>(Idx);
03964 &#32;&#32;importedASTs&#32;=&#32;0;
03965 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(full)
03966 &#32;&#32;&#32;&#32;importedASTs&#32;=&#32;importedASTs_create();
03967 
03968 &#32;&#32;result&#32;=&#32;index_compile_args(argc,&#32;argv,&#32;idxAction,&#32;importedASTs,&#32;check_prefix);
03969 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(result&#32;!=&#32;0)
03970 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">goto</emphasis>&#32;finished;
03971 
03972 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(full)&#32;{
03973 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;i;
03974 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(i&#32;=&#32;0;&#32;i&#32;&lt;&#32;importedASTs-&gt;<link linkend="_struct_imported_a_s_t_files_data_1a059be3358e7656b2d55177e40e2922d7">num_files</link>&#32;&amp;&amp;&#32;result&#32;==&#32;0;&#32;++i)&#32;{
03975 &#32;&#32;&#32;&#32;&#32;&#32;result&#32;=&#32;index_ast_file(importedASTs-&gt;<link linkend="_struct_imported_a_s_t_files_data_1ac87e88cb077dd1e127703a50aaa009a8">filenames</link>[i],&#32;Idx,&#32;idxAction,
03976 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;importedASTs,&#32;check_prefix);
03977 &#32;&#32;&#32;&#32;}
03978 &#32;&#32;}
03979 
03980 finished:
03981 &#32;&#32;importedASTs_dispose(importedASTs);
03982 &#32;&#32;<link linkend="__indexing_8cpp_1af00707f4579b5c8637e16ae9fb9d6fc4">clang_IndexAction_dispose</link>(idxAction);
03983 &#32;&#32;<link linkend="__c_index_8cpp_1aea91ddf5e996cba0de2f781cb17db1d5">clang_disposeIndex</link>(Idx);
03984 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;result;
03985 }
03986 
03987 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;index_tu(<emphasis role="keywordtype">int</emphasis>&#32;argc,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;**argv)&#32;{
03988 &#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*check_prefix;
03989 &#32;&#32;CXIndex&#32;Idx;
03990 &#32;&#32;CXIndexAction&#32;idxAction;
03991 &#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;result;
03992 
03993 &#32;&#32;check_prefix&#32;=&#32;0;
03994 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(argc&#32;&gt;&#32;0)&#32;{
03995 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(strstr(argv[0],&#32;<emphasis role="stringliteral">&quot;-check-prefix=&quot;</emphasis>)&#32;==&#32;argv[0])&#32;{
03996 &#32;&#32;&#32;&#32;&#32;&#32;check_prefix&#32;=&#32;argv[0]&#32;+&#32;strlen(<emphasis role="stringliteral">&quot;-check-prefix=&quot;</emphasis>);
03997 &#32;&#32;&#32;&#32;&#32;&#32;++argv;
03998 &#32;&#32;&#32;&#32;&#32;&#32;--argc;
03999 &#32;&#32;&#32;&#32;}
04000 &#32;&#32;}
04001 
04002 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!(Idx&#32;=&#32;<link linkend="__c_index_8cpp_1a3420c8e7e10a7ff7906130b207cbb763">clang_createIndex</link>(<emphasis role="comment">/*&#32;excludeDeclsFromPCH&#32;*/</emphasis>&#32;1,
04003 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;displayDiagnostics=*/</emphasis>1)))&#32;{
04004 &#32;&#32;&#32;&#32;fprintf(stderr,&#32;<emphasis role="stringliteral">&quot;Could&#32;not&#32;create&#32;Index\n&quot;</emphasis>);
04005 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;1;
04006 &#32;&#32;}
04007 &#32;&#32;idxAction&#32;=&#32;<link linkend="__indexing_8cpp_1a8951fd3fa3c59e24ac8ae72118363e9a">clang_IndexAction_create</link>(Idx);
04008 
04009 &#32;&#32;result&#32;=&#32;index_ast_file(argv[0],&#32;Idx,&#32;idxAction,
04010 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*importedASTs=*/</emphasis>0,&#32;check_prefix);
04011 
04012 &#32;&#32;<link linkend="__indexing_8cpp_1af00707f4579b5c8637e16ae9fb9d6fc4">clang_IndexAction_dispose</link>(idxAction);
04013 &#32;&#32;<link linkend="__c_index_8cpp_1aea91ddf5e996cba0de2f781cb17db1d5">clang_disposeIndex</link>(Idx);
04014 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;result;
04015 }
04016 
04017 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;index_compile_db(<emphasis role="keywordtype">int</emphasis>&#32;argc,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;**argv)&#32;{
04018 &#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*check_prefix;
04019 &#32;&#32;CXIndex&#32;Idx;
04020 &#32;&#32;CXIndexAction&#32;idxAction;
04021 &#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;errorCode&#32;=&#32;0;
04022 
04023 &#32;&#32;check_prefix&#32;=&#32;0;
04024 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(argc&#32;&gt;&#32;0)&#32;{
04025 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(strstr(argv[0],&#32;<emphasis role="stringliteral">&quot;-check-prefix=&quot;</emphasis>)&#32;==&#32;argv[0])&#32;{
04026 &#32;&#32;&#32;&#32;&#32;&#32;check_prefix&#32;=&#32;argv[0]&#32;+&#32;strlen(<emphasis role="stringliteral">&quot;-check-prefix=&quot;</emphasis>);
04027 &#32;&#32;&#32;&#32;&#32;&#32;++argv;
04028 &#32;&#32;&#32;&#32;&#32;&#32;--argc;
04029 &#32;&#32;&#32;&#32;}
04030 &#32;&#32;}
04031 
04032 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(argc&#32;==&#32;0)&#32;{
04033 &#32;&#32;&#32;&#32;fprintf(stderr,&#32;<emphasis role="stringliteral">&quot;no&#32;compilation&#32;database\n&quot;</emphasis>);
04034 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;-1;
04035 &#32;&#32;}
04036 
04037 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!(Idx&#32;=&#32;<link linkend="__c_index_8cpp_1a3420c8e7e10a7ff7906130b207cbb763">clang_createIndex</link>(<emphasis role="comment">/*&#32;excludeDeclsFromPCH&#32;*/</emphasis>&#32;1,
04038 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;displayDiagnostics=*/</emphasis>1)))&#32;{
04039 &#32;&#32;&#32;&#32;fprintf(stderr,&#32;<emphasis role="stringliteral">&quot;Could&#32;not&#32;create&#32;Index\n&quot;</emphasis>);
04040 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;1;
04041 &#32;&#32;}
04042 &#32;&#32;idxAction&#32;=&#32;<link linkend="__indexing_8cpp_1a8951fd3fa3c59e24ac8ae72118363e9a">clang_IndexAction_create</link>(Idx);
04043 
04044 &#32;&#32;{
04045 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*database&#32;=&#32;argv[0];
04046 &#32;&#32;&#32;&#32;CXCompilationDatabase&#32;db&#32;=&#32;0;
04047 &#32;&#32;&#32;&#32;CXCompileCommands&#32;CCmds&#32;=&#32;0;
04048 &#32;&#32;&#32;&#32;CXCompileCommand&#32;CCmd;
04049 &#32;&#32;&#32;&#32;CXCompilationDatabase_Error&#32;ec;
04050 &#32;&#32;&#32;&#32;CXString&#32;wd;
04051 <emphasis role="preprocessor">#define&#32;MAX_COMPILE_ARGS&#32;512</emphasis>
04052 &#32;&#32;&#32;&#32;CXString&#32;cxargs[<link linkend="_c-index-test_8c_1a5e91649440af4abff47f1915d471b2b3">MAX_COMPILE_ARGS</link>];
04053 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*args[<link linkend="_c-index-test_8c_1a5e91649440af4abff47f1915d471b2b3">MAX_COMPILE_ARGS</link>];
04054 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">char</emphasis>&#32;*tmp;
04055 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;len;
04056 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">char</emphasis>&#32;*buildDir;
04057 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;i,&#32;a,&#32;numCmds,&#32;numArgs;
04058 
04059 &#32;&#32;&#32;&#32;len&#32;=&#32;strlen(database);
04060 &#32;&#32;&#32;&#32;tmp&#32;=&#32;(<emphasis role="keywordtype">char</emphasis>&#32;*)&#32;malloc(len+1);
04061 &#32;&#32;&#32;&#32;assert(tmp);
04062 &#32;&#32;&#32;&#32;memcpy(tmp,&#32;database,&#32;len+1);
04063 &#32;&#32;&#32;&#32;buildDir&#32;=&#32;<link linkend="_c-index-test_8c_1abdf3701655fccfd6ebb29a597d66f371">dirname</link>(tmp);
04064 
04065 &#32;&#32;&#32;&#32;db&#32;=&#32;<link linkend="__c_x_compilation_database_8cpp_1aaa087437718d774d839daedb979b61af">clang_CompilationDatabase_fromDirectory</link>(buildDir,&#32;&amp;ec);
04066 
04067 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(db)&#32;{
04068 
04069 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(ec!=CXCompilationDatabase_NoError)&#32;{
04070 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;printf(<emphasis role="stringliteral">&quot;unexpected&#32;error&#32;%d&#32;code&#32;while&#32;loading&#32;compilation&#32;database\n&quot;</emphasis>,&#32;ec);
04071 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;errorCode&#32;=&#32;-1;
04072 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">goto</emphasis>&#32;cdb_end;
04073 &#32;&#32;&#32;&#32;&#32;&#32;}
04074 
04075 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(chdir(buildDir)&#32;!=&#32;0)&#32;{
04076 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;printf(<emphasis role="stringliteral">&quot;Could&#32;not&#32;chdir&#32;to&#32;%s\n&quot;</emphasis>,&#32;buildDir);
04077 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;errorCode&#32;=&#32;-1;
04078 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">goto</emphasis>&#32;cdb_end;
04079 &#32;&#32;&#32;&#32;&#32;&#32;}
04080 
04081 &#32;&#32;&#32;&#32;&#32;&#32;CCmds&#32;=&#32;<link linkend="__c_x_compilation_database_8cpp_1acedca4a5cd8d0d952e018c3567b83f86">clang_CompilationDatabase_getAllCompileCommands</link>(db);
04082 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!CCmds)&#32;{
04083 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;printf(<emphasis role="stringliteral">&quot;compilation&#32;db&#32;is&#32;empty\n&quot;</emphasis>);
04084 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;errorCode&#32;=&#32;-1;
04085 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">goto</emphasis>&#32;cdb_end;
04086 &#32;&#32;&#32;&#32;&#32;&#32;}
04087 
04088 &#32;&#32;&#32;&#32;&#32;&#32;numCmds&#32;=&#32;<link linkend="__c_x_compilation_database_8cpp_1a2239d1a8e88dc966670e9f4b2b321fde">clang_CompileCommands_getSize</link>(CCmds);
04089 
04090 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(numCmds==0)&#32;{
04091 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;fprintf(stderr,&#32;<emphasis role="stringliteral">&quot;should&#32;not&#32;get&#32;an&#32;empty&#32;compileCommand&#32;set\n&quot;</emphasis>);
04092 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;errorCode&#32;=&#32;-1;
04093 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">goto</emphasis>&#32;cdb_end;
04094 &#32;&#32;&#32;&#32;&#32;&#32;}
04095 
04096 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(i=0;&#32;i&lt;numCmds&#32;&amp;&amp;&#32;errorCode&#32;==&#32;0;&#32;++i)&#32;{
04097 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;CCmd&#32;=&#32;<link linkend="__c_x_compilation_database_8cpp_1a11742a91b47662bc3a2624af8fb309c4">clang_CompileCommands_getCommand</link>(CCmds,&#32;i);
04098 
04099 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;wd&#32;=&#32;<link linkend="__c_x_compilation_database_8cpp_1af72bcba83c2478cb262e1bc837cc0621">clang_CompileCommand_getDirectory</link>(CCmd);
04100 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(chdir(<link linkend="__c_x_string_8cpp_1acd478c1b1785e17c0fe377bd70a2195f">clang_getCString</link>(wd))&#32;!=&#32;0)&#32;{
04101 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;printf(<emphasis role="stringliteral">&quot;Could&#32;not&#32;chdir&#32;to&#32;%s\n&quot;</emphasis>,&#32;<link linkend="__c_x_string_8cpp_1acd478c1b1785e17c0fe377bd70a2195f">clang_getCString</link>(wd));
04102 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;errorCode&#32;=&#32;-1;
04103 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">goto</emphasis>&#32;cdb_end;
04104 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
04105 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__c_x_string_8cpp_1a46c85f1255580ed186aa6f7380a06883">clang_disposeString</link>(wd);
04106 
04107 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;numArgs&#32;=&#32;<link linkend="__c_x_compilation_database_8cpp_1a6eda59a086ae6df97bbc71d24daf1958">clang_CompileCommand_getNumArgs</link>(CCmd);
04108 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(numArgs&#32;&gt;&#32;<link linkend="_c-index-test_8c_1a5e91649440af4abff47f1915d471b2b3">MAX_COMPILE_ARGS</link>){
04109 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;fprintf(stderr,&#32;<emphasis role="stringliteral">&quot;got&#32;more&#32;compile&#32;arguments&#32;than&#32;maximum\n&quot;</emphasis>);
04110 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;errorCode&#32;=&#32;-1;
04111 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">goto</emphasis>&#32;cdb_end;
04112 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
04113 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(a=0;&#32;a&lt;numArgs;&#32;++a)&#32;{
04114 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cxargs[a]&#32;=&#32;<link linkend="__c_x_compilation_database_8cpp_1a946bd47adc84a94067ff95060fdd1e17">clang_CompileCommand_getArg</link>(CCmd,&#32;a);
04115 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;args[a]&#32;=&#32;<link linkend="__c_x_string_8cpp_1acd478c1b1785e17c0fe377bd70a2195f">clang_getCString</link>(cxargs[a]);
04116 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
04117 
04118 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;errorCode&#32;=&#32;index_compile_args(numArgs,&#32;args,&#32;idxAction,
04119 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*importedASTs=*/</emphasis>0,&#32;check_prefix);
04120 
04121 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(a=0;&#32;a&lt;numArgs;&#32;++a)
04122 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__c_x_string_8cpp_1a46c85f1255580ed186aa6f7380a06883">clang_disposeString</link>(cxargs[a]);
04123 &#32;&#32;&#32;&#32;&#32;&#32;}
04124 &#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
04125 &#32;&#32;&#32;&#32;&#32;&#32;printf(<emphasis role="stringliteral">&quot;database&#32;loading&#32;failed&#32;with&#32;error&#32;code&#32;%d.\n&quot;</emphasis>,&#32;ec);
04126 &#32;&#32;&#32;&#32;&#32;&#32;errorCode&#32;=&#32;-1;
04127 &#32;&#32;&#32;&#32;}
04128 
04129 &#32;&#32;cdb_end:
04130 &#32;&#32;&#32;&#32;<link linkend="__c_x_compilation_database_8cpp_1a294a73031045578c5df99e9a557a8d0c">clang_CompileCommands_dispose</link>(CCmds);
04131 &#32;&#32;&#32;&#32;<link linkend="__c_x_compilation_database_8cpp_1a4a2e4021f4eaafc4896d76e8227139b0">clang_CompilationDatabase_dispose</link>(db);
04132 &#32;&#32;&#32;&#32;free(tmp);
04133 
04134 &#32;&#32;}
04135 
04136 &#32;&#32;<link linkend="__indexing_8cpp_1af00707f4579b5c8637e16ae9fb9d6fc4">clang_IndexAction_dispose</link>(idxAction);
04137 &#32;&#32;<link linkend="__c_index_8cpp_1aea91ddf5e996cba0de2f781cb17db1d5">clang_disposeIndex</link>(Idx);
04138 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;errorCode;
04139 }
04140 
<anchor xml:id="_c-index-test_8c_source_1l04141"/><link linkend="_c-index-test_8c_1a8c63bc40ab1b76f5abf55eb8aad9a6d2">04141</link> <emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_c-index-test_8c_1a8c63bc40ab1b76f5abf55eb8aad9a6d2">perform_token_annotation</link>(<emphasis role="keywordtype">int</emphasis>&#32;argc,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;**argv)&#32;{
04142 &#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*input&#32;=&#32;argv[1];
04143 &#32;&#32;<emphasis role="keywordtype">char</emphasis>&#32;*filename&#32;=&#32;0;
04144 &#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;line,&#32;second_line;
04145 &#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;column,&#32;second_column;
04146 &#32;&#32;CXIndex&#32;CIdx;
04147 &#32;&#32;CXTranslationUnit&#32;TU&#32;=&#32;0;
04148 &#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;errorCode;
04149 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>CXUnsavedFile&#32;*unsaved_files&#32;=&#32;0;
04150 &#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;num_unsaved_files&#32;=&#32;0;
04151 &#32;&#32;CXToken&#32;*tokens;
04152 &#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;num_tokens;
04153 &#32;&#32;CXSourceRange&#32;range;
04154 &#32;&#32;CXSourceLocation&#32;startLoc,&#32;endLoc;
04155 &#32;&#32;CXFile&#32;file&#32;=&#32;0;
04156 &#32;&#32;CXCursor&#32;*cursors&#32;=&#32;0;
04157 &#32;&#32;CXSourceRangeList&#32;*skipped_ranges&#32;=&#32;0;
04158 &#32;&#32;<emphasis role="keyword">enum</emphasis>&#32;CXErrorCode&#32;Err;
04159 &#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;i;
04160 
04161 &#32;&#32;input&#32;+=&#32;strlen(<emphasis role="stringliteral">&quot;-test-annotate-tokens=&quot;</emphasis>);
04162 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;((errorCode&#32;=&#32;<link linkend="_c-index-test_8c_1a86d7b0a04b2271451b84a97a62081480">parse_file_line_column</link>(input,&#32;&amp;filename,&#32;&amp;line,&#32;&amp;column,
04163 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;second_line,&#32;&amp;second_column)))
04164 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;errorCode;
04165 
04166 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(parse_remapped_files(argc,&#32;argv,&#32;2,&#32;&amp;unsaved_files,&#32;&amp;num_unsaved_files))&#32;{
04167 &#32;&#32;&#32;&#32;free(filename);
04168 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;-1;
04169 &#32;&#32;}
04170 
04171 &#32;&#32;CIdx&#32;=&#32;<link linkend="__c_index_8cpp_1a3420c8e7e10a7ff7906130b207cbb763">clang_createIndex</link>(0,&#32;1);
04172 &#32;&#32;Err&#32;=&#32;<link linkend="__c_index_8cpp_1a3ddd508cc891d95a82b747955738249a">clang_parseTranslationUnit2</link>(CIdx,&#32;argv[argc&#32;-&#32;1],
04173 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;argv&#32;+&#32;num_unsaved_files&#32;+&#32;2,
04174 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;argc&#32;-&#32;num_unsaved_files&#32;-&#32;3,
04175 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;unsaved_files,
04176 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;num_unsaved_files,
04177 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;getDefaultParsingOptions(),&#32;&amp;TU);
04178 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(Err&#32;!=&#32;CXError_Success)&#32;{
04179 &#32;&#32;&#32;&#32;fprintf(stderr,&#32;<emphasis role="stringliteral">&quot;unable&#32;to&#32;parse&#32;input\n&quot;</emphasis>);
04180 &#32;&#32;&#32;&#32;describeLibclangFailure(Err);
04181 &#32;&#32;&#32;&#32;<link linkend="__c_index_8cpp_1aea91ddf5e996cba0de2f781cb17db1d5">clang_disposeIndex</link>(CIdx);
04182 &#32;&#32;&#32;&#32;free(filename);
04183 &#32;&#32;&#32;&#32;<link linkend="_c-index-test_8c_1af28d9933e8a8fd14e8394a1e7f9f6379">free_remapped_files</link>(unsaved_files,&#32;num_unsaved_files);
04184 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;-1;
04185 &#32;&#32;}
04186 &#32;&#32;errorCode&#32;=&#32;0;
04187 
04188 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(checkForErrors(TU)&#32;!=&#32;0)&#32;{
04189 &#32;&#32;&#32;&#32;errorCode&#32;=&#32;-1;
04190 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">goto</emphasis>&#32;teardown;
04191 &#32;&#32;}
04192 
04193 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(getenv(<emphasis role="stringliteral">&quot;CINDEXTEST_EDITING&quot;</emphasis>))&#32;{
04194 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(i&#32;=&#32;0;&#32;i&#32;&lt;&#32;5;&#32;++i)&#32;{
04195 &#32;&#32;&#32;&#32;&#32;&#32;Err&#32;=&#32;<link linkend="__c_index_8cpp_1a2befc445c3dde1e89f6900c67892ceaa">clang_reparseTranslationUnit</link>(TU,&#32;num_unsaved_files,&#32;unsaved_files,
04196 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__c_index_8cpp_1a2f79bdd29d8f799a3943c6a5254eb789">clang_defaultReparseOptions</link>(TU));
04197 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(Err&#32;!=&#32;CXError_Success)&#32;{
04198 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;fprintf(stderr,&#32;<emphasis role="stringliteral">&quot;Unable&#32;to&#32;reparse&#32;translation&#32;unit!\n&quot;</emphasis>);
04199 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;describeLibclangFailure(Err);
04200 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;errorCode&#32;=&#32;-1;
04201 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">goto</emphasis>&#32;teardown;
04202 &#32;&#32;&#32;&#32;&#32;&#32;}
04203 &#32;&#32;&#32;&#32;}
04204 &#32;&#32;}
04205 
04206 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(checkForErrors(TU)&#32;!=&#32;0)&#32;{
04207 &#32;&#32;&#32;&#32;errorCode&#32;=&#32;-1;
04208 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">goto</emphasis>&#32;teardown;
04209 &#32;&#32;}
04210 
04211 &#32;&#32;file&#32;=&#32;<link linkend="__c_index_8cpp_1a7c72c3450d02a5d985f152cc0dee1785">clang_getFile</link>(TU,&#32;filename);
04212 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!file)&#32;{
04213 &#32;&#32;&#32;&#32;fprintf(stderr,&#32;<emphasis role="stringliteral">&quot;file&#32;%s&#32;is&#32;not&#32;in&#32;this&#32;translation&#32;unit\n&quot;</emphasis>,&#32;filename);
04214 &#32;&#32;&#32;&#32;errorCode&#32;=&#32;-1;
04215 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">goto</emphasis>&#32;teardown;
04216 &#32;&#32;}
04217 
04218 &#32;&#32;startLoc&#32;=&#32;<link linkend="__c_x_source_location_8cpp_1a3da1e96662794609af6bec3dc345dd9a">clang_getLocation</link>(TU,&#32;file,&#32;line,&#32;column);
04219 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="__c_x_source_location_8cpp_1aa18c665664a0dd6ebf8eae9954a3a696">clang_equalLocations</link>(<link linkend="__c_x_source_location_8cpp_1a20bb1e9a72e2c16fbcb21958f0648947">clang_getNullLocation</link>(),&#32;startLoc))&#32;{
04220 &#32;&#32;&#32;&#32;fprintf(stderr,&#32;<emphasis role="stringliteral">&quot;invalid&#32;source&#32;location&#32;%s:%d:%d\n&quot;</emphasis>,&#32;filename,&#32;line,
04221 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;column);
04222 &#32;&#32;&#32;&#32;errorCode&#32;=&#32;-1;
04223 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">goto</emphasis>&#32;teardown;
04224 &#32;&#32;}
04225 
04226 &#32;&#32;endLoc&#32;=&#32;<link linkend="__c_x_source_location_8cpp_1a3da1e96662794609af6bec3dc345dd9a">clang_getLocation</link>(TU,&#32;file,&#32;second_line,&#32;second_column);
04227 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="__c_x_source_location_8cpp_1aa18c665664a0dd6ebf8eae9954a3a696">clang_equalLocations</link>(<link linkend="__c_x_source_location_8cpp_1a20bb1e9a72e2c16fbcb21958f0648947">clang_getNullLocation</link>(),&#32;endLoc))&#32;{
04228 &#32;&#32;&#32;&#32;fprintf(stderr,&#32;<emphasis role="stringliteral">&quot;invalid&#32;source&#32;location&#32;%s:%d:%d\n&quot;</emphasis>,&#32;filename,
04229 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;second_line,&#32;second_column);
04230 &#32;&#32;&#32;&#32;errorCode&#32;=&#32;-1;
04231 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">goto</emphasis>&#32;teardown;
04232 &#32;&#32;}
04233 
04234 &#32;&#32;range&#32;=&#32;<link linkend="__c_x_source_location_8cpp_1a6d436a40e815644209860de3f1416210">clang_getRange</link>(startLoc,&#32;endLoc);
04235 &#32;&#32;<link linkend="__c_index_8cpp_1acb7d078bea44691adbb99cd63ce7e556">clang_tokenize</link>(TU,&#32;range,&#32;&amp;tokens,&#32;&amp;num_tokens);
04236 
04237 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(checkForErrors(TU)&#32;!=&#32;0)&#32;{
04238 &#32;&#32;&#32;&#32;errorCode&#32;=&#32;-1;
04239 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">goto</emphasis>&#32;teardown;
04240 &#32;&#32;}
04241 
04242 &#32;&#32;cursors&#32;=&#32;(CXCursor&#32;*)malloc(num_tokens&#32;*&#32;<emphasis role="keyword">sizeof</emphasis>(CXCursor));
04243 &#32;&#32;assert(cursors);
04244 &#32;&#32;<link linkend="__c_index_8cpp_1aa53f8643daa75a0e72407ab0cee225f3">clang_annotateTokens</link>(TU,&#32;tokens,&#32;num_tokens,&#32;cursors);
04245 
04246 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(checkForErrors(TU)&#32;!=&#32;0)&#32;{
04247 &#32;&#32;&#32;&#32;errorCode&#32;=&#32;-1;
04248 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">goto</emphasis>&#32;teardown;
04249 &#32;&#32;}
04250 
04251 &#32;&#32;skipped_ranges&#32;=&#32;<link linkend="__c_index_8cpp_1add341497e44da969ce07c7fbc174d38a">clang_getSkippedRanges</link>(TU,&#32;file);
04252 &#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(i&#32;=&#32;0;&#32;i&#32;!=&#32;skipped_ranges-&gt;count;&#32;++i)&#32;{
04253 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;start_line,&#32;start_column,&#32;end_line,&#32;end_column;
04254 &#32;&#32;&#32;&#32;<link linkend="__c_x_source_location_8cpp_1ae2d805527135aac587ca5c8017bde0ef">clang_getSpellingLocation</link>(<link linkend="__c_x_source_location_8cpp_1a14a10dd8d9a4069c4fc1a7be62f58874">clang_getRangeStart</link>(skipped_ranges-&gt;ranges[i]),
04255 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;0,&#32;&amp;start_line,&#32;&amp;start_column,&#32;0);
04256 &#32;&#32;&#32;&#32;<link linkend="__c_x_source_location_8cpp_1ae2d805527135aac587ca5c8017bde0ef">clang_getSpellingLocation</link>(<link linkend="__c_x_source_location_8cpp_1a146c4bda0251ee320dc6e4b1b3fbb919">clang_getRangeEnd</link>(skipped_ranges-&gt;ranges[i]),
04257 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;0,&#32;&amp;end_line,&#32;&amp;end_column,&#32;0);
04258 &#32;&#32;&#32;&#32;printf(<emphasis role="stringliteral">&quot;Skipping:&#32;&quot;</emphasis>);
04259 &#32;&#32;&#32;&#32;PrintExtent(stdout,&#32;start_line,&#32;start_column,&#32;end_line,&#32;end_column);
04260 &#32;&#32;&#32;&#32;printf(<emphasis role="stringliteral">&quot;\n&quot;</emphasis>);
04261 &#32;&#32;}
04262 &#32;&#32;<link linkend="__c_index_8cpp_1acfc7c338d3c08e516bf0773f4fa1180e">clang_disposeSourceRangeList</link>(skipped_ranges);
04263 
04264 &#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(i&#32;=&#32;0;&#32;i&#32;!=&#32;num_tokens;&#32;++i)&#32;{
04265 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*kind&#32;=&#32;<emphasis role="stringliteral">&quot;&lt;unknown&gt;&quot;</emphasis>;
04266 &#32;&#32;&#32;&#32;CXString&#32;spelling&#32;=&#32;<link linkend="__c_index_8cpp_1ac54c8685910211b22533b6aea1e5793f">clang_getTokenSpelling</link>(TU,&#32;tokens[i]);
04267 &#32;&#32;&#32;&#32;CXSourceRange&#32;extent&#32;=&#32;<link linkend="__c_index_8cpp_1a216d4670f967e3bd9f9c977691282047">clang_getTokenExtent</link>(TU,&#32;tokens[i]);
04268 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;start_line,&#32;start_column,&#32;end_line,&#32;end_column;
04269 
04270 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(<link linkend="__c_index_8cpp_1a656e3a514ed80a5f265fba4e2cbe6ab3">clang_getTokenKind</link>(tokens[i]))&#32;{
04271 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXToken_Punctuation:&#32;kind&#32;=&#32;<emphasis role="stringliteral">&quot;Punctuation&quot;</emphasis>;&#32;<emphasis role="keywordflow">break</emphasis>;
04272 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXToken_Keyword:&#32;kind&#32;=&#32;<emphasis role="stringliteral">&quot;Keyword&quot;</emphasis>;&#32;<emphasis role="keywordflow">break</emphasis>;
04273 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXToken_Identifier:&#32;kind&#32;=&#32;<emphasis role="stringliteral">&quot;Identifier&quot;</emphasis>;&#32;<emphasis role="keywordflow">break</emphasis>;
04274 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXToken_Literal:&#32;kind&#32;=&#32;<emphasis role="stringliteral">&quot;Literal&quot;</emphasis>;&#32;<emphasis role="keywordflow">break</emphasis>;
04275 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXToken_Comment:&#32;kind&#32;=&#32;<emphasis role="stringliteral">&quot;Comment&quot;</emphasis>;&#32;<emphasis role="keywordflow">break</emphasis>;
04276 &#32;&#32;&#32;&#32;}
04277 &#32;&#32;&#32;&#32;<link linkend="__c_x_source_location_8cpp_1ae2d805527135aac587ca5c8017bde0ef">clang_getSpellingLocation</link>(<link linkend="__c_x_source_location_8cpp_1a14a10dd8d9a4069c4fc1a7be62f58874">clang_getRangeStart</link>(extent),
04278 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;0,&#32;&amp;start_line,&#32;&amp;start_column,&#32;0);
04279 &#32;&#32;&#32;&#32;<link linkend="__c_x_source_location_8cpp_1ae2d805527135aac587ca5c8017bde0ef">clang_getSpellingLocation</link>(<link linkend="__c_x_source_location_8cpp_1a146c4bda0251ee320dc6e4b1b3fbb919">clang_getRangeEnd</link>(extent),
04280 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;0,&#32;&amp;end_line,&#32;&amp;end_column,&#32;0);
04281 &#32;&#32;&#32;&#32;printf(<emphasis role="stringliteral">&quot;%s:&#32;\&quot;%s\&quot;&#32;&quot;</emphasis>,&#32;kind,&#32;<link linkend="__c_x_string_8cpp_1acd478c1b1785e17c0fe377bd70a2195f">clang_getCString</link>(spelling));
04282 &#32;&#32;&#32;&#32;<link linkend="__c_x_string_8cpp_1a46c85f1255580ed186aa6f7380a06883">clang_disposeString</link>(spelling);
04283 &#32;&#32;&#32;&#32;PrintExtent(stdout,&#32;start_line,&#32;start_column,&#32;end_line,&#32;end_column);
04284 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!<link linkend="__c_index_8cpp_1a0c5b391d8bca745084fb8906cce6f66c">clang_isInvalid</link>(cursors[i].kind))&#32;{
04285 &#32;&#32;&#32;&#32;&#32;&#32;printf(<emphasis role="stringliteral">&quot;&#32;&quot;</emphasis>);
04286 &#32;&#32;&#32;&#32;&#32;&#32;PrintCursor(cursors[i],&#32;NULL);
04287 &#32;&#32;&#32;&#32;}
04288 &#32;&#32;&#32;&#32;printf(<emphasis role="stringliteral">&quot;\n&quot;</emphasis>);
04289 &#32;&#32;}
04290 &#32;&#32;free(cursors);
04291 &#32;&#32;<link linkend="__c_index_8cpp_1a69a3b1b393fd8cd3cf50802b2a5b08af">clang_disposeTokens</link>(TU,&#32;tokens,&#32;num_tokens);
04292 
04293 &#32;teardown:
04294 &#32;&#32;<link linkend="_c-index-test_8c_1a40fceb7e4c2e16f5bce47bae394b973a">PrintDiagnostics</link>(TU);
04295 &#32;&#32;<link linkend="__c_index_8cpp_1a3af88c13004a1954abd6dc956faff3be">clang_disposeTranslationUnit</link>(TU);
04296 &#32;&#32;<link linkend="__c_index_8cpp_1aea91ddf5e996cba0de2f781cb17db1d5">clang_disposeIndex</link>(CIdx);
04297 &#32;&#32;free(filename);
04298 &#32;&#32;<link linkend="_c-index-test_8c_1af28d9933e8a8fd14e8394a1e7f9f6379">free_remapped_files</link>(unsaved_files,&#32;num_unsaved_files);
04299 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;errorCode;
04300 }
04301 
04302 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>
04303 perform_test_compilation_db(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*database,&#32;<emphasis role="keywordtype">int</emphasis>&#32;argc,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;**argv)&#32;{
04304 &#32;&#32;CXCompilationDatabase&#32;db;
04305 &#32;&#32;CXCompileCommands&#32;CCmds;
04306 &#32;&#32;CXCompileCommand&#32;CCmd;
04307 &#32;&#32;CXCompilationDatabase_Error&#32;ec;
04308 &#32;&#32;CXString&#32;wd;
04309 &#32;&#32;CXString&#32;arg;
04310 &#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;errorCode&#32;=&#32;0;
04311 &#32;&#32;<emphasis role="keywordtype">char</emphasis>&#32;*tmp;
04312 &#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;len;
04313 &#32;&#32;<emphasis role="keywordtype">char</emphasis>&#32;*buildDir;
04314 &#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;i,&#32;j,&#32;a,&#32;numCmds,&#32;numArgs;
04315 
04316 &#32;&#32;len&#32;=&#32;strlen(database);
04317 &#32;&#32;tmp&#32;=&#32;(<emphasis role="keywordtype">char</emphasis>&#32;*)&#32;malloc(len+1);
04318 &#32;&#32;assert(tmp);
04319 &#32;&#32;memcpy(tmp,&#32;database,&#32;len+1);
04320 &#32;&#32;buildDir&#32;=&#32;<link linkend="_c-index-test_8c_1abdf3701655fccfd6ebb29a597d66f371">dirname</link>(tmp);
04321 
04322 &#32;&#32;db&#32;=&#32;<link linkend="__c_x_compilation_database_8cpp_1aaa087437718d774d839daedb979b61af">clang_CompilationDatabase_fromDirectory</link>(buildDir,&#32;&amp;ec);
04323 
04324 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(db)&#32;{
04325 
04326 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(ec!=CXCompilationDatabase_NoError)&#32;{
04327 &#32;&#32;&#32;&#32;&#32;&#32;printf(<emphasis role="stringliteral">&quot;unexpected&#32;error&#32;%d&#32;code&#32;while&#32;loading&#32;compilation&#32;database\n&quot;</emphasis>,&#32;ec);
04328 &#32;&#32;&#32;&#32;&#32;&#32;errorCode&#32;=&#32;-1;
04329 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">goto</emphasis>&#32;cdb_end;
04330 &#32;&#32;&#32;&#32;}
04331 
04332 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(i=0;&#32;i&lt;argc&#32;&amp;&amp;&#32;errorCode==0;&#32;)&#32;{
04333 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(strcmp(argv[i],<emphasis role="stringliteral">&quot;lookup&quot;</emphasis>)==0){
04334 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;CCmds&#32;=&#32;<link linkend="__c_x_compilation_database_8cpp_1a3a23e53ea98bc08768215c09f5156bee">clang_CompilationDatabase_getCompileCommands</link>(db,&#32;argv[i+1]);
04335 
04336 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!CCmds)&#32;{
04337 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;printf(<emphasis role="stringliteral">&quot;file&#32;%s&#32;not&#32;found&#32;in&#32;compilation&#32;db\n&quot;</emphasis>,&#32;argv[i+1]);
04338 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;errorCode&#32;=&#32;-1;
04339 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
04340 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
04341 
04342 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;numCmds&#32;=&#32;<link linkend="__c_x_compilation_database_8cpp_1a2239d1a8e88dc966670e9f4b2b321fde">clang_CompileCommands_getSize</link>(CCmds);
04343 
04344 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(numCmds==0)&#32;{
04345 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;fprintf(stderr,&#32;<emphasis role="stringliteral">&quot;should&#32;not&#32;get&#32;an&#32;empty&#32;compileCommand&#32;set&#32;for&#32;file&quot;</emphasis>
04346 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;&#32;&apos;%s&apos;\n&quot;</emphasis>,&#32;argv[i+1]);
04347 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;errorCode&#32;=&#32;-1;
04348 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
04349 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
04350 
04351 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(j=0;&#32;j&lt;numCmds;&#32;++j)&#32;{
04352 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;CCmd&#32;=&#32;<link linkend="__c_x_compilation_database_8cpp_1a11742a91b47662bc3a2624af8fb309c4">clang_CompileCommands_getCommand</link>(CCmds,&#32;j);
04353 
04354 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;wd&#32;=&#32;<link linkend="__c_x_compilation_database_8cpp_1af72bcba83c2478cb262e1bc837cc0621">clang_CompileCommand_getDirectory</link>(CCmd);
04355 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;printf(<emphasis role="stringliteral">&quot;workdir:&apos;%s&apos;&quot;</emphasis>,&#32;<link linkend="__c_x_string_8cpp_1acd478c1b1785e17c0fe377bd70a2195f">clang_getCString</link>(wd));
04356 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__c_x_string_8cpp_1a46c85f1255580ed186aa6f7380a06883">clang_disposeString</link>(wd);
04357 
04358 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;printf(<emphasis role="stringliteral">&quot;&#32;cmdline:&apos;&quot;</emphasis>);
04359 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;numArgs&#32;=&#32;<link linkend="__c_x_compilation_database_8cpp_1a6eda59a086ae6df97bbc71d24daf1958">clang_CompileCommand_getNumArgs</link>(CCmd);
04360 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(a=0;&#32;a&lt;numArgs;&#32;++a)&#32;{
04361 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(a)&#32;printf(<emphasis role="stringliteral">&quot;&#32;&quot;</emphasis>);
04362 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;arg&#32;=&#32;<link linkend="__c_x_compilation_database_8cpp_1a946bd47adc84a94067ff95060fdd1e17">clang_CompileCommand_getArg</link>(CCmd,&#32;a);
04363 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;printf(<emphasis role="stringliteral">&quot;%s&quot;</emphasis>,&#32;<link linkend="__c_x_string_8cpp_1acd478c1b1785e17c0fe377bd70a2195f">clang_getCString</link>(arg));
04364 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__c_x_string_8cpp_1a46c85f1255580ed186aa6f7380a06883">clang_disposeString</link>(arg);
04365 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
04366 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;printf(<emphasis role="stringliteral">&quot;&apos;\n&quot;</emphasis>);
04367 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
04368 
04369 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__c_x_compilation_database_8cpp_1a294a73031045578c5df99e9a557a8d0c">clang_CompileCommands_dispose</link>(CCmds);
04370 
04371 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;i&#32;+=&#32;2;
04372 &#32;&#32;&#32;&#32;&#32;&#32;}
04373 &#32;&#32;&#32;&#32;}
04374 &#32;&#32;&#32;&#32;<link linkend="__c_x_compilation_database_8cpp_1a4a2e4021f4eaafc4896d76e8227139b0">clang_CompilationDatabase_dispose</link>(db);
04375 &#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
04376 &#32;&#32;&#32;&#32;printf(<emphasis role="stringliteral">&quot;database&#32;loading&#32;failed&#32;with&#32;error&#32;code&#32;%d.\n&quot;</emphasis>,&#32;ec);
04377 &#32;&#32;&#32;&#32;errorCode&#32;=&#32;-1;
04378 &#32;&#32;}
04379 
04380 cdb_end:
04381 &#32;&#32;free(tmp);
04382 
04383 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;errorCode;
04384 }
04385 
04386 <emphasis role="comment">/******************************************************************************/</emphasis>
04387 <emphasis role="comment">/*&#32;USR&#32;printing.&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*/</emphasis>
04388 <emphasis role="comment">/******************************************************************************/</emphasis>
04389 
04390 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;insufficient_usr(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*kind,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*usage)&#32;{
04391 &#32;&#32;fprintf(stderr,&#32;<emphasis role="stringliteral">&quot;USR&#32;for&#32;&apos;%s&apos;&#32;requires:&#32;%s\n&quot;</emphasis>,&#32;kind,&#32;usage);
04392 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;1;
04393 }
04394 
04395 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;isUSR(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*s)&#32;{
04396 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;s[0]&#32;==&#32;<emphasis role="charliteral">&apos;c&apos;</emphasis>&#32;&amp;&amp;&#32;s[1]&#32;==&#32;<emphasis role="charliteral">&apos;:&apos;</emphasis>;
04397 }
04398 
04399 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;not_usr(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*s,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*arg)&#32;{
04400 &#32;&#32;fprintf(stderr,&#32;<emphasis role="stringliteral">&quot;&apos;%s&apos;&#32;argument&#32;(&apos;%s&apos;)&#32;is&#32;not&#32;a&#32;USR\n&quot;</emphasis>,&#32;s,&#32;arg);
04401 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;1;
04402 }
04403 
04404 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;print_usr(CXString&#32;usr)&#32;{
04405 &#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*s&#32;=&#32;<link linkend="__c_x_string_8cpp_1acd478c1b1785e17c0fe377bd70a2195f">clang_getCString</link>(usr);
04406 &#32;&#32;printf(<emphasis role="stringliteral">&quot;%s\n&quot;</emphasis>,&#32;s);
04407 &#32;&#32;<link linkend="__c_x_string_8cpp_1a46c85f1255580ed186aa6f7380a06883">clang_disposeString</link>(usr);
04408 }
04409 
04410 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;display_usrs()&#32;{
04411 &#32;&#32;fprintf(stderr,&#32;<emphasis role="stringliteral">&quot;-print-usrs&#32;options:\n&quot;</emphasis>
04412 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;&#32;ObjCCategory&#32;&lt;class&#32;name&gt;&#32;&lt;category&#32;name&gt;\n&quot;</emphasis>
04413 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;&#32;ObjCClass&#32;&lt;class&#32;name&gt;\n&quot;</emphasis>
04414 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;&#32;ObjCIvar&#32;&lt;ivar&#32;name&gt;&#32;&lt;class&#32;USR&gt;\n&quot;</emphasis>
04415 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;&#32;ObjCMethod&#32;&lt;selector&gt;&#32;[0=class&#32;method|1=instance&#32;method]&#32;&quot;</emphasis>
04416 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;&lt;class&#32;USR&gt;\n&quot;</emphasis>
04417 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;&#32;ObjCProperty&#32;&lt;property&#32;name&gt;&#32;&lt;class&#32;USR&gt;\n&quot;</emphasis>
04418 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;&#32;ObjCProtocol&#32;&lt;protocol&#32;name&gt;\n&quot;</emphasis>);
04419 }
04420 
<anchor xml:id="_c-index-test_8c_source_1l04421"/><link linkend="_c-index-test_8c_1a846a90dd895ad8ab4948dfd8b42e88c1">04421</link> <emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_c-index-test_8c_1a846a90dd895ad8ab4948dfd8b42e88c1">print_usrs</link>(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;**I,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;**E)&#32;{
04422 &#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(I&#32;!=&#32;E)&#32;{
04423 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*kind&#32;=&#32;*I;
04424 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;len&#32;=&#32;strlen(kind);
04425 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(len)&#32;{
04426 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;8:
04427 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(memcmp(kind,&#32;<emphasis role="stringliteral">&quot;ObjCIvar&quot;</emphasis>,&#32;8)&#32;==&#32;0)&#32;{
04428 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(I&#32;+&#32;2&#32;&gt;=&#32;E)
04429 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;insufficient_usr(kind,&#32;<emphasis role="stringliteral">&quot;&lt;ivar&#32;name&gt;&#32;&lt;class&#32;USR&gt;&quot;</emphasis>);
04430 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!isUSR(I[2]))
04431 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;not_usr(<emphasis role="stringliteral">&quot;&lt;class&#32;USR&gt;&quot;</emphasis>,&#32;I[2]);
04432 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
04433 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;CXString&#32;x&#32;=&#32;createCXString(I[2]);
04434 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;print_usr(<link linkend="__c_index_u_s_rs_8cpp_1a0a694bd3222726fa935bec5d6c6ffa74">clang_constructUSR_ObjCIvar</link>(I[1],&#32;x));
04435 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
04436 
04437 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;I&#32;+=&#32;3;
04438 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">continue</emphasis>;
04439 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
04440 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
04441 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;9:
04442 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(memcmp(kind,&#32;<emphasis role="stringliteral">&quot;ObjCClass&quot;</emphasis>,&#32;9)&#32;==&#32;0)&#32;{
04443 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(I&#32;+&#32;1&#32;&gt;=&#32;E)
04444 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;insufficient_usr(kind,&#32;<emphasis role="stringliteral">&quot;&lt;class&#32;name&gt;&quot;</emphasis>);
04445 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;print_usr(<link linkend="__c_index_u_s_rs_8cpp_1afa75d3cdc7f1246aa196336006b6b17e">clang_constructUSR_ObjCClass</link>(I[1]));
04446 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;I&#32;+=&#32;2;
04447 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">continue</emphasis>;
04448 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
04449 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
04450 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;10:
04451 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(memcmp(kind,&#32;<emphasis role="stringliteral">&quot;ObjCMethod&quot;</emphasis>,&#32;10)&#32;==&#32;0)&#32;{
04452 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(I&#32;+&#32;3&#32;&gt;=&#32;E)
04453 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;insufficient_usr(kind,&#32;<emphasis role="stringliteral">&quot;&lt;method&#32;selector&gt;&#32;&quot;</emphasis>
04454 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;[0=class&#32;method|1=instance&#32;method]&#32;&lt;class&#32;USR&gt;&quot;</emphasis>);
04455 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!isUSR(I[3]))
04456 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;not_usr(<emphasis role="stringliteral">&quot;&lt;class&#32;USR&gt;&quot;</emphasis>,&#32;I[3]);
04457 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
04458 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;CXString&#32;x&#32;=&#32;createCXString(I[3]);
04459 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;print_usr(<link linkend="__c_index_u_s_rs_8cpp_1a57441154398db67af15555136489c8da">clang_constructUSR_ObjCMethod</link>(I[1],&#32;atoi(I[2]),&#32;x));
04460 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
04461 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;I&#32;+=&#32;4;
04462 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">continue</emphasis>;
04463 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
04464 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
04465 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;12:
04466 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(memcmp(kind,&#32;<emphasis role="stringliteral">&quot;ObjCCategory&quot;</emphasis>,&#32;12)&#32;==&#32;0)&#32;{
04467 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(I&#32;+&#32;2&#32;&gt;=&#32;E)
04468 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;insufficient_usr(kind,&#32;<emphasis role="stringliteral">&quot;&lt;class&#32;name&gt;&#32;&lt;category&#32;name&gt;&quot;</emphasis>);
04469 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;print_usr(<link linkend="__c_index_u_s_rs_8cpp_1a100f21ca740fca2384413c0e8fbb26ba">clang_constructUSR_ObjCCategory</link>(I[1],&#32;I[2]));
04470 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;I&#32;+=&#32;3;
04471 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">continue</emphasis>;
04472 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
04473 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(memcmp(kind,&#32;<emphasis role="stringliteral">&quot;ObjCProtocol&quot;</emphasis>,&#32;12)&#32;==&#32;0)&#32;{
04474 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(I&#32;+&#32;1&#32;&gt;=&#32;E)
04475 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;insufficient_usr(kind,&#32;<emphasis role="stringliteral">&quot;&lt;protocol&#32;name&gt;&quot;</emphasis>);
04476 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;print_usr(<link linkend="__c_index_u_s_rs_8cpp_1ad9eadd6627e168000a1d8a0a487f04ec">clang_constructUSR_ObjCProtocol</link>(I[1]));
04477 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;I&#32;+=&#32;2;
04478 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">continue</emphasis>;
04479 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
04480 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(memcmp(kind,&#32;<emphasis role="stringliteral">&quot;ObjCProperty&quot;</emphasis>,&#32;12)&#32;==&#32;0)&#32;{
04481 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(I&#32;+&#32;2&#32;&gt;=&#32;E)
04482 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;insufficient_usr(kind,&#32;<emphasis role="stringliteral">&quot;&lt;property&#32;name&gt;&#32;&lt;class&#32;USR&gt;&quot;</emphasis>);
04483 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!isUSR(I[2]))
04484 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;not_usr(<emphasis role="stringliteral">&quot;&lt;class&#32;USR&gt;&quot;</emphasis>,&#32;I[2]);
04485 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
04486 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;CXString&#32;x&#32;=&#32;createCXString(I[2]);
04487 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;print_usr(<link linkend="__c_index_u_s_rs_8cpp_1a06209d1976eb61cf961c047c4ceb0ee4">clang_constructUSR_ObjCProperty</link>(I[1],&#32;x));
04488 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
04489 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;I&#32;+=&#32;3;
04490 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">continue</emphasis>;
04491 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
04492 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
04493 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">default</emphasis>:
04494 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
04495 &#32;&#32;&#32;&#32;}
04496 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
04497 &#32;&#32;}
04498 
04499 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(I&#32;!=&#32;E)&#32;{
04500 &#32;&#32;&#32;&#32;fprintf(stderr,&#32;<emphasis role="stringliteral">&quot;Invalid&#32;USR&#32;kind:&#32;%s\n&quot;</emphasis>,&#32;*I);
04501 &#32;&#32;&#32;&#32;display_usrs();
04502 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;1;
04503 &#32;&#32;}
04504 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
04505 }
04506 
<anchor xml:id="_c-index-test_8c_source_1l04507"/><link linkend="_c-index-test_8c_1a0847878e5ec5c011f566e2571cba418e">04507</link> <emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_c-index-test_8c_1a0847878e5ec5c011f566e2571cba418e">print_usrs_file</link>(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*file_name)&#32;{
04508 &#32;&#32;<emphasis role="keywordtype">char</emphasis>&#32;line[2048];
04509 &#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*args[128];
04510 &#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;numChars&#32;=&#32;0;
04511 
04512 &#32;&#32;FILE&#32;*fp&#32;=&#32;fopen(file_name,&#32;<emphasis role="stringliteral">&quot;r&quot;</emphasis>);
04513 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!fp)&#32;{
04514 &#32;&#32;&#32;&#32;fprintf(stderr,&#32;<emphasis role="stringliteral">&quot;error:&#32;cannot&#32;open&#32;&apos;%s&apos;\n&quot;</emphasis>,&#32;file_name);
04515 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;1;
04516 &#32;&#32;}
04517 
04518 &#32;&#32;<emphasis role="comment">/*&#32;This&#32;code&#32;is&#32;not&#32;really&#32;all&#32;that&#32;safe,&#32;but&#32;it&#32;works&#32;fine&#32;for&#32;testing.&#32;*/</emphasis>
04519 &#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(!feof(fp))&#32;{
04520 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">char</emphasis>&#32;c&#32;=&#32;fgetc(fp);
04521 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(c&#32;==&#32;<emphasis role="charliteral">&apos;\n&apos;</emphasis>)&#32;{
04522 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;i&#32;=&#32;0;
04523 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*s&#32;=&#32;0;
04524 
04525 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(numChars&#32;==&#32;0)
04526 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">continue</emphasis>;
04527 
04528 &#32;&#32;&#32;&#32;&#32;&#32;line[numChars]&#32;=&#32;<emphasis role="charliteral">&apos;\0&apos;</emphasis>;
04529 &#32;&#32;&#32;&#32;&#32;&#32;numChars&#32;=&#32;0;
04530 
04531 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(line[0]&#32;==&#32;<emphasis role="charliteral">&apos;/&apos;</emphasis>&#32;&amp;&amp;&#32;line[1]&#32;==&#32;<emphasis role="charliteral">&apos;/&apos;</emphasis>)
04532 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">continue</emphasis>;
04533 
04534 &#32;&#32;&#32;&#32;&#32;&#32;s&#32;=&#32;strtok(line,&#32;<emphasis role="stringliteral">&quot;&#32;&quot;</emphasis>);
04535 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(s)&#32;{
04536 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;args[i]&#32;=&#32;s;
04537 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;++i;
04538 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;s&#32;=&#32;strtok(0,&#32;<emphasis role="stringliteral">&quot;&#32;&quot;</emphasis>);
04539 &#32;&#32;&#32;&#32;&#32;&#32;}
04540 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_c-index-test_8c_1a846a90dd895ad8ab4948dfd8b42e88c1">print_usrs</link>(&amp;args[0],&#32;&amp;args[i]))
04541 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;1;
04542 &#32;&#32;&#32;&#32;}
04543 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
04544 &#32;&#32;&#32;&#32;&#32;&#32;line[numChars++]&#32;=&#32;c;
04545 &#32;&#32;}
04546 
04547 &#32;&#32;fclose(fp);
04548 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
04549 }
04550 
04551 <emphasis role="comment">/******************************************************************************/</emphasis>
04552 <emphasis role="comment">/*&#32;Command&#32;line&#32;processing.&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*/</emphasis>
04553 <emphasis role="comment">/******************************************************************************/</emphasis>
<anchor xml:id="_c-index-test_8c_source_1l04554"/><link linkend="_c-index-test_8c_1ab187a790df1b433ed87b4e13209297d6">04554</link> <emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_c-index-test_8c_1ab187a790df1b433ed87b4e13209297d6">write_pch_file</link>(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*filename,&#32;<emphasis role="keywordtype">int</emphasis>&#32;argc,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*argv[])&#32;{
04555 &#32;&#32;CXIndex&#32;Idx;
04556 &#32;&#32;CXTranslationUnit&#32;TU;
04557 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>CXUnsavedFile&#32;*unsaved_files&#32;=&#32;0;
04558 &#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;num_unsaved_files&#32;=&#32;0;
04559 &#32;&#32;<emphasis role="keyword">enum</emphasis>&#32;CXErrorCode&#32;Err;
04560 &#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;result&#32;=&#32;0;
04561 &#32;&#32;
04562 &#32;&#32;Idx&#32;=&#32;<link linkend="__c_index_8cpp_1a3420c8e7e10a7ff7906130b207cbb763">clang_createIndex</link>(<emphasis role="comment">/*&#32;excludeDeclsFromPCH&#32;*/</emphasis>1,&#32;<emphasis role="comment">/*&#32;displayDiagnostics=*/</emphasis>1);
04563 &#32;&#32;
04564 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(parse_remapped_files(argc,&#32;argv,&#32;0,&#32;&amp;unsaved_files,&#32;&amp;num_unsaved_files))&#32;{
04565 &#32;&#32;&#32;&#32;<link linkend="__c_index_8cpp_1aea91ddf5e996cba0de2f781cb17db1d5">clang_disposeIndex</link>(Idx);
04566 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;-1;
04567 &#32;&#32;}
04568 
04569 &#32;&#32;Err&#32;=&#32;<link linkend="__c_index_8cpp_1a3ddd508cc891d95a82b747955738249a">clang_parseTranslationUnit2</link>(
04570 &#32;&#32;&#32;&#32;&#32;&#32;Idx,&#32;0,&#32;argv&#32;+&#32;num_unsaved_files,&#32;argc&#32;-&#32;num_unsaved_files,
04571 &#32;&#32;&#32;&#32;&#32;&#32;unsaved_files,&#32;num_unsaved_files,
04572 &#32;&#32;&#32;&#32;&#32;&#32;CXTranslationUnit_Incomplete&#32;|
04573 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;CXTranslationUnit_DetailedPreprocessingRecord&#32;|
04574 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;CXTranslationUnit_ForSerialization,
04575 &#32;&#32;&#32;&#32;&#32;&#32;&amp;TU);
04576 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(Err&#32;!=&#32;CXError_Success)&#32;{
04577 &#32;&#32;&#32;&#32;fprintf(stderr,&#32;<emphasis role="stringliteral">&quot;Unable&#32;to&#32;load&#32;translation&#32;unit!\n&quot;</emphasis>);
04578 &#32;&#32;&#32;&#32;describeLibclangFailure(Err);
04579 &#32;&#32;&#32;&#32;<link linkend="_c-index-test_8c_1af28d9933e8a8fd14e8394a1e7f9f6379">free_remapped_files</link>(unsaved_files,&#32;num_unsaved_files);
04580 &#32;&#32;&#32;&#32;<link linkend="__c_index_8cpp_1a3af88c13004a1954abd6dc956faff3be">clang_disposeTranslationUnit</link>(TU);
04581 &#32;&#32;&#32;&#32;<link linkend="__c_index_8cpp_1aea91ddf5e996cba0de2f781cb17db1d5">clang_disposeIndex</link>(Idx);
04582 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;1;
04583 &#32;&#32;}
04584 
04585 &#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(<link linkend="__c_index_8cpp_1a1be3baac9f48e48ba4119cbcdaf35391">clang_saveTranslationUnit</link>(TU,&#32;filename,&#32;
04586 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__c_index_8cpp_1af7f47ec6ccc9f05c092f813102672290">clang_defaultSaveOptions</link>(TU)))&#32;{
04587 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXSaveError_None:
04588 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
04589 
04590 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXSaveError_TranslationErrors:
04591 &#32;&#32;&#32;&#32;fprintf(stderr,&#32;<emphasis role="stringliteral">&quot;Unable&#32;to&#32;write&#32;PCH&#32;file&#32;%s:&#32;translation&#32;errors\n&quot;</emphasis>,&#32;
04592 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;filename);
04593 &#32;&#32;&#32;&#32;result&#32;=&#32;2;&#32;&#32;&#32;&#32;
04594 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
04595 
04596 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXSaveError_InvalidTU:
04597 &#32;&#32;&#32;&#32;fprintf(stderr,&#32;<emphasis role="stringliteral">&quot;Unable&#32;to&#32;write&#32;PCH&#32;file&#32;%s:&#32;invalid&#32;translation&#32;unit\n&quot;</emphasis>,&#32;
04598 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;filename);
04599 &#32;&#32;&#32;&#32;result&#32;=&#32;3;&#32;&#32;&#32;&#32;
04600 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
04601 
04602 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXSaveError_Unknown:
04603 &#32;&#32;<emphasis role="keywordflow">default</emphasis>:
04604 &#32;&#32;&#32;&#32;fprintf(stderr,&#32;<emphasis role="stringliteral">&quot;Unable&#32;to&#32;write&#32;PCH&#32;file&#32;%s:&#32;unknown&#32;error&#32;\n&quot;</emphasis>,&#32;filename);
04605 &#32;&#32;&#32;&#32;result&#32;=&#32;1;
04606 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
04607 &#32;&#32;}
04608 &#32;&#32;
04609 &#32;&#32;<link linkend="__c_index_8cpp_1a3af88c13004a1954abd6dc956faff3be">clang_disposeTranslationUnit</link>(TU);
04610 &#32;&#32;<link linkend="_c-index-test_8c_1af28d9933e8a8fd14e8394a1e7f9f6379">free_remapped_files</link>(unsaved_files,&#32;num_unsaved_files);
04611 &#32;&#32;<link linkend="__c_index_8cpp_1aea91ddf5e996cba0de2f781cb17db1d5">clang_disposeIndex</link>(Idx);
04612 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;result;
04613 }
04614 
04615 <emphasis role="comment">/******************************************************************************/</emphasis>
04616 <emphasis role="comment">/*&#32;Serialized&#32;diagnostics.&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*/</emphasis>
04617 <emphasis role="comment">/******************************************************************************/</emphasis>
04618 
04619 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*getDiagnosticCodeStr(<emphasis role="keyword">enum</emphasis>&#32;CXLoadDiag_Error&#32;error)&#32;{
04620 &#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(error)&#32;{
04621 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXLoadDiag_CannotLoad:&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="stringliteral">&quot;Cannot&#32;Load&#32;File&quot;</emphasis>;
04622 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXLoadDiag_None:&#32;<emphasis role="keywordflow">break</emphasis>;
04623 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXLoadDiag_Unknown:&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="stringliteral">&quot;Unknown&quot;</emphasis>;
04624 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXLoadDiag_InvalidFile:&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="stringliteral">&quot;Invalid&#32;File&quot;</emphasis>;
04625 &#32;&#32;}
04626 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="stringliteral">&quot;None&quot;</emphasis>;
04627 }
04628 
04629 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*getSeverityString(<emphasis role="keyword">enum</emphasis>&#32;CXDiagnosticSeverity&#32;severity)&#32;{
04630 &#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(severity)&#32;{
04631 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXDiagnostic_Note:&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="stringliteral">&quot;note&quot;</emphasis>;
04632 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXDiagnostic_Error:&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="stringliteral">&quot;error&quot;</emphasis>;
04633 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXDiagnostic_Fatal:&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="stringliteral">&quot;fatal&quot;</emphasis>;
04634 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXDiagnostic_Ignored:&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="stringliteral">&quot;ignored&quot;</emphasis>;
04635 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;CXDiagnostic_Warning:&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="stringliteral">&quot;warning&quot;</emphasis>;
04636 &#32;&#32;}
04637 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="stringliteral">&quot;unknown&quot;</emphasis>;
04638 }
04639 
04640 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;printIndent(<emphasis role="keywordtype">unsigned</emphasis>&#32;indent)&#32;{
04641 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(indent&#32;==&#32;0)
04642 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
04643 &#32;&#32;fprintf(stderr,&#32;<emphasis role="stringliteral">&quot;+&quot;</emphasis>);
04644 &#32;&#32;--indent;
04645 &#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(indent&#32;&gt;&#32;0)&#32;{
04646 &#32;&#32;&#32;&#32;fprintf(stderr,&#32;<emphasis role="stringliteral">&quot;-&quot;</emphasis>);
04647 &#32;&#32;&#32;&#32;--indent;
04648 &#32;&#32;}
04649 }
04650 
04651 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;printLocation(CXSourceLocation&#32;L)&#32;{
04652 &#32;&#32;CXFile&#32;File;
04653 &#32;&#32;CXString&#32;FileName;
04654 &#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;line,&#32;column,&#32;offset;
04655 
04656 &#32;&#32;<link linkend="__c_x_source_location_8cpp_1ab2dea99bd78deea3e50564414208687b">clang_getExpansionLocation</link>(L,&#32;&amp;File,&#32;&amp;line,&#32;&amp;column,&#32;&amp;offset);
04657 &#32;&#32;FileName&#32;=&#32;<link linkend="__c_index_8cpp_1a263c34f5782353186990b2c990d648fc">clang_getFileName</link>(File);
04658 
04659 &#32;&#32;fprintf(stderr,&#32;<emphasis role="stringliteral">&quot;%s:%d:%d&quot;</emphasis>,&#32;<link linkend="__c_x_string_8cpp_1acd478c1b1785e17c0fe377bd70a2195f">clang_getCString</link>(FileName),&#32;line,&#32;column);
04660 &#32;&#32;<link linkend="__c_x_string_8cpp_1a46c85f1255580ed186aa6f7380a06883">clang_disposeString</link>(FileName);
04661 }
04662 
04663 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;printRanges(CXDiagnostic&#32;D,&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;indent)&#32;{
04664 &#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;i,&#32;n&#32;=&#32;<link linkend="__c_index_diagnostic_8cpp_1a82fa973404e60cc1868e66b59f354064">clang_getDiagnosticNumRanges</link>(D);
04665 &#32;&#32;
04666 &#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(i&#32;=&#32;0;&#32;i&#32;&lt;&#32;n;&#32;++i)&#32;{
04667 &#32;&#32;&#32;&#32;CXSourceLocation&#32;Start,&#32;End;
04668 &#32;&#32;&#32;&#32;CXSourceRange&#32;SR&#32;=&#32;<link linkend="__c_index_diagnostic_8cpp_1a385c57af0c0b7bac661157a769254556">clang_getDiagnosticRange</link>(D,&#32;i);
04669 &#32;&#32;&#32;&#32;Start&#32;=&#32;<link linkend="__c_x_source_location_8cpp_1a14a10dd8d9a4069c4fc1a7be62f58874">clang_getRangeStart</link>(SR);
04670 &#32;&#32;&#32;&#32;End&#32;=&#32;<link linkend="__c_x_source_location_8cpp_1a146c4bda0251ee320dc6e4b1b3fbb919">clang_getRangeEnd</link>(SR);
04671 &#32;&#32;&#32;&#32;
04672 &#32;&#32;&#32;&#32;printIndent(indent);
04673 &#32;&#32;&#32;&#32;fprintf(stderr,&#32;<emphasis role="stringliteral">&quot;Range:&#32;&quot;</emphasis>);
04674 &#32;&#32;&#32;&#32;printLocation(Start);
04675 &#32;&#32;&#32;&#32;fprintf(stderr,&#32;<emphasis role="stringliteral">&quot;&#32;&quot;</emphasis>);
04676 &#32;&#32;&#32;&#32;printLocation(End);
04677 &#32;&#32;&#32;&#32;fprintf(stderr,&#32;<emphasis role="stringliteral">&quot;\n&quot;</emphasis>);
04678 &#32;&#32;}
04679 }
04680 
04681 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;printFixIts(CXDiagnostic&#32;D,&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;indent)&#32;{
04682 &#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;i,&#32;n&#32;=&#32;<link linkend="__c_index_diagnostic_8cpp_1a328fab9bb901e108adb1b5ec5f3ed748">clang_getDiagnosticNumFixIts</link>(D);
04683 &#32;&#32;fprintf(stderr,&#32;<emphasis role="stringliteral">&quot;Number&#32;FIXITs&#32;=&#32;%d\n&quot;</emphasis>,&#32;n);
04684 &#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(i&#32;=&#32;0&#32;;&#32;i&#32;&lt;&#32;n;&#32;++i)&#32;{
04685 &#32;&#32;&#32;&#32;CXSourceRange&#32;ReplacementRange;
04686 &#32;&#32;&#32;&#32;CXString&#32;text;
04687 &#32;&#32;&#32;&#32;text&#32;=&#32;<link linkend="__c_index_diagnostic_8cpp_1a3038a0534d19be1e8f0adc11373b3c69">clang_getDiagnosticFixIt</link>(D,&#32;i,&#32;&amp;ReplacementRange);
04688 &#32;&#32;&#32;&#32;
04689 &#32;&#32;&#32;&#32;printIndent(indent);
04690 &#32;&#32;&#32;&#32;fprintf(stderr,&#32;<emphasis role="stringliteral">&quot;FIXIT:&#32;(&quot;</emphasis>);
04691 &#32;&#32;&#32;&#32;printLocation(<link linkend="__c_x_source_location_8cpp_1a14a10dd8d9a4069c4fc1a7be62f58874">clang_getRangeStart</link>(ReplacementRange));
04692 &#32;&#32;&#32;&#32;fprintf(stderr,&#32;<emphasis role="stringliteral">&quot;&#32;-&#32;&quot;</emphasis>);
04693 &#32;&#32;&#32;&#32;printLocation(<link linkend="__c_x_source_location_8cpp_1a146c4bda0251ee320dc6e4b1b3fbb919">clang_getRangeEnd</link>(ReplacementRange));
04694 &#32;&#32;&#32;&#32;fprintf(stderr,&#32;<emphasis role="stringliteral">&quot;):&#32;\&quot;%s\&quot;\n&quot;</emphasis>,&#32;<link linkend="__c_x_string_8cpp_1acd478c1b1785e17c0fe377bd70a2195f">clang_getCString</link>(text));
04695 &#32;&#32;&#32;&#32;<link linkend="__c_x_string_8cpp_1a46c85f1255580ed186aa6f7380a06883">clang_disposeString</link>(text);
04696 &#32;&#32;}&#32;&#32;
04697 }
04698 
04699 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;printDiagnosticSet(CXDiagnosticSet&#32;Diags,&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;indent)&#32;{
04700 &#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;i,&#32;n;
04701 
04702 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!Diags)
04703 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
04704 &#32;&#32;
04705 &#32;&#32;n&#32;=&#32;<link linkend="__c_index_diagnostic_8cpp_1a9861abba19ec80dae4db68998828261d">clang_getNumDiagnosticsInSet</link>(Diags);
04706 &#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(i&#32;=&#32;0;&#32;i&#32;&lt;&#32;n;&#32;++i)&#32;{
04707 &#32;&#32;&#32;&#32;CXSourceLocation&#32;DiagLoc;
04708 &#32;&#32;&#32;&#32;CXDiagnostic&#32;D;
04709 &#32;&#32;&#32;&#32;CXFile&#32;File;
04710 &#32;&#32;&#32;&#32;CXString&#32;FileName,&#32;DiagSpelling,&#32;DiagOption,&#32;DiagCat;
04711 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;line,&#32;column,&#32;offset;
04712 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*FileNameStr&#32;=&#32;0,&#32;*DiagOptionStr&#32;=&#32;0,&#32;*DiagCatStr&#32;=&#32;0;
04713 &#32;&#32;&#32;&#32;
04714 &#32;&#32;&#32;&#32;D&#32;=&#32;<link linkend="__c_index_diagnostic_8cpp_1acc45fefa1e17eade2d10177d4ff77851">clang_getDiagnosticInSet</link>(Diags,&#32;i);
04715 &#32;&#32;&#32;&#32;DiagLoc&#32;=&#32;<link linkend="__c_index_diagnostic_8cpp_1a1e0502917ec39f222133358991a1dd0a">clang_getDiagnosticLocation</link>(D);
04716 &#32;&#32;&#32;&#32;<link linkend="__c_x_source_location_8cpp_1ab2dea99bd78deea3e50564414208687b">clang_getExpansionLocation</link>(DiagLoc,&#32;&amp;File,&#32;&amp;line,&#32;&amp;column,&#32;&amp;offset);
04717 &#32;&#32;&#32;&#32;FileName&#32;=&#32;<link linkend="__c_index_8cpp_1a263c34f5782353186990b2c990d648fc">clang_getFileName</link>(File);
04718 &#32;&#32;&#32;&#32;FileNameStr&#32;=&#32;<link linkend="__c_x_string_8cpp_1acd478c1b1785e17c0fe377bd70a2195f">clang_getCString</link>(FileName);
04719 &#32;&#32;&#32;&#32;DiagSpelling&#32;=&#32;<link linkend="__c_index_diagnostic_8cpp_1a72908dcfbd7b25addc6f7e1feeeb5bc1">clang_getDiagnosticSpelling</link>(D);
04720 
04721 &#32;&#32;&#32;&#32;printIndent(indent);
04722 &#32;&#32;&#32;&#32;
04723 &#32;&#32;&#32;&#32;fprintf(stderr,&#32;<emphasis role="stringliteral">&quot;%s:%d:%d:&#32;%s:&#32;%s&quot;</emphasis>,
04724 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;FileNameStr&#32;?&#32;FileNameStr&#32;:&#32;<emphasis role="stringliteral">&quot;(null)&quot;</emphasis>,
04725 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;line,
04726 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;column,
04727 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;getSeverityString(<link linkend="__c_index_diagnostic_8cpp_1a4acc9ff12cb403c96d56e87359dfc7c7">clang_getDiagnosticSeverity</link>(D)),
04728 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__c_x_string_8cpp_1acd478c1b1785e17c0fe377bd70a2195f">clang_getCString</link>(DiagSpelling));
04729 
04730 &#32;&#32;&#32;&#32;DiagOption&#32;=&#32;<link linkend="__c_index_diagnostic_8cpp_1ade154c72df0d1abe125b8b0e4dd568ba">clang_getDiagnosticOption</link>(D,&#32;0);
04731 &#32;&#32;&#32;&#32;DiagOptionStr&#32;=&#32;<link linkend="__c_x_string_8cpp_1acd478c1b1785e17c0fe377bd70a2195f">clang_getCString</link>(DiagOption);
04732 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(DiagOptionStr)&#32;{
04733 &#32;&#32;&#32;&#32;&#32;&#32;fprintf(stderr,&#32;<emphasis role="stringliteral">&quot;&#32;[%s]&quot;</emphasis>,&#32;DiagOptionStr);
04734 &#32;&#32;&#32;&#32;}
04735 &#32;&#32;&#32;&#32;
04736 &#32;&#32;&#32;&#32;DiagCat&#32;=&#32;<link linkend="__c_index_diagnostic_8cpp_1a0428e5b9db207a1495c9300f7cbeff4c">clang_getDiagnosticCategoryText</link>(D);
04737 &#32;&#32;&#32;&#32;DiagCatStr&#32;=&#32;<link linkend="__c_x_string_8cpp_1acd478c1b1785e17c0fe377bd70a2195f">clang_getCString</link>(DiagCat);
04738 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(DiagCatStr)&#32;{
04739 &#32;&#32;&#32;&#32;&#32;&#32;fprintf(stderr,&#32;<emphasis role="stringliteral">&quot;&#32;[%s]&quot;</emphasis>,&#32;DiagCatStr);
04740 &#32;&#32;&#32;&#32;}
04741 &#32;&#32;&#32;&#32;
04742 &#32;&#32;&#32;&#32;fprintf(stderr,&#32;<emphasis role="stringliteral">&quot;\n&quot;</emphasis>);
04743 &#32;&#32;&#32;&#32;
04744 &#32;&#32;&#32;&#32;printRanges(D,&#32;indent);
04745 &#32;&#32;&#32;&#32;printFixIts(D,&#32;indent);
04746 &#32;&#32;&#32;&#32;
04747 &#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;Print&#32;subdiagnostics.&#32;*/</emphasis>
04748 &#32;&#32;&#32;&#32;printDiagnosticSet(<link linkend="__c_index_diagnostic_8cpp_1abca973dc6f01b106edd47a39f480dd8f">clang_getChildDiagnostics</link>(D),&#32;indent+2);
04749 
04750 &#32;&#32;&#32;&#32;<link linkend="__c_x_string_8cpp_1a46c85f1255580ed186aa6f7380a06883">clang_disposeString</link>(FileName);
04751 &#32;&#32;&#32;&#32;<link linkend="__c_x_string_8cpp_1a46c85f1255580ed186aa6f7380a06883">clang_disposeString</link>(DiagSpelling);
04752 &#32;&#32;&#32;&#32;<link linkend="__c_x_string_8cpp_1a46c85f1255580ed186aa6f7380a06883">clang_disposeString</link>(DiagOption);
04753 &#32;&#32;&#32;&#32;<link linkend="__c_x_string_8cpp_1a46c85f1255580ed186aa6f7380a06883">clang_disposeString</link>(DiagCat);
04754 &#32;&#32;}&#32;&#32;
04755 }
04756 
04757 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;read_diagnostics(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*filename)&#32;{
04758 &#32;&#32;<emphasis role="keyword">enum</emphasis>&#32;CXLoadDiag_Error&#32;error;
04759 &#32;&#32;CXString&#32;errorString;
04760 &#32;&#32;CXDiagnosticSet&#32;Diags&#32;=&#32;0;
04761 &#32;&#32;
04762 &#32;&#32;Diags&#32;=&#32;<link linkend="__c_x_loaded_diagnostic_8cpp_1a46a35c93cdedc31028100374d7856c8b">clang_loadDiagnostics</link>(filename,&#32;&amp;error,&#32;&amp;errorString);
04763 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!Diags)&#32;{
04764 &#32;&#32;&#32;&#32;fprintf(stderr,&#32;<emphasis role="stringliteral">&quot;Trouble&#32;deserializing&#32;file&#32;(%s):&#32;%s\n&quot;</emphasis>,
04765 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;getDiagnosticCodeStr(error),
04766 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__c_x_string_8cpp_1acd478c1b1785e17c0fe377bd70a2195f">clang_getCString</link>(errorString));
04767 &#32;&#32;&#32;&#32;<link linkend="__c_x_string_8cpp_1a46c85f1255580ed186aa6f7380a06883">clang_disposeString</link>(errorString);
04768 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;1;
04769 &#32;&#32;}
04770 &#32;&#32;
04771 &#32;&#32;printDiagnosticSet(Diags,&#32;0);
04772 &#32;&#32;fprintf(stderr,&#32;<emphasis role="stringliteral">&quot;Number&#32;of&#32;diagnostics:&#32;%d\n&quot;</emphasis>,
04773 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__c_index_diagnostic_8cpp_1a9861abba19ec80dae4db68998828261d">clang_getNumDiagnosticsInSet</link>(Diags));
04774 &#32;&#32;<link linkend="__c_index_diagnostic_8cpp_1a0b2786b08bcfa94c6aebdb68249fcd85">clang_disposeDiagnosticSet</link>(Diags);
04775 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
04776 }
04777 
04778 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;perform_print_build_session_timestamp(<emphasis role="keywordtype">void</emphasis>)&#32;{
04779 &#32;&#32;printf(<emphasis role="stringliteral">&quot;%lld\n&quot;</emphasis>,&#32;<link linkend="__build_system_8cpp_1a07391c5aa13ea56a8de2076ce2e292ff">clang_getBuildSessionTimestamp</link>());
04780 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
04781 }
04782 
04783 <emphasis role="comment">/******************************************************************************/</emphasis>
04784 <emphasis role="comment">/*&#32;Command&#32;line&#32;processing.&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*/</emphasis>
04785 <emphasis role="comment">/******************************************************************************/</emphasis>
04786 
04787 <emphasis role="keyword">static</emphasis>&#32;CXCursorVisitor&#32;GetVisitor(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*s)&#32;{
04788 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(s[0]&#32;==&#32;<emphasis role="charliteral">&apos;\0&apos;</emphasis>)
04789 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_c-index-test_8c_1a592066faf85d73bd5a13ca28d5aca47d">FilteredPrintingVisitor</link>;
04790 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(strcmp(s,&#32;<emphasis role="stringliteral">&quot;-usrs&quot;</emphasis>)&#32;==&#32;0)
04791 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_c-index-test_8c_1a0511093879dc5155579f47448dc7f35a">USRVisitor</link>;
04792 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(strncmp(s,&#32;<emphasis role="stringliteral">&quot;-memory-usage&quot;</emphasis>,&#32;13)&#32;==&#32;0)
04793 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;GetVisitor(s&#32;+&#32;13);
04794 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;NULL;
04795 }
04796 
04797 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;print_usage(<emphasis role="keywordtype">void</emphasis>)&#32;{
04798 &#32;&#32;fprintf(stderr,
04799 &#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;usage:&#32;c-index-test&#32;-code-completion-at=&lt;site&gt;&#32;&lt;compiler&#32;arguments&gt;\n&quot;</emphasis>
04800 &#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;&#32;&#32;&#32;&#32;&#32;&#32;&#32;c-index-test&#32;-code-completion-timing=&lt;site&gt;&#32;&lt;compiler&#32;arguments&gt;\n&quot;</emphasis>
04801 &#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;&#32;&#32;&#32;&#32;&#32;&#32;&#32;c-index-test&#32;-cursor-at=&lt;site&gt;&#32;&lt;compiler&#32;arguments&gt;\n&quot;</emphasis>
04802 &#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;&#32;&#32;&#32;&#32;&#32;&#32;&#32;c-index-test&#32;-evaluate-cursor-at=&lt;site&gt;&#32;&lt;compiler&#32;arguments&gt;\n&quot;</emphasis>
04803 &#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;&#32;&#32;&#32;&#32;&#32;&#32;&#32;c-index-test&#32;-get-macro-info-cursor-at=&lt;site&gt;&#32;&lt;compiler&#32;arguments&gt;\n&quot;</emphasis>
04804 &#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;&#32;&#32;&#32;&#32;&#32;&#32;&#32;c-index-test&#32;-file-refs-at=&lt;site&gt;&#32;&lt;compiler&#32;arguments&gt;\n&quot;</emphasis>
04805 &#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;&#32;&#32;&#32;&#32;&#32;&#32;&#32;c-index-test&#32;-file-includes-in=&lt;filename&gt;&#32;&lt;compiler&#32;arguments&gt;\n&quot;</emphasis>);
04806 &#32;&#32;fprintf(stderr,
04807 &#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;&#32;&#32;&#32;&#32;&#32;&#32;&#32;c-index-test&#32;-index-file&#32;[-check-prefix=&lt;FileCheck&#32;prefix&gt;]&#32;&lt;compiler&#32;arguments&gt;\n&quot;</emphasis>
04808 &#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;&#32;&#32;&#32;&#32;&#32;&#32;&#32;c-index-test&#32;-index-file-full&#32;[-check-prefix=&lt;FileCheck&#32;prefix&gt;]&#32;&lt;compiler&#32;arguments&gt;\n&quot;</emphasis>
04809 &#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;&#32;&#32;&#32;&#32;&#32;&#32;&#32;c-index-test&#32;-index-tu&#32;[-check-prefix=&lt;FileCheck&#32;prefix&gt;]&#32;&lt;AST&#32;file&gt;\n&quot;</emphasis>
04810 &#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;&#32;&#32;&#32;&#32;&#32;&#32;&#32;c-index-test&#32;-index-compile-db&#32;[-check-prefix=&lt;FileCheck&#32;prefix&gt;]&#32;&lt;compilation&#32;database&gt;\n&quot;</emphasis>
04811 &#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;&#32;&#32;&#32;&#32;&#32;&#32;&#32;c-index-test&#32;-test-file-scan&#32;&lt;AST&#32;file&gt;&#32;&lt;source&#32;file&gt;&#32;&quot;</emphasis>
04812 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;[FileCheck&#32;prefix]\n&quot;</emphasis>);
04813 &#32;&#32;fprintf(stderr,
04814 &#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;&#32;&#32;&#32;&#32;&#32;&#32;&#32;c-index-test&#32;-test-load-tu&#32;&lt;AST&#32;file&gt;&#32;&lt;symbol&#32;filter&gt;&#32;&quot;</emphasis>
04815 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;[FileCheck&#32;prefix]\n&quot;</emphasis>
04816 &#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;&#32;&#32;&#32;&#32;&#32;&#32;&#32;c-index-test&#32;-test-load-tu-usrs&#32;&lt;AST&#32;file&gt;&#32;&lt;symbol&#32;filter&gt;&#32;&quot;</emphasis>
04817 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;[FileCheck&#32;prefix]\n&quot;</emphasis>
04818 &#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;&#32;&#32;&#32;&#32;&#32;&#32;&#32;c-index-test&#32;-test-load-source&#32;&lt;symbol&#32;filter&gt;&#32;{&lt;args&gt;}*\n&quot;</emphasis>);
04819 &#32;&#32;fprintf(stderr,
04820 &#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;&#32;&#32;&#32;&#32;&#32;&#32;&#32;c-index-test&#32;-test-load-source-memory-usage&#32;&quot;</emphasis>
04821 &#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;&lt;symbol&#32;filter&gt;&#32;{&lt;args&gt;}*\n&quot;</emphasis>
04822 &#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;&#32;&#32;&#32;&#32;&#32;&#32;&#32;c-index-test&#32;-test-load-source-reparse&#32;&lt;trials&gt;&#32;&lt;symbol&#32;filter&gt;&#32;&quot;</emphasis>
04823 &#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&lt;args&gt;}*\n&quot;</emphasis>
04824 &#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;&#32;&#32;&#32;&#32;&#32;&#32;&#32;c-index-test&#32;-test-load-source-usrs&#32;&lt;symbol&#32;filter&gt;&#32;{&lt;args&gt;}*\n&quot;</emphasis>
04825 &#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;&#32;&#32;&#32;&#32;&#32;&#32;&#32;c-index-test&#32;-test-load-source-usrs-memory-usage&#32;&quot;</emphasis>
04826 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;&lt;symbol&#32;filter&gt;&#32;{&lt;args&gt;}*\n&quot;</emphasis>
04827 &#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;&#32;&#32;&#32;&#32;&#32;&#32;&#32;c-index-test&#32;-test-annotate-tokens=&lt;range&gt;&#32;{&lt;args&gt;}*\n&quot;</emphasis>
04828 &#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;&#32;&#32;&#32;&#32;&#32;&#32;&#32;c-index-test&#32;-test-inclusion-stack-source&#32;{&lt;args&gt;}*\n&quot;</emphasis>
04829 &#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;&#32;&#32;&#32;&#32;&#32;&#32;&#32;c-index-test&#32;-test-inclusion-stack-tu&#32;&lt;AST&#32;file&gt;\n&quot;</emphasis>);
04830 &#32;&#32;fprintf(stderr,
04831 &#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;&#32;&#32;&#32;&#32;&#32;&#32;&#32;c-index-test&#32;-test-print-linkage-source&#32;{&lt;args&gt;}*\n&quot;</emphasis>
04832 &#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;&#32;&#32;&#32;&#32;&#32;&#32;&#32;c-index-test&#32;-test-print-visibility&#32;{&lt;args&gt;}*\n&quot;</emphasis>
04833 &#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;&#32;&#32;&#32;&#32;&#32;&#32;&#32;c-index-test&#32;-test-print-type&#32;{&lt;args&gt;}*\n&quot;</emphasis>
04834 &#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;&#32;&#32;&#32;&#32;&#32;&#32;&#32;c-index-test&#32;-test-print-type-size&#32;{&lt;args&gt;}*\n&quot;</emphasis>
04835 &#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;&#32;&#32;&#32;&#32;&#32;&#32;&#32;c-index-test&#32;-test-print-bitwidth&#32;{&lt;args&gt;}*\n&quot;</emphasis>
04836 &#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;&#32;&#32;&#32;&#32;&#32;&#32;&#32;c-index-test&#32;-test-print-target-info&#32;{&lt;args&gt;}*\n&quot;</emphasis>
04837 &#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;&#32;&#32;&#32;&#32;&#32;&#32;&#32;c-index-test&#32;-test-print-type-declaration&#32;{&lt;args&gt;}*\n&quot;</emphasis>
04838 &#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;&#32;&#32;&#32;&#32;&#32;&#32;&#32;c-index-test&#32;-print-usr&#32;[&lt;CursorKind&gt;&#32;{&lt;args&gt;}]*\n&quot;</emphasis>
04839 &#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;&#32;&#32;&#32;&#32;&#32;&#32;&#32;c-index-test&#32;-print-usr-file&#32;&lt;file&gt;\n&quot;</emphasis>);
04840 &#32;&#32;fprintf(stderr,
04841 &#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;&#32;&#32;&#32;&#32;&#32;&#32;&#32;c-index-test&#32;-write-pch&#32;&lt;file&gt;&#32;&lt;compiler&#32;arguments&gt;\n&quot;</emphasis>
04842 &#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;&#32;&#32;&#32;&#32;&#32;&#32;&#32;c-index-test&#32;-compilation-db&#32;[lookup&#32;&lt;filename&gt;]&#32;database\n&quot;</emphasis>);
04843 &#32;&#32;fprintf(stderr,
04844 &#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;&#32;&#32;&#32;&#32;&#32;&#32;&#32;c-index-test&#32;-print-build-session-timestamp\n&quot;</emphasis>);
04845 &#32;&#32;fprintf(stderr,
04846 &#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;&#32;&#32;&#32;&#32;&#32;&#32;&#32;c-index-test&#32;-read-diagnostics&#32;&lt;file&gt;\n\n&quot;</emphasis>);
04847 &#32;&#32;fprintf(stderr,
04848 &#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;&#32;&lt;symbol&#32;filter&gt;&#32;values:\n%s&quot;</emphasis>,
04849 &#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;&#32;&#32;&#32;all&#32;-&#32;load&#32;all&#32;symbols,&#32;including&#32;those&#32;from&#32;PCH\n&quot;</emphasis>
04850 &#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;&#32;&#32;&#32;local&#32;-&#32;load&#32;all&#32;symbols&#32;except&#32;those&#32;in&#32;PCH\n&quot;</emphasis>
04851 &#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;&#32;&#32;&#32;category&#32;-&#32;only&#32;load&#32;ObjC&#32;categories&#32;(non-PCH)\n&quot;</emphasis>
04852 &#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;&#32;&#32;&#32;interface&#32;-&#32;only&#32;load&#32;ObjC&#32;interfaces&#32;(non-PCH)\n&quot;</emphasis>
04853 &#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;&#32;&#32;&#32;protocol&#32;-&#32;only&#32;load&#32;ObjC&#32;protocols&#32;(non-PCH)\n&quot;</emphasis>
04854 &#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;&#32;&#32;&#32;function&#32;-&#32;only&#32;load&#32;functions&#32;(non-PCH)\n&quot;</emphasis>
04855 &#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;&#32;&#32;&#32;typedef&#32;-&#32;only&#32;load&#32;typdefs&#32;(non-PCH)\n&quot;</emphasis>
04856 &#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;&#32;&#32;&#32;scan-function&#32;-&#32;scan&#32;function&#32;bodies&#32;(non-PCH)\n\n&quot;</emphasis>);
04857 }
04858 
04859 <emphasis role="comment">/***/</emphasis>
04860 
<anchor xml:id="_c-index-test_8c_source_1l04861"/><link linkend="_c-index-test_8c_1ae86978c3ec30e6ca2db06880dd4bfc26">04861</link> <emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_c-index-test_8c_1ae86978c3ec30e6ca2db06880dd4bfc26">cindextest_main</link>(<emphasis role="keywordtype">int</emphasis>&#32;argc,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;**argv)&#32;{
04862 &#32;&#32;<link linkend="__c_index_8cpp_1a459c002cff4b09901ca37e1ad44d3df3">clang_enableStackTraces</link>();
04863 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(argc&#32;&gt;&#32;2&#32;&amp;&amp;&#32;strcmp(argv[1],&#32;<emphasis role="stringliteral">&quot;-read-diagnostics&quot;</emphasis>)&#32;==&#32;0)
04864 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;read_diagnostics(argv[2]);
04865 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(argc&#32;&gt;&#32;2&#32;&amp;&amp;&#32;strstr(argv[1],&#32;<emphasis role="stringliteral">&quot;-code-completion-at=&quot;</emphasis>)&#32;==&#32;argv[1])
04866 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_c-index-test_8c_1a6cfa2a8406fea0e71a2700d8f58b8553">perform_code_completion</link>(argc,&#32;argv,&#32;0);
04867 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(argc&#32;&gt;&#32;2&#32;&amp;&amp;&#32;strstr(argv[1],&#32;<emphasis role="stringliteral">&quot;-code-completion-timing=&quot;</emphasis>)&#32;==&#32;argv[1])
04868 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_c-index-test_8c_1a6cfa2a8406fea0e71a2700d8f58b8553">perform_code_completion</link>(argc,&#32;argv,&#32;1);
04869 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(argc&#32;&gt;&#32;2&#32;&amp;&amp;&#32;strstr(argv[1],&#32;<emphasis role="stringliteral">&quot;-cursor-at=&quot;</emphasis>)&#32;==&#32;argv[1])
04870 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;inspect_cursor_at(argc,&#32;argv,&#32;<emphasis role="stringliteral">&quot;-cursor-at=&quot;</emphasis>,&#32;inspect_print_cursor);
04871 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(argc&#32;&gt;&#32;2&#32;&amp;&amp;&#32;strstr(argv[1],&#32;<emphasis role="stringliteral">&quot;-evaluate-cursor-at=&quot;</emphasis>)&#32;==&#32;argv[1])
04872 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;inspect_cursor_at(argc,&#32;argv,&#32;<emphasis role="stringliteral">&quot;-evaluate-cursor-at=&quot;</emphasis>,
04873 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;inspect_evaluate_cursor);
04874 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(argc&#32;&gt;&#32;2&#32;&amp;&amp;&#32;strstr(argv[1],&#32;<emphasis role="stringliteral">&quot;-get-macro-info-cursor-at=&quot;</emphasis>)&#32;==&#32;argv[1])
04875 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;inspect_cursor_at(argc,&#32;argv,&#32;<emphasis role="stringliteral">&quot;-get-macro-info-cursor-at=&quot;</emphasis>,
04876 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;inspect_macroinfo_cursor);
04877 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(argc&#32;&gt;&#32;2&#32;&amp;&amp;&#32;strstr(argv[1],&#32;<emphasis role="stringliteral">&quot;-file-refs-at=&quot;</emphasis>)&#32;==&#32;argv[1])
04878 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;find_file_refs_at(argc,&#32;argv);
04879 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(argc&#32;&gt;&#32;2&#32;&amp;&amp;&#32;strstr(argv[1],&#32;<emphasis role="stringliteral">&quot;-file-includes-in=&quot;</emphasis>)&#32;==&#32;argv[1])
04880 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;find_file_includes_in(argc,&#32;argv);
04881 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(argc&#32;&gt;&#32;2&#32;&amp;&amp;&#32;strcmp(argv[1],&#32;<emphasis role="stringliteral">&quot;-index-file&quot;</emphasis>)&#32;==&#32;0)
04882 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;index_file(argc&#32;-&#32;2,&#32;argv&#32;+&#32;2,&#32;<emphasis role="comment">/*full=*/</emphasis>0);
04883 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(argc&#32;&gt;&#32;2&#32;&amp;&amp;&#32;strcmp(argv[1],&#32;<emphasis role="stringliteral">&quot;-index-file-full&quot;</emphasis>)&#32;==&#32;0)
04884 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;index_file(argc&#32;-&#32;2,&#32;argv&#32;+&#32;2,&#32;<emphasis role="comment">/*full=*/</emphasis>1);
04885 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(argc&#32;&gt;&#32;2&#32;&amp;&amp;&#32;strcmp(argv[1],&#32;<emphasis role="stringliteral">&quot;-index-tu&quot;</emphasis>)&#32;==&#32;0)
04886 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;index_tu(argc&#32;-&#32;2,&#32;argv&#32;+&#32;2);
04887 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(argc&#32;&gt;&#32;2&#32;&amp;&amp;&#32;strcmp(argv[1],&#32;<emphasis role="stringliteral">&quot;-index-compile-db&quot;</emphasis>)&#32;==&#32;0)
04888 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;index_compile_db(argc&#32;-&#32;2,&#32;argv&#32;+&#32;2);
04889 &#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(argc&#32;&gt;=&#32;4&#32;&amp;&amp;&#32;strncmp(argv[1],&#32;<emphasis role="stringliteral">&quot;-test-load-tu&quot;</emphasis>,&#32;13)&#32;==&#32;0)&#32;{
04890 &#32;&#32;&#32;&#32;CXCursorVisitor&#32;I&#32;=&#32;GetVisitor(argv[1]&#32;+&#32;13);
04891 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(I)
04892 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_c-index-test_8c_1a8f72d274bbe0d8215085af669b08c72d">perform_test_load_tu</link>(argv[2],&#32;argv[3],&#32;argc&#32;&gt;=&#32;5&#32;?&#32;argv[4]&#32;:&#32;0,&#32;I,
04893 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;NULL);
04894 &#32;&#32;}
04895 &#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(argc&#32;&gt;=&#32;5&#32;&amp;&amp;&#32;strncmp(argv[1],&#32;<emphasis role="stringliteral">&quot;-test-load-source-reparse&quot;</emphasis>,&#32;25)&#32;==&#32;0){
04896 &#32;&#32;&#32;&#32;CXCursorVisitor&#32;I&#32;=&#32;GetVisitor(argv[1]&#32;+&#32;25);
04897 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(I)&#32;{
04898 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;trials&#32;=&#32;atoi(argv[2]);
04899 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_c-index-test_8c_1aea3df772c772b8ca80d93c100b3de16f">perform_test_reparse_source</link>(argc&#32;-&#32;4,&#32;argv&#32;+&#32;4,&#32;trials,&#32;argv[3],&#32;I,&#32;
04900 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;NULL);
04901 &#32;&#32;&#32;&#32;}
04902 &#32;&#32;}
04903 &#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(argc&#32;&gt;=&#32;4&#32;&amp;&amp;&#32;strncmp(argv[1],&#32;<emphasis role="stringliteral">&quot;-test-load-source&quot;</emphasis>,&#32;17)&#32;==&#32;0)&#32;{
04904 &#32;&#32;&#32;&#32;CXCursorVisitor&#32;I&#32;=&#32;GetVisitor(argv[1]&#32;+&#32;17);
04905 &#32;&#32;&#32;&#32;
04906 &#32;&#32;&#32;&#32;<link linkend="_c-index-test_8c_1a66dfbd9b90aeaaa39988cd8ea0bbc669">PostVisitTU</link>&#32;postVisit&#32;=&#32;0;
04907 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(strstr(argv[1],&#32;<emphasis role="stringliteral">&quot;-memory-usage&quot;</emphasis>))
04908 &#32;&#32;&#32;&#32;&#32;&#32;postVisit&#32;=&#32;<link linkend="_c-index-test_8c_1ad807e8418e9685a5284b2bbb776ade49">PrintMemoryUsage</link>;
04909 &#32;&#32;&#32;&#32;
04910 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(I)
04911 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_c-index-test_8c_1adae363afaf561553359800991169ce1c">perform_test_load_source</link>(argc&#32;-&#32;3,&#32;argv&#32;+&#32;3,&#32;argv[2],&#32;I,
04912 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;postVisit);
04913 &#32;&#32;}
04914 &#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(argc&#32;&gt;=&#32;3&#32;&amp;&amp;&#32;strcmp(argv[1],&#32;<emphasis role="stringliteral">&quot;-single-file-parse&quot;</emphasis>)&#32;==&#32;0)
04915 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;perform_single_file_parse(argv[2]);
04916 &#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(argc&#32;&gt;=&#32;3&#32;&amp;&amp;&#32;strcmp(argv[1],&#32;<emphasis role="stringliteral">&quot;-retain-excluded-conditional-blocks&quot;</emphasis>)&#32;==&#32;0)
04917 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;perform_file_retain_excluded_cb(argv[2]);
04918 &#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(argc&#32;&gt;=&#32;4&#32;&amp;&amp;&#32;strcmp(argv[1],&#32;<emphasis role="stringliteral">&quot;-test-file-scan&quot;</emphasis>)&#32;==&#32;0)
04919 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;perform_file_scan(argv[2],&#32;argv[3],
04920 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;argc&#32;&gt;=&#32;5&#32;?&#32;argv[4]&#32;:&#32;0);
04921 &#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(argc&#32;&gt;&#32;2&#32;&amp;&amp;&#32;strstr(argv[1],&#32;<emphasis role="stringliteral">&quot;-test-annotate-tokens=&quot;</emphasis>)&#32;==&#32;argv[1])
04922 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_c-index-test_8c_1a8c63bc40ab1b76f5abf55eb8aad9a6d2">perform_token_annotation</link>(argc,&#32;argv);
04923 &#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(argc&#32;&gt;&#32;2&#32;&amp;&amp;&#32;strcmp(argv[1],&#32;<emphasis role="stringliteral">&quot;-test-inclusion-stack-source&quot;</emphasis>)&#32;==&#32;0)
04924 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_c-index-test_8c_1adae363afaf561553359800991169ce1c">perform_test_load_source</link>(argc&#32;-&#32;2,&#32;argv&#32;+&#32;2,&#32;<emphasis role="stringliteral">&quot;all&quot;</emphasis>,&#32;NULL,
04925 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_c-index-test_8c_1a271f309ab673d301e539e00164b71483">PrintInclusionStack</link>);
04926 &#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(argc&#32;&gt;&#32;2&#32;&amp;&amp;&#32;strcmp(argv[1],&#32;<emphasis role="stringliteral">&quot;-test-inclusion-stack-tu&quot;</emphasis>)&#32;==&#32;0)
04927 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_c-index-test_8c_1a8f72d274bbe0d8215085af669b08c72d">perform_test_load_tu</link>(argv[2],&#32;<emphasis role="stringliteral">&quot;all&quot;</emphasis>,&#32;NULL,&#32;NULL,
04928 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_c-index-test_8c_1a271f309ab673d301e539e00164b71483">PrintInclusionStack</link>);
04929 &#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(argc&#32;&gt;&#32;2&#32;&amp;&amp;&#32;strcmp(argv[1],&#32;<emphasis role="stringliteral">&quot;-test-print-linkage-source&quot;</emphasis>)&#32;==&#32;0)
04930 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_c-index-test_8c_1adae363afaf561553359800991169ce1c">perform_test_load_source</link>(argc&#32;-&#32;2,&#32;argv&#32;+&#32;2,&#32;<emphasis role="stringliteral">&quot;all&quot;</emphasis>,&#32;PrintLinkage,
04931 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;NULL);
04932 &#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(argc&#32;&gt;&#32;2&#32;&amp;&amp;&#32;strcmp(argv[1],&#32;<emphasis role="stringliteral">&quot;-test-print-visibility&quot;</emphasis>)&#32;==&#32;0)
04933 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_c-index-test_8c_1adae363afaf561553359800991169ce1c">perform_test_load_source</link>(argc&#32;-&#32;2,&#32;argv&#32;+&#32;2,&#32;<emphasis role="stringliteral">&quot;all&quot;</emphasis>,&#32;PrintVisibility,
04934 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;NULL);
04935 &#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(argc&#32;&gt;&#32;2&#32;&amp;&amp;&#32;strcmp(argv[1],&#32;<emphasis role="stringliteral">&quot;-test-print-type&quot;</emphasis>)&#32;==&#32;0)
04936 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_c-index-test_8c_1adae363afaf561553359800991169ce1c">perform_test_load_source</link>(argc&#32;-&#32;2,&#32;argv&#32;+&#32;2,&#32;<emphasis role="stringliteral">&quot;all&quot;</emphasis>,
04937 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;PrintType,&#32;0);
04938 &#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(argc&#32;&gt;&#32;2&#32;&amp;&amp;&#32;strcmp(argv[1],&#32;<emphasis role="stringliteral">&quot;-test-print-type-size&quot;</emphasis>)&#32;==&#32;0)
04939 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_c-index-test_8c_1adae363afaf561553359800991169ce1c">perform_test_load_source</link>(argc&#32;-&#32;2,&#32;argv&#32;+&#32;2,&#32;<emphasis role="stringliteral">&quot;all&quot;</emphasis>,
04940 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;PrintTypeSize,&#32;0);
04941 &#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(argc&#32;&gt;&#32;2&#32;&amp;&amp;&#32;strcmp(argv[1],&#32;<emphasis role="stringliteral">&quot;-test-print-type-declaration&quot;</emphasis>)&#32;==&#32;0)
04942 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_c-index-test_8c_1adae363afaf561553359800991169ce1c">perform_test_load_source</link>(argc&#32;-&#32;2,&#32;argv&#32;+&#32;2,&#32;<emphasis role="stringliteral">&quot;all&quot;</emphasis>,
04943 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;PrintTypeDeclaration,&#32;0);
04944 &#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(argc&#32;&gt;&#32;2&#32;&amp;&amp;&#32;strcmp(argv[1],&#32;<emphasis role="stringliteral">&quot;-test-print-decl-attributes&quot;</emphasis>)&#32;==&#32;0)
04945 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_c-index-test_8c_1adae363afaf561553359800991169ce1c">perform_test_load_source</link>(argc&#32;-&#32;2,&#32;argv&#32;+&#32;2,&#32;<emphasis role="stringliteral">&quot;all&quot;</emphasis>,
04946 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;PrintDeclAttributes,&#32;0);
04947 &#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(argc&#32;&gt;&#32;2&#32;&amp;&amp;&#32;strcmp(argv[1],&#32;<emphasis role="stringliteral">&quot;-test-print-bitwidth&quot;</emphasis>)&#32;==&#32;0)
04948 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_c-index-test_8c_1adae363afaf561553359800991169ce1c">perform_test_load_source</link>(argc&#32;-&#32;2,&#32;argv&#32;+&#32;2,&#32;<emphasis role="stringliteral">&quot;all&quot;</emphasis>,
04949 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;PrintBitWidth,&#32;0);
04950 &#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(argc&#32;&gt;&#32;2&#32;&amp;&amp;&#32;strcmp(argv[1],&#32;<emphasis role="stringliteral">&quot;-test-print-mangle&quot;</emphasis>)&#32;==&#32;0)
04951 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_c-index-test_8c_1a8f72d274bbe0d8215085af669b08c72d">perform_test_load_tu</link>(argv[2],&#32;<emphasis role="stringliteral">&quot;all&quot;</emphasis>,&#32;NULL,&#32;PrintMangledName,&#32;NULL);
04952 &#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(argc&#32;&gt;&#32;2&#32;&amp;&amp;&#32;strcmp(argv[1],&#32;<emphasis role="stringliteral">&quot;-test-print-manglings&quot;</emphasis>)&#32;==&#32;0)
04953 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_c-index-test_8c_1a8f72d274bbe0d8215085af669b08c72d">perform_test_load_tu</link>(argv[2],&#32;<emphasis role="stringliteral">&quot;all&quot;</emphasis>,&#32;NULL,&#32;PrintManglings,&#32;NULL);
04954 &#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(argc&#32;&gt;&#32;2&#32;&amp;&amp;&#32;strcmp(argv[1],&#32;<emphasis role="stringliteral">&quot;-test-print-target-info&quot;</emphasis>)&#32;==&#32;0)
04955 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;print_target_info(argc&#32;-&#32;2,&#32;argv&#32;+&#32;2);
04956 &#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(argc&#32;&gt;&#32;1&#32;&amp;&amp;&#32;strcmp(argv[1],&#32;<emphasis role="stringliteral">&quot;-print-usr&quot;</emphasis>)&#32;==&#32;0)&#32;{
04957 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(argc&#32;&gt;&#32;2)
04958 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_c-index-test_8c_1a846a90dd895ad8ab4948dfd8b42e88c1">print_usrs</link>(argv&#32;+&#32;2,&#32;argv&#32;+&#32;argc);
04959 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
04960 &#32;&#32;&#32;&#32;&#32;&#32;display_usrs();
04961 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;1;
04962 &#32;&#32;&#32;&#32;}
04963 &#32;&#32;}
04964 &#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(argc&#32;&gt;&#32;2&#32;&amp;&amp;&#32;strcmp(argv[1],&#32;<emphasis role="stringliteral">&quot;-print-usr-file&quot;</emphasis>)&#32;==&#32;0)
04965 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_c-index-test_8c_1a0847878e5ec5c011f566e2571cba418e">print_usrs_file</link>(argv[2]);
04966 &#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(argc&#32;&gt;&#32;2&#32;&amp;&amp;&#32;strcmp(argv[1],&#32;<emphasis role="stringliteral">&quot;-write-pch&quot;</emphasis>)&#32;==&#32;0)
04967 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_c-index-test_8c_1ab187a790df1b433ed87b4e13209297d6">write_pch_file</link>(argv[2],&#32;argc&#32;-&#32;3,&#32;argv&#32;+&#32;3);
04968 &#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(argc&#32;&gt;&#32;2&#32;&amp;&amp;&#32;strcmp(argv[1],&#32;<emphasis role="stringliteral">&quot;-compilation-db&quot;</emphasis>)&#32;==&#32;0)
04969 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;perform_test_compilation_db(argv[argc-1],&#32;argc&#32;-&#32;3,&#32;argv&#32;+&#32;2);
04970 &#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(argc&#32;==&#32;2&#32;&amp;&amp;&#32;strcmp(argv[1],&#32;<emphasis role="stringliteral">&quot;-print-build-session-timestamp&quot;</emphasis>)&#32;==&#32;0)
04971 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;perform_print_build_session_timestamp();
04972 
04973 &#32;&#32;print_usage();
04974 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;1;
04975 }
04976 
04977 <emphasis role="comment">/***/</emphasis>
04978 
04979 <emphasis role="comment">/*&#32;We&#32;intentionally&#32;run&#32;in&#32;a&#32;separate&#32;thread&#32;to&#32;ensure&#32;we&#32;at&#32;least&#32;minimal</emphasis>
04980 <emphasis role="comment">&#32;*&#32;testing&#32;of&#32;a&#32;multithreaded&#32;environment&#32;(for&#32;example,&#32;having&#32;a&#32;reduced&#32;stack</emphasis>
04981 <emphasis role="comment">&#32;*&#32;size).&#32;*/</emphasis>
04982 
04983 <emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_structthread__info">thread_info</link>&#32;{
<anchor xml:id="_c-index-test_8c_source_1l04984"/><link linkend="_structthread__info_1adc28060776617282f0c5a76431aec532">04984</link> &#32;&#32;int&#32;(*<link linkend="_structthread__info_1adc28060776617282f0c5a76431aec532">main_func</link>)(<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_structthread__info_1a78ff8f016b665b19193b194f8a659f96">argc</link>,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;**<link linkend="_structthread__info_1a734b6a1187acc993b18983573234e93f">argv</link>);
04985 &#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_structthread__info_1a78ff8f016b665b19193b194f8a659f96">argc</link>;
04986 &#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;**<link linkend="_structthread__info_1a734b6a1187acc993b18983573234e93f">argv</link>;
04987 &#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_structthread__info_1ad2caaa988d61b6beba0b6d681a6589ae">result</link>;
<anchor xml:id="_c-index-test_8c_source_1l04988"/><link linkend="_c-index-test_8c_1a6b1e111eeb327ab917852dfcd8ba3f72">04988</link> }&#32;<link linkend="_c-index-test_8c_1a6b1e111eeb327ab917852dfcd8ba3f72">thread_info</link>;
<anchor xml:id="_c-index-test_8c_source_1l04989"/><link linkend="_c-index-test_8c_1a91e96908610b154b9dfe897de0e12b79">04989</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_c-index-test_8c_1a91e96908610b154b9dfe897de0e12b79">thread_runner</link>(<emphasis role="keywordtype">void</emphasis>&#32;*client_data_v)&#32;{
04990 &#32;&#32;<link linkend="_structthread__info">thread_info</link>&#32;*client_data&#32;=&#32;client_data_v;
04991 &#32;&#32;client_data-&gt;<link linkend="_structthread__info_1ad2caaa988d61b6beba0b6d681a6589ae">result</link>&#32;=&#32;client_data-&gt;<link linkend="_structthread__info_1adc28060776617282f0c5a76431aec532">main_func</link>(client_data-&gt;<link linkend="_structthread__info_1a78ff8f016b665b19193b194f8a659f96">argc</link>,
04992 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;client_data-&gt;<link linkend="_structthread__info_1a734b6a1187acc993b18983573234e93f">argv</link>);
04993 }
04994 
04995 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;flush_atexit(<emphasis role="keywordtype">void</emphasis>)&#32;{
04996 &#32;&#32;<emphasis role="comment">/*&#32;stdout,&#32;and&#32;surprisingly&#32;even&#32;stderr,&#32;are&#32;not&#32;always&#32;flushed&#32;on&#32;process</emphasis>
04997 <emphasis role="comment">&#32;&#32;&#32;*&#32;and&#32;thread&#32;exit,&#32;particularly&#32;when&#32;the&#32;system&#32;is&#32;under&#32;heavy&#32;load.&#32;*/</emphasis>
04998 &#32;&#32;fflush(stdout);
04999 &#32;&#32;fflush(stderr);
05000 }
05001 
<anchor xml:id="_c-index-test_8c_source_1l05002"/><link linkend="_c-index-test_8c_1a217dbf8b442f20279ea00b898af96f52">05002</link> <emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_c-index-test_8c_1a217dbf8b442f20279ea00b898af96f52">main</link>(<emphasis role="keywordtype">int</emphasis>&#32;argc,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;**argv)&#32;{
05003 &#32;&#32;<link linkend="_structthread__info">thread_info</link>&#32;client_data;
05004 
05005 &#32;&#32;atexit(flush_atexit);
05006 
05007 <emphasis role="preprocessor">#ifdef&#32;CLANG_HAVE_LIBXML</emphasis>
05008 &#32;&#32;LIBXML_TEST_VERSION
05009 <emphasis role="preprocessor">#endif</emphasis>
05010 
05011 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(argc&#32;&gt;&#32;1&#32;&amp;&amp;&#32;strcmp(argv[1],&#32;<emphasis role="stringliteral">&quot;core&quot;</emphasis>)&#32;==&#32;0)
05012 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_c-index-test_8c_1a246a1675ed106163b7d4f141406d3005">indextest_core_main</link>(argc,&#32;argv);
05013 
05014 &#32;&#32;client_data.<link linkend="_structthread__info_1adc28060776617282f0c5a76431aec532">main_func</link>&#32;=&#32;<link linkend="_c-index-test_8c_1ae86978c3ec30e6ca2db06880dd4bfc26">cindextest_main</link>;
05015 &#32;&#32;client_data.<link linkend="_structthread__info_1a78ff8f016b665b19193b194f8a659f96">argc</link>&#32;=&#32;argc;
05016 &#32;&#32;client_data.<link linkend="_structthread__info_1a734b6a1187acc993b18983573234e93f">argv</link>&#32;=&#32;argv;
05017 
05018 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(getenv(<emphasis role="stringliteral">&quot;CINDEXTEST_NOTHREADS&quot;</emphasis>))
05019 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;client_data.<link linkend="_structthread__info_1adc28060776617282f0c5a76431aec532">main_func</link>(client_data.<link linkend="_structthread__info_1a78ff8f016b665b19193b194f8a659f96">argc</link>,&#32;client_data.<link linkend="_structthread__info_1a734b6a1187acc993b18983573234e93f">argv</link>);
05020 
05021 &#32;&#32;<link linkend="__c_index_8cpp_1aeb6cae453fe08d2720436c24d4629e8e">clang_executeOnThread</link>(<link linkend="_c-index-test_8c_1a91e96908610b154b9dfe897de0e12b79">thread_runner</link>,&#32;&amp;client_data,&#32;0);
05022 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;client_data.<link linkend="_structthread__info_1ad2caaa988d61b6beba0b6d681a6589ae">result</link>;
05023 }
</programlisting></section>
