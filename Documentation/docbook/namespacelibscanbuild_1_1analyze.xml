<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_namespacelibscanbuild_1_1analyze" xml:lang="en-US">
<title>libscanbuild.analyze Namespace Reference</title>
<indexterm><primary>libscanbuild.analyze</primary></indexterm>
<simplesect>
    <title>Functions    </title>
        <itemizedlist>
            <listitem><para>def <link linkend="_namespacelibscanbuild_1_1analyze_1ae936eaf80eeb685aa31309e4220f9d34">scan_build</link> ()</para>
</listitem>
            <listitem><para>def <link linkend="_namespacelibscanbuild_1_1analyze_1a4890a077471300798e0dba6a92777185">analyze_build</link> ()</para>
</listitem>
            <listitem><para>def <link linkend="_namespacelibscanbuild_1_1analyze_1a25b489e21548410a6f6ca7d6058e9a14">need_analyzer</link> (args)</para>
</listitem>
            <listitem><para>def <link linkend="_namespacelibscanbuild_1_1analyze_1ae8b395a86eacb56d96109622c9470389">prefix_with</link> (constant, pieces)</para>
</listitem>
            <listitem><para>def <link linkend="_namespacelibscanbuild_1_1analyze_1af93d444a00436010a8d789229d081555">get_ctu_config_from_args</link> (args)</para>
</listitem>
            <listitem><para>def <link linkend="_namespacelibscanbuild_1_1analyze_1aefbf8c32914e6957fc3c817938a50380">get_ctu_config_from_json</link> (ctu_conf_json)</para>
</listitem>
            <listitem><para>def <link linkend="_namespacelibscanbuild_1_1analyze_1aeaeee7d4608a93d865e797c3f2fdf9c9">create_global_ctu_extdef_map</link> (extdef_map_lines)</para>
</listitem>
            <listitem><para>def <link linkend="_namespacelibscanbuild_1_1analyze_1a5e3263c80b8029b2f2d0db3a29677db7">merge_ctu_extdef_maps</link> (ctudir)</para>
</listitem>
            <listitem><para>def <link linkend="_namespacelibscanbuild_1_1analyze_1a62edf1ce0e836c051970ac438b02283b">run_analyzer_parallel</link> (args)</para>
</listitem>
            <listitem><para>def <link linkend="_namespacelibscanbuild_1_1analyze_1a727f2164f89d25c11e2977655d3e6192">govern_analyzer_runs</link> (args)</para>
</listitem>
            <listitem><para>def <link linkend="_namespacelibscanbuild_1_1analyze_1ad19f0ab8fa3cf72e2ec036f7d94f2cee">setup_environment</link> (args)</para>
</listitem>
            <listitem><para>def <link linkend="_namespacelibscanbuild_1_1analyze_1a5ff26413a4ea96456e628941c35d6a2e">analyze_compiler_wrapper</link> ()</para>
</listitem>
            <listitem><para>def <link linkend="_namespacelibscanbuild_1_1analyze_1acefa7c45530ce05688972012172ed743">analyze_compiler_wrapper_impl</link> (result, execution)</para>
</listitem>
            <listitem><para>def <link linkend="_namespacelibscanbuild_1_1analyze_1acf09f49183e565d9bcfcada3eeae1547">report_directory</link> (hint, keep, output_format)</para>
</listitem>
            <listitem><para>def <link linkend="_namespacelibscanbuild_1_1analyze_1a9a2730f2c21ff9a529be335691f1c626">analyzer_params</link> (args)</para>
</listitem>
            <listitem><para>def <link linkend="_namespacelibscanbuild_1_1analyze_1a549c835dae0038a8679739773976f696">require</link> (required)</para>
</listitem>
            <listitem><para>def <link linkend="_namespacelibscanbuild_1_1analyze_1a505fccfeb836b113101687366a231f5f">run</link> (opts)</para>
</listitem>
            <listitem><para>def <link linkend="_namespacelibscanbuild_1_1analyze_1ab61521bbea87c4deac819a03ebf006fa">report_failure</link> (opts)</para>
</listitem>
            <listitem><para>def <link linkend="_namespacelibscanbuild_1_1analyze_1a30e68b322e290e30d92b1abd99d3adba">run_analyzer</link> (opts, continuation=<link linkend="_namespacelibscanbuild_1_1analyze_1ab61521bbea87c4deac819a03ebf006fa">report_failure</link>)</para>
</listitem>
            <listitem><para>def <link linkend="_namespacelibscanbuild_1_1analyze_1a8c0344dce632218625f617a4aa65ab26">extdef_map_list_src_to_ast</link> (extdef_src_list)</para>
</listitem>
            <listitem><para>def <link linkend="_namespacelibscanbuild_1_1analyze_1af51d594675cc6ce01414c9eaa6aa9b1b">ctu_collect_phase</link> (opts)</para>
</listitem>
            <listitem><para>def <link linkend="_namespacelibscanbuild_1_1analyze_1a3210ccc436bd8926927258fa9de1a2fb">dispatch_ctu</link> (opts, continuation=<link linkend="_namespacelibscanbuild_1_1analyze_1a30e68b322e290e30d92b1abd99d3adba">run_analyzer</link>)</para>
</listitem>
            <listitem><para>def <link linkend="_namespacelibscanbuild_1_1analyze_1aea9e81f4024a9845dfc90ebff7126107">filter_debug_flags</link> (opts, continuation=<link linkend="_namespacelibscanbuild_1_1analyze_1a3210ccc436bd8926927258fa9de1a2fb">dispatch_ctu</link>)</para>
</listitem>
            <listitem><para>def <link linkend="_namespacelibscanbuild_1_1analyze_1aebba13a0eaf395bb217502fb313f5254">language_check</link> (opts, continuation=<link linkend="_namespacelibscanbuild_1_1analyze_1aea9e81f4024a9845dfc90ebff7126107">filter_debug_flags</link>)</para>
</listitem>
            <listitem><para>def <link linkend="_namespacelibscanbuild_1_1analyze_1ae904fd60725ff1fb90431b995a50faef">arch_check</link> (opts, continuation=<link linkend="_namespacelibscanbuild_1_1analyze_1aebba13a0eaf395bb217502fb313f5254">language_check</link>)</para>
</listitem>
            <listitem><para>def <link linkend="_namespacelibscanbuild_1_1analyze_1a88d630b78f7304bed2cf7dbedcf0c495">classify_parameters</link> (command)</para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Variables    </title>
        <itemizedlist>
            <listitem><para>string <link linkend="_namespacelibscanbuild_1_1analyze_1a465bf942eb92f47670cfbf42f3d3b492">COMPILER_WRAPPER_CC</link> = &apos;analyze-cc&apos;</para>
</listitem>
            <listitem><para>string <link linkend="_namespacelibscanbuild_1_1analyze_1a093e4e01674825746c8dca2c3a0b3ad4">COMPILER_WRAPPER_CXX</link> = &apos;analyze-c++&apos;</para>
</listitem>
            <listitem><para>string <link linkend="_namespacelibscanbuild_1_1analyze_1a60479fc2f65fd6f8fa70ece6a555a32d">CTU_EXTDEF_MAP_FILENAME</link> = &apos;externalDefMap.txt&apos;</para>
</listitem>
            <listitem><para>string <link linkend="_namespacelibscanbuild_1_1analyze_1af69a2823a3919b8223b79278cec07fb3">CTU_TEMP_DEFMAP_FOLDER</link> = &apos;tmpExternalDefMaps&apos;</para>
</listitem>
            <listitem><para>dictionary <link linkend="_namespacelibscanbuild_1_1analyze_1ab246be544945b6a304ded48006891a91">IGNORED_FLAGS</link></para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Function Documentation</title>
<anchor xml:id="_namespacelibscanbuild_1_1analyze_1a4890a077471300798e0dba6a92777185"/>    <section>
    <title>analyze_build()</title>
<indexterm><primary>analyze_build</primary><secondary>libscanbuild.analyze</secondary></indexterm>
<indexterm><primary>libscanbuild.analyze</primary><secondary>analyze_build</secondary></indexterm>
<para><computeroutput>def libscanbuild.analyze.analyze_build ( )</computeroutput></para>
<para><literallayout><computeroutput> Entry point for analyze-build command. </computeroutput></literallayout> </para>
<para>
Definition at line <link linkend="_analyze_8py_source_1l00078">78</link> of file <link linkend="_analyze_8py_source">analyze.py</link>.</para>
<programlisting>00078 <emphasis role="keyword">def&#32;</emphasis><link linkend="_namespacelibscanbuild_1_1analyze_1a4890a077471300798e0dba6a92777185">analyze_build</link>():
00079 &#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;&quot;&quot;&#32;Entry&#32;point&#32;for&#32;analyze-build&#32;command.&#32;&quot;&quot;&quot;</emphasis>
00080 
00081 &#32;&#32;&#32;&#32;args&#32;=&#32;<link linkend="_namespacelibscanbuild_1_1arguments_1aa689de807ebb9310d2094c50a2d4f781">parse_args_for_analyze_build</link>()
00082 &#32;&#32;&#32;&#32;<emphasis role="comment">#&#32;will&#32;re-assign&#32;the&#32;report&#32;directory&#32;as&#32;new&#32;output</emphasis>
00083 &#32;&#32;&#32;&#32;<emphasis role="keyword">with</emphasis>&#32;<link linkend="_namespacelibscanbuild_1_1analyze_1acf09f49183e565d9bcfcada3eeae1547">report_directory</link>(args.output,&#32;args.keep_empty,&#32;args.output_format)&#32;<emphasis role="keyword">as</emphasis>&#32;args.output:
00084 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">#&#32;Run&#32;the&#32;analyzer&#32;against&#32;a&#32;compilation&#32;db.</emphasis>
00085 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacelibscanbuild_1_1analyze_1a727f2164f89d25c11e2977655d3e6192">govern_analyzer_runs</link>(args)
00086 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">#&#32;Cover&#32;report&#32;generation&#32;and&#32;bug&#32;counting.</emphasis>
00087 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;number_of_bugs&#32;=&#32;<link linkend="_namespacelibscanbuild_1_1report_1aa904f76cf35a4ed932c596460fbcbbc8">document</link>(args)
00088 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">#&#32;Set&#32;exit&#32;status&#32;as&#32;it&#32;was&#32;requested.</emphasis>
00089 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;number_of_bugs&#32;<emphasis role="keywordflow">if</emphasis>&#32;args.status_bugs&#32;<emphasis role="keywordflow">else</emphasis>&#32;0
00090 
00091 
</programlisting><para>
References <link linkend="_report_8py_source_1l00026">libscanbuild.report.document()</link>, <link linkend="_analyze_8py_source_1l00246">libscanbuild.analyze.govern_analyzer_runs()</link>, <link linkend="_arguments_8py_source_1l00045">libscanbuild.arguments.parse_args_for_analyze_build()</link>, and <link linkend="_analyze_8py_source_1l00340">libscanbuild.analyze.report_directory()</link>.</para>
    </section><anchor xml:id="_namespacelibscanbuild_1_1analyze_1a5ff26413a4ea96456e628941c35d6a2e"/>    <section>
    <title>analyze_compiler_wrapper()</title>
<indexterm><primary>analyze_compiler_wrapper</primary><secondary>libscanbuild.analyze</secondary></indexterm>
<indexterm><primary>libscanbuild.analyze</primary><secondary>analyze_compiler_wrapper</secondary></indexterm>
<para><computeroutput>def libscanbuild.analyze.analyze_compiler_wrapper ( )</computeroutput></para>
<para><literallayout><computeroutput> Entry point for `analyze-cc` and `analyze-c++` compiler wrappers. </computeroutput></literallayout> </para>
<para>
Definition at line <link linkend="_analyze_8py_source_1l00298">298</link> of file <link linkend="_analyze_8py_source">analyze.py</link>.</para>
<programlisting>00298 <emphasis role="keyword">def&#32;</emphasis><link linkend="_namespacelibscanbuild_1_1analyze_1a5ff26413a4ea96456e628941c35d6a2e">analyze_compiler_wrapper</link>():
00299 &#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;&quot;&quot;&#32;Entry&#32;point&#32;for&#32;`analyze-cc`&#32;and&#32;`analyze-c++`&#32;compiler&#32;wrappers.&#32;&quot;&quot;&quot;</emphasis>
00300 
00301 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespacelibscanbuild_1a395e584f9f6636d0f86868b62ef35780">compiler_wrapper</link>(analyze_compiler_wrapper_impl)
00302 
00303 
</programlisting><para>
References <link linkend="_lib_2libscanbuild_2____init_____8py_source_1l00144">libscanbuild.compiler_wrapper()</link>.</para>
    </section><anchor xml:id="_namespacelibscanbuild_1_1analyze_1acefa7c45530ce05688972012172ed743"/>    <section>
    <title>analyze_compiler_wrapper_impl()</title>
<indexterm><primary>analyze_compiler_wrapper_impl</primary><secondary>libscanbuild.analyze</secondary></indexterm>
<indexterm><primary>libscanbuild.analyze</primary><secondary>analyze_compiler_wrapper_impl</secondary></indexterm>
<para><computeroutput>def libscanbuild.analyze.analyze_compiler_wrapper_impl ( result,  execution)</computeroutput></para>
<para><literallayout><computeroutput> Implements analyzer compiler wrapper functionality. </computeroutput></literallayout> </para>
<para>
Definition at line <link linkend="_analyze_8py_source_1l00304">304</link> of file <link linkend="_analyze_8py_source">analyze.py</link>.</para>
<programlisting>00304 <emphasis role="keyword">def&#32;</emphasis><link linkend="_namespacelibscanbuild_1_1analyze_1acefa7c45530ce05688972012172ed743">analyze_compiler_wrapper_impl</link>(result,&#32;execution):
00305 &#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;&quot;&quot;&#32;Implements&#32;analyzer&#32;compiler&#32;wrapper&#32;functionality.&#32;&quot;&quot;&quot;</emphasis>
00306 
00307 &#32;&#32;&#32;&#32;<emphasis role="comment">#&#32;don&apos;t&#32;run&#32;analyzer&#32;when&#32;compilation&#32;fails.&#32;or&#32;when&#32;it&apos;s&#32;not&#32;requested.</emphasis>
00308 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;result&#32;<emphasis role="keywordflow">or</emphasis>&#32;<emphasis role="keywordflow">not</emphasis>&#32;os.getenv(<emphasis role="stringliteral">&apos;ANALYZE_BUILD_CLANG&apos;</emphasis>):
00309 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>
00310 
00311 &#32;&#32;&#32;&#32;<emphasis role="comment">#&#32;check&#32;is&#32;it&#32;a&#32;compilation?</emphasis>
00312 &#32;&#32;&#32;&#32;compilation&#32;=&#32;<link linkend="_namespacelibscanbuild_1_1compilation_1ae846942ed0e175486de0bbe3a258852c">split_command</link>(execution.cmd)
00313 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;compilation&#32;<emphasis role="keywordflow">is</emphasis>&#32;<emphasis role="keywordtype">None</emphasis>:
00314 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>
00315 &#32;&#32;&#32;&#32;<emphasis role="comment">#&#32;collect&#32;the&#32;needed&#32;parameters&#32;from&#32;environment,&#32;crash&#32;when&#32;missing</emphasis>
00316 &#32;&#32;&#32;&#32;parameters&#32;=&#32;{
00317 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&apos;clang&apos;</emphasis>:&#32;os.getenv(<emphasis role="stringliteral">&apos;ANALYZE_BUILD_CLANG&apos;</emphasis>),
00318 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&apos;output_dir&apos;</emphasis>:&#32;os.getenv(<emphasis role="stringliteral">&apos;ANALYZE_BUILD_REPORT_DIR&apos;</emphasis>),
00319 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&apos;output_format&apos;</emphasis>:&#32;os.getenv(<emphasis role="stringliteral">&apos;ANALYZE_BUILD_REPORT_FORMAT&apos;</emphasis>),
00320 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&apos;output_failures&apos;</emphasis>:&#32;os.getenv(<emphasis role="stringliteral">&apos;ANALYZE_BUILD_REPORT_FAILURES&apos;</emphasis>),
00321 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&apos;direct_args&apos;</emphasis>:&#32;os.getenv(<emphasis role="stringliteral">&apos;ANALYZE_BUILD_PARAMETERS&apos;</emphasis>,
00322 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&apos;&apos;</emphasis>).split(<emphasis role="stringliteral">&apos;&#32;&apos;</emphasis>),
00323 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&apos;force_debug&apos;</emphasis>:&#32;os.getenv(<emphasis role="stringliteral">&apos;ANALYZE_BUILD_FORCE_DEBUG&apos;</emphasis>),
00324 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&apos;directory&apos;</emphasis>:&#32;execution.cwd,
00325 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&apos;command&apos;</emphasis>:&#32;[execution.cmd[0],&#32;<emphasis role="stringliteral">&apos;-c&apos;</emphasis>]&#32;+&#32;compilation.flags,
00326 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&apos;ctu&apos;</emphasis>:&#32;<link linkend="_namespacelibscanbuild_1_1analyze_1aefbf8c32914e6957fc3c817938a50380">get_ctu_config_from_json</link>(os.getenv(<emphasis role="stringliteral">&apos;ANALYZE_BUILD_CTU&apos;</emphasis>))
00327 &#32;&#32;&#32;&#32;}
00328 &#32;&#32;&#32;&#32;<emphasis role="comment">#&#32;call&#32;static&#32;analyzer&#32;against&#32;the&#32;compilation</emphasis>
00329 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;source&#32;<emphasis role="keywordflow">in</emphasis>&#32;compilation.files:
00330 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;parameters.update({<emphasis role="stringliteral">&apos;file&apos;</emphasis>:&#32;source})
00331 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;logging.debug(<emphasis role="stringliteral">&apos;analyzer&#32;parameters&#32;%s&apos;</emphasis>,&#32;parameters)
00332 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;current&#32;=&#32;<link linkend="_namespacelibscanbuild_1_1analyze_1a505fccfeb836b113101687366a231f5f">run</link>(parameters)
00333 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">#&#32;display&#32;error&#32;message&#32;from&#32;the&#32;static&#32;analyzer</emphasis>
00334 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;current&#32;<emphasis role="keywordflow">is</emphasis>&#32;<emphasis role="keywordflow">not</emphasis>&#32;<emphasis role="keywordtype">None</emphasis>:
00335 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;line&#32;<emphasis role="keywordflow">in</emphasis>&#32;current[<emphasis role="stringliteral">&apos;error_output&apos;</emphasis>]:
00336 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;logging.info(line.rstrip())
00337 
00338 
00339 <emphasis role="preprocessor">@contextlib.contextmanager</emphasis>
</programlisting><para>
References <link linkend="_analyze_8py_source_1l00126">libscanbuild.analyze.get_ctu_config_from_json()</link>, <link linkend="_analyze_8py_source_1l00447">libscanbuild.analyze.run()</link>, and <link linkend="_compilation_8py_source_1l00059">libscanbuild.compilation.split_command()</link>.</para>
    </section><anchor xml:id="_namespacelibscanbuild_1_1analyze_1a9a2730f2c21ff9a529be335691f1c626"/>    <section>
    <title>analyzer_params()</title>
<indexterm><primary>analyzer_params</primary><secondary>libscanbuild.analyze</secondary></indexterm>
<indexterm><primary>libscanbuild.analyze</primary><secondary>analyzer_params</secondary></indexterm>
<para><computeroutput>def libscanbuild.analyze.analyzer_params ( args)</computeroutput></para>
<para><literallayout><computeroutput> A group of command line arguments can mapped to command
line arguments of the analyzer. This method generates those. </computeroutput></literallayout> </para>
<para>
Definition at line <link linkend="_analyze_8py_source_1l00379">379</link> of file <link linkend="_analyze_8py_source">analyze.py</link>.</para>
<programlisting>00379 <emphasis role="keyword">def&#32;</emphasis><link linkend="_namespacelibscanbuild_1_1analyze_1a9a2730f2c21ff9a529be335691f1c626">analyzer_params</link>(args):
00380 &#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;&quot;&quot;&#32;A&#32;group&#32;of&#32;command&#32;line&#32;arguments&#32;can&#32;mapped&#32;to&#32;command</emphasis>
00381 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;line&#32;arguments&#32;of&#32;the&#32;analyzer.&#32;This&#32;method&#32;generates&#32;those.&#32;&quot;&quot;&quot;</emphasis>
00382 
00383 &#32;&#32;&#32;&#32;result&#32;=&#32;[]
00384 
00385 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;args.store_model:
00386 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;result.append(<emphasis role="stringliteral">&apos;-analyzer-store={0}&apos;</emphasis>.format(args.store_model))
00387 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;args.constraints_model:
00388 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;result.append(<emphasis role="stringliteral">&apos;-analyzer-constraints={0}&apos;</emphasis>.format(
00389 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;args.constraints_model))
00390 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;args.internal_stats:
00391 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;result.append(<emphasis role="stringliteral">&apos;-analyzer-stats&apos;</emphasis>)
00392 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;args.analyze_headers:
00393 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;result.append(<emphasis role="stringliteral">&apos;-analyzer-opt-analyze-headers&apos;</emphasis>)
00394 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;args.stats:
00395 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;result.append(<emphasis role="stringliteral">&apos;-analyzer-checker=debug.Stats&apos;</emphasis>)
00396 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;args.maxloop:
00397 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;result.extend([<emphasis role="stringliteral">&apos;-analyzer-max-loop&apos;</emphasis>,&#32;str(args.maxloop)])
00398 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;args.output_format:
00399 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;result.append(<emphasis role="stringliteral">&apos;-analyzer-output={0}&apos;</emphasis>.format(args.output_format))
00400 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;args.analyzer_config:
00401 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;result.extend([<emphasis role="stringliteral">&apos;-analyzer-config&apos;</emphasis>,&#32;args.analyzer_config])
00402 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;args.verbose&#32;&gt;=&#32;4:
00403 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;result.append(<emphasis role="stringliteral">&apos;-analyzer-display-progress&apos;</emphasis>)
00404 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;args.plugins:
00405 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;result.extend(<link linkend="_namespacelibscanbuild_1_1analyze_1ae8b395a86eacb56d96109622c9470389">prefix_with</link>(<emphasis role="stringliteral">&apos;-load&apos;</emphasis>,&#32;args.plugins))
00406 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;args.enable_checker:
00407 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;checkers&#32;=&#32;<emphasis role="stringliteral">&apos;,&apos;</emphasis>.join(args.enable_checker)
00408 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;result.extend([<emphasis role="stringliteral">&apos;-analyzer-checker&apos;</emphasis>,&#32;checkers])
00409 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;args.disable_checker:
00410 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;checkers&#32;=&#32;<emphasis role="stringliteral">&apos;,&apos;</emphasis>.join(args.disable_checker)
00411 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;result.extend([<emphasis role="stringliteral">&apos;-analyzer-disable-checker&apos;</emphasis>,&#32;checkers])
00412 
00413 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespacelibscanbuild_1_1analyze_1ae8b395a86eacb56d96109622c9470389">prefix_with</link>(<emphasis role="stringliteral">&apos;-Xclang&apos;</emphasis>,&#32;result)
00414 
00415 
</programlisting><para>
References <link linkend="_analyze_8py_source_1l00105">libscanbuild.analyze.prefix_with()</link>.</para>
<para>
Referenced by <link linkend="_analyze_8py_source_1l00208">libscanbuild.analyze.run_analyzer_parallel()</link>, and <link linkend="_analyze_8py_source_1l00278">libscanbuild.analyze.setup_environment()</link>.</para>
    </section><anchor xml:id="_namespacelibscanbuild_1_1analyze_1ae904fd60725ff1fb90431b995a50faef"/>    <section>
    <title>arch_check()</title>
<indexterm><primary>arch_check</primary><secondary>libscanbuild.analyze</secondary></indexterm>
<indexterm><primary>libscanbuild.analyze</primary><secondary>arch_check</secondary></indexterm>
<para><computeroutput>def libscanbuild.analyze.arch_check ( opts,  continuation = <computeroutput><link linkend="_namespacelibscanbuild_1_1analyze_1aebba13a0eaf395bb217502fb313f5254">language_check</link></computeroutput>
)</computeroutput></para>
<para><literallayout><computeroutput> Do run analyzer through one of the given architectures. </computeroutput></literallayout> </para>
<para>
Definition at line <link linkend="_analyze_8py_source_1l00724">724</link> of file <link linkend="_analyze_8py_source">analyze.py</link>.</para>
<programlisting>00724 <emphasis role="keyword">def&#32;</emphasis><link linkend="_namespacelibscanbuild_1_1analyze_1ae904fd60725ff1fb90431b995a50faef">arch_check</link>(opts,&#32;continuation=language_check):
00725 &#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;&quot;&quot;&#32;Do&#32;run&#32;analyzer&#32;through&#32;one&#32;of&#32;the&#32;given&#32;architectures.&#32;&quot;&quot;&quot;</emphasis>
00726 
00727 &#32;&#32;&#32;&#32;disabled&#32;=&#32;frozenset({<emphasis role="stringliteral">&apos;ppc&apos;</emphasis>,&#32;<emphasis role="stringliteral">&apos;ppc64&apos;</emphasis>})
00728 
00729 &#32;&#32;&#32;&#32;received_list&#32;=&#32;opts.pop(<emphasis role="stringliteral">&apos;arch_list&apos;</emphasis>)
00730 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;received_list:
00731 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">#&#32;filter&#32;out&#32;disabled&#32;architectures&#32;and&#32;-arch&#32;switches</emphasis>
00732 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;filtered_list&#32;=&#32;[a&#32;<emphasis role="keywordflow">for</emphasis>&#32;a&#32;<emphasis role="keywordflow">in</emphasis>&#32;received_list&#32;<emphasis role="keywordflow">if</emphasis>&#32;a&#32;<emphasis role="keywordflow">not</emphasis>&#32;<emphasis role="keywordflow">in</emphasis>&#32;disabled]
00733 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;filtered_list:
00734 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">#&#32;There&#32;should&#32;be&#32;only&#32;one&#32;arch&#32;given&#32;(or&#32;the&#32;same&#32;multiple</emphasis>
00735 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">#&#32;times).&#32;If&#32;there&#32;are&#32;multiple&#32;arch&#32;are&#32;given&#32;and&#32;are&#32;not</emphasis>
00736 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">#&#32;the&#32;same,&#32;those&#32;should&#32;not&#32;change&#32;the&#32;pre-processing&#32;step.</emphasis>
00737 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">#&#32;But&#32;that&apos;s&#32;the&#32;only&#32;pass&#32;we&#32;have&#32;before&#32;run&#32;the&#32;analyzer.</emphasis>
00738 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;current&#32;=&#32;filtered_list.pop()
00739 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;logging.debug(<emphasis role="stringliteral">&apos;analysis,&#32;on&#32;arch:&#32;%s&apos;</emphasis>,&#32;current)
00740 
00741 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;opts.update({<emphasis role="stringliteral">&apos;flags&apos;</emphasis>:&#32;[<emphasis role="stringliteral">&apos;-arch&apos;</emphasis>,&#32;current]&#32;+&#32;opts[<emphasis role="stringliteral">&apos;flags&apos;</emphasis>]})
00742 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;continuation(opts)
00743 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>:
00744 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;logging.debug(<emphasis role="stringliteral">&apos;skip&#32;analysis,&#32;found&#32;not&#32;supported&#32;arch&apos;</emphasis>)
00745 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keywordtype">None</emphasis>
00746 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>:
00747 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;logging.debug(<emphasis role="stringliteral">&apos;analysis,&#32;on&#32;default&#32;arch&apos;</emphasis>)
00748 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;continuation(opts)
00749 
00750 
00751 <emphasis role="comment">#&#32;To&#32;have&#32;good&#32;results&#32;from&#32;static&#32;analyzer&#32;certain&#32;compiler&#32;options&#32;shall&#32;be</emphasis>
00752 <emphasis role="comment">#&#32;omitted.&#32;The&#32;compiler&#32;flag&#32;filtering&#32;only&#32;affects&#32;the&#32;static&#32;analyzer&#32;run.</emphasis>
00753 <emphasis role="comment">#</emphasis>
00754 <emphasis role="comment">#&#32;Keys&#32;are&#32;the&#32;option&#32;name,&#32;value&#32;number&#32;of&#32;options&#32;to&#32;skip</emphasis>
</programlisting><para>
Referenced by <link linkend="_analyze_8py_source_1l00694">libscanbuild.analyze.language_check()</link>, and <link linkend="_analyze_8py_source_1l00447">libscanbuild.analyze.run()</link>.</para>
    </section><anchor xml:id="_namespacelibscanbuild_1_1analyze_1a88d630b78f7304bed2cf7dbedcf0c495"/>    <section>
    <title>classify_parameters()</title>
<indexterm><primary>classify_parameters</primary><secondary>libscanbuild.analyze</secondary></indexterm>
<indexterm><primary>libscanbuild.analyze</primary><secondary>classify_parameters</secondary></indexterm>
<para><computeroutput>def libscanbuild.analyze.classify_parameters ( command)</computeroutput></para>
<para><literallayout><computeroutput> Prepare compiler flags (filters some and add others) and take out
language (-x) and architecture (-arch) flags for future processing. </computeroutput></literallayout> </para>
<para>
Definition at line <link linkend="_analyze_8py_source_1l00777">777</link> of file <link linkend="_analyze_8py_source">analyze.py</link>.</para>
<programlisting>00777 <emphasis role="keyword">def&#32;</emphasis><link linkend="_namespacelibscanbuild_1_1analyze_1a88d630b78f7304bed2cf7dbedcf0c495">classify_parameters</link>(command):
00778 &#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;&quot;&quot;&#32;Prepare&#32;compiler&#32;flags&#32;(filters&#32;some&#32;and&#32;add&#32;others)&#32;and&#32;take&#32;out</emphasis>
00779 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;language&#32;(-x)&#32;and&#32;architecture&#32;(-arch)&#32;flags&#32;for&#32;future&#32;processing.&#32;&quot;&quot;&quot;</emphasis>
00780 
00781 &#32;&#32;&#32;&#32;result&#32;=&#32;{
00782 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&apos;flags&apos;</emphasis>:&#32;[],&#32;&#32;<emphasis role="comment">#&#32;the&#32;filtered&#32;compiler&#32;flags</emphasis>
00783 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&apos;arch_list&apos;</emphasis>:&#32;[],&#32;&#32;<emphasis role="comment">#&#32;list&#32;of&#32;architecture&#32;flags</emphasis>
00784 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&apos;language&apos;</emphasis>:&#32;<emphasis role="keywordtype">None</emphasis>,&#32;&#32;<emphasis role="comment">#&#32;compilation&#32;language,&#32;None,&#32;if&#32;not&#32;specified</emphasis>
00785 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&apos;compiler&apos;</emphasis>:&#32;<link linkend="_namespacelibscanbuild_1_1compilation_1aaf9b4f3ae02989aece8394338bfe1cc8">compiler_language</link>(command)&#32;&#32;<emphasis role="comment">#&#32;&apos;c&apos;&#32;or&#32;&apos;c++&apos;</emphasis>
00786 &#32;&#32;&#32;&#32;}
00787 
00788 &#32;&#32;&#32;&#32;<emphasis role="comment">#&#32;iterate&#32;on&#32;the&#32;compile&#32;options</emphasis>
00789 &#32;&#32;&#32;&#32;args&#32;=&#32;iter(command[1:])
00790 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;arg&#32;<emphasis role="keywordflow">in</emphasis>&#32;args:
00791 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">#&#32;take&#32;arch&#32;flags&#32;into&#32;a&#32;separate&#32;basket</emphasis>
00792 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;arg&#32;==&#32;<emphasis role="stringliteral">&apos;-arch&apos;</emphasis>:
00793 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;result[<emphasis role="stringliteral">&apos;arch_list&apos;</emphasis>].append(next(args))
00794 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">#&#32;take&#32;language</emphasis>
00795 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">elif</emphasis>&#32;arg&#32;==&#32;<emphasis role="stringliteral">&apos;-x&apos;</emphasis>:
00796 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;result[<emphasis role="stringliteral">&apos;language&apos;</emphasis>]&#32;=&#32;next(args)
00797 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">#&#32;parameters&#32;which&#32;looks&#32;source&#32;file&#32;are&#32;not&#32;flags</emphasis>
00798 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">elif</emphasis>&#32;re.match(<emphasis role="stringliteral">r&apos;^[^-].+&apos;</emphasis>,&#32;arg)&#32;<emphasis role="keywordflow">and</emphasis>&#32;<link linkend="_namespacelibscanbuild_1_1compilation_1af89617a2af7528cbc172d5a911af9e07">classify_source</link>(arg):
00799 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">pass</emphasis>
00800 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">#&#32;ignore&#32;some&#32;flags</emphasis>
00801 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">elif</emphasis>&#32;arg&#32;<emphasis role="keywordflow">in</emphasis>&#32;IGNORED_FLAGS:
00802 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;count&#32;=&#32;IGNORED_FLAGS[arg]
00803 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;_&#32;<emphasis role="keywordflow">in</emphasis>&#32;range(count):
00804 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;next(args)
00805 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">#&#32;we&#32;don&apos;t&#32;care&#32;about&#32;extra&#32;warnings,&#32;but&#32;we&#32;should&#32;suppress&#32;ones</emphasis>
00806 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">#&#32;that&#32;we&#32;don&apos;t&#32;want&#32;to&#32;see.</emphasis>
00807 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">elif</emphasis>&#32;re.match(<emphasis role="stringliteral">r&apos;^-W.+&apos;</emphasis>,&#32;arg)&#32;<emphasis role="keywordflow">and</emphasis>&#32;<emphasis role="keywordflow">not</emphasis>&#32;re.match(<emphasis role="stringliteral">r&apos;^-Wno-.+&apos;</emphasis>,&#32;arg):
00808 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">pass</emphasis>
00809 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">#&#32;and&#32;consider&#32;everything&#32;else&#32;as&#32;compilation&#32;flag.</emphasis>
00810 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>:
00811 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;result[<emphasis role="stringliteral">&apos;flags&apos;</emphasis>].append(arg)
00812 
00813 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;result
</programlisting><para>
References <link linkend="_compilation_8py_source_1l00103">libscanbuild.compilation.classify_source()</link>, and <link linkend="_compilation_8py_source_1l00129">libscanbuild.compilation.compiler_language()</link>.</para>
<para>
Referenced by <link linkend="_analyze_8py_source_1l00447">libscanbuild.analyze.run()</link>.</para>
    </section><anchor xml:id="_namespacelibscanbuild_1_1analyze_1aeaeee7d4608a93d865e797c3f2fdf9c9"/>    <section>
    <title>create_global_ctu_extdef_map()</title>
<indexterm><primary>create_global_ctu_extdef_map</primary><secondary>libscanbuild.analyze</secondary></indexterm>
<indexterm><primary>libscanbuild.analyze</primary><secondary>create_global_ctu_extdef_map</secondary></indexterm>
<para><computeroutput>def libscanbuild.analyze.create_global_ctu_extdef_map ( extdef_map_lines)</computeroutput></para>
<para><literallayout><computeroutput> Takes iterator of individual external definition maps and creates a
global map keeping only unique names. We leave conflicting names out of
CTU.

:param extdef_map_lines: Contains the id of a definition (mangled name) and
the originating source (the corresponding AST file) name.
:type extdef_map_lines: Iterator of str.
:returns: Mangled name - AST file pairs.
:rtype: List of (str, str) tuples.
</computeroutput></literallayout> </para>
<para>
Definition at line <link linkend="_analyze_8py_source_1l00137">137</link> of file <link linkend="_analyze_8py_source">analyze.py</link>.</para>
<programlisting>00137 <emphasis role="keyword">def&#32;</emphasis><link linkend="_namespacelibscanbuild_1_1analyze_1aeaeee7d4608a93d865e797c3f2fdf9c9">create_global_ctu_extdef_map</link>(extdef_map_lines):
00138 &#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;&quot;&quot;&#32;Takes&#32;iterator&#32;of&#32;individual&#32;external&#32;definition&#32;maps&#32;and&#32;creates&#32;a</emphasis>
00139 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;global&#32;map&#32;keeping&#32;only&#32;unique&#32;names.&#32;We&#32;leave&#32;conflicting&#32;names&#32;out&#32;of</emphasis>
00140 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;CTU.</emphasis>
00141 <emphasis role="stringliteral"></emphasis>
00142 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;:param&#32;extdef_map_lines:&#32;Contains&#32;the&#32;id&#32;of&#32;a&#32;definition&#32;(mangled&#32;name)&#32;and</emphasis>
00143 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;the&#32;originating&#32;source&#32;(the&#32;corresponding&#32;AST&#32;file)&#32;name.</emphasis>
00144 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;:type&#32;extdef_map_lines:&#32;Iterator&#32;of&#32;str.</emphasis>
00145 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;:returns:&#32;Mangled&#32;name&#32;-&#32;AST&#32;file&#32;pairs.</emphasis>
00146 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;:rtype:&#32;List&#32;of&#32;(str,&#32;str)&#32;tuples.</emphasis>
00147 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&quot;&quot;&quot;</emphasis>
00148 
00149 &#32;&#32;&#32;&#32;mangled_to_asts&#32;=&#32;defaultdict(set)
00150 
00151 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;line&#32;<emphasis role="keywordflow">in</emphasis>&#32;extdef_map_lines:
00152 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;mangled_name,&#32;ast_file&#32;=&#32;line.strip().split(<emphasis role="stringliteral">&apos;&#32;&apos;</emphasis>,&#32;1)
00153 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;mangled_to_asts[mangled_name].add(ast_file)
00154 
00155 &#32;&#32;&#32;&#32;mangled_ast_pairs&#32;=&#32;[]
00156 
00157 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;mangled_name,&#32;ast_files&#32;<emphasis role="keywordflow">in</emphasis>&#32;mangled_to_asts.items():
00158 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;len(ast_files)&#32;==&#32;1:
00159 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;mangled_ast_pairs.append((mangled_name,&#32;next(iter(ast_files))))
00160 
00161 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;mangled_ast_pairs
00162 
00163 
</programlisting><para>
Referenced by <link linkend="_analyze_8py_source_1l00164">libscanbuild.analyze.merge_ctu_extdef_maps()</link>.</para>
    </section><anchor xml:id="_namespacelibscanbuild_1_1analyze_1af51d594675cc6ce01414c9eaa6aa9b1b"/>    <section>
    <title>ctu_collect_phase()</title>
<indexterm><primary>ctu_collect_phase</primary><secondary>libscanbuild.analyze</secondary></indexterm>
<indexterm><primary>libscanbuild.analyze</primary><secondary>ctu_collect_phase</secondary></indexterm>
<para><computeroutput>def libscanbuild.analyze.ctu_collect_phase ( opts)</computeroutput></para>
<para><literallayout><computeroutput> Preprocess source by generating all data needed by CTU analysis. </computeroutput></literallayout> </para>
<para>
Definition at line <link linkend="_analyze_8py_source_1l00597">597</link> of file <link linkend="_analyze_8py_source">analyze.py</link>.</para>
<programlisting>00597 <emphasis role="keyword">def&#32;</emphasis><link linkend="_namespacelibscanbuild_1_1analyze_1af51d594675cc6ce01414c9eaa6aa9b1b">ctu_collect_phase</link>(opts):
00598 &#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;&quot;&quot;&#32;Preprocess&#32;source&#32;by&#32;generating&#32;all&#32;data&#32;needed&#32;by&#32;CTU&#32;analysis.&#32;&quot;&quot;&quot;</emphasis>
00599 
00600 &#32;&#32;&#32;&#32;<emphasis role="keyword">def&#32;</emphasis>generate_ast(triple_arch):
00601 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;&quot;&quot;&#32;Generates&#32;ASTs&#32;for&#32;the&#32;current&#32;compilation&#32;command.&#32;&quot;&quot;&quot;</emphasis>
00602 
00603 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;args&#32;=&#32;opts[<emphasis role="stringliteral">&apos;direct_args&apos;</emphasis>]&#32;+&#32;opts[<emphasis role="stringliteral">&apos;flags&apos;</emphasis>]
00604 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ast_joined_path&#32;=&#32;os.path.join(opts[<emphasis role="stringliteral">&apos;ctu&apos;</emphasis>].dir,&#32;triple_arch,&#32;<emphasis role="stringliteral">&apos;ast&apos;</emphasis>,
00605 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;os.path.realpath(opts[<emphasis role="stringliteral">&apos;file&apos;</emphasis>])[1:]&#32;+
00606 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&apos;.ast&apos;</emphasis>)
00607 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ast_path&#32;=&#32;os.path.abspath(ast_joined_path)
00608 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ast_dir&#32;=&#32;os.path.dirname(ast_path)
00609 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keywordflow">not</emphasis>&#32;os.path.isdir(ast_dir):
00610 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">try</emphasis>:
00611 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;os.makedirs(ast_dir)
00612 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">except</emphasis>&#32;OSError:
00613 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">#&#32;In&#32;case&#32;an&#32;other&#32;process&#32;already&#32;created&#32;it.</emphasis>
00614 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">pass</emphasis>
00615 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ast_command&#32;=&#32;[opts[<emphasis role="stringliteral">&apos;clang&apos;</emphasis>],&#32;<emphasis role="stringliteral">&apos;-emit-ast&apos;</emphasis>]
00616 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ast_command.extend(args)
00617 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ast_command.append(<emphasis role="stringliteral">&apos;-w&apos;</emphasis>)
00618 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ast_command.append(opts[<emphasis role="stringliteral">&apos;file&apos;</emphasis>])
00619 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ast_command.append(<emphasis role="stringliteral">&apos;-o&apos;</emphasis>)
00620 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ast_command.append(ast_path)
00621 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;logging.debug(<emphasis role="stringliteral">&quot;Generating&#32;AST&#32;using&#32;&apos;%s&apos;&quot;</emphasis>,&#32;ast_command)
00622 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacelibscanbuild_1a243b8757d8cfbc0be023301a8b951d6c">run_command</link>(ast_command,&#32;cwd=opts[<emphasis role="stringliteral">&apos;directory&apos;</emphasis>])
00623 
00624 &#32;&#32;&#32;&#32;<emphasis role="keyword">def&#32;</emphasis>map_extdefs(triple_arch):
00625 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;&quot;&quot;&#32;Generate&#32;external&#32;definition&#32;map&#32;file&#32;for&#32;the&#32;current&#32;source.&#32;&quot;&quot;&quot;</emphasis>
00626 
00627 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;args&#32;=&#32;opts[<emphasis role="stringliteral">&apos;direct_args&apos;</emphasis>]&#32;+&#32;opts[<emphasis role="stringliteral">&apos;flags&apos;</emphasis>]
00628 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;extdefmap_command&#32;=&#32;[opts[<emphasis role="stringliteral">&apos;ctu&apos;</emphasis>].extdef_map_cmd]
00629 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;extdefmap_command.append(opts[<emphasis role="stringliteral">&apos;file&apos;</emphasis>])
00630 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;extdefmap_command.append(<emphasis role="stringliteral">&apos;--&apos;</emphasis>)
00631 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;extdefmap_command.extend(args)
00632 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;logging.debug(<emphasis role="stringliteral">&quot;Generating&#32;external&#32;definition&#32;map&#32;using&#32;&apos;%s&apos;&quot;</emphasis>,
00633 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;extdefmap_command)
00634 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;extdef_src_list&#32;=&#32;<link linkend="_namespacelibscanbuild_1a243b8757d8cfbc0be023301a8b951d6c">run_command</link>(extdefmap_command,&#32;cwd=opts[<emphasis role="stringliteral">&apos;directory&apos;</emphasis>])
00635 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;extdef_ast_list&#32;=&#32;<link linkend="_namespacelibscanbuild_1_1analyze_1a8c0344dce632218625f617a4aa65ab26">extdef_map_list_src_to_ast</link>(extdef_src_list)
00636 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;extern_defs_map_folder&#32;=&#32;os.path.join(opts[<emphasis role="stringliteral">&apos;ctu&apos;</emphasis>].dir,&#32;triple_arch,
00637 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;CTU_TEMP_DEFMAP_FOLDER)
00638 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keywordflow">not</emphasis>&#32;os.path.isdir(extern_defs_map_folder):
00639 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">try</emphasis>:
00640 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;os.makedirs(extern_defs_map_folder)
00641 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">except</emphasis>&#32;OSError:
00642 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">#&#32;In&#32;case&#32;an&#32;other&#32;process&#32;already&#32;created&#32;it.</emphasis>
00643 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">pass</emphasis>
00644 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;extdef_ast_list:
00645 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">with</emphasis>&#32;tempfile.NamedTemporaryFile(mode=<emphasis role="stringliteral">&apos;w&apos;</emphasis>,
00646 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;dir=extern_defs_map_folder,
00647 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;delete=<emphasis role="keyword">False</emphasis>)&#32;<emphasis role="keyword">as</emphasis>&#32;out_file:
00648 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;out_file.write(<emphasis role="stringliteral">&quot;\n&quot;</emphasis>.join(extdef_ast_list)&#32;+&#32;<emphasis role="stringliteral">&quot;\n&quot;</emphasis>)
00649 
00650 &#32;&#32;&#32;&#32;cwd&#32;=&#32;opts[<emphasis role="stringliteral">&apos;directory&apos;</emphasis>]
00651 &#32;&#32;&#32;&#32;cmd&#32;=&#32;[opts[<emphasis role="stringliteral">&apos;clang&apos;</emphasis>],&#32;<emphasis role="stringliteral">&apos;--analyze&apos;</emphasis>]&#32;+&#32;opts[<emphasis role="stringliteral">&apos;direct_args&apos;</emphasis>]&#32;+&#32;opts[<emphasis role="stringliteral">&apos;flags&apos;</emphasis>]&#32;\
00652 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;+&#32;[opts[<emphasis role="stringliteral">&apos;file&apos;</emphasis>]]
00653 &#32;&#32;&#32;&#32;triple_arch&#32;=&#32;<link linkend="_namespacelibscanbuild_1_1clang_1af91327b127fdb63a9c81a3d8d03d5149">get_triple_arch</link>(cmd,&#32;cwd)
00654 &#32;&#32;&#32;&#32;generate_ast(triple_arch)
00655 &#32;&#32;&#32;&#32;map_extdefs(triple_arch)
00656 
00657 
00658 <emphasis role="preprocessor">@require([&apos;ctu&apos;])</emphasis>
</programlisting><para>
References <link linkend="_analyze_8py_source_1l00659">libscanbuild.analyze.dispatch_ctu()</link>, <link linkend="_analyze_8py_source_1l00580">libscanbuild.analyze.extdef_map_list_src_to_ast()</link>, <link linkend="_clang_8py_source_1l00175">libscanbuild.clang.get_triple_arch()</link>, and <link linkend="_lib_2libscanbuild_2____init_____8py_source_1l00059">libscanbuild.run_command()</link>.</para>
<para>
Referenced by <link linkend="_analyze_8py_source_1l00659">libscanbuild.analyze.dispatch_ctu()</link>, and <link linkend="_analyze_8py_source_1l00580">libscanbuild.analyze.extdef_map_list_src_to_ast()</link>.</para>
    </section><anchor xml:id="_namespacelibscanbuild_1_1analyze_1a3210ccc436bd8926927258fa9de1a2fb"/>    <section>
    <title>dispatch_ctu()</title>
<indexterm><primary>dispatch_ctu</primary><secondary>libscanbuild.analyze</secondary></indexterm>
<indexterm><primary>libscanbuild.analyze</primary><secondary>dispatch_ctu</secondary></indexterm>
<para><computeroutput>def libscanbuild.analyze.dispatch_ctu ( opts,  continuation = <computeroutput><link linkend="_namespacelibscanbuild_1_1analyze_1a30e68b322e290e30d92b1abd99d3adba">run_analyzer</link></computeroutput>
)</computeroutput></para>
<para><literallayout><computeroutput> Execute only one phase of 2 phases of CTU if needed. </computeroutput></literallayout> </para>
<para>
Definition at line <link linkend="_analyze_8py_source_1l00659">659</link> of file <link linkend="_analyze_8py_source">analyze.py</link>.</para>
<programlisting>00659 <emphasis role="keyword">def&#32;</emphasis><link linkend="_namespacelibscanbuild_1_1analyze_1a3210ccc436bd8926927258fa9de1a2fb">dispatch_ctu</link>(opts,&#32;continuation=run_analyzer):
00660 &#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;&quot;&quot;&#32;Execute&#32;only&#32;one&#32;phase&#32;of&#32;2&#32;phases&#32;of&#32;CTU&#32;if&#32;needed.&#32;&quot;&quot;&quot;</emphasis>
00661 
00662 &#32;&#32;&#32;&#32;ctu_config&#32;=&#32;opts[<emphasis role="stringliteral">&apos;ctu&apos;</emphasis>]
00663 
00664 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;ctu_config.collect&#32;<emphasis role="keywordflow">or</emphasis>&#32;ctu_config.analyze:
00665 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">assert</emphasis>&#32;ctu_config.collect&#32;!=&#32;ctu_config.analyze
00666 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;ctu_config.collect:
00667 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespacelibscanbuild_1_1analyze_1af51d594675cc6ce01414c9eaa6aa9b1b">ctu_collect_phase</link>(opts)
00668 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;ctu_config.analyze:
00669 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cwd&#32;=&#32;opts[<emphasis role="stringliteral">&apos;directory&apos;</emphasis>]
00670 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cmd&#32;=&#32;[opts[<emphasis role="stringliteral">&apos;clang&apos;</emphasis>],&#32;<emphasis role="stringliteral">&apos;--analyze&apos;</emphasis>]&#32;+&#32;opts[<emphasis role="stringliteral">&apos;direct_args&apos;</emphasis>]&#32;\
00671 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;+&#32;opts[<emphasis role="stringliteral">&apos;flags&apos;</emphasis>]&#32;+&#32;[opts[<emphasis role="stringliteral">&apos;file&apos;</emphasis>]]
00672 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;triarch&#32;=&#32;<link linkend="_namespacelibscanbuild_1_1clang_1af91327b127fdb63a9c81a3d8d03d5149">get_triple_arch</link>(cmd,&#32;cwd)
00673 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ctu_options&#32;=&#32;[<emphasis role="stringliteral">&apos;ctu-dir=&apos;</emphasis>&#32;+&#32;os.path.join(ctu_config.dir,&#32;triarch),
00674 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&apos;experimental-enable-naive-ctu-analysis=true&apos;</emphasis>]
00675 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;analyzer_options&#32;=&#32;<link linkend="_namespacelibscanbuild_1_1analyze_1ae8b395a86eacb56d96109622c9470389">prefix_with</link>(<emphasis role="stringliteral">&apos;-analyzer-config&apos;</emphasis>,&#32;ctu_options)
00676 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;direct_options&#32;=&#32;<link linkend="_namespacelibscanbuild_1_1analyze_1ae8b395a86eacb56d96109622c9470389">prefix_with</link>(<emphasis role="stringliteral">&apos;-Xanalyzer&apos;</emphasis>,&#32;analyzer_options)
00677 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;opts[<emphasis role="stringliteral">&apos;direct_args&apos;</emphasis>].extend(direct_options)
00678 
00679 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;continuation(opts)
00680 
00681 
00682 <emphasis role="preprocessor">@require([&apos;flags&apos;,&#32;&apos;force_debug&apos;])</emphasis>
</programlisting><para>
References <link linkend="_analyze_8py_source_1l00597">libscanbuild.analyze.ctu_collect_phase()</link>, <link linkend="_analyze_8py_source_1l00683">libscanbuild.analyze.filter_debug_flags()</link>, <link linkend="_clang_8py_source_1l00175">libscanbuild.clang.get_triple_arch()</link>, and <link linkend="_analyze_8py_source_1l00105">libscanbuild.analyze.prefix_with()</link>.</para>
<para>
Referenced by <link linkend="_analyze_8py_source_1l00597">libscanbuild.analyze.ctu_collect_phase()</link>.</para>
    </section><anchor xml:id="_namespacelibscanbuild_1_1analyze_1a8c0344dce632218625f617a4aa65ab26"/>    <section>
    <title>extdef_map_list_src_to_ast()</title>
<indexterm><primary>extdef_map_list_src_to_ast</primary><secondary>libscanbuild.analyze</secondary></indexterm>
<indexterm><primary>libscanbuild.analyze</primary><secondary>extdef_map_list_src_to_ast</secondary></indexterm>
<para><computeroutput>def libscanbuild.analyze.extdef_map_list_src_to_ast ( extdef_src_list)</computeroutput></para>
<para><literallayout><computeroutput> Turns textual external definition map list with source files into an
external definition map list with ast files. </computeroutput></literallayout> </para>
<para>
Definition at line <link linkend="_analyze_8py_source_1l00580">580</link> of file <link linkend="_analyze_8py_source">analyze.py</link>.</para>
<programlisting>00580 <emphasis role="keyword">def&#32;</emphasis><link linkend="_namespacelibscanbuild_1_1analyze_1a8c0344dce632218625f617a4aa65ab26">extdef_map_list_src_to_ast</link>(extdef_src_list):
00581 &#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;&quot;&quot;&#32;Turns&#32;textual&#32;external&#32;definition&#32;map&#32;list&#32;with&#32;source&#32;files&#32;into&#32;an</emphasis>
00582 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;external&#32;definition&#32;map&#32;list&#32;with&#32;ast&#32;files.&#32;&quot;&quot;&quot;</emphasis>
00583 
00584 &#32;&#32;&#32;&#32;extdef_ast_list&#32;=&#32;[]
00585 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;extdef_src_txt&#32;<emphasis role="keywordflow">in</emphasis>&#32;extdef_src_list:
00586 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;mangled_name,&#32;path&#32;=&#32;extdef_src_txt.split(<emphasis role="stringliteral">&quot;&#32;&quot;</emphasis>,&#32;1)
00587 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">#&#32;Normalize&#32;path&#32;on&#32;windows&#32;as&#32;well</emphasis>
00588 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;path&#32;=&#32;os.path.splitdrive(path)[1]
00589 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">#&#32;Make&#32;relative&#32;path&#32;out&#32;of&#32;absolute</emphasis>
00590 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;path&#32;=&#32;path[1:]&#32;<emphasis role="keywordflow">if</emphasis>&#32;path[0]&#32;==&#32;os.sep&#32;<emphasis role="keywordflow">else</emphasis>&#32;path
00591 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ast_path&#32;=&#32;os.path.join(<emphasis role="stringliteral">&quot;ast&quot;</emphasis>,&#32;path&#32;+&#32;<emphasis role="stringliteral">&quot;.ast&quot;</emphasis>)
00592 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;extdef_ast_list.append(mangled_name&#32;+&#32;<emphasis role="stringliteral">&quot;&#32;&quot;</emphasis>&#32;+&#32;ast_path)
00593 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;extdef_ast_list
00594 
00595 
00596 <emphasis role="preprocessor">@require([&apos;clang&apos;,&#32;&apos;directory&apos;,&#32;&apos;flags&apos;,&#32;&apos;direct_args&apos;,&#32;&apos;file&apos;,&#32;&apos;ctu&apos;])</emphasis>
</programlisting><para>
References <link linkend="_analyze_8py_source_1l00597">libscanbuild.analyze.ctu_collect_phase()</link>.</para>
<para>
Referenced by <link linkend="_analyze_8py_source_1l00597">libscanbuild.analyze.ctu_collect_phase()</link>, and <link linkend="_analyze_8py_source_1l00532">libscanbuild.analyze.run_analyzer()</link>.</para>
    </section><anchor xml:id="_namespacelibscanbuild_1_1analyze_1aea9e81f4024a9845dfc90ebff7126107"/>    <section>
    <title>filter_debug_flags()</title>
<indexterm><primary>filter_debug_flags</primary><secondary>libscanbuild.analyze</secondary></indexterm>
<indexterm><primary>libscanbuild.analyze</primary><secondary>filter_debug_flags</secondary></indexterm>
<para><computeroutput>def libscanbuild.analyze.filter_debug_flags ( opts,  continuation = <computeroutput><link linkend="_namespacelibscanbuild_1_1analyze_1a3210ccc436bd8926927258fa9de1a2fb">dispatch_ctu</link></computeroutput>
)</computeroutput></para>
<para><literallayout><computeroutput> Filter out nondebug macros when requested. </computeroutput></literallayout> </para>
<para>
Definition at line <link linkend="_analyze_8py_source_1l00683">683</link> of file <link linkend="_analyze_8py_source">analyze.py</link>.</para>
<programlisting>00683 <emphasis role="keyword">def&#32;</emphasis><link linkend="_namespacelibscanbuild_1_1analyze_1aea9e81f4024a9845dfc90ebff7126107">filter_debug_flags</link>(opts,&#32;continuation=dispatch_ctu):
00684 &#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;&quot;&quot;&#32;Filter&#32;out&#32;nondebug&#32;macros&#32;when&#32;requested.&#32;&quot;&quot;&quot;</emphasis>
00685 
00686 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;opts.pop(<emphasis role="stringliteral">&apos;force_debug&apos;</emphasis>):
00687 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">#&#32;lazy&#32;implementation&#32;just&#32;append&#32;an&#32;undefine&#32;macro&#32;at&#32;the&#32;end</emphasis>
00688 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;opts.update({<emphasis role="stringliteral">&apos;flags&apos;</emphasis>:&#32;opts[<emphasis role="stringliteral">&apos;flags&apos;</emphasis>]&#32;+&#32;[<emphasis role="stringliteral">&apos;-UNDEBUG&apos;</emphasis>]})
00689 
00690 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;continuation(opts)
00691 
00692 
00693 <emphasis role="preprocessor">@require([&apos;language&apos;,&#32;&apos;compiler&apos;,&#32;&apos;file&apos;,&#32;&apos;flags&apos;])</emphasis>
</programlisting><para>
References <link linkend="_analyze_8py_source_1l00694">libscanbuild.analyze.language_check()</link>.</para>
<para>
Referenced by <link linkend="_analyze_8py_source_1l00659">libscanbuild.analyze.dispatch_ctu()</link>.</para>
    </section><anchor xml:id="_namespacelibscanbuild_1_1analyze_1af93d444a00436010a8d789229d081555"/>    <section>
    <title>get_ctu_config_from_args()</title>
<indexterm><primary>get_ctu_config_from_args</primary><secondary>libscanbuild.analyze</secondary></indexterm>
<indexterm><primary>libscanbuild.analyze</primary><secondary>get_ctu_config_from_args</secondary></indexterm>
<para><computeroutput>def libscanbuild.analyze.get_ctu_config_from_args ( args)</computeroutput></para>
<para><literallayout><computeroutput> CTU configuration is created from the chosen phases and dir. </computeroutput></literallayout> </para>
<para>
Definition at line <link linkend="_analyze_8py_source_1l00114">114</link> of file <link linkend="_analyze_8py_source">analyze.py</link>.</para>
<programlisting>00114 <emphasis role="keyword">def&#32;</emphasis><link linkend="_namespacelibscanbuild_1_1analyze_1af93d444a00436010a8d789229d081555">get_ctu_config_from_args</link>(args):
00115 &#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;&quot;&quot;&#32;CTU&#32;configuration&#32;is&#32;created&#32;from&#32;the&#32;chosen&#32;phases&#32;and&#32;dir.&#32;&quot;&quot;&quot;</emphasis>
00116 
00117 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(
00118 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacelibscanbuild_1ad6862a74d972673d22f1478908e7544e">CtuConfig</link>(collect=args.ctu_phases.collect,
00119 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;analyze=args.ctu_phases.analyze,
00120 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;dir=args.ctu_dir,
00121 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;extdef_map_cmd=args.extdef_map_cmd)
00122 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;hasattr(args,&#32;<emphasis role="stringliteral">&apos;ctu_phases&apos;</emphasis>)&#32;<emphasis role="keywordflow">and</emphasis>&#32;hasattr(args.ctu_phases,&#32;<emphasis role="stringliteral">&apos;dir&apos;</emphasis>)
00123 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<link linkend="_namespacelibscanbuild_1ad6862a74d972673d22f1478908e7544e">CtuConfig</link>(collect=<emphasis role="keyword">False</emphasis>,&#32;analyze=<emphasis role="keyword">False</emphasis>,&#32;dir=<emphasis role="stringliteral">&apos;&apos;</emphasis>,&#32;extdef_map_cmd=<emphasis role="stringliteral">&apos;&apos;</emphasis>))
00124 
00125 
</programlisting><para>
References <link linkend="_lib_2libscanbuild_2____init_____8py_source_1l00021">libscanbuild.CtuConfig</link>.</para>
<para>
Referenced by <link linkend="_analyze_8py_source_1l00246">libscanbuild.analyze.govern_analyzer_runs()</link>, <link linkend="_analyze_8py_source_1l00208">libscanbuild.analyze.run_analyzer_parallel()</link>, and <link linkend="_analyze_8py_source_1l00278">libscanbuild.analyze.setup_environment()</link>.</para>
    </section><anchor xml:id="_namespacelibscanbuild_1_1analyze_1aefbf8c32914e6957fc3c817938a50380"/>    <section>
    <title>get_ctu_config_from_json()</title>
<indexterm><primary>get_ctu_config_from_json</primary><secondary>libscanbuild.analyze</secondary></indexterm>
<indexterm><primary>libscanbuild.analyze</primary><secondary>get_ctu_config_from_json</secondary></indexterm>
<para><computeroutput>def libscanbuild.analyze.get_ctu_config_from_json ( ctu_conf_json)</computeroutput></para>
<para><literallayout><computeroutput> CTU configuration is created from the chosen phases and dir. </computeroutput></literallayout> </para>
<para>
Definition at line <link linkend="_analyze_8py_source_1l00126">126</link> of file <link linkend="_analyze_8py_source">analyze.py</link>.</para>
<programlisting>00126 <emphasis role="keyword">def&#32;</emphasis><link linkend="_namespacelibscanbuild_1_1analyze_1aefbf8c32914e6957fc3c817938a50380">get_ctu_config_from_json</link>(ctu_conf_json):
00127 &#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;&quot;&quot;&#32;CTU&#32;configuration&#32;is&#32;created&#32;from&#32;the&#32;chosen&#32;phases&#32;and&#32;dir.&#32;&quot;&quot;&quot;</emphasis>
00128 
00129 &#32;&#32;&#32;&#32;ctu_config&#32;=&#32;json.loads(ctu_conf_json)
00130 &#32;&#32;&#32;&#32;<emphasis role="comment">#&#32;Recover&#32;namedtuple&#32;from&#32;json&#32;when&#32;coming&#32;from&#32;analyze-cc&#32;or&#32;analyze-c++</emphasis>
00131 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespacelibscanbuild_1ad6862a74d972673d22f1478908e7544e">CtuConfig</link>(collect=ctu_config[0],
00132 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;analyze=ctu_config[1],
00133 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;dir=ctu_config[2],
00134 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;extdef_map_cmd=ctu_config[3])
00135 
00136 
</programlisting><para>
References <link linkend="_lib_2libscanbuild_2____init_____8py_source_1l00021">libscanbuild.CtuConfig</link>.</para>
<para>
Referenced by <link linkend="_analyze_8py_source_1l00304">libscanbuild.analyze.analyze_compiler_wrapper_impl()</link>.</para>
    </section><anchor xml:id="_namespacelibscanbuild_1_1analyze_1a727f2164f89d25c11e2977655d3e6192"/>    <section>
    <title>govern_analyzer_runs()</title>
<indexterm><primary>govern_analyzer_runs</primary><secondary>libscanbuild.analyze</secondary></indexterm>
<indexterm><primary>libscanbuild.analyze</primary><secondary>govern_analyzer_runs</secondary></indexterm>
<para><computeroutput>def libscanbuild.analyze.govern_analyzer_runs ( args)</computeroutput></para>
<para><literallayout><computeroutput> Governs multiple runs in CTU mode or runs once in normal mode. </computeroutput></literallayout> </para>
<para>
Definition at line <link linkend="_analyze_8py_source_1l00246">246</link> of file <link linkend="_analyze_8py_source">analyze.py</link>.</para>
<programlisting>00246 <emphasis role="keyword">def&#32;</emphasis><link linkend="_namespacelibscanbuild_1_1analyze_1a727f2164f89d25c11e2977655d3e6192">govern_analyzer_runs</link>(args):
00247 &#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;&quot;&quot;&#32;Governs&#32;multiple&#32;runs&#32;in&#32;CTU&#32;mode&#32;or&#32;runs&#32;once&#32;in&#32;normal&#32;mode.&#32;&quot;&quot;&quot;</emphasis>
00248 
00249 &#32;&#32;&#32;&#32;ctu_config&#32;=&#32;<link linkend="_namespacelibscanbuild_1_1analyze_1af93d444a00436010a8d789229d081555">get_ctu_config_from_args</link>(args)
00250 &#32;&#32;&#32;&#32;<emphasis role="comment">#&#32;If&#32;we&#32;do&#32;a&#32;CTU&#32;collect&#32;(1st&#32;phase)&#32;we&#32;remove&#32;all&#32;previous&#32;collection</emphasis>
00251 &#32;&#32;&#32;&#32;<emphasis role="comment">#&#32;data&#32;first.</emphasis>
00252 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;ctu_config.collect:
00253 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;shutil.rmtree(ctu_config.dir,&#32;ignore_errors=<emphasis role="keyword">True</emphasis>)
00254 
00255 &#32;&#32;&#32;&#32;<emphasis role="comment">#&#32;If&#32;the&#32;user&#32;asked&#32;for&#32;a&#32;collect&#32;(1st)&#32;and&#32;analyze&#32;(2nd)&#32;phase,&#32;we&#32;do&#32;an</emphasis>
00256 &#32;&#32;&#32;&#32;<emphasis role="comment">#&#32;all-in-one&#32;run&#32;where&#32;we&#32;deliberately&#32;remove&#32;collection&#32;data&#32;before&#32;and</emphasis>
00257 &#32;&#32;&#32;&#32;<emphasis role="comment">#&#32;also&#32;after&#32;the&#32;run.&#32;If&#32;the&#32;user&#32;asks&#32;only&#32;for&#32;a&#32;single&#32;phase&#32;data&#32;is</emphasis>
00258 &#32;&#32;&#32;&#32;<emphasis role="comment">#&#32;left&#32;so&#32;multiple&#32;analyze&#32;runs&#32;can&#32;use&#32;the&#32;same&#32;data&#32;gathered&#32;by&#32;a&#32;single</emphasis>
00259 &#32;&#32;&#32;&#32;<emphasis role="comment">#&#32;collection&#32;run.</emphasis>
00260 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;ctu_config.collect&#32;<emphasis role="keywordflow">and</emphasis>&#32;ctu_config.analyze:
00261 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">#&#32;CTU&#32;strings&#32;are&#32;coming&#32;from&#32;args.ctu_dir&#32;and&#32;extdef_map_cmd,</emphasis>
00262 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">#&#32;so&#32;we&#32;can&#32;leave&#32;it&#32;empty</emphasis>
00263 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;args.ctu_phases&#32;=&#32;<link linkend="_namespacelibscanbuild_1ad6862a74d972673d22f1478908e7544e">CtuConfig</link>(collect=<emphasis role="keyword">True</emphasis>,&#32;analyze=<emphasis role="keyword">False</emphasis>,
00264 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;dir=<emphasis role="stringliteral">&apos;&apos;</emphasis>,&#32;extdef_map_cmd=<emphasis role="stringliteral">&apos;&apos;</emphasis>)
00265 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacelibscanbuild_1_1analyze_1a62edf1ce0e836c051970ac438b02283b">run_analyzer_parallel</link>(args)
00266 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacelibscanbuild_1_1analyze_1a5e3263c80b8029b2f2d0db3a29677db7">merge_ctu_extdef_maps</link>(ctu_config.dir)
00267 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;args.ctu_phases&#32;=&#32;<link linkend="_namespacelibscanbuild_1ad6862a74d972673d22f1478908e7544e">CtuConfig</link>(collect=<emphasis role="keyword">False</emphasis>,&#32;analyze=<emphasis role="keyword">True</emphasis>,
00268 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;dir=<emphasis role="stringliteral">&apos;&apos;</emphasis>,&#32;extdef_map_cmd=<emphasis role="stringliteral">&apos;&apos;</emphasis>)
00269 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacelibscanbuild_1_1analyze_1a62edf1ce0e836c051970ac438b02283b">run_analyzer_parallel</link>(args)
00270 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;shutil.rmtree(ctu_config.dir,&#32;ignore_errors=<emphasis role="keyword">True</emphasis>)
00271 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>:
00272 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">#&#32;Single&#32;runs&#32;(collect&#32;or&#32;analyze)&#32;are&#32;launched&#32;from&#32;here.</emphasis>
00273 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacelibscanbuild_1_1analyze_1a62edf1ce0e836c051970ac438b02283b">run_analyzer_parallel</link>(args)
00274 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;ctu_config.collect:
00275 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacelibscanbuild_1_1analyze_1a5e3263c80b8029b2f2d0db3a29677db7">merge_ctu_extdef_maps</link>(ctu_config.dir)
00276 
00277 
</programlisting><para>
References <link linkend="_lib_2libscanbuild_2____init_____8py_source_1l00021">libscanbuild.CtuConfig</link>, <link linkend="_analyze_8py_source_1l00114">libscanbuild.analyze.get_ctu_config_from_args()</link>, <link linkend="_analyze_8py_source_1l00164">libscanbuild.analyze.merge_ctu_extdef_maps()</link>, and <link linkend="_analyze_8py_source_1l00208">libscanbuild.analyze.run_analyzer_parallel()</link>.</para>
<para>
Referenced by <link linkend="_analyze_8py_source_1l00078">libscanbuild.analyze.analyze_build()</link>, and <link linkend="_analyze_8py_source_1l00050">libscanbuild.analyze.scan_build()</link>.</para>
    </section><anchor xml:id="_namespacelibscanbuild_1_1analyze_1aebba13a0eaf395bb217502fb313f5254"/>    <section>
    <title>language_check()</title>
<indexterm><primary>language_check</primary><secondary>libscanbuild.analyze</secondary></indexterm>
<indexterm><primary>libscanbuild.analyze</primary><secondary>language_check</secondary></indexterm>
<para><computeroutput>def libscanbuild.analyze.language_check ( opts,  continuation = <computeroutput><link linkend="_namespacelibscanbuild_1_1analyze_1aea9e81f4024a9845dfc90ebff7126107">filter_debug_flags</link></computeroutput>
)</computeroutput></para>
<para><literallayout><computeroutput> Find out the language from command line parameters or file name
extension. The decision also influenced by the compiler invocation. </computeroutput></literallayout> </para>
<para>
Definition at line <link linkend="_analyze_8py_source_1l00694">694</link> of file <link linkend="_analyze_8py_source">analyze.py</link>.</para>
<programlisting>00694 <emphasis role="keyword">def&#32;</emphasis><link linkend="_namespacelibscanbuild_1_1analyze_1aebba13a0eaf395bb217502fb313f5254">language_check</link>(opts,&#32;continuation=filter_debug_flags):
00695 &#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;&quot;&quot;&#32;Find&#32;out&#32;the&#32;language&#32;from&#32;command&#32;line&#32;parameters&#32;or&#32;file&#32;name</emphasis>
00696 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;extension.&#32;The&#32;decision&#32;also&#32;influenced&#32;by&#32;the&#32;compiler&#32;invocation.&#32;&quot;&quot;&quot;</emphasis>
00697 
00698 &#32;&#32;&#32;&#32;accepted&#32;=&#32;frozenset({
00699 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&apos;c&apos;</emphasis>,&#32;<emphasis role="stringliteral">&apos;c++&apos;</emphasis>,&#32;<emphasis role="stringliteral">&apos;objective-c&apos;</emphasis>,&#32;<emphasis role="stringliteral">&apos;objective-c++&apos;</emphasis>,&#32;<emphasis role="stringliteral">&apos;c-cpp-output&apos;</emphasis>,
00700 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&apos;c++-cpp-output&apos;</emphasis>,&#32;<emphasis role="stringliteral">&apos;objective-c-cpp-output&apos;</emphasis>
00701 &#32;&#32;&#32;&#32;})
00702 
00703 &#32;&#32;&#32;&#32;<emphasis role="comment">#&#32;language&#32;can&#32;be&#32;given&#32;as&#32;a&#32;parameter...</emphasis>
00704 &#32;&#32;&#32;&#32;language&#32;=&#32;opts.pop(<emphasis role="stringliteral">&apos;language&apos;</emphasis>)
00705 &#32;&#32;&#32;&#32;compiler&#32;=&#32;opts.pop(<emphasis role="stringliteral">&apos;compiler&apos;</emphasis>)
00706 &#32;&#32;&#32;&#32;<emphasis role="comment">#&#32;...&#32;or&#32;find&#32;out&#32;from&#32;source&#32;file&#32;extension</emphasis>
00707 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;language&#32;<emphasis role="keywordflow">is</emphasis>&#32;<emphasis role="keywordtype">None</emphasis>&#32;<emphasis role="keywordflow">and</emphasis>&#32;compiler&#32;<emphasis role="keywordflow">is</emphasis>&#32;<emphasis role="keywordflow">not</emphasis>&#32;<emphasis role="keywordtype">None</emphasis>:
00708 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;language&#32;=&#32;<link linkend="_namespacelibscanbuild_1_1compilation_1af89617a2af7528cbc172d5a911af9e07">classify_source</link>(opts[<emphasis role="stringliteral">&apos;file&apos;</emphasis>],&#32;compiler&#32;==&#32;<emphasis role="stringliteral">&apos;c&apos;</emphasis>)
00709 
00710 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;language&#32;<emphasis role="keywordflow">is</emphasis>&#32;<emphasis role="keywordtype">None</emphasis>:
00711 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;logging.debug(<emphasis role="stringliteral">&apos;skip&#32;analysis,&#32;language&#32;not&#32;known&apos;</emphasis>)
00712 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keywordtype">None</emphasis>
00713 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">elif</emphasis>&#32;language&#32;<emphasis role="keywordflow">not</emphasis>&#32;<emphasis role="keywordflow">in</emphasis>&#32;accepted:
00714 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;logging.debug(<emphasis role="stringliteral">&apos;skip&#32;analysis,&#32;language&#32;not&#32;supported&apos;</emphasis>)
00715 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keywordtype">None</emphasis>
00716 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>:
00717 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;logging.debug(<emphasis role="stringliteral">&apos;analysis,&#32;language:&#32;%s&apos;</emphasis>,&#32;language)
00718 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;opts.update({<emphasis role="stringliteral">&apos;language&apos;</emphasis>:&#32;language,
00719 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&apos;flags&apos;</emphasis>:&#32;[<emphasis role="stringliteral">&apos;-x&apos;</emphasis>,&#32;language]&#32;+&#32;opts[<emphasis role="stringliteral">&apos;flags&apos;</emphasis>]})
00720 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;continuation(opts)
00721 
00722 
00723 <emphasis role="preprocessor">@require([&apos;arch_list&apos;,&#32;&apos;flags&apos;])</emphasis>
</programlisting><para>
References <link linkend="_analyze_8py_source_1l00724">libscanbuild.analyze.arch_check()</link>, and <link linkend="_compilation_8py_source_1l00103">libscanbuild.compilation.classify_source()</link>.</para>
<para>
Referenced by <link linkend="_analyze_8py_source_1l00683">libscanbuild.analyze.filter_debug_flags()</link>.</para>
    </section><anchor xml:id="_namespacelibscanbuild_1_1analyze_1a5e3263c80b8029b2f2d0db3a29677db7"/>    <section>
    <title>merge_ctu_extdef_maps()</title>
<indexterm><primary>merge_ctu_extdef_maps</primary><secondary>libscanbuild.analyze</secondary></indexterm>
<indexterm><primary>libscanbuild.analyze</primary><secondary>merge_ctu_extdef_maps</secondary></indexterm>
<para><computeroutput>def libscanbuild.analyze.merge_ctu_extdef_maps ( ctudir)</computeroutput></para>
<para><literallayout><computeroutput> Merge individual external definition maps into a global one.

As the collect phase runs parallel on multiple threads, all compilation
units are separately mapped into a temporary file in CTU_TEMP_DEFMAP_FOLDER.
These definition maps contain the mangled names and the source
(AST generated from the source) which had their definition.
These files should be merged at the end into a global map file:
CTU_EXTDEF_MAP_FILENAME.</computeroutput></literallayout> </para>
<para>
Definition at line <link linkend="_analyze_8py_source_1l00164">164</link> of file <link linkend="_analyze_8py_source">analyze.py</link>.</para>
<programlisting>00164 <emphasis role="keyword">def&#32;</emphasis><link linkend="_namespacelibscanbuild_1_1analyze_1a5e3263c80b8029b2f2d0db3a29677db7">merge_ctu_extdef_maps</link>(ctudir):
00165 &#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;&quot;&quot;&#32;Merge&#32;individual&#32;external&#32;definition&#32;maps&#32;into&#32;a&#32;global&#32;one.</emphasis>
00166 <emphasis role="stringliteral"></emphasis>
00167 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;As&#32;the&#32;collect&#32;phase&#32;runs&#32;parallel&#32;on&#32;multiple&#32;threads,&#32;all&#32;compilation</emphasis>
00168 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;units&#32;are&#32;separately&#32;mapped&#32;into&#32;a&#32;temporary&#32;file&#32;in&#32;CTU_TEMP_DEFMAP_FOLDER.</emphasis>
00169 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;These&#32;definition&#32;maps&#32;contain&#32;the&#32;mangled&#32;names&#32;and&#32;the&#32;source</emphasis>
00170 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;(AST&#32;generated&#32;from&#32;the&#32;source)&#32;which&#32;had&#32;their&#32;definition.</emphasis>
00171 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;These&#32;files&#32;should&#32;be&#32;merged&#32;at&#32;the&#32;end&#32;into&#32;a&#32;global&#32;map&#32;file:</emphasis>
00172 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;CTU_EXTDEF_MAP_FILENAME.&quot;&quot;&quot;</emphasis>
00173 
00174 &#32;&#32;&#32;&#32;<emphasis role="keyword">def&#32;</emphasis>generate_extdef_map_lines(extdefmap_dir):
00175 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;&quot;&quot;&#32;Iterate&#32;over&#32;all&#32;lines&#32;of&#32;input&#32;files&#32;in&#32;a&#32;determined&#32;order.&#32;&quot;&quot;&quot;</emphasis>
00176 
00177 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;files&#32;=&#32;glob.glob(os.path.join(extdefmap_dir,&#32;<emphasis role="stringliteral">&apos;*&apos;</emphasis>))
00178 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;files.sort()
00179 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;filename&#32;<emphasis role="keywordflow">in</emphasis>&#32;files:
00180 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">with</emphasis>&#32;<link linkend="_namespacestartfile_1aa582f75134b683dc321c07d01ff8e501">open</link>(filename,&#32;<emphasis role="stringliteral">&apos;r&apos;</emphasis>)&#32;<emphasis role="keyword">as</emphasis>&#32;in_file:
00181 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;line&#32;<emphasis role="keywordflow">in</emphasis>&#32;in_file:
00182 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">yield</emphasis>&#32;line
00183 
00184 &#32;&#32;&#32;&#32;<emphasis role="keyword">def&#32;</emphasis>write_global_map(arch,&#32;mangled_ast_pairs):
00185 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;&quot;&quot;&#32;Write&#32;(mangled&#32;name,&#32;ast&#32;file)&#32;pairs&#32;into&#32;final&#32;file.&#32;&quot;&quot;&quot;</emphasis>
00186 
00187 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;extern_defs_map_file&#32;=&#32;os.path.join(ctudir,&#32;arch,
00188 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;CTU_EXTDEF_MAP_FILENAME)
00189 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">with</emphasis>&#32;<link linkend="_namespacestartfile_1aa582f75134b683dc321c07d01ff8e501">open</link>(extern_defs_map_file,&#32;<emphasis role="stringliteral">&apos;w&apos;</emphasis>)&#32;<emphasis role="keyword">as</emphasis>&#32;out_file:
00190 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;mangled_name,&#32;ast_file&#32;<emphasis role="keywordflow">in</emphasis>&#32;mangled_ast_pairs:
00191 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;out_file.write(<emphasis role="stringliteral">&apos;%s&#32;%s\n&apos;</emphasis>&#32;%&#32;(mangled_name,&#32;ast_file))
00192 
00193 &#32;&#32;&#32;&#32;triple_arches&#32;=&#32;glob.glob(os.path.join(ctudir,&#32;<emphasis role="stringliteral">&apos;*&apos;</emphasis>))
00194 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;triple_path&#32;<emphasis role="keywordflow">in</emphasis>&#32;triple_arches:
00195 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;os.path.isdir(triple_path):
00196 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;triple_arch&#32;=&#32;os.path.basename(triple_path)
00197 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;extdefmap_dir&#32;=&#32;os.path.join(ctudir,&#32;triple_arch,
00198 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;CTU_TEMP_DEFMAP_FOLDER)
00199 
00200 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;extdef_map_lines&#32;=&#32;generate_extdef_map_lines(extdefmap_dir)
00201 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;mangled_ast_pairs&#32;=&#32;<link linkend="_namespacelibscanbuild_1_1analyze_1aeaeee7d4608a93d865e797c3f2fdf9c9">create_global_ctu_extdef_map</link>(extdef_map_lines)
00202 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;write_global_map(triple_arch,&#32;mangled_ast_pairs)
00203 
00204 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">#&#32;Remove&#32;all&#32;temporary&#32;files</emphasis>
00205 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;shutil.rmtree(extdefmap_dir,&#32;ignore_errors=<emphasis role="keyword">True</emphasis>)
00206 
00207 
</programlisting><para>
References <link linkend="_analyze_8py_source_1l00137">libscanbuild.analyze.create_global_ctu_extdef_map()</link>, and <link linkend="_startfile_8py_source_1l00206">startfile.open()</link>.</para>
<para>
Referenced by <link linkend="_analyze_8py_source_1l00246">libscanbuild.analyze.govern_analyzer_runs()</link>.</para>
    </section><anchor xml:id="_namespacelibscanbuild_1_1analyze_1a25b489e21548410a6f6ca7d6058e9a14"/>    <section>
    <title>need_analyzer()</title>
<indexterm><primary>need_analyzer</primary><secondary>libscanbuild.analyze</secondary></indexterm>
<indexterm><primary>libscanbuild.analyze</primary><secondary>need_analyzer</secondary></indexterm>
<para><computeroutput>def libscanbuild.analyze.need_analyzer ( args)</computeroutput></para>
<para><literallayout><computeroutput> Check the intent of the build command.

When static analyzer run against project configure step, it should be
silent and no need to run the analyzer or generate report.

To run `scan-build` against the configure step might be necessary,
when compiler wrappers are used. That&apos;s the moment when build setup
check the compiler and capture the location for the build process. </computeroutput></literallayout> </para>
<para>
Definition at line <link linkend="_analyze_8py_source_1l00092">92</link> of file <link linkend="_analyze_8py_source">analyze.py</link>.</para>
<programlisting>00092 <emphasis role="keyword">def&#32;</emphasis><link linkend="_namespacelibscanbuild_1_1analyze_1a25b489e21548410a6f6ca7d6058e9a14">need_analyzer</link>(args):
00093 &#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;&quot;&quot;&#32;Check&#32;the&#32;intent&#32;of&#32;the&#32;build&#32;command.</emphasis>
00094 <emphasis role="stringliteral"></emphasis>
00095 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;When&#32;static&#32;analyzer&#32;run&#32;against&#32;project&#32;configure&#32;step,&#32;it&#32;should&#32;be</emphasis>
00096 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;silent&#32;and&#32;no&#32;need&#32;to&#32;run&#32;the&#32;analyzer&#32;or&#32;generate&#32;report.</emphasis>
00097 <emphasis role="stringliteral"></emphasis>
00098 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;To&#32;run&#32;`scan-build`&#32;against&#32;the&#32;configure&#32;step&#32;might&#32;be&#32;necessary,</emphasis>
00099 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;when&#32;compiler&#32;wrappers&#32;are&#32;used.&#32;That&apos;s&#32;the&#32;moment&#32;when&#32;build&#32;setup</emphasis>
00100 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;check&#32;the&#32;compiler&#32;and&#32;capture&#32;the&#32;location&#32;for&#32;the&#32;build&#32;process.&#32;&quot;&quot;&quot;</emphasis>
00101 
00102 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;len(args)&#32;<emphasis role="keywordflow">and</emphasis>&#32;<emphasis role="keywordflow">not</emphasis>&#32;re.search(<emphasis role="stringliteral">r&apos;configure|autogen&apos;</emphasis>,&#32;args[0])
00103 
00104 
</programlisting><para>
Referenced by <link linkend="_analyze_8py_source_1l00050">libscanbuild.analyze.scan_build()</link>, and <link linkend="_analyze_8py_source_1l00278">libscanbuild.analyze.setup_environment()</link>.</para>
    </section><anchor xml:id="_namespacelibscanbuild_1_1analyze_1ae8b395a86eacb56d96109622c9470389"/>    <section>
    <title>prefix_with()</title>
<indexterm><primary>prefix_with</primary><secondary>libscanbuild.analyze</secondary></indexterm>
<indexterm><primary>libscanbuild.analyze</primary><secondary>prefix_with</secondary></indexterm>
<para><computeroutput>def libscanbuild.analyze.prefix_with ( constant,  pieces)</computeroutput></para>
<para><literallayout><computeroutput> From a sequence create another sequence where every second element
is from the original sequence and the odd elements are the prefix.

eg.: prefix_with(0, [1,2,3]) creates [0, 1, 0, 2, 0, 3] </computeroutput></literallayout> </para>
<para>
Definition at line <link linkend="_analyze_8py_source_1l00105">105</link> of file <link linkend="_analyze_8py_source">analyze.py</link>.</para>
<programlisting>00105 <emphasis role="keyword">def&#32;</emphasis><link linkend="_namespacelibscanbuild_1_1analyze_1ae8b395a86eacb56d96109622c9470389">prefix_with</link>(constant,&#32;pieces):
00106 &#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;&quot;&quot;&#32;From&#32;a&#32;sequence&#32;create&#32;another&#32;sequence&#32;where&#32;every&#32;second&#32;element</emphasis>
00107 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;is&#32;from&#32;the&#32;original&#32;sequence&#32;and&#32;the&#32;odd&#32;elements&#32;are&#32;the&#32;prefix.</emphasis>
00108 <emphasis role="stringliteral"></emphasis>
00109 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;eg.:&#32;prefix_with(0,&#32;[1,2,3])&#32;creates&#32;[0,&#32;1,&#32;0,&#32;2,&#32;0,&#32;3]&#32;&quot;&quot;&quot;</emphasis>
00110 
00111 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;[elem&#32;<emphasis role="keywordflow">for</emphasis>&#32;piece&#32;<emphasis role="keywordflow">in</emphasis>&#32;pieces&#32;<emphasis role="keywordflow">for</emphasis>&#32;elem&#32;<emphasis role="keywordflow">in</emphasis>&#32;[constant,&#32;piece]]
00112 
00113 
</programlisting><para>
Referenced by <link linkend="_analyze_8py_source_1l00379">libscanbuild.analyze.analyzer_params()</link>, and <link linkend="_analyze_8py_source_1l00659">libscanbuild.analyze.dispatch_ctu()</link>.</para>
    </section><anchor xml:id="_namespacelibscanbuild_1_1analyze_1acf09f49183e565d9bcfcada3eeae1547"/>    <section>
    <title>report_directory()</title>
<indexterm><primary>report_directory</primary><secondary>libscanbuild.analyze</secondary></indexterm>
<indexterm><primary>libscanbuild.analyze</primary><secondary>report_directory</secondary></indexterm>
<para><computeroutput>def libscanbuild.analyze.report_directory ( hint,  keep,  output_format)</computeroutput></para>
<para><literallayout><computeroutput> Responsible for the report directory.

hint -- could specify the parent directory of the output directory.
keep -- a boolean value to keep or delete the empty report directory. </computeroutput></literallayout> </para>
<para>
Definition at line <link linkend="_analyze_8py_source_1l00340">340</link> of file <link linkend="_analyze_8py_source">analyze.py</link>.</para>
<programlisting>00340 <emphasis role="keyword">def&#32;</emphasis><link linkend="_namespacelibscanbuild_1_1analyze_1acf09f49183e565d9bcfcada3eeae1547">report_directory</link>(hint,&#32;keep,&#32;output_format):
00341 &#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;&quot;&quot;&#32;Responsible&#32;for&#32;the&#32;report&#32;directory.</emphasis>
00342 <emphasis role="stringliteral"></emphasis>
00343 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;hint&#32;--&#32;could&#32;specify&#32;the&#32;parent&#32;directory&#32;of&#32;the&#32;output&#32;directory.</emphasis>
00344 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;keep&#32;--&#32;a&#32;boolean&#32;value&#32;to&#32;keep&#32;or&#32;delete&#32;the&#32;empty&#32;report&#32;directory.&#32;&quot;&quot;&quot;</emphasis>
00345 
00346 &#32;&#32;&#32;&#32;stamp_format&#32;=&#32;<emphasis role="stringliteral">&apos;scan-build-%Y-%m-%d-%H-%M-%S-%f-&apos;</emphasis>
00347 &#32;&#32;&#32;&#32;stamp&#32;=&#32;datetime.datetime.now().strftime(stamp_format)
00348 &#32;&#32;&#32;&#32;parent_dir&#32;=&#32;os.path.abspath(hint)
00349 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keywordflow">not</emphasis>&#32;os.path.exists(parent_dir):
00350 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;os.makedirs(parent_dir)
00351 &#32;&#32;&#32;&#32;name&#32;=&#32;tempfile.mkdtemp(prefix=stamp,&#32;dir=parent_dir)
00352 
00353 &#32;&#32;&#32;&#32;logging.info(<emphasis role="stringliteral">&apos;Report&#32;directory&#32;created:&#32;%s&apos;</emphasis>,&#32;name)
00354 
00355 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">try</emphasis>:
00356 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">yield</emphasis>&#32;name
00357 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">finally</emphasis>:
00358 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;os.listdir(name):
00359 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;output_format&#32;<emphasis role="keywordflow">not</emphasis>&#32;<emphasis role="keywordflow">in</emphasis>&#32;[<emphasis role="stringliteral">&apos;sarif&apos;</emphasis>,&#32;<emphasis role="stringliteral">&apos;sarif-html&apos;</emphasis>]:&#32;<emphasis role="comment">#&#32;FIXME:</emphasis>
00360 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">#&#32;&apos;scan-view&apos;&#32;currently&#32;does&#32;not&#32;support&#32;sarif&#32;format.</emphasis>
00361 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;msg&#32;=&#32;<emphasis role="stringliteral">&quot;Run&#32;&apos;scan-view&#32;%s&apos;&#32;to&#32;examine&#32;bug&#32;reports.&quot;</emphasis>
00362 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">elif</emphasis>&#32;output_format&#32;==&#32;<emphasis role="stringliteral">&apos;sarif-html&apos;</emphasis>:
00363 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;msg&#32;=&#32;<emphasis role="stringliteral">&quot;Run&#32;&apos;scan-view&#32;%s&apos;&#32;to&#32;examine&#32;bug&#32;reports&#32;or&#32;see&#32;&quot;</emphasis>&#32;\
00364 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;merged&#32;sarif&#32;results&#32;at&#32;%s/results-merged.sarif.&quot;</emphasis>
00365 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>:
00366 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;msg&#32;=&#32;<emphasis role="stringliteral">&quot;View&#32;merged&#32;sarif&#32;results&#32;at&#32;%s/results-merged.sarif.&quot;</emphasis>
00367 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;keep&#32;=&#32;<emphasis role="keyword">True</emphasis>
00368 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>:
00369 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;keep:
00370 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;msg&#32;=&#32;<emphasis role="stringliteral">&quot;Report&#32;directory&#32;&apos;%s&apos;&#32;contains&#32;no&#32;report,&#32;but&#32;kept.&quot;</emphasis>
00371 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>:
00372 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;msg&#32;=&#32;<emphasis role="stringliteral">&quot;Removing&#32;directory&#32;&apos;%s&apos;&#32;because&#32;it&#32;contains&#32;no&#32;report.&quot;</emphasis>
00373 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;logging.warning(msg,&#32;name)
00374 
00375 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keywordflow">not</emphasis>&#32;keep:
00376 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;os.rmdir(name)
00377 
00378 
</programlisting><para>
Referenced by <link linkend="_analyze_8py_source_1l00078">libscanbuild.analyze.analyze_build()</link>, and <link linkend="_analyze_8py_source_1l00050">libscanbuild.analyze.scan_build()</link>.</para>
    </section><anchor xml:id="_namespacelibscanbuild_1_1analyze_1ab61521bbea87c4deac819a03ebf006fa"/>    <section>
    <title>report_failure()</title>
<indexterm><primary>report_failure</primary><secondary>libscanbuild.analyze</secondary></indexterm>
<indexterm><primary>libscanbuild.analyze</primary><secondary>report_failure</secondary></indexterm>
<para><computeroutput>def libscanbuild.analyze.report_failure ( opts)</computeroutput></para>
<para><literallayout><computeroutput> Create report when analyzer failed.

The major report is the preprocessor output. The output filename generated
randomly. The compiler output also captured into &apos;.stderr.txt&apos; file.
And some more execution context also saved into &apos;.info.txt&apos; file. </computeroutput></literallayout> </para>
<para>
Definition at line <link linkend="_analyze_8py_source_1l00474">474</link> of file <link linkend="_analyze_8py_source">analyze.py</link>.</para>
<programlisting>00474 <emphasis role="keyword">def&#32;</emphasis><link linkend="_namespacelibscanbuild_1_1analyze_1ab61521bbea87c4deac819a03ebf006fa">report_failure</link>(opts):
00475 &#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;&quot;&quot;&#32;Create&#32;report&#32;when&#32;analyzer&#32;failed.</emphasis>
00476 <emphasis role="stringliteral"></emphasis>
00477 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;The&#32;major&#32;report&#32;is&#32;the&#32;preprocessor&#32;output.&#32;The&#32;output&#32;filename&#32;generated</emphasis>
00478 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;randomly.&#32;The&#32;compiler&#32;output&#32;also&#32;captured&#32;into&#32;&apos;.stderr.txt&apos;&#32;file.</emphasis>
00479 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;And&#32;some&#32;more&#32;execution&#32;context&#32;also&#32;saved&#32;into&#32;&apos;.info.txt&apos;&#32;file.&#32;&quot;&quot;&quot;</emphasis>
00480 
00481 &#32;&#32;&#32;&#32;<emphasis role="keyword">def&#32;</emphasis>extension():
00482 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;&quot;&quot;&#32;Generate&#32;preprocessor&#32;file&#32;extension.&#32;&quot;&quot;&quot;</emphasis>
00483 
00484 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;mapping&#32;=&#32;{<emphasis role="stringliteral">&apos;objective-c++&apos;</emphasis>:&#32;<emphasis role="stringliteral">&apos;.mii&apos;</emphasis>,&#32;<emphasis role="stringliteral">&apos;objective-c&apos;</emphasis>:&#32;<emphasis role="stringliteral">&apos;.mi&apos;</emphasis>,&#32;<emphasis role="stringliteral">&apos;c++&apos;</emphasis>:&#32;<emphasis role="stringliteral">&apos;.ii&apos;</emphasis>}
00485 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;mapping.get(opts[<emphasis role="stringliteral">&apos;language&apos;</emphasis>],&#32;<emphasis role="stringliteral">&apos;.i&apos;</emphasis>)
00486 
00487 &#32;&#32;&#32;&#32;<emphasis role="keyword">def&#32;</emphasis>destination():
00488 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;&quot;&quot;&#32;Creates&#32;failures&#32;directory&#32;if&#32;not&#32;exits&#32;yet.&#32;&quot;&quot;&quot;</emphasis>
00489 
00490 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;failures_dir&#32;=&#32;os.path.join(opts[<emphasis role="stringliteral">&apos;output_dir&apos;</emphasis>],&#32;<emphasis role="stringliteral">&apos;failures&apos;</emphasis>)
00491 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keywordflow">not</emphasis>&#32;os.path.isdir(failures_dir):
00492 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;os.makedirs(failures_dir)
00493 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;failures_dir
00494 
00495 &#32;&#32;&#32;&#32;<emphasis role="comment">#&#32;Classify&#32;error&#32;type:&#32;when&#32;Clang&#32;terminated&#32;by&#32;a&#32;signal&#32;it&apos;s&#32;a&#32;&apos;Crash&apos;.</emphasis>
00496 &#32;&#32;&#32;&#32;<emphasis role="comment">#&#32;(python&#32;subprocess&#32;Popen.returncode&#32;is&#32;negative&#32;when&#32;child&#32;terminated</emphasis>
00497 &#32;&#32;&#32;&#32;<emphasis role="comment">#&#32;by&#32;signal.)&#32;Everything&#32;else&#32;is&#32;&apos;Other&#32;Error&apos;.</emphasis>
00498 &#32;&#32;&#32;&#32;error&#32;=&#32;<emphasis role="stringliteral">&apos;crash&apos;</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;opts[<emphasis role="stringliteral">&apos;exit_code&apos;</emphasis>]&#32;&lt;&#32;0&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="stringliteral">&apos;other_error&apos;</emphasis>
00499 &#32;&#32;&#32;&#32;<emphasis role="comment">#&#32;Create&#32;preprocessor&#32;output&#32;file&#32;name.&#32;(This&#32;is&#32;blindly&#32;following&#32;the</emphasis>
00500 &#32;&#32;&#32;&#32;<emphasis role="comment">#&#32;Perl&#32;implementation.)</emphasis>
00501 &#32;&#32;&#32;&#32;(handle,&#32;name)&#32;=&#32;tempfile.mkstemp(suffix=extension(),
00502 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;prefix=<emphasis role="stringliteral">&apos;clang_&apos;</emphasis>&#32;+&#32;error&#32;+&#32;<emphasis role="stringliteral">&apos;_&apos;</emphasis>,
00503 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;dir=destination())
00504 &#32;&#32;&#32;&#32;os.close(handle)
00505 &#32;&#32;&#32;&#32;<emphasis role="comment">#&#32;Execute&#32;Clang&#32;again,&#32;but&#32;run&#32;the&#32;syntax&#32;check&#32;only.</emphasis>
00506 &#32;&#32;&#32;&#32;cwd&#32;=&#32;opts[<emphasis role="stringliteral">&apos;directory&apos;</emphasis>]
00507 &#32;&#32;&#32;&#32;cmd&#32;=&#32;[opts[<emphasis role="stringliteral">&apos;clang&apos;</emphasis>],&#32;<emphasis role="stringliteral">&apos;-fsyntax-only&apos;</emphasis>,&#32;<emphasis role="stringliteral">&apos;-E&apos;</emphasis>]&#32;+&#32;opts[<emphasis role="stringliteral">&apos;flags&apos;</emphasis>]&#32;+&#32;\
00508 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[opts[<emphasis role="stringliteral">&apos;file&apos;</emphasis>],&#32;<emphasis role="stringliteral">&apos;-o&apos;</emphasis>,&#32;name]
00509 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">try</emphasis>:
00510 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cmd&#32;=&#32;<link linkend="_namespacelibscanbuild_1_1clang_1aceaa1fcd710247641672c50964398c2a">get_arguments</link>(cmd,&#32;cwd)
00511 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacelibscanbuild_1a243b8757d8cfbc0be023301a8b951d6c">run_command</link>(cmd,&#32;cwd=cwd)
00512 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">except</emphasis>&#32;subprocess.CalledProcessError:
00513 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">pass</emphasis>
00514 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">except</emphasis>&#32;ClangErrorException:
00515 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">pass</emphasis>
00516 &#32;&#32;&#32;&#32;<emphasis role="comment">#&#32;write&#32;general&#32;information&#32;about&#32;the&#32;crash</emphasis>
00517 &#32;&#32;&#32;&#32;<emphasis role="keyword">with</emphasis>&#32;<link linkend="_namespacestartfile_1aa582f75134b683dc321c07d01ff8e501">open</link>(name&#32;+&#32;<emphasis role="stringliteral">&apos;.info.txt&apos;</emphasis>,&#32;<emphasis role="stringliteral">&apos;w&apos;</emphasis>)&#32;<emphasis role="keyword">as</emphasis>&#32;handle:
00518 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;handle.write(opts[<emphasis role="stringliteral">&apos;file&apos;</emphasis>]&#32;+&#32;os.linesep)
00519 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;handle.write(error.title().replace(<emphasis role="stringliteral">&apos;_&apos;</emphasis>,&#32;<emphasis role="stringliteral">&apos;&#32;&apos;</emphasis>)&#32;+&#32;os.linesep)
00520 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;handle.write(<emphasis role="stringliteral">&apos;&#32;&apos;</emphasis>.join(cmd)&#32;+&#32;os.linesep)
00521 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;handle.write(<emphasis role="stringliteral">&apos;&#32;&apos;</emphasis>.join(os.uname())&#32;+&#32;os.linesep)
00522 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;handle.write(<link linkend="_namespacelibscanbuild_1_1clang_1ac38809d624aaefe00fff85b0bfa1005f">get_version</link>(opts[<emphasis role="stringliteral">&apos;clang&apos;</emphasis>]))
00523 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;handle.close()
00524 &#32;&#32;&#32;&#32;<emphasis role="comment">#&#32;write&#32;the&#32;captured&#32;output&#32;too</emphasis>
00525 &#32;&#32;&#32;&#32;<emphasis role="keyword">with</emphasis>&#32;<link linkend="_namespacestartfile_1aa582f75134b683dc321c07d01ff8e501">open</link>(name&#32;+&#32;<emphasis role="stringliteral">&apos;.stderr.txt&apos;</emphasis>,&#32;<emphasis role="stringliteral">&apos;w&apos;</emphasis>)&#32;<emphasis role="keyword">as</emphasis>&#32;handle:
00526 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;handle.writelines(opts[<emphasis role="stringliteral">&apos;error_output&apos;</emphasis>])
00527 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;handle.close()
00528 
00529 
00530 <emphasis role="preprocessor">@require([&apos;clang&apos;,&#32;&apos;directory&apos;,&#32;&apos;flags&apos;,&#32;&apos;direct_args&apos;,&#32;&apos;file&apos;,&#32;&apos;output_dir&apos;,&#x240A;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&apos;output_format&apos;])</emphasis>
00531 
</programlisting><para>
References <link linkend="_clang_8py_source_1l00038">libscanbuild.clang.get_arguments()</link>, <link linkend="_clang_8py_source_1l00027">libscanbuild.clang.get_version()</link>, <link linkend="_startfile_8py_source_1l00206">startfile.open()</link>, <link linkend="_analyze_8py_source_1l00532">libscanbuild.analyze.run_analyzer()</link>, and <link linkend="_lib_2libscanbuild_2____init_____8py_source_1l00059">libscanbuild.run_command()</link>.</para>
<para>
Referenced by <link linkend="_analyze_8py_source_1l00447">libscanbuild.analyze.run()</link>.</para>
    </section><anchor xml:id="_namespacelibscanbuild_1_1analyze_1a549c835dae0038a8679739773976f696"/>    <section>
    <title>require()</title>
<indexterm><primary>require</primary><secondary>libscanbuild.analyze</secondary></indexterm>
<indexterm><primary>libscanbuild.analyze</primary><secondary>require</secondary></indexterm>
<para><computeroutput>def libscanbuild.analyze.require ( required)</computeroutput></para>
<para><literallayout><computeroutput> Decorator for checking the required values in state.

It checks the required attributes in the passed state and stop when
any of those is missing. </computeroutput></literallayout> </para>
<para>
Definition at line <link linkend="_analyze_8py_source_1l00416">416</link> of file <link linkend="_analyze_8py_source">analyze.py</link>.</para>
<programlisting>00416 <emphasis role="keyword">def&#32;</emphasis><link linkend="_namespacelibscanbuild_1_1analyze_1a549c835dae0038a8679739773976f696">require</link>(required):
00417 &#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;&quot;&quot;&#32;Decorator&#32;for&#32;checking&#32;the&#32;required&#32;values&#32;in&#32;state.</emphasis>
00418 <emphasis role="stringliteral"></emphasis>
00419 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;It&#32;checks&#32;the&#32;required&#32;attributes&#32;in&#32;the&#32;passed&#32;state&#32;and&#32;stop&#32;when</emphasis>
00420 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;any&#32;of&#32;those&#32;is&#32;missing.&#32;&quot;&quot;&quot;</emphasis>
00421 
00422 &#32;&#32;&#32;&#32;<emphasis role="keyword">def&#32;</emphasis>decorator(function):
00423 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="preprocessor">@functools.wraps(function)</emphasis>
00424 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">def&#32;</emphasis>wrapper(*args,&#32;**kwargs):
00425 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;key&#32;<emphasis role="keywordflow">in</emphasis>&#32;required:
00426 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;key&#32;<emphasis role="keywordflow">not</emphasis>&#32;<emphasis role="keywordflow">in</emphasis>&#32;args[0]:
00427 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">raise</emphasis>&#32;KeyError(<emphasis role="stringliteral">&apos;{0}&#32;not&#32;passed&#32;to&#32;{1}&apos;</emphasis>.format(
00428 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;key,&#32;function.__name__))
00429 
00430 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;function(*args,&#32;**kwargs)
00431 
00432 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;wrapper
00433 
00434 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;decorator
00435 
00436 
00437 <emphasis role="preprocessor">@require([&apos;command&apos;,&#32;&#32;#&#32;entry&#32;from&#32;compilation&#32;database&#x240A;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&apos;directory&apos;,&#32;&#32;#&#32;entry&#32;from&#32;compilation&#32;database&#x240A;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&apos;file&apos;,&#32;&#32;#&#32;entry&#32;from&#32;compilation&#32;database&#x240A;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&apos;clang&apos;,&#32;&#32;#&#32;clang&#32;executable&#32;name&#32;(and&#32;path)</emphasis>
00438 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&apos;direct_args&apos;</emphasis>,&#32;&#32;<emphasis role="comment">#&#32;arguments&#32;from&#32;command&#32;line</emphasis>
00439 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&apos;force_debug&apos;</emphasis>,&#32;&#32;<emphasis role="comment">#&#32;kill&#32;non&#32;debug&#32;macros</emphasis>
00440 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&apos;output_dir&apos;</emphasis>,&#32;&#32;<emphasis role="comment">#&#32;where&#32;generated&#32;report&#32;files&#32;shall&#32;go</emphasis>
00441 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&apos;output_format&apos;</emphasis>,&#32;&#32;<emphasis role="comment">#&#32;it&apos;s&#32;&apos;plist&apos;,&#32;&apos;html&apos;,&#32;&apos;plist-html&apos;,&#32;&apos;plist-multi-file&apos;,&#32;&apos;sarif&apos;,&#32;or&#32;&apos;sarif-html&apos;</emphasis>
00442 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&apos;output_failures&apos;</emphasis>,&#32;&#32;<emphasis role="comment">#&#32;generate&#32;crash&#32;reports&#32;or&#32;not</emphasis>
00443 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&apos;ctu&apos;</emphasis>])&#32;&#32;<emphasis role="comment">#&#32;ctu&#32;control&#32;options</emphasis>
00444 
</programlisting><para>
References <link linkend="_analyze_8py_source_1l00447">libscanbuild.analyze.run()</link>.</para>
    </section><anchor xml:id="_namespacelibscanbuild_1_1analyze_1a505fccfeb836b113101687366a231f5f"/>    <section>
    <title>run()</title>
<indexterm><primary>run</primary><secondary>libscanbuild.analyze</secondary></indexterm>
<indexterm><primary>libscanbuild.analyze</primary><secondary>run</secondary></indexterm>
<para><computeroutput>def libscanbuild.analyze.run ( opts)</computeroutput></para>
<para><literallayout><computeroutput> Entry point to run (or not) static analyzer against a single entry
of the compilation database.

This complex task is decomposed into smaller methods which are calling
each other in chain. If the analysis is not possible the given method
just return and break the chain.

The passed parameter is a python dictionary. Each method first check
that the needed parameters received. (This is done by the &apos;require&apos;
decorator. It&apos;s like an &apos;assert&apos; to check the contract between the
caller and the called method.) </computeroutput></literallayout> </para>
<para>
Definition at line <link linkend="_analyze_8py_source_1l00447">447</link> of file <link linkend="_analyze_8py_source">analyze.py</link>.</para>
<programlisting>00447 <emphasis role="keyword">def&#32;</emphasis><link linkend="_namespacelibscanbuild_1_1analyze_1a505fccfeb836b113101687366a231f5f">run</link>(opts):
00448 &#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;&quot;&quot;&#32;Entry&#32;point&#32;to&#32;run&#32;(or&#32;not)&#32;static&#32;analyzer&#32;against&#32;a&#32;single&#32;entry</emphasis>
00449 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;of&#32;the&#32;compilation&#32;database.</emphasis>
00450 <emphasis role="stringliteral"></emphasis>
00451 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;This&#32;complex&#32;task&#32;is&#32;decomposed&#32;into&#32;smaller&#32;methods&#32;which&#32;are&#32;calling</emphasis>
00452 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;each&#32;other&#32;in&#32;chain.&#32;If&#32;the&#32;analysis&#32;is&#32;not&#32;possible&#32;the&#32;given&#32;method</emphasis>
00453 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;just&#32;return&#32;and&#32;break&#32;the&#32;chain.</emphasis>
00454 <emphasis role="stringliteral"></emphasis>
00455 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;The&#32;passed&#32;parameter&#32;is&#32;a&#32;python&#32;dictionary.&#32;Each&#32;method&#32;first&#32;check</emphasis>
00456 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;that&#32;the&#32;needed&#32;parameters&#32;received.&#32;(This&#32;is&#32;done&#32;by&#32;the&#32;&apos;require&apos;</emphasis>
00457 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;decorator.&#32;It&apos;s&#32;like&#32;an&#32;&apos;assert&apos;&#32;to&#32;check&#32;the&#32;contract&#32;between&#32;the</emphasis>
00458 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;caller&#32;and&#32;the&#32;called&#32;method.)&#32;&quot;&quot;&quot;</emphasis>
00459 
00460 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">try</emphasis>:
00461 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;command&#32;=&#32;opts.pop(<emphasis role="stringliteral">&apos;command&apos;</emphasis>)
00462 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;command&#32;=&#32;command&#32;<emphasis role="keywordflow">if</emphasis>&#32;isinstance(command,&#32;list)&#32;<emphasis role="keywordflow">else</emphasis>&#32;<link linkend="_namespacelibscanbuild_1_1shell_1ae2a3d56a48c3f8031021d617491be88c">decode</link>(command)
00463 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;logging.debug(<emphasis role="stringliteral">&quot;Run&#32;analyzer&#32;against&#32;&apos;%s&apos;&quot;</emphasis>,&#32;command)
00464 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;opts.update(<link linkend="_namespacelibscanbuild_1_1analyze_1a88d630b78f7304bed2cf7dbedcf0c495">classify_parameters</link>(command))
00465 
00466 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespacelibscanbuild_1_1analyze_1ae904fd60725ff1fb90431b995a50faef">arch_check</link>(opts)
00467 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">except</emphasis>&#32;Exception:
00468 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;logging.error(<emphasis role="stringliteral">&quot;Problem&#32;occurred&#32;during&#32;analysis.&quot;</emphasis>,&#32;exc_info=1)
00469 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keywordtype">None</emphasis>
00470 
00471 
00472 <emphasis role="preprocessor">@require([&apos;clang&apos;,&#32;&apos;directory&apos;,&#32;&apos;flags&apos;,&#32;&apos;file&apos;,&#32;&apos;output_dir&apos;,&#32;&apos;language&apos;,&#x240A;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&apos;error_output&apos;,&#32;&apos;exit_code&apos;])</emphasis>
00473 
</programlisting><para>
References <link linkend="_analyze_8py_source_1l00724">libscanbuild.analyze.arch_check()</link>, <link linkend="_analyze_8py_source_1l00777">libscanbuild.analyze.classify_parameters()</link>, <link linkend="_shell_8py_source_1l00054">libscanbuild.shell.decode()</link>, and <link linkend="_analyze_8py_source_1l00474">libscanbuild.analyze.report_failure()</link>.</para>
<para>
Referenced by <link linkend="_analyze_8py_source_1l00304">libscanbuild.analyze.analyze_compiler_wrapper_impl()</link>, and <link linkend="_analyze_8py_source_1l00416">libscanbuild.analyze.require()</link>.</para>
    </section><anchor xml:id="_namespacelibscanbuild_1_1analyze_1a30e68b322e290e30d92b1abd99d3adba"/>    <section>
    <title>run_analyzer()</title>
<indexterm><primary>run_analyzer</primary><secondary>libscanbuild.analyze</secondary></indexterm>
<indexterm><primary>libscanbuild.analyze</primary><secondary>run_analyzer</secondary></indexterm>
<para><computeroutput>def libscanbuild.analyze.run_analyzer ( opts,  continuation = <computeroutput><link linkend="_namespacelibscanbuild_1_1analyze_1ab61521bbea87c4deac819a03ebf006fa">report_failure</link></computeroutput>
)</computeroutput></para>
<para><literallayout><computeroutput> It assembles the analysis command line and executes it. Capture the
output of the analysis and returns with it. If failure reports are
requested, it calls the continuation to generate it. </computeroutput></literallayout> </para>
<para>
Definition at line <link linkend="_analyze_8py_source_1l00532">532</link> of file <link linkend="_analyze_8py_source">analyze.py</link>.</para>
<programlisting>00532 <emphasis role="keyword">def&#32;</emphasis><link linkend="_namespacelibscanbuild_1_1analyze_1a30e68b322e290e30d92b1abd99d3adba">run_analyzer</link>(opts,&#32;continuation=report_failure):
00533 &#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;&quot;&quot;&#32;It&#32;assembles&#32;the&#32;analysis&#32;command&#32;line&#32;and&#32;executes&#32;it.&#32;Capture&#32;the</emphasis>
00534 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;output&#32;of&#32;the&#32;analysis&#32;and&#32;returns&#32;with&#32;it.&#32;If&#32;failure&#32;reports&#32;are</emphasis>
00535 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;requested,&#32;it&#32;calls&#32;the&#32;continuation&#32;to&#32;generate&#32;it.&#32;&quot;&quot;&quot;</emphasis>
00536 
00537 &#32;&#32;&#32;&#32;<emphasis role="keyword">def&#32;</emphasis>target():
00538 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;&quot;&quot;&#32;Creates&#32;output&#32;file&#32;name&#32;for&#32;reports.&#32;&quot;&quot;&quot;</emphasis>
00539 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;opts[<emphasis role="stringliteral">&apos;output_format&apos;</emphasis>]&#32;<emphasis role="keywordflow">in</emphasis>&#32;{
00540 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&apos;plist&apos;</emphasis>,
00541 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&apos;plist-html&apos;</emphasis>,
00542 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&apos;plist-multi-file&apos;</emphasis>}:
00543 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(handle,&#32;name)&#32;=&#32;tempfile.mkstemp(prefix=<emphasis role="stringliteral">&apos;report-&apos;</emphasis>,
00544 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;suffix=<emphasis role="stringliteral">&apos;.plist&apos;</emphasis>,
00545 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;dir=opts[<emphasis role="stringliteral">&apos;output_dir&apos;</emphasis>])
00546 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;os.close(handle)
00547 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;name
00548 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">elif</emphasis>&#32;opts[<emphasis role="stringliteral">&apos;output_format&apos;</emphasis>]&#32;<emphasis role="keywordflow">in</emphasis>&#32;{
00549 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&apos;sarif&apos;</emphasis>,
00550 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&apos;sarif-html&apos;</emphasis>}:
00551 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(handle,&#32;name)&#32;=&#32;tempfile.mkstemp(prefix=<emphasis role="stringliteral">&apos;result-&apos;</emphasis>,
00552 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;suffix=<emphasis role="stringliteral">&apos;.sarif&apos;</emphasis>,
00553 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;dir=opts[<emphasis role="stringliteral">&apos;output_dir&apos;</emphasis>])
00554 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;os.close(handle)
00555 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;name
00556 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;opts[<emphasis role="stringliteral">&apos;output_dir&apos;</emphasis>]
00557 
00558 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">try</emphasis>:
00559 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cwd&#32;=&#32;opts[<emphasis role="stringliteral">&apos;directory&apos;</emphasis>]
00560 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cmd&#32;=&#32;<link linkend="_namespacelibscanbuild_1_1clang_1aceaa1fcd710247641672c50964398c2a">get_arguments</link>([opts[<emphasis role="stringliteral">&apos;clang&apos;</emphasis>],&#32;<emphasis role="stringliteral">&apos;--analyze&apos;</emphasis>]&#32;+
00561 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;opts[<emphasis role="stringliteral">&apos;direct_args&apos;</emphasis>]&#32;+&#32;opts[<emphasis role="stringliteral">&apos;flags&apos;</emphasis>]&#32;+
00562 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[opts[<emphasis role="stringliteral">&apos;file&apos;</emphasis>],&#32;<emphasis role="stringliteral">&apos;-o&apos;</emphasis>,&#32;target()],
00563 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cwd)
00564 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;output&#32;=&#32;<link linkend="_namespacelibscanbuild_1a243b8757d8cfbc0be023301a8b951d6c">run_command</link>(cmd,&#32;cwd=cwd)
00565 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{<emphasis role="stringliteral">&apos;error_output&apos;</emphasis>:&#32;output,&#32;<emphasis role="stringliteral">&apos;exit_code&apos;</emphasis>:&#32;0}
00566 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">except</emphasis>&#32;subprocess.CalledProcessError&#32;<emphasis role="keyword">as</emphasis>&#32;ex:
00567 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;result&#32;=&#32;{<emphasis role="stringliteral">&apos;error_output&apos;</emphasis>:&#32;ex.output,&#32;<emphasis role="stringliteral">&apos;exit_code&apos;</emphasis>:&#32;ex.returncode}
00568 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;opts.get(<emphasis role="stringliteral">&apos;output_failures&apos;</emphasis>,&#32;<emphasis role="keyword">False</emphasis>):
00569 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;opts.update(result)
00570 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;continuation(opts)
00571 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;result
00572 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">except</emphasis>&#32;ClangErrorException&#32;<emphasis role="keyword">as</emphasis>&#32;ex:
00573 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;result&#32;=&#32;{<emphasis role="stringliteral">&apos;error_output&apos;</emphasis>:&#32;ex.error,&#32;<emphasis role="stringliteral">&apos;exit_code&apos;</emphasis>:&#32;0}
00574 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;opts.get(<emphasis role="stringliteral">&apos;output_failures&apos;</emphasis>,&#32;<emphasis role="keyword">False</emphasis>):
00575 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;opts.update(result)
00576 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;continuation(opts)
00577 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;result
00578 
00579 
</programlisting><para>
References <link linkend="_analyze_8py_source_1l00580">libscanbuild.analyze.extdef_map_list_src_to_ast()</link>, <link linkend="_clang_8py_source_1l00038">libscanbuild.clang.get_arguments()</link>, and <link linkend="_lib_2libscanbuild_2____init_____8py_source_1l00059">libscanbuild.run_command()</link>.</para>
<para>
Referenced by <link linkend="_analyze_8py_source_1l00474">libscanbuild.analyze.report_failure()</link>.</para>
    </section><anchor xml:id="_namespacelibscanbuild_1_1analyze_1a62edf1ce0e836c051970ac438b02283b"/>    <section>
    <title>run_analyzer_parallel()</title>
<indexterm><primary>run_analyzer_parallel</primary><secondary>libscanbuild.analyze</secondary></indexterm>
<indexterm><primary>libscanbuild.analyze</primary><secondary>run_analyzer_parallel</secondary></indexterm>
<para><computeroutput>def libscanbuild.analyze.run_analyzer_parallel ( args)</computeroutput></para>
<para><literallayout><computeroutput> Runs the analyzer against the given compilation database. </computeroutput></literallayout> </para>
<para>
Definition at line <link linkend="_analyze_8py_source_1l00208">208</link> of file <link linkend="_analyze_8py_source">analyze.py</link>.</para>
<programlisting>00208 <emphasis role="keyword">def&#32;</emphasis><link linkend="_namespacelibscanbuild_1_1analyze_1a62edf1ce0e836c051970ac438b02283b">run_analyzer_parallel</link>(args):
00209 &#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;&quot;&quot;&#32;Runs&#32;the&#32;analyzer&#32;against&#32;the&#32;given&#32;compilation&#32;database.&#32;&quot;&quot;&quot;</emphasis>
00210 
00211 &#32;&#32;&#32;&#32;<emphasis role="keyword">def&#32;</emphasis>exclude(filename,&#32;directory):
00212 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;&quot;&quot;&#32;Return&#32;true&#32;when&#32;any&#32;excluded&#32;directory&#32;prefix&#32;the&#32;filename.&#32;&quot;&quot;&quot;</emphasis>
00213 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keywordflow">not</emphasis>&#32;os.path.isabs(filename):
00214 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">#&#32;filename&#32;is&#32;either&#32;absolute&#32;or&#32;relative&#32;to&#32;directory.&#32;Need&#32;to&#32;turn</emphasis>
00215 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">#&#32;it&#32;to&#32;absolute&#32;since&#32;&apos;args.excludes&apos;&#32;are&#32;absolute&#32;paths.</emphasis>
00216 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;filename&#32;=&#32;os.path.normpath(os.path.join(directory,&#32;filename))
00217 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;any(re.match(<emphasis role="stringliteral">r&apos;^&apos;</emphasis>&#32;+&#32;exclude_directory,&#32;filename)
00218 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;exclude_directory&#32;<emphasis role="keywordflow">in</emphasis>&#32;args.excludes)
00219 
00220 &#32;&#32;&#32;&#32;consts&#32;=&#32;{
00221 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&apos;clang&apos;</emphasis>:&#32;args.clang,
00222 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&apos;output_dir&apos;</emphasis>:&#32;args.output,
00223 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&apos;output_format&apos;</emphasis>:&#32;args.output_format,
00224 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&apos;output_failures&apos;</emphasis>:&#32;args.output_failures,
00225 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&apos;direct_args&apos;</emphasis>:&#32;<link linkend="_namespacelibscanbuild_1_1analyze_1a9a2730f2c21ff9a529be335691f1c626">analyzer_params</link>(args),
00226 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&apos;force_debug&apos;</emphasis>:&#32;args.force_debug,
00227 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&apos;ctu&apos;</emphasis>:&#32;<link linkend="_namespacelibscanbuild_1_1analyze_1af93d444a00436010a8d789229d081555">get_ctu_config_from_args</link>(args)
00228 &#32;&#32;&#32;&#32;}
00229 
00230 &#32;&#32;&#32;&#32;logging.debug(<emphasis role="stringliteral">&apos;run&#32;analyzer&#32;against&#32;compilation&#32;database&apos;</emphasis>)
00231 &#32;&#32;&#32;&#32;<emphasis role="keyword">with</emphasis>&#32;<link linkend="_namespacestartfile_1aa582f75134b683dc321c07d01ff8e501">open</link>(args.cdb,&#32;<emphasis role="stringliteral">&apos;r&apos;</emphasis>)&#32;<emphasis role="keyword">as</emphasis>&#32;handle:
00232 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;generator&#32;=&#32;(dict(cmd,&#32;**consts)
00233 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;cmd&#32;<emphasis role="keywordflow">in</emphasis>&#32;json.load(handle)&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keywordflow">not</emphasis>&#32;exclude(
00234 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cmd[<emphasis role="stringliteral">&apos;file&apos;</emphasis>],&#32;cmd[<emphasis role="stringliteral">&apos;directory&apos;</emphasis>]))
00235 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">#&#32;when&#32;verbose&#32;output&#32;requested&#32;execute&#32;sequentially</emphasis>
00236 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;pool&#32;=&#32;multiprocessing.Pool(1&#32;<emphasis role="keywordflow">if</emphasis>&#32;args.verbose&#32;&gt;&#32;2&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordtype">None</emphasis>)
00237 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;current&#32;<emphasis role="keywordflow">in</emphasis>&#32;pool.imap_unordered(run,&#32;generator):
00238 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;current&#32;<emphasis role="keywordflow">is</emphasis>&#32;<emphasis role="keywordflow">not</emphasis>&#32;<emphasis role="keywordtype">None</emphasis>:
00239 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">#&#32;display&#32;error&#32;message&#32;from&#32;the&#32;static&#32;analyzer</emphasis>
00240 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;line&#32;<emphasis role="keywordflow">in</emphasis>&#32;current[<emphasis role="stringliteral">&apos;error_output&apos;</emphasis>]:
00241 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;logging.info(line.rstrip())
00242 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;pool.close()
00243 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;pool.join()
00244 
00245 
</programlisting><para>
References <link linkend="_analyze_8py_source_1l00379">libscanbuild.analyze.analyzer_params()</link>, <link linkend="_analyze_8py_source_1l00114">libscanbuild.analyze.get_ctu_config_from_args()</link>, and <link linkend="_startfile_8py_source_1l00206">startfile.open()</link>.</para>
<para>
Referenced by <link linkend="_analyze_8py_source_1l00246">libscanbuild.analyze.govern_analyzer_runs()</link>.</para>
    </section><anchor xml:id="_namespacelibscanbuild_1_1analyze_1ae936eaf80eeb685aa31309e4220f9d34"/>    <section>
    <title>scan_build()</title>
<indexterm><primary>scan_build</primary><secondary>libscanbuild.analyze</secondary></indexterm>
<indexterm><primary>libscanbuild.analyze</primary><secondary>scan_build</secondary></indexterm>
<para><computeroutput>def libscanbuild.analyze.scan_build ( )</computeroutput></para>
<para><literallayout><computeroutput> Entry point for scan-build command. </computeroutput></literallayout> </para>
<para>
Definition at line <link linkend="_analyze_8py_source_1l00050">50</link> of file <link linkend="_analyze_8py_source">analyze.py</link>.</para>
<programlisting>00050 <emphasis role="keyword">def&#32;</emphasis><link linkend="_namespacelibscanbuild_1_1analyze_1ae936eaf80eeb685aa31309e4220f9d34">scan_build</link>():
00051 &#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;&quot;&quot;&#32;Entry&#32;point&#32;for&#32;scan-build&#32;command.&#32;&quot;&quot;&quot;</emphasis>
00052 
00053 &#32;&#32;&#32;&#32;args&#32;=&#32;<link linkend="_namespacelibscanbuild_1_1arguments_1af1e8772037b973224007e13c89c00631">parse_args_for_scan_build</link>()
00054 &#32;&#32;&#32;&#32;<emphasis role="comment">#&#32;will&#32;re-assign&#32;the&#32;report&#32;directory&#32;as&#32;new&#32;output</emphasis>
00055 &#32;&#32;&#32;&#32;<emphasis role="keyword">with</emphasis>&#32;<link linkend="_namespacelibscanbuild_1_1analyze_1acf09f49183e565d9bcfcada3eeae1547">report_directory</link>(
00056 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;args.output,&#32;args.keep_empty,&#32;args.output_format)&#32;<emphasis role="keyword">as</emphasis>&#32;args.output:
00057 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">#&#32;Run&#32;against&#32;a&#32;build&#32;command.&#32;there&#32;are&#32;cases,&#32;when&#32;analyzer&#32;run</emphasis>
00058 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">#&#32;is&#32;not&#32;required.&#32;But&#32;we&#32;need&#32;to&#32;set&#32;up&#32;everything&#32;for&#32;the</emphasis>
00059 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">#&#32;wrappers,&#32;because&#32;&apos;configure&apos;&#32;needs&#32;to&#32;capture&#32;the&#32;CC/CXX&#32;values</emphasis>
00060 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">#&#32;for&#32;the&#32;Makefile.</emphasis>
00061 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;args.intercept_first:
00062 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">#&#32;Run&#32;build&#32;command&#32;with&#32;intercept&#32;module.</emphasis>
00063 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;exit_code&#32;=&#32;<link linkend="_namespacelibscanbuild_1_1intercept_1a86c3040b1932a4e5ab92fc0208cf7376">capture</link>(args)
00064 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">#&#32;Run&#32;the&#32;analyzer&#32;against&#32;the&#32;captured&#32;commands.</emphasis>
00065 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<link linkend="_namespacelibscanbuild_1_1analyze_1a25b489e21548410a6f6ca7d6058e9a14">need_analyzer</link>(args.build):
00066 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacelibscanbuild_1_1analyze_1a727f2164f89d25c11e2977655d3e6192">govern_analyzer_runs</link>(args)
00067 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>:
00068 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">#&#32;Run&#32;build&#32;command&#32;and&#32;analyzer&#32;with&#32;compiler&#32;wrappers.</emphasis>
00069 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;environment&#32;=&#32;<link linkend="_namespacelibscanbuild_1_1analyze_1ad19f0ab8fa3cf72e2ec036f7d94f2cee">setup_environment</link>(args)
00070 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;exit_code&#32;=&#32;<link linkend="_namespacelibscanbuild_1a18b34e68ad68eb5b285d3af3504c9b0c">run_build</link>(args.build,&#32;env=environment)
00071 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">#&#32;Cover&#32;report&#32;generation&#32;and&#32;bug&#32;counting.</emphasis>
00072 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;number_of_bugs&#32;=&#32;<link linkend="_namespacelibscanbuild_1_1report_1aa904f76cf35a4ed932c596460fbcbbc8">document</link>(args)
00073 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">#&#32;Set&#32;exit&#32;status&#32;as&#32;it&#32;was&#32;requested.</emphasis>
00074 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;number_of_bugs&#32;<emphasis role="keywordflow">if</emphasis>&#32;args.status_bugs&#32;<emphasis role="keywordflow">else</emphasis>&#32;exit_code
00075 
00076 
00077 <emphasis role="preprocessor">@command_entry_point</emphasis>
</programlisting><para>
References <link linkend="_intercept_8py_source_1l00058">libscanbuild.intercept.capture()</link>, <link linkend="_report_8py_source_1l00026">libscanbuild.report.document()</link>, <link linkend="_analyze_8py_source_1l00246">libscanbuild.analyze.govern_analyzer_runs()</link>, <link linkend="_analyze_8py_source_1l00092">libscanbuild.analyze.need_analyzer()</link>, <link linkend="_arguments_8py_source_1l00061">libscanbuild.arguments.parse_args_for_scan_build()</link>, <link linkend="_analyze_8py_source_1l00340">libscanbuild.analyze.report_directory()</link>, <link linkend="_lib_2libscanbuild_2____init_____8py_source_1l00046">libscanbuild.run_build()</link>, and <link linkend="_analyze_8py_source_1l00278">libscanbuild.analyze.setup_environment()</link>.</para>
    </section><anchor xml:id="_namespacelibscanbuild_1_1analyze_1ad19f0ab8fa3cf72e2ec036f7d94f2cee"/>    <section>
    <title>setup_environment()</title>
<indexterm><primary>setup_environment</primary><secondary>libscanbuild.analyze</secondary></indexterm>
<indexterm><primary>libscanbuild.analyze</primary><secondary>setup_environment</secondary></indexterm>
<para><computeroutput>def libscanbuild.analyze.setup_environment ( args)</computeroutput></para>
<para><literallayout><computeroutput> Set up environment for build command to interpose compiler wrapper. </computeroutput></literallayout> </para>
<para>
Definition at line <link linkend="_analyze_8py_source_1l00278">278</link> of file <link linkend="_analyze_8py_source">analyze.py</link>.</para>
<programlisting>00278 <emphasis role="keyword">def&#32;</emphasis><link linkend="_namespacelibscanbuild_1_1analyze_1ad19f0ab8fa3cf72e2ec036f7d94f2cee">setup_environment</link>(args):
00279 &#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;&quot;&quot;&#32;Set&#32;up&#32;environment&#32;for&#32;build&#32;command&#32;to&#32;interpose&#32;compiler&#32;wrapper.&#32;&quot;&quot;&quot;</emphasis>
00280 
00281 &#32;&#32;&#32;&#32;environment&#32;=&#32;dict(os.environ)
00282 &#32;&#32;&#32;&#32;environment.update(<link linkend="_namespacelibscanbuild_1a618962b6b79f889cbadd9fbc5971c938">wrapper_environment</link>(args))
00283 &#32;&#32;&#32;&#32;environment.update({
00284 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&apos;CC&apos;</emphasis>:&#32;COMPILER_WRAPPER_CC,
00285 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&apos;CXX&apos;</emphasis>:&#32;COMPILER_WRAPPER_CXX,
00286 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&apos;ANALYZE_BUILD_CLANG&apos;</emphasis>:&#32;args.clang&#32;<emphasis role="keywordflow">if</emphasis>&#32;<link linkend="_namespacelibscanbuild_1_1analyze_1a25b489e21548410a6f6ca7d6058e9a14">need_analyzer</link>(args.build)&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="stringliteral">&apos;&apos;</emphasis>,
00287 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&apos;ANALYZE_BUILD_REPORT_DIR&apos;</emphasis>:&#32;args.output,
00288 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&apos;ANALYZE_BUILD_REPORT_FORMAT&apos;</emphasis>:&#32;args.output_format,
00289 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&apos;ANALYZE_BUILD_REPORT_FAILURES&apos;</emphasis>:&#32;<emphasis role="stringliteral">&apos;yes&apos;</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;args.output_failures&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="stringliteral">&apos;&apos;</emphasis>,
00290 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&apos;ANALYZE_BUILD_PARAMETERS&apos;</emphasis>:&#32;<emphasis role="stringliteral">&apos;&#32;&apos;</emphasis>.join(<link linkend="_namespacelibscanbuild_1_1analyze_1a9a2730f2c21ff9a529be335691f1c626">analyzer_params</link>(args)),
00291 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&apos;ANALYZE_BUILD_FORCE_DEBUG&apos;</emphasis>:&#32;<emphasis role="stringliteral">&apos;yes&apos;</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;args.force_debug&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="stringliteral">&apos;&apos;</emphasis>,
00292 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&apos;ANALYZE_BUILD_CTU&apos;</emphasis>:&#32;json.dumps(<link linkend="_namespacelibscanbuild_1_1analyze_1af93d444a00436010a8d789229d081555">get_ctu_config_from_args</link>(args))
00293 &#32;&#32;&#32;&#32;})
00294 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;environment
00295 
00296 
00297 <emphasis role="preprocessor">@command_entry_point</emphasis>
</programlisting><para>
References <link linkend="_analyze_8py_source_1l00379">libscanbuild.analyze.analyzer_params()</link>, <link linkend="_analyze_8py_source_1l00114">libscanbuild.analyze.get_ctu_config_from_args()</link>, <link linkend="_analyze_8py_source_1l00092">libscanbuild.analyze.need_analyzer()</link>, and <link linkend="_lib_2libscanbuild_2____init_____8py_source_1l00198">libscanbuild.wrapper_environment()</link>.</para>
<para>
Referenced by <link linkend="_analyze_8py_source_1l00050">libscanbuild.analyze.scan_build()</link>.</para>
</section>
</section>
<section>
<title>Variable Documentation</title>
<anchor xml:id="_namespacelibscanbuild_1_1analyze_1a465bf942eb92f47670cfbf42f3d3b492"/>    <section>
    <title>COMPILER_WRAPPER_CC</title>
<indexterm><primary>COMPILER_WRAPPER_CC</primary><secondary>libscanbuild.analyze</secondary></indexterm>
<indexterm><primary>libscanbuild.analyze</primary><secondary>COMPILER_WRAPPER_CC</secondary></indexterm>
<para><computeroutput>string libscanbuild.analyze.COMPILER_WRAPPER_CC = &apos;analyze-cc&apos;</computeroutput></para><para>
Definition at line <link linkend="_analyze_8py_source_1l00042">42</link> of file <link linkend="_analyze_8py_source">analyze.py</link>.</para>
    </section><anchor xml:id="_namespacelibscanbuild_1_1analyze_1a093e4e01674825746c8dca2c3a0b3ad4"/>    <section>
    <title>COMPILER_WRAPPER_CXX</title>
<indexterm><primary>COMPILER_WRAPPER_CXX</primary><secondary>libscanbuild.analyze</secondary></indexterm>
<indexterm><primary>libscanbuild.analyze</primary><secondary>COMPILER_WRAPPER_CXX</secondary></indexterm>
<para><computeroutput>string libscanbuild.analyze.COMPILER_WRAPPER_CXX = &apos;analyze-c++&apos;</computeroutput></para><para>
Definition at line <link linkend="_analyze_8py_source_1l00043">43</link> of file <link linkend="_analyze_8py_source">analyze.py</link>.</para>
    </section><anchor xml:id="_namespacelibscanbuild_1_1analyze_1a60479fc2f65fd6f8fa70ece6a555a32d"/>    <section>
    <title>CTU_EXTDEF_MAP_FILENAME</title>
<indexterm><primary>CTU_EXTDEF_MAP_FILENAME</primary><secondary>libscanbuild.analyze</secondary></indexterm>
<indexterm><primary>libscanbuild.analyze</primary><secondary>CTU_EXTDEF_MAP_FILENAME</secondary></indexterm>
<para><computeroutput>string libscanbuild.analyze.CTU_EXTDEF_MAP_FILENAME = &apos;externalDefMap.txt&apos;</computeroutput></para><para>
Definition at line <link linkend="_analyze_8py_source_1l00045">45</link> of file <link linkend="_analyze_8py_source">analyze.py</link>.</para>
    </section><anchor xml:id="_namespacelibscanbuild_1_1analyze_1af69a2823a3919b8223b79278cec07fb3"/>    <section>
    <title>CTU_TEMP_DEFMAP_FOLDER</title>
<indexterm><primary>CTU_TEMP_DEFMAP_FOLDER</primary><secondary>libscanbuild.analyze</secondary></indexterm>
<indexterm><primary>libscanbuild.analyze</primary><secondary>CTU_TEMP_DEFMAP_FOLDER</secondary></indexterm>
<para><computeroutput>string libscanbuild.analyze.CTU_TEMP_DEFMAP_FOLDER = &apos;tmpExternalDefMaps&apos;</computeroutput></para><para>
Definition at line <link linkend="_analyze_8py_source_1l00046">46</link> of file <link linkend="_analyze_8py_source">analyze.py</link>.</para>
    </section><anchor xml:id="_namespacelibscanbuild_1_1analyze_1ab246be544945b6a304ded48006891a91"/>    <section>
    <title>IGNORED_FLAGS</title>
<indexterm><primary>IGNORED_FLAGS</primary><secondary>libscanbuild.analyze</secondary></indexterm>
<indexterm><primary>libscanbuild.analyze</primary><secondary>IGNORED_FLAGS</secondary></indexterm>
<para><computeroutput>dictionary libscanbuild.analyze.IGNORED_FLAGS</computeroutput></para><emphasis role="strong">Initial value:</emphasis><programlisting>00001 =&#32;&#32;{
00002 &#32;&#32;&#32;&#32;<emphasis role="stringliteral">&apos;-c&apos;</emphasis>:&#32;0,&#32;&#32;<emphasis role="comment">#&#32;compile&#32;option&#32;will&#32;be&#32;overwritten</emphasis>
00003 &#32;&#32;&#32;&#32;<emphasis role="stringliteral">&apos;-fsyntax-only&apos;</emphasis>:&#32;0,&#32;&#32;<emphasis role="comment">#&#32;static&#32;analyzer&#32;option&#32;will&#32;be&#32;overwritten</emphasis>
00004 &#32;&#32;&#32;&#32;<emphasis role="stringliteral">&apos;-o&apos;</emphasis>:&#32;1,&#32;&#32;<emphasis role="comment">#&#32;will&#32;set&#32;up&#32;own&#32;output&#32;file</emphasis>
00005 &#32;&#32;&#32;&#32;<emphasis role="comment">#&#32;flags&#32;below&#32;are&#32;inherited&#32;from&#32;the&#32;perl&#32;implementation.</emphasis>
00006 &#32;&#32;&#32;&#32;<emphasis role="stringliteral">&apos;-g&apos;</emphasis>:&#32;0,
00007 &#32;&#32;&#32;&#32;<emphasis role="stringliteral">&apos;-save-temps&apos;</emphasis>:&#32;0,
00008 &#32;&#32;&#32;&#32;<emphasis role="stringliteral">&apos;-install_name&apos;</emphasis>:&#32;1,
00009 &#32;&#32;&#32;&#32;<emphasis role="stringliteral">&apos;-exported_symbols_list&apos;</emphasis>:&#32;1,
00010 &#32;&#32;&#32;&#32;<emphasis role="stringliteral">&apos;-current_version&apos;</emphasis>:&#32;1,
00011 &#32;&#32;&#32;&#32;<emphasis role="stringliteral">&apos;-compatibility_version&apos;</emphasis>:&#32;1,
00012 &#32;&#32;&#32;&#32;<emphasis role="stringliteral">&apos;-init&apos;</emphasis>:&#32;1,
00013 &#32;&#32;&#32;&#32;<emphasis role="stringliteral">&apos;-e&apos;</emphasis>:&#32;1,
00014 &#32;&#32;&#32;&#32;<emphasis role="stringliteral">&apos;-seg1addr&apos;</emphasis>:&#32;1,
00015 &#32;&#32;&#32;&#32;<emphasis role="stringliteral">&apos;-bundle_loader&apos;</emphasis>:&#32;1,
00016 &#32;&#32;&#32;&#32;<emphasis role="stringliteral">&apos;-multiply_defined&apos;</emphasis>:&#32;1,
00017 &#32;&#32;&#32;&#32;<emphasis role="stringliteral">&apos;-sectorder&apos;</emphasis>:&#32;3,
00018 &#32;&#32;&#32;&#32;<emphasis role="stringliteral">&apos;--param&apos;</emphasis>:&#32;1,
00019 &#32;&#32;&#32;&#32;<emphasis role="stringliteral">&apos;--serialize-diagnostics&apos;</emphasis>:&#32;1
00020 }
</programlisting><para>
Definition at line <link linkend="_analyze_8py_source_1l00755">755</link> of file <link linkend="_analyze_8py_source">analyze.py</link>.</para>
</section>
</section>
</section>
