<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_clang_8py_source" xml:lang="en-US">
<title>clang.py</title>
<indexterm><primary>/Users/maximilian/clang-llvm/clang/tools/scan-build-py/lib/libscanbuild/clang.py</primary></indexterm>
<programlisting><anchor xml:id="_clang_8py_source_1l00001"/><link linkend="_namespacelibscanbuild_1_1clang">00001</link> <emphasis role="comment">#&#32;-*-&#32;coding:&#32;utf-8&#32;-*-</emphasis>
00002 <emphasis role="comment">#&#32;Part&#32;of&#32;the&#32;LLVM&#32;Project,&#32;under&#32;the&#32;Apache&#32;License&#32;v2.0&#32;with&#32;LLVM&#32;Exceptions.</emphasis>
00003 <emphasis role="comment">#&#32;See&#32;https://llvm.org/LICENSE.txt&#32;for&#32;license&#32;information.</emphasis>
00004 <emphasis role="comment">#&#32;SPDX-License-Identifier:&#32;Apache-2.0&#32;WITH&#32;LLVM-exception</emphasis>
00005 <emphasis role="stringliteral">&quot;&quot;&quot;&#32;This&#32;module&#32;is&#32;responsible&#32;for&#32;the&#32;Clang&#32;executable.</emphasis>
00006 <emphasis role="stringliteral"></emphasis>
00007 <emphasis role="stringliteral">Since&#32;Clang&#32;command&#32;line&#32;interface&#32;is&#32;so&#32;rich,&#32;but&#32;this&#32;project&#32;is&#32;using&#32;only</emphasis>
00008 <emphasis role="stringliteral">a&#32;subset&#32;of&#32;that,&#32;it&#32;makes&#32;sense&#32;to&#32;create&#32;a&#32;function&#32;specific&#32;wrapper.&#32;&quot;&quot;&quot;</emphasis>
00009 
00010 <emphasis role="keyword">import</emphasis>&#32;subprocess
00011 <emphasis role="keyword">import</emphasis>&#32;re
00012 <emphasis role="keyword">from</emphasis>&#32;libscanbuild&#32;<emphasis role="keyword">import</emphasis>&#32;run_command
00013 <emphasis role="keyword">from</emphasis>&#32;<link linkend="_namespacelibscanbuild_1_1shell">libscanbuild.shell</link>&#32;<emphasis role="keyword">import</emphasis>&#32;decode
00014 
00015 __all__&#32;=&#32;[<emphasis role="stringliteral">&apos;get_version&apos;</emphasis>,&#32;<emphasis role="stringliteral">&apos;get_arguments&apos;</emphasis>,&#32;<emphasis role="stringliteral">&apos;get_checkers&apos;</emphasis>,&#32;<emphasis role="stringliteral">&apos;is_ctu_capable&apos;</emphasis>,
00016 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&apos;get_triple_arch&apos;</emphasis>]
00017 
00018 <emphasis role="comment">#&#32;regex&#32;for&#32;activated&#32;checker</emphasis>
<anchor xml:id="_clang_8py_source_1l00019"/><link linkend="_namespacelibscanbuild_1_1clang_1a432255a4149d3c1c5deb929fdad2b46e">00019</link> ACTIVE_CHECKER_PATTERN&#32;=&#32;re.compile(<emphasis role="stringliteral">r&apos;^-analyzer-checker=(.*)$&apos;</emphasis>)
00020 
00021 
<anchor xml:id="_clang_8py_source_1l00022"/><link linkend="_classlibscanbuild_1_1clang_1_1_clang_error_exception">00022</link> <emphasis role="keyword">class&#32;</emphasis><link linkend="_classlibscanbuild_1_1clang_1_1_clang_error_exception">ClangErrorException</link>(Exception):
<anchor xml:id="_clang_8py_source_1l00023"/><link linkend="_classlibscanbuild_1_1clang_1_1_clang_error_exception_1a9a3730ddea03516554caad5b08bc6af8">00023</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">def&#32;</emphasis><link linkend="_classlibscanbuild_1_1clang_1_1_clang_error_exception_1a9a3730ddea03516554caad5b08bc6af8">__init__</link>(self,&#32;error):
<anchor xml:id="_clang_8py_source_1l00024"/><link linkend="_classlibscanbuild_1_1clang_1_1_clang_error_exception_1ac37907e37dff53d3ad7ad597f66f4cbf">00024</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;self.<link linkend="_classlibscanbuild_1_1clang_1_1_clang_error_exception_1ac37907e37dff53d3ad7ad597f66f4cbf">error</link>error&#32;=&#32;error
00025 
00026 
<anchor xml:id="_clang_8py_source_1l00027"/><link linkend="_namespacelibscanbuild_1_1clang_1ac38809d624aaefe00fff85b0bfa1005f">00027</link> <emphasis role="keyword">def&#32;</emphasis><link linkend="_namespacelibscanbuild_1_1clang_1ac38809d624aaefe00fff85b0bfa1005f">get_version</link>(clang):
00028 &#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;&quot;&quot;&#32;Returns&#32;the&#32;compiler&#32;version&#32;as&#32;string.</emphasis>
00029 <emphasis role="stringliteral"></emphasis>
00030 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;:param&#32;clang:&#32;&#32;&#32;the&#32;compiler&#32;we&#32;are&#32;using</emphasis>
00031 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;:return:&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;the&#32;version&#32;string&#32;printed&#32;to&#32;stderr&#32;&quot;&quot;&quot;</emphasis>
00032 
00033 &#32;&#32;&#32;&#32;output&#32;=&#32;<link linkend="_namespacelibscanbuild_1a243b8757d8cfbc0be023301a8b951d6c">run_command</link>([clang,&#32;<emphasis role="stringliteral">&apos;-v&apos;</emphasis>])
00034 &#32;&#32;&#32;&#32;<emphasis role="comment">#&#32;the&#32;relevant&#32;version&#32;info&#32;is&#32;in&#32;the&#32;first&#32;line</emphasis>
00035 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;output[0]
00036 
00037 
<anchor xml:id="_clang_8py_source_1l00038"/><link linkend="_namespacelibscanbuild_1_1clang_1aceaa1fcd710247641672c50964398c2a">00038</link> <emphasis role="keyword">def&#32;</emphasis><link linkend="_namespacelibscanbuild_1_1clang_1aceaa1fcd710247641672c50964398c2a">get_arguments</link>(command,&#32;cwd):
00039 &#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;&quot;&quot;&#32;Capture&#32;Clang&#32;invocation.</emphasis>
00040 <emphasis role="stringliteral"></emphasis>
00041 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;:param&#32;command:&#32;the&#32;compilation&#32;command</emphasis>
00042 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;:param&#32;cwd:&#32;&#32;&#32;&#32;&#32;the&#32;current&#32;working&#32;directory</emphasis>
00043 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;:return:&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;the&#32;detailed&#32;front-end&#32;invocation&#32;command&#32;&quot;&quot;&quot;</emphasis>
00044 
00045 &#32;&#32;&#32;&#32;cmd&#32;=&#32;command[:]
00046 &#32;&#32;&#32;&#32;cmd.insert(1,&#32;<emphasis role="stringliteral">&apos;-###&apos;</emphasis>)
00047 &#32;&#32;&#32;&#32;cmd.append(<emphasis role="stringliteral">&apos;-fno-color-diagnostics&apos;</emphasis>)
00048 
00049 &#32;&#32;&#32;&#32;output&#32;=&#32;<link linkend="_namespacelibscanbuild_1a243b8757d8cfbc0be023301a8b951d6c">run_command</link>(cmd,&#32;cwd=cwd)
00050 &#32;&#32;&#32;&#32;<emphasis role="comment">#&#32;The&#32;relevant&#32;information&#32;is&#32;in&#32;the&#32;last&#32;line&#32;of&#32;the&#32;output.</emphasis>
00051 &#32;&#32;&#32;&#32;<emphasis role="comment">#&#32;Don&apos;t&#32;check&#32;if&#32;finding&#32;last&#32;line&#32;fails,&#32;would&#32;throw&#32;exception&#32;anyway.</emphasis>
00052 &#32;&#32;&#32;&#32;last_line&#32;=&#32;output[-1]
00053 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;re.search(<emphasis role="stringliteral">r&apos;clang(.*):&#32;error:&apos;</emphasis>,&#32;last_line):
00054 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">raise</emphasis>&#32;<link linkend="_classlibscanbuild_1_1clang_1_1_clang_error_exception">ClangErrorException</link>(last_line)
00055 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespacelibscanbuild_1_1shell_1ae2a3d56a48c3f8031021d617491be88c">decode</link>(last_line)
00056 
00057 
<anchor xml:id="_clang_8py_source_1l00058"/><link linkend="_namespacelibscanbuild_1_1clang_1a22384ca519d665152d7131a80ea349bb">00058</link> <emphasis role="keyword">def&#32;</emphasis><link linkend="_namespacelibscanbuild_1_1clang_1a22384ca519d665152d7131a80ea349bb">get_active_checkers</link>(clang,&#32;plugins):
00059 &#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;&quot;&quot;&#32;Get&#32;the&#32;active&#32;checker&#32;list.</emphasis>
00060 <emphasis role="stringliteral"></emphasis>
00061 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;:param&#32;clang:&#32;&#32;&#32;the&#32;compiler&#32;we&#32;are&#32;using</emphasis>
00062 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;:param&#32;plugins:&#32;list&#32;of&#32;plugins&#32;which&#32;was&#32;requested&#32;by&#32;the&#32;user</emphasis>
00063 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;:return:&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;list&#32;of&#32;checker&#32;names&#32;which&#32;are&#32;active</emphasis>
00064 <emphasis role="stringliteral"></emphasis>
00065 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;To&#32;get&#32;the&#32;default&#32;checkers&#32;we&#32;execute&#32;Clang&#32;to&#32;print&#32;how&#32;this</emphasis>
00066 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;compilation&#32;would&#32;be&#32;called.&#32;And&#32;take&#32;out&#32;the&#32;enabled&#32;checker&#32;from&#32;the</emphasis>
00067 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;arguments.&#32;For&#32;input&#32;file&#32;we&#32;specify&#32;stdin&#32;and&#32;pass&#32;only&#32;language</emphasis>
00068 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;information.&#32;&quot;&quot;&quot;</emphasis>
00069 
00070 &#32;&#32;&#32;&#32;<emphasis role="keyword">def&#32;</emphasis>get_active_checkers_for(language):
00071 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;&quot;&quot;&#32;Returns&#32;a&#32;list&#32;of&#32;active&#32;checkers&#32;for&#32;the&#32;given&#32;language.&#32;&quot;&quot;&quot;</emphasis>
00072 
00073 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;load_args&#32;=&#32;[arg
00074 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;plugin&#32;<emphasis role="keywordflow">in</emphasis>&#32;plugins
00075 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;arg&#32;<emphasis role="keywordflow">in</emphasis>&#32;[<emphasis role="stringliteral">&apos;-Xclang&apos;</emphasis>,&#32;<emphasis role="stringliteral">&apos;-load&apos;</emphasis>,&#32;<emphasis role="stringliteral">&apos;-Xclang&apos;</emphasis>,&#32;plugin]]
00076 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cmd&#32;=&#32;[clang,&#32;<emphasis role="stringliteral">&apos;--analyze&apos;</emphasis>]&#32;+&#32;load_args&#32;+&#32;[<emphasis role="stringliteral">&apos;-x&apos;</emphasis>,&#32;language,&#32;<emphasis role="stringliteral">&apos;-&apos;</emphasis>]
00077 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;[ACTIVE_CHECKER_PATTERN.match(arg).group(1)
00078 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;arg&#32;<emphasis role="keywordflow">in</emphasis>&#32;<link linkend="_namespacelibscanbuild_1_1clang_1aceaa1fcd710247641672c50964398c2a">get_arguments</link>(cmd,&#32;<emphasis role="stringliteral">&apos;.&apos;</emphasis>)
00079 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;ACTIVE_CHECKER_PATTERN.match(arg)]
00080 
00081 &#32;&#32;&#32;&#32;result&#32;=&#32;set()
00082 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;language&#32;<emphasis role="keywordflow">in</emphasis>&#32;[<emphasis role="stringliteral">&apos;c&apos;</emphasis>,&#32;<emphasis role="stringliteral">&apos;c++&apos;</emphasis>,&#32;<emphasis role="stringliteral">&apos;objective-c&apos;</emphasis>,&#32;<emphasis role="stringliteral">&apos;objective-c++&apos;</emphasis>]:
00083 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;result.update(get_active_checkers_for(language))
00084 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;frozenset(result)
00085 
00086 
<anchor xml:id="_clang_8py_source_1l00087"/><link linkend="_namespacelibscanbuild_1_1clang_1a34893da383d84e138695f07a596d1b2b">00087</link> <emphasis role="keyword">def&#32;</emphasis><link linkend="_namespacelibscanbuild_1_1clang_1a34893da383d84e138695f07a596d1b2b">is_active</link>(checkers):
00088 &#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;&quot;&quot;&#32;Returns&#32;a&#32;method,&#32;which&#32;classifies&#32;the&#32;checker&#32;active&#32;or&#32;not,</emphasis>
00089 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;based&#32;on&#32;the&#32;received&#32;checker&#32;name&#32;list.&#32;&quot;&quot;&quot;</emphasis>
00090 
00091 &#32;&#32;&#32;&#32;<emphasis role="keyword">def&#32;</emphasis>predicate(checker):
00092 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;&quot;&quot;&#32;Returns&#32;True&#32;if&#32;the&#32;given&#32;checker&#32;is&#32;active.&#32;&quot;&quot;&quot;</emphasis>
00093 
00094 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;any(pattern.match(checker)&#32;<emphasis role="keywordflow">for</emphasis>&#32;pattern&#32;<emphasis role="keywordflow">in</emphasis>&#32;predicate.patterns)
00095 
00096 &#32;&#32;&#32;&#32;predicate.patterns&#32;=&#32;[re.compile(<emphasis role="stringliteral">r&apos;^&apos;</emphasis>&#32;+&#32;a&#32;+&#32;<emphasis role="stringliteral">r&apos;(\.|$)&apos;</emphasis>)&#32;<emphasis role="keywordflow">for</emphasis>&#32;a&#32;<emphasis role="keywordflow">in</emphasis>&#32;checkers]
00097 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;predicate
00098 
00099 
<anchor xml:id="_clang_8py_source_1l00100"/><link linkend="_namespacelibscanbuild_1_1clang_1af887fda2dc553cce619a1a5dc9a39267">00100</link> <emphasis role="keyword">def&#32;</emphasis><link linkend="_namespacelibscanbuild_1_1clang_1af887fda2dc553cce619a1a5dc9a39267">parse_checkers</link>(stream):
00101 &#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;&quot;&quot;&#32;Parse&#32;clang&#32;-analyzer-checker-help&#32;output.</emphasis>
00102 <emphasis role="stringliteral"></emphasis>
00103 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;Below&#32;the&#32;line&#32;&apos;CHECKERS:&apos;&#32;are&#32;there&#32;the&#32;name&#32;description&#32;pairs.</emphasis>
00104 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;Many&#32;of&#32;them&#32;are&#32;in&#32;one&#32;line,&#32;but&#32;some&#32;long&#32;named&#32;checker&#32;has&#32;the</emphasis>
00105 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;name&#32;and&#32;the&#32;description&#32;in&#32;separate&#32;lines.</emphasis>
00106 <emphasis role="stringliteral"></emphasis>
00107 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;The&#32;checker&#32;name&#32;is&#32;always&#32;prefixed&#32;with&#32;two&#32;space&#32;character.&#32;The</emphasis>
00108 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;name&#32;contains&#32;no&#32;whitespaces.&#32;Then&#32;followed&#32;by&#32;newline&#32;(if&#32;it&apos;s</emphasis>
00109 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;too&#32;long)&#32;or&#32;other&#32;space&#32;characters&#32;comes&#32;the&#32;description&#32;of&#32;the</emphasis>
00110 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;checker.&#32;The&#32;description&#32;ends&#32;with&#32;a&#32;newline&#32;character.</emphasis>
00111 <emphasis role="stringliteral"></emphasis>
00112 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;:param&#32;stream:&#32;&#32;list&#32;of&#32;lines&#32;to&#32;parse</emphasis>
00113 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;:return:&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;generator&#32;of&#32;tuples</emphasis>
00114 <emphasis role="stringliteral"></emphasis>
00115 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;(&lt;checker&#32;name&gt;,&#32;&lt;checker&#32;description&gt;)&#32;&quot;&quot;&quot;</emphasis>
00116 
00117 &#32;&#32;&#32;&#32;lines&#32;=&#32;iter(stream)
00118 &#32;&#32;&#32;&#32;<emphasis role="comment">#&#32;find&#32;checkers&#32;header</emphasis>
00119 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;line&#32;<emphasis role="keywordflow">in</emphasis>&#32;lines:
00120 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;re.match(<emphasis role="stringliteral">r&apos;^CHECKERS:&apos;</emphasis>,&#32;line):
00121 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>
00122 &#32;&#32;&#32;&#32;<emphasis role="comment">#&#32;find&#32;entries</emphasis>
00123 &#32;&#32;&#32;&#32;state&#32;=&#32;<emphasis role="keywordtype">None</emphasis>
00124 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;line&#32;<emphasis role="keywordflow">in</emphasis>&#32;lines:
00125 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;state&#32;<emphasis role="keywordflow">and</emphasis>&#32;<emphasis role="keywordflow">not</emphasis>&#32;re.match(<emphasis role="stringliteral">r&apos;^\s\s\S&apos;</emphasis>,&#32;line):
00126 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">yield</emphasis>&#32;(state,&#32;line.strip())
00127 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;state&#32;=&#32;<emphasis role="keywordtype">None</emphasis>
00128 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">elif</emphasis>&#32;re.match(<emphasis role="stringliteral">r&apos;^\s\s\S+$&apos;</emphasis>,&#32;line.rstrip()):
00129 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;state&#32;=&#32;line.strip()
00130 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>:
00131 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;pattern&#32;=&#32;re.compile(<emphasis role="stringliteral">r&apos;^\s\s(?P&lt;key&gt;\S*)\s*(?P&lt;value&gt;.*)&apos;</emphasis>)
00132 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;match&#32;=&#32;pattern.match(line.rstrip())
00133 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;match:
00134 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;current&#32;=&#32;match.groupdict()
00135 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">yield</emphasis>&#32;(current[<emphasis role="stringliteral">&apos;key&apos;</emphasis>],&#32;current[<emphasis role="stringliteral">&apos;value&apos;</emphasis>])
00136 
00137 
<anchor xml:id="_clang_8py_source_1l00138"/><link linkend="_namespacelibscanbuild_1_1clang_1a70514d7e50269346912151e9c2b0e0d7">00138</link> <emphasis role="keyword">def&#32;</emphasis><link linkend="_namespacelibscanbuild_1_1clang_1a70514d7e50269346912151e9c2b0e0d7">get_checkers</link>(clang,&#32;plugins):
00139 &#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;&quot;&quot;&#32;Get&#32;all&#32;the&#32;available&#32;checkers&#32;from&#32;default&#32;and&#32;from&#32;the&#32;plugins.</emphasis>
00140 <emphasis role="stringliteral"></emphasis>
00141 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;:param&#32;clang:&#32;&#32;&#32;the&#32;compiler&#32;we&#32;are&#32;using</emphasis>
00142 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;:param&#32;plugins:&#32;list&#32;of&#32;plugins&#32;which&#32;was&#32;requested&#32;by&#32;the&#32;user</emphasis>
00143 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;:return:&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;a&#32;dictionary&#32;of&#32;all&#32;available&#32;checkers&#32;and&#32;its&#32;status</emphasis>
00144 <emphasis role="stringliteral"></emphasis>
00145 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;{&lt;checker&#32;name&gt;:&#32;(&lt;checker&#32;description&gt;,&#32;&lt;is&#32;active&#32;by&#32;default&gt;)}&#32;&quot;&quot;&quot;</emphasis>
00146 
00147 &#32;&#32;&#32;&#32;load&#32;=&#32;[elem&#32;<emphasis role="keywordflow">for</emphasis>&#32;plugin&#32;<emphasis role="keywordflow">in</emphasis>&#32;plugins&#32;<emphasis role="keywordflow">for</emphasis>&#32;elem&#32;<emphasis role="keywordflow">in</emphasis>&#32;[<emphasis role="stringliteral">&apos;-load&apos;</emphasis>,&#32;plugin]]
00148 &#32;&#32;&#32;&#32;cmd&#32;=&#32;[clang,&#32;<emphasis role="stringliteral">&apos;-cc1&apos;</emphasis>]&#32;+&#32;load&#32;+&#32;[<emphasis role="stringliteral">&apos;-analyzer-checker-help&apos;</emphasis>]
00149 
00150 &#32;&#32;&#32;&#32;lines&#32;=&#32;<link linkend="_namespacelibscanbuild_1a243b8757d8cfbc0be023301a8b951d6c">run_command</link>(cmd)
00151 
00152 &#32;&#32;&#32;&#32;is_active_checker&#32;=&#32;<link linkend="_namespacelibscanbuild_1_1clang_1a34893da383d84e138695f07a596d1b2b">is_active</link>(<link linkend="_namespacelibscanbuild_1_1clang_1a22384ca519d665152d7131a80ea349bb">get_active_checkers</link>(clang,&#32;plugins))
00153 
00154 &#32;&#32;&#32;&#32;checkers&#32;=&#32;{
00155 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;name:&#32;(description,&#32;is_active_checker(name))
00156 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;name,&#32;description&#32;<emphasis role="keywordflow">in</emphasis>&#32;<link linkend="_namespacelibscanbuild_1_1clang_1af887fda2dc553cce619a1a5dc9a39267">parse_checkers</link>(lines)
00157 &#32;&#32;&#32;&#32;}
00158 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keywordflow">not</emphasis>&#32;checkers:
00159 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">raise</emphasis>&#32;Exception(<emphasis role="stringliteral">&apos;Could&#32;not&#32;query&#32;Clang&#32;for&#32;available&#32;checkers.&apos;</emphasis>)
00160 
00161 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;checkers
00162 
00163 
<anchor xml:id="_clang_8py_source_1l00164"/><link linkend="_namespacelibscanbuild_1_1clang_1aea5b01c822382e97fd622bbfadd82c62">00164</link> <emphasis role="keyword">def&#32;</emphasis><link linkend="_namespacelibscanbuild_1_1clang_1aea5b01c822382e97fd622bbfadd82c62">is_ctu_capable</link>(extdef_map_cmd):
00165 &#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;&quot;&quot;&#32;Detects&#32;if&#32;the&#32;current&#32;(or&#32;given)&#32;clang&#32;and&#32;external&#32;definition&#32;mapping</emphasis>
00166 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;executables&#32;are&#32;CTU&#32;compatible.&#32;&quot;&quot;&quot;</emphasis>
00167 
00168 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">try</emphasis>:
00169 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacelibscanbuild_1a243b8757d8cfbc0be023301a8b951d6c">run_command</link>([extdef_map_cmd,&#32;<emphasis role="stringliteral">&apos;-version&apos;</emphasis>])
00170 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">except</emphasis>&#32;(OSError,&#32;subprocess.CalledProcessError):
00171 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">False</emphasis>
00172 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">True</emphasis>
00173 
00174 
<anchor xml:id="_clang_8py_source_1l00175"/><link linkend="_namespacelibscanbuild_1_1clang_1af91327b127fdb63a9c81a3d8d03d5149">00175</link> <emphasis role="keyword">def&#32;</emphasis><link linkend="_namespacelibscanbuild_1_1clang_1af91327b127fdb63a9c81a3d8d03d5149">get_triple_arch</link>(command,&#32;cwd):
00176 &#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;&quot;&quot;Returns&#32;the&#32;architecture&#32;part&#32;of&#32;the&#32;target&#32;triple&#32;for&#32;the&#32;given</emphasis>
00177 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;compilation&#32;command.&#32;&quot;&quot;&quot;</emphasis>
00178 
00179 &#32;&#32;&#32;&#32;cmd&#32;=&#32;<link linkend="_namespacelibscanbuild_1_1clang_1aceaa1fcd710247641672c50964398c2a">get_arguments</link>(command,&#32;cwd)
00180 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">try</emphasis>:
00181 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;separator&#32;=&#32;cmd.index(<emphasis role="stringliteral">&quot;-triple&quot;</emphasis>)
00182 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;cmd[separator&#32;+&#32;1]
00183 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">except</emphasis>&#32;(IndexError,&#32;ValueError):
00184 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="stringliteral">&quot;&quot;</emphasis>
</programlisting></section>
