<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_namespaceclang" xml:lang="en-US">
<title>clang Namespace Reference</title>
<indexterm><primary>clang</primary></indexterm>
<para>

<para>-rename </para>
 
</para>
<simplesect>
    <title>Namespaces    </title>
        <itemizedlist>
            <listitem><para> <link linkend="_namespaceclang_1_1comments">comments</link></para>
</listitem>
            <listitem><para> <link linkend="_namespaceclang_1_1cxcomment">cxcomment</link></para>
</listitem>
            <listitem><para> <link linkend="_namespaceclang_1_1cxcursor">cxcursor</link></para>
</listitem>
            <listitem><para> <link linkend="_namespaceclang_1_1cxdiag">cxdiag</link></para>
</listitem>
            <listitem><para> <link linkend="_namespaceclang_1_1cxindex">cxindex</link></para>
</listitem>
            <listitem><para> <link linkend="_namespaceclang_1_1cxloc">cxloc</link></para>
</listitem>
            <listitem><para> <link linkend="_namespaceclang_1_1cxstring">cxstring</link></para>
</listitem>
            <listitem><para> <link linkend="_namespaceclang_1_1cxtu">cxtu</link></para>
</listitem>
            <listitem><para> <link linkend="_namespaceclang_1_1cxtype">cxtype</link></para>
</listitem>
            <listitem><para> <link linkend="_namespaceclang_1_1format">format</link></para>
</listitem>
            <listitem><para> <link linkend="_namespaceclang_1_1index">index</link></para>
</listitem>
            <listitem><para> <link linkend="_namespaceclang_1_1refactor">refactor</link></para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Classes    </title>
        <itemizedlist>
            <listitem><para>class <link linkend="_classclang_1_1_c_x_diagnostic_set_impl">CXDiagnosticSetImpl</link></para>
</listitem>
            <listitem><para>class <link linkend="_classclang_1_1_c_x_diagnostic_impl">CXDiagnosticImpl</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structclang_1_1_c_x_stored_diagnostic">CXStoredDiagnostic</link></para>

<para>The storage behind a CXDiagnostic. </para>
</listitem>
            <listitem><para>class <link linkend="_classclang_1_1_c_indexer">CIndexer</link></para>
</listitem>
            <listitem><para>class <link linkend="_classclang_1_1_libclang_invocation_reporter">LibclangInvocationReporter</link></para>
</listitem>
            <listitem><para>class <link linkend="_classclang_1_1_c_x_loaded_diagnostic">CXLoadedDiagnostic</link></para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Functions    </title>
        <itemizedlist>
            <listitem><para>bool <link linkend="_namespaceclang_1af866b018fe401ae941a367429bdd4c9a">RunSafely</link> (llvm::CrashRecoveryContext &amp;CRC, llvm::function_ref&lt; void()&gt; Fn, unsigned Size)</para>
</listitem>
            <listitem><para>unsigned <link linkend="_namespaceclang_1a784fd2a03784a2dbb08d1841240adb88">GetSafetyThreadStackSize</link> ()</para>

<para>Return the current size to request for &quot;safety&quot;. </para>
</listitem>
            <listitem><para>void <link linkend="_namespaceclang_1a074a6c2b8523d8b50f446a28e8e0f5c4">SetSafetyThreadStackSize</link> (unsigned Value)</para>
</listitem>
            <listitem><para>void <link linkend="_namespaceclang_1ab1c32e4de49bdf7a50374807a6d2701c">setThreadBackgroundPriority</link> ()</para>
</listitem>
            <listitem><para>void <link linkend="_namespaceclang_1aa969857ada50e5f302f7127c78a63018">PrintLibclangResourceUsage</link> (CXTranslationUnit TU)</para>

<para>Print libclang&apos;s resource usage to standard error. </para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Detailed Description</title>

<para>-rename </para>

<para><literallayout><computeroutput>Minimal clang-rename integration with Vim.

Before installing make sure one of the following is satisfied:

* clang-rename is in your PATH
* `g:clang_rename_path` in ~/.vimrc points to valid clang-rename executable
* `binary` in clang-rename.py points to valid to clang-rename executable

To install, simply put this into your ~/.vimrc for python2 support

    noremap &lt;leader&gt;cr :pyf &lt;path-to&gt;/clang-rename.py&lt;cr&gt;

For python3 use the following command (note the change from :pyf to :py3f)

    noremap &lt;leader&gt;cr :py3f &lt;path-to&gt;/clang-rename.py&lt;cr&gt;

IMPORTANT NOTE: Before running the tool, make sure you saved the file.

All you have to do now is to place a cursor on a variable/function/class which
you would like to rename and press &apos;&lt;leader&gt;cr&apos;. You will be prompted for a new
name if the cursor points to a valid symbol.
</computeroutput></literallayout> </para>
</section>
<section>
<title>Function Documentation</title>
<anchor xml:id="_namespaceclang_1a784fd2a03784a2dbb08d1841240adb88"/>    <section>
    <title>GetSafetyThreadStackSize()</title>
<indexterm><primary>GetSafetyThreadStackSize</primary><secondary>clang</secondary></indexterm>
<indexterm><primary>clang</primary><secondary>GetSafetyThreadStackSize</secondary></indexterm>
<para><computeroutput>unsigned clang::GetSafetyThreadStackSize ( )</computeroutput></para><para>

<para>Return the current size to request for &quot;safety&quot;. </para>
</para>
<para>
Definition at line <link linkend="__c_index_8cpp_source_1l08979">8979</link> of file <link linkend="__c_index_8cpp_source">CIndex.cpp</link>.</para>
<programlisting>08979 {&#32;<emphasis role="keywordflow">return</emphasis>&#32;SafetyStackThreadSize;&#32;}
</programlisting><para>
Referenced by <link linkend="__c_index_8cpp_source_1l08970">RunSafely()</link>.</para>
    </section><anchor xml:id="_namespaceclang_1aa969857ada50e5f302f7127c78a63018"/>    <section>
    <title>PrintLibclangResourceUsage()</title>
<indexterm><primary>PrintLibclangResourceUsage</primary><secondary>clang</secondary></indexterm>
<indexterm><primary>clang</primary><secondary>PrintLibclangResourceUsage</secondary></indexterm>
<para><computeroutput>void clang::PrintLibclangResourceUsage (CXTranslationUnit TU)</computeroutput></para><para>

<para>Print libclang&apos;s resource usage to standard error. </para>
</para>
<para>
Definition at line <link linkend="__c_index_8cpp_source_1l08915">8915</link> of file <link linkend="__c_index_8cpp_source">CIndex.cpp</link>.</para>
<programlisting>08915 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
08916 &#32;&#32;CXTUResourceUsage&#32;Usage&#32;=&#32;<link linkend="__c_index_8cpp_1a72299455a328faf612d238bf6aee6eb6">clang_getCXTUResourceUsage</link>(TU);
08917 &#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">unsigned</emphasis>&#32;I&#32;=&#32;0;&#32;I&#32;!=&#32;Usage.numEntries;&#32;++I)
08918 &#32;&#32;&#32;&#32;fprintf(stderr,&#32;<emphasis role="stringliteral">&quot;&#32;&#32;%s:&#32;%lu\n&quot;</emphasis>,
08919 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__c_index_8cpp_1aeba9f6263fe5dbde18abb55b2f321a34">clang_getTUResourceUsageName</link>(Usage.entries[I].kind),
08920 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Usage.entries[I].amount);
08921 
08922 &#32;&#32;<link linkend="__c_index_8cpp_1a3e9a2455e3253920304adc26c1084a6f">clang_disposeCXTUResourceUsage</link>(Usage);
08923 }
</programlisting><para>
References <link linkend="__c_index_8cpp_source_1l08829">clang_disposeCXTUResourceUsage()</link>, <link linkend="__c_index_8cpp_source_1l08736">clang_getCXTUResourceUsage()</link>, and <link linkend="__c_index_8cpp_source_1l08687">clang_getTUResourceUsageName()</link>.</para>
    </section><anchor xml:id="_namespaceclang_1af866b018fe401ae941a367429bdd4c9a"/>    <section>
    <title>RunSafely()</title>
<indexterm><primary>RunSafely</primary><secondary>clang</secondary></indexterm>
<indexterm><primary>clang</primary><secondary>RunSafely</secondary></indexterm>
<para><computeroutput>bool clang::RunSafely (llvm::CrashRecoveryContext &amp; CRC, llvm::function_ref&lt; void()&gt; Fn, unsigned Size = <computeroutput>0</computeroutput>
)</computeroutput></para>
<para>Execution the given code &quot;safely&quot;, using crash recovery or safety threads when possible.</para>

<para><formalpara><title>Returns</title>

<para>False if a crash was detected. </para>
</formalpara>
</para>
<para>
Definition at line <link linkend="__c_index_8cpp_source_1l08970">8970</link> of file <link linkend="__c_index_8cpp_source">CIndex.cpp</link>.</para>
<programlisting>08971 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
08972 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!Size)
08973 &#32;&#32;&#32;&#32;Size&#32;=&#32;<link linkend="_namespaceclang_1a784fd2a03784a2dbb08d1841240adb88">GetSafetyThreadStackSize</link>();
08974 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(Size&#32;&amp;&amp;&#32;!getenv(<emphasis role="stringliteral">&quot;LIBCLANG_NOTHREADS&quot;</emphasis>))
08975 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;CRC.RunSafelyOnThread(Fn,&#32;Size);
08976 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;CRC.RunSafely(Fn);
08977 }
</programlisting><para>
References <link linkend="__c_index_8cpp_source_1l08979">GetSafetyThreadStackSize()</link>.</para>
    </section><anchor xml:id="_namespaceclang_1a074a6c2b8523d8b50f446a28e8e0f5c4"/>    <section>
    <title>SetSafetyThreadStackSize()</title>
<indexterm><primary>SetSafetyThreadStackSize</primary><secondary>clang</secondary></indexterm>
<indexterm><primary>clang</primary><secondary>SetSafetyThreadStackSize</secondary></indexterm>
<para><computeroutput>void clang::SetSafetyThreadStackSize (unsigned Value)</computeroutput></para>
<para>Set the current size to request for &quot;safety&quot; (or 0, if safety threads should not be used). </para>
<para>
Definition at line <link linkend="__c_index_8cpp_source_1l08981">8981</link> of file <link linkend="__c_index_8cpp_source">CIndex.cpp</link>.</para>
<programlisting>08981 {&#32;SafetyStackThreadSize&#32;=&#32;Value;&#32;}
</programlisting>    </section><anchor xml:id="_namespaceclang_1ab1c32e4de49bdf7a50374807a6d2701c"/>    <section>
    <title>setThreadBackgroundPriority()</title>
<indexterm><primary>setThreadBackgroundPriority</primary><secondary>clang</secondary></indexterm>
<indexterm><primary>clang</primary><secondary>setThreadBackgroundPriority</secondary></indexterm>
<para><computeroutput>void clang::setThreadBackgroundPriority ( )</computeroutput></para>
<para>Set the thread priority to background. FIXME: Move to llvm/Support. </para>
<para>
Definition at line <link linkend="__c_index_8cpp_source_1l08985">8985</link> of file <link linkend="__c_index_8cpp_source">CIndex.cpp</link>.</para>
<programlisting>08985 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
08986 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(getenv(<emphasis role="stringliteral">&quot;LIBCLANG_BGPRIO_DISABLE&quot;</emphasis>))
08987 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
08988 
08989 <emphasis role="preprocessor">#if&#32;LLVM_ENABLE_THREADS</emphasis>
08990 &#32;&#32;llvm::set_thread_priority(llvm::ThreadPriority::Background);
08991 <emphasis role="preprocessor">#endif</emphasis>
08992 }
</programlisting></section>
</section>
</section>
