<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_classclang_1_1_c_x_loaded_diagnostic" xml:lang="en-US">
<title>clang::CXLoadedDiagnostic Class Reference</title>
<indexterm><primary>clang::CXLoadedDiagnostic</primary></indexterm>
<para>
<computeroutput>#include &lt;CXLoadedDiagnostic.h&gt;</computeroutput>
</para>
<para>Inheritance diagram for clang::CXLoadedDiagnostic:    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="classclang_1_1_c_x_loaded_diagnostic.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
<simplesect>
    <title>Classes    </title>
        <itemizedlist>
            <listitem><para>struct <link linkend="_structclang_1_1_c_x_loaded_diagnostic_1_1_location">Location</link></para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Public Types    </title>
        <itemizedlist>
            <listitem><para>enum <link linkend="_classclang_1_1_c_x_diagnostic_impl_1a7f5f268f2ce5caa8ba3d99ad9df52cda">Kind</link> { <link linkend="_classclang_1_1_c_x_diagnostic_impl_1a7f5f268f2ce5caa8ba3d99ad9df52cdaa0bd35601037c6b3bc0264392e5d77bd6">StoredDiagnosticKind</link>
, <link linkend="_classclang_1_1_c_x_diagnostic_impl_1a7f5f268f2ce5caa8ba3d99ad9df52cdaa7cfd2d3ec9530885fe43a0d48de7e58f">LoadedDiagnosticKind</link>
, <link linkend="_classclang_1_1_c_x_diagnostic_impl_1a7f5f268f2ce5caa8ba3d99ad9df52cdaaf20568046c187883803beed039cbc572">CustomNoteDiagnosticKind</link>
 }</para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Public Member Functions    </title>
        <itemizedlist>
            <listitem><para><link linkend="_classclang_1_1_c_x_loaded_diagnostic_1a10066a8760a4fcb30587cd3218d231b9">CXLoadedDiagnostic</link> ()</para>
</listitem>
            <listitem><para><link linkend="_classclang_1_1_c_x_loaded_diagnostic_1a2fbb7a1695c7ddfecbce8c6e6ccbe2bf">~CXLoadedDiagnostic</link> () override</para>
</listitem>
            <listitem><para>CXDiagnosticSeverity <link linkend="_classclang_1_1_c_x_loaded_diagnostic_1a6f93075048fc3575fdf1d028ee0d45dd">getSeverity</link> () const override</para>

<para>Return the severity of the diagnostic. </para>
</listitem>
            <listitem><para>CXSourceLocation <link linkend="_classclang_1_1_c_x_loaded_diagnostic_1af8351a8c6ff232e82ac58432d440194b">getLocation</link> () const override</para>

<para>Return the location of the diagnostic. </para>
</listitem>
            <listitem><para>CXString <link linkend="_classclang_1_1_c_x_loaded_diagnostic_1a4f6c0b425afa599a837958dea19d5edd">getSpelling</link> () const override</para>

<para>Return the spelling of the diagnostic. </para>
</listitem>
            <listitem><para>CXString <link linkend="_classclang_1_1_c_x_loaded_diagnostic_1a5bfd490e9b9b3c8244c0168249031fad">getDiagnosticOption</link> (CXString *Disable) const override</para>

<para>Return the text for the diagnostic option. </para>
</listitem>
            <listitem><para>unsigned <link linkend="_classclang_1_1_c_x_loaded_diagnostic_1a3c54fb1ddeadaea6ea08696865267018">getCategory</link> () const override</para>

<para>Return the category of the diagnostic. </para>
</listitem>
            <listitem><para>CXString <link linkend="_classclang_1_1_c_x_loaded_diagnostic_1a4ee4446a2717375a88811bda8eb6dca5">getCategoryText</link> () const override</para>

<para>Return the category string of the diagnostic. </para>
</listitem>
            <listitem><para>unsigned <link linkend="_classclang_1_1_c_x_loaded_diagnostic_1abc268da8fbd76ad5b94c733f76baa463">getNumRanges</link> () const override</para>

<para>Return the number of source ranges for the diagnostic. </para>
</listitem>
            <listitem><para>CXSourceRange <link linkend="_classclang_1_1_c_x_loaded_diagnostic_1aed464b92b9a60863af495242983f6763">getRange</link> (unsigned Range) const override</para>

<para>Return the source ranges for the diagnostic. </para>
</listitem>
            <listitem><para>unsigned <link linkend="_classclang_1_1_c_x_loaded_diagnostic_1a24271e8676870afd1c75d6ee1133396e">getNumFixIts</link> () const override</para>

<para>Return the number of FixIts. </para>
</listitem>
            <listitem><para>CXString <link linkend="_classclang_1_1_c_x_loaded_diagnostic_1ada416d8f7f3bb37084c7f70f693be795">getFixIt</link> (unsigned FixIt, CXSourceRange *ReplacementRange) const override</para>

<para>Return the FixIt information (source range and inserted text). </para>
</listitem>
            <listitem><para><link linkend="_classclang_1_1_c_x_diagnostic_impl_1a7f5f268f2ce5caa8ba3d99ad9df52cda">Kind</link> <link linkend="_classclang_1_1_c_x_diagnostic_impl_1a291e683397c75960d2a722387bc4dca7">getKind</link> () const</para>
</listitem>
            <listitem><para><link linkend="_classclang_1_1_c_x_diagnostic_set_impl">CXDiagnosticSetImpl</link> &amp; <link linkend="_classclang_1_1_c_x_diagnostic_impl_1af56711ab018bcca7e31c5c0589743425">getChildDiagnostics</link> ()</para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Static Public Member Functions    </title>
        <itemizedlist>
            <listitem><para>static bool <link linkend="_classclang_1_1_c_x_loaded_diagnostic_1a22c98ce922a4222e7948084094ad2184">classof</link> (const <link linkend="_classclang_1_1_c_x_diagnostic_impl">CXDiagnosticImpl</link> *D)</para>
</listitem>
            <listitem><para>static void <link linkend="_classclang_1_1_c_x_loaded_diagnostic_1a62abf6e0788b0c0656a3054fd7c3b82d">decodeLocation</link> (CXSourceLocation location, CXFile *file, unsigned *line, unsigned *column, unsigned *offset)</para>

<para>Decode the CXSourceLocation into file, line, column, and offset. </para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Public Attributes    </title>
        <itemizedlist>
            <listitem><para><link linkend="_structclang_1_1_c_x_loaded_diagnostic_1_1_location">Location</link> <link linkend="_classclang_1_1_c_x_loaded_diagnostic_1aa5a1348035eb432b38aeb73a1ce69ed8">DiagLoc</link></para>
</listitem>
            <listitem><para>std::vector&lt; CXSourceRange &gt; <link linkend="_classclang_1_1_c_x_loaded_diagnostic_1a2296d7468a318e380b94c7cffc67c736">Ranges</link></para>
</listitem>
            <listitem><para>std::vector&lt; std::pair&lt; CXSourceRange, const char * &gt; &gt; <link linkend="_classclang_1_1_c_x_loaded_diagnostic_1a11446ee269ed4ceff36c4aa7ee513f44">FixIts</link></para>
</listitem>
            <listitem><para>const char * <link linkend="_classclang_1_1_c_x_loaded_diagnostic_1a318a6fd22942d00ea8ebc9203a432718">Spelling</link></para>
</listitem>
            <listitem><para>llvm::StringRef <link linkend="_classclang_1_1_c_x_loaded_diagnostic_1adbdc8150bfbb677803cdb32c7a8750b6">DiagOption</link></para>
</listitem>
            <listitem><para>llvm::StringRef <link linkend="_classclang_1_1_c_x_loaded_diagnostic_1a5039e5fa930900130479e374f35f7148">CategoryText</link></para>
</listitem>
            <listitem><para>unsigned <link linkend="_classclang_1_1_c_x_loaded_diagnostic_1a57570d2ac4e62ce4c0840c56db450120">severity</link></para>
</listitem>
            <listitem><para>unsigned <link linkend="_classclang_1_1_c_x_loaded_diagnostic_1aee1cb04e4cbc5bb4461068d24b4e4631">category</link></para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Protected Member Functions    </title>
        <itemizedlist>
            <listitem><para>void <link linkend="_classclang_1_1_c_x_diagnostic_impl_1ac1da33a15a858de42c4015a7264caa90">append</link> (std::unique_ptr&lt; <link linkend="_classclang_1_1_c_x_diagnostic_impl">CXDiagnosticImpl</link> &gt; D)</para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Protected Attributes    </title>
        <itemizedlist>
            <listitem><para><link linkend="_classclang_1_1_c_x_diagnostic_set_impl">CXDiagnosticSetImpl</link> <link linkend="_classclang_1_1_c_x_diagnostic_impl_1a8b46051cf84323f5590bd7ac5550e103">ChildDiags</link></para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Detailed Description</title>
<para>
Definition at line <link linkend="__c_x_loaded_diagnostic_8h_source_1l00023">23</link> of file <link linkend="__c_x_loaded_diagnostic_8h_source">CXLoadedDiagnostic.h</link>.</para>
</section>
<section>
<title>Member Enumeration Documentation</title>
<anchor xml:id="_classclang_1_1_c_x_diagnostic_impl_1a7f5f268f2ce5caa8ba3d99ad9df52cda"/>    <section>
    <title>Kind</title>
<indexterm><primary>Kind</primary><secondary>clang::CXLoadedDiagnostic</secondary></indexterm>
<indexterm><primary>clang::CXLoadedDiagnostic</primary><secondary>Kind</secondary></indexterm>
<para><computeroutput>enum <link linkend="_classclang_1_1_c_x_diagnostic_impl_1a7f5f268f2ce5caa8ba3d99ad9df52cda">clang::CXDiagnosticImpl::Kind</link><computeroutput>[inherited]</computeroutput></computeroutput></para><informaltable frame="all">
<title>Enumerator</title>
    <tgroup cols="2" align="left" colsep="1" rowsep="1">
      <colspec colname='c1'/>
      <colspec colname='c2'/>
<tbody>
<row><entry><indexterm><primary>StoredDiagnosticKind</primary><secondary>clang::CXLoadedDiagnostic</secondary></indexterm>
<indexterm><primary>clang::CXLoadedDiagnostic</primary><secondary>StoredDiagnosticKind</secondary></indexterm>
<anchor xml:id="_classclang_1_1_c_x_diagnostic_impl_1a7f5f268f2ce5caa8ba3d99ad9df52cdaa0bd35601037c6b3bc0264392e5d77bd6"/>StoredDiagnosticKind</entry><entry></entry></row><row><entry><indexterm><primary>LoadedDiagnosticKind</primary><secondary>clang::CXLoadedDiagnostic</secondary></indexterm>
<indexterm><primary>clang::CXLoadedDiagnostic</primary><secondary>LoadedDiagnosticKind</secondary></indexterm>
<anchor xml:id="_classclang_1_1_c_x_diagnostic_impl_1a7f5f268f2ce5caa8ba3d99ad9df52cdaa7cfd2d3ec9530885fe43a0d48de7e58f"/>LoadedDiagnosticKind</entry><entry></entry></row><row><entry><indexterm><primary>CustomNoteDiagnosticKind</primary><secondary>clang::CXLoadedDiagnostic</secondary></indexterm>
<indexterm><primary>clang::CXLoadedDiagnostic</primary><secondary>CustomNoteDiagnosticKind</secondary></indexterm>
<anchor xml:id="_classclang_1_1_c_x_diagnostic_impl_1a7f5f268f2ce5caa8ba3d99ad9df52cdaaf20568046c187883803beed039cbc572"/>CustomNoteDiagnosticKind</entry><entry></entry></row>    </tbody>
    </tgroup>
</informaltable>
<para>
Definition at line <link linkend="__c_index_diagnostic_8h_source_1l00056">56</link> of file <link linkend="__c_index_diagnostic_8h_source">CIndexDiagnostic.h</link>.</para>
<programlisting>00056 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;<link linkend="_classclang_1_1_c_x_diagnostic_impl_1a7f5f268f2ce5caa8ba3d99ad9df52cdaa0bd35601037c6b3bc0264392e5d77bd6">StoredDiagnosticKind</link>,&#32;<link linkend="_classclang_1_1_c_x_diagnostic_impl_1a7f5f268f2ce5caa8ba3d99ad9df52cdaa7cfd2d3ec9530885fe43a0d48de7e58f">LoadedDiagnosticKind</link>,
00057 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classclang_1_1_c_x_diagnostic_impl_1a7f5f268f2ce5caa8ba3d99ad9df52cdaaf20568046c187883803beed039cbc572">CustomNoteDiagnosticKind</link>&#32;};
</programlisting></section>
</section>
<section>
<title>Constructor &amp; Destructor Documentation</title>
<anchor xml:id="_classclang_1_1_c_x_loaded_diagnostic_1a10066a8760a4fcb30587cd3218d231b9"/>    <section>
    <title>CXLoadedDiagnostic()</title>
<indexterm><primary>CXLoadedDiagnostic</primary><secondary>clang::CXLoadedDiagnostic</secondary></indexterm>
<indexterm><primary>clang::CXLoadedDiagnostic</primary><secondary>CXLoadedDiagnostic</secondary></indexterm>
<para><computeroutput>clang::CXLoadedDiagnostic::CXLoadedDiagnostic ( )<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line <link linkend="__c_x_loaded_diagnostic_8h_source_1l00025">25</link> of file <link linkend="__c_x_loaded_diagnostic_8h_source">CXLoadedDiagnostic.h</link>.</para>
<programlisting>00025 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;<link linkend="_classclang_1_1_c_x_diagnostic_impl_1a4b828845f3ca99d9ba01c5083279850c">CXDiagnosticImpl</link>(<link linkend="_classclang_1_1_c_x_diagnostic_impl_1a7f5f268f2ce5caa8ba3d99ad9df52cdaa7cfd2d3ec9530885fe43a0d48de7e58f">LoadedDiagnosticKind</link>),
00026 &#32;&#32;&#32;&#32;<link linkend="_classclang_1_1_c_x_loaded_diagnostic_1a57570d2ac4e62ce4c0840c56db450120">severity</link>(0),&#32;<link linkend="_classclang_1_1_c_x_loaded_diagnostic_1aee1cb04e4cbc5bb4461068d24b4e4631">category</link>(0)&#32;{}
</programlisting>    </section><anchor xml:id="_classclang_1_1_c_x_loaded_diagnostic_1a2fbb7a1695c7ddfecbce8c6e6ccbe2bf"/>    <section>
    <title>~CXLoadedDiagnostic()</title>
<indexterm><primary>~CXLoadedDiagnostic</primary><secondary>clang::CXLoadedDiagnostic</secondary></indexterm>
<indexterm><primary>clang::CXLoadedDiagnostic</primary><secondary>~CXLoadedDiagnostic</secondary></indexterm>
<para><computeroutput>CXLoadedDiagnostic::~CXLoadedDiagnostic ( )<computeroutput>[override]</computeroutput></computeroutput></para><para>
Definition at line <link linkend="__c_x_loaded_diagnostic_8cpp_source_1l00063">63</link> of file <link linkend="__c_x_loaded_diagnostic_8cpp_source">CXLoadedDiagnostic.cpp</link>.</para>
<programlisting>00063 {}
</programlisting></section>
</section>
<section>
<title>Member Function Documentation</title>
<anchor xml:id="_classclang_1_1_c_x_diagnostic_impl_1ac1da33a15a858de42c4015a7264caa90"/>    <section>
    <title>append()</title>
<indexterm><primary>append</primary><secondary>clang::CXLoadedDiagnostic</secondary></indexterm>
<indexterm><primary>clang::CXLoadedDiagnostic</primary><secondary>append</secondary></indexterm>
<para><computeroutput>void clang::CXDiagnosticImpl::append (std::unique_ptr&lt; <link linkend="_classclang_1_1_c_x_diagnostic_impl">CXDiagnosticImpl</link> &gt; D)<computeroutput>[inline]</computeroutput>, <computeroutput>[protected]</computeroutput>, <computeroutput>[inherited]</computeroutput></computeroutput></para><para>
Definition at line <link linkend="__c_index_diagnostic_8h_source_1l00102">102</link> of file <link linkend="__c_index_diagnostic_8h_source">CIndexDiagnostic.h</link>.</para>
<programlisting>00102 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00103 &#32;&#32;&#32;&#32;<link linkend="_classclang_1_1_c_x_diagnostic_impl_1a8b46051cf84323f5590bd7ac5550e103">ChildDiags</link>.<link linkend="_classclang_1_1_c_x_diagnostic_set_impl_1a48fbd8d5f59446e568395bc0690db789">appendDiagnostic</link>(std::move(D));
00104 &#32;&#32;}
</programlisting><para>
References <link linkend="__c_index_diagnostic_8cpp_source_1l00033">clang::CXDiagnosticSetImpl::appendDiagnostic()</link>, and <link linkend="__c_index_diagnostic_8h_source_1l00100">clang::CXDiagnosticImpl::ChildDiags</link>.</para>
    </section><anchor xml:id="_classclang_1_1_c_x_loaded_diagnostic_1a22c98ce922a4222e7948084094ad2184"/>    <section>
    <title>classof()</title>
<indexterm><primary>classof</primary><secondary>clang::CXLoadedDiagnostic</secondary></indexterm>
<indexterm><primary>clang::CXLoadedDiagnostic</primary><secondary>classof</secondary></indexterm>
<para><computeroutput>static bool clang::CXLoadedDiagnostic::classof (const <link linkend="_classclang_1_1_c_x_diagnostic_impl">CXDiagnosticImpl</link> * D)<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput></computeroutput></para><para>
Definition at line <link linkend="__c_x_loaded_diagnostic_8h_source_1l00061">61</link> of file <link linkend="__c_x_loaded_diagnostic_8h_source">CXLoadedDiagnostic.h</link>.</para>
<programlisting>00061 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00062 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;D-&gt;getKind()&#32;==&#32;<link linkend="_classclang_1_1_c_x_diagnostic_impl_1a7f5f268f2ce5caa8ba3d99ad9df52cdaa7cfd2d3ec9530885fe43a0d48de7e58f">LoadedDiagnosticKind</link>;
00063 &#32;&#32;}
</programlisting><para>
References <link linkend="__c_index_diagnostic_8h_source_1l00092">clang::CXDiagnosticImpl::getKind()</link>, and <link linkend="__c_index_diagnostic_8h_source_1l00056">clang::CXDiagnosticImpl::LoadedDiagnosticKind</link>.</para>
    </section><anchor xml:id="_classclang_1_1_c_x_loaded_diagnostic_1a62abf6e0788b0c0656a3054fd7c3b82d"/>    <section>
    <title>decodeLocation()</title>
<indexterm><primary>decodeLocation</primary><secondary>clang::CXLoadedDiagnostic</secondary></indexterm>
<indexterm><primary>clang::CXLoadedDiagnostic</primary><secondary>decodeLocation</secondary></indexterm>
<para><computeroutput>void CXLoadedDiagnostic::decodeLocation (CXSourceLocation location, CXFile * file, unsigned * line, unsigned * column, unsigned * offset)<computeroutput>[static]</computeroutput></computeroutput></para><para>

<para>Decode the CXSourceLocation into file, line, column, and offset. </para>
</para>
<para>
Definition at line <link linkend="__c_x_loaded_diagnostic_8cpp_source_1l00148">148</link> of file <link linkend="__c_x_loaded_diagnostic_8cpp_source">CXLoadedDiagnostic.cpp</link>.</para>
<programlisting>00152 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00153 &#32;&#32;
00154 &#32;&#32;
00155 &#32;&#32;<emphasis role="comment">//&#32;CXSourceLocation&#32;consists&#32;of&#32;the&#32;following&#32;fields:</emphasis>
00156 &#32;&#32;<emphasis role="comment">//</emphasis>
00157 &#32;&#32;<emphasis role="comment">//&#32;&#32;&#32;void&#32;*ptr_data[2];</emphasis>
00158 &#32;&#32;<emphasis role="comment">//&#32;&#32;&#32;unsigned&#32;int_data;</emphasis>
00159 &#32;&#32;<emphasis role="comment">//</emphasis>
00160 &#32;&#32;<emphasis role="comment">//&#32;The&#32;lowest&#32;bit&#32;of&#32;ptr_data[0]&#32;is&#32;always&#32;set&#32;to&#32;1&#32;to&#32;indicate&#32;this</emphasis>
00161 &#32;&#32;<emphasis role="comment">//&#32;is&#32;a&#32;persistent&#32;diagnostic.</emphasis>
00162 &#32;&#32;<emphasis role="comment">//</emphasis>
00163 &#32;&#32;<emphasis role="comment">//&#32;For&#32;now,&#32;do&#32;the&#32;unoptimized&#32;approach&#32;and&#32;store&#32;the&#32;data&#32;in&#32;a&#32;side</emphasis>
00164 &#32;&#32;<emphasis role="comment">//&#32;data&#32;structure.&#32;&#32;We&#32;can&#32;optimize&#32;this&#32;case&#32;later.</emphasis>
00165 &#32;&#32;
00166 &#32;&#32;uintptr_t&#32;V&#32;=&#32;(uintptr_t)&#32;location.ptr_data[0];
00167 &#32;&#32;assert((V&#32;&amp;&#32;0x1)&#32;==&#32;1);
00168 &#32;&#32;V&#32;&amp;=&#32;~(uintptr_t)1;
00169 &#32;&#32;
00170 &#32;&#32;<emphasis role="keyword">const</emphasis>&#32;Location&#32;&amp;Loc&#32;=&#32;*((Location*)V);
00171 &#32;&#32;
00172 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(file)
00173 &#32;&#32;&#32;&#32;*file&#32;=&#32;Loc.file;&#32;&#32;
00174 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(line)
00175 &#32;&#32;&#32;&#32;*line&#32;=&#32;Loc.line;
00176 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(column)
00177 &#32;&#32;&#32;&#32;*column&#32;=&#32;Loc.column;
00178 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(offset)
00179 &#32;&#32;&#32;&#32;*offset&#32;=&#32;Loc.offset;
00180 }
</programlisting><para>
References <link linkend="__c_x_loaded_diagnostic_8h_source_1l00075">clang::CXLoadedDiagnostic::Location::column</link>, <link linkend="__c_x_loaded_diagnostic_8h_source_1l00073">clang::CXLoadedDiagnostic::Location::file</link>, <link linkend="__c_x_loaded_diagnostic_8h_source_1l00074">clang::CXLoadedDiagnostic::Location::line</link>, and <link linkend="__c_x_loaded_diagnostic_8h_source_1l00076">clang::CXLoadedDiagnostic::Location::offset</link>.</para>
    </section><anchor xml:id="_classclang_1_1_c_x_loaded_diagnostic_1a3c54fb1ddeadaea6ea08696865267018"/>    <section>
    <title>getCategory()</title>
<indexterm><primary>getCategory</primary><secondary>clang::CXLoadedDiagnostic</secondary></indexterm>
<indexterm><primary>clang::CXLoadedDiagnostic</primary><secondary>getCategory</secondary></indexterm>
<para><computeroutput>unsigned CXLoadedDiagnostic::getCategory ( ) const<computeroutput>[override]</computeroutput>, <computeroutput>[virtual]</computeroutput></computeroutput></para><para>

<para>Return the category of the diagnostic. </para>
</para>
<para>
Implements <link linkend="_classclang_1_1_c_x_diagnostic_impl_1a1fd1ee880f76ddd047a763fdad1e9dc3">clang::CXDiagnosticImpl</link>.</para>
<para>
Definition at line <link linkend="__c_x_loaded_diagnostic_8cpp_source_1l00119">119</link> of file <link linkend="__c_x_loaded_diagnostic_8cpp_source">CXLoadedDiagnostic.cpp</link>.</para>
<programlisting>00119 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00120 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classclang_1_1_c_x_loaded_diagnostic_1aee1cb04e4cbc5bb4461068d24b4e4631">category</link>;
00121 }
</programlisting><para>
References <link linkend="__c_x_loaded_diagnostic_8h_source_1l00089">category</link>.</para>
    </section><anchor xml:id="_classclang_1_1_c_x_loaded_diagnostic_1a4ee4446a2717375a88811bda8eb6dca5"/>    <section>
    <title>getCategoryText()</title>
<indexterm><primary>getCategoryText</primary><secondary>clang::CXLoadedDiagnostic</secondary></indexterm>
<indexterm><primary>clang::CXLoadedDiagnostic</primary><secondary>getCategoryText</secondary></indexterm>
<para><computeroutput>CXString CXLoadedDiagnostic::getCategoryText ( ) const<computeroutput>[override]</computeroutput>, <computeroutput>[virtual]</computeroutput></computeroutput></para><para>

<para>Return the category string of the diagnostic. </para>
</para>
<para>
Implements <link linkend="_classclang_1_1_c_x_diagnostic_impl_1af5fc17b07ee253ee5ebaaffd8481c11c">clang::CXDiagnosticImpl</link>.</para>
<para>
Definition at line <link linkend="__c_x_loaded_diagnostic_8cpp_source_1l00123">123</link> of file <link linkend="__c_x_loaded_diagnostic_8cpp_source">CXLoadedDiagnostic.cpp</link>.</para>
<programlisting>00123 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00124 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1a19a4962be87f75a8c1fa5a0b75f76298">cxstring::createDup</link>(<link linkend="_classclang_1_1_c_x_loaded_diagnostic_1a5039e5fa930900130479e374f35f7148">CategoryText</link>);
00125 }
</programlisting><para>
References <link linkend="__c_x_loaded_diagnostic_8h_source_1l00087">CategoryText</link>, and <link linkend="__c_x_string_8cpp_source_1l00067">clang::cxstring::createDup()</link>.</para>
    </section><anchor xml:id="_classclang_1_1_c_x_diagnostic_impl_1af56711ab018bcca7e31c5c0589743425"/>    <section>
    <title>getChildDiagnostics()</title>
<indexterm><primary>getChildDiagnostics</primary><secondary>clang::CXLoadedDiagnostic</secondary></indexterm>
<indexterm><primary>clang::CXLoadedDiagnostic</primary><secondary>getChildDiagnostics</secondary></indexterm>
<para><computeroutput><link linkend="_classclang_1_1_c_x_diagnostic_set_impl">CXDiagnosticSetImpl</link>&amp; clang::CXDiagnosticImpl::getChildDiagnostics ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[inherited]</computeroutput></computeroutput></para><para>
Definition at line <link linkend="__c_index_diagnostic_8h_source_1l00094">94</link> of file <link linkend="__c_index_diagnostic_8h_source">CIndexDiagnostic.h</link>.</para>
<programlisting>00094 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00095 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classclang_1_1_c_x_diagnostic_impl_1a8b46051cf84323f5590bd7ac5550e103">ChildDiags</link>;
00096 &#32;&#32;}
</programlisting><para>
References <link linkend="__c_index_diagnostic_8h_source_1l00100">clang::CXDiagnosticImpl::ChildDiags</link>.</para>
    </section><anchor xml:id="_classclang_1_1_c_x_loaded_diagnostic_1a5bfd490e9b9b3c8244c0168249031fad"/>    <section>
    <title>getDiagnosticOption()</title>
<indexterm><primary>getDiagnosticOption</primary><secondary>clang::CXLoadedDiagnostic</secondary></indexterm>
<indexterm><primary>clang::CXLoadedDiagnostic</primary><secondary>getDiagnosticOption</secondary></indexterm>
<para><computeroutput>CXString CXLoadedDiagnostic::getDiagnosticOption (CXString * Disable) const<computeroutput>[override]</computeroutput>, <computeroutput>[virtual]</computeroutput></computeroutput></para><para>

<para>Return the text for the diagnostic option. </para>
</para>
<para>
Implements <link linkend="_classclang_1_1_c_x_diagnostic_impl_1a104a0f5935756ca714dee6f0948573f9">clang::CXDiagnosticImpl</link>.</para>
<para>
Definition at line <link linkend="__c_x_loaded_diagnostic_8cpp_source_1l00109">109</link> of file <link linkend="__c_x_loaded_diagnostic_8cpp_source">CXLoadedDiagnostic.cpp</link>.</para>
<programlisting>00109 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00110 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_classclang_1_1_c_x_loaded_diagnostic_1adbdc8150bfbb677803cdb32c7a8750b6">DiagOption</link>.empty())
00111 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1a8a49aa6ea196abdde85886689f2630f9">cxstring::createEmpty</link>();
00112 
00113 &#32;&#32;<emphasis role="comment">//&#32;FIXME:&#32;possibly&#32;refactor&#32;with&#32;logic&#32;in&#32;CXStoredDiagnostic.</emphasis>
00114 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(Disable)
00115 &#32;&#32;&#32;&#32;*Disable&#32;=&#32;<link linkend="_namespaceclang_1_1cxstring_1a19a4962be87f75a8c1fa5a0b75f76298">cxstring::createDup</link>((Twine(<emphasis role="stringliteral">&quot;-Wno-&quot;</emphasis>)&#32;+&#32;<link linkend="_classclang_1_1_c_x_loaded_diagnostic_1adbdc8150bfbb677803cdb32c7a8750b6">DiagOption</link>).str());
00116 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1a19a4962be87f75a8c1fa5a0b75f76298">cxstring::createDup</link>((Twine(<emphasis role="stringliteral">&quot;-W&quot;</emphasis>)&#32;+&#32;<link linkend="_classclang_1_1_c_x_loaded_diagnostic_1adbdc8150bfbb677803cdb32c7a8750b6">DiagOption</link>).str());
00117 }
</programlisting><para>
References <link linkend="__c_x_string_8cpp_source_1l00067">clang::cxstring::createDup()</link>, <link linkend="__c_x_string_8cpp_source_1l00043">clang::cxstring::createEmpty()</link>, and <link linkend="__c_x_loaded_diagnostic_8h_source_1l00086">DiagOption</link>.</para>
    </section><anchor xml:id="_classclang_1_1_c_x_loaded_diagnostic_1ada416d8f7f3bb37084c7f70f693be795"/>    <section>
    <title>getFixIt()</title>
<indexterm><primary>getFixIt</primary><secondary>clang::CXLoadedDiagnostic</secondary></indexterm>
<indexterm><primary>clang::CXLoadedDiagnostic</primary><secondary>getFixIt</secondary></indexterm>
<para><computeroutput>CXString CXLoadedDiagnostic::getFixIt (unsigned FixIt, CXSourceRange * ReplacementRange) const<computeroutput>[override]</computeroutput>, <computeroutput>[virtual]</computeroutput></computeroutput></para><para>

<para>Return the FixIt information (source range and inserted text). </para>
</para>
<para>
Implements <link linkend="_classclang_1_1_c_x_diagnostic_impl_1aa1e009fc05ec6c332234dbf3ec1b03a6">clang::CXDiagnosticImpl</link>.</para>
<para>
Definition at line <link linkend="__c_x_loaded_diagnostic_8cpp_source_1l00140">140</link> of file <link linkend="__c_x_loaded_diagnostic_8cpp_source">CXLoadedDiagnostic.cpp</link>.</para>
<programlisting>00141 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00142 &#32;&#32;assert(FixIt&#32;&lt;&#32;<link linkend="_classclang_1_1_c_x_loaded_diagnostic_1a11446ee269ed4ceff36c4aa7ee513f44">FixIts</link>.size());
00143 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(ReplacementRange)
00144 &#32;&#32;&#32;&#32;*ReplacementRange&#32;=&#32;<link linkend="_classclang_1_1_c_x_loaded_diagnostic_1a11446ee269ed4ceff36c4aa7ee513f44">FixIts</link>[FixIt].first;
00145 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<link linkend="_classclang_1_1_c_x_loaded_diagnostic_1a11446ee269ed4ceff36c4aa7ee513f44">FixIts</link>[FixIt].second);
00146 }
</programlisting><para>
References <link linkend="__c_x_string_8cpp_source_1l00057">clang::cxstring::createRef()</link>, and <link linkend="__c_x_loaded_diagnostic_8h_source_1l00084">FixIts</link>.</para>
    </section><anchor xml:id="_classclang_1_1_c_x_diagnostic_impl_1a291e683397c75960d2a722387bc4dca7"/>    <section>
    <title>getKind()</title>
<indexterm><primary>getKind</primary><secondary>clang::CXLoadedDiagnostic</secondary></indexterm>
<indexterm><primary>clang::CXLoadedDiagnostic</primary><secondary>getKind</secondary></indexterm>
<para><computeroutput><link linkend="_classclang_1_1_c_x_diagnostic_impl_1a7f5f268f2ce5caa8ba3d99ad9df52cda">Kind</link> clang::CXDiagnosticImpl::getKind ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[inherited]</computeroutput></computeroutput></para><para>
Definition at line <link linkend="__c_index_diagnostic_8h_source_1l00092">92</link> of file <link linkend="__c_index_diagnostic_8h_source">CIndexDiagnostic.h</link>.</para>
<programlisting>00092 {&#32;<emphasis role="keywordflow">return</emphasis>&#32;K;&#32;}
</programlisting><para>
Referenced by <link linkend="__c_index_diagnostic_8h_source_1l00153">clang::CXStoredDiagnostic::classof()</link>, and <link linkend="__c_x_loaded_diagnostic_8h_source_1l00061">classof()</link>.</para>
    </section><anchor xml:id="_classclang_1_1_c_x_loaded_diagnostic_1af8351a8c6ff232e82ac58432d440194b"/>    <section>
    <title>getLocation()</title>
<indexterm><primary>getLocation</primary><secondary>clang::CXLoadedDiagnostic</secondary></indexterm>
<indexterm><primary>clang::CXLoadedDiagnostic</primary><secondary>getLocation</secondary></indexterm>
<para><computeroutput>CXSourceLocation CXLoadedDiagnostic::getLocation ( ) const<computeroutput>[override]</computeroutput>, <computeroutput>[virtual]</computeroutput></computeroutput></para><para>

<para>Return the location of the diagnostic. </para>
</para>
<para>
Implements <link linkend="_classclang_1_1_c_x_diagnostic_impl_1ae82ba92d144e38fcaaec5d472da066e9">clang::CXDiagnosticImpl</link>.</para>
<para>
Definition at line <link linkend="__c_x_loaded_diagnostic_8cpp_source_1l00099">99</link> of file <link linkend="__c_x_loaded_diagnostic_8cpp_source">CXLoadedDiagnostic.cpp</link>.</para>
<programlisting>00099 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00100 &#32;&#32;<emphasis role="comment">//&#32;The&#32;lowest&#32;bit&#32;of&#32;ptr_data[0]&#32;is&#32;always&#32;set&#32;to&#32;1&#32;to&#32;indicate&#32;this</emphasis>
00101 &#32;&#32;<emphasis role="comment">//&#32;is&#32;a&#32;persistent&#32;diagnostic.</emphasis>
00102 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;makeLocation(&amp;<link linkend="_classclang_1_1_c_x_loaded_diagnostic_1aa5a1348035eb432b38aeb73a1ce69ed8">DiagLoc</link>);
00103 }
</programlisting>    </section><anchor xml:id="_classclang_1_1_c_x_loaded_diagnostic_1a24271e8676870afd1c75d6ee1133396e"/>    <section>
    <title>getNumFixIts()</title>
<indexterm><primary>getNumFixIts</primary><secondary>clang::CXLoadedDiagnostic</secondary></indexterm>
<indexterm><primary>clang::CXLoadedDiagnostic</primary><secondary>getNumFixIts</secondary></indexterm>
<para><computeroutput>unsigned CXLoadedDiagnostic::getNumFixIts ( ) const<computeroutput>[override]</computeroutput>, <computeroutput>[virtual]</computeroutput></computeroutput></para><para>

<para>Return the number of FixIts. </para>
</para>
<para>
Implements <link linkend="_classclang_1_1_c_x_diagnostic_impl_1ab80ce934006ca4fb0f9d531586b9162e">clang::CXDiagnosticImpl</link>.</para>
<para>
Definition at line <link linkend="__c_x_loaded_diagnostic_8cpp_source_1l00136">136</link> of file <link linkend="__c_x_loaded_diagnostic_8cpp_source">CXLoadedDiagnostic.cpp</link>.</para>
<programlisting>00136 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00137 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classclang_1_1_c_x_loaded_diagnostic_1a11446ee269ed4ceff36c4aa7ee513f44">FixIts</link>.size();
00138 }
</programlisting><para>
References <link linkend="__c_x_loaded_diagnostic_8h_source_1l00084">FixIts</link>.</para>
    </section><anchor xml:id="_classclang_1_1_c_x_loaded_diagnostic_1abc268da8fbd76ad5b94c733f76baa463"/>    <section>
    <title>getNumRanges()</title>
<indexterm><primary>getNumRanges</primary><secondary>clang::CXLoadedDiagnostic</secondary></indexterm>
<indexterm><primary>clang::CXLoadedDiagnostic</primary><secondary>getNumRanges</secondary></indexterm>
<para><computeroutput>unsigned CXLoadedDiagnostic::getNumRanges ( ) const<computeroutput>[override]</computeroutput>, <computeroutput>[virtual]</computeroutput></computeroutput></para><para>

<para>Return the number of source ranges for the diagnostic. </para>
</para>
<para>
Implements <link linkend="_classclang_1_1_c_x_diagnostic_impl_1add19591d7940fda585a6a69f87b927d8">clang::CXDiagnosticImpl</link>.</para>
<para>
Definition at line <link linkend="__c_x_loaded_diagnostic_8cpp_source_1l00127">127</link> of file <link linkend="__c_x_loaded_diagnostic_8cpp_source">CXLoadedDiagnostic.cpp</link>.</para>
<programlisting>00127 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00128 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classclang_1_1_c_x_loaded_diagnostic_1a2296d7468a318e380b94c7cffc67c736">Ranges</link>.size();
00129 }
</programlisting><para>
References <link linkend="__c_x_loaded_diagnostic_8h_source_1l00083">Ranges</link>.</para>
    </section><anchor xml:id="_classclang_1_1_c_x_loaded_diagnostic_1aed464b92b9a60863af495242983f6763"/>    <section>
    <title>getRange()</title>
<indexterm><primary>getRange</primary><secondary>clang::CXLoadedDiagnostic</secondary></indexterm>
<indexterm><primary>clang::CXLoadedDiagnostic</primary><secondary>getRange</secondary></indexterm>
<para><computeroutput>CXSourceRange CXLoadedDiagnostic::getRange (unsigned Range) const<computeroutput>[override]</computeroutput>, <computeroutput>[virtual]</computeroutput></computeroutput></para><para>

<para>Return the source ranges for the diagnostic. </para>
</para>
<para>
Implements <link linkend="_classclang_1_1_c_x_diagnostic_impl_1a49fc85b074cacc4e1c44dd7c6b540e53">clang::CXDiagnosticImpl</link>.</para>
<para>
Definition at line <link linkend="__c_x_loaded_diagnostic_8cpp_source_1l00131">131</link> of file <link linkend="__c_x_loaded_diagnostic_8cpp_source">CXLoadedDiagnostic.cpp</link>.</para>
<programlisting>00131 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00132 &#32;&#32;assert(Range&#32;&lt;&#32;<link linkend="_classclang_1_1_c_x_loaded_diagnostic_1a2296d7468a318e380b94c7cffc67c736">Ranges</link>.size());
00133 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classclang_1_1_c_x_loaded_diagnostic_1a2296d7468a318e380b94c7cffc67c736">Ranges</link>[Range];
00134 }
</programlisting><para>
References <link linkend="__c_x_loaded_diagnostic_8h_source_1l00083">Ranges</link>.</para>
    </section><anchor xml:id="_classclang_1_1_c_x_loaded_diagnostic_1a6f93075048fc3575fdf1d028ee0d45dd"/>    <section>
    <title>getSeverity()</title>
<indexterm><primary>getSeverity</primary><secondary>clang::CXLoadedDiagnostic</secondary></indexterm>
<indexterm><primary>clang::CXLoadedDiagnostic</primary><secondary>getSeverity</secondary></indexterm>
<para><computeroutput>CXDiagnosticSeverity CXLoadedDiagnostic::getSeverity ( ) const<computeroutput>[override]</computeroutput>, <computeroutput>[virtual]</computeroutput></computeroutput></para><para>

<para>Return the severity of the diagnostic. </para>
</para>
<para>
Implements <link linkend="_classclang_1_1_c_x_diagnostic_impl_1a87553d5e20319e0a3e480cb214cfb6d7">clang::CXDiagnosticImpl</link>.</para>
<para>
Definition at line <link linkend="__c_x_loaded_diagnostic_8cpp_source_1l00069">69</link> of file <link linkend="__c_x_loaded_diagnostic_8cpp_source">CXLoadedDiagnostic.cpp</link>.</para>
<programlisting>00069 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00070 &#32;&#32;<emphasis role="comment">//&#32;FIXME:&#32;Fail&#32;more&#32;softly&#32;if&#32;the&#32;diagnostic&#32;level&#32;is&#32;unknown?</emphasis>
00071 &#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;severityAsLevel&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis>serialized_diags::Level<emphasis role="keyword">&gt;</emphasis>(<link linkend="_classclang_1_1_c_x_loaded_diagnostic_1a57570d2ac4e62ce4c0840c56db450120">severity</link>);
00072 &#32;&#32;assert(<link linkend="_classclang_1_1_c_x_loaded_diagnostic_1a57570d2ac4e62ce4c0840c56db450120">severity</link>&#32;==&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">unsigned</emphasis><emphasis role="keyword">&gt;</emphasis>(severityAsLevel)&#32;&amp;&amp;
00073 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;unknown&#32;serialized&#32;diagnostic&#32;level&quot;</emphasis>);
00074 
00075 &#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(severityAsLevel)&#32;{
00076 <emphasis role="preprocessor">#define&#32;CASE(X)&#32;case&#32;serialized_diags::X:&#32;return&#32;CXDiagnostic_##X;</emphasis>
00077 &#32;&#32;<link linkend="__c_x_loaded_diagnostic_8cpp_1a72fdc082560f7761ef5dd4e0b6efd0ad">CASE</link>(Ignored)
00078 &#32;&#32;<link linkend="__c_x_loaded_diagnostic_8cpp_1a72fdc082560f7761ef5dd4e0b6efd0ad">CASE</link>(Note)
00079 &#32;&#32;<link linkend="__c_x_loaded_diagnostic_8cpp_1a72fdc082560f7761ef5dd4e0b6efd0ad">CASE</link>(Warning)
00080 &#32;&#32;<link linkend="__c_x_loaded_diagnostic_8cpp_1a72fdc082560f7761ef5dd4e0b6efd0ad">CASE</link>(Error)
00081 &#32;&#32;<link linkend="__c_x_loaded_diagnostic_8cpp_1a72fdc082560f7761ef5dd4e0b6efd0ad">CASE</link>(Fatal)
00082 <emphasis role="preprocessor">#undef&#32;CASE</emphasis>
00083 &#32;&#32;<emphasis role="comment">//&#32;The&#32;&apos;Remark&apos;&#32;level&#32;isn&apos;t&#32;represented&#32;in&#32;the&#32;stable&#32;API.</emphasis>
00084 &#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;serialized_diags::Remark:&#32;<emphasis role="keywordflow">return</emphasis>&#32;CXDiagnostic_Warning;
00085 &#32;&#32;}
00086 &#32;&#32;
00087 &#32;&#32;llvm_unreachable(<emphasis role="stringliteral">&quot;Invalid&#32;diagnostic&#32;level&quot;</emphasis>);
00088 }
</programlisting><para>
References <link linkend="__c_x_loaded_diagnostic_8cpp_1a72fdc082560f7761ef5dd4e0b6efd0ad">CASE</link>, and <link linkend="__c_x_loaded_diagnostic_8h_source_1l00088">severity</link>.</para>
    </section><anchor xml:id="_classclang_1_1_c_x_loaded_diagnostic_1a4f6c0b425afa599a837958dea19d5edd"/>    <section>
    <title>getSpelling()</title>
<indexterm><primary>getSpelling</primary><secondary>clang::CXLoadedDiagnostic</secondary></indexterm>
<indexterm><primary>clang::CXLoadedDiagnostic</primary><secondary>getSpelling</secondary></indexterm>
<para><computeroutput>CXString CXLoadedDiagnostic::getSpelling ( ) const<computeroutput>[override]</computeroutput>, <computeroutput>[virtual]</computeroutput></computeroutput></para><para>

<para>Return the spelling of the diagnostic. </para>
</para>
<para>
Implements <link linkend="_classclang_1_1_c_x_diagnostic_impl_1a477f39524bfa199ed9180ed85ac4d3d8">clang::CXDiagnosticImpl</link>.</para>
<para>
Definition at line <link linkend="__c_x_loaded_diagnostic_8cpp_source_1l00105">105</link> of file <link linkend="__c_x_loaded_diagnostic_8cpp_source">CXLoadedDiagnostic.cpp</link>.</para>
<programlisting>00105 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00106 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(<link linkend="_classclang_1_1_c_x_loaded_diagnostic_1a318a6fd22942d00ea8ebc9203a432718">Spelling</link>);
00107 }
</programlisting><para>
References <link linkend="__c_x_string_8cpp_source_1l00057">clang::cxstring::createRef()</link>, and <link linkend="__c_x_loaded_diagnostic_8h_source_1l00085">Spelling</link>.</para>
</section>
</section>
<section>
<title>Member Data Documentation</title>
<anchor xml:id="_classclang_1_1_c_x_loaded_diagnostic_1aee1cb04e4cbc5bb4461068d24b4e4631"/>    <section>
    <title>category</title>
<indexterm><primary>category</primary><secondary>clang::CXLoadedDiagnostic</secondary></indexterm>
<indexterm><primary>clang::CXLoadedDiagnostic</primary><secondary>category</secondary></indexterm>
<para><computeroutput>unsigned clang::CXLoadedDiagnostic::category</computeroutput></para><para>
Definition at line <link linkend="__c_x_loaded_diagnostic_8h_source_1l00089">89</link> of file <link linkend="__c_x_loaded_diagnostic_8h_source">CXLoadedDiagnostic.h</link>.</para>
<para>
Referenced by <link linkend="__c_x_loaded_diagnostic_8cpp_source_1l00119">getCategory()</link>.</para>
    </section><anchor xml:id="_classclang_1_1_c_x_loaded_diagnostic_1a5039e5fa930900130479e374f35f7148"/>    <section>
    <title>CategoryText</title>
<indexterm><primary>CategoryText</primary><secondary>clang::CXLoadedDiagnostic</secondary></indexterm>
<indexterm><primary>clang::CXLoadedDiagnostic</primary><secondary>CategoryText</secondary></indexterm>
<para><computeroutput>llvm::StringRef clang::CXLoadedDiagnostic::CategoryText</computeroutput></para><para>
Definition at line <link linkend="__c_x_loaded_diagnostic_8h_source_1l00087">87</link> of file <link linkend="__c_x_loaded_diagnostic_8h_source">CXLoadedDiagnostic.h</link>.</para>
<para>
Referenced by <link linkend="__c_x_loaded_diagnostic_8cpp_source_1l00123">getCategoryText()</link>.</para>
    </section><anchor xml:id="_classclang_1_1_c_x_diagnostic_impl_1a8b46051cf84323f5590bd7ac5550e103"/>    <section>
    <title>ChildDiags</title>
<indexterm><primary>ChildDiags</primary><secondary>clang::CXLoadedDiagnostic</secondary></indexterm>
<indexterm><primary>clang::CXLoadedDiagnostic</primary><secondary>ChildDiags</secondary></indexterm>
<para><computeroutput><link linkend="_classclang_1_1_c_x_diagnostic_set_impl">CXDiagnosticSetImpl</link> clang::CXDiagnosticImpl::ChildDiags<computeroutput>[protected]</computeroutput>, <computeroutput>[inherited]</computeroutput></computeroutput></para><para>
Definition at line <link linkend="__c_index_diagnostic_8h_source_1l00100">100</link> of file <link linkend="__c_index_diagnostic_8h_source">CIndexDiagnostic.h</link>.</para>
<para>
Referenced by <link linkend="__c_index_diagnostic_8h_source_1l00102">clang::CXDiagnosticImpl::append()</link>, and <link linkend="__c_index_diagnostic_8h_source_1l00094">clang::CXDiagnosticImpl::getChildDiagnostics()</link>.</para>
    </section><anchor xml:id="_classclang_1_1_c_x_loaded_diagnostic_1aa5a1348035eb432b38aeb73a1ce69ed8"/>    <section>
    <title>DiagLoc</title>
<indexterm><primary>DiagLoc</primary><secondary>clang::CXLoadedDiagnostic</secondary></indexterm>
<indexterm><primary>clang::CXLoadedDiagnostic</primary><secondary>DiagLoc</secondary></indexterm>
<para><computeroutput><link linkend="_structclang_1_1_c_x_loaded_diagnostic_1_1_location">Location</link> clang::CXLoadedDiagnostic::DiagLoc</computeroutput></para><para>
Definition at line <link linkend="__c_x_loaded_diagnostic_8h_source_1l00081">81</link> of file <link linkend="__c_x_loaded_diagnostic_8h_source">CXLoadedDiagnostic.h</link>.</para>
    </section><anchor xml:id="_classclang_1_1_c_x_loaded_diagnostic_1adbdc8150bfbb677803cdb32c7a8750b6"/>    <section>
    <title>DiagOption</title>
<indexterm><primary>DiagOption</primary><secondary>clang::CXLoadedDiagnostic</secondary></indexterm>
<indexterm><primary>clang::CXLoadedDiagnostic</primary><secondary>DiagOption</secondary></indexterm>
<para><computeroutput>llvm::StringRef clang::CXLoadedDiagnostic::DiagOption</computeroutput></para><para>
Definition at line <link linkend="__c_x_loaded_diagnostic_8h_source_1l00086">86</link> of file <link linkend="__c_x_loaded_diagnostic_8h_source">CXLoadedDiagnostic.h</link>.</para>
<para>
Referenced by <link linkend="__c_x_loaded_diagnostic_8cpp_source_1l00109">getDiagnosticOption()</link>.</para>
    </section><anchor xml:id="_classclang_1_1_c_x_loaded_diagnostic_1a11446ee269ed4ceff36c4aa7ee513f44"/>    <section>
    <title>FixIts</title>
<indexterm><primary>FixIts</primary><secondary>clang::CXLoadedDiagnostic</secondary></indexterm>
<indexterm><primary>clang::CXLoadedDiagnostic</primary><secondary>FixIts</secondary></indexterm>
<para><computeroutput>std::vector&lt;std::pair&lt;CXSourceRange, const char *&gt; &gt; clang::CXLoadedDiagnostic::FixIts</computeroutput></para><para>
Definition at line <link linkend="__c_x_loaded_diagnostic_8h_source_1l00084">84</link> of file <link linkend="__c_x_loaded_diagnostic_8h_source">CXLoadedDiagnostic.h</link>.</para>
<para>
Referenced by <link linkend="__c_x_loaded_diagnostic_8cpp_source_1l00140">getFixIt()</link>, and <link linkend="__c_x_loaded_diagnostic_8cpp_source_1l00136">getNumFixIts()</link>.</para>
    </section><anchor xml:id="_classclang_1_1_c_x_loaded_diagnostic_1a2296d7468a318e380b94c7cffc67c736"/>    <section>
    <title>Ranges</title>
<indexterm><primary>Ranges</primary><secondary>clang::CXLoadedDiagnostic</secondary></indexterm>
<indexterm><primary>clang::CXLoadedDiagnostic</primary><secondary>Ranges</secondary></indexterm>
<para><computeroutput>std::vector&lt;CXSourceRange&gt; clang::CXLoadedDiagnostic::Ranges</computeroutput></para><para>
Definition at line <link linkend="__c_x_loaded_diagnostic_8h_source_1l00083">83</link> of file <link linkend="__c_x_loaded_diagnostic_8h_source">CXLoadedDiagnostic.h</link>.</para>
<para>
Referenced by <link linkend="__c_x_loaded_diagnostic_8cpp_source_1l00127">getNumRanges()</link>, and <link linkend="__c_x_loaded_diagnostic_8cpp_source_1l00131">getRange()</link>.</para>
    </section><anchor xml:id="_classclang_1_1_c_x_loaded_diagnostic_1a57570d2ac4e62ce4c0840c56db450120"/>    <section>
    <title>severity</title>
<indexterm><primary>severity</primary><secondary>clang::CXLoadedDiagnostic</secondary></indexterm>
<indexterm><primary>clang::CXLoadedDiagnostic</primary><secondary>severity</secondary></indexterm>
<para><computeroutput>unsigned clang::CXLoadedDiagnostic::severity</computeroutput></para><para>
Definition at line <link linkend="__c_x_loaded_diagnostic_8h_source_1l00088">88</link> of file <link linkend="__c_x_loaded_diagnostic_8h_source">CXLoadedDiagnostic.h</link>.</para>
<para>
Referenced by <link linkend="__c_x_loaded_diagnostic_8cpp_source_1l00069">getSeverity()</link>.</para>
    </section><anchor xml:id="_classclang_1_1_c_x_loaded_diagnostic_1a318a6fd22942d00ea8ebc9203a432718"/>    <section>
    <title>Spelling</title>
<indexterm><primary>Spelling</primary><secondary>clang::CXLoadedDiagnostic</secondary></indexterm>
<indexterm><primary>clang::CXLoadedDiagnostic</primary><secondary>Spelling</secondary></indexterm>
<para><computeroutput>const char* clang::CXLoadedDiagnostic::Spelling</computeroutput></para><para>
Definition at line <link linkend="__c_x_loaded_diagnostic_8h_source_1l00085">85</link> of file <link linkend="__c_x_loaded_diagnostic_8h_source">CXLoadedDiagnostic.h</link>.</para>
<para>
Referenced by <link linkend="__c_x_loaded_diagnostic_8cpp_source_1l00105">getSpelling()</link>.</para>
</section>
<para>
The documentation for this class was generated from the following files:</para>
/Users/maximilian/clang-llvm/clang/tools/libclang/<link linkend="__c_x_loaded_diagnostic_8h">CXLoadedDiagnostic.h</link>/Users/maximilian/clang-llvm/clang/tools/libclang/<link linkend="__c_x_loaded_diagnostic_8cpp">CXLoadedDiagnostic.cpp</link></section>
</section>
