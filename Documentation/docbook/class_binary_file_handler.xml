<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_class_binary_file_handler" xml:lang="en-US">
<title>BinaryFileHandler Class Reference</title>
<indexterm><primary>BinaryFileHandler</primary></indexterm>
<para>Inheritance diagram for BinaryFileHandler:    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_binary_file_handler.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
<simplesect>
    <title>Public Member Functions    </title>
        <itemizedlist>
            <listitem><para><link linkend="_class_binary_file_handler_1a8995d1aab6edeb1d07205257d899ba5f">BinaryFileHandler</link> ()</para>
</listitem>
            <listitem><para><link linkend="_class_binary_file_handler_1a965643ec1f3e41b71f02ab3bc30ddeb4">~BinaryFileHandler</link> () final</para>
</listitem>
            <listitem><para>Error <link linkend="_class_binary_file_handler_1a4129cf2eeac5c792f546db1e43d5433c">ReadHeader</link> (MemoryBuffer &amp;Input) final</para>
</listitem>
            <listitem><para>Expected&lt; Optional&lt; StringRef &gt; &gt; <link linkend="_class_binary_file_handler_1a9ca3dc3dc36f16258fdd01844531f129">ReadBundleStart</link> (MemoryBuffer &amp;Input) final</para>
</listitem>
            <listitem><para>Error <link linkend="_class_binary_file_handler_1af938c83df04fa66fe04c7e0563ade0f0">ReadBundleEnd</link> (MemoryBuffer &amp;Input) final</para>

<para>Read the marker that closes the current bundle. </para>
</listitem>
            <listitem><para>Error <link linkend="_class_binary_file_handler_1a03f6f2509a8d6d78e3ab800995f7f779">ReadBundle</link> (raw_ostream &amp;OS, MemoryBuffer &amp;Input) final</para>

<para>Read the current bundle and write the result into the stream <emphasis>OS</emphasis>. </para>
</listitem>
            <listitem><para>Error <link linkend="_class_binary_file_handler_1ab80cac5e41eaab070a155716de55c84d">WriteHeader</link> (raw_fd_ostream &amp;OS, ArrayRef&lt; std::unique_ptr&lt; MemoryBuffer &gt;&gt; Inputs) final</para>
</listitem>
            <listitem><para>Error <link linkend="_class_binary_file_handler_1aae0993fd9bf54ca80c3302f5e0810a8e">WriteBundleStart</link> (raw_fd_ostream &amp;OS, StringRef TargetTriple) final</para>
</listitem>
            <listitem><para>Error <link linkend="_class_binary_file_handler_1ae8babe5e1a76494820097329a35f72ae">WriteBundleEnd</link> (raw_fd_ostream &amp;OS, StringRef TargetTriple) final</para>
</listitem>
            <listitem><para>Error <link linkend="_class_binary_file_handler_1ae293c57008f6d941531c76839d0cd371">WriteBundle</link> (raw_fd_ostream &amp;OS, MemoryBuffer &amp;Input) final</para>

<para>Write the bundle from <emphasis>Input</emphasis> into <emphasis>OS</emphasis>. </para>
</listitem>
            <listitem><para>virtual Error <link linkend="_class_file_handler_1a70cbb9c0347d248c018e52993a13255b">listBundleIDs</link> (MemoryBuffer &amp;Input)</para>

<para>List bundle IDs in <emphasis>Input</emphasis>. </para>
</listitem>
            <listitem><para>Error <link linkend="_class_file_handler_1a70ed8dd129df99dcd5d5e42fffd7b125">forEachBundle</link> (MemoryBuffer &amp;Input, std::function&lt; Error(const <link linkend="_struct_file_handler_1_1_bundle_info">BundleInfo</link> &amp;)&gt; Func)</para>

<para>For each bundle in <emphasis>Input</emphasis>, do <emphasis>Func</emphasis>. </para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Protected Member Functions    </title>
        <itemizedlist>
            <listitem><para>virtual Error <link linkend="_class_file_handler_1af0a452c5014ddb59b9558614d21daaed">listBundleIDsCallback</link> (MemoryBuffer &amp;Input, const <link linkend="_struct_file_handler_1_1_bundle_info">BundleInfo</link> &amp;Info)</para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Detailed Description</title>
<para>
Definition at line <link linkend="__clang_offload_bundler_8cpp_source_1l00307">307</link> of file <link linkend="__clang_offload_bundler_8cpp_source">ClangOffloadBundler.cpp</link>.</para>
</section>
<section>
<title>Constructor &amp; Destructor Documentation</title>
<anchor xml:id="_class_binary_file_handler_1a8995d1aab6edeb1d07205257d899ba5f"/>    <section>
    <title>BinaryFileHandler()</title>
<indexterm><primary>BinaryFileHandler</primary><secondary>BinaryFileHandler</secondary></indexterm>
<indexterm><primary>BinaryFileHandler</primary><secondary>BinaryFileHandler</secondary></indexterm>
<para><computeroutput>BinaryFileHandler::BinaryFileHandler ( )<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line <link linkend="__clang_offload_bundler_8cpp_source_1l00331">331</link> of file <link linkend="__clang_offload_bundler_8cpp_source">ClangOffloadBundler.cpp</link>.</para>
<programlisting>00331 :&#32;<link linkend="_class_file_handler_1a0d1ac8e9911e19255e8b2d99c2d93f43">FileHandler</link>()&#32;{}
</programlisting>    </section><anchor xml:id="_class_binary_file_handler_1a965643ec1f3e41b71f02ab3bc30ddeb4"/>    <section>
    <title>~BinaryFileHandler()</title>
<indexterm><primary>~BinaryFileHandler</primary><secondary>BinaryFileHandler</secondary></indexterm>
<indexterm><primary>BinaryFileHandler</primary><secondary>~BinaryFileHandler</secondary></indexterm>
<para><computeroutput>BinaryFileHandler::~BinaryFileHandler ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[final]</computeroutput></computeroutput></para><para>
Definition at line <link linkend="__clang_offload_bundler_8cpp_source_1l00333">333</link> of file <link linkend="__clang_offload_bundler_8cpp_source">ClangOffloadBundler.cpp</link>.</para>
<programlisting>00333 {}
</programlisting></section>
</section>
<section>
<title>Member Function Documentation</title>
<anchor xml:id="_class_file_handler_1a70ed8dd129df99dcd5d5e42fffd7b125"/>    <section>
    <title>forEachBundle()</title>
<indexterm><primary>forEachBundle</primary><secondary>BinaryFileHandler</secondary></indexterm>
<indexterm><primary>BinaryFileHandler</primary><secondary>forEachBundle</secondary></indexterm>
<para><computeroutput>Error FileHandler::forEachBundle (MemoryBuffer &amp; Input, std::function&lt; Error(const <link linkend="_struct_file_handler_1_1_bundle_info">BundleInfo</link> &amp;)&gt; Func)<computeroutput>[inline]</computeroutput>, <computeroutput>[inherited]</computeroutput></computeroutput></para><para>

<para>For each bundle in <emphasis>Input</emphasis>, do <emphasis>Func</emphasis>. </para>
</para>
<para>
Definition at line <link linkend="__clang_offload_bundler_8cpp_source_1l00234">234</link> of file <link linkend="__clang_offload_bundler_8cpp_source">ClangOffloadBundler.cpp</link>.</para>
<programlisting>00235 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00236 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(<emphasis role="keyword">true</emphasis>)&#32;{
00237 &#32;&#32;&#32;&#32;&#32;&#32;Expected&lt;Optional&lt;StringRef&gt;&gt;&#32;CurTripleOrErr&#32;=&#32;<link linkend="_class_file_handler_1a5b31037af59fa8c77b8287d8ae9d84c4">ReadBundleStart</link>(Input);
00238 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!CurTripleOrErr)
00239 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;CurTripleOrErr.takeError();
00240 
00241 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;No&#32;more&#32;bundles.</emphasis>
00242 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!*CurTripleOrErr)
00243 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
00244 
00245 &#32;&#32;&#32;&#32;&#32;&#32;StringRef&#32;CurTriple&#32;=&#32;**CurTripleOrErr;
00246 &#32;&#32;&#32;&#32;&#32;&#32;assert(!CurTriple.empty());
00247 
00248 &#32;&#32;&#32;&#32;&#32;&#32;BundleInfo&#32;Info{CurTriple};
00249 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(Error&#32;Err&#32;=&#32;Func(Info))
00250 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;Err;
00251 &#32;&#32;&#32;&#32;}
00252 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;Error::success();
00253 &#32;&#32;}
</programlisting>    </section><anchor xml:id="_class_file_handler_1a70cbb9c0347d248c018e52993a13255b"/>    <section>
    <title>listBundleIDs()</title>
<indexterm><primary>listBundleIDs</primary><secondary>BinaryFileHandler</secondary></indexterm>
<indexterm><primary>BinaryFileHandler</primary><secondary>listBundleIDs</secondary></indexterm>
<para><computeroutput>virtual Error FileHandler::listBundleIDs (MemoryBuffer &amp; Input)<computeroutput>[inline]</computeroutput>, <computeroutput>[virtual]</computeroutput>, <computeroutput>[inherited]</computeroutput></computeroutput></para><para>

<para>List bundle IDs in <emphasis>Input</emphasis>. </para>
</para>
<para>
Definition at line <link linkend="__clang_offload_bundler_8cpp_source_1l00220">220</link> of file <link linkend="__clang_offload_bundler_8cpp_source">ClangOffloadBundler.cpp</link>.</para>
<programlisting>00220 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00221 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(Error&#32;Err&#32;=&#32;<link linkend="_class_file_handler_1a0b973008bf7d7a53bc33d0f75b0dadef">ReadHeader</link>(Input))
00222 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;Err;
00223 
00224 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_class_file_handler_1a70ed8dd129df99dcd5d5e42fffd7b125">forEachBundle</link>(Input,&#32;[&amp;](<emphasis role="keyword">const</emphasis>&#32;BundleInfo&#32;&amp;Info)&#32;-&gt;&#32;Error&#32;{
00225 &#32;&#32;&#32;&#32;&#32;&#32;llvm::outs()&#32;&lt;&lt;&#32;Info.BundleID&#32;&lt;&lt;&#32;<emphasis role="charliteral">&apos;\n&apos;</emphasis>;
00226 &#32;&#32;&#32;&#32;&#32;&#32;Error&#32;Err&#32;=&#32;<link linkend="_class_file_handler_1af0a452c5014ddb59b9558614d21daaed">listBundleIDsCallback</link>(Input,&#32;Info);
00227 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(Err)
00228 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;Err;
00229 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;Error::success();
00230 &#32;&#32;&#32;&#32;});
00231 &#32;&#32;}
</programlisting>    </section><anchor xml:id="_class_file_handler_1af0a452c5014ddb59b9558614d21daaed"/>    <section>
    <title>listBundleIDsCallback()</title>
<indexterm><primary>listBundleIDsCallback</primary><secondary>BinaryFileHandler</secondary></indexterm>
<indexterm><primary>BinaryFileHandler</primary><secondary>listBundleIDsCallback</secondary></indexterm>
<para><computeroutput>virtual Error FileHandler::listBundleIDsCallback (MemoryBuffer &amp; Input, const <link linkend="_struct_file_handler_1_1_bundle_info">BundleInfo</link> &amp; Info)<computeroutput>[inline]</computeroutput>, <computeroutput>[protected]</computeroutput>, <computeroutput>[virtual]</computeroutput>, <computeroutput>[inherited]</computeroutput></computeroutput></para><para>
Reimplemented in <link linkend="_class_text_file_handler_1a87e2401d42b38125b706e0827723d5ec">TextFileHandler</link>.</para>
<para>
Definition at line <link linkend="__clang_offload_bundler_8cpp_source_1l00256">256</link> of file <link linkend="__clang_offload_bundler_8cpp_source">ClangOffloadBundler.cpp</link>.</para>
<programlisting>00257 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00258 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;Error::success();
00259 &#32;&#32;}
</programlisting>    </section><anchor xml:id="_class_binary_file_handler_1a03f6f2509a8d6d78e3ab800995f7f779"/>    <section>
    <title>ReadBundle()</title>
<indexterm><primary>ReadBundle</primary><secondary>BinaryFileHandler</secondary></indexterm>
<indexterm><primary>BinaryFileHandler</primary><secondary>ReadBundle</secondary></indexterm>
<para><computeroutput>Error BinaryFileHandler::ReadBundle (raw_ostream &amp; OS, MemoryBuffer &amp; Input)<computeroutput>[inline]</computeroutput>, <computeroutput>[final]</computeroutput>, <computeroutput>[virtual]</computeroutput></computeroutput></para><para>

<para>Read the current bundle and write the result into the stream <emphasis>OS</emphasis>. </para>
</para>
<para>
Implements <link linkend="_class_file_handler_1a6e4e497d5160eff3cab43dfdfd7e2a13">FileHandler</link>.</para>
<para>
Definition at line <link linkend="__clang_offload_bundler_8cpp_source_1l00415">415</link> of file <link linkend="__clang_offload_bundler_8cpp_source">ClangOffloadBundler.cpp</link>.</para>
<programlisting>00415 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00416 &#32;&#32;&#32;&#32;assert(CurBundleInfo&#32;!=&#32;BundlesInfo.end()&#32;&amp;&amp;&#32;<emphasis role="stringliteral">&quot;Invalid&#32;reader&#32;info!&quot;</emphasis>);
00417 &#32;&#32;&#32;&#32;StringRef&#32;FC&#32;=&#32;Input.getBuffer();
00418 &#32;&#32;&#32;&#32;OS.write(FC.data()&#32;+&#32;CurBundleInfo-&gt;second.Offset,
00419 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;CurBundleInfo-&gt;second.Size);
00420 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;Error::success();
00421 &#32;&#32;}
</programlisting>    </section><anchor xml:id="_class_binary_file_handler_1af938c83df04fa66fe04c7e0563ade0f0"/>    <section>
    <title>ReadBundleEnd()</title>
<indexterm><primary>ReadBundleEnd</primary><secondary>BinaryFileHandler</secondary></indexterm>
<indexterm><primary>BinaryFileHandler</primary><secondary>ReadBundleEnd</secondary></indexterm>
<para><computeroutput>Error BinaryFileHandler::ReadBundleEnd (MemoryBuffer &amp; Input)<computeroutput>[inline]</computeroutput>, <computeroutput>[final]</computeroutput>, <computeroutput>[virtual]</computeroutput></computeroutput></para><para>

<para>Read the marker that closes the current bundle. </para>
</para>
<para>
Implements <link linkend="_class_file_handler_1a0dc30eeb824c348cc6f9bba853c93c41">FileHandler</link>.</para>
<para>
Definition at line <link linkend="__clang_offload_bundler_8cpp_source_1l00410">410</link> of file <link linkend="__clang_offload_bundler_8cpp_source">ClangOffloadBundler.cpp</link>.</para>
<programlisting>00410 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00411 &#32;&#32;&#32;&#32;assert(CurBundleInfo&#32;!=&#32;BundlesInfo.end()&#32;&amp;&amp;&#32;<emphasis role="stringliteral">&quot;Invalid&#32;reader&#32;info!&quot;</emphasis>);
00412 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;Error::success();
00413 &#32;&#32;}
</programlisting>    </section><anchor xml:id="_class_binary_file_handler_1a9ca3dc3dc36f16258fdd01844531f129"/>    <section>
    <title>ReadBundleStart()</title>
<indexterm><primary>ReadBundleStart</primary><secondary>BinaryFileHandler</secondary></indexterm>
<indexterm><primary>BinaryFileHandler</primary><secondary>ReadBundleStart</secondary></indexterm>
<para><computeroutput>Expected&lt;Optional&lt;StringRef&gt; &gt; BinaryFileHandler::ReadBundleStart (MemoryBuffer &amp; Input)<computeroutput>[inline]</computeroutput>, <computeroutput>[final]</computeroutput>, <computeroutput>[virtual]</computeroutput></computeroutput></para>
<para>Read the marker of the next bundled to be read in the file. The bundle name is returned if there is one in the file, or <computeroutput>None</computeroutput> if there are no more bundles to be read. </para>
<para>
Implements <link linkend="_class_file_handler_1a5b31037af59fa8c77b8287d8ae9d84c4">FileHandler</link>.</para>
<para>
Definition at line <link linkend="__clang_offload_bundler_8cpp_source_1l00403">403</link> of file <link linkend="__clang_offload_bundler_8cpp_source">ClangOffloadBundler.cpp</link>.</para>
<programlisting>00403 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00404 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(NextBundleInfo&#32;==&#32;BundlesInfo.end())
00405 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;None;
00406 &#32;&#32;&#32;&#32;CurBundleInfo&#32;=&#32;NextBundleInfo++;
00407 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;CurBundleInfo-&gt;first();
00408 &#32;&#32;}
</programlisting>    </section><anchor xml:id="_class_binary_file_handler_1a4129cf2eeac5c792f546db1e43d5433c"/>    <section>
    <title>ReadHeader()</title>
<indexterm><primary>ReadHeader</primary><secondary>BinaryFileHandler</secondary></indexterm>
<indexterm><primary>BinaryFileHandler</primary><secondary>ReadHeader</secondary></indexterm>
<para><computeroutput>Error BinaryFileHandler::ReadHeader (MemoryBuffer &amp; Input)<computeroutput>[inline]</computeroutput>, <computeroutput>[final]</computeroutput>, <computeroutput>[virtual]</computeroutput></computeroutput></para>
<para>Update the file handler with information from the header of the bundled file. </para>
<para>
Implements <link linkend="_class_file_handler_1a0b973008bf7d7a53bc33d0f75b0dadef">FileHandler</link>.</para>
<para>
Definition at line <link linkend="__clang_offload_bundler_8cpp_source_1l00335">335</link> of file <link linkend="__clang_offload_bundler_8cpp_source">ClangOffloadBundler.cpp</link>.</para>
<programlisting>00335 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00336 &#32;&#32;&#32;&#32;StringRef&#32;FC&#32;=&#32;Input.getBuffer();
00337 
00338 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Initialize&#32;the&#32;current&#32;bundle&#32;with&#32;the&#32;end&#32;of&#32;the&#32;container.</emphasis>
00339 &#32;&#32;&#32;&#32;CurBundleInfo&#32;=&#32;BundlesInfo.end();
00340 
00341 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Check&#32;if&#32;buffer&#32;is&#32;smaller&#32;than&#32;magic&#32;string.</emphasis>
00342 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;ReadChars&#32;=&#32;<emphasis role="keyword">sizeof</emphasis>(<link linkend="__clang_offload_bundler_8cpp_1a8261baf2ddbb8a17f287149d5415eebf">OFFLOAD_BUNDLER_MAGIC_STR</link>)&#32;-&#32;1;
00343 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(ReadChars&#32;&gt;&#32;FC.size())
00344 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;Error::success();
00345 
00346 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Check&#32;if&#32;no&#32;magic&#32;was&#32;found.</emphasis>
00347 &#32;&#32;&#32;&#32;StringRef&#32;Magic(FC.data(),&#32;<emphasis role="keyword">sizeof</emphasis>(<link linkend="__clang_offload_bundler_8cpp_1a8261baf2ddbb8a17f287149d5415eebf">OFFLOAD_BUNDLER_MAGIC_STR</link>)&#32;-&#32;1);
00348 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!Magic.equals(<link linkend="__clang_offload_bundler_8cpp_1a8261baf2ddbb8a17f287149d5415eebf">OFFLOAD_BUNDLER_MAGIC_STR</link>))
00349 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;Error::success();
00350 
00351 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Read&#32;number&#32;of&#32;bundles.</emphasis>
00352 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(ReadChars&#32;+&#32;8&#32;&gt;&#32;FC.size())
00353 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;Error::success();
00354 
00355 &#32;&#32;&#32;&#32;uint64_t&#32;NumberOfBundles&#32;=&#32;Read8byteIntegerFromBuffer(FC,&#32;ReadChars);
00356 &#32;&#32;&#32;&#32;ReadChars&#32;+=&#32;8;
00357 
00358 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Read&#32;bundle&#32;offsets,&#32;sizes&#32;and&#32;triples.</emphasis>
00359 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(uint64_t&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;NumberOfBundles;&#32;++i)&#32;{
00360 
00361 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Read&#32;offset.</emphasis>
00362 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(ReadChars&#32;+&#32;8&#32;&gt;&#32;FC.size())
00363 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;Error::success();
00364 
00365 &#32;&#32;&#32;&#32;&#32;&#32;uint64_t&#32;Offset&#32;=&#32;Read8byteIntegerFromBuffer(FC,&#32;ReadChars);
00366 &#32;&#32;&#32;&#32;&#32;&#32;ReadChars&#32;+=&#32;8;
00367 
00368 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Read&#32;size.</emphasis>
00369 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(ReadChars&#32;+&#32;8&#32;&gt;&#32;FC.size())
00370 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;Error::success();
00371 
00372 &#32;&#32;&#32;&#32;&#32;&#32;uint64_t&#32;Size&#32;=&#32;Read8byteIntegerFromBuffer(FC,&#32;ReadChars);
00373 &#32;&#32;&#32;&#32;&#32;&#32;ReadChars&#32;+=&#32;8;
00374 
00375 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Read&#32;triple&#32;size.</emphasis>
00376 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(ReadChars&#32;+&#32;8&#32;&gt;&#32;FC.size())
00377 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;Error::success();
00378 
00379 &#32;&#32;&#32;&#32;&#32;&#32;uint64_t&#32;TripleSize&#32;=&#32;Read8byteIntegerFromBuffer(FC,&#32;ReadChars);
00380 &#32;&#32;&#32;&#32;&#32;&#32;ReadChars&#32;+=&#32;8;
00381 
00382 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Read&#32;triple.</emphasis>
00383 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(ReadChars&#32;+&#32;TripleSize&#32;&gt;&#32;FC.size())
00384 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;Error::success();
00385 
00386 &#32;&#32;&#32;&#32;&#32;&#32;StringRef&#32;Triple(&amp;FC.data()[ReadChars],&#32;TripleSize);
00387 &#32;&#32;&#32;&#32;&#32;&#32;ReadChars&#32;+=&#32;TripleSize;
00388 
00389 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Check&#32;if&#32;the&#32;offset&#32;and&#32;size&#32;make&#32;sense.</emphasis>
00390 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!Offset&#32;||&#32;Offset&#32;+&#32;Size&#32;&gt;&#32;FC.size())
00391 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;Error::success();
00392 
00393 &#32;&#32;&#32;&#32;&#32;&#32;assert(BundlesInfo.find(Triple)&#32;==&#32;BundlesInfo.end()&#32;&amp;&amp;
00394 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;Triple&#32;is&#32;duplicated??&quot;</emphasis>);
00395 &#32;&#32;&#32;&#32;&#32;&#32;BundlesInfo[Triple]&#32;=&#32;BinaryBundleInfo(Size,&#32;Offset);
00396 &#32;&#32;&#32;&#32;}
00397 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Set&#32;the&#32;iterator&#32;to&#32;where&#32;we&#32;will&#32;start&#32;to&#32;read.</emphasis>
00398 &#32;&#32;&#32;&#32;CurBundleInfo&#32;=&#32;BundlesInfo.end();
00399 &#32;&#32;&#32;&#32;NextBundleInfo&#32;=&#32;BundlesInfo.begin();
00400 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;Error::success();
00401 &#32;&#32;}
</programlisting>    </section><anchor xml:id="_class_binary_file_handler_1ae293c57008f6d941531c76839d0cd371"/>    <section>
    <title>WriteBundle()</title>
<indexterm><primary>WriteBundle</primary><secondary>BinaryFileHandler</secondary></indexterm>
<indexterm><primary>BinaryFileHandler</primary><secondary>WriteBundle</secondary></indexterm>
<para><computeroutput>Error BinaryFileHandler::WriteBundle (raw_fd_ostream &amp; OS, MemoryBuffer &amp; Input)<computeroutput>[inline]</computeroutput>, <computeroutput>[final]</computeroutput>, <computeroutput>[virtual]</computeroutput></computeroutput></para><para>

<para>Write the bundle from <emphasis>Input</emphasis> into <emphasis>OS</emphasis>. </para>
</para>
<para>
Implements <link linkend="_class_file_handler_1aa308cfef5f3c06d3c15478097799e0e5">FileHandler</link>.</para>
<para>
Definition at line <link linkend="__clang_offload_bundler_8cpp_source_1l00468">468</link> of file <link linkend="__clang_offload_bundler_8cpp_source">ClangOffloadBundler.cpp</link>.</para>
<programlisting>00468 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00469 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;BI&#32;=&#32;BundlesInfo[CurWriteBundleTarget];
00470 &#32;&#32;&#32;&#32;OS.seek(BI.Offset);
00471 &#32;&#32;&#32;&#32;OS.write(Input.getBufferStart(),&#32;Input.getBufferSize());
00472 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;Error::success();
00473 &#32;&#32;}
</programlisting>    </section><anchor xml:id="_class_binary_file_handler_1ae8babe5e1a76494820097329a35f72ae"/>    <section>
    <title>WriteBundleEnd()</title>
<indexterm><primary>WriteBundleEnd</primary><secondary>BinaryFileHandler</secondary></indexterm>
<indexterm><primary>BinaryFileHandler</primary><secondary>WriteBundleEnd</secondary></indexterm>
<para><computeroutput>Error BinaryFileHandler::WriteBundleEnd (raw_fd_ostream &amp; OS, StringRef TargetTriple)<computeroutput>[inline]</computeroutput>, <computeroutput>[final]</computeroutput>, <computeroutput>[virtual]</computeroutput></computeroutput></para>
<para>Write the marker that closes a bundle for the triple <emphasis>TargetTriple</emphasis> to <emphasis>OS</emphasis>. </para>
<para>
Implements <link linkend="_class_file_handler_1a716f51f009426d516f30cd7527f25681">FileHandler</link>.</para>
<para>
Definition at line <link linkend="__clang_offload_bundler_8cpp_source_1l00464">464</link> of file <link linkend="__clang_offload_bundler_8cpp_source">ClangOffloadBundler.cpp</link>.</para>
<programlisting>00464 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00465 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;Error::success();
00466 &#32;&#32;}
</programlisting>    </section><anchor xml:id="_class_binary_file_handler_1aae0993fd9bf54ca80c3302f5e0810a8e"/>    <section>
    <title>WriteBundleStart()</title>
<indexterm><primary>WriteBundleStart</primary><secondary>BinaryFileHandler</secondary></indexterm>
<indexterm><primary>BinaryFileHandler</primary><secondary>WriteBundleStart</secondary></indexterm>
<para><computeroutput>Error BinaryFileHandler::WriteBundleStart (raw_fd_ostream &amp; OS, StringRef TargetTriple)<computeroutput>[inline]</computeroutput>, <computeroutput>[final]</computeroutput>, <computeroutput>[virtual]</computeroutput></computeroutput></para>
<para>Write the marker that initiates a bundle for the triple <emphasis>TargetTriple</emphasis> to <emphasis>OS</emphasis>. </para>
<para>
Implements <link linkend="_class_file_handler_1a023196b877e9ab83859f7194e9b38d9e">FileHandler</link>.</para>
<para>
Definition at line <link linkend="__clang_offload_bundler_8cpp_source_1l00459">459</link> of file <link linkend="__clang_offload_bundler_8cpp_source">ClangOffloadBundler.cpp</link>.</para>
<programlisting>00459 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00460 &#32;&#32;&#32;&#32;CurWriteBundleTarget&#32;=&#32;TargetTriple.str();
00461 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;Error::success();
00462 &#32;&#32;}
</programlisting>    </section><anchor xml:id="_class_binary_file_handler_1ab80cac5e41eaab070a155716de55c84d"/>    <section>
    <title>WriteHeader()</title>
<indexterm><primary>WriteHeader</primary><secondary>BinaryFileHandler</secondary></indexterm>
<indexterm><primary>BinaryFileHandler</primary><secondary>WriteHeader</secondary></indexterm>
<para><computeroutput>Error BinaryFileHandler::WriteHeader (raw_fd_ostream &amp; OS, ArrayRef&lt; std::unique_ptr&lt; MemoryBuffer &gt;&gt; Inputs)<computeroutput>[inline]</computeroutput>, <computeroutput>[final]</computeroutput>, <computeroutput>[virtual]</computeroutput></computeroutput></para>
<para>Write the header of the bundled file to <emphasis>OS</emphasis> based on the information gathered from <emphasis>Inputs</emphasis>. </para>
<para>
Implements <link linkend="_class_file_handler_1ab587b57538b319ab796b4f9ac060db56">FileHandler</link>.</para>
<para>
Definition at line <link linkend="__clang_offload_bundler_8cpp_source_1l00423">423</link> of file <link linkend="__clang_offload_bundler_8cpp_source">ClangOffloadBundler.cpp</link>.</para>
<programlisting>00424 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00425 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Compute&#32;size&#32;of&#32;the&#32;header.</emphasis>
00426 &#32;&#32;&#32;&#32;uint64_t&#32;HeaderSize&#32;=&#32;0;
00427 
00428 &#32;&#32;&#32;&#32;HeaderSize&#32;+=&#32;<emphasis role="keyword">sizeof</emphasis>(<link linkend="__clang_offload_bundler_8cpp_1a8261baf2ddbb8a17f287149d5415eebf">OFFLOAD_BUNDLER_MAGIC_STR</link>)&#32;-&#32;1;
00429 &#32;&#32;&#32;&#32;HeaderSize&#32;+=&#32;8;&#32;<emphasis role="comment">//&#32;Number&#32;of&#32;Bundles</emphasis>
00430 
00431 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">auto</emphasis>&#32;&amp;T&#32;:&#32;TargetNames)&#32;{
00432 &#32;&#32;&#32;&#32;&#32;&#32;HeaderSize&#32;+=&#32;3&#32;*&#32;8;&#32;<emphasis role="comment">//&#32;Bundle&#32;offset,&#32;Size&#32;of&#32;bundle&#32;and&#32;size&#32;of&#32;triple.</emphasis>
00433 &#32;&#32;&#32;&#32;&#32;&#32;HeaderSize&#32;+=&#32;T.size();&#32;<emphasis role="comment">//&#32;The&#32;triple.</emphasis>
00434 &#32;&#32;&#32;&#32;}
00435 
00436 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Write&#32;to&#32;the&#32;buffer&#32;the&#32;header.</emphasis>
00437 &#32;&#32;&#32;&#32;OS&#32;&lt;&lt;&#32;<link linkend="__clang_offload_bundler_8cpp_1a8261baf2ddbb8a17f287149d5415eebf">OFFLOAD_BUNDLER_MAGIC_STR</link>;
00438 
00439 &#32;&#32;&#32;&#32;Write8byteIntegerToBuffer(OS,&#32;TargetNames.size());
00440 
00441 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;Idx&#32;=&#32;0;
00442 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">auto</emphasis>&#32;&amp;T&#32;:&#32;TargetNames)&#32;{
00443 &#32;&#32;&#32;&#32;&#32;&#32;MemoryBuffer&#32;&amp;MB&#32;=&#32;*Inputs[Idx++];
00444 &#32;&#32;&#32;&#32;&#32;&#32;HeaderSize&#32;=&#32;alignTo(HeaderSize,&#32;BundleAlignment);
00445 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Bundle&#32;offset.</emphasis>
00446 &#32;&#32;&#32;&#32;&#32;&#32;Write8byteIntegerToBuffer(OS,&#32;HeaderSize);
00447 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Size&#32;of&#32;the&#32;bundle&#32;(adds&#32;to&#32;the&#32;next&#32;bundle&apos;s&#32;offset)</emphasis>
00448 &#32;&#32;&#32;&#32;&#32;&#32;Write8byteIntegerToBuffer(OS,&#32;MB.getBufferSize());
00449 &#32;&#32;&#32;&#32;&#32;&#32;BundlesInfo[T]&#32;=&#32;BinaryBundleInfo(MB.getBufferSize(),&#32;HeaderSize);
00450 &#32;&#32;&#32;&#32;&#32;&#32;HeaderSize&#32;+=&#32;MB.getBufferSize();
00451 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Size&#32;of&#32;the&#32;triple</emphasis>
00452 &#32;&#32;&#32;&#32;&#32;&#32;Write8byteIntegerToBuffer(OS,&#32;T.size());
00453 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Triple</emphasis>
00454 &#32;&#32;&#32;&#32;&#32;&#32;OS&#32;&lt;&lt;&#32;T;
00455 &#32;&#32;&#32;&#32;}
00456 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;Error::success();
00457 &#32;&#32;}
</programlisting></section>
<para>
The documentation for this class was generated from the following file:</para>
/Users/maximilian/clang-llvm/clang/tools/clang-offload-bundler/<link linkend="__clang_offload_bundler_8cpp">ClangOffloadBundler.cpp</link></section>
</section>
