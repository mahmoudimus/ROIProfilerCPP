<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_driver_8cpp" xml:lang="en-US">
<title>/Users/maximilian/clang-llvm/clang/tools/driver/driver.cpp File Reference</title>
<indexterm><primary>/Users/maximilian/clang-llvm/clang/tools/driver/driver.cpp</primary></indexterm>
<programlisting>#include &quot;clang/Driver/Driver.h&quot;
#include &quot;clang/Basic/DiagnosticOptions.h&quot;
#include &quot;clang/Basic/Stack.h&quot;
#include &quot;clang/Config/config.h&quot;
#include &quot;clang/Driver/Compilation.h&quot;
#include &quot;clang/Driver/DriverDiagnostic.h&quot;
#include &quot;clang/Driver/Options.h&quot;
#include &quot;clang/Driver/ToolChain.h&quot;
#include &quot;clang/Frontend/ChainedDiagnosticConsumer.h&quot;
#include &quot;clang/Frontend/CompilerInvocation.h&quot;
#include &quot;clang/Frontend/SerializedDiagnosticPrinter.h&quot;
#include &quot;clang/Frontend/TextDiagnosticPrinter.h&quot;
#include &quot;clang/Frontend/Utils.h&quot;
#include &quot;llvm/ADT/ArrayRef.h&quot;
#include &quot;llvm/ADT/SmallString.h&quot;
#include &quot;llvm/ADT/SmallVector.h&quot;
#include &quot;llvm/Option/ArgList.h&quot;
#include &quot;llvm/Option/OptTable.h&quot;
#include &quot;llvm/Option/Option.h&quot;
#include &quot;llvm/Support/BuryPointer.h&quot;
#include &quot;llvm/Support/CommandLine.h&quot;
#include &quot;llvm/Support/CrashRecoveryContext.h&quot;
#include &quot;llvm/Support/ErrorHandling.h&quot;
#include &quot;llvm/Support/FileSystem.h&quot;
#include &quot;llvm/Support/Host.h&quot;
#include &quot;llvm/Support/InitLLVM.h&quot;
#include &quot;llvm/Support/Path.h&quot;
#include &quot;llvm/Support/PrettyStackTrace.h&quot;
#include &quot;llvm/Support/Process.h&quot;
#include &quot;llvm/Support/Program.h&quot;
#include &quot;llvm/Support/Regex.h&quot;
#include &quot;llvm/Support/Signals.h&quot;
#include &quot;llvm/Support/StringSaver.h&quot;
#include &quot;llvm/Support/TargetSelect.h&quot;
#include &quot;llvm/Support/Timer.h&quot;
#include &quot;llvm/Support/raw_ostream.h&quot;
#include &lt;memory&gt;
#include &lt;set&gt;
#include &lt;system_error&gt;
</programlisting><simplesect>
    <title>Functions    </title>
        <itemizedlist>
            <listitem><para>std::string <link linkend="_driver_8cpp_1a4ee7e45503dac4f1b4f3604b3c4d8875">GetExecutablePath</link> (const char *Argv0, bool CanonicalPrefixes)</para>
</listitem>
            <listitem><para>int <link linkend="_driver_8cpp_1a86ac52e41ae670905ca66a8bf1eb04b9">cc1_main</link> (ArrayRef&lt; const char * &gt; Argv, const char *Argv0, void *MainAddr)</para>
</listitem>
            <listitem><para>int <link linkend="_driver_8cpp_1ac7d9c4a59e9773f938ddff75f14b90a6">cc1as_main</link> (ArrayRef&lt; const char * &gt; Argv, const char *Argv0, void *MainAddr)</para>
</listitem>
            <listitem><para>int <link linkend="_driver_8cpp_1a27f0fa14a18bd4a9c735d321f74779d9">cc1gen_reproducer_main</link> (ArrayRef&lt; const char * &gt; Argv, const char *Argv0, void *MainAddr)</para>
</listitem>
            <listitem><para>int <link linkend="_driver_8cpp_1ae98fb7c14fb481a1151b423f9d4adb82">main</link> (int Argc, const char **Argv)</para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Function Documentation</title>
<anchor xml:id="_driver_8cpp_1a86ac52e41ae670905ca66a8bf1eb04b9"/>    <section>
    <title>cc1_main()</title>
<indexterm><primary>cc1_main</primary><secondary>driver.cpp</secondary></indexterm>
<indexterm><primary>driver.cpp</primary><secondary>cc1_main</secondary></indexterm>
<para><computeroutput>int cc1_main (ArrayRef&lt; const char * &gt; Argv, const char * Argv0, void * MainAddr)</computeroutput></para><para>
Definition at line <link linkend="_cc1__main_8cpp_source_1l00184">184</link> of file <link linkend="_cc1__main_8cpp_source">cc1_main.cpp</link>.</para>
<programlisting>00184 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00185 &#32;&#32;ensureSufficientStack();
00186 
00187 &#32;&#32;std::unique_ptr&lt;CompilerInstance&gt;&#32;Clang(<emphasis role="keyword">new</emphasis>&#32;CompilerInstance());
00188 &#32;&#32;IntrusiveRefCntPtr&lt;DiagnosticIDs&gt;&#32;DiagID(<emphasis role="keyword">new</emphasis>&#32;DiagnosticIDs());
00189 
00190 &#32;&#32;<emphasis role="comment">//&#32;Register&#32;the&#32;support&#32;for&#32;object-file-wrapped&#32;Clang&#32;modules.</emphasis>
00191 &#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;PCHOps&#32;=&#32;Clang-&gt;getPCHContainerOperations();
00192 &#32;&#32;PCHOps-&gt;registerWriter(std::make_unique&lt;ObjectFilePCHContainerWriter&gt;());
00193 &#32;&#32;PCHOps-&gt;registerReader(std::make_unique&lt;ObjectFilePCHContainerReader&gt;());
00194 
00195 &#32;&#32;<emphasis role="comment">//&#32;Initialize&#32;targets&#32;first,&#32;so&#32;that&#32;--version&#32;shows&#32;registered&#32;targets.</emphasis>
00196 &#32;&#32;llvm::InitializeAllTargets();
00197 &#32;&#32;llvm::InitializeAllTargetMCs();
00198 &#32;&#32;llvm::InitializeAllAsmPrinters();
00199 &#32;&#32;llvm::InitializeAllAsmParsers();
00200 
00201 &#32;&#32;<emphasis role="comment">//&#32;Buffer&#32;diagnostics&#32;from&#32;argument&#32;parsing&#32;so&#32;that&#32;we&#32;can&#32;output&#32;them&#32;using&#32;a</emphasis>
00202 &#32;&#32;<emphasis role="comment">//&#32;well&#32;formed&#32;diagnostic&#32;object.</emphasis>
00203 &#32;&#32;IntrusiveRefCntPtr&lt;DiagnosticOptions&gt;&#32;DiagOpts&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;DiagnosticOptions();
00204 &#32;&#32;TextDiagnosticBuffer&#32;*DiagsBuffer&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;TextDiagnosticBuffer;
00205 &#32;&#32;DiagnosticsEngine&#32;Diags(DiagID,&#32;&amp;*DiagOpts,&#32;DiagsBuffer);
00206 
00207 &#32;&#32;<emphasis role="comment">//&#32;Setup&#32;round-trip&#32;remarks&#32;for&#32;the&#32;DiagnosticsEngine&#32;used&#32;in&#32;CreateFromArgs.</emphasis>
00208 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(find(Argv,&#32;StringRef(<emphasis role="stringliteral">&quot;-Rround-trip-cc1-args&quot;</emphasis>))&#32;!=&#32;Argv.end())
00209 &#32;&#32;&#32;&#32;Diags.setSeverity(diag::remark_cc1_round_trip_generated,
00210 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;diag::Severity::Remark,&#32;{});
00211 
00212 &#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;Success&#32;=&#32;CompilerInvocation::CreateFromArgs(Clang-&gt;getInvocation(),
00213 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Argv,&#32;Diags,&#32;Argv0);
00214 
00215 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(Clang-&gt;getFrontendOpts().TimeTrace)&#32;{
00216 &#32;&#32;&#32;&#32;llvm::timeTraceProfilerInitialize(
00217 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Clang-&gt;getFrontendOpts().TimeTraceGranularity,&#32;Argv0);
00218 &#32;&#32;}
00219 &#32;&#32;<emphasis role="comment">//&#32;--print-supported-cpus&#32;takes&#32;priority&#32;over&#32;the&#32;actual&#32;compilation.</emphasis>
00220 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(Clang-&gt;getFrontendOpts().PrintSupportedCPUs)
00221 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;PrintSupportedCPUs(Clang-&gt;getTargetOpts().Triple);
00222 
00223 &#32;&#32;<emphasis role="comment">//&#32;Infer&#32;the&#32;builtin&#32;include&#32;path&#32;if&#32;unspecified.</emphasis>
00224 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(Clang-&gt;getHeaderSearchOpts().UseBuiltinIncludes&#32;&amp;&amp;
00225 &#32;&#32;&#32;&#32;&#32;&#32;Clang-&gt;getHeaderSearchOpts().ResourceDir.empty())
00226 &#32;&#32;&#32;&#32;Clang-&gt;getHeaderSearchOpts().ResourceDir&#32;=
00227 &#32;&#32;&#32;&#32;&#32;&#32;CompilerInvocation::GetResourcesPath(Argv0,&#32;MainAddr);
00228 
00229 &#32;&#32;<emphasis role="comment">//&#32;Create&#32;the&#32;actual&#32;diagnostics&#32;engine.</emphasis>
00230 &#32;&#32;Clang-&gt;createDiagnostics();
00231 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!Clang-&gt;hasDiagnostics())
00232 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;1;
00233 
00234 &#32;&#32;<emphasis role="comment">//&#32;Set&#32;an&#32;error&#32;handler,&#32;so&#32;that&#32;any&#32;LLVM&#32;backend&#32;diagnostics&#32;go&#32;through&#32;our</emphasis>
00235 &#32;&#32;<emphasis role="comment">//&#32;error&#32;handler.</emphasis>
00236 &#32;&#32;llvm::install_fatal_error_handler(LLVMErrorHandler,
00237 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">void</emphasis>*<emphasis role="keyword">&gt;</emphasis>(&amp;Clang-&gt;getDiagnostics()));
00238 
00239 &#32;&#32;DiagsBuffer-&gt;FlushDiagnostics(Clang-&gt;getDiagnostics());
00240 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!Success)
00241 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;1;
00242 
00243 &#32;&#32;<emphasis role="comment">//&#32;Execute&#32;the&#32;frontend&#32;actions.</emphasis>
00244 &#32;&#32;{
00245 &#32;&#32;&#32;&#32;llvm::TimeTraceScope&#32;TimeScope(<emphasis role="stringliteral">&quot;ExecuteCompiler&quot;</emphasis>);
00246 &#32;&#32;&#32;&#32;Success&#32;=&#32;ExecuteCompilerInvocation(Clang.get());
00247 &#32;&#32;}
00248 
00249 &#32;&#32;<emphasis role="comment">//&#32;If&#32;any&#32;timers&#32;were&#32;active&#32;but&#32;haven&apos;t&#32;been&#32;destroyed&#32;yet,&#32;print&#32;their</emphasis>
00250 &#32;&#32;<emphasis role="comment">//&#32;results&#32;now.&#32;&#32;This&#32;happens&#32;in&#32;-disable-free&#32;mode.</emphasis>
00251 &#32;&#32;llvm::TimerGroup::printAll(llvm::errs());
00252 &#32;&#32;llvm::TimerGroup::clearAll();
00253 
00254 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(llvm::timeTraceProfilerEnabled())&#32;{
00255 &#32;&#32;&#32;&#32;SmallString&lt;128&gt;&#32;Path(Clang-&gt;getFrontendOpts().OutputFile);
00256 &#32;&#32;&#32;&#32;llvm::sys::path::replace_extension(Path,&#32;<emphasis role="stringliteral">&quot;json&quot;</emphasis>);
00257 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="keyword">auto</emphasis>&#32;profilerOutput&#32;=&#32;Clang-&gt;createOutputFile(
00258 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Path.str(),&#32;<emphasis role="comment">/*Binary=*/</emphasis><emphasis role="keyword">false</emphasis>,&#32;<emphasis role="comment">/*RemoveFileOnSignal=*/</emphasis><emphasis role="keyword">false</emphasis>,
00259 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*useTemporary=*/</emphasis><emphasis role="keyword">false</emphasis>))&#32;{
00260 &#32;&#32;&#32;&#32;&#32;&#32;llvm::timeTraceProfilerWrite(*profilerOutput);
00261 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;FIXME(ibiryukov):&#32;make&#32;profilerOutput&#32;flush&#32;in&#32;destructor&#32;instead.</emphasis>
00262 &#32;&#32;&#32;&#32;&#32;&#32;profilerOutput-&gt;flush();
00263 &#32;&#32;&#32;&#32;&#32;&#32;llvm::timeTraceProfilerCleanup();
00264 &#32;&#32;&#32;&#32;&#32;&#32;Clang-&gt;clearOutputFiles(<emphasis role="keyword">false</emphasis>);
00265 &#32;&#32;&#32;&#32;}
00266 &#32;&#32;}
00267 
00268 &#32;&#32;<emphasis role="comment">//&#32;Our&#32;error&#32;handler&#32;depends&#32;on&#32;the&#32;Diagnostics&#32;object,&#32;which&#32;we&apos;re</emphasis>
00269 &#32;&#32;<emphasis role="comment">//&#32;potentially&#32;about&#32;to&#32;delete.&#32;Uninstall&#32;the&#32;handler&#32;now&#32;so&#32;that&#32;any</emphasis>
00270 &#32;&#32;<emphasis role="comment">//&#32;later&#32;errors&#32;use&#32;the&#32;default&#32;handling&#32;behavior&#32;instead.</emphasis>
00271 &#32;&#32;llvm::remove_fatal_error_handler();
00272 
00273 &#32;&#32;<emphasis role="comment">//&#32;When&#32;running&#32;with&#32;-disable-free,&#32;don&apos;t&#32;do&#32;any&#32;destruction&#32;or&#32;shutdown.</emphasis>
00274 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(Clang-&gt;getFrontendOpts().DisableFree)&#32;{
00275 &#32;&#32;&#32;&#32;llvm::BuryPointer(std::move(Clang));
00276 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;!Success;
00277 &#32;&#32;}
00278 
00279 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;!Success;
00280 }
</programlisting>    </section><anchor xml:id="_driver_8cpp_1ac7d9c4a59e9773f938ddff75f14b90a6"/>    <section>
    <title>cc1as_main()</title>
<indexterm><primary>cc1as_main</primary><secondary>driver.cpp</secondary></indexterm>
<indexterm><primary>driver.cpp</primary><secondary>cc1as_main</secondary></indexterm>
<para><computeroutput>int cc1as_main (ArrayRef&lt; const char * &gt; Argv, const char * Argv0, void * MainAddr)</computeroutput></para><para>
Definition at line <link linkend="_cc1as__main_8cpp_source_1l00563">563</link> of file <link linkend="_cc1as__main_8cpp_source">cc1as_main.cpp</link>.</para>
<programlisting>00563 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00564 &#32;&#32;<emphasis role="comment">//&#32;Initialize&#32;targets&#32;and&#32;assembly&#32;printers/parsers.</emphasis>
00565 &#32;&#32;InitializeAllTargetInfos();
00566 &#32;&#32;InitializeAllTargetMCs();
00567 &#32;&#32;InitializeAllAsmParsers();
00568 
00569 &#32;&#32;<emphasis role="comment">//&#32;Construct&#32;our&#32;diagnostic&#32;client.</emphasis>
00570 &#32;&#32;IntrusiveRefCntPtr&lt;DiagnosticOptions&gt;&#32;DiagOpts&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;DiagnosticOptions();
00571 &#32;&#32;TextDiagnosticPrinter&#32;*DiagClient
00572 &#32;&#32;&#32;&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;TextDiagnosticPrinter(errs(),&#32;&amp;*DiagOpts);
00573 &#32;&#32;DiagClient-&gt;setPrefix(<emphasis role="stringliteral">&quot;clang&#32;-cc1as&quot;</emphasis>);
00574 &#32;&#32;IntrusiveRefCntPtr&lt;DiagnosticIDs&gt;&#32;DiagID(<emphasis role="keyword">new</emphasis>&#32;DiagnosticIDs());
00575 &#32;&#32;DiagnosticsEngine&#32;Diags(DiagID,&#32;&amp;*DiagOpts,&#32;DiagClient);
00576 
00577 &#32;&#32;<emphasis role="comment">//&#32;Set&#32;an&#32;error&#32;handler,&#32;so&#32;that&#32;any&#32;LLVM&#32;backend&#32;diagnostics&#32;go&#32;through&#32;our</emphasis>
00578 &#32;&#32;<emphasis role="comment">//&#32;error&#32;handler.</emphasis>
00579 &#32;&#32;ScopedFatalErrorHandler&#32;FatalErrorHandler
00580 &#32;&#32;&#32;&#32;(LLVMErrorHandler,&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">void</emphasis>*<emphasis role="keyword">&gt;</emphasis>(&amp;Diags));
00581 
00582 &#32;&#32;<emphasis role="comment">//&#32;Parse&#32;the&#32;arguments.</emphasis>
00583 &#32;&#32;AssemblerInvocation&#32;Asm;
00584 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!AssemblerInvocation::CreateFromArgs(Asm,&#32;Argv,&#32;Diags))
00585 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;1;
00586 
00587 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(Asm.ShowHelp)&#32;{
00588 &#32;&#32;&#32;&#32;getDriverOptTable().printHelp(
00589 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;llvm::outs(),&#32;<emphasis role="stringliteral">&quot;clang&#32;-cc1as&#32;[options]&#32;file...&quot;</emphasis>,
00590 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;Clang&#32;Integrated&#32;Assembler&quot;</emphasis>,
00591 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*Include=*/</emphasis>driver::options::CC1AsOption,&#32;<emphasis role="comment">/*Exclude=*/</emphasis>0,
00592 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*ShowAllAliases=*/</emphasis><emphasis role="keyword">false</emphasis>);
00593 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
00594 &#32;&#32;}
00595 
00596 &#32;&#32;<emphasis role="comment">//&#32;Honor&#32;-version.</emphasis>
00597 &#32;&#32;<emphasis role="comment">//</emphasis>
00598 &#32;&#32;<emphasis role="comment">//&#32;FIXME:&#32;Use&#32;a&#32;better&#32;-version&#32;message?</emphasis>
00599 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(Asm.ShowVersion)&#32;{
00600 &#32;&#32;&#32;&#32;llvm::cl::PrintVersionMessage();
00601 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
00602 &#32;&#32;}
00603 
00604 &#32;&#32;<emphasis role="comment">//&#32;Honor&#32;-mllvm.</emphasis>
00605 &#32;&#32;<emphasis role="comment">//</emphasis>
00606 &#32;&#32;<emphasis role="comment">//&#32;FIXME:&#32;Remove&#32;this,&#32;one&#32;day.</emphasis>
00607 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!Asm.LLVMArgs.empty())&#32;{
00608 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;NumArgs&#32;=&#32;Asm.LLVMArgs.size();
00609 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;Args&#32;=&#32;std::make_unique&lt;const&#32;char*[]&gt;(NumArgs&#32;+&#32;2);
00610 &#32;&#32;&#32;&#32;Args[0]&#32;=&#32;<emphasis role="stringliteral">&quot;clang&#32;(LLVM&#32;option&#32;parsing)&quot;</emphasis>;
00611 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">unsigned</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;!=&#32;NumArgs;&#32;++i)
00612 &#32;&#32;&#32;&#32;&#32;&#32;Args[i&#32;+&#32;1]&#32;=&#32;Asm.LLVMArgs[i].c_str();
00613 &#32;&#32;&#32;&#32;Args[NumArgs&#32;+&#32;1]&#32;=&#32;<emphasis role="keyword">nullptr</emphasis>;
00614 &#32;&#32;&#32;&#32;llvm::cl::ParseCommandLineOptions(NumArgs&#32;+&#32;1,&#32;Args.get());
00615 &#32;&#32;}
00616 
00617 &#32;&#32;<emphasis role="comment">//&#32;Execute&#32;the&#32;invocation,&#32;unless&#32;there&#32;were&#32;parsing&#32;errors.</emphasis>
00618 &#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;Failed&#32;=&#32;Diags.hasErrorOccurred()&#32;||&#32;ExecuteAssembler(Asm,&#32;Diags);
00619 
00620 &#32;&#32;<emphasis role="comment">//&#32;If&#32;any&#32;timers&#32;were&#32;active&#32;but&#32;haven&apos;t&#32;been&#32;destroyed&#32;yet,&#32;print&#32;their</emphasis>
00621 &#32;&#32;<emphasis role="comment">//&#32;results&#32;now.</emphasis>
00622 &#32;&#32;TimerGroup::printAll(errs());
00623 &#32;&#32;TimerGroup::clearAll();
00624 
00625 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;!!Failed;
00626 }
</programlisting>    </section><anchor xml:id="_driver_8cpp_1a27f0fa14a18bd4a9c735d321f74779d9"/>    <section>
    <title>cc1gen_reproducer_main()</title>
<indexterm><primary>cc1gen_reproducer_main</primary><secondary>driver.cpp</secondary></indexterm>
<indexterm><primary>driver.cpp</primary><secondary>cc1gen_reproducer_main</secondary></indexterm>
<para><computeroutput>int cc1gen_reproducer_main (ArrayRef&lt; const char * &gt; Argv, const char * Argv0, void * MainAddr)</computeroutput></para><para>
Definition at line <link linkend="_cc1gen__reproducer__main_8cpp_source_1l00156">156</link> of file <link linkend="_cc1gen__reproducer__main_8cpp_source">cc1gen_reproducer_main.cpp</link>.</para>
<programlisting>00157 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00158 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(Argv.size()&#32;&lt;&#32;1)&#32;{
00159 &#32;&#32;&#32;&#32;llvm::errs()&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;error:&#32;missing&#32;invocation&#32;file\n&quot;</emphasis>;
00160 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;1;
00161 &#32;&#32;}
00162 &#32;&#32;<emphasis role="comment">//&#32;Parse&#32;the&#32;invocation&#32;descriptor.</emphasis>
00163 &#32;&#32;StringRef&#32;Input&#32;=&#32;Argv[0];
00164 &#32;&#32;llvm::ErrorOr&lt;std::unique_ptr&lt;llvm::MemoryBuffer&gt;&gt;&#32;Buffer&#32;=
00165 &#32;&#32;&#32;&#32;&#32;&#32;llvm::MemoryBuffer::getFile(Input,&#32;<emphasis role="comment">/*IsText=*/</emphasis><emphasis role="keyword">true</emphasis>);
00166 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!Buffer)&#32;{
00167 &#32;&#32;&#32;&#32;llvm::errs()&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;error:&#32;failed&#32;to&#32;read&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;Input&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;:&#32;&quot;</emphasis>
00168 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;Buffer.getError().message()&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;\n&quot;</emphasis>;
00169 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;1;
00170 &#32;&#32;}
00171 &#32;&#32;llvm::yaml::Input&#32;YAML(Buffer.get()-&gt;getBuffer());
00172 &#32;&#32;ClangInvocationInfo&#32;InvocationInfo;
00173 &#32;&#32;YAML&#32;&gt;&gt;&#32;InvocationInfo;
00174 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(Argv.size()&#32;&gt;&#32;1&#32;&amp;&amp;&#32;Argv[1]&#32;==&#32;StringRef(<emphasis role="stringliteral">&quot;-v&quot;</emphasis>))
00175 &#32;&#32;&#32;&#32;InvocationInfo.Dump&#32;=&#32;<emphasis role="keyword">true</emphasis>;
00176 
00177 &#32;&#32;<emphasis role="comment">//&#32;Create&#32;an&#32;invocation&#32;that&#32;will&#32;produce&#32;the&#32;reproducer.</emphasis>
00178 &#32;&#32;std::vector&lt;const&#32;char&#32;*&gt;&#32;DriverArgs;
00179 &#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;&amp;Arg&#32;:&#32;InvocationInfo.Arguments)
00180 &#32;&#32;&#32;&#32;DriverArgs.push_back(Arg.c_str());
00181 &#32;&#32;std::string&#32;Path&#32;=&#32;<link linkend="_cc1gen__reproducer__main_8cpp_1a4ee7e45503dac4f1b4f3604b3c4d8875">GetExecutablePath</link>(Argv0,&#32;<emphasis role="comment">/*CanonicalPrefixes=*/</emphasis><emphasis role="keyword">true</emphasis>);
00182 &#32;&#32;DriverArgs[0]&#32;=&#32;Path.c_str();
00183 &#32;&#32;llvm::Optional&lt;driver::Driver::CompilationDiagnosticReport&gt;&#32;Report&#32;=
00184 &#32;&#32;&#32;&#32;&#32;&#32;generateReproducerForInvocationArguments(DriverArgs,&#32;InvocationInfo);
00185 
00186 &#32;&#32;<emphasis role="comment">//&#32;Emit&#32;the&#32;information&#32;about&#32;the&#32;reproduce&#32;files&#32;to&#32;stdout.</emphasis>
00187 &#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;Result&#32;=&#32;1;
00188 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(Report)&#32;{
00189 &#32;&#32;&#32;&#32;printReproducerInformation(llvm::outs(),&#32;InvocationInfo,&#32;*Report);
00190 &#32;&#32;&#32;&#32;Result&#32;=&#32;0;
00191 &#32;&#32;}
00192 
00193 &#32;&#32;<emphasis role="comment">//&#32;Remove&#32;the&#32;input&#32;file.</emphasis>
00194 &#32;&#32;llvm::sys::fs::remove(Input);
00195 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;Result;
00196 }
</programlisting>    </section><anchor xml:id="_driver_8cpp_1a4ee7e45503dac4f1b4f3604b3c4d8875"/>    <section>
    <title>GetExecutablePath()</title>
<indexterm><primary>GetExecutablePath</primary><secondary>driver.cpp</secondary></indexterm>
<indexterm><primary>driver.cpp</primary><secondary>GetExecutablePath</secondary></indexterm>
<para><computeroutput>std::string GetExecutablePath (const char * Argv0, bool CanonicalPrefixes)</computeroutput></para><para>
Definition at line <link linkend="_driver_8cpp_source_1l00057">57</link> of file <link linkend="_driver_8cpp_source">driver.cpp</link>.</para>
<programlisting>00057 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00058 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!CanonicalPrefixes)&#32;{
00059 &#32;&#32;&#32;&#32;SmallString&lt;128&gt;&#32;ExecutablePath(Argv0);
00060 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Do&#32;a&#32;PATH&#32;lookup&#32;if&#32;Argv0&#32;isn&apos;t&#32;a&#32;valid&#32;path.</emphasis>
00061 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!llvm::sys::fs::exists(ExecutablePath))
00062 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(llvm::ErrorOr&lt;std::string&gt;&#32;P&#32;=
00063 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;llvm::sys::findProgramByName(ExecutablePath))
00064 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ExecutablePath&#32;=&#32;*P;
00065 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::string(ExecutablePath.str());
00066 &#32;&#32;}
00067 
00068 &#32;&#32;<emphasis role="comment">//&#32;This&#32;just&#32;needs&#32;to&#32;be&#32;some&#32;symbol&#32;in&#32;the&#32;binary;&#32;C++&#32;doesn&apos;t</emphasis>
00069 &#32;&#32;<emphasis role="comment">//&#32;allow&#32;taking&#32;the&#32;address&#32;of&#32;::main&#32;however.</emphasis>
00070 &#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;*P&#32;=&#32;(<emphasis role="keywordtype">void</emphasis>*)&#32;(intptr_t)&#32;<link linkend="_driver_8cpp_1a4ee7e45503dac4f1b4f3604b3c4d8875">GetExecutablePath</link>;
00071 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;llvm::sys::fs::getMainExecutable(Argv0,&#32;P);
00072 }
</programlisting><para>
References <link linkend="_driver_8cpp_source_1l00057">GetExecutablePath()</link>.</para>
<para>
Referenced by <link linkend="_driver_8cpp_source_1l00057">GetExecutablePath()</link>.</para>
    </section><anchor xml:id="_driver_8cpp_1ae98fb7c14fb481a1151b423f9d4adb82"/>    <section>
    <title>main()</title>
<indexterm><primary>main</primary><secondary>driver.cpp</secondary></indexterm>
<indexterm><primary>driver.cpp</primary><secondary>main</secondary></indexterm>
<para><computeroutput>int main (int Argc, const char ** Argv)</computeroutput></para><para>
Definition at line <link linkend="_driver_8cpp_source_1l00351">351</link> of file <link linkend="_driver_8cpp_source">driver.cpp</link>.</para>
<programlisting>00351 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00352 &#32;&#32;noteBottomOfStack();
00353 &#32;&#32;llvm::InitLLVM&#32;X(Argc,&#32;Argv);
00354 &#32;&#32;llvm::setBugReportMsg(<emphasis role="stringliteral">&quot;PLEASE&#32;submit&#32;a&#32;bug&#32;report&#32;to&#32;&quot;</emphasis>&#32;BUG_REPORT_URL
00355 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;&#32;and&#32;include&#32;the&#32;crash&#32;backtrace,&#32;preprocessed&#32;&quot;</emphasis>
00356 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;source,&#32;and&#32;associated&#32;run&#32;script.\n&quot;</emphasis>);
00357 &#32;&#32;SmallVector&lt;const&#32;char&#32;*,&#32;256&gt;&#32;Args(Argv,&#32;Argv&#32;+&#32;Argc);
00358 
00359 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(llvm::sys::Process::FixupStandardFileDescriptors())
00360 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;1;
00361 
00362 &#32;&#32;llvm::InitializeAllTargets();
00363 &#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;TargetAndMode&#32;=&#32;ToolChain::getTargetAndModeFromProgramName(Args[0]);
00364 
00365 &#32;&#32;llvm::BumpPtrAllocator&#32;A;
00366 &#32;&#32;llvm::StringSaver&#32;Saver(A);
00367 
00368 &#32;&#32;<emphasis role="comment">//&#32;Parse&#32;response&#32;files&#32;using&#32;the&#32;GNU&#32;syntax,&#32;unless&#32;we&apos;re&#32;in&#32;CL&#32;mode.&#32;There</emphasis>
00369 &#32;&#32;<emphasis role="comment">//&#32;are&#32;two&#32;ways&#32;to&#32;put&#32;clang&#32;in&#32;CL&#32;compatibility&#32;mode:&#32;Args[0]&#32;is&#32;either</emphasis>
00370 &#32;&#32;<emphasis role="comment">//&#32;clang-cl&#32;or&#32;cl,&#32;or&#32;--driver-mode=cl&#32;is&#32;on&#32;the&#32;command&#32;line.&#32;The&#32;normal</emphasis>
00371 &#32;&#32;<emphasis role="comment">//&#32;command&#32;line&#32;parsing&#32;can&apos;t&#32;happen&#32;until&#32;after&#32;response&#32;file&#32;parsing,&#32;so&#32;we</emphasis>
00372 &#32;&#32;<emphasis role="comment">//&#32;have&#32;to&#32;manually&#32;search&#32;for&#32;a&#32;--driver-mode=cl&#32;argument&#32;the&#32;hard&#32;way.</emphasis>
00373 &#32;&#32;<emphasis role="comment">//&#32;Finally,&#32;our&#32;-cc1&#32;tools&#32;don&apos;t&#32;care&#32;which&#32;tokenization&#32;mode&#32;we&#32;use&#32;because</emphasis>
00374 &#32;&#32;<emphasis role="comment">//&#32;response&#32;files&#32;written&#32;by&#32;clang&#32;will&#32;tokenize&#32;the&#32;same&#32;way&#32;in&#32;either&#32;mode.</emphasis>
00375 &#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;ClangCLMode&#32;=&#32;<emphasis role="keyword">false</emphasis>;
00376 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(StringRef(TargetAndMode.DriverMode).equals(<emphasis role="stringliteral">&quot;--driver-mode=cl&quot;</emphasis>)&#32;||
00377 &#32;&#32;&#32;&#32;&#32;&#32;llvm::find_if(Args,&#32;[](<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*F)&#32;{
00378 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;return&#32;F&#32;&amp;&amp;&#32;strcmp(F,&#32;<emphasis role="stringliteral">&quot;--driver-mode=cl&quot;</emphasis>)&#32;==&#32;0;
00379 &#32;&#32;&#32;&#32;&#32;&#32;})&#32;!=&#32;Args.end())&#32;{
00380 &#32;&#32;&#32;&#32;ClangCLMode&#32;=&#32;<emphasis role="keyword">true</emphasis>;
00381 &#32;&#32;}
00382 &#32;&#32;<emphasis role="keyword">enum</emphasis>&#32;{&#32;Default,&#32;POSIX,&#32;Windows&#32;}&#32;RSPQuoting&#32;=&#32;Default;
00383 &#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*F&#32;:&#32;Args)&#32;{
00384 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(strcmp(F,&#32;<emphasis role="stringliteral">&quot;--rsp-quoting=posix&quot;</emphasis>)&#32;==&#32;0)
00385 &#32;&#32;&#32;&#32;&#32;&#32;RSPQuoting&#32;=&#32;POSIX;
00386 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(strcmp(F,&#32;<emphasis role="stringliteral">&quot;--rsp-quoting=windows&quot;</emphasis>)&#32;==&#32;0)
00387 &#32;&#32;&#32;&#32;&#32;&#32;RSPQuoting&#32;=&#32;Windows;
00388 &#32;&#32;}
00389 
00390 &#32;&#32;<emphasis role="comment">//&#32;Determines&#32;whether&#32;we&#32;want&#32;nullptr&#32;markers&#32;in&#32;Args&#32;to&#32;indicate&#32;response</emphasis>
00391 &#32;&#32;<emphasis role="comment">//&#32;files&#32;end-of-lines.&#32;We&#32;only&#32;use&#32;this&#32;for&#32;the&#32;/LINK&#32;driver&#32;argument&#32;with</emphasis>
00392 &#32;&#32;<emphasis role="comment">//&#32;clang-cl.exe&#32;on&#32;Windows.</emphasis>
00393 &#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;MarkEOLs&#32;=&#32;ClangCLMode;
00394 
00395 &#32;&#32;llvm::cl::TokenizerCallback&#32;Tokenizer;
00396 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(RSPQuoting&#32;==&#32;Windows&#32;||&#32;(RSPQuoting&#32;==&#32;Default&#32;&amp;&amp;&#32;ClangCLMode))
00397 &#32;&#32;&#32;&#32;Tokenizer&#32;=&#32;&amp;llvm::cl::TokenizeWindowsCommandLine;
00398 &#32;&#32;<emphasis role="keywordflow">else</emphasis>
00399 &#32;&#32;&#32;&#32;Tokenizer&#32;=&#32;&amp;llvm::cl::TokenizeGNUCommandLine;
00400 
00401 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(MarkEOLs&#32;&amp;&amp;&#32;Args.size()&#32;&gt;&#32;1&#32;&amp;&amp;&#32;StringRef(Args[1]).startswith(<emphasis role="stringliteral">&quot;-cc1&quot;</emphasis>))
00402 &#32;&#32;&#32;&#32;MarkEOLs&#32;=&#32;<emphasis role="keyword">false</emphasis>;
00403 &#32;&#32;llvm::cl::ExpandResponseFiles(Saver,&#32;Tokenizer,&#32;Args,&#32;MarkEOLs);
00404 
00405 &#32;&#32;<emphasis role="comment">//&#32;Handle&#32;-cc1&#32;integrated&#32;tools,&#32;even&#32;if&#32;-cc1&#32;was&#32;expanded&#32;from&#32;a&#32;response</emphasis>
00406 &#32;&#32;<emphasis role="comment">//&#32;file.</emphasis>
00407 &#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;FirstArg&#32;=&#32;std::find_if(Args.begin()&#32;+&#32;1,&#32;Args.end(),
00408 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[](<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*A)&#32;{&#32;return&#32;A&#32;!=&#32;nullptr;&#32;});
00409 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(FirstArg&#32;!=&#32;Args.end()&#32;&amp;&amp;&#32;StringRef(*FirstArg).startswith(<emphasis role="stringliteral">&quot;-cc1&quot;</emphasis>))&#32;{
00410 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;If&#32;-cc1&#32;came&#32;from&#32;a&#32;response&#32;file,&#32;remove&#32;the&#32;EOL&#32;sentinels.</emphasis>
00411 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(MarkEOLs)&#32;{
00412 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;newEnd&#32;=&#32;std::remove(Args.begin(),&#32;Args.end(),&#32;<emphasis role="keyword">nullptr</emphasis>);
00413 &#32;&#32;&#32;&#32;&#32;&#32;Args.resize(newEnd&#32;-&#32;Args.begin());
00414 &#32;&#32;&#32;&#32;}
00415 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;ExecuteCC1Tool(Args);
00416 &#32;&#32;}
00417 
00418 &#32;&#32;<emphasis role="comment">//&#32;Handle&#32;options&#32;that&#32;need&#32;handling&#32;before&#32;the&#32;real&#32;command&#32;line&#32;parsing&#32;in</emphasis>
00419 &#32;&#32;<emphasis role="comment">//&#32;Driver::BuildCompilation()</emphasis>
00420 &#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;CanonicalPrefixes&#32;=&#32;<emphasis role="keyword">true</emphasis>;
00421 &#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;i&#32;=&#32;1,&#32;size&#32;=&#32;Args.size();&#32;i&#32;&lt;&#32;size;&#32;++i)&#32;{
00422 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Skip&#32;end-of-line&#32;response&#32;file&#32;markers</emphasis>
00423 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(Args[i]&#32;==&#32;<emphasis role="keyword">nullptr</emphasis>)
00424 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">continue</emphasis>;
00425 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(StringRef(Args[i])&#32;==&#32;<emphasis role="stringliteral">&quot;-no-canonical-prefixes&quot;</emphasis>)&#32;{
00426 &#32;&#32;&#32;&#32;&#32;&#32;CanonicalPrefixes&#32;=&#32;<emphasis role="keyword">false</emphasis>;
00427 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
00428 &#32;&#32;&#32;&#32;}
00429 &#32;&#32;}
00430 
00431 &#32;&#32;<emphasis role="comment">//&#32;Handle&#32;CL&#32;and&#32;_CL_&#32;which&#32;permits&#32;additional&#32;command&#32;line&#32;options&#32;to&#32;be</emphasis>
00432 &#32;&#32;<emphasis role="comment">//&#32;prepended&#32;or&#32;appended.</emphasis>
00433 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(ClangCLMode)&#32;{
00434 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Arguments&#32;in&#32;&quot;CL&quot;&#32;are&#32;prepended.</emphasis>
00435 &#32;&#32;&#32;&#32;llvm::Optional&lt;std::string&gt;&#32;OptCL&#32;=&#32;llvm::sys::Process::GetEnv(<emphasis role="stringliteral">&quot;CL&quot;</emphasis>);
00436 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(OptCL.hasValue())&#32;{
00437 &#32;&#32;&#32;&#32;&#32;&#32;SmallVector&lt;const&#32;char&#32;*,&#32;8&gt;&#32;PrependedOpts;
00438 &#32;&#32;&#32;&#32;&#32;&#32;getCLEnvVarOptions(OptCL.getValue(),&#32;Saver,&#32;PrependedOpts);
00439 
00440 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Insert&#32;right&#32;after&#32;the&#32;program&#32;name&#32;to&#32;prepend&#32;to&#32;the&#32;argument&#32;list.</emphasis>
00441 &#32;&#32;&#32;&#32;&#32;&#32;Args.insert(Args.begin()&#32;+&#32;1,&#32;PrependedOpts.begin(),&#32;PrependedOpts.end());
00442 &#32;&#32;&#32;&#32;}
00443 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Arguments&#32;in&#32;&quot;_CL_&quot;&#32;are&#32;appended.</emphasis>
00444 &#32;&#32;&#32;&#32;llvm::Optional&lt;std::string&gt;&#32;Opt_CL_&#32;=&#32;llvm::sys::Process::GetEnv(<emphasis role="stringliteral">&quot;_CL_&quot;</emphasis>);
00445 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(Opt_CL_.hasValue())&#32;{
00446 &#32;&#32;&#32;&#32;&#32;&#32;SmallVector&lt;const&#32;char&#32;*,&#32;8&gt;&#32;AppendedOpts;
00447 &#32;&#32;&#32;&#32;&#32;&#32;getCLEnvVarOptions(Opt_CL_.getValue(),&#32;Saver,&#32;AppendedOpts);
00448 
00449 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Insert&#32;at&#32;the&#32;end&#32;of&#32;the&#32;argument&#32;list&#32;to&#32;append.</emphasis>
00450 &#32;&#32;&#32;&#32;&#32;&#32;Args.append(AppendedOpts.begin(),&#32;AppendedOpts.end());
00451 &#32;&#32;&#32;&#32;}
00452 &#32;&#32;}
00453 
00454 &#32;&#32;std::set&lt;std::string&gt;&#32;SavedStrings;
00455 &#32;&#32;<emphasis role="comment">//&#32;Handle&#32;CCC_OVERRIDE_OPTIONS,&#32;used&#32;for&#32;editing&#32;a&#32;command&#32;line&#32;behind&#32;the</emphasis>
00456 &#32;&#32;<emphasis role="comment">//&#32;scenes.</emphasis>
00457 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*OverrideStr&#32;=&#32;::getenv(<emphasis role="stringliteral">&quot;CCC_OVERRIDE_OPTIONS&quot;</emphasis>))&#32;{
00458 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;FIXME:&#32;Driver&#32;shouldn&apos;t&#32;take&#32;extra&#32;initial&#32;argument.</emphasis>
00459 &#32;&#32;&#32;&#32;ApplyQAOverride(Args,&#32;OverrideStr,&#32;SavedStrings);
00460 &#32;&#32;}
00461 
00462 &#32;&#32;std::string&#32;Path&#32;=&#32;<link linkend="_driver_8cpp_1a4ee7e45503dac4f1b4f3604b3c4d8875">GetExecutablePath</link>(Args[0],&#32;CanonicalPrefixes);
00463 
00464 &#32;&#32;<emphasis role="comment">//&#32;Whether&#32;the&#32;cc1&#32;tool&#32;should&#32;be&#32;called&#32;inside&#32;the&#32;current&#32;process,&#32;or&#32;if&#32;we</emphasis>
00465 &#32;&#32;<emphasis role="comment">//&#32;should&#32;spawn&#32;a&#32;new&#32;clang&#32;subprocess&#32;(old&#32;behavior).</emphasis>
00466 &#32;&#32;<emphasis role="comment">//&#32;Not&#32;having&#32;an&#32;additional&#32;process&#32;saves&#32;some&#32;execution&#32;time&#32;of&#32;Windows,</emphasis>
00467 &#32;&#32;<emphasis role="comment">//&#32;and&#32;makes&#32;debugging&#32;and&#32;profiling&#32;easier.</emphasis>
00468 &#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;UseNewCC1Process;
00469 
00470 &#32;&#32;IntrusiveRefCntPtr&lt;DiagnosticOptions&gt;&#32;DiagOpts&#32;=
00471 &#32;&#32;&#32;&#32;&#32;&#32;CreateAndPopulateDiagOpts(Args,&#32;UseNewCC1Process);
00472 
00473 &#32;&#32;TextDiagnosticPrinter&#32;*DiagClient
00474 &#32;&#32;&#32;&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;TextDiagnosticPrinter(llvm::errs(),&#32;&amp;*DiagOpts);
00475 &#32;&#32;FixupDiagPrefixExeName(DiagClient,&#32;Path);
00476 
00477 &#32;&#32;IntrusiveRefCntPtr&lt;DiagnosticIDs&gt;&#32;DiagID(<emphasis role="keyword">new</emphasis>&#32;DiagnosticIDs());
00478 
00479 &#32;&#32;DiagnosticsEngine&#32;Diags(DiagID,&#32;&amp;*DiagOpts,&#32;DiagClient);
00480 
00481 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!DiagOpts-&gt;DiagnosticSerializationFile.empty())&#32;{
00482 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;SerializedConsumer&#32;=
00483 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;clang::serialized_diags::create(DiagOpts-&gt;DiagnosticSerializationFile,
00484 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;*DiagOpts,&#32;<emphasis role="comment">/*MergeChildRecords=*/</emphasis><emphasis role="keyword">true</emphasis>);
00485 &#32;&#32;&#32;&#32;Diags.setClient(<emphasis role="keyword">new</emphasis>&#32;ChainedDiagnosticConsumer(
00486 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Diags.takeClient(),&#32;std::move(SerializedConsumer)));
00487 &#32;&#32;}
00488 
00489 &#32;&#32;ProcessWarningOptions(Diags,&#32;*DiagOpts,&#32;<emphasis role="comment">/*ReportDiags=*/</emphasis><emphasis role="keyword">false</emphasis>);
00490 
00491 &#32;&#32;Driver&#32;TheDriver(Path,&#32;llvm::sys::getDefaultTargetTriple(),&#32;Diags);
00492 &#32;&#32;SetInstallDir(Args,&#32;TheDriver,&#32;CanonicalPrefixes);
00493 &#32;&#32;TheDriver.setTargetAndMode(TargetAndMode);
00494 
00495 &#32;&#32;insertTargetAndModeArgs(TargetAndMode,&#32;Args,&#32;SavedStrings);
00496 
00497 &#32;&#32;SetBackdoorDriverOutputsFromEnvVars(TheDriver);
00498 
00499 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!UseNewCC1Process)&#32;{
00500 &#32;&#32;&#32;&#32;TheDriver.CC1Main&#32;=&#32;&amp;ExecuteCC1Tool;
00501 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Ensure&#32;the&#32;CC1Command&#32;actually&#32;catches&#32;cc1&#32;crashes</emphasis>
00502 &#32;&#32;&#32;&#32;llvm::CrashRecoveryContext::Enable();
00503 &#32;&#32;}
00504 
00505 &#32;&#32;std::unique_ptr&lt;Compilation&gt;&#32;C(TheDriver.BuildCompilation(Args));
00506 &#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;Res&#32;=&#32;1;
00507 &#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;IsCrash&#32;=&#32;<emphasis role="keyword">false</emphasis>;
00508 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(C&#32;&amp;&amp;&#32;!C-&gt;containsError())&#32;{
00509 &#32;&#32;&#32;&#32;SmallVector&lt;std::pair&lt;int,&#32;const&#32;Command&#32;*&gt;,&#32;4&gt;&#32;FailingCommands;
00510 &#32;&#32;&#32;&#32;Res&#32;=&#32;TheDriver.ExecuteCompilation(*C,&#32;FailingCommands);
00511 
00512 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Force&#32;a&#32;crash&#32;to&#32;test&#32;the&#32;diagnostics.</emphasis>
00513 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(TheDriver.GenReproducer)&#32;{
00514 &#32;&#32;&#32;&#32;&#32;&#32;Diags.Report(diag::err_drv_force_crash)
00515 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;!::getenv(<emphasis role="stringliteral">&quot;FORCE_CLANG_DIAGNOSTICS_CRASH&quot;</emphasis>);
00516 
00517 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Pretend&#32;that&#32;every&#32;command&#32;failed.</emphasis>
00518 &#32;&#32;&#32;&#32;&#32;&#32;FailingCommands.clear();
00519 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;&amp;J&#32;:&#32;C-&gt;getJobs())
00520 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;Command&#32;*C&#32;=&#32;dyn_cast&lt;Command&gt;(&amp;J))
00521 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;FailingCommands.push_back(std::make_pair(-1,&#32;C));
00522 
00523 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Print&#32;the&#32;bug&#32;report&#32;message&#32;that&#32;would&#32;be&#32;printed&#32;if&#32;we&#32;did&#32;actually</emphasis>
00524 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;crash,&#32;but&#32;only&#32;if&#32;we&apos;re&#32;crashing&#32;due&#32;to&#32;FORCE_CLANG_DIAGNOSTICS_CRASH.</emphasis>
00525 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(::getenv(<emphasis role="stringliteral">&quot;FORCE_CLANG_DIAGNOSTICS_CRASH&quot;</emphasis>))
00526 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;llvm::dbgs()&#32;&lt;&lt;&#32;llvm::getBugReportMsg();
00527 &#32;&#32;&#32;&#32;}
00528 
00529 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;&amp;P&#32;:&#32;FailingCommands)&#32;{
00530 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;CommandRes&#32;=&#32;P.first;
00531 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;Command&#32;*FailingCommand&#32;=&#32;P.second;
00532 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!Res)
00533 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Res&#32;=&#32;CommandRes;
00534 
00535 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;If&#32;result&#32;status&#32;is&#32;&lt;&#32;0,&#32;then&#32;the&#32;driver&#32;command&#32;signalled&#32;an&#32;error.</emphasis>
00536 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;If&#32;result&#32;status&#32;is&#32;70,&#32;then&#32;the&#32;driver&#32;command&#32;reported&#32;a&#32;fatal&#32;error.</emphasis>
00537 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;On&#32;Windows,&#32;abort&#32;will&#32;return&#32;an&#32;exit&#32;code&#32;of&#32;3.&#32;&#32;In&#32;these&#32;cases,</emphasis>
00538 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;generate&#32;additional&#32;diagnostic&#32;information&#32;if&#32;possible.</emphasis>
00539 &#32;&#32;&#32;&#32;&#32;&#32;IsCrash&#32;=&#32;CommandRes&#32;&lt;&#32;0&#32;||&#32;CommandRes&#32;==&#32;70;
00540 <emphasis role="preprocessor">#ifdef&#32;_WIN32</emphasis>
00541 &#32;&#32;&#32;&#32;&#32;&#32;IsCrash&#32;|=&#32;CommandRes&#32;==&#32;3;
00542 <emphasis role="preprocessor">#endif</emphasis>
00543 <emphasis role="preprocessor">#if&#32;LLVM_ON_UNIX</emphasis>
00544 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;When&#32;running&#32;in&#32;integrated-cc1&#32;mode,&#32;the&#32;CrashRecoveryContext&#32;returns</emphasis>
00545 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;the&#32;same&#32;codes&#32;as&#32;if&#32;the&#32;program&#32;crashed.&#32;See&#32;section&#32;&quot;Exit&#32;Status&#32;for</emphasis>
00546 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Commands&quot;:</emphasis>
00547 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;https://pubs.opengroup.org/onlinepubs/9699919799/xrat/V4_xcu_chap02.html</emphasis>
00548 &#32;&#32;&#32;&#32;&#32;&#32;IsCrash&#32;|=&#32;CommandRes&#32;&gt;&#32;128;
00549 <emphasis role="preprocessor">#endif</emphasis>
00550 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(IsCrash)&#32;{
00551 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;TheDriver.generateCompilationDiagnostics(*C,&#32;*FailingCommand);
00552 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
00553 &#32;&#32;&#32;&#32;&#32;&#32;}
00554 &#32;&#32;&#32;&#32;}
00555 &#32;&#32;}
00556 
00557 &#32;&#32;Diags.getClient()-&gt;finish();
00558 
00559 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!UseNewCC1Process&#32;&amp;&amp;&#32;IsCrash)&#32;{
00560 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;When&#32;crashing&#32;in&#32;-fintegrated-cc1&#32;mode,&#32;bury&#32;the&#32;timer&#32;pointers,&#32;because</emphasis>
00561 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;the&#32;internal&#32;linked&#32;list&#32;might&#32;point&#32;to&#32;already&#32;released&#32;stack&#32;frames.</emphasis>
00562 &#32;&#32;&#32;&#32;llvm::BuryPointer(llvm::TimerGroup::aquireDefaultGroup());
00563 &#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
00564 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;If&#32;any&#32;timers&#32;were&#32;active&#32;but&#32;haven&apos;t&#32;been&#32;destroyed&#32;yet,&#32;print&#32;their</emphasis>
00565 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;results&#32;now.&#32;&#32;This&#32;happens&#32;in&#32;-disable-free&#32;mode.</emphasis>
00566 &#32;&#32;&#32;&#32;llvm::TimerGroup::printAll(llvm::errs());
00567 &#32;&#32;&#32;&#32;llvm::TimerGroup::clearAll();
00568 &#32;&#32;}
00569 
00570 <emphasis role="preprocessor">#ifdef&#32;_WIN32</emphasis>
00571 &#32;&#32;<emphasis role="comment">//&#32;Exit&#32;status&#32;should&#32;not&#32;be&#32;negative&#32;on&#32;Win32,&#32;unless&#32;abnormal&#32;termination.</emphasis>
00572 &#32;&#32;<emphasis role="comment">//&#32;Once&#32;abnormal&#32;termination&#32;was&#32;caught,&#32;negative&#32;status&#32;should&#32;not&#32;be</emphasis>
00573 &#32;&#32;<emphasis role="comment">//&#32;propagated.</emphasis>
00574 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(Res&#32;&lt;&#32;0)
00575 &#32;&#32;&#32;&#32;Res&#32;=&#32;1;
00576 <emphasis role="preprocessor">#endif</emphasis>
00577 
00578 &#32;&#32;<emphasis role="comment">//&#32;If&#32;we&#32;have&#32;multiple&#32;failing&#32;commands,&#32;we&#32;return&#32;the&#32;result&#32;of&#32;the&#32;first</emphasis>
00579 &#32;&#32;<emphasis role="comment">//&#32;failing&#32;command.</emphasis>
00580 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;Res;
00581 }
</programlisting></section>
</section>
</section>
