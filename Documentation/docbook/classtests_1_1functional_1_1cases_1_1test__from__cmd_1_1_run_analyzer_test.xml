<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_classtests_1_1functional_1_1cases_1_1test__from__cmd_1_1_run_analyzer_test" xml:lang="en-US">
<title>tests.functional.cases.test_from_cmd.RunAnalyzerTest Class Reference</title>
<indexterm><primary>tests.functional.cases.test_from_cmd.RunAnalyzerTest</primary></indexterm>
<para>Inheritance diagram for tests.functional.cases.test_from_cmd.RunAnalyzerTest:    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="classtests_1_1functional_1_1cases_1_1test__from__cmd_1_1_run_analyzer_test.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
<simplesect>
    <title>Public Member Functions    </title>
        <itemizedlist>
            <listitem><para>def <link linkend="_classtests_1_1functional_1_1cases_1_1test__from__cmd_1_1_run_analyzer_test_1a8a026672a5e1a3aaa8527917e8875a8b">test_interposition_works</link> (self)</para>
</listitem>
            <listitem><para>def <link linkend="_classtests_1_1functional_1_1cases_1_1test__from__cmd_1_1_run_analyzer_test_1a32af4113170c49fdc063caf7e1b04564">test_intercept_wrapper_works</link> (self)</para>
</listitem>
            <listitem><para>def <link linkend="_classtests_1_1functional_1_1cases_1_1test__from__cmd_1_1_run_analyzer_test_1ab4c2e28d293c42f4ac0449025679deb0">test_intercept_library_works</link> (self)</para>
</listitem>
            <listitem><para>def <link linkend="_classtests_1_1functional_1_1cases_1_1test__from__cmd_1_1_run_analyzer_test_1a584a2f583d3e7d2ed82b424d49782051">test_interposition_cc_works</link> (self)</para>
</listitem>
            <listitem><para>def <link linkend="_classtests_1_1functional_1_1cases_1_1test__from__cmd_1_1_run_analyzer_test_1a432b09ae7380e6297a3dd674e0054517">test_interposition_cxx_works</link> (self)</para>
</listitem>
            <listitem><para>def <link linkend="_classtests_1_1functional_1_1cases_1_1test__from__cmd_1_1_run_analyzer_test_1aa104bfcd69726f59ae988af14bb7a75c">test_intercept_cc_works</link> (self)</para>
</listitem>
            <listitem><para>def <link linkend="_classtests_1_1functional_1_1cases_1_1test__from__cmd_1_1_run_analyzer_test_1a9c5ed558b60debcb930ea7985c920f27">test_intercept_cxx_works</link> (self)</para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Static Public Member Functions    </title>
        <itemizedlist>
            <listitem><para>def <link linkend="_classtests_1_1functional_1_1cases_1_1test__from__cmd_1_1_run_analyzer_test_1a207efb0c667ae6478369457cdbcbc5f7">get_plist_count</link> (directory)</para>
</listitem>
            <listitem><para>def <link linkend="_classtests_1_1functional_1_1cases_1_1test__from__cmd_1_1_run_analyzer_test_1a3525749dd4b8bedf2e68ef06af0bdf56">compile_empty_source_file</link> (target_dir, is_cxx)</para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Detailed Description</title>
<para>
Definition at line <link linkend="_test__from__cmd_8py_source_1l00042">42</link> of file <link linkend="_test__from__cmd_8py_source">test_from_cmd.py</link>.</para>
</section>
<section>
<title>Member Function Documentation</title>
<anchor xml:id="_classtests_1_1functional_1_1cases_1_1test__from__cmd_1_1_run_analyzer_test_1a3525749dd4b8bedf2e68ef06af0bdf56"/>    <section>
    <title>compile_empty_source_file()</title>
<indexterm><primary>compile_empty_source_file</primary><secondary>tests.functional.cases.test_from_cmd.RunAnalyzerTest</secondary></indexterm>
<indexterm><primary>tests.functional.cases.test_from_cmd.RunAnalyzerTest</primary><secondary>compile_empty_source_file</secondary></indexterm>
<para><computeroutput>def tests.functional.cases.test_from_cmd.RunAnalyzerTest.compile_empty_source_file ( target_dir,  is_cxx)<computeroutput>[static]</computeroutput></computeroutput></para><para>
Definition at line <link linkend="_test__from__cmd_8py_source_1l00080">80</link> of file <link linkend="_test__from__cmd_8py_source">test_from_cmd.py</link>.</para>
<programlisting>00080 &#32;&#32;&#32;&#32;<emphasis role="keyword">def&#32;</emphasis>compile_empty_source_file(target_dir,&#32;is_cxx):
00081 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;compiler&#32;=&#32;<emphasis role="stringliteral">&apos;$CXX&apos;</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;is_cxx&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="stringliteral">&apos;$CC&apos;</emphasis>
00082 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;src_file_name&#32;=&#32;<emphasis role="stringliteral">&apos;test.cxx&apos;</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;is_cxx&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="stringliteral">&apos;test.c&apos;</emphasis>
00083 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;src_file&#32;=&#32;os.path.join(target_dir,&#32;src_file_name)
00084 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;obj_file&#32;=&#32;os.path.join(target_dir,&#32;<emphasis role="stringliteral">&apos;test.o&apos;</emphasis>)
00085 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacetests_1_1functional_1_1cases_1a329bfe4766e9dade55f5b4e0ece589e1">create_empty_file</link>(src_file)
00086 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;command&#32;=&#32;<emphasis role="stringliteral">&apos;&#32;&apos;</emphasis>.join([compiler,&#32;<emphasis role="stringliteral">&apos;-c&apos;</emphasis>,&#32;src_file,&#32;<emphasis role="stringliteral">&apos;-o&apos;</emphasis>,&#32;obj_file])
00087 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;[<emphasis role="stringliteral">&apos;sh&apos;</emphasis>,&#32;<emphasis role="stringliteral">&apos;-c&apos;</emphasis>,&#32;command]
00088 
</programlisting><para>
References <link linkend="_tests_2functional_2cases_2____init_____8py_source_1l00068">tests.functional.cases.create_empty_file()</link>.</para>
<para>
Referenced by <link linkend="_test__from__cmd_8py_source_1l00103">tests.functional.cases.test_from_cmd.RunAnalyzerTest.test_intercept_cc_works()</link>, <link linkend="_test__from__cmd_8py_source_1l00111">tests.functional.cases.test_from_cmd.RunAnalyzerTest.test_intercept_cxx_works()</link>, <link linkend="_test__from__cmd_8py_source_1l00089">tests.functional.cases.test_from_cmd.RunAnalyzerTest.test_interposition_cc_works()</link>, and <link linkend="_test__from__cmd_8py_source_1l00096">tests.functional.cases.test_from_cmd.RunAnalyzerTest.test_interposition_cxx_works()</link>.</para>
    </section><anchor xml:id="_classtests_1_1functional_1_1cases_1_1test__from__cmd_1_1_run_analyzer_test_1a207efb0c667ae6478369457cdbcbc5f7"/>    <section>
    <title>get_plist_count()</title>
<indexterm><primary>get_plist_count</primary><secondary>tests.functional.cases.test_from_cmd.RunAnalyzerTest</secondary></indexterm>
<indexterm><primary>tests.functional.cases.test_from_cmd.RunAnalyzerTest</primary><secondary>get_plist_count</secondary></indexterm>
<para><computeroutput>def tests.functional.cases.test_from_cmd.RunAnalyzerTest.get_plist_count ( directory)<computeroutput>[static]</computeroutput></computeroutput></para><para>
Definition at line <link linkend="_test__from__cmd_8py_source_1l00045">45</link> of file <link linkend="_test__from__cmd_8py_source">test_from_cmd.py</link>.</para>
<programlisting>00045 &#32;&#32;&#32;&#32;<emphasis role="keyword">def&#32;</emphasis>get_plist_count(directory):
00046 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;len(glob.glob(os.path.join(directory,&#32;<emphasis role="stringliteral">&apos;report-*.plist&apos;</emphasis>)))
00047 
</programlisting><para>
Referenced by <link linkend="_test__from__cdb_8py_source_1l00109">tests.functional.cases.test_from_cdb.OutputFormatTest.test_default_only_creates_html_report()</link>, <link linkend="_test__from__cmd_8py_source_1l00103">tests.functional.cases.test_from_cmd.RunAnalyzerTest.test_intercept_cc_works()</link>, <link linkend="_test__from__cmd_8py_source_1l00111">tests.functional.cases.test_from_cmd.RunAnalyzerTest.test_intercept_cxx_works()</link>, <link linkend="_test__from__cmd_8py_source_1l00069">tests.functional.cases.test_from_cmd.RunAnalyzerTest.test_intercept_library_works()</link>, <link linkend="_test__from__cmd_8py_source_1l00058">tests.functional.cases.test_from_cmd.RunAnalyzerTest.test_intercept_wrapper_works()</link>, <link linkend="_test__from__cmd_8py_source_1l00089">tests.functional.cases.test_from_cmd.RunAnalyzerTest.test_interposition_cc_works()</link>, <link linkend="_test__from__cmd_8py_source_1l00096">tests.functional.cases.test_from_cmd.RunAnalyzerTest.test_interposition_cxx_works()</link>, <link linkend="_test__from__cmd_8py_source_1l00048">tests.functional.cases.test_from_cmd.RunAnalyzerTest.test_interposition_works()</link>, <link linkend="_test__from__cdb_8py_source_1l00119">tests.functional.cases.test_from_cdb.OutputFormatTest.test_plist_and_html_creates_html_and_plist_reports()</link>, <link linkend="_test__from__cdb_8py_source_1l00129">tests.functional.cases.test_from_cdb.OutputFormatTest.test_plist_only_creates_plist_report()</link>, <link linkend="_test__from__cdb_8py_source_1l00151">tests.functional.cases.test_from_cdb.OutputFormatTest.test_sarif_and_html_creates_sarif_and_html_reports()</link>, and <link linkend="_test__from__cdb_8py_source_1l00139">tests.functional.cases.test_from_cdb.OutputFormatTest.test_sarif_only_creates_sarif_result()</link>.</para>
    </section><anchor xml:id="_classtests_1_1functional_1_1cases_1_1test__from__cmd_1_1_run_analyzer_test_1aa104bfcd69726f59ae988af14bb7a75c"/>    <section>
    <title>test_intercept_cc_works()</title>
<indexterm><primary>test_intercept_cc_works</primary><secondary>tests.functional.cases.test_from_cmd.RunAnalyzerTest</secondary></indexterm>
<indexterm><primary>tests.functional.cases.test_from_cmd.RunAnalyzerTest</primary><secondary>test_intercept_cc_works</secondary></indexterm>
<para><computeroutput>def tests.functional.cases.test_from_cmd.RunAnalyzerTest.test_intercept_cc_works ( self)</computeroutput></para><para>
Definition at line <link linkend="_test__from__cmd_8py_source_1l00103">103</link> of file <link linkend="_test__from__cmd_8py_source">test_from_cmd.py</link>.</para>
<programlisting>00103 &#32;&#32;&#32;&#32;<emphasis role="keyword">def&#32;</emphasis>test_intercept_cc_works(self):
00104 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">with</emphasis>&#32;<link linkend="_namespacelibear_1a44657565063241a3d383ec724243c023">libear.TemporaryDirectory</link>()&#32;<emphasis role="keyword">as</emphasis>&#32;tmpdir:
00105 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;outdir&#32;=&#32;<link linkend="_namespacetests_1_1functional_1_1cases_1a8d11835cf833f6de4ac834c961dcb01e">check_call_and_report</link>(
00106 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[<emphasis role="stringliteral">&apos;scan-build-py&apos;</emphasis>,&#32;<emphasis role="stringliteral">&apos;--plist&apos;</emphasis>,&#32;<emphasis role="stringliteral">&apos;-o&apos;</emphasis>,&#32;tmpdir,&#32;<emphasis role="stringliteral">&apos;--override-compiler&apos;</emphasis>,
00107 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&apos;--intercept-first&apos;</emphasis>],
00108 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;self.compile_empty_source_file(tmpdir,&#32;<emphasis role="keyword">False</emphasis>))
00109 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;self.assertEqual(self.get_plist_count(outdir),&#32;1)
00110 
</programlisting><para>
References <link linkend="_tests_2functional_2cases_2____init_____8py_source_1l00059">tests.functional.cases.check_call_and_report()</link>, <link linkend="_test__from__cmd_8py_source_1l00080">tests.functional.cases.test_from_cmd.RunAnalyzerTest.compile_empty_source_file()</link>, <link linkend="_test__from__cdb_8py_source_1l00102">tests.functional.cases.test_from_cdb.OutputFormatTest.get_plist_count()</link>, <link linkend="_test__from__cmd_8py_source_1l00045">tests.functional.cases.test_from_cmd.RunAnalyzerTest.get_plist_count()</link>, and <link linkend="_lib_2libear_2____init_____8py_source_1l00070">libear.TemporaryDirectory()</link>.</para>
    </section><anchor xml:id="_classtests_1_1functional_1_1cases_1_1test__from__cmd_1_1_run_analyzer_test_1a9c5ed558b60debcb930ea7985c920f27"/>    <section>
    <title>test_intercept_cxx_works()</title>
<indexterm><primary>test_intercept_cxx_works</primary><secondary>tests.functional.cases.test_from_cmd.RunAnalyzerTest</secondary></indexterm>
<indexterm><primary>tests.functional.cases.test_from_cmd.RunAnalyzerTest</primary><secondary>test_intercept_cxx_works</secondary></indexterm>
<para><computeroutput>def tests.functional.cases.test_from_cmd.RunAnalyzerTest.test_intercept_cxx_works ( self)</computeroutput></para><para>
Definition at line <link linkend="_test__from__cmd_8py_source_1l00111">111</link> of file <link linkend="_test__from__cmd_8py_source">test_from_cmd.py</link>.</para>
<programlisting>00111 &#32;&#32;&#32;&#32;<emphasis role="keyword">def&#32;</emphasis>test_intercept_cxx_works(self):
00112 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">with</emphasis>&#32;<link linkend="_namespacelibear_1a44657565063241a3d383ec724243c023">libear.TemporaryDirectory</link>()&#32;<emphasis role="keyword">as</emphasis>&#32;tmpdir:
00113 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;outdir&#32;=&#32;<link linkend="_namespacetests_1_1functional_1_1cases_1a8d11835cf833f6de4ac834c961dcb01e">check_call_and_report</link>(
00114 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[<emphasis role="stringliteral">&apos;scan-build-py&apos;</emphasis>,&#32;<emphasis role="stringliteral">&apos;--plist&apos;</emphasis>,&#32;<emphasis role="stringliteral">&apos;-o&apos;</emphasis>,&#32;tmpdir,&#32;<emphasis role="stringliteral">&apos;--override-compiler&apos;</emphasis>,
00115 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&apos;--intercept-first&apos;</emphasis>],
00116 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;self.compile_empty_source_file(tmpdir,&#32;<emphasis role="keyword">True</emphasis>))
00117 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;self.assertEqual(self.get_plist_count(outdir),&#32;1)
</programlisting><para>
References <link linkend="_tests_2functional_2cases_2____init_____8py_source_1l00059">tests.functional.cases.check_call_and_report()</link>, <link linkend="_test__from__cmd_8py_source_1l00080">tests.functional.cases.test_from_cmd.RunAnalyzerTest.compile_empty_source_file()</link>, <link linkend="_test__from__cdb_8py_source_1l00102">tests.functional.cases.test_from_cdb.OutputFormatTest.get_plist_count()</link>, <link linkend="_test__from__cmd_8py_source_1l00045">tests.functional.cases.test_from_cmd.RunAnalyzerTest.get_plist_count()</link>, and <link linkend="_lib_2libear_2____init_____8py_source_1l00070">libear.TemporaryDirectory()</link>.</para>
    </section><anchor xml:id="_classtests_1_1functional_1_1cases_1_1test__from__cmd_1_1_run_analyzer_test_1ab4c2e28d293c42f4ac0449025679deb0"/>    <section>
    <title>test_intercept_library_works()</title>
<indexterm><primary>test_intercept_library_works</primary><secondary>tests.functional.cases.test_from_cmd.RunAnalyzerTest</secondary></indexterm>
<indexterm><primary>tests.functional.cases.test_from_cmd.RunAnalyzerTest</primary><secondary>test_intercept_library_works</secondary></indexterm>
<para><computeroutput>def tests.functional.cases.test_from_cmd.RunAnalyzerTest.test_intercept_library_works ( self)</computeroutput></para><para>
Definition at line <link linkend="_test__from__cmd_8py_source_1l00069">69</link> of file <link linkend="_test__from__cmd_8py_source">test_from_cmd.py</link>.</para>
<programlisting>00069 &#32;&#32;&#32;&#32;<emphasis role="keyword">def&#32;</emphasis>test_intercept_library_works(self):
00070 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">with</emphasis>&#32;<link linkend="_namespacelibear_1a44657565063241a3d383ec724243c023">libear.TemporaryDirectory</link>()&#32;<emphasis role="keyword">as</emphasis>&#32;tmpdir:
00071 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;make&#32;=&#32;<link linkend="_namespacetests_1_1functional_1_1cases_1afdf479d8f581ada915c125fd94e837c9">make_args</link>(tmpdir)&#32;+&#32;[<emphasis role="stringliteral">&apos;build_regular&apos;</emphasis>]
00072 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;outdir&#32;=&#32;<link linkend="_namespacetests_1_1functional_1_1cases_1a8d11835cf833f6de4ac834c961dcb01e">check_call_and_report</link>(
00073 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[<emphasis role="stringliteral">&apos;scan-build-py&apos;</emphasis>,&#32;<emphasis role="stringliteral">&apos;--plist&apos;</emphasis>,&#32;<emphasis role="stringliteral">&apos;-o&apos;</emphasis>,&#32;tmpdir,&#32;<emphasis role="stringliteral">&apos;--intercept-first&apos;</emphasis>],
00074 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;make)
00075 
00076 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;self.assertTrue(os.path.isdir(outdir))
00077 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;self.assertEqual(self.get_plist_count(outdir),&#32;5)
00078 
</programlisting><para>
References <link linkend="_tests_2functional_2cases_2____init_____8py_source_1l00059">tests.functional.cases.check_call_and_report()</link>, <link linkend="_test__from__cdb_8py_source_1l00102">tests.functional.cases.test_from_cdb.OutputFormatTest.get_plist_count()</link>, <link linkend="_test__from__cmd_8py_source_1l00045">tests.functional.cases.test_from_cmd.RunAnalyzerTest.get_plist_count()</link>, <link linkend="_tests_2functional_2cases_2____init_____8py_source_1l00023">tests.functional.cases.make_args()</link>, and <link linkend="_lib_2libear_2____init_____8py_source_1l00070">libear.TemporaryDirectory()</link>.</para>
    </section><anchor xml:id="_classtests_1_1functional_1_1cases_1_1test__from__cmd_1_1_run_analyzer_test_1a32af4113170c49fdc063caf7e1b04564"/>    <section>
    <title>test_intercept_wrapper_works()</title>
<indexterm><primary>test_intercept_wrapper_works</primary><secondary>tests.functional.cases.test_from_cmd.RunAnalyzerTest</secondary></indexterm>
<indexterm><primary>tests.functional.cases.test_from_cmd.RunAnalyzerTest</primary><secondary>test_intercept_wrapper_works</secondary></indexterm>
<para><computeroutput>def tests.functional.cases.test_from_cmd.RunAnalyzerTest.test_intercept_wrapper_works ( self)</computeroutput></para><para>
Definition at line <link linkend="_test__from__cmd_8py_source_1l00058">58</link> of file <link linkend="_test__from__cmd_8py_source">test_from_cmd.py</link>.</para>
<programlisting>00058 &#32;&#32;&#32;&#32;<emphasis role="keyword">def&#32;</emphasis>test_intercept_wrapper_works(self):
00059 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">with</emphasis>&#32;<link linkend="_namespacelibear_1a44657565063241a3d383ec724243c023">libear.TemporaryDirectory</link>()&#32;<emphasis role="keyword">as</emphasis>&#32;tmpdir:
00060 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;make&#32;=&#32;<link linkend="_namespacetests_1_1functional_1_1cases_1afdf479d8f581ada915c125fd94e837c9">make_args</link>(tmpdir)&#32;+&#32;[<emphasis role="stringliteral">&apos;build_regular&apos;</emphasis>]
00061 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;outdir&#32;=&#32;<link linkend="_namespacetests_1_1functional_1_1cases_1a8d11835cf833f6de4ac834c961dcb01e">check_call_and_report</link>(
00062 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[<emphasis role="stringliteral">&apos;scan-build-py&apos;</emphasis>,&#32;<emphasis role="stringliteral">&apos;--plist&apos;</emphasis>,&#32;<emphasis role="stringliteral">&apos;-o&apos;</emphasis>,&#32;tmpdir,&#32;<emphasis role="stringliteral">&apos;--intercept-first&apos;</emphasis>,
00063 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&apos;--override-compiler&apos;</emphasis>],
00064 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;make)
00065 
00066 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;self.assertTrue(os.path.isdir(outdir))
00067 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;self.assertEqual(self.get_plist_count(outdir),&#32;5)
00068 
</programlisting><para>
References <link linkend="_tests_2functional_2cases_2____init_____8py_source_1l00059">tests.functional.cases.check_call_and_report()</link>, <link linkend="_test__from__cdb_8py_source_1l00102">tests.functional.cases.test_from_cdb.OutputFormatTest.get_plist_count()</link>, <link linkend="_test__from__cmd_8py_source_1l00045">tests.functional.cases.test_from_cmd.RunAnalyzerTest.get_plist_count()</link>, <link linkend="_tests_2functional_2cases_2____init_____8py_source_1l00023">tests.functional.cases.make_args()</link>, and <link linkend="_lib_2libear_2____init_____8py_source_1l00070">libear.TemporaryDirectory()</link>.</para>
    </section><anchor xml:id="_classtests_1_1functional_1_1cases_1_1test__from__cmd_1_1_run_analyzer_test_1a584a2f583d3e7d2ed82b424d49782051"/>    <section>
    <title>test_interposition_cc_works()</title>
<indexterm><primary>test_interposition_cc_works</primary><secondary>tests.functional.cases.test_from_cmd.RunAnalyzerTest</secondary></indexterm>
<indexterm><primary>tests.functional.cases.test_from_cmd.RunAnalyzerTest</primary><secondary>test_interposition_cc_works</secondary></indexterm>
<para><computeroutput>def tests.functional.cases.test_from_cmd.RunAnalyzerTest.test_interposition_cc_works ( self)</computeroutput></para><para>
Definition at line <link linkend="_test__from__cmd_8py_source_1l00089">89</link> of file <link linkend="_test__from__cmd_8py_source">test_from_cmd.py</link>.</para>
<programlisting>00089 &#32;&#32;&#32;&#32;<emphasis role="keyword">def&#32;</emphasis>test_interposition_cc_works(self):
00090 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">with</emphasis>&#32;<link linkend="_namespacelibear_1a44657565063241a3d383ec724243c023">libear.TemporaryDirectory</link>()&#32;<emphasis role="keyword">as</emphasis>&#32;tmpdir:
00091 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;outdir&#32;=&#32;<link linkend="_namespacetests_1_1functional_1_1cases_1a8d11835cf833f6de4ac834c961dcb01e">check_call_and_report</link>(
00092 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[<emphasis role="stringliteral">&apos;scan-build-py&apos;</emphasis>,&#32;<emphasis role="stringliteral">&apos;--plist&apos;</emphasis>,&#32;<emphasis role="stringliteral">&apos;-o&apos;</emphasis>,&#32;tmpdir,&#32;<emphasis role="stringliteral">&apos;--override-compiler&apos;</emphasis>],
00093 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;self.compile_empty_source_file(tmpdir,&#32;<emphasis role="keyword">False</emphasis>))
00094 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;self.assertEqual(self.get_plist_count(outdir),&#32;1)
00095 
</programlisting><para>
References <link linkend="_tests_2functional_2cases_2____init_____8py_source_1l00059">tests.functional.cases.check_call_and_report()</link>, <link linkend="_test__from__cmd_8py_source_1l00080">tests.functional.cases.test_from_cmd.RunAnalyzerTest.compile_empty_source_file()</link>, <link linkend="_test__from__cdb_8py_source_1l00102">tests.functional.cases.test_from_cdb.OutputFormatTest.get_plist_count()</link>, <link linkend="_test__from__cmd_8py_source_1l00045">tests.functional.cases.test_from_cmd.RunAnalyzerTest.get_plist_count()</link>, and <link linkend="_lib_2libear_2____init_____8py_source_1l00070">libear.TemporaryDirectory()</link>.</para>
    </section><anchor xml:id="_classtests_1_1functional_1_1cases_1_1test__from__cmd_1_1_run_analyzer_test_1a432b09ae7380e6297a3dd674e0054517"/>    <section>
    <title>test_interposition_cxx_works()</title>
<indexterm><primary>test_interposition_cxx_works</primary><secondary>tests.functional.cases.test_from_cmd.RunAnalyzerTest</secondary></indexterm>
<indexterm><primary>tests.functional.cases.test_from_cmd.RunAnalyzerTest</primary><secondary>test_interposition_cxx_works</secondary></indexterm>
<para><computeroutput>def tests.functional.cases.test_from_cmd.RunAnalyzerTest.test_interposition_cxx_works ( self)</computeroutput></para><para>
Definition at line <link linkend="_test__from__cmd_8py_source_1l00096">96</link> of file <link linkend="_test__from__cmd_8py_source">test_from_cmd.py</link>.</para>
<programlisting>00096 &#32;&#32;&#32;&#32;<emphasis role="keyword">def&#32;</emphasis>test_interposition_cxx_works(self):
00097 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">with</emphasis>&#32;<link linkend="_namespacelibear_1a44657565063241a3d383ec724243c023">libear.TemporaryDirectory</link>()&#32;<emphasis role="keyword">as</emphasis>&#32;tmpdir:
00098 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;outdir&#32;=&#32;<link linkend="_namespacetests_1_1functional_1_1cases_1a8d11835cf833f6de4ac834c961dcb01e">check_call_and_report</link>(
00099 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[<emphasis role="stringliteral">&apos;scan-build-py&apos;</emphasis>,&#32;<emphasis role="stringliteral">&apos;--plist&apos;</emphasis>,&#32;<emphasis role="stringliteral">&apos;-o&apos;</emphasis>,&#32;tmpdir,&#32;<emphasis role="stringliteral">&apos;--override-compiler&apos;</emphasis>],
00100 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;self.compile_empty_source_file(tmpdir,&#32;<emphasis role="keyword">True</emphasis>))
00101 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;self.assertEqual(self.get_plist_count(outdir),&#32;1)
00102 
</programlisting><para>
References <link linkend="_tests_2functional_2cases_2____init_____8py_source_1l00059">tests.functional.cases.check_call_and_report()</link>, <link linkend="_test__from__cmd_8py_source_1l00080">tests.functional.cases.test_from_cmd.RunAnalyzerTest.compile_empty_source_file()</link>, <link linkend="_test__from__cdb_8py_source_1l00102">tests.functional.cases.test_from_cdb.OutputFormatTest.get_plist_count()</link>, <link linkend="_test__from__cmd_8py_source_1l00045">tests.functional.cases.test_from_cmd.RunAnalyzerTest.get_plist_count()</link>, and <link linkend="_lib_2libear_2____init_____8py_source_1l00070">libear.TemporaryDirectory()</link>.</para>
    </section><anchor xml:id="_classtests_1_1functional_1_1cases_1_1test__from__cmd_1_1_run_analyzer_test_1a8a026672a5e1a3aaa8527917e8875a8b"/>    <section>
    <title>test_interposition_works()</title>
<indexterm><primary>test_interposition_works</primary><secondary>tests.functional.cases.test_from_cmd.RunAnalyzerTest</secondary></indexterm>
<indexterm><primary>tests.functional.cases.test_from_cmd.RunAnalyzerTest</primary><secondary>test_interposition_works</secondary></indexterm>
<para><computeroutput>def tests.functional.cases.test_from_cmd.RunAnalyzerTest.test_interposition_works ( self)</computeroutput></para><para>
Definition at line <link linkend="_test__from__cmd_8py_source_1l00048">48</link> of file <link linkend="_test__from__cmd_8py_source">test_from_cmd.py</link>.</para>
<programlisting>00048 &#32;&#32;&#32;&#32;<emphasis role="keyword">def&#32;</emphasis>test_interposition_works(self):
00049 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">with</emphasis>&#32;<link linkend="_namespacelibear_1a44657565063241a3d383ec724243c023">libear.TemporaryDirectory</link>()&#32;<emphasis role="keyword">as</emphasis>&#32;tmpdir:
00050 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;make&#32;=&#32;<link linkend="_namespacetests_1_1functional_1_1cases_1afdf479d8f581ada915c125fd94e837c9">make_args</link>(tmpdir)&#32;+&#32;[<emphasis role="stringliteral">&apos;build_regular&apos;</emphasis>]
00051 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;outdir&#32;=&#32;<link linkend="_namespacetests_1_1functional_1_1cases_1a8d11835cf833f6de4ac834c961dcb01e">check_call_and_report</link>(
00052 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[<emphasis role="stringliteral">&apos;scan-build-py&apos;</emphasis>,&#32;<emphasis role="stringliteral">&apos;--plist&apos;</emphasis>,&#32;<emphasis role="stringliteral">&apos;-o&apos;</emphasis>,&#32;tmpdir,&#32;<emphasis role="stringliteral">&apos;--override-compiler&apos;</emphasis>],
00053 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;make)
00054 
00055 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;self.assertTrue(os.path.isdir(outdir))
00056 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;self.assertEqual(self.get_plist_count(outdir),&#32;5)
00057 
</programlisting><para>
References <link linkend="_tests_2functional_2cases_2____init_____8py_source_1l00059">tests.functional.cases.check_call_and_report()</link>, <link linkend="_test__from__cdb_8py_source_1l00102">tests.functional.cases.test_from_cdb.OutputFormatTest.get_plist_count()</link>, <link linkend="_test__from__cmd_8py_source_1l00045">tests.functional.cases.test_from_cmd.RunAnalyzerTest.get_plist_count()</link>, <link linkend="_tests_2functional_2cases_2____init_____8py_source_1l00023">tests.functional.cases.make_args()</link>, and <link linkend="_lib_2libear_2____init_____8py_source_1l00070">libear.TemporaryDirectory()</link>.</para>
</section>
<para>
The documentation for this class was generated from the following file:</para>
/Users/maximilian/clang-llvm/clang/tools/scan-build-py/tests/functional/cases/<link linkend="_test__from__cmd_8py">test_from_cmd.py</link></section>
</section>
