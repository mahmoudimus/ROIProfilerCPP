<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_namespacelibscanbuild" xml:lang="en-US">
<title>libscanbuild Namespace Reference</title>
<indexterm><primary>libscanbuild</primary></indexterm>
<simplesect>
    <title>Namespaces    </title>
        <itemizedlist>
            <listitem><para> <link linkend="_namespacelibscanbuild_1_1analyze">analyze</link></para>
</listitem>
            <listitem><para> <link linkend="_namespacelibscanbuild_1_1arguments">arguments</link></para>
</listitem>
            <listitem><para> <link linkend="_namespacelibscanbuild_1_1clang">clang</link></para>
</listitem>
            <listitem><para> <link linkend="_namespacelibscanbuild_1_1compilation">compilation</link></para>
</listitem>
            <listitem><para> <link linkend="_namespacelibscanbuild_1_1intercept">intercept</link></para>
</listitem>
            <listitem><para> <link linkend="_namespacelibscanbuild_1_1report">report</link></para>
</listitem>
            <listitem><para> <link linkend="_namespacelibscanbuild_1_1shell">shell</link></para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Functions    </title>
        <itemizedlist>
            <listitem><para>def <link linkend="_namespacelibscanbuild_1a0ddf12c926f03c7f5e3671f162f92832">duplicate_check</link> (method)</para>
</listitem>
            <listitem><para>def <link linkend="_namespacelibscanbuild_1a18b34e68ad68eb5b285d3af3504c9b0c">run_build</link> (command, *args, **kwargs)</para>
</listitem>
            <listitem><para>def <link linkend="_namespacelibscanbuild_1a243b8757d8cfbc0be023301a8b951d6c">run_command</link> (command, cwd=None)</para>
</listitem>
            <listitem><para>def <link linkend="_namespacelibscanbuild_1aa87b6604e799f0262445ea47cf0648c4">reconfigure_logging</link> (verbose_level)</para>
</listitem>
            <listitem><para>def <link linkend="_namespacelibscanbuild_1aa2ef9a77b4d02551cc7100e4d9d70426">command_entry_point</link> (function)</para>
</listitem>
            <listitem><para>def <link linkend="_namespacelibscanbuild_1a395e584f9f6636d0f86868b62ef35780">compiler_wrapper</link> (function)</para>
</listitem>
            <listitem><para>def <link linkend="_namespacelibscanbuild_1a618962b6b79f889cbadd9fbc5971c938">wrapper_environment</link> (args)</para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Variables    </title>
        <itemizedlist>
            <listitem><para>string <link linkend="_namespacelibscanbuild_1ac35c3bf96f255eb465f34367c805b72e">ENVIRONMENT_KEY</link> = &apos;INTERCEPT_BUILD&apos;</para>
</listitem>
            <listitem><para><link linkend="_namespacelibscanbuild_1a492b7346544b773c68846c2486718610">Execution</link> = collections.namedtuple(&apos;Execution&apos;, [&apos;pid&apos;, &apos;cwd&apos;, &apos;cmd&apos;])</para>
</listitem>
            <listitem><para><link linkend="_namespacelibscanbuild_1ad6862a74d972673d22f1478908e7544e">CtuConfig</link></para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Function Documentation</title>
<anchor xml:id="_namespacelibscanbuild_1aa2ef9a77b4d02551cc7100e4d9d70426"/>    <section>
    <title>command_entry_point()</title>
<indexterm><primary>command_entry_point</primary><secondary>libscanbuild</secondary></indexterm>
<indexterm><primary>libscanbuild</primary><secondary>command_entry_point</secondary></indexterm>
<para><computeroutput>def libscanbuild.command_entry_point ( function)</computeroutput></para>
<para><literallayout><computeroutput> Decorator for command entry methods.

The decorator initialize/shutdown logging and guard on programming
errors (catch exceptions).

The decorated method can have arbitrary parameters, the return value will
be the exit code of the process. </computeroutput></literallayout> </para>
<para>
Definition at line <link linkend="_lib_2libscanbuild_2____init_____8py_source_1l00106">106</link> of file <link linkend="_lib_2libscanbuild_2____init_____8py_source">__init__.py</link>.</para>
<programlisting>00106 <emphasis role="keyword">def&#32;</emphasis><link linkend="_namespacelibscanbuild_1aa2ef9a77b4d02551cc7100e4d9d70426">command_entry_point</link>(function):
00107 &#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;&quot;&quot;&#32;Decorator&#32;for&#32;command&#32;entry&#32;methods.</emphasis>
00108 <emphasis role="stringliteral"></emphasis>
00109 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;The&#32;decorator&#32;initialize/shutdown&#32;logging&#32;and&#32;guard&#32;on&#32;programming</emphasis>
00110 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;errors&#32;(catch&#32;exceptions).</emphasis>
00111 <emphasis role="stringliteral"></emphasis>
00112 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;The&#32;decorated&#32;method&#32;can&#32;have&#32;arbitrary&#32;parameters,&#32;the&#32;return&#32;value&#32;will</emphasis>
00113 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;be&#32;the&#32;exit&#32;code&#32;of&#32;the&#32;process.&#32;&quot;&quot;&quot;</emphasis>
00114 
00115 &#32;&#32;&#32;&#32;<emphasis role="preprocessor">@functools.wraps(function)</emphasis>
00116 &#32;&#32;&#32;&#32;<emphasis role="keyword">def&#32;</emphasis>wrapper(*args,&#32;**kwargs):
00117 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;&quot;&quot;&#32;Do&#32;housekeeping&#32;tasks&#32;and&#32;execute&#32;the&#32;wrapped&#32;method.&#32;&quot;&quot;&quot;</emphasis>
00118 
00119 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">try</emphasis>:
00120 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;logging.basicConfig(format=<emphasis role="stringliteral">&apos;%(name)s:&#32;%(message)s&apos;</emphasis>,
00121 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;level=logging.WARNING,
00122 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;stream=sys.stdout)
00123 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">#&#32;This&#32;hack&#32;to&#32;get&#32;the&#32;executable&#32;name&#32;as&#32;%(name).</emphasis>
00124 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;logging.getLogger().name&#32;=&#32;os.path.basename(sys.argv[0])
00125 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;function(*args,&#32;**kwargs)
00126 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">except</emphasis>&#32;KeyboardInterrupt:
00127 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;logging.warning(<emphasis role="stringliteral">&apos;Keyboard&#32;interrupt&apos;</emphasis>)
00128 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;130&#32;&#32;<emphasis role="comment">#&#32;Signal&#32;received&#32;exit&#32;code&#32;for&#32;bash.</emphasis>
00129 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">except</emphasis>&#32;Exception:
00130 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;logging.exception(<emphasis role="stringliteral">&apos;Internal&#32;error.&apos;</emphasis>)
00131 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;logging.getLogger().isEnabledFor(logging.DEBUG):
00132 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;logging.error(<emphasis role="stringliteral">&quot;Please&#32;report&#32;this&#32;bug&#32;and&#32;attach&#32;the&#32;output&#32;&quot;</emphasis>
00133 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;to&#32;the&#32;bug&#32;report&quot;</emphasis>)
00134 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>:
00135 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;logging.error(<emphasis role="stringliteral">&quot;Please&#32;run&#32;this&#32;command&#32;again&#32;and&#32;turn&#32;on&#32;&quot;</emphasis>
00136 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;verbose&#32;mode&#32;(add&#32;&apos;-vvvv&apos;&#32;as&#32;argument).&quot;</emphasis>)
00137 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;64&#32;&#32;<emphasis role="comment">#&#32;Some&#32;non&#32;used&#32;exit&#32;code&#32;for&#32;internal&#32;errors.</emphasis>
00138 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">finally</emphasis>:
00139 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;logging.shutdown()
00140 
00141 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;wrapper
00142 
00143 
</programlisting>    </section><anchor xml:id="_namespacelibscanbuild_1a395e584f9f6636d0f86868b62ef35780"/>    <section>
    <title>compiler_wrapper()</title>
<indexterm><primary>compiler_wrapper</primary><secondary>libscanbuild</secondary></indexterm>
<indexterm><primary>libscanbuild</primary><secondary>compiler_wrapper</secondary></indexterm>
<para><computeroutput>def libscanbuild.compiler_wrapper ( function)</computeroutput></para>
<para><literallayout><computeroutput> Implements compiler wrapper base functionality.

A compiler wrapper executes the real compiler, then implement some
functionality, then returns with the real compiler exit code.

:param function: the extra functionality what the wrapper want to
do on top of the compiler call. If it throws exception, it will be
caught and logged.
:return: the exit code of the real compiler.

The :param function: will receive the following arguments:

:param result:       the exit code of the compilation.
:param execution:    the command executed by the wrapper. </computeroutput></literallayout> </para>
<para>
Definition at line <link linkend="_lib_2libscanbuild_2____init_____8py_source_1l00144">144</link> of file <link linkend="_lib_2libscanbuild_2____init_____8py_source">__init__.py</link>.</para>
<programlisting>00144 <emphasis role="keyword">def&#32;</emphasis><link linkend="_namespacelibscanbuild_1a395e584f9f6636d0f86868b62ef35780">compiler_wrapper</link>(function):
00145 &#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;&quot;&quot;&#32;Implements&#32;compiler&#32;wrapper&#32;base&#32;functionality.</emphasis>
00146 <emphasis role="stringliteral"></emphasis>
00147 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;A&#32;compiler&#32;wrapper&#32;executes&#32;the&#32;real&#32;compiler,&#32;then&#32;implement&#32;some</emphasis>
00148 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;functionality,&#32;then&#32;returns&#32;with&#32;the&#32;real&#32;compiler&#32;exit&#32;code.</emphasis>
00149 <emphasis role="stringliteral"></emphasis>
00150 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;:param&#32;function:&#32;the&#32;extra&#32;functionality&#32;what&#32;the&#32;wrapper&#32;want&#32;to</emphasis>
00151 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;do&#32;on&#32;top&#32;of&#32;the&#32;compiler&#32;call.&#32;If&#32;it&#32;throws&#32;exception,&#32;it&#32;will&#32;be</emphasis>
00152 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;caught&#32;and&#32;logged.</emphasis>
00153 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;:return:&#32;the&#32;exit&#32;code&#32;of&#32;the&#32;real&#32;compiler.</emphasis>
00154 <emphasis role="stringliteral"></emphasis>
00155 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;The&#32;:param&#32;function:&#32;will&#32;receive&#32;the&#32;following&#32;arguments:</emphasis>
00156 <emphasis role="stringliteral"></emphasis>
00157 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;:param&#32;result:&#32;&#32;&#32;&#32;&#32;&#32;&#32;the&#32;exit&#32;code&#32;of&#32;the&#32;compilation.</emphasis>
00158 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;:param&#32;execution:&#32;&#32;&#32;&#32;the&#32;command&#32;executed&#32;by&#32;the&#32;wrapper.&#32;&quot;&quot;&quot;</emphasis>
00159 
00160 &#32;&#32;&#32;&#32;<emphasis role="keyword">def&#32;</emphasis>is_cxx_compiler():
00161 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;&quot;&quot;&#32;Find&#32;out&#32;was&#32;it&#32;a&#32;C++&#32;compiler&#32;call.&#32;Compiler&#32;wrapper&#32;names</emphasis>
00162 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;contain&#32;the&#32;compiler&#32;type.&#32;C++&#32;compiler&#32;wrappers&#32;ends&#32;with&#32;`c++`,</emphasis>
00163 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;but&#32;might&#32;have&#32;`.exe`&#32;extension&#32;on&#32;windows.&#32;&quot;&quot;&quot;</emphasis>
00164 
00165 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;wrapper_command&#32;=&#32;os.path.basename(sys.argv[0])
00166 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;re.match(<emphasis role="stringliteral">r&apos;(.+)c\+\+(.*)&apos;</emphasis>,&#32;wrapper_command)
00167 
00168 &#32;&#32;&#32;&#32;<emphasis role="keyword">def&#32;</emphasis>run_compiler(executable):
00169 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;&quot;&quot;&#32;Execute&#32;compilation&#32;with&#32;the&#32;real&#32;compiler.&#32;&quot;&quot;&quot;</emphasis>
00170 
00171 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;command&#32;=&#32;executable&#32;+&#32;sys.argv[1:]
00172 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;logging.debug(<emphasis role="stringliteral">&apos;compilation:&#32;%s&apos;</emphasis>,&#32;command)
00173 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;result&#32;=&#32;subprocess.call(command)
00174 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;logging.debug(<emphasis role="stringliteral">&apos;compilation&#32;exit&#32;code:&#32;%d&apos;</emphasis>,&#32;result)
00175 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;result
00176 
00177 &#32;&#32;&#32;&#32;<emphasis role="comment">#&#32;Get&#32;relevant&#32;parameters&#32;from&#32;environment.</emphasis>
00178 &#32;&#32;&#32;&#32;parameters&#32;=&#32;json.loads(os.environ[ENVIRONMENT_KEY])
00179 &#32;&#32;&#32;&#32;<link linkend="_namespacelibscanbuild_1aa87b6604e799f0262445ea47cf0648c4">reconfigure_logging</link>(parameters[<emphasis role="stringliteral">&apos;verbose&apos;</emphasis>])
00180 &#32;&#32;&#32;&#32;<emphasis role="comment">#&#32;Execute&#32;the&#32;requested&#32;compilation.&#32;Do&#32;crash&#32;if&#32;anything&#32;goes&#32;wrong.</emphasis>
00181 &#32;&#32;&#32;&#32;cxx&#32;=&#32;is_cxx_compiler()
00182 &#32;&#32;&#32;&#32;compiler&#32;=&#32;parameters[<emphasis role="stringliteral">&apos;cxx&apos;</emphasis>]&#32;<emphasis role="keywordflow">if</emphasis>&#32;cxx&#32;<emphasis role="keywordflow">else</emphasis>&#32;parameters[<emphasis role="stringliteral">&apos;cc&apos;</emphasis>]
00183 &#32;&#32;&#32;&#32;result&#32;=&#32;run_compiler(compiler)
00184 &#32;&#32;&#32;&#32;<emphasis role="comment">#&#32;Call&#32;the&#32;wrapped&#32;method&#32;and&#32;ignore&#32;it&apos;s&#32;return&#32;value.</emphasis>
00185 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">try</emphasis>:
00186 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;call&#32;=&#32;<link linkend="_namespacelibscanbuild_1a492b7346544b773c68846c2486718610">Execution</link>(
00187 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;pid=os.getpid(),
00188 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cwd=os.getcwd(),
00189 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cmd=[<emphasis role="stringliteral">&apos;c++&apos;</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;cxx&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="stringliteral">&apos;cc&apos;</emphasis>]&#32;+&#32;sys.argv[1:])
00190 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;function(result,&#32;call)
00191 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">except</emphasis>:
00192 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;logging.exception(<emphasis role="stringliteral">&apos;Compiler&#32;wrapper&#32;failed&#32;complete.&apos;</emphasis>)
00193 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">finally</emphasis>:
00194 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">#&#32;Always&#32;return&#32;the&#32;real&#32;compiler&#32;exit&#32;code.</emphasis>
00195 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;result
00196 
00197 
</programlisting><para>
References <link linkend="_lib_2libscanbuild_2____init_____8py_source_1l00019">Execution</link>, and <link linkend="_lib_2libscanbuild_2____init_____8py_source_1l00082">reconfigure_logging()</link>.</para>
<para>
Referenced by <link linkend="_analyze_8py_source_1l00298">libscanbuild.analyze.analyze_compiler_wrapper()</link>, and <link linkend="_intercept_8py_source_1l00139">libscanbuild.intercept.intercept_compiler_wrapper()</link>.</para>
    </section><anchor xml:id="_namespacelibscanbuild_1a0ddf12c926f03c7f5e3671f162f92832"/>    <section>
    <title>duplicate_check()</title>
<indexterm><primary>duplicate_check</primary><secondary>libscanbuild</secondary></indexterm>
<indexterm><primary>libscanbuild</primary><secondary>duplicate_check</secondary></indexterm>
<para><computeroutput>def libscanbuild.duplicate_check ( method)</computeroutput></para>
<para><literallayout><computeroutput> Predicate to detect duplicated entries.

Unique hash method can be use to detect duplicates. Entries are
represented as dictionaries, which has no default hash method.
This implementation uses a set datatype to store the unique hash values.

This method returns a method which can detect the duplicate values. </computeroutput></literallayout> </para>
<para>
Definition at line <link linkend="_lib_2libscanbuild_2____init_____8py_source_1l00025">25</link> of file <link linkend="_lib_2libscanbuild_2____init_____8py_source">__init__.py</link>.</para>
<programlisting>00025 <emphasis role="keyword">def&#32;</emphasis><link linkend="_namespacelibscanbuild_1a0ddf12c926f03c7f5e3671f162f92832">duplicate_check</link>(method):
00026 &#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;&quot;&quot;&#32;Predicate&#32;to&#32;detect&#32;duplicated&#32;entries.</emphasis>
00027 <emphasis role="stringliteral"></emphasis>
00028 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;Unique&#32;hash&#32;method&#32;can&#32;be&#32;use&#32;to&#32;detect&#32;duplicates.&#32;Entries&#32;are</emphasis>
00029 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;represented&#32;as&#32;dictionaries,&#32;which&#32;has&#32;no&#32;default&#32;hash&#32;method.</emphasis>
00030 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;This&#32;implementation&#32;uses&#32;a&#32;set&#32;datatype&#32;to&#32;store&#32;the&#32;unique&#32;hash&#32;values.</emphasis>
00031 <emphasis role="stringliteral"></emphasis>
00032 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;This&#32;method&#32;returns&#32;a&#32;method&#32;which&#32;can&#32;detect&#32;the&#32;duplicate&#32;values.&#32;&quot;&quot;&quot;</emphasis>
00033 
00034 &#32;&#32;&#32;&#32;<emphasis role="keyword">def&#32;</emphasis>predicate(entry):
00035 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;entry_hash&#32;=&#32;predicate.unique(entry)
00036 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;entry_hash&#32;<emphasis role="keywordflow">not</emphasis>&#32;<emphasis role="keywordflow">in</emphasis>&#32;predicate.state:
00037 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;predicate.state.add(entry_hash)
00038 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">False</emphasis>
00039 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">True</emphasis>
00040 
00041 &#32;&#32;&#32;&#32;predicate.unique&#32;=&#32;method
00042 &#32;&#32;&#32;&#32;predicate.state&#32;=&#32;set()
00043 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;predicate
00044 
00045 
</programlisting><para>
Referenced by <link linkend="_intercept_8py_source_1l00058">libscanbuild.intercept.capture()</link>, and <link linkend="_report_8py_source_1l00261">libscanbuild.report.read_bugs()</link>.</para>
    </section><anchor xml:id="_namespacelibscanbuild_1aa87b6604e799f0262445ea47cf0648c4"/>    <section>
    <title>reconfigure_logging()</title>
<indexterm><primary>reconfigure_logging</primary><secondary>libscanbuild</secondary></indexterm>
<indexterm><primary>libscanbuild</primary><secondary>reconfigure_logging</secondary></indexterm>
<para><computeroutput>def libscanbuild.reconfigure_logging ( verbose_level)</computeroutput></para>
<para><literallayout><computeroutput> Reconfigure logging level and format based on the verbose flag.

:param verbose_level: number of `-v` flags received by the command
:return: no return value
</computeroutput></literallayout> </para>
<para>
Definition at line <link linkend="_lib_2libscanbuild_2____init_____8py_source_1l00082">82</link> of file <link linkend="_lib_2libscanbuild_2____init_____8py_source">__init__.py</link>.</para>
<programlisting>00082 <emphasis role="keyword">def&#32;</emphasis><link linkend="_namespacelibscanbuild_1aa87b6604e799f0262445ea47cf0648c4">reconfigure_logging</link>(verbose_level):
00083 &#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;&quot;&quot;&#32;Reconfigure&#32;logging&#32;level&#32;and&#32;format&#32;based&#32;on&#32;the&#32;verbose&#32;flag.</emphasis>
00084 <emphasis role="stringliteral"></emphasis>
00085 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;:param&#32;verbose_level:&#32;number&#32;of&#32;`-v`&#32;flags&#32;received&#32;by&#32;the&#32;command</emphasis>
00086 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;:return:&#32;no&#32;return&#32;value</emphasis>
00087 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&quot;&quot;&quot;</emphasis>
00088 &#32;&#32;&#32;&#32;<emphasis role="comment">#&#32;Exit&#32;when&#32;nothing&#32;to&#32;do.</emphasis>
00089 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;verbose_level&#32;==&#32;0:
00090 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>
00091 
00092 &#32;&#32;&#32;&#32;root&#32;=&#32;logging.getLogger()
00093 &#32;&#32;&#32;&#32;<emphasis role="comment">#&#32;Tune&#32;logging&#32;level.</emphasis>
00094 &#32;&#32;&#32;&#32;level&#32;=&#32;logging.WARNING&#32;-&#32;min(logging.WARNING,&#32;(10&#32;*&#32;verbose_level))
00095 &#32;&#32;&#32;&#32;root.setLevel(level)
00096 &#32;&#32;&#32;&#32;<emphasis role="comment">#&#32;Be&#32;verbose&#32;with&#32;messages.</emphasis>
00097 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;verbose_level&#32;&lt;=&#32;3:
00098 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;fmt_string&#32;=&#32;<emphasis role="stringliteral">&apos;%(name)s:&#32;%(levelname)s:&#32;%(message)s&apos;</emphasis>
00099 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>:
00100 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;fmt_string&#32;=&#32;<emphasis role="stringliteral">&apos;%(name)s:&#32;%(levelname)s:&#32;%(funcName)s:&#32;%(message)s&apos;</emphasis>
00101 &#32;&#32;&#32;&#32;handler&#32;=&#32;logging.StreamHandler(sys.stdout)
00102 &#32;&#32;&#32;&#32;handler.setFormatter(logging.Formatter(fmt=fmt_string))
00103 &#32;&#32;&#32;&#32;root.handlers&#32;=&#32;[handler]
00104 
00105 
</programlisting><para>
Referenced by <link linkend="_lib_2libscanbuild_2____init_____8py_source_1l00144">compiler_wrapper()</link>, <link linkend="_arguments_8py_source_1l00045">libscanbuild.arguments.parse_args_for_analyze_build()</link>, <link linkend="_arguments_8py_source_1l00028">libscanbuild.arguments.parse_args_for_intercept_build()</link>, and <link linkend="_arguments_8py_source_1l00061">libscanbuild.arguments.parse_args_for_scan_build()</link>.</para>
    </section><anchor xml:id="_namespacelibscanbuild_1a18b34e68ad68eb5b285d3af3504c9b0c"/>    <section>
    <title>run_build()</title>
<indexterm><primary>run_build</primary><secondary>libscanbuild</secondary></indexterm>
<indexterm><primary>libscanbuild</primary><secondary>run_build</secondary></indexterm>
<para><computeroutput>def libscanbuild.run_build ( command, * args, ** kwargs)</computeroutput></para>
<para><literallayout><computeroutput> Run and report build command execution

:param command: array of tokens
:return: exit code of the process
</computeroutput></literallayout> </para>
<para>
Definition at line <link linkend="_lib_2libscanbuild_2____init_____8py_source_1l00046">46</link> of file <link linkend="_lib_2libscanbuild_2____init_____8py_source">__init__.py</link>.</para>
<programlisting>00046 <emphasis role="keyword">def&#32;</emphasis><link linkend="_namespacelibscanbuild_1a18b34e68ad68eb5b285d3af3504c9b0c">run_build</link>(command,&#32;*args,&#32;**kwargs):
00047 &#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;&quot;&quot;&#32;Run&#32;and&#32;report&#32;build&#32;command&#32;execution</emphasis>
00048 <emphasis role="stringliteral"></emphasis>
00049 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;:param&#32;command:&#32;array&#32;of&#32;tokens</emphasis>
00050 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;:return:&#32;exit&#32;code&#32;of&#32;the&#32;process</emphasis>
00051 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&quot;&quot;&quot;</emphasis>
00052 &#32;&#32;&#32;&#32;environment&#32;=&#32;kwargs.get(<emphasis role="stringliteral">&apos;env&apos;</emphasis>,&#32;os.environ)
00053 &#32;&#32;&#32;&#32;logging.debug(<emphasis role="stringliteral">&apos;run&#32;build&#32;%s,&#32;in&#32;environment:&#32;%s&apos;</emphasis>,&#32;command,&#32;environment)
00054 &#32;&#32;&#32;&#32;exit_code&#32;=&#32;subprocess.call(command,&#32;*args,&#32;**kwargs)
00055 &#32;&#32;&#32;&#32;logging.debug(<emphasis role="stringliteral">&apos;build&#32;finished&#32;with&#32;exit&#32;code:&#32;%d&apos;</emphasis>,&#32;exit_code)
00056 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;exit_code
00057 
00058 
</programlisting><para>
Referenced by <link linkend="_intercept_8py_source_1l00058">libscanbuild.intercept.capture()</link>, and <link linkend="_analyze_8py_source_1l00050">libscanbuild.analyze.scan_build()</link>.</para>
    </section><anchor xml:id="_namespacelibscanbuild_1a243b8757d8cfbc0be023301a8b951d6c"/>    <section>
    <title>run_command()</title>
<indexterm><primary>run_command</primary><secondary>libscanbuild</secondary></indexterm>
<indexterm><primary>libscanbuild</primary><secondary>run_command</secondary></indexterm>
<para><computeroutput>def libscanbuild.run_command ( command,  cwd = <computeroutput>None</computeroutput>
)</computeroutput></para>
<para><literallayout><computeroutput> Run a given command and report the execution.

:param command: array of tokens
:param cwd: the working directory where the command will be executed
:return: output of the command
</computeroutput></literallayout> </para>
<para>
Definition at line <link linkend="_lib_2libscanbuild_2____init_____8py_source_1l00059">59</link> of file <link linkend="_lib_2libscanbuild_2____init_____8py_source">__init__.py</link>.</para>
<programlisting>00059 <emphasis role="keyword">def&#32;</emphasis><link linkend="_namespacelibscanbuild_1a243b8757d8cfbc0be023301a8b951d6c">run_command</link>(command,&#32;cwd=None):
00060 &#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;&quot;&quot;&#32;Run&#32;a&#32;given&#32;command&#32;and&#32;report&#32;the&#32;execution.</emphasis>
00061 <emphasis role="stringliteral"></emphasis>
00062 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;:param&#32;command:&#32;array&#32;of&#32;tokens</emphasis>
00063 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;:param&#32;cwd:&#32;the&#32;working&#32;directory&#32;where&#32;the&#32;command&#32;will&#32;be&#32;executed</emphasis>
00064 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;:return:&#32;output&#32;of&#32;the&#32;command</emphasis>
00065 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&quot;&quot;&quot;</emphasis>
00066 &#32;&#32;&#32;&#32;<emphasis role="keyword">def&#32;</emphasis>decode_when_needed(result):
00067 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;&quot;&quot;&#32;check_output&#32;returns&#32;bytes&#32;or&#32;string&#32;depend&#32;on&#32;python&#32;version&#32;&quot;&quot;&quot;</emphasis>
00068 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;result.decode(<emphasis role="stringliteral">&apos;utf-8&apos;</emphasis>)&#32;<emphasis role="keywordflow">if</emphasis>&#32;isinstance(result,&#32;bytes)&#32;<emphasis role="keywordflow">else</emphasis>&#32;result
00069 
00070 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">try</emphasis>:
00071 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;directory&#32;=&#32;os.path.abspath(cwd)&#32;<emphasis role="keywordflow">if</emphasis>&#32;cwd&#32;<emphasis role="keywordflow">else</emphasis>&#32;os.getcwd()
00072 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;logging.debug(<emphasis role="stringliteral">&apos;exec&#32;command&#32;%s&#32;in&#32;%s&apos;</emphasis>,&#32;command,&#32;directory)
00073 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;output&#32;=&#32;subprocess.check_output(command,
00074 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cwd=directory,
00075 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;stderr=subprocess.STDOUT)
00076 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;decode_when_needed(output).splitlines()
00077 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">except</emphasis>&#32;subprocess.CalledProcessError&#32;<emphasis role="keyword">as</emphasis>&#32;ex:
00078 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ex.output&#32;=&#32;decode_when_needed(ex.output).splitlines()
00079 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">raise</emphasis>&#32;ex
00080 
00081 
</programlisting><para>
Referenced by <link linkend="_analyze_8py_source_1l00597">libscanbuild.analyze.ctu_collect_phase()</link>, <link linkend="_clang_8py_source_1l00038">libscanbuild.clang.get_arguments()</link>, <link linkend="_clang_8py_source_1l00138">libscanbuild.clang.get_checkers()</link>, <link linkend="_clang_8py_source_1l00027">libscanbuild.clang.get_version()</link>, <link linkend="_clang_8py_source_1l00164">libscanbuild.clang.is_ctu_capable()</link>, <link linkend="_intercept_8py_source_1l00226">libscanbuild.intercept.is_preload_disabled()</link>, <link linkend="_analyze_8py_source_1l00474">libscanbuild.analyze.report_failure()</link>, and <link linkend="_analyze_8py_source_1l00532">libscanbuild.analyze.run_analyzer()</link>.</para>
    </section><anchor xml:id="_namespacelibscanbuild_1a618962b6b79f889cbadd9fbc5971c938"/>    <section>
    <title>wrapper_environment()</title>
<indexterm><primary>wrapper_environment</primary><secondary>libscanbuild</secondary></indexterm>
<indexterm><primary>libscanbuild</primary><secondary>wrapper_environment</secondary></indexterm>
<para><computeroutput>def libscanbuild.wrapper_environment ( args)</computeroutput></para>
<para><literallayout><computeroutput> Set up environment for interpose compiler wrapper.</computeroutput></literallayout> </para>
<para>
Definition at line <link linkend="_lib_2libscanbuild_2____init_____8py_source_1l00198">198</link> of file <link linkend="_lib_2libscanbuild_2____init_____8py_source">__init__.py</link>.</para>
<programlisting>00198 <emphasis role="keyword">def&#32;</emphasis><link linkend="_namespacelibscanbuild_1a618962b6b79f889cbadd9fbc5971c938">wrapper_environment</link>(args):
00199 &#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;&quot;&quot;&#32;Set&#32;up&#32;environment&#32;for&#32;interpose&#32;compiler&#32;wrapper.&quot;&quot;&quot;</emphasis>
00200 
00201 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{
00202 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ENVIRONMENT_KEY:&#32;json.dumps({
00203 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&apos;verbose&apos;</emphasis>:&#32;args.verbose,
00204 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&apos;cc&apos;</emphasis>:&#32;shlex.split(args.cc),
00205 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&apos;cxx&apos;</emphasis>:&#32;shlex.split(args.cxx)
00206 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;})
00207 &#32;&#32;&#32;&#32;}
</programlisting><para>
Referenced by <link linkend="_analyze_8py_source_1l00278">libscanbuild.analyze.setup_environment()</link>, and <link linkend="_intercept_8py_source_1l00102">libscanbuild.intercept.setup_environment()</link>.</para>
</section>
</section>
<section>
<title>Variable Documentation</title>
<anchor xml:id="_namespacelibscanbuild_1ad6862a74d972673d22f1478908e7544e"/>    <section>
    <title>CtuConfig</title>
<indexterm><primary>CtuConfig</primary><secondary>libscanbuild</secondary></indexterm>
<indexterm><primary>libscanbuild</primary><secondary>CtuConfig</secondary></indexterm>
<para><computeroutput>libscanbuild.CtuConfig</computeroutput></para><emphasis role="strong">Initial value:</emphasis><programlisting>00001 =&#32;&#32;collections.namedtuple(<emphasis role="stringliteral">&apos;CtuConfig&apos;</emphasis>,&#32;[<emphasis role="stringliteral">&apos;collect&apos;</emphasis>,&#32;<emphasis role="stringliteral">&apos;analyze&apos;</emphasis>,&#32;<emphasis role="stringliteral">&apos;dir&apos;</emphasis>,
00002 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&apos;extdef_map_cmd&apos;</emphasis>])
</programlisting><para>
Definition at line <link linkend="_lib_2libscanbuild_2____init_____8py_source_1l00021">21</link> of file <link linkend="_lib_2libscanbuild_2____init_____8py_source">__init__.py</link>.</para>
<para>
Referenced by <link linkend="_arguments_8py_source_1l00167">libscanbuild.arguments.create_analyze_parser()</link>, <link linkend="_analyze_8py_source_1l00114">libscanbuild.analyze.get_ctu_config_from_args()</link>, <link linkend="_analyze_8py_source_1l00126">libscanbuild.analyze.get_ctu_config_from_json()</link>, and <link linkend="_analyze_8py_source_1l00246">libscanbuild.analyze.govern_analyzer_runs()</link>.</para>
    </section><anchor xml:id="_namespacelibscanbuild_1ac35c3bf96f255eb465f34367c805b72e"/>    <section>
    <title>ENVIRONMENT_KEY</title>
<indexterm><primary>ENVIRONMENT_KEY</primary><secondary>libscanbuild</secondary></indexterm>
<indexterm><primary>libscanbuild</primary><secondary>ENVIRONMENT_KEY</secondary></indexterm>
<para><computeroutput>string libscanbuild.ENVIRONMENT_KEY = &apos;INTERCEPT_BUILD&apos;</computeroutput></para><para>
Definition at line <link linkend="_lib_2libscanbuild_2____init_____8py_source_1l00017">17</link> of file <link linkend="_lib_2libscanbuild_2____init_____8py_source">__init__.py</link>.</para>
    </section><anchor xml:id="_namespacelibscanbuild_1a492b7346544b773c68846c2486718610"/>    <section>
    <title>Execution</title>
<indexterm><primary>Execution</primary><secondary>libscanbuild</secondary></indexterm>
<indexterm><primary>libscanbuild</primary><secondary>Execution</secondary></indexterm>
<para><computeroutput>libscanbuild.Execution = collections.namedtuple(&apos;Execution&apos;, [&apos;pid&apos;, &apos;cwd&apos;, &apos;cmd&apos;])</computeroutput></para><para>
Definition at line <link linkend="_lib_2libscanbuild_2____init_____8py_source_1l00019">19</link> of file <link linkend="_lib_2libscanbuild_2____init_____8py_source">__init__.py</link>.</para>
<para>
Referenced by <link linkend="_lib_2libscanbuild_2____init_____8py_source_1l00144">compiler_wrapper()</link>.</para>
</section>
</section>
</section>
