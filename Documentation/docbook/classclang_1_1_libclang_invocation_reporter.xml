<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_classclang_1_1_libclang_invocation_reporter" xml:lang="en-US">
<title>clang::LibclangInvocationReporter Class Reference</title>
<indexterm><primary>clang::LibclangInvocationReporter</primary></indexterm>
<para>
<computeroutput>#include &lt;CIndexer.h&gt;</computeroutput>
</para>
<simplesect>
    <title>Public Types    </title>
        <itemizedlist>
            <listitem><para>enum class <link linkend="_classclang_1_1_libclang_invocation_reporter_1accdb53ba461fb345cd984aa037eecf53">OperationKind</link> { <link linkend="_classclang_1_1_libclang_invocation_reporter_1accdb53ba461fb345cd984aa037eecf53ae6f6b50529513b200513042d023bebd9">ParseOperation</link>
, <link linkend="_classclang_1_1_libclang_invocation_reporter_1accdb53ba461fb345cd984aa037eecf53a9e4073b2ce3ca4aa47e086ff9479e19d">CompletionOperation</link>
 }</para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Public Member Functions    </title>
        <itemizedlist>
            <listitem><para><link linkend="_classclang_1_1_libclang_invocation_reporter_1a2cdb530eb76516c96b5923dad2e243af">LibclangInvocationReporter</link> (<link linkend="_classclang_1_1_c_indexer">CIndexer</link> &amp;Idx, <link linkend="_classclang_1_1_libclang_invocation_reporter_1accdb53ba461fb345cd984aa037eecf53">OperationKind</link> Op, unsigned ParseOptions, llvm::ArrayRef&lt; const char * &gt; Args, llvm::ArrayRef&lt; std::string &gt; InvocationArgs, llvm::ArrayRef&lt; CXUnsavedFile &gt; UnsavedFiles)</para>
</listitem>
            <listitem><para><link linkend="_classclang_1_1_libclang_invocation_reporter_1a3fafbe06dce2b7afdfbc83303b5723f2">~LibclangInvocationReporter</link> ()</para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Detailed Description</title>

<para>Logs information about a particular libclang operation like parsing to a new file in the invocation emission path. </para>
<para>
Definition at line <link linkend="__c_indexer_8h_source_1l00089">89</link> of file <link linkend="__c_indexer_8h_source">CIndexer.h</link>.</para>
</section>
<section>
<title>Member Enumeration Documentation</title>
<anchor xml:id="_classclang_1_1_libclang_invocation_reporter_1accdb53ba461fb345cd984aa037eecf53"/>    <section>
    <title>OperationKind</title>
<indexterm><primary>OperationKind</primary><secondary>clang::LibclangInvocationReporter</secondary></indexterm>
<indexterm><primary>clang::LibclangInvocationReporter</primary><secondary>OperationKind</secondary></indexterm>
<para><computeroutput>enum <link linkend="_classclang_1_1_libclang_invocation_reporter_1accdb53ba461fb345cd984aa037eecf53">clang::LibclangInvocationReporter::OperationKind</link><computeroutput>[strong]</computeroutput></computeroutput></para><informaltable frame="all">
<title>Enumerator</title>
    <tgroup cols="2" align="left" colsep="1" rowsep="1">
      <colspec colname='c1'/>
      <colspec colname='c2'/>
<tbody>
<row><entry><indexterm><primary>ParseOperation</primary><secondary>clang::LibclangInvocationReporter</secondary></indexterm>
<indexterm><primary>clang::LibclangInvocationReporter</primary><secondary>ParseOperation</secondary></indexterm>
<anchor xml:id="_classclang_1_1_libclang_invocation_reporter_1accdb53ba461fb345cd984aa037eecf53ae6f6b50529513b200513042d023bebd9"/>ParseOperation</entry><entry></entry></row><row><entry><indexterm><primary>CompletionOperation</primary><secondary>clang::LibclangInvocationReporter</secondary></indexterm>
<indexterm><primary>clang::LibclangInvocationReporter</primary><secondary>CompletionOperation</secondary></indexterm>
<anchor xml:id="_classclang_1_1_libclang_invocation_reporter_1accdb53ba461fb345cd984aa037eecf53a9e4073b2ce3ca4aa47e086ff9479e19d"/>CompletionOperation</entry><entry></entry></row>    </tbody>
    </tgroup>
</informaltable>
<para>
Definition at line <link linkend="__c_indexer_8h_source_1l00091">91</link> of file <link linkend="__c_indexer_8h_source">CIndexer.h</link>.</para>
<programlisting>00091 {&#32;ParseOperation,&#32;CompletionOperation&#32;};
</programlisting></section>
</section>
<section>
<title>Constructor &amp; Destructor Documentation</title>
<anchor xml:id="_classclang_1_1_libclang_invocation_reporter_1a2cdb530eb76516c96b5923dad2e243af"/>    <section>
    <title>LibclangInvocationReporter()</title>
<indexterm><primary>LibclangInvocationReporter</primary><secondary>clang::LibclangInvocationReporter</secondary></indexterm>
<indexterm><primary>clang::LibclangInvocationReporter</primary><secondary>LibclangInvocationReporter</secondary></indexterm>
<para><computeroutput>LibclangInvocationReporter::LibclangInvocationReporter (<link linkend="_classclang_1_1_c_indexer">CIndexer</link> &amp; Idx, <link linkend="_classclang_1_1_libclang_invocation_reporter_1accdb53ba461fb345cd984aa037eecf53">OperationKind</link> Op, unsigned ParseOptions, llvm::ArrayRef&lt; const char * &gt; Args, llvm::ArrayRef&lt; std::string &gt; InvocationArgs, llvm::ArrayRef&lt; CXUnsavedFile &gt; UnsavedFiles)</computeroutput></para><para>
Definition at line <link linkend="__c_indexer_8cpp_source_1l00152">152</link> of file <link linkend="__c_indexer_8cpp_source">CIndexer.cpp</link>.</para>
<programlisting>00156 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00157 &#32;&#32;StringRef&#32;Path&#32;=&#32;Idx.<link linkend="_classclang_1_1_c_indexer_1a4d18c0143db01294d2152486ba7ca3c4">getInvocationEmissionPath</link>();
00158 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(Path.empty())
00159 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
00160 
00161 &#32;&#32;<emphasis role="comment">//&#32;Create&#32;a&#32;temporary&#32;file&#32;for&#32;the&#32;invocation&#32;log.</emphasis>
00162 &#32;&#32;SmallString&lt;256&gt;&#32;TempPath;
00163 &#32;&#32;TempPath&#32;=&#32;Path;
00164 &#32;&#32;llvm::sys::path::append(TempPath,&#32;<emphasis role="stringliteral">&quot;libclang-%%%%%%%%%%%%&quot;</emphasis>);
00165 &#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;FD;
00166 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(llvm::sys::fs::createUniqueFile(TempPath,&#32;FD,&#32;TempPath,
00167 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;llvm::sys::fs::OF_Text))
00168 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
00169 &#32;&#32;File&#32;=&#32;std::string(TempPath.begin(),&#32;TempPath.end());
00170 &#32;&#32;llvm::raw_fd_ostream&#32;OS(FD,&#32;<emphasis role="comment">/*ShouldClose=*/</emphasis><emphasis role="keyword">true</emphasis>);
00171 
00172 &#32;&#32;<emphasis role="comment">//&#32;Write&#32;out&#32;the&#32;information&#32;about&#32;the&#32;invocation&#32;to&#32;it.</emphasis>
00173 &#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;WriteStringKey&#32;=&#32;[&amp;OS](StringRef&#32;Key,&#32;StringRef&#32;Value)&#32;{
00174 &#32;&#32;&#32;&#32;OS&#32;&lt;&lt;&#32;R<emphasis role="stringliteral">&quot;(&quot;)&quot;&#32;&lt;&lt;&#32;Key&#32;&lt;&lt;&#32;R</emphasis><emphasis role="stringliteral">&quot;(&quot;:&quot;)&quot;;</emphasis>
00175 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;OS&#32;&lt;&lt;&#32;<link linkend="_namespacelibscanbuild_1_1report_1a47efadc6b0ae30e761eccc612329a1ef">llvm::yaml::escape</link>(Value)&#32;&lt;&lt;&#32;</emphasis><emphasis role="charliteral">&apos;&quot;&apos;</emphasis>;
00176 &#32;&#32;};
00177 &#32;&#32;OS&#32;&lt;&lt;&#32;<emphasis role="charliteral">&apos;{&apos;</emphasis>;
00178 &#32;&#32;WriteStringKey(<emphasis role="stringliteral">&quot;toolchain&quot;</emphasis>,&#32;Idx.<link linkend="_classclang_1_1_c_indexer_1a542a2e3cb09f282f8d456b32770fd4b2">getClangToolchainPath</link>());
00179 &#32;&#32;OS&#32;&lt;&lt;&#32;<emphasis role="charliteral">&apos;,&apos;</emphasis>;
00180 &#32;&#32;WriteStringKey(<emphasis role="stringliteral">&quot;libclang.operation&quot;</emphasis>,
00181 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Op&#32;==&#32;<link linkend="_classclang_1_1_libclang_invocation_reporter_1accdb53ba461fb345cd984aa037eecf53ae6f6b50529513b200513042d023bebd9">OperationKind::ParseOperation</link>&#32;?&#32;<emphasis role="stringliteral">&quot;parse&quot;</emphasis>&#32;:&#32;<emphasis role="stringliteral">&quot;complete&quot;</emphasis>);
00182 &#32;&#32;OS&#32;&lt;&lt;&#32;<emphasis role="charliteral">&apos;,&apos;</emphasis>;
00183 &#32;&#32;OS&#32;&lt;&lt;&#32;R<emphasis role="stringliteral">&quot;(&quot;libclang.opts&quot;:)&quot;&#32;&lt;&lt;&#32;ParseOptions;</emphasis>
00184 <emphasis role="stringliteral">&#32;&#32;OS&#32;&lt;&lt;&#32;</emphasis><emphasis role="charliteral">&apos;,&apos;</emphasis>;
00185 &#32;&#32;OS&#32;&lt;&lt;&#32;R<emphasis role="stringliteral">&quot;(&quot;args&quot;:[)&quot;;</emphasis>
00186 <emphasis role="stringliteral">&#32;&#32;</emphasis><emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;&amp;I&#32;:&#32;llvm::enumerate(Args))&#32;{
00187 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(I.index())
00188 &#32;&#32;&#32;&#32;&#32;&#32;OS&#32;&lt;&lt;&#32;<emphasis role="charliteral">&apos;,&apos;</emphasis>;
00189 &#32;&#32;&#32;&#32;OS&#32;&lt;&lt;&#32;<emphasis role="charliteral">&apos;&quot;&apos;</emphasis>&#32;&lt;&lt;&#32;<link linkend="_namespacelibscanbuild_1_1report_1a47efadc6b0ae30e761eccc612329a1ef">llvm::yaml::escape</link>(I.value())&#32;&lt;&lt;&#32;<emphasis role="charliteral">&apos;&quot;&apos;</emphasis>;
00190 &#32;&#32;}
00191 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!InvocationArgs.empty())&#32;{
00192 &#32;&#32;&#32;&#32;OS&#32;&lt;&lt;&#32;R<emphasis role="stringliteral">&quot;(],&quot;invocation-args&quot;:[)&quot;;</emphasis>
00193 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;</emphasis><emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;&amp;I&#32;:&#32;llvm::enumerate(InvocationArgs))&#32;{
00194 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(I.index())
00195 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;OS&#32;&lt;&lt;&#32;<emphasis role="charliteral">&apos;,&apos;</emphasis>;
00196 &#32;&#32;&#32;&#32;&#32;&#32;OS&#32;&lt;&lt;&#32;<emphasis role="charliteral">&apos;&quot;&apos;</emphasis>&#32;&lt;&lt;&#32;<link linkend="_namespacelibscanbuild_1_1report_1a47efadc6b0ae30e761eccc612329a1ef">llvm::yaml::escape</link>(I.value())&#32;&lt;&lt;&#32;<emphasis role="charliteral">&apos;&quot;&apos;</emphasis>;
00197 &#32;&#32;&#32;&#32;}
00198 &#32;&#32;}
00199 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!UnsavedFiles.empty())&#32;{
00200 &#32;&#32;&#32;&#32;OS&#32;&lt;&lt;&#32;R<emphasis role="stringliteral">&quot;(],&quot;unsaved_file_hashes&quot;:[)&quot;;</emphasis>
00201 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;</emphasis><emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;&amp;UF&#32;:&#32;llvm::enumerate(UnsavedFiles))&#32;{
00202 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(UF.index())
00203 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;OS&#32;&lt;&lt;&#32;<emphasis role="charliteral">&apos;,&apos;</emphasis>;
00204 &#32;&#32;&#32;&#32;&#32;&#32;OS&#32;&lt;&lt;&#32;<emphasis role="charliteral">&apos;{&apos;</emphasis>;
00205 &#32;&#32;&#32;&#32;&#32;&#32;WriteStringKey(<emphasis role="stringliteral">&quot;name&quot;</emphasis>,&#32;UF.value().Filename);
00206 &#32;&#32;&#32;&#32;&#32;&#32;OS&#32;&lt;&lt;&#32;<emphasis role="charliteral">&apos;,&apos;</emphasis>;
00207 &#32;&#32;&#32;&#32;&#32;&#32;llvm::MD5&#32;Hash;
00208 &#32;&#32;&#32;&#32;&#32;&#32;Hash.update(getContents(UF.value()));
00209 &#32;&#32;&#32;&#32;&#32;&#32;llvm::MD5::MD5Result&#32;Result;
00210 &#32;&#32;&#32;&#32;&#32;&#32;Hash.final(Result);
00211 &#32;&#32;&#32;&#32;&#32;&#32;SmallString&lt;32&gt;&#32;Digest&#32;=&#32;Result.digest();
00212 &#32;&#32;&#32;&#32;&#32;&#32;WriteStringKey(<emphasis role="stringliteral">&quot;md5&quot;</emphasis>,&#32;Digest);
00213 &#32;&#32;&#32;&#32;&#32;&#32;OS&#32;&lt;&lt;&#32;<emphasis role="charliteral">&apos;}&apos;</emphasis>;
00214 &#32;&#32;&#32;&#32;}
00215 &#32;&#32;}
00216 &#32;&#32;OS&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;]}&quot;</emphasis>;
00217 }
</programlisting><para>
References <link linkend="_report_8py_source_1l00547">libscanbuild.report::escape()</link>, <link linkend="__c_indexer_8cpp_source_1l00142">clang::CIndexer::getClangToolchainPath()</link>, <link linkend="__c_indexer_8h_source_1l00084">clang::CIndexer::getInvocationEmissionPath()</link>, and <link linkend="_classclang_1_1_libclang_invocation_reporter_1accdb53ba461fb345cd984aa037eecf53ae6f6b50529513b200513042d023bebd9">ParseOperation</link>.</para>
    </section><anchor xml:id="_classclang_1_1_libclang_invocation_reporter_1a3fafbe06dce2b7afdfbc83303b5723f2"/>    <section>
    <title>~LibclangInvocationReporter()</title>
<indexterm><primary>~LibclangInvocationReporter</primary><secondary>clang::LibclangInvocationReporter</secondary></indexterm>
<indexterm><primary>clang::LibclangInvocationReporter</primary><secondary>~LibclangInvocationReporter</secondary></indexterm>
<para><computeroutput>LibclangInvocationReporter::~LibclangInvocationReporter ( )</computeroutput></para><para>
Definition at line <link linkend="__c_indexer_8cpp_source_1l00219">219</link> of file <link linkend="__c_indexer_8cpp_source">CIndexer.cpp</link>.</para>
<programlisting>00219 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00220 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!File.empty())
00221 &#32;&#32;&#32;&#32;llvm::sys::fs::remove(File);
00222 }
</programlisting></section>
<para>
The documentation for this class was generated from the following files:</para>
/Users/maximilian/clang-llvm/clang/tools/libclang/<link linkend="__c_indexer_8h">CIndexer.h</link>/Users/maximilian/clang-llvm/clang/tools/libclang/<link linkend="__c_indexer_8cpp">CIndexer.cpp</link></section>
</section>
