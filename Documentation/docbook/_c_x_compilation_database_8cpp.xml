<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="__c_x_compilation_database_8cpp" xml:lang="en-US">
<title>/Users/maximilian/clang-llvm/clang/tools/libclang/CXCompilationDatabase.cpp File Reference</title>
<indexterm><primary>/Users/maximilian/clang-llvm/clang/tools/libclang/CXCompilationDatabase.cpp</primary></indexterm>
<programlisting>#include &quot;clang-c/CXCompilationDatabase.h&quot;
#include &quot;CXString.h&quot;
#include &quot;clang/Tooling/CompilationDatabase.h&quot;
#include &lt;cstdio&gt;
</programlisting><simplesect>
    <title>Classes    </title>
        <itemizedlist>
            <listitem><para>struct <link linkend="_struct_allocated_c_x_compile_commands">AllocatedCXCompileCommands</link></para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Functions    </title>
        <itemizedlist>
            <listitem><para>CXCompilationDatabase <link linkend="__c_x_compilation_database_8cpp_1aaa087437718d774d839daedb979b61af">clang_CompilationDatabase_fromDirectory</link> (const char *BuildDir, CXCompilationDatabase_Error *ErrorCode)</para>
</listitem>
            <listitem><para>void <link linkend="__c_x_compilation_database_8cpp_1a4a2e4021f4eaafc4896d76e8227139b0">clang_CompilationDatabase_dispose</link> (CXCompilationDatabase CDb)</para>
</listitem>
            <listitem><para>CXCompileCommands <link linkend="__c_x_compilation_database_8cpp_1a3a23e53ea98bc08768215c09f5156bee">clang_CompilationDatabase_getCompileCommands</link> (CXCompilationDatabase CDb, const char *CompleteFileName)</para>
</listitem>
            <listitem><para>CXCompileCommands <link linkend="__c_x_compilation_database_8cpp_1acedca4a5cd8d0d952e018c3567b83f86">clang_CompilationDatabase_getAllCompileCommands</link> (CXCompilationDatabase CDb)</para>
</listitem>
            <listitem><para>void <link linkend="__c_x_compilation_database_8cpp_1a294a73031045578c5df99e9a557a8d0c">clang_CompileCommands_dispose</link> (CXCompileCommands Cmds)</para>
</listitem>
            <listitem><para>unsigned <link linkend="__c_x_compilation_database_8cpp_1a2239d1a8e88dc966670e9f4b2b321fde">clang_CompileCommands_getSize</link> (CXCompileCommands Cmds)</para>
</listitem>
            <listitem><para>CXCompileCommand <link linkend="__c_x_compilation_database_8cpp_1a11742a91b47662bc3a2624af8fb309c4">clang_CompileCommands_getCommand</link> (CXCompileCommands Cmds, unsigned I)</para>
</listitem>
            <listitem><para>CXString <link linkend="__c_x_compilation_database_8cpp_1af72bcba83c2478cb262e1bc837cc0621">clang_CompileCommand_getDirectory</link> (CXCompileCommand CCmd)</para>
</listitem>
            <listitem><para>CXString <link linkend="__c_x_compilation_database_8cpp_1a6908c5b30441ae18503639733946c966">clang_CompileCommand_getFilename</link> (CXCompileCommand CCmd)</para>
</listitem>
            <listitem><para>unsigned <link linkend="__c_x_compilation_database_8cpp_1a6eda59a086ae6df97bbc71d24daf1958">clang_CompileCommand_getNumArgs</link> (CXCompileCommand CCmd)</para>
</listitem>
            <listitem><para>CXString <link linkend="__c_x_compilation_database_8cpp_1a946bd47adc84a94067ff95060fdd1e17">clang_CompileCommand_getArg</link> (CXCompileCommand CCmd, unsigned Arg)</para>
</listitem>
            <listitem><para>unsigned <link linkend="__c_x_compilation_database_8cpp_1a120523de6060d784cf8ab49a7074313a">clang_CompileCommand_getNumMappedSources</link> (CXCompileCommand CCmd)</para>
</listitem>
            <listitem><para>CXString <link linkend="__c_x_compilation_database_8cpp_1a61c674aa4ef558bc5d53b1a5087fbca7">clang_CompileCommand_getMappedSourcePath</link> (CXCompileCommand CCmd, unsigned I)</para>
</listitem>
            <listitem><para>CXString <link linkend="__c_x_compilation_database_8cpp_1acff735fb70da8367c4dfac7c7e1e9c6c">clang_CompileCommand_getMappedSourceContent</link> (CXCompileCommand CCmd, unsigned I)</para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Function Documentation</title>
<anchor xml:id="__c_x_compilation_database_8cpp_1a4a2e4021f4eaafc4896d76e8227139b0"/>    <section>
    <title>clang_CompilationDatabase_dispose()</title>
<indexterm><primary>clang_CompilationDatabase_dispose</primary><secondary>CXCompilationDatabase.cpp</secondary></indexterm>
<indexterm><primary>CXCompilationDatabase.cpp</primary><secondary>clang_CompilationDatabase_dispose</secondary></indexterm>
<para><computeroutput>void clang_CompilationDatabase_dispose (CXCompilationDatabase CDb)</computeroutput></para><para>
Definition at line <link linkend="__c_x_compilation_database_8cpp_source_1l00032">32</link> of file <link linkend="__c_x_compilation_database_8cpp_source">CXCompilationDatabase.cpp</link>.</para>
<programlisting>00033 {
00034 &#32;&#32;<emphasis role="keyword">delete</emphasis>&#32;<emphasis role="keyword">static_cast&lt;</emphasis>CompilationDatabase&#32;*<emphasis role="keyword">&gt;</emphasis>(CDb);
00035 }
</programlisting>    </section><anchor xml:id="__c_x_compilation_database_8cpp_1aaa087437718d774d839daedb979b61af"/>    <section>
    <title>clang_CompilationDatabase_fromDirectory()</title>
<indexterm><primary>clang_CompilationDatabase_fromDirectory</primary><secondary>CXCompilationDatabase.cpp</secondary></indexterm>
<indexterm><primary>CXCompilationDatabase.cpp</primary><secondary>clang_CompilationDatabase_fromDirectory</secondary></indexterm>
<para><computeroutput>CXCompilationDatabase clang_CompilationDatabase_fromDirectory (const char * BuildDir, CXCompilationDatabase_Error * ErrorCode)</computeroutput></para><para>
Definition at line <link linkend="__c_x_compilation_database_8cpp_source_1l00011">11</link> of file <link linkend="__c_x_compilation_database_8cpp_source">CXCompilationDatabase.cpp</link>.</para>
<programlisting>00013 {
00014 &#32;&#32;std::string&#32;ErrorMsg;
00015 &#32;&#32;CXCompilationDatabase_Error&#32;Err&#32;=&#32;CXCompilationDatabase_NoError;
00016 
00017 &#32;&#32;std::unique_ptr&lt;CompilationDatabase&gt;&#32;db&#32;=
00018 &#32;&#32;&#32;&#32;&#32;&#32;CompilationDatabase::loadFromDirectory(BuildDir,&#32;ErrorMsg);
00019 
00020 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!db)&#32;{
00021 &#32;&#32;&#32;&#32;fprintf(stderr,&#32;<emphasis role="stringliteral">&quot;LIBCLANG&#32;TOOLING&#32;ERROR:&#32;%s\n&quot;</emphasis>,&#32;ErrorMsg.c_str());
00022 &#32;&#32;&#32;&#32;Err&#32;=&#32;CXCompilationDatabase_CanNotLoadDatabase;
00023 &#32;&#32;}
00024 
00025 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(ErrorCode)
00026 &#32;&#32;&#32;&#32;*ErrorCode&#32;=&#32;Err;
00027 
00028 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;db.release();
00029 }
</programlisting>    </section><anchor xml:id="__c_x_compilation_database_8cpp_1acedca4a5cd8d0d952e018c3567b83f86"/>    <section>
    <title>clang_CompilationDatabase_getAllCompileCommands()</title>
<indexterm><primary>clang_CompilationDatabase_getAllCompileCommands</primary><secondary>CXCompilationDatabase.cpp</secondary></indexterm>
<indexterm><primary>CXCompilationDatabase.cpp</primary><secondary>clang_CompilationDatabase_getAllCompileCommands</secondary></indexterm>
<para><computeroutput>CXCompileCommands clang_CompilationDatabase_getAllCompileCommands (CXCompilationDatabase CDb)</computeroutput></para><para>
Definition at line <link linkend="__c_x_compilation_database_8cpp_source_1l00059">59</link> of file <link linkend="__c_x_compilation_database_8cpp_source">CXCompilationDatabase.cpp</link>.</para>
<programlisting>00059 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00060 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(CompilationDatabase&#32;*db&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis>CompilationDatabase&#32;*<emphasis role="keyword">&gt;</emphasis>(CDb))&#32;{
00061 &#32;&#32;&#32;&#32;std::vector&lt;CompileCommand&gt;&#32;CCmd(db-&gt;getAllCompileCommands());
00062 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!CCmd.empty())
00063 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_struct_allocated_c_x_compile_commands">AllocatedCXCompileCommands</link>(std::move(CCmd));
00064 &#32;&#32;}
00065 
00066 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">nullptr</emphasis>;
00067 }
</programlisting>    </section><anchor xml:id="__c_x_compilation_database_8cpp_1a3a23e53ea98bc08768215c09f5156bee"/>    <section>
    <title>clang_CompilationDatabase_getCompileCommands()</title>
<indexterm><primary>clang_CompilationDatabase_getCompileCommands</primary><secondary>CXCompilationDatabase.cpp</secondary></indexterm>
<indexterm><primary>CXCompilationDatabase.cpp</primary><secondary>clang_CompilationDatabase_getCompileCommands</secondary></indexterm>
<para><computeroutput>CXCompileCommands clang_CompilationDatabase_getCompileCommands (CXCompilationDatabase CDb, const char * CompleteFileName)</computeroutput></para><para>
Definition at line <link linkend="__c_x_compilation_database_8cpp_source_1l00046">46</link> of file <link linkend="__c_x_compilation_database_8cpp_source">CXCompilationDatabase.cpp</link>.</para>
<programlisting>00048 {
00049 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(CompilationDatabase&#32;*db&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis>CompilationDatabase&#32;*<emphasis role="keyword">&gt;</emphasis>(CDb))&#32;{
00050 &#32;&#32;&#32;&#32;std::vector&lt;CompileCommand&gt;&#32;CCmd(db-&gt;getCompileCommands(CompleteFileName));
00051 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!CCmd.empty())
00052 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_struct_allocated_c_x_compile_commands">AllocatedCXCompileCommands</link>(std::move(CCmd));
00053 &#32;&#32;}
00054 
00055 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">nullptr</emphasis>;
00056 }
</programlisting>    </section><anchor xml:id="__c_x_compilation_database_8cpp_1a946bd47adc84a94067ff95060fdd1e17"/>    <section>
    <title>clang_CompileCommand_getArg()</title>
<indexterm><primary>clang_CompileCommand_getArg</primary><secondary>CXCompilationDatabase.cpp</secondary></indexterm>
<indexterm><primary>CXCompilationDatabase.cpp</primary><secondary>clang_CompileCommand_getArg</secondary></indexterm>
<para><computeroutput>CXString clang_CompileCommand_getArg (CXCompileCommand CCmd, unsigned Arg)</computeroutput></para><para>
Definition at line <link linkend="__c_x_compilation_database_8cpp_source_1l00132">132</link> of file <link linkend="__c_x_compilation_database_8cpp_source">CXCompilationDatabase.cpp</link>.</para>
<programlisting>00133 {
00134 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!CCmd)
00135 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1a8684a35d52ccb8c623144db89a0205e1">cxstring::createNull</link>();
00136 
00137 &#32;&#32;CompileCommand&#32;*Cmd&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis>CompileCommand&#32;*<emphasis role="keyword">&gt;</emphasis>(CCmd);
00138 
00139 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(Arg&#32;&gt;=&#32;Cmd-&gt;CommandLine.size())
00140 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1a8684a35d52ccb8c623144db89a0205e1">cxstring::createNull</link>();
00141 
00142 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(Cmd-&gt;CommandLine[Arg].c_str());
00143 }
</programlisting><para>
References <link linkend="__c_x_string_8cpp_source_1l00050">clang::cxstring::createNull()</link>, and <link linkend="__c_x_string_8cpp_source_1l00057">clang::cxstring::createRef()</link>.</para>
    </section><anchor xml:id="__c_x_compilation_database_8cpp_1af72bcba83c2478cb262e1bc837cc0621"/>    <section>
    <title>clang_CompileCommand_getDirectory()</title>
<indexterm><primary>clang_CompileCommand_getDirectory</primary><secondary>CXCompilationDatabase.cpp</secondary></indexterm>
<indexterm><primary>CXCompilationDatabase.cpp</primary><secondary>clang_CompileCommand_getDirectory</secondary></indexterm>
<para><computeroutput>CXString clang_CompileCommand_getDirectory (CXCompileCommand CCmd)</computeroutput></para><para>
Definition at line <link linkend="__c_x_compilation_database_8cpp_source_1l00103">103</link> of file <link linkend="__c_x_compilation_database_8cpp_source">CXCompilationDatabase.cpp</link>.</para>
<programlisting>00104 {
00105 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!CCmd)
00106 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1a8684a35d52ccb8c623144db89a0205e1">cxstring::createNull</link>();
00107 
00108 &#32;&#32;CompileCommand&#32;*cmd&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis>CompileCommand&#32;*<emphasis role="keyword">&gt;</emphasis>(CCmd);
00109 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(cmd-&gt;Directory.c_str());
00110 }
</programlisting><para>
References <link linkend="__c_x_string_8cpp_source_1l00050">clang::cxstring::createNull()</link>, and <link linkend="__c_x_string_8cpp_source_1l00057">clang::cxstring::createRef()</link>.</para>
    </section><anchor xml:id="__c_x_compilation_database_8cpp_1a6908c5b30441ae18503639733946c966"/>    <section>
    <title>clang_CompileCommand_getFilename()</title>
<indexterm><primary>clang_CompileCommand_getFilename</primary><secondary>CXCompilationDatabase.cpp</secondary></indexterm>
<indexterm><primary>CXCompilationDatabase.cpp</primary><secondary>clang_CompileCommand_getFilename</secondary></indexterm>
<para><computeroutput>CXString clang_CompileCommand_getFilename (CXCompileCommand CCmd)</computeroutput></para><para>
Definition at line <link linkend="__c_x_compilation_database_8cpp_source_1l00113">113</link> of file <link linkend="__c_x_compilation_database_8cpp_source">CXCompilationDatabase.cpp</link>.</para>
<programlisting>00114 {
00115 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!CCmd)
00116 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1a8684a35d52ccb8c623144db89a0205e1">cxstring::createNull</link>();
00117 
00118 &#32;&#32;CompileCommand&#32;*cmd&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis>CompileCommand&#32;*<emphasis role="keyword">&gt;</emphasis>(CCmd);
00119 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1abc91e0841937d19cfc9e1801ac00b3c4">cxstring::createRef</link>(cmd-&gt;Filename.c_str());
00120 }
</programlisting><para>
References <link linkend="__c_x_string_8cpp_source_1l00050">clang::cxstring::createNull()</link>, and <link linkend="__c_x_string_8cpp_source_1l00057">clang::cxstring::createRef()</link>.</para>
    </section><anchor xml:id="__c_x_compilation_database_8cpp_1acff735fb70da8367c4dfac7c7e1e9c6c"/>    <section>
    <title>clang_CompileCommand_getMappedSourceContent()</title>
<indexterm><primary>clang_CompileCommand_getMappedSourceContent</primary><secondary>CXCompilationDatabase.cpp</secondary></indexterm>
<indexterm><primary>CXCompilationDatabase.cpp</primary><secondary>clang_CompileCommand_getMappedSourceContent</secondary></indexterm>
<para><computeroutput>CXString clang_CompileCommand_getMappedSourceContent (CXCompileCommand CCmd, unsigned I)</computeroutput></para><para>
Definition at line <link linkend="__c_x_compilation_database_8cpp_source_1l00162">162</link> of file <link linkend="__c_x_compilation_database_8cpp_source">CXCompilationDatabase.cpp</link>.</para>
<programlisting>00163 {
00164 &#32;&#32;<emphasis role="comment">//&#32;Left&#32;here&#32;for&#32;backward&#32;compatibility.&#32;No&#32;mapped&#32;sources&#32;exists&#32;in&#32;the&#32;C++</emphasis>
00165 &#32;&#32;<emphasis role="comment">//&#32;backend&#32;anymore.</emphasis>
00166 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1a8684a35d52ccb8c623144db89a0205e1">cxstring::createNull</link>();
00167 }
</programlisting><para>
References <link linkend="__c_x_string_8cpp_source_1l00050">clang::cxstring::createNull()</link>.</para>
    </section><anchor xml:id="__c_x_compilation_database_8cpp_1a61c674aa4ef558bc5d53b1a5087fbca7"/>    <section>
    <title>clang_CompileCommand_getMappedSourcePath()</title>
<indexterm><primary>clang_CompileCommand_getMappedSourcePath</primary><secondary>CXCompilationDatabase.cpp</secondary></indexterm>
<indexterm><primary>CXCompilationDatabase.cpp</primary><secondary>clang_CompileCommand_getMappedSourcePath</secondary></indexterm>
<para><computeroutput>CXString clang_CompileCommand_getMappedSourcePath (CXCompileCommand CCmd, unsigned I)</computeroutput></para><para>
Definition at line <link linkend="__c_x_compilation_database_8cpp_source_1l00154">154</link> of file <link linkend="__c_x_compilation_database_8cpp_source">CXCompilationDatabase.cpp</link>.</para>
<programlisting>00155 {
00156 &#32;&#32;<emphasis role="comment">//&#32;Left&#32;here&#32;for&#32;backward&#32;compatibility.&#32;No&#32;mapped&#32;sources&#32;exists&#32;in&#32;the&#32;C++</emphasis>
00157 &#32;&#32;<emphasis role="comment">//&#32;backend&#32;anymore.</emphasis>
00158 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceclang_1_1cxstring_1a8684a35d52ccb8c623144db89a0205e1">cxstring::createNull</link>();
00159 }
</programlisting><para>
References <link linkend="__c_x_string_8cpp_source_1l00050">clang::cxstring::createNull()</link>.</para>
    </section><anchor xml:id="__c_x_compilation_database_8cpp_1a6eda59a086ae6df97bbc71d24daf1958"/>    <section>
    <title>clang_CompileCommand_getNumArgs()</title>
<indexterm><primary>clang_CompileCommand_getNumArgs</primary><secondary>CXCompilationDatabase.cpp</secondary></indexterm>
<indexterm><primary>CXCompilationDatabase.cpp</primary><secondary>clang_CompileCommand_getNumArgs</secondary></indexterm>
<para><computeroutput>unsigned clang_CompileCommand_getNumArgs (CXCompileCommand CCmd)</computeroutput></para><para>
Definition at line <link linkend="__c_x_compilation_database_8cpp_source_1l00123">123</link> of file <link linkend="__c_x_compilation_database_8cpp_source">CXCompilationDatabase.cpp</link>.</para>
<programlisting>00124 {
00125 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!CCmd)
00126 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
00127 
00128 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">static_cast&lt;</emphasis>CompileCommand&#32;*<emphasis role="keyword">&gt;</emphasis>(CCmd)-&gt;CommandLine.size();
00129 }
</programlisting>    </section><anchor xml:id="__c_x_compilation_database_8cpp_1a120523de6060d784cf8ab49a7074313a"/>    <section>
    <title>clang_CompileCommand_getNumMappedSources()</title>
<indexterm><primary>clang_CompileCommand_getNumMappedSources</primary><secondary>CXCompilationDatabase.cpp</secondary></indexterm>
<indexterm><primary>CXCompilationDatabase.cpp</primary><secondary>clang_CompileCommand_getNumMappedSources</secondary></indexterm>
<para><computeroutput>unsigned clang_CompileCommand_getNumMappedSources (CXCompileCommand CCmd)</computeroutput></para><para>
Definition at line <link linkend="__c_x_compilation_database_8cpp_source_1l00146">146</link> of file <link linkend="__c_x_compilation_database_8cpp_source">CXCompilationDatabase.cpp</link>.</para>
<programlisting>00147 {
00148 &#32;&#32;<emphasis role="comment">//&#32;Left&#32;here&#32;for&#32;backward&#32;compatibility.&#32;No&#32;mapped&#32;sources&#32;exists&#32;in&#32;the&#32;C++</emphasis>
00149 &#32;&#32;<emphasis role="comment">//&#32;backend&#32;anymore.</emphasis>
00150 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
00151 }
</programlisting>    </section><anchor xml:id="__c_x_compilation_database_8cpp_1a294a73031045578c5df99e9a557a8d0c"/>    <section>
    <title>clang_CompileCommands_dispose()</title>
<indexterm><primary>clang_CompileCommands_dispose</primary><secondary>CXCompilationDatabase.cpp</secondary></indexterm>
<indexterm><primary>CXCompilationDatabase.cpp</primary><secondary>clang_CompileCommands_dispose</secondary></indexterm>
<para><computeroutput>void clang_CompileCommands_dispose (CXCompileCommands Cmds)</computeroutput></para><para>
Definition at line <link linkend="__c_x_compilation_database_8cpp_source_1l00070">70</link> of file <link linkend="__c_x_compilation_database_8cpp_source">CXCompilationDatabase.cpp</link>.</para>
<programlisting>00071 {
00072 &#32;&#32;<emphasis role="keyword">delete</emphasis>&#32;<emphasis role="keyword">static_cast&lt;</emphasis><link linkend="_struct_allocated_c_x_compile_commands">AllocatedCXCompileCommands</link>&#32;*<emphasis role="keyword">&gt;</emphasis>(Cmds);
00073 }
</programlisting>    </section><anchor xml:id="__c_x_compilation_database_8cpp_1a11742a91b47662bc3a2624af8fb309c4"/>    <section>
    <title>clang_CompileCommands_getCommand()</title>
<indexterm><primary>clang_CompileCommands_getCommand</primary><secondary>CXCompilationDatabase.cpp</secondary></indexterm>
<indexterm><primary>CXCompilationDatabase.cpp</primary><secondary>clang_CompileCommands_getCommand</secondary></indexterm>
<para><computeroutput>CXCompileCommand clang_CompileCommands_getCommand (CXCompileCommands Cmds, unsigned I)</computeroutput></para><para>
Definition at line <link linkend="__c_x_compilation_database_8cpp_source_1l00088">88</link> of file <link linkend="__c_x_compilation_database_8cpp_source">CXCompilationDatabase.cpp</link>.</para>
<programlisting>00089 {
00090 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!Cmds)
00091 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">nullptr</emphasis>;
00092 
00093 &#32;&#32;<link linkend="_struct_allocated_c_x_compile_commands">AllocatedCXCompileCommands</link>&#32;*ACC&#32;=
00094 &#32;&#32;&#32;&#32;<emphasis role="keyword">static_cast&lt;</emphasis><link linkend="_struct_allocated_c_x_compile_commands">AllocatedCXCompileCommands</link>&#32;*<emphasis role="keyword">&gt;</emphasis>(Cmds);
00095 
00096 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(I&#32;&gt;=&#32;ACC-&gt;<link linkend="_struct_allocated_c_x_compile_commands_1aff3a84fed1f4b27ac0174197477a5bf4">CCmd</link>.size())
00097 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">nullptr</emphasis>;
00098 
00099 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;&amp;ACC-&gt;<link linkend="_struct_allocated_c_x_compile_commands_1aff3a84fed1f4b27ac0174197477a5bf4">CCmd</link>[I];
00100 }
</programlisting><para>
References <link linkend="__c_x_compilation_database_8cpp_source_1l00039">AllocatedCXCompileCommands::CCmd</link>.</para>
    </section><anchor xml:id="__c_x_compilation_database_8cpp_1a2239d1a8e88dc966670e9f4b2b321fde"/>    <section>
    <title>clang_CompileCommands_getSize()</title>
<indexterm><primary>clang_CompileCommands_getSize</primary><secondary>CXCompilationDatabase.cpp</secondary></indexterm>
<indexterm><primary>CXCompilationDatabase.cpp</primary><secondary>clang_CompileCommands_getSize</secondary></indexterm>
<para><computeroutput>unsigned clang_CompileCommands_getSize (CXCompileCommands Cmds)</computeroutput></para><para>
Definition at line <link linkend="__c_x_compilation_database_8cpp_source_1l00076">76</link> of file <link linkend="__c_x_compilation_database_8cpp_source">CXCompilationDatabase.cpp</link>.</para>
<programlisting>00077 {
00078 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!Cmds)
00079 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
00080 
00081 &#32;&#32;<link linkend="_struct_allocated_c_x_compile_commands">AllocatedCXCompileCommands</link>&#32;*ACC&#32;=
00082 &#32;&#32;&#32;&#32;<emphasis role="keyword">static_cast&lt;</emphasis><link linkend="_struct_allocated_c_x_compile_commands">AllocatedCXCompileCommands</link>&#32;*<emphasis role="keyword">&gt;</emphasis>(Cmds);
00083 
00084 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;ACC-&gt;<link linkend="_struct_allocated_c_x_compile_commands_1aff3a84fed1f4b27ac0174197477a5bf4">CCmd</link>.size();
00085 }
</programlisting><para>
References <link linkend="__c_x_compilation_database_8cpp_source_1l00039">AllocatedCXCompileCommands::CCmd</link>.</para>
</section>
</section>
</section>
