<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="__clang_repl_8cpp" xml:lang="en-US">
<title>/Users/maximilian/clang-llvm/clang/tools/clang-repl/ClangRepl.cpp File Reference</title>
<indexterm><primary>/Users/maximilian/clang-llvm/clang/tools/clang-repl/ClangRepl.cpp</primary></indexterm>
<programlisting>#include &quot;clang/Basic/Diagnostic.h&quot;
#include &quot;clang/Frontend/CompilerInstance.h&quot;
#include &quot;clang/Frontend/FrontendDiagnostic.h&quot;
#include &quot;clang/Interpreter/Interpreter.h&quot;
#include &quot;llvm/ExecutionEngine/Orc/LLJIT.h&quot;
#include &quot;llvm/LineEditor/LineEditor.h&quot;
#include &quot;llvm/Support/CommandLine.h&quot;
#include &quot;llvm/Support/ManagedStatic.h&quot;
#include &quot;llvm/Support/Signals.h&quot;
#include &quot;llvm/Support/TargetSelect.h&quot;
</programlisting><simplesect>
    <title>Functions    </title>
        <itemizedlist>
            <listitem><para>int <link linkend="__clang_repl_8cpp_1a217dbf8b442f20279ea00b898af96f52">main</link> (int argc, const char **argv)</para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Variables    </title>
        <itemizedlist>
            <listitem><para>llvm::ExitOnError <link linkend="__clang_repl_8cpp_1aa40b8256f877190e9a1f1223ce18ad16">ExitOnErr</link></para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Function Documentation</title>
<anchor xml:id="__clang_repl_8cpp_1a217dbf8b442f20279ea00b898af96f52"/>    <section>
    <title>main()</title>
<indexterm><primary>main</primary><secondary>ClangRepl.cpp</secondary></indexterm>
<indexterm><primary>ClangRepl.cpp</primary><secondary>main</secondary></indexterm>
<para><computeroutput>int main (int argc, const char ** argv)</computeroutput></para><para>
Definition at line <link linkend="__clang_repl_8cpp_source_1l00050">50</link> of file <link linkend="__clang_repl_8cpp_source">ClangRepl.cpp</link>.</para>
<programlisting>00050 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00051 &#32;&#32;<link linkend="__clang_repl_8cpp_1aa40b8256f877190e9a1f1223ce18ad16">ExitOnErr</link>.setBanner(<emphasis role="stringliteral">&quot;clang-repl:&#32;&quot;</emphasis>);
00052 &#32;&#32;llvm::cl::ParseCommandLineOptions(argc,&#32;argv);
00053 
00054 &#32;&#32;std::vector&lt;const&#32;char&#32;*&gt;&#32;ClangArgv(ClangArgs.size());
00055 &#32;&#32;std::transform(ClangArgs.begin(),&#32;ClangArgs.end(),&#32;ClangArgv.begin(),
00056 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[](<emphasis role="keyword">const</emphasis>&#32;std::string&#32;&amp;s)&#32;-&gt;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*&#32;{&#32;return&#32;s.data();&#32;});
00057 &#32;&#32;llvm::InitializeNativeTarget();
00058 &#32;&#32;llvm::InitializeNativeTargetAsmPrinter();
00059 
00060 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(OptHostSupportsJit)&#32;{
00061 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;J&#32;=&#32;llvm::orc::LLJITBuilder().create();
00062 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(J)
00063 &#32;&#32;&#32;&#32;&#32;&#32;llvm::outs()&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;true\n&quot;</emphasis>;
00064 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
00065 &#32;&#32;&#32;&#32;&#32;&#32;llvm::consumeError(J.takeError());
00066 &#32;&#32;&#32;&#32;&#32;&#32;llvm::outs()&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;false\n&quot;</emphasis>;
00067 &#32;&#32;&#32;&#32;}
00068 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
00069 &#32;&#32;}
00070 
00071 &#32;&#32;<emphasis role="comment">//&#32;FIXME:&#32;Investigate&#32;if&#32;we&#32;could&#32;use&#32;runToolOnCodeWithArgs&#32;from&#32;tooling.&#32;It</emphasis>
00072 &#32;&#32;<emphasis role="comment">//&#32;can&#32;replace&#32;the&#32;boilerplate&#32;code&#32;for&#32;creation&#32;of&#32;the&#32;compiler&#32;instance.</emphasis>
00073 &#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;CI&#32;=&#32;<link linkend="__clang_repl_8cpp_1aa40b8256f877190e9a1f1223ce18ad16">ExitOnErr</link>(clang::IncrementalCompilerBuilder::create(ClangArgv));
00074 
00075 &#32;&#32;<emphasis role="comment">//&#32;Set&#32;an&#32;error&#32;handler,&#32;so&#32;that&#32;any&#32;LLVM&#32;backend&#32;diagnostics&#32;go&#32;through&#32;our</emphasis>
00076 &#32;&#32;<emphasis role="comment">//&#32;error&#32;handler.</emphasis>
00077 &#32;&#32;llvm::install_fatal_error_handler(LLVMErrorHandler,
00078 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">void</emphasis>&#32;*<emphasis role="keyword">&gt;</emphasis>(&amp;CI-&gt;getDiagnostics()));
00079 
00080 &#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;Interp&#32;=&#32;<link linkend="__clang_repl_8cpp_1aa40b8256f877190e9a1f1223ce18ad16">ExitOnErr</link>(clang::Interpreter::create(std::move(CI)));
00081 &#32;&#32;llvm::LineEditor&#32;LE(<emphasis role="stringliteral">&quot;clang-repl&quot;</emphasis>);
00082 &#32;&#32;<emphasis role="comment">//&#32;FIXME:&#32;Add&#32;LE.setListCompleter</emphasis>
00083 &#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(llvm::Optional&lt;std::string&gt;&#32;Line&#32;=&#32;LE.readLine())&#32;{
00084 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(*Line&#32;==&#32;<emphasis role="stringliteral">&quot;quit&quot;</emphasis>)
00085 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
00086 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="keyword">auto</emphasis>&#32;Err&#32;=&#32;Interp-&gt;ParseAndExecute(*Line))
00087 &#32;&#32;&#32;&#32;&#32;&#32;llvm::logAllUnhandledErrors(std::move(Err),&#32;llvm::errs(),&#32;<emphasis role="stringliteral">&quot;error:&#32;&quot;</emphasis>);
00088 &#32;&#32;}
00089 
00090 &#32;&#32;<emphasis role="comment">//&#32;Our&#32;error&#32;handler&#32;depends&#32;on&#32;the&#32;Diagnostics&#32;object,&#32;which&#32;we&apos;re</emphasis>
00091 &#32;&#32;<emphasis role="comment">//&#32;potentially&#32;about&#32;to&#32;delete.&#32;Uninstall&#32;the&#32;handler&#32;now&#32;so&#32;that&#32;any</emphasis>
00092 &#32;&#32;<emphasis role="comment">//&#32;later&#32;errors&#32;use&#32;the&#32;default&#32;handling&#32;behavior&#32;instead.</emphasis>
00093 &#32;&#32;llvm::remove_fatal_error_handler();
00094 
00095 &#32;&#32;llvm::llvm_shutdown();
00096 
00097 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
00098 }
</programlisting><para>
References <link linkend="__clang_repl_8cpp_source_1l00049">ExitOnErr</link>.</para>
</section>
</section>
<section>
<title>Variable Documentation</title>
<anchor xml:id="__clang_repl_8cpp_1aa40b8256f877190e9a1f1223ce18ad16"/>    <section>
    <title>ExitOnErr</title>
<indexterm><primary>ExitOnErr</primary><secondary>ClangRepl.cpp</secondary></indexterm>
<indexterm><primary>ClangRepl.cpp</primary><secondary>ExitOnErr</secondary></indexterm>
<para><computeroutput>llvm::ExitOnError ExitOnErr</computeroutput></para><para>
Definition at line <link linkend="__clang_repl_8cpp_source_1l00049">49</link> of file <link linkend="__clang_repl_8cpp_source">ClangRepl.cpp</link>.</para>
<para>
Referenced by <link linkend="__clang_repl_8cpp_source_1l00050">main()</link>.</para>
</section>
</section>
</section>
