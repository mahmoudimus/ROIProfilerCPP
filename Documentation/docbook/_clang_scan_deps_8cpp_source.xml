<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="__clang_scan_deps_8cpp_source" xml:lang="en-US">
<title>ClangScanDeps.cpp</title>
<indexterm><primary>/Users/maximilian/clang-llvm/clang/tools/clang-scan-deps/ClangScanDeps.cpp</primary></indexterm>
<programlisting>00001 <emphasis role="comment">//===-&#32;ClangScanDeps.cpp&#32;-&#32;Implementation&#32;of&#32;clang-scan-deps&#32;--------------===//</emphasis>
00002 <emphasis role="comment">//</emphasis>
00003 <emphasis role="comment">//&#32;Part&#32;of&#32;the&#32;LLVM&#32;Project,&#32;under&#32;the&#32;Apache&#32;License&#32;v2.0&#32;with&#32;LLVM&#32;Exceptions.</emphasis>
00004 <emphasis role="comment">//&#32;See&#32;https://llvm.org/LICENSE.txt&#32;for&#32;license&#32;information.</emphasis>
00005 <emphasis role="comment">//&#32;SPDX-License-Identifier:&#32;Apache-2.0&#32;WITH&#32;LLVM-exception</emphasis>
00006 <emphasis role="comment">//</emphasis>
00007 <emphasis role="comment">//===----------------------------------------------------------------------===//</emphasis>
00008 
00009 <emphasis role="preprocessor">#include&#32;&quot;clang/Frontend/CompilerInstance.h&quot;</emphasis>
00010 <emphasis role="preprocessor">#include&#32;&quot;clang/Tooling/CommonOptionsParser.h&quot;</emphasis>
00011 <emphasis role="preprocessor">#include&#32;&quot;clang/Tooling/DependencyScanning/DependencyScanningService.h&quot;</emphasis>
00012 <emphasis role="preprocessor">#include&#32;&quot;clang/Tooling/DependencyScanning/DependencyScanningTool.h&quot;</emphasis>
00013 <emphasis role="preprocessor">#include&#32;&quot;clang/Tooling/DependencyScanning/DependencyScanningWorker.h&quot;</emphasis>
00014 <emphasis role="preprocessor">#include&#32;&quot;clang/Tooling/JSONCompilationDatabase.h&quot;</emphasis>
00015 <emphasis role="preprocessor">#include&#32;&quot;llvm/ADT/STLExtras.h&quot;</emphasis>
00016 <emphasis role="preprocessor">#include&#32;&quot;llvm/ADT/Twine.h&quot;</emphasis>
00017 <emphasis role="preprocessor">#include&#32;&quot;llvm/Support/CommandLine.h&quot;</emphasis>
00018 <emphasis role="preprocessor">#include&#32;&quot;llvm/Support/FileUtilities.h&quot;</emphasis>
00019 <emphasis role="preprocessor">#include&#32;&quot;llvm/Support/InitLLVM.h&quot;</emphasis>
00020 <emphasis role="preprocessor">#include&#32;&quot;llvm/Support/JSON.h&quot;</emphasis>
00021 <emphasis role="preprocessor">#include&#32;&quot;llvm/Support/Program.h&quot;</emphasis>
00022 <emphasis role="preprocessor">#include&#32;&quot;llvm/Support/Signals.h&quot;</emphasis>
00023 <emphasis role="preprocessor">#include&#32;&quot;llvm/Support/ThreadPool.h&quot;</emphasis>
00024 <emphasis role="preprocessor">#include&#32;&quot;llvm/Support/Threading.h&quot;</emphasis>
00025 <emphasis role="preprocessor">#include&#32;&lt;mutex&gt;</emphasis>
00026 <emphasis role="preprocessor">#include&#32;&lt;thread&gt;</emphasis>
00027 
00028 <emphasis role="keyword">using&#32;namespace&#32;</emphasis><link linkend="_namespaceclang">clang</link>;
00029 <emphasis role="keyword">using&#32;namespace&#32;</emphasis>tooling::dependencies;
00030 
00031 <emphasis role="keyword">namespace&#32;</emphasis>{
00032 
00033 <emphasis role="keyword">class&#32;</emphasis>SharedStream&#32;{
00034 <emphasis role="keyword">public</emphasis>:
00035 &#32;&#32;SharedStream(raw_ostream&#32;&amp;OS)&#32;:&#32;OS(OS)&#32;{}
00036 &#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;applyLocked(llvm::function_ref&lt;<emphasis role="keywordtype">void</emphasis>(raw_ostream&#32;&amp;OS)&gt;&#32;Fn)&#32;{
00037 &#32;&#32;&#32;&#32;std::unique_lock&lt;std::mutex&gt;&#32;LockGuard(Lock);
00038 &#32;&#32;&#32;&#32;Fn(OS);
00039 &#32;&#32;&#32;&#32;OS.flush();
00040 &#32;&#32;}
00041 
00042 <emphasis role="keyword">private</emphasis>:
00043 &#32;&#32;std::mutex&#32;Lock;
00044 &#32;&#32;raw_ostream&#32;&amp;OS;
00045 };
00046 
00047 <emphasis role="keyword">class&#32;</emphasis>ResourceDirectoryCache&#32;{
00048 <emphasis role="keyword">public</emphasis>:
00054 &#32;&#32;StringRef&#32;findResourceDir(<emphasis role="keyword">const</emphasis>&#32;tooling::CommandLineArguments&#32;&amp;Args,
00055 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;ClangCLMode)&#32;{
00056 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(Args.size()&#32;&lt;&#32;1)
00057 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="stringliteral">&quot;&quot;</emphasis>;
00058 
00059 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;std::string&#32;&amp;ClangBinaryPath&#32;=&#32;Args[0];
00060 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!llvm::sys::path::is_absolute(ClangBinaryPath))
00061 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="stringliteral">&quot;&quot;</emphasis>;
00062 
00063 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;std::string&#32;&amp;ClangBinaryName&#32;=
00064 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::string(llvm::sys::path::filename(ClangBinaryPath));
00065 
00066 &#32;&#32;&#32;&#32;std::unique_lock&lt;std::mutex&gt;&#32;LockGuard(CacheLock);
00067 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;&amp;CachedResourceDir&#32;=&#32;Cache.find(ClangBinaryPath);
00068 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(CachedResourceDir&#32;!=&#32;Cache.end())
00069 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;CachedResourceDir-&gt;second;
00070 
00071 &#32;&#32;&#32;&#32;std::vector&lt;StringRef&gt;&#32;PrintResourceDirArgs{ClangBinaryName};
00072 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(ClangCLMode)
00073 &#32;&#32;&#32;&#32;&#32;&#32;PrintResourceDirArgs.push_back(<emphasis role="stringliteral">&quot;/clang:-print-resource-dir&quot;</emphasis>);
00074 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
00075 &#32;&#32;&#32;&#32;&#32;&#32;PrintResourceDirArgs.push_back(<emphasis role="stringliteral">&quot;-print-resource-dir&quot;</emphasis>);
00076 
00077 &#32;&#32;&#32;&#32;llvm::SmallString&lt;64&gt;&#32;OutputFile,&#32;ErrorFile;
00078 &#32;&#32;&#32;&#32;llvm::sys::fs::createTemporaryFile(<emphasis role="stringliteral">&quot;print-resource-dir-output&quot;</emphasis>,
00079 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;&quot;</emphasis>&#32;<emphasis role="comment">/*no-suffix*/</emphasis>,&#32;OutputFile);
00080 &#32;&#32;&#32;&#32;llvm::sys::fs::createTemporaryFile(<emphasis role="stringliteral">&quot;print-resource-dir-error&quot;</emphasis>,
00081 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;&quot;</emphasis>&#32;<emphasis role="comment">/*no-suffix*/</emphasis>,&#32;ErrorFile);
00082 &#32;&#32;&#32;&#32;llvm::FileRemover&#32;OutputRemover(OutputFile.c_str());
00083 &#32;&#32;&#32;&#32;llvm::FileRemover&#32;ErrorRemover(ErrorFile.c_str());
00084 &#32;&#32;&#32;&#32;llvm::Optional&lt;StringRef&gt;&#32;Redirects[]&#32;=&#32;{
00085 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{<emphasis role="stringliteral">&quot;&quot;</emphasis>},&#32;<emphasis role="comment">//&#32;Stdin</emphasis>
00086 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;StringRef(OutputFile),
00087 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;StringRef(ErrorFile),
00088 &#32;&#32;&#32;&#32;};
00089 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;RC&#32;=&#32;llvm::sys::ExecuteAndWait(
00090 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ClangBinaryPath,&#32;PrintResourceDirArgs,&#32;{},&#32;Redirects))&#32;{
00091 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;ErrorBuf&#32;=&#32;llvm::MemoryBuffer::getFile(ErrorFile.c_str());
00092 &#32;&#32;&#32;&#32;&#32;&#32;llvm::errs()&#32;&lt;&lt;&#32;ErrorBuf.get()-&gt;getBuffer();
00093 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="stringliteral">&quot;&quot;</emphasis>;
00094 &#32;&#32;&#32;&#32;}
00095 
00096 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;OutputBuf&#32;=&#32;llvm::MemoryBuffer::getFile(OutputFile.c_str());
00097 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!OutputBuf)
00098 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="stringliteral">&quot;&quot;</emphasis>;
00099 &#32;&#32;&#32;&#32;StringRef&#32;Output&#32;=&#32;OutputBuf.get()-&gt;getBuffer().rtrim(<emphasis role="charliteral">&apos;\n&apos;</emphasis>);
00100 
00101 &#32;&#32;&#32;&#32;Cache[ClangBinaryPath]&#32;=&#32;Output.str();
00102 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;Cache[ClangBinaryPath];
00103 &#32;&#32;}
00104 
00105 <emphasis role="keyword">private</emphasis>:
00106 &#32;&#32;std::map&lt;std::string,&#32;std::string&gt;&#32;Cache;
00107 &#32;&#32;std::mutex&#32;CacheLock;
00108 };
00109 
00110 llvm::cl::opt&lt;bool&gt;&#32;Help(<emphasis role="stringliteral">&quot;h&quot;</emphasis>,&#32;llvm::cl::desc(<emphasis role="stringliteral">&quot;Alias&#32;for&#32;-help&quot;</emphasis>),
00111 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;llvm::cl::Hidden);
00112 
00113 llvm::cl::OptionCategory&#32;DependencyScannerCategory(<emphasis role="stringliteral">&quot;Tool&#32;options&quot;</emphasis>);
00114 
00115 <emphasis role="keyword">static</emphasis>&#32;llvm::cl::opt&lt;ScanningMode&gt;&#32;ScanMode(
00116 &#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;mode&quot;</emphasis>,
00117 &#32;&#32;&#32;&#32;llvm::cl::desc(<emphasis role="stringliteral">&quot;The&#32;preprocessing&#32;mode&#32;used&#32;to&#32;compute&#32;the&#32;dependencies&quot;</emphasis>),
00118 &#32;&#32;&#32;&#32;llvm::cl::values(
00119 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;clEnumValN(ScanningMode::MinimizedSourcePreprocessing,
00120 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;preprocess-minimized-sources&quot;</emphasis>,
00121 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;The&#32;set&#32;of&#32;dependencies&#32;is&#32;computed&#32;by&#32;preprocessing&#32;the&#32;&quot;</emphasis>
00122 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;source&#32;files&#32;that&#32;were&#32;minimized&#32;to&#32;only&#32;include&#32;the&#32;&quot;</emphasis>
00123 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;contents&#32;that&#32;might&#32;affect&#32;the&#32;dependencies&quot;</emphasis>),
00124 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;clEnumValN(ScanningMode::CanonicalPreprocessing,&#32;<emphasis role="stringliteral">&quot;preprocess&quot;</emphasis>,
00125 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;The&#32;set&#32;of&#32;dependencies&#32;is&#32;computed&#32;by&#32;preprocessing&#32;the&#32;&quot;</emphasis>
00126 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;unmodified&#32;source&#32;files&quot;</emphasis>)),
00127 &#32;&#32;&#32;&#32;llvm::cl::init(ScanningMode::MinimizedSourcePreprocessing),
00128 &#32;&#32;&#32;&#32;llvm::cl::cat(DependencyScannerCategory));
00129 
00130 <emphasis role="keyword">static</emphasis>&#32;llvm::cl::opt&lt;ScanningOutputFormat&gt;&#32;Format(
00131 &#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;format&quot;</emphasis>,&#32;llvm::cl::desc(<emphasis role="stringliteral">&quot;The&#32;output&#32;format&#32;for&#32;the&#32;dependencies&quot;</emphasis>),
00132 &#32;&#32;&#32;&#32;llvm::cl::values(clEnumValN(ScanningOutputFormat::Make,&#32;<emphasis role="stringliteral">&quot;make&quot;</emphasis>,
00133 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;Makefile&#32;compatible&#32;dep&#32;file&quot;</emphasis>),
00134 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;clEnumValN(ScanningOutputFormat::Full,&#32;<emphasis role="stringliteral">&quot;experimental-full&quot;</emphasis>,
00135 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;Full&#32;dependency&#32;graph&#32;suitable&quot;</emphasis>
00136 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;&#32;for&#32;explicitly&#32;building&#32;modules.&#32;This&#32;format&#32;&quot;</emphasis>
00137 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;is&#32;experimental&#32;and&#32;will&#32;change.&quot;</emphasis>)),
00138 &#32;&#32;&#32;&#32;llvm::cl::init(ScanningOutputFormat::Make),
00139 &#32;&#32;&#32;&#32;llvm::cl::cat(DependencyScannerCategory));
00140 
00141 <emphasis role="comment">//&#32;This&#32;mode&#32;is&#32;mostly&#32;useful&#32;for&#32;development&#32;of&#32;explicitly&#32;built&#32;modules.</emphasis>
00142 <emphasis role="comment">//&#32;Command&#32;lines&#32;will&#32;contain&#32;arguments&#32;specifying&#32;modulemap&#32;file&#32;paths&#32;and</emphasis>
00143 <emphasis role="comment">//&#32;absolute&#32;paths&#32;to&#32;PCM&#32;files&#32;in&#32;the&#32;module&#32;cache&#32;directory.</emphasis>
00144 <emphasis role="comment">//</emphasis>
00145 <emphasis role="comment">//&#32;Build&#32;tools&#32;that&#32;want&#32;to&#32;put&#32;the&#32;PCM&#32;files&#32;in&#32;a&#32;different&#32;location&#32;should&#32;use</emphasis>
00146 <emphasis role="comment">//&#32;the&#32;C++&#32;APIs&#32;instead,&#32;of&#32;which&#32;there&#32;are&#32;two&#32;flavors:</emphasis>
00147 <emphasis role="comment">//</emphasis>
00148 <emphasis role="comment">//&#32;1.&#32;APIs&#32;that&#32;generate&#32;arguments&#32;with&#32;paths&#32;to&#32;modulemap&#32;and&#32;PCM&#32;files&#32;via</emphasis>
00149 <emphasis role="comment">//&#32;&#32;&#32;&#32;callbacks&#32;provided&#32;by&#32;the&#32;client:</emphasis>
00150 <emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;*&#32;ModuleDeps::getCanonicalCommandLine(LookupPCMPath,&#32;LookupModuleDeps)</emphasis>
00151 <emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;*&#32;FullDependencies::getAdditionalArgs(LookupPCMPath,&#32;LookupModuleDeps)</emphasis>
00152 <emphasis role="comment">//</emphasis>
00153 <emphasis role="comment">//&#32;2.&#32;APIs&#32;that&#32;don&apos;t&#32;generate&#32;arguments&#32;with&#32;paths&#32;to&#32;modulemap&#32;or&#32;PCM&#32;files</emphasis>
00154 <emphasis role="comment">//&#32;&#32;&#32;&#32;and&#32;instead&#32;expect&#32;the&#32;client&#32;to&#32;append&#32;them&#32;manually&#32;after&#32;the&#32;fact:</emphasis>
00155 <emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;*&#32;ModuleDeps::getCanonicalCommandLineWithoutModulePaths()</emphasis>
00156 <emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;*&#32;FullDependencies::getAdditionalArgsWithoutModulePaths()</emphasis>
00157 <emphasis role="comment">//</emphasis>
00158 <emphasis role="keyword">static</emphasis>&#32;llvm::cl::opt&lt;bool&gt;&#32;GenerateModulesPathArgs(
00159 &#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;generate-modules-path-args&quot;</emphasis>,
00160 &#32;&#32;&#32;&#32;llvm::cl::desc(
00161 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;With&#32;&apos;-format&#32;experimental-full&apos;,&#32;include&#32;arguments&#32;specifying&#32;&quot;</emphasis>
00162 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;modules-related&#32;paths&#32;in&#32;the&#32;generated&#32;command&#32;lines:&#32;&quot;</emphasis>
00163 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;&apos;-fmodule-file=&apos;,&#32;&apos;-o&apos;,&#32;&apos;-fmodule-map-file=&apos;.&quot;</emphasis>),
00164 &#32;&#32;&#32;&#32;llvm::cl::init(<emphasis role="keyword">false</emphasis>),&#32;llvm::cl::cat(DependencyScannerCategory));
00165 
00166 <emphasis role="keyword">static</emphasis>&#32;llvm::cl::opt&lt;std::string&gt;&#32;ModuleFilesDir(
00167 &#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;module-files-dir&quot;</emphasis>,
00168 &#32;&#32;&#32;&#32;llvm::cl::desc(<emphasis role="stringliteral">&quot;With&#32;&apos;-generate-modules-path-args&apos;,&#32;paths&#32;to&#32;module&#32;files&#32;&quot;</emphasis>
00169 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;in&#32;the&#32;generated&#32;command&#32;lines&#32;will&#32;begin&#32;with&#32;the&#32;&quot;</emphasis>
00170 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;specified&#32;directory&#32;instead&#32;the&#32;module&#32;cache&#32;directory.&quot;</emphasis>),
00171 &#32;&#32;&#32;&#32;llvm::cl::cat(DependencyScannerCategory));
00172 
00173 llvm::cl::opt&lt;unsigned&gt;
00174 &#32;&#32;&#32;&#32;NumThreads(<emphasis role="stringliteral">&quot;j&quot;</emphasis>,&#32;llvm::cl::Optional,
00175 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;llvm::cl::desc(<emphasis role="stringliteral">&quot;Number&#32;of&#32;worker&#32;threads&#32;to&#32;use&#32;(default:&#32;use&#32;&quot;</emphasis>
00176 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;all&#32;concurrent&#32;threads)&quot;</emphasis>),
00177 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;llvm::cl::init(0),&#32;llvm::cl::cat(DependencyScannerCategory));
00178 
00179 llvm::cl::opt&lt;std::string&gt;
00180 &#32;&#32;&#32;&#32;CompilationDB(<emphasis role="stringliteral">&quot;compilation-database&quot;</emphasis>,
00181 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;llvm::cl::desc(<emphasis role="stringliteral">&quot;Compilation&#32;database&quot;</emphasis>),&#32;llvm::cl::Required,
00182 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;llvm::cl::cat(DependencyScannerCategory));
00183 
00184 llvm::cl::opt&lt;bool&gt;&#32;ReuseFileManager(
00185 &#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;reuse-filemanager&quot;</emphasis>,
00186 &#32;&#32;&#32;&#32;llvm::cl::desc(<emphasis role="stringliteral">&quot;Reuse&#32;the&#32;file&#32;manager&#32;and&#32;its&#32;cache&#32;between&#32;invocations.&quot;</emphasis>),
00187 &#32;&#32;&#32;&#32;llvm::cl::init(<emphasis role="keyword">true</emphasis>),&#32;llvm::cl::cat(DependencyScannerCategory));
00188 
00189 llvm::cl::opt&lt;bool&gt;&#32;SkipExcludedPPRanges(
00190 &#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;skip-excluded-pp-ranges&quot;</emphasis>,
00191 &#32;&#32;&#32;&#32;llvm::cl::desc(
00192 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;Use&#32;the&#32;preprocessor&#32;optimization&#32;that&#32;skips&#32;excluded&#32;conditionals&#32;by&#32;&quot;</emphasis>
00193 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;bumping&#32;the&#32;buffer&#32;pointer&#32;in&#32;the&#32;lexer&#32;instead&#32;of&#32;lexing&#32;the&#32;tokens&#32;&#32;&quot;</emphasis>
00194 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;until&#32;reaching&#32;the&#32;end&#32;directive.&quot;</emphasis>),
00195 &#32;&#32;&#32;&#32;llvm::cl::init(<emphasis role="keyword">true</emphasis>),&#32;llvm::cl::cat(DependencyScannerCategory));
00196 
00197 llvm::cl::opt&lt;bool&gt;&#32;Verbose(<emphasis role="stringliteral">&quot;v&quot;</emphasis>,&#32;llvm::cl::Optional,
00198 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;llvm::cl::desc(<emphasis role="stringliteral">&quot;Use&#32;verbose&#32;output.&quot;</emphasis>),
00199 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;llvm::cl::init(<emphasis role="keyword">false</emphasis>),
00200 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;llvm::cl::cat(DependencyScannerCategory));
00201 
00202 }&#32;<emphasis role="comment">//&#32;end&#32;anonymous&#32;namespace</emphasis>
00203 
<anchor xml:id="__clang_scan_deps_8cpp_source_1l00204"/><link linkend="_class_single_command_compilation_database">00204</link> <emphasis role="keyword">class&#32;</emphasis><link linkend="_class_single_command_compilation_database">SingleCommandCompilationDatabase</link>&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;tooling::CompilationDatabase&#32;{
00205 <emphasis role="keyword">public</emphasis>:
<anchor xml:id="__clang_scan_deps_8cpp_source_1l00206"/><link linkend="_class_single_command_compilation_database_1a9a25f84e7be98e2e3e70f821425ce48d">00206</link> &#32;&#32;<link linkend="_class_single_command_compilation_database_1a9a25f84e7be98e2e3e70f821425ce48d">SingleCommandCompilationDatabase</link>(tooling::CompileCommand&#32;Cmd)
00207 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;Command(std::move(Cmd))&#32;{}
00208 
00209 &#32;&#32;std::vector&lt;tooling::CompileCommand&gt;
<anchor xml:id="__clang_scan_deps_8cpp_source_1l00210"/><link linkend="_class_single_command_compilation_database_1a3b5317fd6d6ce0299695e8ffe2305648">00210</link> &#32;&#32;<link linkend="_class_single_command_compilation_database_1a3b5317fd6d6ce0299695e8ffe2305648">getCompileCommands</link>(StringRef&#32;FilePath)<emphasis role="keyword">&#32;const&#32;override&#32;</emphasis>{
00211 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{Command};
00212 &#32;&#32;}
00213 
<anchor xml:id="__clang_scan_deps_8cpp_source_1l00214"/><link linkend="_class_single_command_compilation_database_1a50bfa7b1b199d95741fa4c6515e773df">00214</link> &#32;&#32;std::vector&lt;tooling::CompileCommand&gt;&#32;<link linkend="_class_single_command_compilation_database_1a50bfa7b1b199d95741fa4c6515e773df">getAllCompileCommands</link>()<emphasis role="keyword">&#32;const&#32;override&#32;</emphasis>{
00215 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{Command};
00216 &#32;&#32;}
00217 
00218 <emphasis role="keyword">private</emphasis>:
00219 &#32;&#32;tooling::CompileCommand&#32;Command;
00220 };
00221 
00226 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
00227 handleMakeDependencyToolResult(<emphasis role="keyword">const</emphasis>&#32;std::string&#32;&amp;Input,
00228 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;llvm::Expected&lt;std::string&gt;&#32;&amp;MaybeFile,
00229 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;SharedStream&#32;&amp;OS,&#32;SharedStream&#32;&amp;Errs)&#32;{
00230 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!MaybeFile)&#32;{
00231 &#32;&#32;&#32;&#32;llvm::handleAllErrors(
00232 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;MaybeFile.takeError(),&#32;[&amp;Input,&#32;&amp;Errs](llvm::StringError&#32;&amp;Err)&#32;{
00233 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Errs.applyLocked([&amp;](raw_ostream&#32;&amp;OS)&#32;{
00234 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;OS&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;Error&#32;while&#32;scanning&#32;dependencies&#32;for&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;Input&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;:\n&quot;</emphasis>;
00235 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;OS&#32;&lt;&lt;&#32;Err.getMessage();
00236 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;});
00237 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;});
00238 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
00239 &#32;&#32;}
00240 &#32;&#32;OS.applyLocked([&amp;](raw_ostream&#32;&amp;OS)&#32;{&#32;OS&#32;&lt;&lt;&#32;*MaybeFile;&#32;});
00241 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
00242 }
00243 
00244 <emphasis role="keyword">static</emphasis>&#32;llvm::json::Array&#32;toJSONSorted(<emphasis role="keyword">const</emphasis>&#32;llvm::StringSet&lt;&gt;&#32;&amp;Set)&#32;{
00245 &#32;&#32;std::vector&lt;llvm::StringRef&gt;&#32;<link linkend="__c_x_loaded_diagnostic_8cpp_1a43f230387ba6f0bf2e696b6029b136bb">Strings</link>;
00246 &#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">auto</emphasis>&#32;&amp;&amp;I&#32;:&#32;Set)
00247 &#32;&#32;&#32;&#32;<link linkend="__c_x_loaded_diagnostic_8cpp_1a43f230387ba6f0bf2e696b6029b136bb">Strings</link>.push_back(I.getKey());
00248 &#32;&#32;llvm::sort(<link linkend="__c_x_loaded_diagnostic_8cpp_1a43f230387ba6f0bf2e696b6029b136bb">Strings</link>);
00249 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;llvm::json::Array(<link linkend="__c_x_loaded_diagnostic_8cpp_1a43f230387ba6f0bf2e696b6029b136bb">Strings</link>);
00250 }
00251 
00252 <emphasis role="keyword">static</emphasis>&#32;llvm::json::Array&#32;toJSONSorted(std::vector&lt;ModuleID&gt;&#32;V)&#32;{
00253 &#32;&#32;llvm::sort(V,&#32;[](<emphasis role="keyword">const</emphasis>&#32;ModuleID&#32;&amp;A,&#32;<emphasis role="keyword">const</emphasis>&#32;ModuleID&#32;&amp;B)&#32;{
00254 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::tie(A.ModuleName,&#32;A.ContextHash)&#32;&lt;
00255 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::tie(B.ModuleName,&#32;B.ContextHash);
00256 &#32;&#32;});
00257 
00258 &#32;&#32;llvm::json::Array&#32;Ret;
00259 &#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;ModuleID&#32;&amp;MID&#32;:&#32;V)
00260 &#32;&#32;&#32;&#32;Ret.push_back(llvm::json::Object(
00261 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{{<emphasis role="stringliteral">&quot;module-name&quot;</emphasis>,&#32;MID.ModuleName},&#32;{<emphasis role="stringliteral">&quot;context-hash&quot;</emphasis>,&#32;MID.ContextHash}}));
00262 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;Ret;
00263 }
00264 
00265 <emphasis role="comment">//&#32;Thread&#32;safe.</emphasis>
<anchor xml:id="__clang_scan_deps_8cpp_source_1l00266"/><link linkend="_class_full_deps">00266</link> <emphasis role="keyword">class&#32;</emphasis><link linkend="_class_full_deps">FullDeps</link>&#32;{
00267 <emphasis role="keyword">public</emphasis>:
<anchor xml:id="__clang_scan_deps_8cpp_source_1l00268"/><link linkend="_class_full_deps_1a90a35d77f844e3f4c93e1d7c27c503d1">00268</link> &#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_full_deps_1a90a35d77f844e3f4c93e1d7c27c503d1">mergeDeps</link>(StringRef&#32;Input,&#32;FullDependenciesResult&#32;FDR,
00269 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;InputIndex)&#32;{
00270 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;FullDependencies&#32;&amp;FD&#32;=&#32;FDR.FullDeps;
00271 
00272 &#32;&#32;&#32;&#32;InputDeps&#32;ID;
00273 &#32;&#32;&#32;&#32;ID.FileName&#32;=&#32;std::string(Input);
00274 &#32;&#32;&#32;&#32;ID.ContextHash&#32;=&#32;std::move(FD.ID.ContextHash);
00275 &#32;&#32;&#32;&#32;ID.FileDeps&#32;=&#32;std::move(FD.FileDeps);
00276 &#32;&#32;&#32;&#32;ID.ModuleDeps&#32;=&#32;std::move(FD.ClangModuleDeps);
00277 
00278 &#32;&#32;&#32;&#32;std::unique_lock&lt;std::mutex&gt;&#32;ul(Lock);
00279 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;ModuleDeps&#32;&amp;MD&#32;:&#32;FDR.DiscoveredModules)&#32;{
00280 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;I&#32;=&#32;Modules.find({MD.ID,&#32;0});
00281 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(I&#32;!=&#32;Modules.end())&#32;{
00282 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;I-&gt;first.InputIndex&#32;=&#32;std::min(I-&gt;first.InputIndex,&#32;InputIndex);
00283 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">continue</emphasis>;
00284 &#32;&#32;&#32;&#32;&#32;&#32;}
00285 &#32;&#32;&#32;&#32;&#32;&#32;Modules.insert(I,&#32;{{MD.ID,&#32;InputIndex},&#32;std::move(MD)});
00286 &#32;&#32;&#32;&#32;}
00287 
00288 &#32;&#32;&#32;&#32;ID.AdditionalCommandLine&#32;=
00289 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;GenerateModulesPathArgs
00290 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;?&#32;FD.getAdditionalArgs(
00291 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[&amp;](ModuleID&#32;MID)&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;lookupPCMPath(MID);&#32;},
00292 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[&amp;](ModuleID&#32;MID)&#32;-&gt;&#32;<emphasis role="keyword">const</emphasis>&#32;ModuleDeps&#32;&amp;&#32;{
00293 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;lookupModuleDeps(MID);
00294 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;})
00295 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;FD.getAdditionalArgsWithoutModulePaths();
00296 
00297 &#32;&#32;&#32;&#32;Inputs.push_back(std::move(ID));
00298 &#32;&#32;}
00299 
<anchor xml:id="__clang_scan_deps_8cpp_source_1l00300"/><link linkend="_class_full_deps_1a3a42a88ad1367c97148feb477792e39d">00300</link> &#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_full_deps_1a3a42a88ad1367c97148feb477792e39d">printFullOutput</link>(raw_ostream&#32;&amp;OS)&#32;{
00301 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Sort&#32;the&#32;modules&#32;by&#32;name&#32;to&#32;get&#32;a&#32;deterministic&#32;order.</emphasis>
00302 &#32;&#32;&#32;&#32;std::vector&lt;IndexedModuleID&gt;&#32;ModuleIDs;
00303 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">auto</emphasis>&#32;&amp;&amp;M&#32;:&#32;Modules)
00304 &#32;&#32;&#32;&#32;&#32;&#32;ModuleIDs.push_back(M.first);
00305 &#32;&#32;&#32;&#32;llvm::sort(ModuleIDs,
00306 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[](<emphasis role="keyword">const</emphasis>&#32;IndexedModuleID&#32;&amp;A,&#32;<emphasis role="keyword">const</emphasis>&#32;IndexedModuleID&#32;&amp;B)&#32;{
00307 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::tie(A.ID.ModuleName,&#32;A.InputIndex)&#32;&lt;
00308 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::tie(B.ID.ModuleName,&#32;B.InputIndex);
00309 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;});
00310 
00311 &#32;&#32;&#32;&#32;llvm::sort(Inputs,&#32;[](<emphasis role="keyword">const</emphasis>&#32;InputDeps&#32;&amp;A,&#32;<emphasis role="keyword">const</emphasis>&#32;InputDeps&#32;&amp;B)&#32;{
00312 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;A.FileName&#32;&lt;&#32;B.FileName;
00313 &#32;&#32;&#32;&#32;});
00314 
00315 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;namespace&#32;</emphasis>llvm::json;
00316 
00317 &#32;&#32;&#32;&#32;Array&#32;OutModules;
00318 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">auto</emphasis>&#32;&amp;&amp;ModID&#32;:&#32;ModuleIDs)&#32;{
00319 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;&amp;MD&#32;=&#32;Modules[ModID];
00320 &#32;&#32;&#32;&#32;&#32;&#32;Object&#32;O{
00321 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{<emphasis role="stringliteral">&quot;name&quot;</emphasis>,&#32;MD.ID.ModuleName},
00322 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{<emphasis role="stringliteral">&quot;context-hash&quot;</emphasis>,&#32;MD.ID.ContextHash},
00323 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{<emphasis role="stringliteral">&quot;file-deps&quot;</emphasis>,&#32;toJSONSorted(MD.FileDeps)},
00324 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{<emphasis role="stringliteral">&quot;clang-module-deps&quot;</emphasis>,&#32;toJSONSorted(MD.ClangModuleDeps)},
00325 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{<emphasis role="stringliteral">&quot;clang-modulemap-file&quot;</emphasis>,&#32;MD.ClangModuleMapFile},
00326 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{<emphasis role="stringliteral">&quot;command-line&quot;</emphasis>,
00327 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;GenerateModulesPathArgs
00328 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;?&#32;MD.getCanonicalCommandLine(
00329 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[&amp;](ModuleID&#32;MID)&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;lookupPCMPath(MID);&#32;},
00330 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[&amp;](ModuleID&#32;MID)&#32;-&gt;&#32;<emphasis role="keyword">const</emphasis>&#32;ModuleDeps&#32;&amp;&#32;{
00331 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;lookupModuleDeps(MID);
00332 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;})
00333 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;MD.getCanonicalCommandLineWithoutModulePaths()},
00334 &#32;&#32;&#32;&#32;&#32;&#32;};
00335 &#32;&#32;&#32;&#32;&#32;&#32;OutModules.push_back(std::move(O));
00336 &#32;&#32;&#32;&#32;}
00337 
00338 &#32;&#32;&#32;&#32;Array&#32;TUs;
00339 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">auto</emphasis>&#32;&amp;&amp;I&#32;:&#32;Inputs)&#32;{
00340 &#32;&#32;&#32;&#32;&#32;&#32;Object&#32;O{
00341 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{<emphasis role="stringliteral">&quot;input-file&quot;</emphasis>,&#32;I.FileName},
00342 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{<emphasis role="stringliteral">&quot;clang-context-hash&quot;</emphasis>,&#32;I.ContextHash},
00343 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{<emphasis role="stringliteral">&quot;file-deps&quot;</emphasis>,&#32;I.FileDeps},
00344 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{<emphasis role="stringliteral">&quot;clang-module-deps&quot;</emphasis>,&#32;toJSONSorted(I.ModuleDeps)},
00345 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{<emphasis role="stringliteral">&quot;command-line&quot;</emphasis>,&#32;I.AdditionalCommandLine},
00346 &#32;&#32;&#32;&#32;&#32;&#32;};
00347 &#32;&#32;&#32;&#32;&#32;&#32;TUs.push_back(std::move(O));
00348 &#32;&#32;&#32;&#32;}
00349 
00350 &#32;&#32;&#32;&#32;Object&#32;Output{
00351 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{<emphasis role="stringliteral">&quot;modules&quot;</emphasis>,&#32;std::move(OutModules)},
00352 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{<emphasis role="stringliteral">&quot;translation-units&quot;</emphasis>,&#32;std::move(TUs)},
00353 &#32;&#32;&#32;&#32;};
00354 
00355 &#32;&#32;&#32;&#32;OS&#32;&lt;&lt;&#32;llvm::formatv(<emphasis role="stringliteral">&quot;{0:2}\n&quot;</emphasis>,&#32;Value(std::move(Output)));
00356 &#32;&#32;}
00357 
00358 <emphasis role="keyword">private</emphasis>:
00359 &#32;&#32;StringRef&#32;lookupPCMPath(ModuleID&#32;MID)&#32;{
00360 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;PCMPath&#32;=&#32;PCMPaths.insert({MID,&#32;<emphasis role="stringliteral">&quot;&quot;</emphasis>});
00361 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(PCMPath.second)
00362 &#32;&#32;&#32;&#32;&#32;&#32;PCMPath.first-&gt;second&#32;=&#32;constructPCMPath(lookupModuleDeps(MID));
00363 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;PCMPath.first-&gt;second;
00364 &#32;&#32;}
00365 
00367 &#32;&#32;std::string&#32;constructPCMPath(<emphasis role="keyword">const</emphasis>&#32;ModuleDeps&#32;&amp;MD)<emphasis role="keyword">&#32;const&#32;</emphasis>{
00368 &#32;&#32;&#32;&#32;StringRef&#32;Filename&#32;=&#32;llvm::sys::path::filename(MD.ImplicitModulePCMPath);
00369 
00370 &#32;&#32;&#32;&#32;SmallString&lt;256&gt;&#32;ExplicitPCMPath(
00371 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;!ModuleFilesDir.empty()
00372 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;?&#32;ModuleFilesDir
00373 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;MD.Invocation.getHeaderSearchOpts().ModuleCachePath);
00374 &#32;&#32;&#32;&#32;llvm::sys::path::append(ExplicitPCMPath,&#32;MD.ID.ContextHash,&#32;Filename);
00375 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::string(ExplicitPCMPath);
00376 &#32;&#32;}
00377 
00378 &#32;&#32;<emphasis role="keyword">const</emphasis>&#32;ModuleDeps&#32;&amp;lookupModuleDeps(ModuleID&#32;MID)&#32;{
00379 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;I&#32;=&#32;Modules.find(IndexedModuleID{MID,&#32;0});
00380 &#32;&#32;&#32;&#32;assert(I&#32;!=&#32;Modules.end());
00381 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;I-&gt;second;
00382 &#32;&#32;};
00383 
00384 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>IndexedModuleID&#32;{
00385 &#32;&#32;&#32;&#32;ModuleID&#32;ID;
00386 &#32;&#32;&#32;&#32;<emphasis role="keyword">mutable</emphasis>&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;InputIndex;
00387 
00388 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_namespaceclang_1_1cxcursor_1a6eba9b639ae06e944e28d8a44767cf72">operator==</link>(<emphasis role="keyword">const</emphasis>&#32;IndexedModuleID&#32;&amp;Other)<emphasis role="keyword">&#32;const&#32;</emphasis>{
00389 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;ID.ModuleName&#32;==&#32;Other.ID.ModuleName&#32;&amp;&amp;
00390 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ID.ContextHash&#32;==&#32;Other.ID.ContextHash;
00391 &#32;&#32;&#32;&#32;}
00392 &#32;&#32;};
00393 
00394 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>IndexedModuleIDHasher&#32;{
00395 &#32;&#32;&#32;&#32;std::size_t&#32;operator()(<emphasis role="keyword">const</emphasis>&#32;IndexedModuleID&#32;&amp;IMID)<emphasis role="keyword">&#32;const&#32;</emphasis>{
00396 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using</emphasis>&#32;llvm::hash_combine;
00397 
00398 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;hash_combine(IMID.ID.ModuleName,&#32;IMID.ID.ContextHash);
00399 &#32;&#32;&#32;&#32;}
00400 &#32;&#32;};
00401 
00402 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>InputDeps&#32;{
00403 &#32;&#32;&#32;&#32;std::string&#32;FileName;
00404 &#32;&#32;&#32;&#32;std::string&#32;ContextHash;
00405 &#32;&#32;&#32;&#32;std::vector&lt;std::string&gt;&#32;FileDeps;
00406 &#32;&#32;&#32;&#32;std::vector&lt;ModuleID&gt;&#32;ModuleDeps;
00407 &#32;&#32;&#32;&#32;std::vector&lt;std::string&gt;&#32;AdditionalCommandLine;
00408 &#32;&#32;};
00409 
00410 &#32;&#32;std::mutex&#32;Lock;
00411 &#32;&#32;std::unordered_map&lt;IndexedModuleID,&#32;ModuleDeps,&#32;IndexedModuleIDHasher&gt;
00412 &#32;&#32;&#32;&#32;&#32;&#32;Modules;
00413 &#32;&#32;std::unordered_map&lt;ModuleID,&#32;std::string,&#32;ModuleIDHasher&gt;&#32;PCMPaths;
00414 &#32;&#32;std::vector&lt;InputDeps&gt;&#32;Inputs;
00415 };
00416 
00417 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;handleFullDependencyToolResult(
00418 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;std::string&#32;&amp;Input,
00419 &#32;&#32;&#32;&#32;llvm::Expected&lt;FullDependenciesResult&gt;&#32;&amp;MaybeFullDeps,&#32;<link linkend="_class_full_deps">FullDeps</link>&#32;&amp;FD,
00420 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;InputIndex,&#32;SharedStream&#32;&amp;OS,&#32;SharedStream&#32;&amp;Errs)&#32;{
00421 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!MaybeFullDeps)&#32;{
00422 &#32;&#32;&#32;&#32;llvm::handleAllErrors(
00423 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;MaybeFullDeps.takeError(),&#32;[&amp;Input,&#32;&amp;Errs](llvm::StringError&#32;&amp;Err)&#32;{
00424 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Errs.applyLocked([&amp;](raw_ostream&#32;&amp;OS)&#32;{
00425 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;OS&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;Error&#32;while&#32;scanning&#32;dependencies&#32;for&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;Input&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;:\n&quot;</emphasis>;
00426 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;OS&#32;&lt;&lt;&#32;Err.getMessage();
00427 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;});
00428 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;});
00429 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
00430 &#32;&#32;}
00431 &#32;&#32;FD.<link linkend="_class_full_deps_1a90a35d77f844e3f4c93e1d7c27c503d1">mergeDeps</link>(Input,&#32;std::move(*MaybeFullDeps),&#32;InputIndex);
00432 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
00433 }
00434 
<anchor xml:id="__clang_scan_deps_8cpp_source_1l00435"/><link linkend="__clang_scan_deps_8cpp_1a217dbf8b442f20279ea00b898af96f52">00435</link> <emphasis role="keywordtype">int</emphasis>&#32;<link linkend="__clang_scan_deps_8cpp_1a217dbf8b442f20279ea00b898af96f52">main</link>(<emphasis role="keywordtype">int</emphasis>&#32;argc,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;**argv)&#32;{
00436 &#32;&#32;llvm::InitLLVM&#32;X(argc,&#32;argv);
00437 &#32;&#32;llvm::cl::HideUnrelatedOptions(DependencyScannerCategory);
00438 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!llvm::cl::ParseCommandLineOptions(argc,&#32;argv))
00439 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;1;
00440 
00441 &#32;&#32;std::string&#32;ErrorMessage;
00442 &#32;&#32;std::unique_ptr&lt;tooling::JSONCompilationDatabase&gt;&#32;Compilations&#32;=
00443 &#32;&#32;&#32;&#32;&#32;&#32;tooling::JSONCompilationDatabase::loadFromFile(
00444 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;CompilationDB,&#32;ErrorMessage,
00445 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;tooling::JSONCommandLineSyntax::AutoDetect);
00446 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!Compilations)&#32;{
00447 &#32;&#32;&#32;&#32;llvm::errs()&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;error:&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;ErrorMessage&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;\n&quot;</emphasis>;
00448 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;1;
00449 &#32;&#32;}
00450 
00451 &#32;&#32;llvm::cl::PrintOptionValues();
00452 
00453 &#32;&#32;<emphasis role="comment">//&#32;The&#32;command&#32;options&#32;are&#32;rewritten&#32;to&#32;run&#32;Clang&#32;in&#32;preprocessor&#32;only&#32;mode.</emphasis>
00454 &#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;AdjustingCompilations&#32;=
00455 &#32;&#32;&#32;&#32;&#32;&#32;std::make_unique&lt;tooling::ArgumentsAdjustingCompilations&gt;(
00456 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::move(Compilations));
00457 &#32;&#32;ResourceDirectoryCache&#32;ResourceDirCache;
00458 
00459 &#32;&#32;AdjustingCompilations-&gt;appendArgumentsAdjuster(
00460 &#32;&#32;&#32;&#32;&#32;&#32;[&amp;ResourceDirCache](<emphasis role="keyword">const</emphasis>&#32;tooling::CommandLineArguments&#32;&amp;Args,
00461 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;StringRef&#32;FileName)&#32;{
00462 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::string&#32;LastO&#32;=&#32;<emphasis role="stringliteral">&quot;&quot;</emphasis>;
00463 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;HasResourceDir&#32;=&#32;<emphasis role="keyword">false</emphasis>;
00464 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;ClangCLMode&#32;=&#32;<emphasis role="keyword">false</emphasis>;
00465 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;FlagsEnd&#32;=&#32;llvm::find(Args,&#32;<emphasis role="stringliteral">&quot;--&quot;</emphasis>);
00466 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(FlagsEnd&#32;!=&#32;Args.begin())&#32;{
00467 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ClangCLMode&#32;=
00468 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;llvm::sys::path::stem(Args[0]).contains_insensitive(<emphasis role="stringliteral">&quot;clang-cl&quot;</emphasis>)&#32;||
00469 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;llvm::is_contained(Args,&#32;<emphasis role="stringliteral">&quot;--driver-mode=cl&quot;</emphasis>);
00470 
00471 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Reverse&#32;scan,&#32;starting&#32;at&#32;the&#32;end&#32;or&#32;at&#32;the&#32;element&#32;before&#32;&quot;--&quot;.</emphasis>
00472 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;R&#32;=&#32;llvm::make_reverse_iterator(FlagsEnd);
00473 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">auto</emphasis>&#32;I&#32;=&#32;R,&#32;E&#32;=&#32;Args.rend();&#32;I&#32;!=&#32;E;&#32;++I)&#32;{
00474 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;StringRef&#32;Arg&#32;=&#32;*I;
00475 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(ClangCLMode)&#32;{
00476 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Ignore&#32;arguments&#32;that&#32;are&#32;preceded&#32;by&#32;&quot;-Xclang&quot;.</emphasis>
00477 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;((I&#32;+&#32;1)&#32;!=&#32;E&#32;&amp;&amp;&#32;I[1]&#32;==&#32;<emphasis role="stringliteral">&quot;-Xclang&quot;</emphasis>)
00478 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">continue</emphasis>;
00479 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(LastO.empty())&#32;{
00480 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;With&#32;clang-cl,&#32;the&#32;output&#32;obj&#32;file&#32;can&#32;be&#32;specified&#32;with</emphasis>
00481 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&quot;/opath&quot;,&#32;&quot;/o&#32;path&quot;,&#32;&quot;/Fopath&quot;,&#32;and&#32;the&#32;dash&#32;counterparts.</emphasis>
00482 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Also,&#32;clang-cl&#32;adds&#32;&quot;.obj&quot;&#32;extension&#32;if&#32;none&#32;is&#32;found.</emphasis>
00483 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;((Arg&#32;==&#32;<emphasis role="stringliteral">&quot;-o&quot;</emphasis>&#32;||&#32;Arg&#32;==&#32;<emphasis role="stringliteral">&quot;/o&quot;</emphasis>)&#32;&amp;&amp;&#32;I&#32;!=&#32;R)
00484 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;LastO&#32;=&#32;I[-1];&#32;<emphasis role="comment">//&#32;Next&#32;argument&#32;(reverse&#32;iterator)</emphasis>
00485 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(Arg.startswith(<emphasis role="stringliteral">&quot;/Fo&quot;</emphasis>)&#32;||&#32;Arg.startswith(<emphasis role="stringliteral">&quot;-Fo&quot;</emphasis>))
00486 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;LastO&#32;=&#32;Arg.drop_front(3).str();
00487 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(Arg.startswith(<emphasis role="stringliteral">&quot;/o&quot;</emphasis>)&#32;||&#32;Arg.startswith(<emphasis role="stringliteral">&quot;-o&quot;</emphasis>))
00488 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;LastO&#32;=&#32;Arg.drop_front(2).str();
00489 
00490 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!LastO.empty()&#32;&amp;&amp;&#32;!llvm::sys::path::has_extension(LastO))
00491 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;LastO.append(<emphasis role="stringliteral">&quot;.obj&quot;</emphasis>);
00492 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00493 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00494 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(Arg&#32;==&#32;<emphasis role="stringliteral">&quot;-resource-dir&quot;</emphasis>)
00495 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;HasResourceDir&#32;=&#32;<emphasis role="keyword">true</emphasis>;
00496 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00497 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00498 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;tooling::CommandLineArguments&#32;AdjustedArgs(Args.begin(),&#32;FlagsEnd);
00499 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;The&#32;clang-cl&#32;driver&#32;passes&#32;&quot;-o&#32;-&quot;&#32;to&#32;the&#32;frontend.&#32;Inject&#32;the&#32;real</emphasis>
00500 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;file&#32;here&#32;to&#32;ensure&#32;&quot;-MT&quot;&#32;can&#32;be&#32;deduced&#32;if&#32;need&#32;be.</emphasis>
00501 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(ClangCLMode&#32;&amp;&amp;&#32;!LastO.empty())&#32;{
00502 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;AdjustedArgs.push_back(<emphasis role="stringliteral">&quot;/clang:-o&quot;</emphasis>);
00503 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;AdjustedArgs.push_back(<emphasis role="stringliteral">&quot;/clang:&quot;</emphasis>&#32;+&#32;LastO);
00504 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00505 
00506 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!HasResourceDir)&#32;{
00507 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;StringRef&#32;ResourceDir&#32;=
00508 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ResourceDirCache.findResourceDir(Args,&#32;ClangCLMode);
00509 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!ResourceDir.empty())&#32;{
00510 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;AdjustedArgs.push_back(<emphasis role="stringliteral">&quot;-resource-dir&quot;</emphasis>);
00511 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;AdjustedArgs.push_back(std::string(ResourceDir));
00512 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00513 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00514 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;AdjustedArgs.insert(AdjustedArgs.end(),&#32;FlagsEnd,&#32;Args.end());
00515 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;AdjustedArgs;
00516 &#32;&#32;&#32;&#32;&#32;&#32;});
00517 
00518 &#32;&#32;SharedStream&#32;Errs(llvm::errs());
00519 &#32;&#32;<emphasis role="comment">//&#32;Print&#32;out&#32;the&#32;dependency&#32;results&#32;to&#32;STDOUT&#32;by&#32;default.</emphasis>
00520 &#32;&#32;SharedStream&#32;DependencyOS(llvm::outs());
00521 
00522 &#32;&#32;DependencyScanningService&#32;Service(ScanMode,&#32;Format,&#32;ReuseFileManager,
00523 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;SkipExcludedPPRanges);
00524 &#32;&#32;llvm::ThreadPool&#32;Pool(llvm::hardware_concurrency(NumThreads));
00525 &#32;&#32;std::vector&lt;std::unique_ptr&lt;DependencyScanningTool&gt;&gt;&#32;WorkerTools;
00526 &#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">unsigned</emphasis>&#32;I&#32;=&#32;0;&#32;I&#32;&lt;&#32;Pool.getThreadCount();&#32;++I)
00527 &#32;&#32;&#32;&#32;WorkerTools.push_back(std::make_unique&lt;DependencyScanningTool&gt;(Service));
00528 
00529 &#32;&#32;std::vector&lt;SingleCommandCompilationDatabase&gt;&#32;Inputs;
00530 &#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(tooling::CompileCommand&#32;Cmd&#32;:
00531 &#32;&#32;&#32;&#32;&#32;&#32;&#32;AdjustingCompilations-&gt;getAllCompileCommands())
00532 &#32;&#32;&#32;&#32;Inputs.emplace_back(Cmd);
00533 
00534 &#32;&#32;std::atomic&lt;bool&gt;&#32;HadErrors(<emphasis role="keyword">false</emphasis>);
00535 &#32;&#32;<link linkend="_class_full_deps">FullDeps</link>&#32;FD;
00536 &#32;&#32;std::mutex&#32;Lock;
00537 &#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;Index&#32;=&#32;0;
00538 
00539 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(Verbose)&#32;{
00540 &#32;&#32;&#32;&#32;llvm::outs()&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;Running&#32;clang-scan-deps&#32;on&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;Inputs.size()
00541 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;files&#32;using&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;Pool.getThreadCount()&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;workers\n&quot;</emphasis>;
00542 &#32;&#32;}
00543 &#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">unsigned</emphasis>&#32;I&#32;=&#32;0;&#32;I&#32;&lt;&#32;Pool.getThreadCount();&#32;++I)&#32;{
00544 &#32;&#32;&#32;&#32;Pool.async([I,&#32;&amp;Lock,&#32;&amp;Index,&#32;&amp;Inputs,&#32;&amp;HadErrors,&#32;&amp;FD,&#32;&amp;WorkerTools,
00545 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;DependencyOS,&#32;&amp;Errs]()&#32;{
00546 &#32;&#32;&#32;&#32;&#32;&#32;llvm::StringSet&lt;&gt;&#32;AlreadySeenModules;
00547 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(<emphasis role="keyword">true</emphasis>)&#32;{
00548 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_class_single_command_compilation_database">SingleCommandCompilationDatabase</link>&#32;*Input;
00549 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::string&#32;Filename;
00550 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::string&#32;CWD;
00551 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;LocalIndex;
00552 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Take&#32;the&#32;next&#32;input.</emphasis>
00553 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00554 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::unique_lock&lt;std::mutex&gt;&#32;LockGuard(Lock);
00555 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(Index&#32;&gt;=&#32;Inputs.size())
00556 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
00557 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;LocalIndex&#32;=&#32;Index;
00558 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Input&#32;=&#32;&amp;Inputs[Index++];
00559 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;tooling::CompileCommand&#32;Cmd&#32;=&#32;Input-&gt;<link linkend="_class_single_command_compilation_database_1a50bfa7b1b199d95741fa4c6515e773df">getAllCompileCommands</link>()[0];
00560 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Filename&#32;=&#32;std::move(Cmd.Filename);
00561 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;CWD&#32;=&#32;std::move(Cmd.Directory);
00562 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00563 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Run&#32;the&#32;tool&#32;on&#32;it.</emphasis>
00564 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(Format&#32;==&#32;ScanningOutputFormat::Make)&#32;{
00565 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;MaybeFile&#32;=&#32;WorkerTools[I]-&gt;getDependencyFile(*Input,&#32;CWD);
00566 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(handleMakeDependencyToolResult(Filename,&#32;MaybeFile,&#32;DependencyOS,
00567 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Errs))
00568 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;HadErrors&#32;=&#32;<emphasis role="keyword">true</emphasis>;
00569 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
00570 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;MaybeFullDeps&#32;=&#32;WorkerTools[I]-&gt;getFullDependencies(
00571 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*Input,&#32;CWD,&#32;AlreadySeenModules);
00572 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(handleFullDependencyToolResult(Filename,&#32;MaybeFullDeps,&#32;FD,
00573 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;LocalIndex,&#32;DependencyOS,&#32;Errs))
00574 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;HadErrors&#32;=&#32;<emphasis role="keyword">true</emphasis>;
00575 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00576 &#32;&#32;&#32;&#32;&#32;&#32;}
00577 &#32;&#32;&#32;&#32;});
00578 &#32;&#32;}
00579 &#32;&#32;Pool.wait();
00580 
00581 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(Format&#32;==&#32;ScanningOutputFormat::Full)
00582 &#32;&#32;&#32;&#32;FD.<link linkend="_class_full_deps_1a3a42a88ad1367c97148feb477792e39d">printFullOutput</link>(llvm::outs());
00583 
00584 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;HadErrors;
00585 }
</programlisting></section>
