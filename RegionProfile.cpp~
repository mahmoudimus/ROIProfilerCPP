#include "RegionProfile.h"
#include <iomanip>
/********************************************//**
 * ! \brief Returns Location after Token.
 *  The end location of a function oder stmt returns
 *  the location before a brace or a semicolon.
 *  The events have to be called after the end token.
 *  This location is returned by this function.
 ***********************************************/
SourceLocation getLocationAfterToken( SourceLocation sourceLocation, ASTContext *localContext ) {
    // get the current token at the specified location
    Optional <Token> currentToken( clang::Lexer::findNextToken(
            sourceLocation, localContext->getSourceManager( ),
            localContext->getLangOpts( )));

    // if token is raw identifier return last token
    if ( currentToken->getKind( ) == clang::tok::raw_identifier ) {
        sourceLocation = sourceLocation.getLocWithOffset( -1 );
    }
        // if token is semi return this token
    else if ( currentToken->getKind( ) == clang::tok::semi ) {
        sourceLocation = sourceLocation.getLocWithOffset( 0 );
    }
        // if token is brace return next token
    else if ( currentToken->getKind( ) == clang::tok::r_brace ) {
        sourceLocation = sourceLocation.getLocWithOffset( 1 );
    }

    // find location after semicolon
    SourceLocation locAfterSemi( clang::Lexer::findLocationAfterToken(
            sourceLocation, clang::tok::semi,
            localContext->getSourceManager( ),
            localContext->getLangOpts( ), true ));

    // find location after brace
    SourceLocation locAfterBrace( clang::Lexer::findLocationAfterToken(
            sourceLocation, clang::tok::r_brace,
            localContext->getSourceManager( ),
            localContext->getLangOpts( ), true ));

    // if loc after semi is valid return locAfterSemi
    if ( currentToken->getKind( ) != clang::tok::r_brace && locAfterSemi.isValid( )) {
        sourceLocation = locAfterSemi;
    }
        // if loc after brace is valid return locAfterBrace
    else if ( currentToken->getKind( ) != clang::tok::r_brace && locAfterBrace.isValid( )) {
        sourceLocation = locAfterBrace;
    }

    // if token is brace return current location

    return sourceLocation;
}

/********************************************//**
 * ! \brief Traverses recursively through the body
 *  of the specified function body. Function Body
 *  is a set of statements.
 ***********************************************/
void traverseChildren( Stmt *funcBody, ASTContext *localContext ) {

    // count statements in body and search for parent statements
    int childrenSize = 0;
    Stmt *parentStmt = NULL;
    for ( Stmt::child_iterator i = funcBody->child_begin( ), e = funcBody->child_end( ); i != e; ++i ) {
        Stmt *currStmt = *i;
        if ( currStmt->getStmtClass( ) != Stmt::ReturnStmtClass ) {
            childrenSize++;
            if ( currStmt->getStmtClass( ) == Stmt::CallExprClass
                 || currStmt->getStmtClass( ) == Stmt::ForStmtClass
                 || currStmt->getStmtClass( ) == Stmt::WhileStmtClass
                 || currStmt->getStmtClass( ) == Stmt::IfStmtClass
                 || currStmt->getStmtClass( ) == Stmt::CXXMemberCallExprClass
                    ) {
                parentStmt = currStmt;
            }
        }
    }

    // if body has multiple children, annotate all statements with performance counter
    if ( childrenSize > 1 ) {
        bool isCompoundedStatement = false;
        SourceLocation lastEventEndLocation;

        for ( Stmt::child_iterator i = funcBody->child_begin( ), e = funcBody->child_end( );
              i != e; ++i ) {
            Stmt *currStmt = *i;
            currStmt->getStmtClassName( );

            if ( currStmt->getStmtClass( ) != Stmt::ReturnStmtClass ) {

                SourceLocation beginLoc = currStmt->getBeginLoc( );
                SourceLocation endLoc = getLocationAfterToken( currStmt->getEndLoc( ), localContext );

                // if statement runtime is not merged
                if ( !isCompoundedStatement ) {

                    // set start time always
                    rewriter.InsertText( beginLoc,
                                         "dataStorage.startEvent(" + std::to_string( internalIdentifier ) + ");\n" );

                    // if statement is not parent, wait for next statement
                    if ( currStmt->getStmtClass( ) != Stmt::CallExprClass &&
                         currStmt->getStmtClass( ) != Stmt::ForStmtClass &&
                         currStmt->getStmtClass( ) != Stmt::WhileStmtClass &&
                         currStmt->getStmtClass( ) != Stmt::IfStmtClass &&
                         currStmt->getStmtClass( ) != Stmt::CXXMemberCallExprClass
                            ) {

                        lastEventEndLocation = endLoc;
                        isCompoundedStatement = true;

                        // statement is parent, do not merge runtime
                    } else {
                        rewriter.InsertText( endLoc,
                                             "dataStorage.endEvent(" + std::to_string( internalIdentifier ) + ");\n" );
                        // concat stmtclass and stmtid and add to identifierString
                        int64_t id = currStmt->getID( *localContext );
                        std::string idString =
                                currStmt->getStmtClassName( ) + std::string( " " ) + std::to_string( id );
                        identifierString += idString + ",";

                        isCompoundedStatement = false;
                        internalIdentifier++;
                    }

                    // if waiting for next statement
                } else {

                    // if statement is parent, stop last merge and annotate this statement
                    if ( currStmt->getStmtClass( ) == Stmt::CallExprClass ||
                         currStmt->getStmtClass( ) == Stmt::ForStmtClass ||
                         currStmt->getStmtClass( ) == Stmt::WhileStmtClass ||
                         currStmt->getStmtClass( ) == Stmt::IfStmtClass ||
                         currStmt->getStmtClass( ) == Stmt::CXXMemberCallExprClass
                            ) {

                        // end old event
                        rewriter.InsertText( beginLoc,
                                             "dataStorage.endEvent(" + std::to_string( internalIdentifier ) +
                                             ");\n" );

                        // add compound description to identifier string
                        identifierString += "CustomCompoundStmt i00000" + to_string( internalIdentifier++ ) + ",";

                        // start and end new event around parent function
                        rewriter.InsertText( beginLoc,
                                             "dataStorage.startEvent(" + std::to_string( internalIdentifier ) +
                                             ");\n" );
                        rewriter.InsertText( endLoc,
                                             "dataStorage.endEvent(" + std::to_string( internalIdentifier++ ) +
                                             ");\n" );

                        // concat stmtclass and stmtid and add to identifierString
                        int64_t id = currStmt->getID( *localContext );
                        std::string idString =
                                currStmt->getStmtClassName( ) + std::string( " " ) + std::to_string( id );
                        identifierString += idString + ",";

                        isCompoundedStatement = false;

                        // wait for next statement again
                    } else {
                        lastEventEndLocation = endLoc;
                        isCompoundedStatement = true;
                    }
                }
            }
        }

        // end last event
        if ( isCompoundedStatement && lastEventEndLocation.isValid( )) {
            rewriter.InsertText( lastEventEndLocation,
                                 "dataStorage.endEvent(" + std::to_string( internalIdentifier++ ) + ");\n" );
            identifierString += "CustomCompoundStmt i00000" + to_string( internalIdentifier ) + ",";
        }

        // set transformation successful
        transformationSuccess = true;

    }
        // if body has zero or one statements
    else {
        // if one child is parent of another set of statements
        // call traverseChildren recursively
        if ( parentStmt != NULL ) {
            if ( parentStmt->getStmtClass( ) == Stmt::CallExprClass ) {
                CallExpr *expr = cast<CallExpr>( parentStmt );
                Stmt *nextBody = expr->getDirectCallee( )->getBody( );
                traverseChildren( nextBody, localContext );
            }
            if ( parentStmt->getStmtClass( ) == Stmt::ForStmtClass ) {
                ForStmt *forStmt = cast<ForStmt>( parentStmt );
                Stmt *nextBody = forStmt->getBody( );
                traverseChildren( nextBody, localContext );
            }
            if ( parentStmt->getStmtClass( ) == Stmt::WhileStmtClass ) {
                WhileStmt *whileStmt = cast<WhileStmt>( parentStmt );
                Stmt *nextBody = whileStmt->getBody( );
                traverseChildren( nextBody, localContext );
            }
            if ( parentStmt->getStmtClass( ) == Stmt::IfStmtClass ) {
                IfStmt *ifStmt = cast<IfStmt>( parentStmt );
                Stmt *nextBody = ifStmt->getThen( );
                traverseChildren( nextBody, localContext );
            }
            if ( parentStmt->getStmtClass( ) == Stmt::CXXMemberCallExprClass ) {
                CXXMemberCallExpr *cxxMemberCallExpr = cast<CXXMemberCallExpr>( parentStmt );
                Stmt *nextBody = cxxMemberCallExpr->getDirectCallee( )->getBody();
                traverseChildren( nextBody, localContext );
            }
            // if return is the only statement annotate nothing
        } else {
            // cout << "hagn-tool hasn't found any statements!\n";
        }
    }
}

// AST Tree Visitor
class Visitor : public RecursiveASTVisitor<Visitor> {
private:
    ASTContext *astContext; // used for getting additional AST info

public:
    explicit Visitor( ASTContext *Context )
            : astContext( Context ) // initialize private members
    {
        rewriter.setSourceMgr( astContext->getSourceManager( ),
                               astContext->getLangOpts( ));
    }

    /********************************************//**
     * ! \brief Visit every statement linked to input file.
     *   If a stmt option is specified the tools searches
     *   for the first occurrence of an statement with the
     *   specified id. The statement is then casted to
     *   the matching statement class and body of the
     *   statement will be extracted and annotated.
     ***********************************************/
    virtual bool VisitStmt( Stmt *stmt ) {
        // only statements in main file
        if ( astContext->getSourceManager( ).isInMainFile( stmt->getBeginLoc( ))) {
            // when stmt identifier is specified
            if ( statementOption != "start" ) {

                // get statement identifier and cast to string
                int64_t currentId = stmt->getID( *astContext );
                std::string currentIdString = std::to_string( currentId );

                // find statement with matching id
                if ( currentIdString == statementOption ) {
                    rewriter.InsertText( stmt->getBeginLoc( ), "dataStorage.startEvent(1);\n" );
                    rewriter.InsertText( getLocationAfterToken( stmt->getEndLoc( ), astContext ),
                                         "dataStorage.endEvent(1);\n" );

                    if ( stmt->getStmtClass( ) == Stmt::CallExprClass ) {
                        CallExpr *expr = cast<CallExpr>( stmt );
                        Stmt *nextBody = expr->getDirectCallee( )->getBody( );
                        traverseChildren( nextBody, astContext );
                    }
                    if ( stmt->getStmtClass( ) == Stmt::ForStmtClass ) {
                        ForStmt *forStmt = cast<ForStmt>( stmt );
                        Stmt *nextBody = forStmt->getBody( );
                        traverseChildren( nextBody, astContext );
                    }
                    if ( stmt->getStmtClass( ) == Stmt::WhileStmtClass ) {
                        WhileStmt *whileStmt = cast<WhileStmt>( stmt );
                        Stmt *nextBody = whileStmt->getBody( );
                        traverseChildren( nextBody, astContext );
                    }
                    if ( stmt->getStmtClass( ) == Stmt::IfStmtClass ) {
                        IfStmt *ifStmt = cast<IfStmt>( stmt );
                        Stmt *nextBody = ifStmt->getThen( );
                        traverseChildren( nextBody, astContext );
                    }
                    if ( stmt->getStmtClass( ) == Stmt::CXXMemberCallExprClass ) {
                        CXXMemberCallExpr *cxxMemberCallExpr = cast<CXXMemberCallExpr>( stmt );
                        Stmt *nextBody = cxxMemberCallExpr->getDirectCallee( )->getBody();
                        traverseChildren( nextBody, astContext );
                    }
                }
            }
        }
        return 1;
    }

    /********************************************//**
     * ! \brief Visit every function linked to input file.
     *   The functions are traversed to find locations
     *   for initialization, runtime performance counter
     *   and for printing the summary.
     *   If stmt option is not specified, the main method
     *   will be traversed.
     ***********************************************/
    virtual bool VisitFunctionDecl( FunctionDecl *func ) {

        // find initialization location for includes and initialization of hagn lib
        if ( initializationLocation.isInvalid( ) &&
             astContext->getSourceManager( ).isInMainFile( func->getLocation( ))) {

            SourceLocation lastLocation;
            for ( auto it = astContext->getSourceManager( ).fileinfo_begin( );
                  it != astContext->getSourceManager( ).fileinfo_end( ); it++ ) {
                SourceLocation currentLocation = astContext->getSourceManager( ).getIncludeLoc(
                        astContext->getSourceManager( ).translateFile( it->first ));
                if (currentLocation.isValid() && astContext->getSourceManager().isInFileID(currentLocation, astContext->getSourceManager( ).getMainFileID( ))) {
                    currentLocation.dump(astContext->getSourceManager());

                    if ( astContext->getSourceManager( ).getSpellingLineNumber( lastLocation ) <= astContext->getSourceManager( ).getSpellingLineNumber( currentLocation ) ) {
                        lastLocation = currentLocation;
                    }
                }
            }

            initializationLocation = astContext->getSourceManager( ).translateFileLineCol(
                    astContext->getSourceManager( ).getFileEntryForID( astContext->getSourceManager( ).getMainFileID( ) ),
                    astContext->getSourceManager( ).getSpellingLineNumber( lastLocation )+1, 1 );
        }

        // find first location in main class for runtime measurement
        if ( runtimeStartLocation.isInvalid( ) &&
             astContext->getSourceManager( ).isInMainFile( func->getLocation( ))) {
            if ( func->isMain( )) {
                SourceLocation locAfterBrace( clang::Lexer::findLocationAfterToken(
                        func->getBody( )->getBeginLoc( ).getLocWithOffset( -1 ), clang::tok::l_brace,
                        astContext->getSourceManager( ),
                        astContext->getLangOpts( ), true ));

                runtimeStartLocation = locAfterBrace;
            }
        }

        // find summary location in main class for ending runtime event and print event
        if ( summaryLocation.isInvalid( ) &&
             astContext->getSourceManager( ).isInMainFile( func->getLocation( ))) {
            if ( func->isMain( )) {
                for ( Stmt::child_iterator i = func->getBody( )->child_begin( ), e = func->getBody( )->child_end( );
                      i != e; ++i ) {
                    Stmt *currStmt = *i;
                    if ( currStmt->getStmtClass( ) == Stmt::ReturnStmtClass ) {
                        summaryLocation = currStmt->getBeginLoc( );
                    }
                }
            }
        }

        // annotate only main function if statement option is start
        if ( astContext->getSourceManager( ).isInMainFile( func->getLocation( ))) {
            if ( statementOption == "start" ) {
                if ( func->isMain( )) {
                    traverseChildren( func->getBody( ), astContext );
                }
            }
        }

        return 1;
    }

    virtual ~Visitor( ) { }
};

/********************************************//**
 * ! \brief Customizes a Instance of ASTConsumer.
 *   The Consumer is used by the Frontend Action
 *   to traverse the AST Tree
 ***********************************************/
class Consumer : public ASTConsumer {
private:
    Visitor Visitor;

public:
    explicit Consumer( ASTContext *Context )
            : Visitor( Context ) { }

    virtual void HandleTranslationUnit( ASTContext &Context ) override {
        Visitor.TraverseDecl( Context.getTranslationUnitDecl( ));
    }
};

/********************************************//**
 * ! \brief Creates ASTConsumer and returns ASTContext.
 *  A new ClangFrontendAction is created in the main,
 *  where the CompilerInstance and the SourceFiles are
 *  used to generate a new AST Tree Consumer.
 ***********************************************/
class ClangFrontendAction : public clang::ASTFrontendAction {
public:
    virtual std::unique_ptr <clang::ASTConsumer>
    CreateASTConsumer( clang::CompilerInstance &Compiler, llvm::StringRef InFile ) override {
        return std::make_unique<Consumer>( &Compiler.getASTContext( ));
    }
};

/********************************************//**
 * ! \brief The entry point of the tool.
 *  The main functions deals with the input files
 *  and options. Furthermore the ClangFrontendAction
 *  will be created and is used to transform the code.
 *  After transformation the rewritten code will be printed
 *  to the specified output file.
 ***********************************************/
int main( int argc, const char **argv ) {

    // runtime start
    std::chrono::system_clock::time_point startTime = std::chrono::system_clock::now( );

    // create Common Option Parser
    auto ExpectedParser = CommonOptionsParser::create( argc, argv, MyToolCategory, llvm::cl::Required );

    // terminate if specified options are not expected
    if ( !ExpectedParser ) {
        llvm::errs( ) << ExpectedParser.takeError( );
        return 1;
    }

    // create local parameter variables
    std::string outputFilename = "output.cpp";
    std::string stmtId = "start";

    // create the stream for output file
    std::error_code err_code;

    // parse arguments
    for ( int i = 0; i < argc; ++i ) {

        // if output file is specified
        if ( std::string( argv[ i ] ) == "-o" ) {
            outputFilename = std::string( argv[ i + 1 ] );
        }

        // if statement id is specified
        if ( std::string( argv[ i ] ) == "--stmt" ) {
            stmtId = std::string( argv[ i + 1 ] );
        }
    }

    // Print Hagn Tool Information
    cout << setw( 82 ) << setfill( '=' ) << "\n";
    cout << setw( 45 ) << setfill( ' ' ) << "Hagn Tool" << setw( 25 ) << "\n";
    cout << setw( 83 ) << setfill( '=' ) << "\n\n";
    cout << "Input File: " << argv[ 1 ] << "\n";
    cout << "Output File: " << outputFilename << "\n";
    // print no statement id notification
    if ( stmtId == "start" ) {
        cout << "Mode: Annotating Main Function\n";
    } else {
        cout << "Mode: Annotate specified Statement\n";
        cout << "Statement ID: " << stmtId << "\n";
    }

    // add statement id to global scope
    statementOption = stmtId;

    // set destination of output file to the specified file
    llvm::raw_fd_ostream dest( outputFilename, err_code );

    // Parse the options and create new ClangTool
    CommonOptionsParser &OptionsParser = ExpectedParser.get( );
    ClangTool Tool( OptionsParser.getCompilations( ),
                    OptionsParser.getSourcePathList( ));

    // run the Clang Tool, creating a new FrontendAction
    int result = Tool.run( newFrontendActionFactory<ClangFrontendAction>( ).get( ));

    // add initialization and summary if transformation was successful
    if ( transformationSuccess ) {

        // if initialization Location is valid insert includes and create DataStorage Object
        identifierString.pop_back( );
        if ( initializationLocation.isValid( )) {
            rewriter.InsertText( initializationLocation,
                                 "#include \"../lib/DataStorage.cpp\"\n""DataStorage dataStorage(\"" +
                                 identifierString + "\");" );
        } else {
            cerr << "Invalid initializationLocation, Line 356";
            exit( EXIT_FAILURE );
        }

        // start an event at the beginning of the main function
        if ( runtimeStartLocation.isValid( )) {
            rewriter.InsertText( runtimeStartLocation, "dataStorage.startEvent(0);\n" );
        } else {
            cerr << "Invalid runtimeStartLocation, Line 364";
            exit( EXIT_FAILURE );
        }

        // start event and insert time summery as last step in the main function
        if ( summaryLocation.isValid( )) {
            rewriter.InsertText( summaryLocation, "dataStorage.endEvent(0);\ndataStorage.print();" );
        } else {
            cerr << "Invalid summaryLocation, Line 372";
            exit( EXIT_FAILURE );
        }

        // runtime end
        std::chrono::system_clock::time_point endTime = std::chrono::system_clock::now( );
        std::chrono::duration<double, std::milli> ms_double = endTime - startTime;

        // print hagn tool runtime
        cout << "Runtime: " << ms_double.count( ) << "ms\n";

        // print program finished notification
        cout << "Success: Yes\n\n";

        // add transformed code to output file
        rewriter.getEditBuffer( rewriter.getSourceMgr( ).getMainFileID( )).write( dest );


    } else {
        cout << "Success: No\n\n";
        exit( EXIT_FAILURE );
    }

    return result;
}
